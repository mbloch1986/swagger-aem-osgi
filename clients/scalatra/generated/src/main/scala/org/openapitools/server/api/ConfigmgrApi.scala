/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 */


package org.openapitools.server.api

import org.openapitools.server.model.AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo
import org.openapitools.server.model.AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo
import org.openapitools.server.model.AnalyticsComponentQueryCacheServiceInfo
import org.openapitools.server.model.ApacheSlingHealthCheckResultHTMLSerializerInfo
import java.math.BigDecimal
import org.openapitools.server.model.ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo
import org.openapitools.server.model.ComAdobeAemTransactionCoreImplTransactionRecorderInfo
import org.openapitools.server.model.ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo
import org.openapitools.server.model.ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo
import org.openapitools.server.model.ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo
import org.openapitools.server.model.ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo
import org.openapitools.server.model.ComAdobeCqAccountApiAccountManagementServiceInfo
import org.openapitools.server.model.ComAdobeCqAccountImplAccountManagementServletInfo
import org.openapitools.server.model.ComAdobeCqAddressImplLocationLocationListServletInfo
import org.openapitools.server.model.ComAdobeCqAuditPurgeDamInfo
import org.openapitools.server.model.ComAdobeCqAuditPurgePagesInfo
import org.openapitools.server.model.ComAdobeCqAuditPurgeReplicationInfo
import org.openapitools.server.model.ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo
import org.openapitools.server.model.ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo
import org.openapitools.server.model.ComAdobeCqCdnRewriterImplCDNRewriterInfo
import org.openapitools.server.model.ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo
import org.openapitools.server.model.ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo
import org.openapitools.server.model.ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo
import org.openapitools.server.model.ComAdobeCqCommerceImplAssetStaticImageHandlerInfo
import org.openapitools.server.model.ComAdobeCqCommerceImplAssetVideoHandlerInfo
import org.openapitools.server.model.ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo
import org.openapitools.server.model.ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo
import org.openapitools.server.model.ComAdobeCqCommercePimImplPageEventListenerInfo
import org.openapitools.server.model.ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo
import org.openapitools.server.model.ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo
import org.openapitools.server.model.ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo
import org.openapitools.server.model.ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo
import org.openapitools.server.model.ComAdobeCqDamCfmImplComponentComponentConfigImplInfo
import org.openapitools.server.model.ComAdobeCqDamCfmImplConfFeatureConfigImplInfo
import org.openapitools.server.model.ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo
import org.openapitools.server.model.ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo
import org.openapitools.server.model.ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo
import org.openapitools.server.model.ComAdobeCqDamDmProcessImagePTiffManagerImplInfo
import org.openapitools.server.model.ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo
import org.openapitools.server.model.ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo
import org.openapitools.server.model.ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo
import org.openapitools.server.model.ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo
import org.openapitools.server.model.ComAdobeCqDamS7imagingImplIsImageServerComponentInfo
import org.openapitools.server.model.ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo
import org.openapitools.server.model.ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo
import org.openapitools.server.model.ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo
import org.openapitools.server.model.ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo
import org.openapitools.server.model.ComAdobeCqDeserfwImplDeserializationFirewallImplInfo
import org.openapitools.server.model.ComAdobeCqDtmImplServiceDTMWebServiceImplInfo
import org.openapitools.server.model.ComAdobeCqDtmImplServletsDTMDeployHookServletInfo
import org.openapitools.server.model.ComAdobeCqDtmReactorImplServiceWebServiceImplInfo
import org.openapitools.server.model.ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo
import org.openapitools.server.model.ComAdobeCqHcContentPackagesHealthCheckInfo
import org.openapitools.server.model.ComAdobeCqHistoryImplHistoryRequestFilterInfo
import org.openapitools.server.model.ComAdobeCqHistoryImplHistoryServiceImplInfo
import org.openapitools.server.model.ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo
import org.openapitools.server.model.ComAdobeCqProjectsImplServletProjectImageServletInfo
import org.openapitools.server.model.ComAdobeCqProjectsPurgeSchedulerInfo
import org.openapitools.server.model.ComAdobeCqScheduledExporterImplScheduledExporterImplInfo
import org.openapitools.server.model.ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo
import org.openapitools.server.model.ComAdobeCqScreensDeviceImplDeviceServiceInfo
import org.openapitools.server.model.ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo
import org.openapitools.server.model.ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo
import org.openapitools.server.model.ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo
import org.openapitools.server.model.ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo
import org.openapitools.server.model.ComAdobeCqScreensImplScreensChannelPostProcessorInfo
import org.openapitools.server.model.ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo
import org.openapitools.server.model.ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo
import org.openapitools.server.model.ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo
import org.openapitools.server.model.ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo
import org.openapitools.server.model.ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo
import org.openapitools.server.model.ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo
import org.openapitools.server.model.ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo
import org.openapitools.server.model.ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo
import org.openapitools.server.model.ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo
import org.openapitools.server.model.ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo
import org.openapitools.server.model.ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo
import org.openapitools.server.model.ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo
import org.openapitools.server.model.ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo
import org.openapitools.server.model.ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo
import org.openapitools.server.model.ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo
import org.openapitools.server.model.ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo
import org.openapitools.server.model.ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo
import org.openapitools.server.model.ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo
import org.openapitools.server.model.ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo
import org.openapitools.server.model.ComAdobeCqSocialCalendarServletsTimeZoneServletInfo
import org.openapitools.server.model.ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo
import org.openapitools.server.model.ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo
import org.openapitools.server.model.ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo
import org.openapitools.server.model.ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo
import org.openapitools.server.model.ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo
import org.openapitools.server.model.ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo
import org.openapitools.server.model.ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo
import org.openapitools.server.model.ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo
import org.openapitools.server.model.ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo
import org.openapitools.server.model.ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo
import org.openapitools.server.model.ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo
import org.openapitools.server.model.ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo
import org.openapitools.server.model.ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo
import org.openapitools.server.model.ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo
import org.openapitools.server.model.ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo
import org.openapitools.server.model.ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo
import org.openapitools.server.model.ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo
import org.openapitools.server.model.ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo
import org.openapitools.server.model.ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo
import org.openapitools.server.model.ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo
import org.openapitools.server.model.ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo
import org.openapitools.server.model.ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo
import org.openapitools.server.model.ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo
import org.openapitools.server.model.ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo
import org.openapitools.server.model.ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo
import org.openapitools.server.model.ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo
import org.openapitools.server.model.ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo
import org.openapitools.server.model.ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo
import org.openapitools.server.model.ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo
import org.openapitools.server.model.ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo
import org.openapitools.server.model.ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo
import org.openapitools.server.model.ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo
import org.openapitools.server.model.ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo
import org.openapitools.server.model.ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo
import org.openapitools.server.model.ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo
import org.openapitools.server.model.ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo
import org.openapitools.server.model.ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo
import org.openapitools.server.model.ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo
import org.openapitools.server.model.ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo
import org.openapitools.server.model.ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo
import org.openapitools.server.model.ComAdobeCqSocialGroupImplGroupServiceImplInfo
import org.openapitools.server.model.ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo
import org.openapitools.server.model.ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo
import org.openapitools.server.model.ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo
import org.openapitools.server.model.ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo
import org.openapitools.server.model.ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo
import org.openapitools.server.model.ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo
import org.openapitools.server.model.ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo
import org.openapitools.server.model.ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo
import org.openapitools.server.model.ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo
import org.openapitools.server.model.ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo
import org.openapitools.server.model.ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo
import org.openapitools.server.model.ComAdobeCqSocialNotificationsImplMentionsRouterInfo
import org.openapitools.server.model.ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo
import org.openapitools.server.model.ComAdobeCqSocialNotificationsImplNotificationsRouterInfo
import org.openapitools.server.model.ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo
import org.openapitools.server.model.ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo
import org.openapitools.server.model.ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo
import org.openapitools.server.model.ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo
import org.openapitools.server.model.ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo
import org.openapitools.server.model.ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo
import org.openapitools.server.model.ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo
import org.openapitools.server.model.ComAdobeCqSocialScoringImplScoringEventListenerInfo
import org.openapitools.server.model.ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo
import org.openapitools.server.model.ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo
import org.openapitools.server.model.ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo
import org.openapitools.server.model.ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo
import org.openapitools.server.model.ComAdobeCqSocialSrpImplSocialSolrConnectorInfo
import org.openapitools.server.model.ComAdobeCqSocialSyncImplDiffChangesObserverInfo
import org.openapitools.server.model.ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo
import org.openapitools.server.model.ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo
import org.openapitools.server.model.ComAdobeCqSocialSyncImplUserSyncListenerImplInfo
import org.openapitools.server.model.ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo
import org.openapitools.server.model.ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo
import org.openapitools.server.model.ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo
import org.openapitools.server.model.ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo
import org.openapitools.server.model.ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo
import org.openapitools.server.model.ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo
import org.openapitools.server.model.ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo
import org.openapitools.server.model.ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo
import org.openapitools.server.model.ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo
import org.openapitools.server.model.ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo
import org.openapitools.server.model.ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo
import org.openapitools.server.model.ComAdobeCqSocialUserImplTransportHttpToPublisherInfo
import org.openapitools.server.model.ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo
import org.openapitools.server.model.ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo
import org.openapitools.server.model.ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo
import org.openapitools.server.model.ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo
import org.openapitools.server.model.ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo
import org.openapitools.server.model.ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo
import org.openapitools.server.model.ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo
import org.openapitools.server.model.ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo
import org.openapitools.server.model.ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo
import org.openapitools.server.model.ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo
import org.openapitools.server.model.ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo
import org.openapitools.server.model.ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo
import org.openapitools.server.model.ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo
import org.openapitools.server.model.ComAdobeFormsCommonServiceImplDefaultDataProviderInfo
import org.openapitools.server.model.ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo
import org.openapitools.server.model.ComAdobeFormsCommonServletTempCleanUpTaskInfo
import org.openapitools.server.model.ComAdobeGraniteAcpPlatformPlatformServletInfo
import org.openapitools.server.model.ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo
import org.openapitools.server.model.ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo
import org.openapitools.server.model.ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo
import org.openapitools.server.model.ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo
import org.openapitools.server.model.ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo
import org.openapitools.server.model.ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo
import org.openapitools.server.model.ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo
import org.openapitools.server.model.ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo
import org.openapitools.server.model.ComAdobeGraniteAuthImsImplIMSProviderImplInfo
import org.openapitools.server.model.ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo
import org.openapitools.server.model.ComAdobeGraniteAuthImsInfo
import org.openapitools.server.model.ComAdobeGraniteAuthOauthAccesstokenProviderInfo
import org.openapitools.server.model.ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo
import org.openapitools.server.model.ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo
import org.openapitools.server.model.ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo
import org.openapitools.server.model.ComAdobeGraniteAuthOauthImplGithubProviderImplInfo
import org.openapitools.server.model.ComAdobeGraniteAuthOauthImplGraniteProviderInfo
import org.openapitools.server.model.ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo
import org.openapitools.server.model.ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo
import org.openapitools.server.model.ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo
import org.openapitools.server.model.ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo
import org.openapitools.server.model.ComAdobeGraniteAuthOauthProviderInfo
import org.openapitools.server.model.ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo
import org.openapitools.server.model.ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo
import org.openapitools.server.model.ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo
import org.openapitools.server.model.ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo
import org.openapitools.server.model.ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo
import org.openapitools.server.model.ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo
import org.openapitools.server.model.ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo
import org.openapitools.server.model.ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo
import org.openapitools.server.model.ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo
import org.openapitools.server.model.ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo
import org.openapitools.server.model.ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo
import org.openapitools.server.model.ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo
import org.openapitools.server.model.ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo
import org.openapitools.server.model.ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo
import org.openapitools.server.model.ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo
import org.openapitools.server.model.ComAdobeGraniteCompatrouterImplRoutingConfigInfo
import org.openapitools.server.model.ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo
import org.openapitools.server.model.ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo
import org.openapitools.server.model.ComAdobeGraniteContexthubImplContextHubImplInfo
import org.openapitools.server.model.ComAdobeGraniteCorsImplCORSPolicyImplInfo
import org.openapitools.server.model.ComAdobeGraniteCsrfImplCSRFFilterInfo
import org.openapitools.server.model.ComAdobeGraniteCsrfImplCSRFServletInfo
import org.openapitools.server.model.ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo
import org.openapitools.server.model.ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo
import org.openapitools.server.model.ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo
import org.openapitools.server.model.ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo
import org.openapitools.server.model.ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo
import org.openapitools.server.model.ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo
import org.openapitools.server.model.ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo
import org.openapitools.server.model.ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo
import org.openapitools.server.model.ComAdobeGraniteFragsImplRandomFeatureInfo
import org.openapitools.server.model.ComAdobeGraniteHttpcacheFileFileCacheStoreInfo
import org.openapitools.server.model.ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo
import org.openapitools.server.model.ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo
import org.openapitools.server.model.ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo
import org.openapitools.server.model.ComAdobeGraniteInfocollectorInfoCollectorInfo
import org.openapitools.server.model.ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo
import org.openapitools.server.model.ComAdobeGraniteLicenseImplLicenseCheckFilterInfo
import org.openapitools.server.model.ComAdobeGraniteLoggingImplLogAnalyserImplInfo
import org.openapitools.server.model.ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo
import org.openapitools.server.model.ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo
import org.openapitools.server.model.ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo
import org.openapitools.server.model.ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo
import org.openapitools.server.model.ComAdobeGraniteMonitoringImplScriptConfigImplInfo
import org.openapitools.server.model.ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo
import org.openapitools.server.model.ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo
import org.openapitools.server.model.ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo
import org.openapitools.server.model.ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo
import org.openapitools.server.model.ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo
import org.openapitools.server.model.ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo
import org.openapitools.server.model.ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo
import org.openapitools.server.model.ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo
import org.openapitools.server.model.ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo
import org.openapitools.server.model.ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo
import org.openapitools.server.model.ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo
import org.openapitools.server.model.ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo
import org.openapitools.server.model.ComAdobeGraniteOptoutImplOptOutServiceImplInfo
import org.openapitools.server.model.ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo
import org.openapitools.server.model.ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo
import org.openapitools.server.model.ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo
import org.openapitools.server.model.ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo
import org.openapitools.server.model.ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo
import org.openapitools.server.model.ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo
import org.openapitools.server.model.ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo
import org.openapitools.server.model.ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo
import org.openapitools.server.model.ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo
import org.openapitools.server.model.ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo
import org.openapitools.server.model.ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo
import org.openapitools.server.model.ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo
import org.openapitools.server.model.ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo
import org.openapitools.server.model.ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo
import org.openapitools.server.model.ComAdobeGraniteRepositoryImplCommitStatsConfigInfo
import org.openapitools.server.model.ComAdobeGraniteRepositoryServiceUserConfigurationInfo
import org.openapitools.server.model.ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo
import org.openapitools.server.model.ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo
import org.openapitools.server.model.ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo
import org.openapitools.server.model.ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo
import org.openapitools.server.model.ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo
import org.openapitools.server.model.ComAdobeGraniteRestImplServletDefaultGETServletInfo
import org.openapitools.server.model.ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo
import org.openapitools.server.model.ComAdobeGraniteSecurityUserUserPropertiesServiceInfo
import org.openapitools.server.model.ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo
import org.openapitools.server.model.ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo
import org.openapitools.server.model.ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo
import org.openapitools.server.model.ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo
import org.openapitools.server.model.ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo
import org.openapitools.server.model.ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo
import org.openapitools.server.model.ComAdobeGraniteThreaddumpThreadDumpCollectorInfo
import org.openapitools.server.model.ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo
import org.openapitools.server.model.ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo
import org.openapitools.server.model.ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo
import org.openapitools.server.model.ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo
import org.openapitools.server.model.ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo
import org.openapitools.server.model.ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo
import org.openapitools.server.model.ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo
import org.openapitools.server.model.ComAdobeGraniteWorkflowCoreJobJobHandlerInfo
import org.openapitools.server.model.ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo
import org.openapitools.server.model.ComAdobeGraniteWorkflowCorePayloadMapCacheInfo
import org.openapitools.server.model.ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo
import org.openapitools.server.model.ComAdobeGraniteWorkflowCoreWorkflowConfigInfo
import org.openapitools.server.model.ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo
import org.openapitools.server.model.ComAdobeGraniteWorkflowPurgeSchedulerInfo
import org.openapitools.server.model.ComAdobeOctopusNcommBootstrapInfo
import org.openapitools.server.model.ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo
import org.openapitools.server.model.ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo
import org.openapitools.server.model.ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo
import org.openapitools.server.model.ComDayCommonsHttpclientInfo
import org.openapitools.server.model.ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo
import org.openapitools.server.model.ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo
import org.openapitools.server.model.ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo
import org.openapitools.server.model.ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo
import org.openapitools.server.model.ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo
import org.openapitools.server.model.ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo
import org.openapitools.server.model.ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo
import org.openapitools.server.model.ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo
import org.openapitools.server.model.ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo
import org.openapitools.server.model.ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo
import org.openapitools.server.model.ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo
import org.openapitools.server.model.ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo
import org.openapitools.server.model.ComDayCqAuthImplCugCugSupportImplInfo
import org.openapitools.server.model.ComDayCqAuthImplLoginSelectorHandlerInfo
import org.openapitools.server.model.ComDayCqCommonsImplExternalizerImplInfo
import org.openapitools.server.model.ComDayCqCommonsServletsRootMappingServletInfo
import org.openapitools.server.model.ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo
import org.openapitools.server.model.ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo
import org.openapitools.server.model.ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo
import org.openapitools.server.model.ComDayCqContentsyncImplContentSyncManagerImplInfo
import org.openapitools.server.model.ComDayCqDamCommonsHandlerStandardImageHandlerInfo
import org.openapitools.server.model.ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo
import org.openapitools.server.model.ComDayCqDamCommonsUtilImplAssetCacheImplInfo
import org.openapitools.server.model.ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo
import org.openapitools.server.model.ComDayCqDamCoreImplAssetMoveListenerInfo
import org.openapitools.server.model.ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo
import org.openapitools.server.model.ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo
import org.openapitools.server.model.ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo
import org.openapitools.server.model.ComDayCqDamCoreImplDamChangeEventListenerInfo
import org.openapitools.server.model.ComDayCqDamCoreImplDamEventPurgeServiceInfo
import org.openapitools.server.model.ComDayCqDamCoreImplDamEventRecorderImplInfo
import org.openapitools.server.model.ComDayCqDamCoreImplEventDamEventAuditListenerInfo
import org.openapitools.server.model.ComDayCqDamCoreImplExpiryNotificationJobImplInfo
import org.openapitools.server.model.ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo
import org.openapitools.server.model.ComDayCqDamCoreImplGfxCommonsGfxRendererInfo
import org.openapitools.server.model.ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo
import org.openapitools.server.model.ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo
import org.openapitools.server.model.ComDayCqDamCoreImplHandlerJpegHandlerInfo
import org.openapitools.server.model.ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo
import org.openapitools.server.model.ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo
import org.openapitools.server.model.ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo
import org.openapitools.server.model.ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo
import org.openapitools.server.model.ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo
import org.openapitools.server.model.ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo
import org.openapitools.server.model.ComDayCqDamCoreImplLightboxLightboxServletInfo
import org.openapitools.server.model.ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo
import org.openapitools.server.model.ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo
import org.openapitools.server.model.ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo
import org.openapitools.server.model.ComDayCqDamCoreImplMissingMetadataNotificationJobInfo
import org.openapitools.server.model.ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo
import org.openapitools.server.model.ComDayCqDamCoreImplProcessTextExtractionProcessInfo
import org.openapitools.server.model.ComDayCqDamCoreImplRenditionMakerImplInfo
import org.openapitools.server.model.ComDayCqDamCoreImplReportsReportExportServiceInfo
import org.openapitools.server.model.ComDayCqDamCoreImplReportsReportPurgeServiceInfo
import org.openapitools.server.model.ComDayCqDamCoreImplServletAssetDownloadServletInfo
import org.openapitools.server.model.ComDayCqDamCoreImplServletAssetStatusServletInfo
import org.openapitools.server.model.ComDayCqDamCoreImplServletAssetXMPSearchServletInfo
import org.openapitools.server.model.ComDayCqDamCoreImplServletBatchMetadataServletInfo
import org.openapitools.server.model.ComDayCqDamCoreImplServletBinaryProviderServletInfo
import org.openapitools.server.model.ComDayCqDamCoreImplServletCollectionServletInfo
import org.openapitools.server.model.ComDayCqDamCoreImplServletCollectionsServletInfo
import org.openapitools.server.model.ComDayCqDamCoreImplServletCompanionServletInfo
import org.openapitools.server.model.ComDayCqDamCoreImplServletCreateAssetServletInfo
import org.openapitools.server.model.ComDayCqDamCoreImplServletDamContentDispositionFilterInfo
import org.openapitools.server.model.ComDayCqDamCoreImplServletGuidLookupFilterInfo
import org.openapitools.server.model.ComDayCqDamCoreImplServletHealthCheckServletInfo
import org.openapitools.server.model.ComDayCqDamCoreImplServletMetadataGetServletInfo
import org.openapitools.server.model.ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo
import org.openapitools.server.model.ComDayCqDamCoreImplServletResourceCollectionServletInfo
import org.openapitools.server.model.ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo
import org.openapitools.server.model.ComDayCqDamCoreImplUnzipUnzipConfigInfo
import org.openapitools.server.model.ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo
import org.openapitools.server.model.ComDayCqDamCoreProcessExtractMetadataProcessInfo
import org.openapitools.server.model.ComDayCqDamCoreProcessMetadataProcessorProcessInfo
import org.openapitools.server.model.ComDayCqDamHandlerFfmpegLocatorImplInfo
import org.openapitools.server.model.ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo
import org.openapitools.server.model.ComDayCqDamHandlerStandardPdfPdfHandlerInfo
import org.openapitools.server.model.ComDayCqDamHandlerStandardPsPostScriptHandlerInfo
import org.openapitools.server.model.ComDayCqDamHandlerStandardPsdPsdHandlerInfo
import org.openapitools.server.model.ComDayCqDamIdsImplIDSJobProcessorInfo
import org.openapitools.server.model.ComDayCqDamIdsImplIDSPoolManagerImplInfo
import org.openapitools.server.model.ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo
import org.openapitools.server.model.ComDayCqDamInddImplServletSnippetCreationServletInfo
import org.openapitools.server.model.ComDayCqDamInddProcessINDDMediaExtractProcessInfo
import org.openapitools.server.model.ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo
import org.openapitools.server.model.ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo
import org.openapitools.server.model.ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo
import org.openapitools.server.model.ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo
import org.openapitools.server.model.ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo
import org.openapitools.server.model.ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo
import org.openapitools.server.model.ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo
import org.openapitools.server.model.ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo
import org.openapitools.server.model.ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo
import org.openapitools.server.model.ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo
import org.openapitools.server.model.ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo
import org.openapitools.server.model.ComDayCqDamScene7ImplScene7APIClientImplInfo
import org.openapitools.server.model.ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo
import org.openapitools.server.model.ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo
import org.openapitools.server.model.ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo
import org.openapitools.server.model.ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo
import org.openapitools.server.model.ComDayCqDamScene7ImplScene7UploadServiceImplInfo
import org.openapitools.server.model.ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo
import org.openapitools.server.model.ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo
import org.openapitools.server.model.ComDayCqDamVideoImplServletVideoTestServletInfo
import org.openapitools.server.model.ComDayCqExtwidgetServletsImageSpriteServletInfo
import org.openapitools.server.model.ComDayCqImageInternalFontFontHelperInfo
import org.openapitools.server.model.ComDayCqJcrclustersupportClusterStartLevelControllerInfo
import org.openapitools.server.model.ComDayCqMailerDefaultMailServiceInfo
import org.openapitools.server.model.ComDayCqMailerImplCqMailingServiceInfo
import org.openapitools.server.model.ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo
import org.openapitools.server.model.ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo
import org.openapitools.server.model.ComDayCqMcmCampaignImplIntegrationConfigImplInfo
import org.openapitools.server.model.ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo
import org.openapitools.server.model.ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo
import org.openapitools.server.model.ComDayCqMcmImplMCMConfigurationInfo
import org.openapitools.server.model.ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo
import org.openapitools.server.model.ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo
import org.openapitools.server.model.ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo
import org.openapitools.server.model.ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo
import org.openapitools.server.model.ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo
import org.openapitools.server.model.ComDayCqNotificationImplNotificationServiceImplInfo
import org.openapitools.server.model.ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo
import org.openapitools.server.model.ComDayCqPollingImporterImplManagedPollConfigImplInfo
import org.openapitools.server.model.ComDayCqPollingImporterImplManagedPollingImporterImplInfo
import org.openapitools.server.model.ComDayCqPollingImporterImplPollingImporterImplInfo
import org.openapitools.server.model.ComDayCqReplicationAuditReplicationEventListenerInfo
import org.openapitools.server.model.ComDayCqReplicationContentStaticContentBuilderInfo
import org.openapitools.server.model.ComDayCqReplicationImplAgentManagerImplInfo
import org.openapitools.server.model.ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo
import org.openapitools.server.model.ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo
import org.openapitools.server.model.ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo
import org.openapitools.server.model.ComDayCqReplicationImplReplicationReceiverImplInfo
import org.openapitools.server.model.ComDayCqReplicationImplReplicatorImplInfo
import org.openapitools.server.model.ComDayCqReplicationImplReverseReplicatorInfo
import org.openapitools.server.model.ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo
import org.openapitools.server.model.ComDayCqReplicationImplTransportHttpInfo
import org.openapitools.server.model.ComDayCqReportingImplCacheCacheImplInfo
import org.openapitools.server.model.ComDayCqReportingImplConfigServiceImplInfo
import org.openapitools.server.model.ComDayCqReportingImplRLogAnalyzerInfo
import org.openapitools.server.model.ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo
import org.openapitools.server.model.ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo
import org.openapitools.server.model.ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo
import org.openapitools.server.model.ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo
import org.openapitools.server.model.ComDayCqRewriterProcessorImplHtmlParserFactoryInfo
import org.openapitools.server.model.ComDayCqSearchImplBuilderQueryBuilderImplInfo
import org.openapitools.server.model.ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo
import org.openapitools.server.model.ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo
import org.openapitools.server.model.ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo
import org.openapitools.server.model.ComDayCqSecurityACLSetupInfo
import org.openapitools.server.model.ComDayCqStatisticsImplStatisticsServiceImplInfo
import org.openapitools.server.model.ComDayCqTaggingImplJcrTagManagerFactoryImplInfo
import org.openapitools.server.model.ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo
import org.openapitools.server.model.ComDayCqTaggingImplTagGarbageCollectorInfo
import org.openapitools.server.model.ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo
import org.openapitools.server.model.ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo
import org.openapitools.server.model.ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo
import org.openapitools.server.model.ComDayCqWcmCoreImplCommandsWCMCommandServletInfo
import org.openapitools.server.model.ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo
import org.openapitools.server.model.ComDayCqWcmCoreImplEventPageEventAuditListenerInfo
import org.openapitools.server.model.ComDayCqWcmCoreImplEventPagePostProcessorInfo
import org.openapitools.server.model.ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo
import org.openapitools.server.model.ComDayCqWcmCoreImplEventTemplatePostProcessorInfo
import org.openapitools.server.model.ComDayCqWcmCoreImplLanguageManagerImplInfo
import org.openapitools.server.model.ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo
import org.openapitools.server.model.ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo
import org.openapitools.server.model.ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo
import org.openapitools.server.model.ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo
import org.openapitools.server.model.ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo
import org.openapitools.server.model.ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo
import org.openapitools.server.model.ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo
import org.openapitools.server.model.ComDayCqWcmCoreImplServletsFindReplaceServletInfo
import org.openapitools.server.model.ComDayCqWcmCoreImplServletsReferenceSearchServletInfo
import org.openapitools.server.model.ComDayCqWcmCoreImplServletsThumbnailServletInfo
import org.openapitools.server.model.ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo
import org.openapitools.server.model.ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo
import org.openapitools.server.model.ComDayCqWcmCoreImplVersionManagerImplInfo
import org.openapitools.server.model.ComDayCqWcmCoreImplVersionPurgeTaskInfo
import org.openapitools.server.model.ComDayCqWcmCoreImplWCMDebugFilterInfo
import org.openapitools.server.model.ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo
import org.openapitools.server.model.ComDayCqWcmCoreImplWarpTimeWarpFilterInfo
import org.openapitools.server.model.ComDayCqWcmCoreMvtMVTStatisticsImplInfo
import org.openapitools.server.model.ComDayCqWcmCoreStatsPageViewStatisticsImplInfo
import org.openapitools.server.model.ComDayCqWcmCoreWCMRequestFilterInfo
import org.openapitools.server.model.ComDayCqWcmDesignimporterDesignPackageImporterInfo
import org.openapitools.server.model.ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo
import org.openapitools.server.model.ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo
import org.openapitools.server.model.ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo
import org.openapitools.server.model.ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo
import org.openapitools.server.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo
import org.openapitools.server.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo
import org.openapitools.server.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo
import org.openapitools.server.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo
import org.openapitools.server.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo
import org.openapitools.server.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo
import org.openapitools.server.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo
import org.openapitools.server.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo
import org.openapitools.server.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo
import org.openapitools.server.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo
import org.openapitools.server.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo
import org.openapitools.server.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo
import org.openapitools.server.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo
import org.openapitools.server.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo
import org.openapitools.server.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo
import org.openapitools.server.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo
import org.openapitools.server.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo
import org.openapitools.server.model.ComDayCqWcmFoundationFormsImplFormChooserServletInfo
import org.openapitools.server.model.ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo
import org.openapitools.server.model.ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo
import org.openapitools.server.model.ComDayCqWcmFoundationFormsImplMailServletInfo
import org.openapitools.server.model.ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo
import org.openapitools.server.model.ComDayCqWcmFoundationImplHTTPAuthHandlerInfo
import org.openapitools.server.model.ComDayCqWcmFoundationImplPageImpressionsTrackerInfo
import org.openapitools.server.model.ComDayCqWcmFoundationImplPageRedirectServletInfo
import org.openapitools.server.model.ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo
import org.openapitools.server.model.ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo
import org.openapitools.server.model.ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo
import org.openapitools.server.model.ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo
import org.openapitools.server.model.ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo
import org.openapitools.server.model.ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo
import org.openapitools.server.model.ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo
import org.openapitools.server.model.ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo
import org.openapitools.server.model.ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo
import org.openapitools.server.model.ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo
import org.openapitools.server.model.ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo
import org.openapitools.server.model.ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo
import org.openapitools.server.model.ComDayCqWcmMsmImplRolloutManagerImplInfo
import org.openapitools.server.model.ComDayCqWcmMsmImplServletsAuditLogServletInfo
import org.openapitools.server.model.ComDayCqWcmNotificationEmailImplEmailChannelInfo
import org.openapitools.server.model.ComDayCqWcmNotificationImplNotificationManagerImplInfo
import org.openapitools.server.model.ComDayCqWcmScriptingImplBVPManagerInfo
import org.openapitools.server.model.ComDayCqWcmUndoUndoConfigInfo
import org.openapitools.server.model.ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo
import org.openapitools.server.model.ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo
import org.openapitools.server.model.ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo
import org.openapitools.server.model.ComDayCqWidgetImplHtmlLibraryManagerImplInfo
import org.openapitools.server.model.ComDayCqWidgetImplWidgetExtensionProviderImplInfo
import org.openapitools.server.model.ComDayCqWorkflowImplEmailEMailNotificationServiceInfo
import org.openapitools.server.model.ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo
import org.openapitools.server.model.ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo
import org.openapitools.server.model.ComDayCrxSecurityTokenImplTokenCleanupTaskInfo
import org.openapitools.server.model.GuideLocalizationServiceInfo
import org.openapitools.server.model.MessagingUserComponentFactoryInfo
import org.openapitools.server.model.OrgApacheAriesJmxFrameworkStateConfigInfo
import org.openapitools.server.model.OrgApacheFelixEventadminImplEventAdminInfo
import org.openapitools.server.model.OrgApacheFelixHttpInfo
import org.openapitools.server.model.OrgApacheFelixHttpSslfilterSslFilterInfo
import org.openapitools.server.model.OrgApacheFelixJaasConfigurationFactoryInfo
import org.openapitools.server.model.OrgApacheFelixJaasConfigurationSpiInfo
import org.openapitools.server.model.OrgApacheFelixScrScrServiceInfo
import org.openapitools.server.model.OrgApacheFelixSystemreadyImplComponentsCheckInfo
import org.openapitools.server.model.OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo
import org.openapitools.server.model.OrgApacheFelixSystemreadyImplServicesCheckInfo
import org.openapitools.server.model.OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo
import org.openapitools.server.model.OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo
import org.openapitools.server.model.OrgApacheFelixSystemreadySystemReadyMonitorInfo
import org.openapitools.server.model.OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo
import org.openapitools.server.model.OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo
import org.openapitools.server.model.OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo
import org.openapitools.server.model.OrgApacheHttpProxyconfiguratorInfo
import org.openapitools.server.model.OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo
import org.openapitools.server.model.OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo
import org.openapitools.server.model.OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo
import org.openapitools.server.model.OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo
import org.openapitools.server.model.OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo
import org.openapitools.server.model.OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo
import org.openapitools.server.model.OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo
import org.openapitools.server.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo
import org.openapitools.server.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo
import org.openapitools.server.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo
import org.openapitools.server.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo
import org.openapitools.server.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo
import org.openapitools.server.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo
import org.openapitools.server.model.OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo
import org.openapitools.server.model.OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo
import org.openapitools.server.model.OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo
import org.openapitools.server.model.OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo
import org.openapitools.server.model.OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo
import org.openapitools.server.model.OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo
import org.openapitools.server.model.OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo
import org.openapitools.server.model.OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo
import org.openapitools.server.model.OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo
import org.openapitools.server.model.OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo
import org.openapitools.server.model.OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo
import org.openapitools.server.model.OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo
import org.openapitools.server.model.OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo
import org.openapitools.server.model.OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo
import org.openapitools.server.model.OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo
import org.openapitools.server.model.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo
import org.openapitools.server.model.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo
import org.openapitools.server.model.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo
import org.openapitools.server.model.OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo
import org.openapitools.server.model.OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo
import org.openapitools.server.model.OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo
import org.openapitools.server.model.OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo
import org.openapitools.server.model.OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo
import org.openapitools.server.model.OrgApacheSlingAuthCoreImplLogoutServletInfo
import org.openapitools.server.model.OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo
import org.openapitools.server.model.OrgApacheSlingCaconfigImplConfigurationResolverImplInfo
import org.openapitools.server.model.OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo
import org.openapitools.server.model.OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo
import org.openapitools.server.model.OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo
import org.openapitools.server.model.OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo
import org.openapitools.server.model.OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo
import org.openapitools.server.model.OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo
import org.openapitools.server.model.OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo
import org.openapitools.server.model.OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo
import org.openapitools.server.model.OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo
import org.openapitools.server.model.OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo
import org.openapitools.server.model.OrgApacheSlingCommonsLogLogManagerInfo
import org.openapitools.server.model.OrgApacheSlingCommonsMetricsInternalLogReporterInfo
import org.openapitools.server.model.OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo
import org.openapitools.server.model.OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo
import org.openapitools.server.model.OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo
import org.openapitools.server.model.OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo
import org.openapitools.server.model.OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo
import org.openapitools.server.model.OrgApacheSlingDatasourceDataSourceFactoryInfo
import org.openapitools.server.model.OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo
import org.openapitools.server.model.OrgApacheSlingDiscoveryOakConfigInfo
import org.openapitools.server.model.OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo
import org.openapitools.server.model.OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo
import org.openapitools.server.model.OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo
import org.openapitools.server.model.OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo
import org.openapitools.server.model.OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo
import org.openapitools.server.model.OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo
import org.openapitools.server.model.OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo
import org.openapitools.server.model.OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo
import org.openapitools.server.model.OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo
import org.openapitools.server.model.OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo
import org.openapitools.server.model.OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo
import org.openapitools.server.model.OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo
import org.openapitools.server.model.OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo
import org.openapitools.server.model.OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo
import org.openapitools.server.model.OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo
import org.openapitools.server.model.OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo
import org.openapitools.server.model.OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo
import org.openapitools.server.model.OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo
import org.openapitools.server.model.OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo
import org.openapitools.server.model.OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo
import org.openapitools.server.model.OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo
import org.openapitools.server.model.OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo
import org.openapitools.server.model.OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo
import org.openapitools.server.model.OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo
import org.openapitools.server.model.OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo
import org.openapitools.server.model.OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo
import org.openapitools.server.model.OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo
import org.openapitools.server.model.OrgApacheSlingEngineImplLogRequestLoggerInfo
import org.openapitools.server.model.OrgApacheSlingEngineImplLogRequestLoggerServiceInfo
import org.openapitools.server.model.OrgApacheSlingEngineImplSlingMainServletInfo
import org.openapitools.server.model.OrgApacheSlingEngineParametersInfo
import org.openapitools.server.model.OrgApacheSlingEventImplEventingThreadPoolInfo
import org.openapitools.server.model.OrgApacheSlingEventImplJobsDefaultJobManagerInfo
import org.openapitools.server.model.OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo
import org.openapitools.server.model.OrgApacheSlingEventImplJobsJobConsumerManagerInfo
import org.openapitools.server.model.OrgApacheSlingEventJobsQueueConfigurationInfo
import org.openapitools.server.model.OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo
import org.openapitools.server.model.OrgApacheSlingFeatureflagsFeatureInfo
import org.openapitools.server.model.OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo
import org.openapitools.server.model.OrgApacheSlingHapiImplHApiUtilImplInfo
import org.openapitools.server.model.OrgApacheSlingHcCoreImplCompositeHealthCheckInfo
import org.openapitools.server.model.OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo
import org.openapitools.server.model.OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo
import org.openapitools.server.model.OrgApacheSlingHcCoreImplScriptableHealthCheckInfo
import org.openapitools.server.model.OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo
import org.openapitools.server.model.OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo
import org.openapitools.server.model.OrgApacheSlingI18nImplI18NFilterInfo
import org.openapitools.server.model.OrgApacheSlingI18nImplJcrResourceBundleProviderInfo
import org.openapitools.server.model.OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo
import org.openapitools.server.model.OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo
import org.openapitools.server.model.OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo
import org.openapitools.server.model.OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo
import org.openapitools.server.model.OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo
import org.openapitools.server.model.OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo
import org.openapitools.server.model.OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo
import org.openapitools.server.model.OrgApacheSlingJcrRepoinitRepositoryInitializerInfo
import org.openapitools.server.model.OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo
import org.openapitools.server.model.OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo
import org.openapitools.server.model.OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo
import org.openapitools.server.model.OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo
import org.openapitools.server.model.OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo
import org.openapitools.server.model.OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo
import org.openapitools.server.model.OrgApacheSlingJmxProviderImplJMXResourceProviderInfo
import org.openapitools.server.model.OrgApacheSlingModelsImplModelAdapterFactoryInfo
import org.openapitools.server.model.OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo
import org.openapitools.server.model.OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo
import org.openapitools.server.model.OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo
import org.openapitools.server.model.OrgApacheSlingResourcemergerPickerOverridingInfo
import org.openapitools.server.model.OrgApacheSlingScriptingCoreImplScriptCacheImplInfo
import org.openapitools.server.model.OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo
import org.openapitools.server.model.OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo
import org.openapitools.server.model.OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo
import org.openapitools.server.model.OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo
import org.openapitools.server.model.OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo
import org.openapitools.server.model.OrgApacheSlingSecurityImplContentDispositionFilterInfo
import org.openapitools.server.model.OrgApacheSlingSecurityImplReferrerFilterInfo
import org.openapitools.server.model.OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo
import org.openapitools.server.model.OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo
import org.openapitools.server.model.OrgApacheSlingServletsGetDefaultGetServletInfo
import org.openapitools.server.model.OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo
import org.openapitools.server.model.OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo
import org.openapitools.server.model.OrgApacheSlingServletsPostImplSlingPostServletInfo
import org.openapitools.server.model.OrgApacheSlingServletsResolverSlingServletResolverInfo
import org.openapitools.server.model.OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo
import org.openapitools.server.model.OrgApacheSlingStartupfilterImplStartupFilterImplInfo
import org.openapitools.server.model.OrgApacheSlingTenantInternalTenantProviderImplInfo
import org.openapitools.server.model.OrgApacheSlingTracerInternalLogTracerInfo
import org.openapitools.server.model.OrgApacheSlingXssImplXSSFilterImplInfo

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class ConfigmgrApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "ConfigmgrApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val adaptiveFormAndInteractiveCommunicationWebChannelConfigurationOperation = (apiOperation[AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo]("adaptiveFormAndInteractiveCommunicationWebChannelConfiguration")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("showPlaceholder").description("").optional, queryParam[Int]("maximumCacheEntries").description("").optional, queryParam[String]("afPeriodscriptingPeriodcompatversion").description("").optional, queryParam[Boolean]("makeFileNameUnique").description("").optional, queryParam[Boolean]("generatingCompliantData").description("").optional)
  )

  post("/system/console/configMgr/Adaptive Form and Interactive Communication Web Channel Configuration", operation(adaptiveFormAndInteractiveCommunicationWebChannelConfigurationOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val showPlaceholder = params.getAs[Boolean]("showPlaceholder")

    //println("showPlaceholder: " + showPlaceholder)
            val maximumCacheEntries = params.getAs[Int]("maximumCacheEntries")

    //println("maximumCacheEntries: " + maximumCacheEntries)
            val afPeriodscriptingPeriodcompatversion = params.getAs[String]("afPeriodscriptingPeriodcompatversion")

    //println("afPeriodscriptingPeriodcompatversion: " + afPeriodscriptingPeriodcompatversion)
            val makeFileNameUnique = params.getAs[Boolean]("makeFileNameUnique")

    //println("makeFileNameUnique: " + makeFileNameUnique)
            val generatingCompliantData = params.getAs[Boolean]("generatingCompliantData")

    //println("generatingCompliantData: " + generatingCompliantData)
  }

  

  val adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurOperation = (apiOperation[AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo]("adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("fontList").description("").optional)
  )

  post("/system/console/configMgr/Adaptive Form and Interactive Communication Web Channel Theme Configuration", operation(adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val fontListString = params.getAs[String]("fontList")
    val fontList = if("multi" == "default" || "multi" == "csv") {
      fontListString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("fontList: " + fontList)
  }

  

  val analyticsComponentQueryCacheServiceOperation = (apiOperation[AnalyticsComponentQueryCacheServiceInfo]("analyticsComponentQueryCacheService")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("cqPeriodanalyticsPeriodcomponentPeriodqueryPeriodcachePeriodsize").description("").optional)
  )

  post("/system/console/configMgr/Analytics Component Query Cache Service", operation(analyticsComponentQueryCacheServiceOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val cqPeriodanalyticsPeriodcomponentPeriodqueryPeriodcachePeriodsize = params.getAs[Int]("cqPeriodanalyticsPeriodcomponentPeriodqueryPeriodcachePeriodsize")

    //println("cqPeriodanalyticsPeriodcomponentPeriodqueryPeriodcachePeriodsize: " + cqPeriodanalyticsPeriodcomponentPeriodqueryPeriodcachePeriodsize)
  }

  

  val apacheSlingHealthCheckResultHTMLSerializerOperation = (apiOperation[ApacheSlingHealthCheckResultHTMLSerializerInfo]("apacheSlingHealthCheckResultHTMLSerializer")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("styleString").description("").optional)
  )

  post("/system/console/configMgr/Apache Sling Health Check Result HTML Serializer", operation(apacheSlingHealthCheckResultHTMLSerializerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val styleString = params.getAs[String]("styleString")

    //println("styleString: " + styleString)
  }

  

  val comAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationOperation = (apiOperation[ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo]("comAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("formsManagerConfigPeriodincludeOOTBTemplates").description("").optional, queryParam[Boolean]("formsManagerConfigPeriodincludeDeprecatedTemplates").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.aem.formsndocuments.config.AEMFormsManagerConfiguration", operation(comAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val formsManagerConfigPeriodincludeOOTBTemplates = params.getAs[Boolean]("formsManagerConfigPeriodincludeOOTBTemplates")

    //println("formsManagerConfigPeriodincludeOOTBTemplates: " + formsManagerConfigPeriodincludeOOTBTemplates)
            val formsManagerConfigPeriodincludeDeprecatedTemplates = params.getAs[Boolean]("formsManagerConfigPeriodincludeDeprecatedTemplates")

    //println("formsManagerConfigPeriodincludeDeprecatedTemplates: " + formsManagerConfigPeriodincludeDeprecatedTemplates)
  }

  

  val comAdobeAemTransactionCoreImplTransactionRecorderOperation = (apiOperation[ComAdobeAemTransactionCoreImplTransactionRecorderInfo]("comAdobeAemTransactionCoreImplTransactionRecorder")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("isTransactionRecordingEnabled").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.aem.transaction.core.impl.TransactionRecorder", operation(comAdobeAemTransactionCoreImplTransactionRecorderOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val isTransactionRecordingEnabled = params.getAs[Boolean]("isTransactionRecordingEnabled")

    //println("isTransactionRecordingEnabled: " + isTransactionRecordingEnabled)
  }

  

  val comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCOperation = (apiOperation[ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo]("comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("hcPeriodname").description("").optional, queryParam[List[String]]("hcPeriodtags").description("").optional, queryParam[String]("hcPeriodmbeanPeriodname").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.DeprecateIndexesHC", operation(comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val hcPeriodname = params.getAs[String]("hcPeriodname")

    //println("hcPeriodname: " + hcPeriodname)
        val hcPeriodtagsString = params.getAs[String]("hcPeriodtags")
    val hcPeriodtags = if("multi" == "default" || "multi" == "csv") {
      hcPeriodtagsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("hcPeriodtags: " + hcPeriodtags)
            val hcPeriodmbeanPeriodname = params.getAs[String]("hcPeriodmbeanPeriodname")

    //println("hcPeriodmbeanPeriodname: " + hcPeriodmbeanPeriodname)
  }

  

  val comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCOperation = (apiOperation[ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo]("comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("hcPeriodname").description("").optional, queryParam[List[String]]("hcPeriodtags").description("").optional, queryParam[String]("hcPeriodmbeanPeriodname").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.ReplicationAgentsDisabledHC", operation(comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val hcPeriodname = params.getAs[String]("hcPeriodname")

    //println("hcPeriodname: " + hcPeriodname)
        val hcPeriodtagsString = params.getAs[String]("hcPeriodtags")
    val hcPeriodtags = if("multi" == "default" || "multi" == "csv") {
      hcPeriodtagsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("hcPeriodtags: " + hcPeriodtags)
            val hcPeriodmbeanPeriodname = params.getAs[String]("hcPeriodmbeanPeriodname")

    //println("hcPeriodmbeanPeriodname: " + hcPeriodmbeanPeriodname)
  }

  

  val comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplOperation = (apiOperation[ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo]("comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("preUpgradePeriodmaintenancePeriodtasks").description("").optional, queryParam[List[String]]("preUpgradePeriodhcPeriodtags").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.aem.upgrade.prechecks.mbean.impl.PreUpgradeTasksMBeanImpl", operation(comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val preUpgradePeriodmaintenancePeriodtasksString = params.getAs[String]("preUpgradePeriodmaintenancePeriodtasks")
    val preUpgradePeriodmaintenancePeriodtasks = if("multi" == "default" || "multi" == "csv") {
      preUpgradePeriodmaintenancePeriodtasksString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("preUpgradePeriodmaintenancePeriodtasks: " + preUpgradePeriodmaintenancePeriodtasks)
        val preUpgradePeriodhcPeriodtagsString = params.getAs[String]("preUpgradePeriodhcPeriodtags")
    val preUpgradePeriodhcPeriodtags = if("multi" == "default" || "multi" == "csv") {
      preUpgradePeriodhcPeriodtagsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("preUpgradePeriodhcPeriodtags: " + preUpgradePeriodhcPeriodtags)
  }

  

  val comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplOperation = (apiOperation[ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo]("comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("rootPeriodpath").description("").optional, queryParam[Boolean]("fixPeriodinconsistencies").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.aem.upgrade.prechecks.tasks.impl.ConsistencyCheckTaskImpl", operation(comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val rootPeriodpath = params.getAs[String]("rootPeriodpath")

    //println("rootPeriodpath: " + rootPeriodpath)
            val fixPeriodinconsistencies = params.getAs[Boolean]("fixPeriodinconsistencies")

    //println("fixPeriodinconsistencies: " + fixPeriodinconsistencies)
  }

  

  val comAdobeCqAccountApiAccountManagementServiceOperation = (apiOperation[ComAdobeCqAccountApiAccountManagementServiceInfo]("comAdobeCqAccountApiAccountManagementService")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("cqPeriodaccountmanagerPeriodtokenPeriodvalidityPeriodperiod").description("").optional, queryParam[String]("cqPeriodaccountmanagerPeriodconfigPeriodrequestnewaccountPeriodmail").description("").optional, queryParam[String]("cqPeriodaccountmanagerPeriodconfigPeriodrequestnewpwdPeriodmail").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.account.api.AccountManagementService", operation(comAdobeCqAccountApiAccountManagementServiceOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val cqPeriodaccountmanagerPeriodtokenPeriodvalidityPeriodperiod = params.getAs[Int]("cqPeriodaccountmanagerPeriodtokenPeriodvalidityPeriodperiod")

    //println("cqPeriodaccountmanagerPeriodtokenPeriodvalidityPeriodperiod: " + cqPeriodaccountmanagerPeriodtokenPeriodvalidityPeriodperiod)
            val cqPeriodaccountmanagerPeriodconfigPeriodrequestnewaccountPeriodmail = params.getAs[String]("cqPeriodaccountmanagerPeriodconfigPeriodrequestnewaccountPeriodmail")

    //println("cqPeriodaccountmanagerPeriodconfigPeriodrequestnewaccountPeriodmail: " + cqPeriodaccountmanagerPeriodconfigPeriodrequestnewaccountPeriodmail)
            val cqPeriodaccountmanagerPeriodconfigPeriodrequestnewpwdPeriodmail = params.getAs[String]("cqPeriodaccountmanagerPeriodconfigPeriodrequestnewpwdPeriodmail")

    //println("cqPeriodaccountmanagerPeriodconfigPeriodrequestnewpwdPeriodmail: " + cqPeriodaccountmanagerPeriodconfigPeriodrequestnewpwdPeriodmail)
  }

  

  val comAdobeCqAccountImplAccountManagementServletOperation = (apiOperation[ComAdobeCqAccountImplAccountManagementServletInfo]("comAdobeCqAccountImplAccountManagementServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("cqPeriodaccountmanagerPeriodconfigPeriodinformnewaccountPeriodmail").description("").optional, queryParam[String]("cqPeriodaccountmanagerPeriodconfigPeriodinformnewpwdPeriodmail").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.account.impl.AccountManagementServlet", operation(comAdobeCqAccountImplAccountManagementServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val cqPeriodaccountmanagerPeriodconfigPeriodinformnewaccountPeriodmail = params.getAs[String]("cqPeriodaccountmanagerPeriodconfigPeriodinformnewaccountPeriodmail")

    //println("cqPeriodaccountmanagerPeriodconfigPeriodinformnewaccountPeriodmail: " + cqPeriodaccountmanagerPeriodconfigPeriodinformnewaccountPeriodmail)
            val cqPeriodaccountmanagerPeriodconfigPeriodinformnewpwdPeriodmail = params.getAs[String]("cqPeriodaccountmanagerPeriodconfigPeriodinformnewpwdPeriodmail")

    //println("cqPeriodaccountmanagerPeriodconfigPeriodinformnewpwdPeriodmail: " + cqPeriodaccountmanagerPeriodconfigPeriodinformnewpwdPeriodmail)
  }

  

  val comAdobeCqAddressImplLocationLocationListServletOperation = (apiOperation[ComAdobeCqAddressImplLocationLocationListServletInfo]("comAdobeCqAddressImplLocationLocationListServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("cqPeriodaddressPeriodlocationPerioddefaultPeriodmaxResults").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.address.impl.location.LocationListServlet", operation(comAdobeCqAddressImplLocationLocationListServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val cqPeriodaddressPeriodlocationPerioddefaultPeriodmaxResults = params.getAs[Int]("cqPeriodaddressPeriodlocationPerioddefaultPeriodmaxResults")

    //println("cqPeriodaddressPeriodlocationPerioddefaultPeriodmaxResults: " + cqPeriodaddressPeriodlocationPerioddefaultPeriodmaxResults)
  }

  

  val comAdobeCqAuditPurgeDamOperation = (apiOperation[ComAdobeCqAuditPurgeDamInfo]("comAdobeCqAuditPurgeDam")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("auditlogPeriodrulePeriodname").description("").optional, queryParam[String]("auditlogPeriodrulePeriodcontentpath").description("").optional, queryParam[Int]("auditlogPeriodrulePeriodminimumage").description("").optional, queryParam[String]("auditlogPeriodrulePeriodtypes").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.audit.purge.Dam", operation(comAdobeCqAuditPurgeDamOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val auditlogPeriodrulePeriodname = params.getAs[String]("auditlogPeriodrulePeriodname")

    //println("auditlogPeriodrulePeriodname: " + auditlogPeriodrulePeriodname)
            val auditlogPeriodrulePeriodcontentpath = params.getAs[String]("auditlogPeriodrulePeriodcontentpath")

    //println("auditlogPeriodrulePeriodcontentpath: " + auditlogPeriodrulePeriodcontentpath)
            val auditlogPeriodrulePeriodminimumage = params.getAs[Int]("auditlogPeriodrulePeriodminimumage")

    //println("auditlogPeriodrulePeriodminimumage: " + auditlogPeriodrulePeriodminimumage)
            val auditlogPeriodrulePeriodtypes = params.getAs[String]("auditlogPeriodrulePeriodtypes")

    //println("auditlogPeriodrulePeriodtypes: " + auditlogPeriodrulePeriodtypes)
  }

  

  val comAdobeCqAuditPurgePagesOperation = (apiOperation[ComAdobeCqAuditPurgePagesInfo]("comAdobeCqAuditPurgePages")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("auditlogPeriodrulePeriodname").description("").optional, queryParam[String]("auditlogPeriodrulePeriodcontentpath").description("").optional, queryParam[Int]("auditlogPeriodrulePeriodminimumage").description("").optional, queryParam[String]("auditlogPeriodrulePeriodtypes").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.audit.purge.Pages", operation(comAdobeCqAuditPurgePagesOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val auditlogPeriodrulePeriodname = params.getAs[String]("auditlogPeriodrulePeriodname")

    //println("auditlogPeriodrulePeriodname: " + auditlogPeriodrulePeriodname)
            val auditlogPeriodrulePeriodcontentpath = params.getAs[String]("auditlogPeriodrulePeriodcontentpath")

    //println("auditlogPeriodrulePeriodcontentpath: " + auditlogPeriodrulePeriodcontentpath)
            val auditlogPeriodrulePeriodminimumage = params.getAs[Int]("auditlogPeriodrulePeriodminimumage")

    //println("auditlogPeriodrulePeriodminimumage: " + auditlogPeriodrulePeriodminimumage)
            val auditlogPeriodrulePeriodtypes = params.getAs[String]("auditlogPeriodrulePeriodtypes")

    //println("auditlogPeriodrulePeriodtypes: " + auditlogPeriodrulePeriodtypes)
  }

  

  val comAdobeCqAuditPurgeReplicationOperation = (apiOperation[ComAdobeCqAuditPurgeReplicationInfo]("comAdobeCqAuditPurgeReplication")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("auditlogPeriodrulePeriodname").description("").optional, queryParam[String]("auditlogPeriodrulePeriodcontentpath").description("").optional, queryParam[Int]("auditlogPeriodrulePeriodminimumage").description("").optional, queryParam[String]("auditlogPeriodrulePeriodtypes").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.audit.purge.Replication", operation(comAdobeCqAuditPurgeReplicationOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val auditlogPeriodrulePeriodname = params.getAs[String]("auditlogPeriodrulePeriodname")

    //println("auditlogPeriodrulePeriodname: " + auditlogPeriodrulePeriodname)
            val auditlogPeriodrulePeriodcontentpath = params.getAs[String]("auditlogPeriodrulePeriodcontentpath")

    //println("auditlogPeriodrulePeriodcontentpath: " + auditlogPeriodrulePeriodcontentpath)
            val auditlogPeriodrulePeriodminimumage = params.getAs[Int]("auditlogPeriodrulePeriodminimumage")

    //println("auditlogPeriodrulePeriodminimumage: " + auditlogPeriodrulePeriodminimumage)
            val auditlogPeriodrulePeriodtypes = params.getAs[String]("auditlogPeriodrulePeriodtypes")

    //println("auditlogPeriodrulePeriodtypes: " + auditlogPeriodrulePeriodtypes)
  }

  

  val comAdobeCqCdnRewriterImplAWSCloudFrontRewriterOperation = (apiOperation[ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo]("comAdobeCqCdnRewriterImplAWSCloudFrontRewriter")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("servicePeriodranking").description("").optional, queryParam[String]("keypairPeriodid").description("").optional, queryParam[String]("keypairPeriodalias").description("").optional, queryParam[List[String]]("cdnrewriterPeriodattributes").description("").optional, queryParam[String]("cdnPeriodrewriterPerioddistributionPerioddomain").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.AWSCloudFrontRewriter", operation(comAdobeCqCdnRewriterImplAWSCloudFrontRewriterOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val servicePeriodranking = params.getAs[Int]("servicePeriodranking")

    //println("servicePeriodranking: " + servicePeriodranking)
            val keypairPeriodid = params.getAs[String]("keypairPeriodid")

    //println("keypairPeriodid: " + keypairPeriodid)
            val keypairPeriodalias = params.getAs[String]("keypairPeriodalias")

    //println("keypairPeriodalias: " + keypairPeriodalias)
        val cdnrewriterPeriodattributesString = params.getAs[String]("cdnrewriterPeriodattributes")
    val cdnrewriterPeriodattributes = if("multi" == "default" || "multi" == "csv") {
      cdnrewriterPeriodattributesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cdnrewriterPeriodattributes: " + cdnrewriterPeriodattributes)
            val cdnPeriodrewriterPerioddistributionPerioddomain = params.getAs[String]("cdnPeriodrewriterPerioddistributionPerioddomain")

    //println("cdnPeriodrewriterPerioddistributionPerioddomain: " + cdnPeriodrewriterPerioddistributionPerioddomain)
  }

  

  val comAdobeCqCdnRewriterImplCDNConfigServiceImplOperation = (apiOperation[ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo]("comAdobeCqCdnRewriterImplCDNConfigServiceImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("cdnPeriodconfigPerioddistributionPerioddomain").description("").optional, queryParam[Boolean]("cdnPeriodconfigPeriodenablePeriodrewriting").description("").optional, queryParam[List[String]]("cdnPeriodconfigPeriodpathPeriodprefixes").description("").optional, queryParam[Int]("cdnPeriodconfigPeriodcdnttl").description("").optional, queryParam[String]("cdnPeriodconfigPeriodapplicationPeriodprotocol").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNConfigServiceImpl", operation(comAdobeCqCdnRewriterImplCDNConfigServiceImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val cdnPeriodconfigPerioddistributionPerioddomain = params.getAs[String]("cdnPeriodconfigPerioddistributionPerioddomain")

    //println("cdnPeriodconfigPerioddistributionPerioddomain: " + cdnPeriodconfigPerioddistributionPerioddomain)
            val cdnPeriodconfigPeriodenablePeriodrewriting = params.getAs[Boolean]("cdnPeriodconfigPeriodenablePeriodrewriting")

    //println("cdnPeriodconfigPeriodenablePeriodrewriting: " + cdnPeriodconfigPeriodenablePeriodrewriting)
        val cdnPeriodconfigPeriodpathPeriodprefixesString = params.getAs[String]("cdnPeriodconfigPeriodpathPeriodprefixes")
    val cdnPeriodconfigPeriodpathPeriodprefixes = if("multi" == "default" || "multi" == "csv") {
      cdnPeriodconfigPeriodpathPeriodprefixesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cdnPeriodconfigPeriodpathPeriodprefixes: " + cdnPeriodconfigPeriodpathPeriodprefixes)
            val cdnPeriodconfigPeriodcdnttl = params.getAs[Int]("cdnPeriodconfigPeriodcdnttl")

    //println("cdnPeriodconfigPeriodcdnttl: " + cdnPeriodconfigPeriodcdnttl)
            val cdnPeriodconfigPeriodapplicationPeriodprotocol = params.getAs[String]("cdnPeriodconfigPeriodapplicationPeriodprotocol")

    //println("cdnPeriodconfigPeriodapplicationPeriodprotocol: " + cdnPeriodconfigPeriodapplicationPeriodprotocol)
  }

  

  val comAdobeCqCdnRewriterImplCDNRewriterOperation = (apiOperation[ComAdobeCqCdnRewriterImplCDNRewriterInfo]("comAdobeCqCdnRewriterImplCDNRewriter")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("servicePeriodranking").description("").optional, queryParam[List[String]]("cdnrewriterPeriodattributes").description("").optional, queryParam[String]("cdnPeriodrewriterPerioddistributionPerioddomain").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNRewriter", operation(comAdobeCqCdnRewriterImplCDNRewriterOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val servicePeriodranking = params.getAs[Int]("servicePeriodranking")

    //println("servicePeriodranking: " + servicePeriodranking)
        val cdnrewriterPeriodattributesString = params.getAs[String]("cdnrewriterPeriodattributes")
    val cdnrewriterPeriodattributes = if("multi" == "default" || "multi" == "csv") {
      cdnrewriterPeriodattributesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cdnrewriterPeriodattributes: " + cdnrewriterPeriodattributes)
            val cdnPeriodrewriterPerioddistributionPerioddomain = params.getAs[String]("cdnPeriodrewriterPerioddistributionPerioddomain")

    //println("cdnPeriodrewriterPerioddistributionPerioddomain: " + cdnPeriodrewriterPerioddistributionPerioddomain)
  }

  

  val comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleOperation = (apiOperation[ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo]("comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("flushPeriodagents").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.cloudconfig.core.impl.ConfigurationReplicationEventHandler", operation(comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val flushPeriodagentsString = params.getAs[String]("flushPeriodagents")
    val flushPeriodagents = if("multi" == "default" || "multi" == "csv") {
      flushPeriodagentsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("flushPeriodagents: " + flushPeriodagents)
  }

  

  val comAdobeCqCommerceImplAssetDynamicImageHandlerOperation = (apiOperation[ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo]("comAdobeCqCommerceImplAssetDynamicImageHandler")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("cqPeriodcommercePeriodassetPeriodhandlerPeriodactive").description("").optional, queryParam[String]("cqPeriodcommercePeriodassetPeriodhandlerPeriodname").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.commerce.impl.asset.DynamicImageHandler", operation(comAdobeCqCommerceImplAssetDynamicImageHandlerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val cqPeriodcommercePeriodassetPeriodhandlerPeriodactive = params.getAs[Boolean]("cqPeriodcommercePeriodassetPeriodhandlerPeriodactive")

    //println("cqPeriodcommercePeriodassetPeriodhandlerPeriodactive: " + cqPeriodcommercePeriodassetPeriodhandlerPeriodactive)
            val cqPeriodcommercePeriodassetPeriodhandlerPeriodname = params.getAs[String]("cqPeriodcommercePeriodassetPeriodhandlerPeriodname")

    //println("cqPeriodcommercePeriodassetPeriodhandlerPeriodname: " + cqPeriodcommercePeriodassetPeriodhandlerPeriodname)
  }

  

  val comAdobeCqCommerceImplAssetProductAssetHandlerProviderImplOperation = (apiOperation[ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo]("comAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("cqPeriodcommercePeriodassetPeriodhandlerPeriodfallback").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.commerce.impl.asset.ProductAssetHandlerProviderImpl", operation(comAdobeCqCommerceImplAssetProductAssetHandlerProviderImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val cqPeriodcommercePeriodassetPeriodhandlerPeriodfallback = params.getAs[String]("cqPeriodcommercePeriodassetPeriodhandlerPeriodfallback")

    //println("cqPeriodcommercePeriodassetPeriodhandlerPeriodfallback: " + cqPeriodcommercePeriodassetPeriodhandlerPeriodfallback)
  }

  

  val comAdobeCqCommerceImplAssetStaticImageHandlerOperation = (apiOperation[ComAdobeCqCommerceImplAssetStaticImageHandlerInfo]("comAdobeCqCommerceImplAssetStaticImageHandler")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("cqPeriodcommercePeriodassetPeriodhandlerPeriodactive").description("").optional, queryParam[String]("cqPeriodcommercePeriodassetPeriodhandlerPeriodname").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.commerce.impl.asset.StaticImageHandler", operation(comAdobeCqCommerceImplAssetStaticImageHandlerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val cqPeriodcommercePeriodassetPeriodhandlerPeriodactive = params.getAs[Boolean]("cqPeriodcommercePeriodassetPeriodhandlerPeriodactive")

    //println("cqPeriodcommercePeriodassetPeriodhandlerPeriodactive: " + cqPeriodcommercePeriodassetPeriodhandlerPeriodactive)
            val cqPeriodcommercePeriodassetPeriodhandlerPeriodname = params.getAs[String]("cqPeriodcommercePeriodassetPeriodhandlerPeriodname")

    //println("cqPeriodcommercePeriodassetPeriodhandlerPeriodname: " + cqPeriodcommercePeriodassetPeriodhandlerPeriodname)
  }

  

  val comAdobeCqCommerceImplAssetVideoHandlerOperation = (apiOperation[ComAdobeCqCommerceImplAssetVideoHandlerInfo]("comAdobeCqCommerceImplAssetVideoHandler")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("cqPeriodcommercePeriodassetPeriodhandlerPeriodactive").description("").optional, queryParam[String]("cqPeriodcommercePeriodassetPeriodhandlerPeriodname").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.commerce.impl.asset.VideoHandler", operation(comAdobeCqCommerceImplAssetVideoHandlerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val cqPeriodcommercePeriodassetPeriodhandlerPeriodactive = params.getAs[Boolean]("cqPeriodcommercePeriodassetPeriodhandlerPeriodactive")

    //println("cqPeriodcommercePeriodassetPeriodhandlerPeriodactive: " + cqPeriodcommercePeriodassetPeriodhandlerPeriodactive)
            val cqPeriodcommercePeriodassetPeriodhandlerPeriodname = params.getAs[String]("cqPeriodcommercePeriodassetPeriodhandlerPeriodname")

    //println("cqPeriodcommercePeriodassetPeriodhandlerPeriodname: " + cqPeriodcommercePeriodassetPeriodhandlerPeriodname)
  }

  

  val comAdobeCqCommerceImplPromotionPromotionManagerImplOperation = (apiOperation[ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo]("comAdobeCqCommerceImplPromotionPromotionManagerImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("cqPeriodcommercePeriodpromotionPeriodroot").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.commerce.impl.promotion.PromotionManagerImpl", operation(comAdobeCqCommerceImplPromotionPromotionManagerImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val cqPeriodcommercePeriodpromotionPeriodroot = params.getAs[String]("cqPeriodcommercePeriodpromotionPeriodroot")

    //println("cqPeriodcommercePeriodpromotionPeriodroot: " + cqPeriodcommercePeriodpromotionPeriodroot)
  }

  

  val comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplOperation = (apiOperation[ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo]("comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("cqPeriodcommercePeriodcataloggeneratorPeriodbucketsize").description("").optional, queryParam[String]("cqPeriodcommercePeriodcataloggeneratorPeriodbucketname").description("").optional, queryParam[List[String]]("cqPeriodcommercePeriodcataloggeneratorPeriodexcludedtemplateproperties").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.commerce.pim.impl.cataloggenerator.CatalogGeneratorImpl", operation(comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val cqPeriodcommercePeriodcataloggeneratorPeriodbucketsize = params.getAs[Int]("cqPeriodcommercePeriodcataloggeneratorPeriodbucketsize")

    //println("cqPeriodcommercePeriodcataloggeneratorPeriodbucketsize: " + cqPeriodcommercePeriodcataloggeneratorPeriodbucketsize)
            val cqPeriodcommercePeriodcataloggeneratorPeriodbucketname = params.getAs[String]("cqPeriodcommercePeriodcataloggeneratorPeriodbucketname")

    //println("cqPeriodcommercePeriodcataloggeneratorPeriodbucketname: " + cqPeriodcommercePeriodcataloggeneratorPeriodbucketname)
        val cqPeriodcommercePeriodcataloggeneratorPeriodexcludedtemplatepropertiesString = params.getAs[String]("cqPeriodcommercePeriodcataloggeneratorPeriodexcludedtemplateproperties")
    val cqPeriodcommercePeriodcataloggeneratorPeriodexcludedtemplateproperties = if("multi" == "default" || "multi" == "csv") {
      cqPeriodcommercePeriodcataloggeneratorPeriodexcludedtemplatepropertiesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cqPeriodcommercePeriodcataloggeneratorPeriodexcludedtemplateproperties: " + cqPeriodcommercePeriodcataloggeneratorPeriodexcludedtemplateproperties)
  }

  

  val comAdobeCqCommercePimImplPageEventListenerOperation = (apiOperation[ComAdobeCqCommercePimImplPageEventListenerInfo]("comAdobeCqCommercePimImplPageEventListener")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("cqPeriodcommercePeriodpageeventlistenerPeriodenabled").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.commerce.pim.impl.PageEventListener", operation(comAdobeCqCommercePimImplPageEventListenerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val cqPeriodcommercePeriodpageeventlistenerPeriodenabled = params.getAs[Boolean]("cqPeriodcommercePeriodpageeventlistenerPeriodenabled")

    //println("cqPeriodcommercePeriodpageeventlistenerPeriodenabled: " + cqPeriodcommercePeriodpageeventlistenerPeriodenabled)
  }

  

  val comAdobeCqCommercePimImplProductfeedProductFeedServiceImplOperation = (apiOperation[ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo]("comAdobeCqCommercePimImplProductfeedProductFeedServiceImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("feed generator algorithm").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.commerce.pim.impl.productfeed.ProductFeedServiceImpl", operation(comAdobeCqCommercePimImplProductfeedProductFeedServiceImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val feed generator algorithm = params.getAs[String]("feed generator algorithm")

    //println("feed generator algorithm: " + feed generator algorithm)
  }

  

  val comAdobeCqContentinsightImplReportingServicesSettingsProviderOperation = (apiOperation[ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo]("comAdobeCqContentinsightImplReportingServicesSettingsProvider")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("reportingservicesPeriodurl").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.contentinsight.impl.ReportingServicesSettingsProvider", operation(comAdobeCqContentinsightImplReportingServicesSettingsProviderOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val reportingservicesPeriodurl = params.getAs[String]("reportingservicesPeriodurl")

    //println("reportingservicesPeriodurl: " + reportingservicesPeriodurl)
  }

  

  val comAdobeCqContentinsightImplServletsBrightEdgeProxyServletOperation = (apiOperation[ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo]("comAdobeCqContentinsightImplServletsBrightEdgeProxyServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("brightedgePeriodurl").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.BrightEdgeProxyServlet", operation(comAdobeCqContentinsightImplServletsBrightEdgeProxyServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val brightedgePeriodurl = params.getAs[String]("brightedgePeriodurl")

    //println("brightedgePeriodurl: " + brightedgePeriodurl)
  }

  

  val comAdobeCqContentinsightImplServletsReportingServicesProxyServleOperation = (apiOperation[ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo]("comAdobeCqContentinsightImplServletsReportingServicesProxyServle")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("reportingservicesPeriodproxyPeriodwhitelist").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.ReportingServicesProxyServlet", operation(comAdobeCqContentinsightImplServletsReportingServicesProxyServleOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val reportingservicesPeriodproxyPeriodwhitelistString = params.getAs[String]("reportingservicesPeriodproxyPeriodwhitelist")
    val reportingservicesPeriodproxyPeriodwhitelist = if("multi" == "default" || "multi" == "csv") {
      reportingservicesPeriodproxyPeriodwhitelistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("reportingservicesPeriodproxyPeriodwhitelist: " + reportingservicesPeriodproxyPeriodwhitelist)
  }

  

  val comAdobeCqDamCfmImplComponentComponentConfigImplOperation = (apiOperation[ComAdobeCqDamCfmImplComponentComponentConfigImplInfo]("comAdobeCqDamCfmImplComponentComponentConfigImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("damPeriodcfmPeriodcomponentPeriodresourceType").description("").optional, queryParam[String]("damPeriodcfmPeriodcomponentPeriodfileReferenceProp").description("").optional, queryParam[String]("damPeriodcfmPeriodcomponentPeriodelementsProp").description("").optional, queryParam[String]("damPeriodcfmPeriodcomponentPeriodvariationProp").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.dam.cfm.impl.component.ComponentConfigImpl", operation(comAdobeCqDamCfmImplComponentComponentConfigImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val damPeriodcfmPeriodcomponentPeriodresourceType = params.getAs[String]("damPeriodcfmPeriodcomponentPeriodresourceType")

    //println("damPeriodcfmPeriodcomponentPeriodresourceType: " + damPeriodcfmPeriodcomponentPeriodresourceType)
            val damPeriodcfmPeriodcomponentPeriodfileReferenceProp = params.getAs[String]("damPeriodcfmPeriodcomponentPeriodfileReferenceProp")

    //println("damPeriodcfmPeriodcomponentPeriodfileReferenceProp: " + damPeriodcfmPeriodcomponentPeriodfileReferenceProp)
            val damPeriodcfmPeriodcomponentPeriodelementsProp = params.getAs[String]("damPeriodcfmPeriodcomponentPeriodelementsProp")

    //println("damPeriodcfmPeriodcomponentPeriodelementsProp: " + damPeriodcfmPeriodcomponentPeriodelementsProp)
            val damPeriodcfmPeriodcomponentPeriodvariationProp = params.getAs[String]("damPeriodcfmPeriodcomponentPeriodvariationProp")

    //println("damPeriodcfmPeriodcomponentPeriodvariationProp: " + damPeriodcfmPeriodcomponentPeriodvariationProp)
  }

  

  val comAdobeCqDamCfmImplConfFeatureConfigImplOperation = (apiOperation[ComAdobeCqDamCfmImplConfFeatureConfigImplInfo]("comAdobeCqDamCfmImplConfFeatureConfigImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("damPeriodcfmPeriodresourceTypes").description("").optional, queryParam[List[String]]("damPeriodcfmPeriodreferenceProperties").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.dam.cfm.impl.conf.FeatureConfigImpl", operation(comAdobeCqDamCfmImplConfFeatureConfigImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val damPeriodcfmPeriodresourceTypesString = params.getAs[String]("damPeriodcfmPeriodresourceTypes")
    val damPeriodcfmPeriodresourceTypes = if("multi" == "default" || "multi" == "csv") {
      damPeriodcfmPeriodresourceTypesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("damPeriodcfmPeriodresourceTypes: " + damPeriodcfmPeriodresourceTypes)
        val damPeriodcfmPeriodreferencePropertiesString = params.getAs[String]("damPeriodcfmPeriodreferenceProperties")
    val damPeriodcfmPeriodreferenceProperties = if("multi" == "default" || "multi" == "csv") {
      damPeriodcfmPeriodreferencePropertiesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("damPeriodcfmPeriodreferenceProperties: " + damPeriodcfmPeriodreferenceProperties)
  }

  

  val comAdobeCqDamCfmImplContentRewriterAssetProcessorOperation = (apiOperation[ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo]("comAdobeCqDamCfmImplContentRewriterAssetProcessor")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("pipelinePeriodtype").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.AssetProcessor", operation(comAdobeCqDamCfmImplContentRewriterAssetProcessorOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val pipelinePeriodtype = params.getAs[String]("pipelinePeriodtype")

    //println("pipelinePeriodtype: " + pipelinePeriodtype)
  }

  

  val comAdobeCqDamCfmImplContentRewriterParRangeFilterOperation = (apiOperation[ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo]("comAdobeCqDamCfmImplContentRewriterParRangeFilter")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("pipelinePeriodtype").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.ParRangeFilter", operation(comAdobeCqDamCfmImplContentRewriterParRangeFilterOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val pipelinePeriodtype = params.getAs[String]("pipelinePeriodtype")

    //println("pipelinePeriodtype: " + pipelinePeriodtype)
  }

  

  val comAdobeCqDamCfmImplContentRewriterPayloadFilterOperation = (apiOperation[ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo]("comAdobeCqDamCfmImplContentRewriterPayloadFilter")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("pipelinePeriodtype").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.PayloadFilter", operation(comAdobeCqDamCfmImplContentRewriterPayloadFilterOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val pipelinePeriodtype = params.getAs[String]("pipelinePeriodtype")

    //println("pipelinePeriodtype: " + pipelinePeriodtype)
  }

  

  val comAdobeCqDamDmProcessImagePTiffManagerImplOperation = (apiOperation[ComAdobeCqDamDmProcessImagePTiffManagerImplInfo]("comAdobeCqDamDmProcessImagePTiffManagerImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("maxMemory").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.dam.dm.process.image.PTiffManagerImpl", operation(comAdobeCqDamDmProcessImagePTiffManagerImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val maxMemory = params.getAs[Int]("maxMemory")

    //println("maxMemory: " + maxMemory)
  }

  

  val comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerOperation = (apiOperation[ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo]("comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("dmreplicateonmodifyPeriodenabled").description("").optional, queryParam[Boolean]("dmreplicateonmodifyPeriodforcesyncdeletes").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.dam.ips.impl.replication.trigger.ReplicateOnModifyWorker", operation(comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val dmreplicateonmodifyPeriodenabled = params.getAs[Boolean]("dmreplicateonmodifyPeriodenabled")

    //println("dmreplicateonmodifyPeriodenabled: " + dmreplicateonmodifyPeriodenabled)
            val dmreplicateonmodifyPeriodforcesyncdeletes = params.getAs[Boolean]("dmreplicateonmodifyPeriodforcesyncdeletes")

    //println("dmreplicateonmodifyPeriodforcesyncdeletes: " + dmreplicateonmodifyPeriodforcesyncdeletes)
  }

  

  val comAdobeCqDamMacSyncHelperImplMACSyncClientImplOperation = (apiOperation[ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo]("comAdobeCqDamMacSyncHelperImplMACSyncClientImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("comPeriodadobePerioddamPeriodmacPeriodsyncPeriodclientPeriodsoPeriodtimeout").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.dam.mac.sync.helper.impl.MACSyncClientImpl", operation(comAdobeCqDamMacSyncHelperImplMACSyncClientImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val comPeriodadobePerioddamPeriodmacPeriodsyncPeriodclientPeriodsoPeriodtimeout = params.getAs[Int]("comPeriodadobePerioddamPeriodmacPeriodsyncPeriodclientPeriodsoPeriodtimeout")

    //println("comPeriodadobePerioddamPeriodmacPeriodsyncPeriodclientPeriodsoPeriodtimeout: " + comPeriodadobePerioddamPeriodmacPeriodsyncPeriodclientPeriodsoPeriodtimeout)
  }

  

  val comAdobeCqDamMacSyncImplDAMSyncServiceImplOperation = (apiOperation[ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo]("comAdobeCqDamMacSyncImplDAMSyncServiceImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodregisteredPaths").description("").optional, queryParam[Boolean]("comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodsyncPeriodrenditions").description("").optional, queryParam[Int]("comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodreplicatePeriodthreadPeriodwaitPeriodms").description("").optional, queryParam[String]("comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodplatform").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.dam.mac.sync.impl.DAMSyncServiceImpl", operation(comAdobeCqDamMacSyncImplDAMSyncServiceImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodregisteredPathsString = params.getAs[String]("comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodregisteredPaths")
    val comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodregisteredPaths = if("multi" == "default" || "multi" == "csv") {
      comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodregisteredPathsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodregisteredPaths: " + comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodregisteredPaths)
            val comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodsyncPeriodrenditions = params.getAs[Boolean]("comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodsyncPeriodrenditions")

    //println("comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodsyncPeriodrenditions: " + comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodsyncPeriodrenditions)
            val comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodreplicatePeriodthreadPeriodwaitPeriodms = params.getAs[Int]("comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodreplicatePeriodthreadPeriodwaitPeriodms")

    //println("comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodreplicatePeriodthreadPeriodwaitPeriodms: " + comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodreplicatePeriodthreadPeriodwaitPeriodms)
            val comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodplatform = params.getAs[String]("comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodplatform")

    //println("comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodplatform: " + comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodplatform)
  }

  

  val comAdobeCqDamProcessorNuiImplNuiAssetProcessorOperation = (apiOperation[ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo]("comAdobeCqDamProcessorNuiImplNuiAssetProcessor")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("nuiEnabled").description("").optional, queryParam[String]("nuiServiceUrl").description("").optional, queryParam[String]("nuiApiKey").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.dam.processor.nui.impl.NuiAssetProcessor", operation(comAdobeCqDamProcessorNuiImplNuiAssetProcessorOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val nuiEnabled = params.getAs[Boolean]("nuiEnabled")

    //println("nuiEnabled: " + nuiEnabled)
            val nuiServiceUrl = params.getAs[String]("nuiServiceUrl")

    //println("nuiServiceUrl: " + nuiServiceUrl)
            val nuiApiKey = params.getAs[String]("nuiApiKey")

    //println("nuiApiKey: " + nuiApiKey)
  }

  

  val comAdobeCqDamS7imagingImplIsImageServerComponentOperation = (apiOperation[ComAdobeCqDamS7imagingImplIsImageServerComponentInfo]("comAdobeCqDamS7imagingImplIsImageServerComponent")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("tcpPort").description("").optional, queryParam[Boolean]("allowRemoteAccess").description("").optional, queryParam[String]("maxRenderRgnPixels").description("").optional, queryParam[String]("maxMessageSize").description("").optional, queryParam[Int]("randomAccessUrlTimeout").description("").optional, queryParam[Int]("workerThreads").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.dam.s7imaging.impl.is.ImageServerComponent", operation(comAdobeCqDamS7imagingImplIsImageServerComponentOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val tcpPort = params.getAs[String]("tcpPort")

    //println("tcpPort: " + tcpPort)
            val allowRemoteAccess = params.getAs[Boolean]("allowRemoteAccess")

    //println("allowRemoteAccess: " + allowRemoteAccess)
            val maxRenderRgnPixels = params.getAs[String]("maxRenderRgnPixels")

    //println("maxRenderRgnPixels: " + maxRenderRgnPixels)
            val maxMessageSize = params.getAs[String]("maxMessageSize")

    //println("maxMessageSize: " + maxMessageSize)
            val randomAccessUrlTimeout = params.getAs[Int]("randomAccessUrlTimeout")

    //println("randomAccessUrlTimeout: " + randomAccessUrlTimeout)
            val workerThreads = params.getAs[Int]("workerThreads")

    //println("workerThreads: " + workerThreads)
  }

  

  val comAdobeCqDamS7imagingImplPsPlatformServerServletOperation = (apiOperation[ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo]("comAdobeCqDamS7imagingImplPsPlatformServerServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("cachePeriodenable").description("").optional, queryParam[List[String]]("cachePeriodrootPaths").description("").optional, queryParam[Int]("cachePeriodmaxSize").description("").optional, queryParam[Int]("cachePeriodmaxEntries").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.dam.s7imaging.impl.ps.PlatformServerServlet", operation(comAdobeCqDamS7imagingImplPsPlatformServerServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val cachePeriodenable = params.getAs[Boolean]("cachePeriodenable")

    //println("cachePeriodenable: " + cachePeriodenable)
        val cachePeriodrootPathsString = params.getAs[String]("cachePeriodrootPaths")
    val cachePeriodrootPaths = if("multi" == "default" || "multi" == "csv") {
      cachePeriodrootPathsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cachePeriodrootPaths: " + cachePeriodrootPaths)
            val cachePeriodmaxSize = params.getAs[Int]("cachePeriodmaxSize")

    //println("cachePeriodmaxSize: " + cachePeriodmaxSize)
            val cachePeriodmaxEntries = params.getAs[Int]("cachePeriodmaxEntries")

    //println("cachePeriodmaxEntries: " + cachePeriodmaxEntries)
  }

  

  val comAdobeCqDamWebdavImplIoAssetIOHandlerOperation = (apiOperation[ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo]("comAdobeCqDamWebdavImplIoAssetIOHandler")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("servicePeriodranking").description("").optional, queryParam[String]("pathPrefix").description("").optional, queryParam[Boolean]("createVersion").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.AssetIOHandler", operation(comAdobeCqDamWebdavImplIoAssetIOHandlerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val servicePeriodranking = params.getAs[Int]("servicePeriodranking")

    //println("servicePeriodranking: " + servicePeriodranking)
            val pathPrefix = params.getAs[String]("pathPrefix")

    //println("pathPrefix: " + pathPrefix)
            val createVersion = params.getAs[Boolean]("createVersion")

    //println("createVersion: " + createVersion)
  }

  

  val comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobOperation = (apiOperation[ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo]("comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodenable").description("").optional, queryParam[Int]("cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodschedulerPeriodperiod").description("").optional, queryParam[Int]("cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodstagingPeriodtimeout").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.DamWebdavVersionLinkingJob", operation(comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodenable = params.getAs[Boolean]("cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodenable")

    //println("cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodenable: " + cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodenable)
            val cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodschedulerPeriodperiod = params.getAs[Int]("cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodschedulerPeriodperiod")

    //println("cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodschedulerPeriodperiod: " + cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodschedulerPeriodperiod)
            val cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodstagingPeriodtimeout = params.getAs[Int]("cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodstagingPeriodtimeout")

    //println("cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodstagingPeriodtimeout: " + cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodstagingPeriodtimeout)
  }

  

  val comAdobeCqDamWebdavImplIoSpecialFilesHandlerOperation = (apiOperation[ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo]("comAdobeCqDamWebdavImplIoSpecialFilesHandler")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("comPerioddayPeriodcqPerioddamPeriodcorePeriodimplPeriodioPeriodSpecialFilesHandlerPeriodfilepatters").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.SpecialFilesHandler", operation(comAdobeCqDamWebdavImplIoSpecialFilesHandlerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val comPerioddayPeriodcqPerioddamPeriodcorePeriodimplPeriodioPeriodSpecialFilesHandlerPeriodfilepattersString = params.getAs[String]("comPerioddayPeriodcqPerioddamPeriodcorePeriodimplPeriodioPeriodSpecialFilesHandlerPeriodfilepatters")
    val comPerioddayPeriodcqPerioddamPeriodcorePeriodimplPeriodioPeriodSpecialFilesHandlerPeriodfilepatters = if("multi" == "default" || "multi" == "csv") {
      comPerioddayPeriodcqPerioddamPeriodcorePeriodimplPeriodioPeriodSpecialFilesHandlerPeriodfilepattersString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("comPerioddayPeriodcqPerioddamPeriodcorePeriodimplPeriodioPeriodSpecialFilesHandlerPeriodfilepatters: " + comPerioddayPeriodcqPerioddamPeriodcorePeriodimplPeriodioPeriodSpecialFilesHandlerPeriodfilepatters)
  }

  

  val comAdobeCqDeserfwImplDeserializationFirewallImplOperation = (apiOperation[ComAdobeCqDeserfwImplDeserializationFirewallImplInfo]("comAdobeCqDeserfwImplDeserializationFirewallImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("firewallPerioddeserializationPeriodwhitelist").description("").optional, queryParam[List[String]]("firewallPerioddeserializationPeriodblacklist").description("").optional, queryParam[String]("firewallPerioddeserializationPerioddiagnostics").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.deserfw.impl.DeserializationFirewallImpl", operation(comAdobeCqDeserfwImplDeserializationFirewallImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val firewallPerioddeserializationPeriodwhitelistString = params.getAs[String]("firewallPerioddeserializationPeriodwhitelist")
    val firewallPerioddeserializationPeriodwhitelist = if("multi" == "default" || "multi" == "csv") {
      firewallPerioddeserializationPeriodwhitelistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("firewallPerioddeserializationPeriodwhitelist: " + firewallPerioddeserializationPeriodwhitelist)
        val firewallPerioddeserializationPeriodblacklistString = params.getAs[String]("firewallPerioddeserializationPeriodblacklist")
    val firewallPerioddeserializationPeriodblacklist = if("multi" == "default" || "multi" == "csv") {
      firewallPerioddeserializationPeriodblacklistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("firewallPerioddeserializationPeriodblacklist: " + firewallPerioddeserializationPeriodblacklist)
            val firewallPerioddeserializationPerioddiagnostics = params.getAs[String]("firewallPerioddeserializationPerioddiagnostics")

    //println("firewallPerioddeserializationPerioddiagnostics: " + firewallPerioddeserializationPerioddiagnostics)
  }

  

  val comAdobeCqDtmImplServiceDTMWebServiceImplOperation = (apiOperation[ComAdobeCqDtmImplServiceDTMWebServiceImplInfo]("comAdobeCqDtmImplServiceDTMWebServiceImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("connectionPeriodtimeout").description("").optional, queryParam[Int]("socketPeriodtimeout").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.dtm.impl.service.DTMWebServiceImpl", operation(comAdobeCqDtmImplServiceDTMWebServiceImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val connectionPeriodtimeout = params.getAs[Int]("connectionPeriodtimeout")

    //println("connectionPeriodtimeout: " + connectionPeriodtimeout)
            val socketPeriodtimeout = params.getAs[Int]("socketPeriodtimeout")

    //println("socketPeriodtimeout: " + socketPeriodtimeout)
  }

  

  val comAdobeCqDtmImplServletsDTMDeployHookServletOperation = (apiOperation[ComAdobeCqDtmImplServletsDTMDeployHookServletInfo]("comAdobeCqDtmImplServletsDTMDeployHookServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("dtmPeriodstagingPeriodipPeriodwhitelist").description("").optional, queryParam[List[String]]("dtmPeriodproductionPeriodipPeriodwhitelist").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.dtm.impl.servlets.DTMDeployHookServlet", operation(comAdobeCqDtmImplServletsDTMDeployHookServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val dtmPeriodstagingPeriodipPeriodwhitelistString = params.getAs[String]("dtmPeriodstagingPeriodipPeriodwhitelist")
    val dtmPeriodstagingPeriodipPeriodwhitelist = if("multi" == "default" || "multi" == "csv") {
      dtmPeriodstagingPeriodipPeriodwhitelistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("dtmPeriodstagingPeriodipPeriodwhitelist: " + dtmPeriodstagingPeriodipPeriodwhitelist)
        val dtmPeriodproductionPeriodipPeriodwhitelistString = params.getAs[String]("dtmPeriodproductionPeriodipPeriodwhitelist")
    val dtmPeriodproductionPeriodipPeriodwhitelist = if("multi" == "default" || "multi" == "csv") {
      dtmPeriodproductionPeriodipPeriodwhitelistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("dtmPeriodproductionPeriodipPeriodwhitelist: " + dtmPeriodproductionPeriodipPeriodwhitelist)
  }

  

  val comAdobeCqDtmReactorImplServiceWebServiceImplOperation = (apiOperation[ComAdobeCqDtmReactorImplServiceWebServiceImplInfo]("comAdobeCqDtmReactorImplServiceWebServiceImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("endpointUri").description("").optional, queryParam[Int]("connectionTimeout").description("").optional, queryParam[Int]("socketTimeout").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.dtm.reactor.impl.service.WebServiceImpl", operation(comAdobeCqDtmReactorImplServiceWebServiceImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val endpointUri = params.getAs[String]("endpointUri")

    //println("endpointUri: " + endpointUri)
            val connectionTimeout = params.getAs[Int]("connectionTimeout")

    //println("connectionTimeout: " + connectionTimeout)
            val socketTimeout = params.getAs[Int]("socketTimeout")

    //println("socketTimeout: " + socketTimeout)
  }

  

  val comAdobeCqExperiencelogImplExperienceLogConfigServletOperation = (apiOperation[ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo]("comAdobeCqExperiencelogImplExperienceLogConfigServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("enabled").description("").optional, queryParam[List[String]]("disabledForGroups").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.experiencelog.impl.ExperienceLogConfigServlet", operation(comAdobeCqExperiencelogImplExperienceLogConfigServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val enabled = params.getAs[Boolean]("enabled")

    //println("enabled: " + enabled)
        val disabledForGroupsString = params.getAs[String]("disabledForGroups")
    val disabledForGroups = if("multi" == "default" || "multi" == "csv") {
      disabledForGroupsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("disabledForGroups: " + disabledForGroups)
  }

  

  val comAdobeCqHcContentPackagesHealthCheckOperation = (apiOperation[ComAdobeCqHcContentPackagesHealthCheckInfo]("comAdobeCqHcContentPackagesHealthCheck")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("hcPeriodname").description("").optional, queryParam[List[String]]("hcPeriodtags").description("").optional, queryParam[String]("hcPeriodmbeanPeriodname").description("").optional, queryParam[List[String]]("packagePeriodnames").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.hc.ContentPackagesHealthCheck", operation(comAdobeCqHcContentPackagesHealthCheckOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val hcPeriodname = params.getAs[String]("hcPeriodname")

    //println("hcPeriodname: " + hcPeriodname)
        val hcPeriodtagsString = params.getAs[String]("hcPeriodtags")
    val hcPeriodtags = if("multi" == "default" || "multi" == "csv") {
      hcPeriodtagsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("hcPeriodtags: " + hcPeriodtags)
            val hcPeriodmbeanPeriodname = params.getAs[String]("hcPeriodmbeanPeriodname")

    //println("hcPeriodmbeanPeriodname: " + hcPeriodmbeanPeriodname)
        val packagePeriodnamesString = params.getAs[String]("packagePeriodnames")
    val packagePeriodnames = if("multi" == "default" || "multi" == "csv") {
      packagePeriodnamesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("packagePeriodnames: " + packagePeriodnames)
  }

  

  val comAdobeCqHistoryImplHistoryRequestFilterOperation = (apiOperation[ComAdobeCqHistoryImplHistoryRequestFilterInfo]("comAdobeCqHistoryImplHistoryRequestFilter")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("historyPeriodrequestFilterPeriodexcludedSelectors").description("").optional, queryParam[List[String]]("historyPeriodrequestFilterPeriodexcludedExtensions").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.history.impl.HistoryRequestFilter", operation(comAdobeCqHistoryImplHistoryRequestFilterOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val historyPeriodrequestFilterPeriodexcludedSelectorsString = params.getAs[String]("historyPeriodrequestFilterPeriodexcludedSelectors")
    val historyPeriodrequestFilterPeriodexcludedSelectors = if("multi" == "default" || "multi" == "csv") {
      historyPeriodrequestFilterPeriodexcludedSelectorsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("historyPeriodrequestFilterPeriodexcludedSelectors: " + historyPeriodrequestFilterPeriodexcludedSelectors)
        val historyPeriodrequestFilterPeriodexcludedExtensionsString = params.getAs[String]("historyPeriodrequestFilterPeriodexcludedExtensions")
    val historyPeriodrequestFilterPeriodexcludedExtensions = if("multi" == "default" || "multi" == "csv") {
      historyPeriodrequestFilterPeriodexcludedExtensionsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("historyPeriodrequestFilterPeriodexcludedExtensions: " + historyPeriodrequestFilterPeriodexcludedExtensions)
  }

  

  val comAdobeCqHistoryImplHistoryServiceImplOperation = (apiOperation[ComAdobeCqHistoryImplHistoryServiceImplInfo]("comAdobeCqHistoryImplHistoryServiceImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("historyPeriodservicePeriodresourceTypes").description("").optional, queryParam[List[String]]("historyPeriodservicePeriodpathFilter").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.history.impl.HistoryServiceImpl", operation(comAdobeCqHistoryImplHistoryServiceImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val historyPeriodservicePeriodresourceTypesString = params.getAs[String]("historyPeriodservicePeriodresourceTypes")
    val historyPeriodservicePeriodresourceTypes = if("multi" == "default" || "multi" == "csv") {
      historyPeriodservicePeriodresourceTypesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("historyPeriodservicePeriodresourceTypes: " + historyPeriodservicePeriodresourceTypes)
        val historyPeriodservicePeriodpathFilterString = params.getAs[String]("historyPeriodservicePeriodpathFilter")
    val historyPeriodservicePeriodpathFilter = if("multi" == "default" || "multi" == "csv") {
      historyPeriodservicePeriodpathFilterString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("historyPeriodservicePeriodpathFilter: " + historyPeriodservicePeriodpathFilter)
  }

  

  val comAdobeCqInboxImplTypeproviderItemTypeProviderOperation = (apiOperation[ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo]("comAdobeCqInboxImplTypeproviderItemTypeProvider")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("inboxPeriodimplPeriodtypeproviderPeriodregistrypaths").description("").optional, queryParam[List[String]]("inboxPeriodimplPeriodtypeproviderPeriodlegacypaths").description("").optional, queryParam[String]("inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodfailureitem").description("").optional, queryParam[String]("inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodworkitem").description("").optional, queryParam[String]("inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodtask").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.inbox.impl.typeprovider.ItemTypeProvider", operation(comAdobeCqInboxImplTypeproviderItemTypeProviderOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val inboxPeriodimplPeriodtypeproviderPeriodregistrypathsString = params.getAs[String]("inboxPeriodimplPeriodtypeproviderPeriodregistrypaths")
    val inboxPeriodimplPeriodtypeproviderPeriodregistrypaths = if("multi" == "default" || "multi" == "csv") {
      inboxPeriodimplPeriodtypeproviderPeriodregistrypathsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("inboxPeriodimplPeriodtypeproviderPeriodregistrypaths: " + inboxPeriodimplPeriodtypeproviderPeriodregistrypaths)
        val inboxPeriodimplPeriodtypeproviderPeriodlegacypathsString = params.getAs[String]("inboxPeriodimplPeriodtypeproviderPeriodlegacypaths")
    val inboxPeriodimplPeriodtypeproviderPeriodlegacypaths = if("multi" == "default" || "multi" == "csv") {
      inboxPeriodimplPeriodtypeproviderPeriodlegacypathsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("inboxPeriodimplPeriodtypeproviderPeriodlegacypaths: " + inboxPeriodimplPeriodtypeproviderPeriodlegacypaths)
            val inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodfailureitem = params.getAs[String]("inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodfailureitem")

    //println("inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodfailureitem: " + inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodfailureitem)
            val inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodworkitem = params.getAs[String]("inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodworkitem")

    //println("inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodworkitem: " + inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodworkitem)
            val inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodtask = params.getAs[String]("inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodtask")

    //println("inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodtask: " + inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodtask)
  }

  

  val comAdobeCqProjectsImplServletProjectImageServletOperation = (apiOperation[ComAdobeCqProjectsImplServletProjectImageServletInfo]("comAdobeCqProjectsImplServletProjectImageServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("imagePeriodquality").description("").optional, queryParam[String]("imagePeriodsupportedPeriodresolutions").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.projects.impl.servlet.ProjectImageServlet", operation(comAdobeCqProjectsImplServletProjectImageServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val imagePeriodquality = params.getAs[String]("imagePeriodquality")

    //println("imagePeriodquality: " + imagePeriodquality)
            val imagePeriodsupportedPeriodresolutions = params.getAs[String]("imagePeriodsupportedPeriodresolutions")

    //println("imagePeriodsupportedPeriodresolutions: " + imagePeriodsupportedPeriodresolutions)
  }

  

  val comAdobeCqProjectsPurgeSchedulerOperation = (apiOperation[ComAdobeCqProjectsPurgeSchedulerInfo]("comAdobeCqProjectsPurgeScheduler")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("scheduledpurgePeriodname").description("").optional, queryParam[Boolean]("scheduledpurgePeriodpurgeActive").description("").optional, queryParam[List[String]]("scheduledpurgePeriodtemplates").description("").optional, queryParam[Boolean]("scheduledpurgePeriodpurgeGroups").description("").optional, queryParam[Boolean]("scheduledpurgePeriodpurgeAssets").description("").optional, queryParam[Boolean]("scheduledpurgePeriodterminateRunningWorkflows").description("").optional, queryParam[Int]("scheduledpurgePerioddaysold").description("").optional, queryParam[Int]("scheduledpurgePeriodsaveThreshold").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.projects.purge.Scheduler", operation(comAdobeCqProjectsPurgeSchedulerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val scheduledpurgePeriodname = params.getAs[String]("scheduledpurgePeriodname")

    //println("scheduledpurgePeriodname: " + scheduledpurgePeriodname)
            val scheduledpurgePeriodpurgeActive = params.getAs[Boolean]("scheduledpurgePeriodpurgeActive")

    //println("scheduledpurgePeriodpurgeActive: " + scheduledpurgePeriodpurgeActive)
        val scheduledpurgePeriodtemplatesString = params.getAs[String]("scheduledpurgePeriodtemplates")
    val scheduledpurgePeriodtemplates = if("multi" == "default" || "multi" == "csv") {
      scheduledpurgePeriodtemplatesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("scheduledpurgePeriodtemplates: " + scheduledpurgePeriodtemplates)
            val scheduledpurgePeriodpurgeGroups = params.getAs[Boolean]("scheduledpurgePeriodpurgeGroups")

    //println("scheduledpurgePeriodpurgeGroups: " + scheduledpurgePeriodpurgeGroups)
            val scheduledpurgePeriodpurgeAssets = params.getAs[Boolean]("scheduledpurgePeriodpurgeAssets")

    //println("scheduledpurgePeriodpurgeAssets: " + scheduledpurgePeriodpurgeAssets)
            val scheduledpurgePeriodterminateRunningWorkflows = params.getAs[Boolean]("scheduledpurgePeriodterminateRunningWorkflows")

    //println("scheduledpurgePeriodterminateRunningWorkflows: " + scheduledpurgePeriodterminateRunningWorkflows)
            val scheduledpurgePerioddaysold = params.getAs[Int]("scheduledpurgePerioddaysold")

    //println("scheduledpurgePerioddaysold: " + scheduledpurgePerioddaysold)
            val scheduledpurgePeriodsaveThreshold = params.getAs[Int]("scheduledpurgePeriodsaveThreshold")

    //println("scheduledpurgePeriodsaveThreshold: " + scheduledpurgePeriodsaveThreshold)
  }

  

  val comAdobeCqScheduledExporterImplScheduledExporterImplOperation = (apiOperation[ComAdobeCqScheduledExporterImplScheduledExporterImplInfo]("comAdobeCqScheduledExporterImplScheduledExporterImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("includePeriodpaths").description("").optional, queryParam[String]("exporterPerioduser").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.scheduled.exporter.impl.ScheduledExporterImpl", operation(comAdobeCqScheduledExporterImplScheduledExporterImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val includePeriodpathsString = params.getAs[String]("includePeriodpaths")
    val includePeriodpaths = if("multi" == "default" || "multi" == "csv") {
      includePeriodpathsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("includePeriodpaths: " + includePeriodpaths)
            val exporterPerioduser = params.getAs[String]("exporterPerioduser")

    //println("exporterPerioduser: " + exporterPerioduser)
  }

  

  val comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplOperation = (apiOperation[ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo]("comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodurl").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodapikey").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodproject").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodenvironment").description("").optional, queryParam[Int]("comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodsendFrequency").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.screens.analytics.impl.ScreensAnalyticsServiceImpl", operation(comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodurl = params.getAs[String]("comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodurl")

    //println("comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodurl: " + comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodurl)
            val comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodapikey = params.getAs[String]("comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodapikey")

    //println("comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodapikey: " + comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodapikey)
            val comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodproject = params.getAs[String]("comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodproject")

    //println("comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodproject: " + comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodproject)
            val comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodenvironment = params.getAs[String]("comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodenvironment")

    //println("comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodenvironment: " + comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodenvironment)
            val comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodsendFrequency = params.getAs[Int]("comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodsendFrequency")

    //println("comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodsendFrequency: " + comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodsendFrequency)
  }

  

  val comAdobeCqScreensDeviceImplDeviceServiceOperation = (apiOperation[ComAdobeCqScreensDeviceImplDeviceServiceInfo]("comAdobeCqScreensDeviceImplDeviceService")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("comPeriodadobePeriodaemPeriodscreensPeriodplayerPeriodpingfrequency").description("").optional, queryParam[String]("comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodspecialchars").description("").optional, queryParam[Int]("comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminlowercasechars").description("").optional, queryParam[Int]("comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminuppercasechars").description("").optional, queryParam[Int]("comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminnumberchars").description("").optional, queryParam[Int]("comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminspecialchars").description("").optional, queryParam[Int]("comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminlength").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.screens.device.impl.DeviceService", operation(comAdobeCqScreensDeviceImplDeviceServiceOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val comPeriodadobePeriodaemPeriodscreensPeriodplayerPeriodpingfrequency = params.getAs[Int]("comPeriodadobePeriodaemPeriodscreensPeriodplayerPeriodpingfrequency")

    //println("comPeriodadobePeriodaemPeriodscreensPeriodplayerPeriodpingfrequency: " + comPeriodadobePeriodaemPeriodscreensPeriodplayerPeriodpingfrequency)
            val comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodspecialchars = params.getAs[String]("comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodspecialchars")

    //println("comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodspecialchars: " + comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodspecialchars)
            val comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminlowercasechars = params.getAs[Int]("comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminlowercasechars")

    //println("comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminlowercasechars: " + comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminlowercasechars)
            val comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminuppercasechars = params.getAs[Int]("comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminuppercasechars")

    //println("comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminuppercasechars: " + comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminuppercasechars)
            val comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminnumberchars = params.getAs[Int]("comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminnumberchars")

    //println("comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminnumberchars: " + comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminnumberchars)
            val comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminspecialchars = params.getAs[Int]("comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminspecialchars")

    //println("comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminspecialchars: " + comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminspecialchars)
            val comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminlength = params.getAs[Int]("comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminlength")

    //println("comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminlength: " + comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminlength)
  }

  

  val comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplOperation = (apiOperation[ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo]("comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("deviceRegistrationTimeout").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.screens.device.registration.impl.RegistrationServiceImpl", operation(comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val deviceRegistrationTimeout = params.getAs[Int]("deviceRegistrationTimeout")

    //println("deviceRegistrationTimeout: " + deviceRegistrationTimeout)
  }

  

  val comAdobeCqScreensImplHandlerChannelsUpdateHandlerOperation = (apiOperation[ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo]("comAdobeCqScreensImplHandlerChannelsUpdateHandler")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("cqPeriodpagesupdatehandlerPeriodimageresourcetypes").description("").optional, queryParam[List[String]]("cqPeriodpagesupdatehandlerPeriodproductresourcetypes").description("").optional, queryParam[List[String]]("cqPeriodpagesupdatehandlerPeriodvideoresourcetypes").description("").optional, queryParam[List[String]]("cqPeriodpagesupdatehandlerPerioddynamicsequenceresourcetypes").description("").optional, queryParam[List[String]]("cqPeriodpagesupdatehandlerPeriodpreviewmodepaths").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.screens.impl.handler.ChannelsUpdateHandler", operation(comAdobeCqScreensImplHandlerChannelsUpdateHandlerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val cqPeriodpagesupdatehandlerPeriodimageresourcetypesString = params.getAs[String]("cqPeriodpagesupdatehandlerPeriodimageresourcetypes")
    val cqPeriodpagesupdatehandlerPeriodimageresourcetypes = if("multi" == "default" || "multi" == "csv") {
      cqPeriodpagesupdatehandlerPeriodimageresourcetypesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cqPeriodpagesupdatehandlerPeriodimageresourcetypes: " + cqPeriodpagesupdatehandlerPeriodimageresourcetypes)
        val cqPeriodpagesupdatehandlerPeriodproductresourcetypesString = params.getAs[String]("cqPeriodpagesupdatehandlerPeriodproductresourcetypes")
    val cqPeriodpagesupdatehandlerPeriodproductresourcetypes = if("multi" == "default" || "multi" == "csv") {
      cqPeriodpagesupdatehandlerPeriodproductresourcetypesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cqPeriodpagesupdatehandlerPeriodproductresourcetypes: " + cqPeriodpagesupdatehandlerPeriodproductresourcetypes)
        val cqPeriodpagesupdatehandlerPeriodvideoresourcetypesString = params.getAs[String]("cqPeriodpagesupdatehandlerPeriodvideoresourcetypes")
    val cqPeriodpagesupdatehandlerPeriodvideoresourcetypes = if("multi" == "default" || "multi" == "csv") {
      cqPeriodpagesupdatehandlerPeriodvideoresourcetypesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cqPeriodpagesupdatehandlerPeriodvideoresourcetypes: " + cqPeriodpagesupdatehandlerPeriodvideoresourcetypes)
        val cqPeriodpagesupdatehandlerPerioddynamicsequenceresourcetypesString = params.getAs[String]("cqPeriodpagesupdatehandlerPerioddynamicsequenceresourcetypes")
    val cqPeriodpagesupdatehandlerPerioddynamicsequenceresourcetypes = if("multi" == "default" || "multi" == "csv") {
      cqPeriodpagesupdatehandlerPerioddynamicsequenceresourcetypesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cqPeriodpagesupdatehandlerPerioddynamicsequenceresourcetypes: " + cqPeriodpagesupdatehandlerPerioddynamicsequenceresourcetypes)
        val cqPeriodpagesupdatehandlerPeriodpreviewmodepathsString = params.getAs[String]("cqPeriodpagesupdatehandlerPeriodpreviewmodepaths")
    val cqPeriodpagesupdatehandlerPeriodpreviewmodepaths = if("multi" == "default" || "multi" == "csv") {
      cqPeriodpagesupdatehandlerPeriodpreviewmodepathsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cqPeriodpagesupdatehandlerPeriodpreviewmodepaths: " + cqPeriodpagesupdatehandlerPeriodpreviewmodepaths)
  }

  

  val comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobOperation = (apiOperation[ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo]("comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("schedulerPeriodexpression").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.screens.impl.jobs.DistributedDevicesStatiUpdateJob", operation(comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val schedulerPeriodexpression = params.getAs[String]("schedulerPeriodexpression")

    //println("schedulerPeriodexpression: " + schedulerPeriodexpression)
  }

  

  val comAdobeCqScreensImplRemoteImplDistributedHttpClientImplOperation = (apiOperation[ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo]("comAdobeCqScreensImplRemoteImplDistributedHttpClientImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("comPeriodadobePeriodaemPeriodscreensPeriodimplPeriodremotePeriodrequestTimeout").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.screens.impl.remote.impl.DistributedHttpClientImpl", operation(comAdobeCqScreensImplRemoteImplDistributedHttpClientImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val comPeriodadobePeriodaemPeriodscreensPeriodimplPeriodremotePeriodrequestTimeout = params.getAs[Int]("comPeriodadobePeriodaemPeriodscreensPeriodimplPeriodremotePeriodrequestTimeout")

    //println("comPeriodadobePeriodaemPeriodscreensPeriodimplPeriodremotePeriodrequestTimeout: " + comPeriodadobePeriodaemPeriodscreensPeriodimplPeriodremotePeriodrequestTimeout)
  }

  

  val comAdobeCqScreensImplScreensChannelPostProcessorOperation = (apiOperation[ComAdobeCqScreensImplScreensChannelPostProcessorInfo]("comAdobeCqScreensImplScreensChannelPostProcessor")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("screensPeriodchannelsPeriodpropertiesPeriodtoPeriodremove").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.screens.impl.ScreensChannelPostProcessor", operation(comAdobeCqScreensImplScreensChannelPostProcessorOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val screensPeriodchannelsPeriodpropertiesPeriodtoPeriodremoveString = params.getAs[String]("screensPeriodchannelsPeriodpropertiesPeriodtoPeriodremove")
    val screensPeriodchannelsPeriodpropertiesPeriodtoPeriodremove = if("multi" == "default" || "multi" == "csv") {
      screensPeriodchannelsPeriodpropertiesPeriodtoPeriodremoveString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("screensPeriodchannelsPeriodpropertiesPeriodtoPeriodremove: " + screensPeriodchannelsPeriodpropertiesPeriodtoPeriodremove)
  }

  

  val comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplOperation = (apiOperation[ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo]("comAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodprojectPath").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodscheduleFrequency").description("").optional, queryParam[Int]("comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodpingTimeout").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodrecipients").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodsmtpserver").description("").optional, queryParam[Int]("comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodsmtpport").description("").optional, queryParam[Boolean]("comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodusetls").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodusername").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodpassword").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl", operation(comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodprojectPathString = params.getAs[String]("comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodprojectPath")
    val comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodprojectPath = if("multi" == "default" || "multi" == "csv") {
      comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodprojectPathString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodprojectPath: " + comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodprojectPath)
            val comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodscheduleFrequency = params.getAs[String]("comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodscheduleFrequency")

    //println("comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodscheduleFrequency: " + comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodscheduleFrequency)
            val comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodpingTimeout = params.getAs[Int]("comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodpingTimeout")

    //println("comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodpingTimeout: " + comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodpingTimeout)
            val comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodrecipients = params.getAs[String]("comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodrecipients")

    //println("comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodrecipients: " + comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodrecipients)
            val comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodsmtpserver = params.getAs[String]("comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodsmtpserver")

    //println("comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodsmtpserver: " + comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodsmtpserver)
            val comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodsmtpport = params.getAs[Int]("comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodsmtpport")

    //println("comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodsmtpport: " + comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodsmtpport)
            val comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodusetls = params.getAs[Boolean]("comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodusetls")

    //println("comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodusetls: " + comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodusetls)
            val comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodusername = params.getAs[String]("comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodusername")

    //println("comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodusername: " + comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodusername)
            val comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodpassword = params.getAs[String]("comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodpassword")

    //println("comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodpassword: " + comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodpassword)
  }

  

  val comAdobeCqScreensMqActivemqImplArtemisJMSProviderOperation = (apiOperation[ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo]("comAdobeCqScreensMqActivemqImplArtemisJMSProvider")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("servicePeriodranking").description("").optional, queryParam[Int]("globalPeriodsize").description("").optional, queryParam[Int]("maxPerioddiskPeriodusage").description("").optional, queryParam[Boolean]("persistencePeriodenabled").description("").optional, queryParam[Int]("threadPeriodpoolPeriodmaxPeriodsize").description("").optional, queryParam[Int]("scheduledPeriodthreadPeriodpoolPeriodmaxPeriodsize").description("").optional, queryParam[Int]("gracefulPeriodshutdownPeriodtimeout").description("").optional, queryParam[List[String]]("queues").description("").optional, queryParam[List[String]]("topics").description("").optional, queryParam[Int]("addressesPeriodmaxPerioddeliveryPeriodattempts").description("").optional, queryParam[Int]("addressesPeriodexpiryPerioddelay").description("").optional, queryParam[String]("addressesPeriodaddressPeriodfullPeriodmessagePeriodpolicy").description("").optional, queryParam[Int]("addressesPeriodmaxPeriodsizePeriodbytes").description("").optional, queryParam[Int]("addressesPeriodpagePeriodsizePeriodbytes").description("").optional, queryParam[Int]("addressesPeriodpagePeriodcachePeriodmaxPeriodsize").description("").optional, queryParam[String]("clusterPerioduser").description("").optional, queryParam[String]("clusterPeriodpassword").description("").optional, queryParam[Int]("clusterPeriodcallPeriodtimeout").description("").optional, queryParam[Int]("clusterPeriodcallPeriodfailoverPeriodtimeout").description("").optional, queryParam[Int]("clusterPeriodclientPeriodfailurePeriodcheckPeriodperiod").description("").optional, queryParam[Int]("clusterPeriodnotificationPeriodattempts").description("").optional, queryParam[Int]("clusterPeriodnotificationPeriodinterval").description("").optional, queryParam[Int]("idPeriodcachePeriodsize").description("").optional, queryParam[Int]("clusterPeriodconfirmationPeriodwindowPeriodsize").description("").optional, queryParam[Int]("clusterPeriodconnectionPeriodttl").description("").optional, queryParam[Boolean]("clusterPeriodduplicatePerioddetection").description("").optional, queryParam[Int]("clusterPeriodinitialPeriodconnectPeriodattempts").description("").optional, queryParam[Int]("clusterPeriodmaxPeriodretryPeriodinterval").description("").optional, queryParam[Int]("clusterPeriodminPeriodlargePeriodmessagePeriodsize").description("").optional, queryParam[Int]("clusterPeriodproducerPeriodwindowPeriodsize").description("").optional, queryParam[Int]("clusterPeriodreconnectPeriodattempts").description("").optional, queryParam[Int]("clusterPeriodretryPeriodinterval").description("").optional, queryParam[BigDecimal]("clusterPeriodretryPeriodintervalPeriodmultiplier").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.screens.mq.activemq.impl.ArtemisJMSProvider", operation(comAdobeCqScreensMqActivemqImplArtemisJMSProviderOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val servicePeriodranking = params.getAs[Int]("servicePeriodranking")

    //println("servicePeriodranking: " + servicePeriodranking)
            val globalPeriodsize = params.getAs[Int]("globalPeriodsize")

    //println("globalPeriodsize: " + globalPeriodsize)
            val maxPerioddiskPeriodusage = params.getAs[Int]("maxPerioddiskPeriodusage")

    //println("maxPerioddiskPeriodusage: " + maxPerioddiskPeriodusage)
            val persistencePeriodenabled = params.getAs[Boolean]("persistencePeriodenabled")

    //println("persistencePeriodenabled: " + persistencePeriodenabled)
            val threadPeriodpoolPeriodmaxPeriodsize = params.getAs[Int]("threadPeriodpoolPeriodmaxPeriodsize")

    //println("threadPeriodpoolPeriodmaxPeriodsize: " + threadPeriodpoolPeriodmaxPeriodsize)
            val scheduledPeriodthreadPeriodpoolPeriodmaxPeriodsize = params.getAs[Int]("scheduledPeriodthreadPeriodpoolPeriodmaxPeriodsize")

    //println("scheduledPeriodthreadPeriodpoolPeriodmaxPeriodsize: " + scheduledPeriodthreadPeriodpoolPeriodmaxPeriodsize)
            val gracefulPeriodshutdownPeriodtimeout = params.getAs[Int]("gracefulPeriodshutdownPeriodtimeout")

    //println("gracefulPeriodshutdownPeriodtimeout: " + gracefulPeriodshutdownPeriodtimeout)
        val queuesString = params.getAs[String]("queues")
    val queues = if("multi" == "default" || "multi" == "csv") {
      queuesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("queues: " + queues)
        val topicsString = params.getAs[String]("topics")
    val topics = if("multi" == "default" || "multi" == "csv") {
      topicsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("topics: " + topics)
            val addressesPeriodmaxPerioddeliveryPeriodattempts = params.getAs[Int]("addressesPeriodmaxPerioddeliveryPeriodattempts")

    //println("addressesPeriodmaxPerioddeliveryPeriodattempts: " + addressesPeriodmaxPerioddeliveryPeriodattempts)
            val addressesPeriodexpiryPerioddelay = params.getAs[Int]("addressesPeriodexpiryPerioddelay")

    //println("addressesPeriodexpiryPerioddelay: " + addressesPeriodexpiryPerioddelay)
            val addressesPeriodaddressPeriodfullPeriodmessagePeriodpolicy = params.getAs[String]("addressesPeriodaddressPeriodfullPeriodmessagePeriodpolicy")

    //println("addressesPeriodaddressPeriodfullPeriodmessagePeriodpolicy: " + addressesPeriodaddressPeriodfullPeriodmessagePeriodpolicy)
            val addressesPeriodmaxPeriodsizePeriodbytes = params.getAs[Int]("addressesPeriodmaxPeriodsizePeriodbytes")

    //println("addressesPeriodmaxPeriodsizePeriodbytes: " + addressesPeriodmaxPeriodsizePeriodbytes)
            val addressesPeriodpagePeriodsizePeriodbytes = params.getAs[Int]("addressesPeriodpagePeriodsizePeriodbytes")

    //println("addressesPeriodpagePeriodsizePeriodbytes: " + addressesPeriodpagePeriodsizePeriodbytes)
            val addressesPeriodpagePeriodcachePeriodmaxPeriodsize = params.getAs[Int]("addressesPeriodpagePeriodcachePeriodmaxPeriodsize")

    //println("addressesPeriodpagePeriodcachePeriodmaxPeriodsize: " + addressesPeriodpagePeriodcachePeriodmaxPeriodsize)
            val clusterPerioduser = params.getAs[String]("clusterPerioduser")

    //println("clusterPerioduser: " + clusterPerioduser)
            val clusterPeriodpassword = params.getAs[String]("clusterPeriodpassword")

    //println("clusterPeriodpassword: " + clusterPeriodpassword)
            val clusterPeriodcallPeriodtimeout = params.getAs[Int]("clusterPeriodcallPeriodtimeout")

    //println("clusterPeriodcallPeriodtimeout: " + clusterPeriodcallPeriodtimeout)
            val clusterPeriodcallPeriodfailoverPeriodtimeout = params.getAs[Int]("clusterPeriodcallPeriodfailoverPeriodtimeout")

    //println("clusterPeriodcallPeriodfailoverPeriodtimeout: " + clusterPeriodcallPeriodfailoverPeriodtimeout)
            val clusterPeriodclientPeriodfailurePeriodcheckPeriodperiod = params.getAs[Int]("clusterPeriodclientPeriodfailurePeriodcheckPeriodperiod")

    //println("clusterPeriodclientPeriodfailurePeriodcheckPeriodperiod: " + clusterPeriodclientPeriodfailurePeriodcheckPeriodperiod)
            val clusterPeriodnotificationPeriodattempts = params.getAs[Int]("clusterPeriodnotificationPeriodattempts")

    //println("clusterPeriodnotificationPeriodattempts: " + clusterPeriodnotificationPeriodattempts)
            val clusterPeriodnotificationPeriodinterval = params.getAs[Int]("clusterPeriodnotificationPeriodinterval")

    //println("clusterPeriodnotificationPeriodinterval: " + clusterPeriodnotificationPeriodinterval)
            val idPeriodcachePeriodsize = params.getAs[Int]("idPeriodcachePeriodsize")

    //println("idPeriodcachePeriodsize: " + idPeriodcachePeriodsize)
            val clusterPeriodconfirmationPeriodwindowPeriodsize = params.getAs[Int]("clusterPeriodconfirmationPeriodwindowPeriodsize")

    //println("clusterPeriodconfirmationPeriodwindowPeriodsize: " + clusterPeriodconfirmationPeriodwindowPeriodsize)
            val clusterPeriodconnectionPeriodttl = params.getAs[Int]("clusterPeriodconnectionPeriodttl")

    //println("clusterPeriodconnectionPeriodttl: " + clusterPeriodconnectionPeriodttl)
            val clusterPeriodduplicatePerioddetection = params.getAs[Boolean]("clusterPeriodduplicatePerioddetection")

    //println("clusterPeriodduplicatePerioddetection: " + clusterPeriodduplicatePerioddetection)
            val clusterPeriodinitialPeriodconnectPeriodattempts = params.getAs[Int]("clusterPeriodinitialPeriodconnectPeriodattempts")

    //println("clusterPeriodinitialPeriodconnectPeriodattempts: " + clusterPeriodinitialPeriodconnectPeriodattempts)
            val clusterPeriodmaxPeriodretryPeriodinterval = params.getAs[Int]("clusterPeriodmaxPeriodretryPeriodinterval")

    //println("clusterPeriodmaxPeriodretryPeriodinterval: " + clusterPeriodmaxPeriodretryPeriodinterval)
            val clusterPeriodminPeriodlargePeriodmessagePeriodsize = params.getAs[Int]("clusterPeriodminPeriodlargePeriodmessagePeriodsize")

    //println("clusterPeriodminPeriodlargePeriodmessagePeriodsize: " + clusterPeriodminPeriodlargePeriodmessagePeriodsize)
            val clusterPeriodproducerPeriodwindowPeriodsize = params.getAs[Int]("clusterPeriodproducerPeriodwindowPeriodsize")

    //println("clusterPeriodproducerPeriodwindowPeriodsize: " + clusterPeriodproducerPeriodwindowPeriodsize)
            val clusterPeriodreconnectPeriodattempts = params.getAs[Int]("clusterPeriodreconnectPeriodattempts")

    //println("clusterPeriodreconnectPeriodattempts: " + clusterPeriodreconnectPeriodattempts)
            val clusterPeriodretryPeriodinterval = params.getAs[Int]("clusterPeriodretryPeriodinterval")

    //println("clusterPeriodretryPeriodinterval: " + clusterPeriodretryPeriodinterval)
            val clusterPeriodretryPeriodintervalPeriodmultiplier = params.getAs[BigDecimal]("clusterPeriodretryPeriodintervalPeriodmultiplier")

    //println("clusterPeriodretryPeriodintervalPeriodmultiplier: " + clusterPeriodretryPeriodintervalPeriodmultiplier)
  }

  

  val comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplOperation = (apiOperation[ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo]("comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("comPeriodadobePeriodcqPeriodscreensPeriodofflinecontentPeriodimplPeriodBulkOfflineUpdateServiceImplPeriodprojectPath").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodscreensPeriodofflinecontentPeriodimplPeriodBulkOfflineUpdateServiceImplPeriodscheduleFrequency").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl", operation(comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val comPeriodadobePeriodcqPeriodscreensPeriodofflinecontentPeriodimplPeriodBulkOfflineUpdateServiceImplPeriodprojectPathString = params.getAs[String]("comPeriodadobePeriodcqPeriodscreensPeriodofflinecontentPeriodimplPeriodBulkOfflineUpdateServiceImplPeriodprojectPath")
    val comPeriodadobePeriodcqPeriodscreensPeriodofflinecontentPeriodimplPeriodBulkOfflineUpdateServiceImplPeriodprojectPath = if("multi" == "default" || "multi" == "csv") {
      comPeriodadobePeriodcqPeriodscreensPeriodofflinecontentPeriodimplPeriodBulkOfflineUpdateServiceImplPeriodprojectPathString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("comPeriodadobePeriodcqPeriodscreensPeriodofflinecontentPeriodimplPeriodBulkOfflineUpdateServiceImplPeriodprojectPath: " + comPeriodadobePeriodcqPeriodscreensPeriodofflinecontentPeriodimplPeriodBulkOfflineUpdateServiceImplPeriodprojectPath)
            val comPeriodadobePeriodcqPeriodscreensPeriodofflinecontentPeriodimplPeriodBulkOfflineUpdateServiceImplPeriodscheduleFrequency = params.getAs[String]("comPeriodadobePeriodcqPeriodscreensPeriodofflinecontentPeriodimplPeriodBulkOfflineUpdateServiceImplPeriodscheduleFrequency")

    //println("comPeriodadobePeriodcqPeriodscreensPeriodofflinecontentPeriodimplPeriodBulkOfflineUpdateServiceImplPeriodscheduleFrequency: " + comPeriodadobePeriodcqPeriodscreensPeriodofflinecontentPeriodimplPeriodBulkOfflineUpdateServiceImplPeriodscheduleFrequency)
  }

  

  val comAdobeCqScreensOfflinecontentImplOfflineContentServiceImplOperation = (apiOperation[ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo]("comAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("disableSmartSync").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.OfflineContentServiceImpl", operation(comAdobeCqScreensOfflinecontentImplOfflineContentServiceImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val disableSmartSync = params.getAs[Boolean]("disableSmartSync")

    //println("disableSmartSync: " + disableSmartSync)
  }

  

  val comAdobeCqScreensSegmentationImplSegmentationFeatureFlagOperation = (apiOperation[ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo]("comAdobeCqScreensSegmentationImplSegmentationFeatureFlag")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("enableDataTriggeredContent").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.screens.segmentation.impl.SegmentationFeatureFlag", operation(comAdobeCqScreensSegmentationImplSegmentationFeatureFlagOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val enableDataTriggeredContent = params.getAs[Boolean]("enableDataTriggeredContent")

    //println("enableDataTriggeredContent: " + enableDataTriggeredContent)
  }

  

  val comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChOperation = (apiOperation[ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo]("comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("hcPeriodtags").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.security.hc.bundles.impl.HtmlLibraryManagerConfigHealthCheck", operation(comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val hcPeriodtagsString = params.getAs[String]("hcPeriodtags")
    val hcPeriodtags = if("multi" == "default" || "multi" == "csv") {
      hcPeriodtagsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("hcPeriodtags: " + hcPeriodtags)
  }

  

  val comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckOperation = (apiOperation[ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo]("comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("hcPeriodtags").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.security.hc.bundles.impl.WcmFilterHealthCheck", operation(comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val hcPeriodtagsString = params.getAs[String]("hcPeriodtags")
    val hcPeriodtags = if("multi" == "default" || "multi" == "csv") {
      hcPeriodtagsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("hcPeriodtags: " + hcPeriodtags)
  }

  

  val comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckOperation = (apiOperation[ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo]("comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("hcPeriodtags").description("").optional, queryParam[String]("dispatcherPeriodaddress").description("").optional, queryParam[List[String]]("dispatcherPeriodfilterPeriodallowed").description("").optional, queryParam[List[String]]("dispatcherPeriodfilterPeriodblocked").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.security.hc.dispatcher.impl.DispatcherAccessHealthCheck", operation(comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val hcPeriodtagsString = params.getAs[String]("hcPeriodtags")
    val hcPeriodtags = if("multi" == "default" || "multi" == "csv") {
      hcPeriodtagsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("hcPeriodtags: " + hcPeriodtags)
            val dispatcherPeriodaddress = params.getAs[String]("dispatcherPeriodaddress")

    //println("dispatcherPeriodaddress: " + dispatcherPeriodaddress)
        val dispatcherPeriodfilterPeriodallowedString = params.getAs[String]("dispatcherPeriodfilterPeriodallowed")
    val dispatcherPeriodfilterPeriodallowed = if("multi" == "default" || "multi" == "csv") {
      dispatcherPeriodfilterPeriodallowedString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("dispatcherPeriodfilterPeriodallowed: " + dispatcherPeriodfilterPeriodallowed)
        val dispatcherPeriodfilterPeriodblockedString = params.getAs[String]("dispatcherPeriodfilterPeriodblocked")
    val dispatcherPeriodfilterPeriodblocked = if("multi" == "default" || "multi" == "csv") {
      dispatcherPeriodfilterPeriodblockedString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("dispatcherPeriodfilterPeriodblocked: " + dispatcherPeriodfilterPeriodblocked)
  }

  

  val comAdobeCqSecurityHcPackagesImplExampleContentHealthCheckOperation = (apiOperation[ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo]("comAdobeCqSecurityHcPackagesImplExampleContentHealthCheck")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("hcPeriodtags").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.security.hc.packages.impl.ExampleContentHealthCheck", operation(comAdobeCqSecurityHcPackagesImplExampleContentHealthCheckOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val hcPeriodtagsString = params.getAs[String]("hcPeriodtags")
    val hcPeriodtags = if("multi" == "default" || "multi" == "csv") {
      hcPeriodtagsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("hcPeriodtags: " + hcPeriodtags)
  }

  

  val comAdobeCqSecurityHcWebserverImplClickjackingHealthCheckOperation = (apiOperation[ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo]("comAdobeCqSecurityHcWebserverImplClickjackingHealthCheck")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("hcPeriodtags").description("").optional, queryParam[String]("webserverPeriodaddress").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.security.hc.webserver.impl.ClickjackingHealthCheck", operation(comAdobeCqSecurityHcWebserverImplClickjackingHealthCheckOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val hcPeriodtagsString = params.getAs[String]("hcPeriodtags")
    val hcPeriodtags = if("multi" == "default" || "multi" == "csv") {
      hcPeriodtagsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("hcPeriodtags: " + hcPeriodtags)
            val webserverPeriodaddress = params.getAs[String]("webserverPeriodaddress")

    //println("webserverPeriodaddress: " + webserverPeriodaddress)
  }

  

  val comAdobeCqSocialAccountverificationImplAccountManagementConfigImOperation = (apiOperation[ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo]("comAdobeCqSocialAccountverificationImplAccountManagementConfigIm")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("enable").description("").optional, queryParam[Int]("ttl1").description("").optional, queryParam[Int]("ttl2").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.accountverification.impl.AccountManagementConfigImpl", operation(comAdobeCqSocialAccountverificationImplAccountManagementConfigImOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val enable = params.getAs[Boolean]("enable")

    //println("enable: " + enable)
            val ttl1 = params.getAs[Int]("ttl1")

    //println("ttl1: " + ttl1)
            val ttl2 = params.getAs[Int]("ttl2")

    //println("ttl2: " + ttl2)
  }

  

  val comAdobeCqSocialActivitystreamsClientImplSocialActivityComponenOperation = (apiOperation[ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo]("comAdobeCqSocialActivitystreamsClientImplSocialActivityComponen")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("priority").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityComponentFactoryImpl", operation(comAdobeCqSocialActivitystreamsClientImplSocialActivityComponenOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val priority = params.getAs[Int]("priority")

    //println("priority: " + priority)
  }

  

  val comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoOperation = (apiOperation[ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo]("comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("priority").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityStreamComponentFactory", operation(comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val priority = params.getAs[Int]("priority")

    //println("priority: " + priority)
  }

  

  val comAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerOperation = (apiOperation[ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo]("comAdobeCqSocialActivitystreamsListenerImplEventListenerHandler")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("eventPeriodtopics").description("").optional, queryParam[String]("eventPeriodfilter").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.EventListenerHandler", operation(comAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val eventPeriodtopics = params.getAs[String]("eventPeriodtopics")

    //println("eventPeriodtopics: " + eventPeriodtopics)
            val eventPeriodfilter = params.getAs[String]("eventPeriodfilter")

    //println("eventPeriodfilter: " + eventPeriodfilter)
  }

  

  val comAdobeCqSocialActivitystreamsListenerImplModerationEventExtenOperation = (apiOperation[ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo]("comAdobeCqSocialActivitystreamsListenerImplModerationEventExten")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("accepted").description("").optional, queryParam[Int]("ranked").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ModerationEventExtension", operation(comAdobeCqSocialActivitystreamsListenerImplModerationEventExtenOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val accepted = params.getAs[Boolean]("accepted")

    //println("accepted: " + accepted)
            val ranked = params.getAs[Int]("ranked")

    //println("ranked: " + ranked)
  }

  

  val comAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySOperation = (apiOperation[ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo]("comAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("ranking").description("").optional, queryParam[Boolean]("enable").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.RatingEventActivitySuppressor", operation(comAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val ranking = params.getAs[Int]("ranking")

    //println("ranking: " + ranking)
            val enable = params.getAs[Boolean]("enable")

    //println("enable: " + enable)
  }

  

  val comAdobeCqSocialActivitystreamsListenerImplResourceActivityStreOperation = (apiOperation[ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo]("comAdobeCqSocialActivitystreamsListenerImplResourceActivityStre")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("streamPath").description("").optional, queryParam[String]("streamName").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ResourceActivityStreamProviderFactory", operation(comAdobeCqSocialActivitystreamsListenerImplResourceActivityStreOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val streamPath = params.getAs[String]("streamPath")

    //println("streamPath: " + streamPath)
            val streamName = params.getAs[String]("streamName")

    //println("streamName: " + streamName)
  }

  

  val comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIOperation = (apiOperation[ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo]("comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("maxRetry").description("").optional, queryParam[List[String]]("fieldWhitelist").description("").optional, queryParam[List[String]]("attachmentTypeBlacklist").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.calendar.client.endpoints.impl.CalendarOperationsImpl", operation(comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val maxRetry = params.getAs[Int]("maxRetry")

    //println("maxRetry: " + maxRetry)
        val fieldWhitelistString = params.getAs[String]("fieldWhitelist")
    val fieldWhitelist = if("multi" == "default" || "multi" == "csv") {
      fieldWhitelistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("fieldWhitelist: " + fieldWhitelist)
        val attachmentTypeBlacklistString = params.getAs[String]("attachmentTypeBlacklist")
    val attachmentTypeBlacklist = if("multi" == "default" || "multi" == "csv") {
      attachmentTypeBlacklistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("attachmentTypeBlacklist: " + attachmentTypeBlacklist)
  }

  

  val comAdobeCqSocialCalendarClientOperationextensionsEventAttachmenOperation = (apiOperation[ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo]("comAdobeCqSocialCalendarClientOperationextensionsEventAttachmen")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("attachmentTypeBlacklist").description("").optional, queryParam[Int]("extensionPeriodorder").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.calendar.client.operationextensions.EventAttachment", operation(comAdobeCqSocialCalendarClientOperationextensionsEventAttachmenOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val attachmentTypeBlacklist = params.getAs[String]("attachmentTypeBlacklist")

    //println("attachmentTypeBlacklist: " + attachmentTypeBlacklist)
            val extensionPeriodorder = params.getAs[Int]("extensionPeriodorder")

    //println("extensionPeriodorder: " + extensionPeriodorder)
  }

  

  val comAdobeCqSocialCalendarServletsTimeZoneServletOperation = (apiOperation[ComAdobeCqSocialCalendarServletsTimeZoneServletInfo]("comAdobeCqSocialCalendarServletsTimeZoneServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("timezonesPeriodexpirytime").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.calendar.servlets.TimeZoneServlet", operation(comAdobeCqSocialCalendarServletsTimeZoneServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val timezonesPeriodexpirytime = params.getAs[Int]("timezonesPeriodexpirytime")

    //println("timezonesPeriodexpirytime: " + timezonesPeriodexpirytime)
  }

  

  val comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventOperation = (apiOperation[ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo]("comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("ranking").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentDeleteEventActivitySuppressor", operation(comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val ranking = params.getAs[Int]("ranking")

    //println("ranking: " + ranking)
  }

  

  val comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeOperation = (apiOperation[ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo]("comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("fieldWhitelist").description("").optional, queryParam[List[String]]("attachmentTypeBlacklist").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentOperationService", operation(comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val fieldWhitelistString = params.getAs[String]("fieldWhitelist")
    val fieldWhitelist = if("multi" == "default" || "multi" == "csv") {
      fieldWhitelistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("fieldWhitelist: " + fieldWhitelist)
        val attachmentTypeBlacklistString = params.getAs[String]("attachmentTypeBlacklist")
    val attachmentTypeBlacklist = if("multi" == "default" || "multi" == "csv") {
      attachmentTypeBlacklistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("attachmentTypeBlacklist: " + attachmentTypeBlacklist)
  }

  

  val comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiOperation = (apiOperation[ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo]("comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("fieldWhitelist").description("").optional, queryParam[List[String]]("attachmentTypeBlacklist").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.TranslationOperationService", operation(comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val fieldWhitelistString = params.getAs[String]("fieldWhitelist")
    val fieldWhitelist = if("multi" == "default" || "multi" == "csv") {
      fieldWhitelistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("fieldWhitelist: " + fieldWhitelist)
        val attachmentTypeBlacklistString = params.getAs[String]("attachmentTypeBlacklist")
    val attachmentTypeBlacklist = if("multi" == "default" || "multi" == "csv") {
      attachmentTypeBlacklistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("attachmentTypeBlacklist: " + attachmentTypeBlacklist)
  }

  

  val comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCOperation = (apiOperation[ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo]("comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("numUserLimit").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.commons.comments.listing.impl.SearchCommentSocialComponentListProvider", operation(comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val numUserLimit = params.getAs[Int]("numUserLimit")

    //println("numUserLimit: " + numUserLimit)
  }

  

  val comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosOperation = (apiOperation[ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo]("comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("enableScheduledPostsSearch").description("").optional, queryParam[Int]("numberOfMinutes").description("").optional, queryParam[Int]("maxSearchLimit").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.commons.comments.scheduler.impl.SearchScheduledPosts", operation(comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val enableScheduledPostsSearch = params.getAs[Boolean]("enableScheduledPostsSearch")

    //println("enableScheduledPostsSearch: " + enableScheduledPostsSearch)
            val numberOfMinutes = params.getAs[Int]("numberOfMinutes")

    //println("numberOfMinutes: " + numberOfMinutes)
            val maxSearchLimit = params.getAs[Int]("maxSearchLimit")

    //println("maxSearchLimit: " + maxSearchLimit)
  }

  

  val comAdobeCqSocialCommonsCorsCORSAuthenticationFilterOperation = (apiOperation[ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo]("comAdobeCqSocialCommonsCorsCORSAuthenticationFilter")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("corsPeriodenabling").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.commons.cors.CORSAuthenticationFilter", operation(comAdobeCqSocialCommonsCorsCORSAuthenticationFilterOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val corsPeriodenabling = params.getAs[Boolean]("corsPeriodenabling")

    //println("corsPeriodenabling: " + corsPeriodenabling)
  }

  

  val comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderOperation = (apiOperation[ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo]("comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("priorityOrder").description("").optional, queryParam[List[String]]("replyEmailPatterns").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.AndroidEmailClientProvider", operation(comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val priorityOrder = params.getAs[Int]("priorityOrder")

    //println("priorityOrder: " + priorityOrder)
        val replyEmailPatternsString = params.getAs[String]("replyEmailPatterns")
    val replyEmailPatterns = if("multi" == "default" || "multi" == "csv") {
      replyEmailPatternsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("replyEmailPatterns: " + replyEmailPatterns)
  }

  

  val comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplOperation = (apiOperation[ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo]("comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("contextPeriodpath").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailBuilderImpl", operation(comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val contextPeriodpath = params.getAs[String]("contextPeriodpath")

    //println("contextPeriodpath: " + contextPeriodpath)
  }

  

  val comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerOperation = (apiOperation[ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo]("comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("eventPeriodtopics").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailEventListener", operation(comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val eventPeriodtopics = params.getAs[String]("eventPeriodtopics")

    //println("eventPeriodtopics: " + eventPeriodtopics)
  }

  

  val comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderOperation = (apiOperation[ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo]("comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("priorityOrder").description("").optional, queryParam[List[String]]("replyEmailPatterns").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CustomEmailClientProvider", operation(comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val priorityOrder = params.getAs[Int]("priorityOrder")

    //println("priorityOrder: " + priorityOrder)
        val replyEmailPatternsString = params.getAs[String]("replyEmailPatterns")
    val replyEmailPatterns = if("multi" == "default" || "multi" == "csv") {
      replyEmailPatternsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("replyEmailPatterns: " + replyEmailPatterns)
  }

  

  val comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpOperation = (apiOperation[ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo]("comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("patternPeriodtime").description("").optional, queryParam[String]("patternPeriodnewline").description("").optional, queryParam[String]("patternPerioddayOfMonth").description("").optional, queryParam[String]("patternPeriodmonth").description("").optional, queryParam[String]("patternPeriodyear").description("").optional, queryParam[String]("patternPerioddate").description("").optional, queryParam[String]("patternPerioddateTime").description("").optional, queryParam[String]("patternPeriodemail").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailQuotedTextPatternsImpl", operation(comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val patternPeriodtime = params.getAs[String]("patternPeriodtime")

    //println("patternPeriodtime: " + patternPeriodtime)
            val patternPeriodnewline = params.getAs[String]("patternPeriodnewline")

    //println("patternPeriodnewline: " + patternPeriodnewline)
            val patternPerioddayOfMonth = params.getAs[String]("patternPerioddayOfMonth")

    //println("patternPerioddayOfMonth: " + patternPerioddayOfMonth)
            val patternPeriodmonth = params.getAs[String]("patternPeriodmonth")

    //println("patternPeriodmonth: " + patternPeriodmonth)
            val patternPeriodyear = params.getAs[String]("patternPeriodyear")

    //println("patternPeriodyear: " + patternPeriodyear)
            val patternPerioddate = params.getAs[String]("patternPerioddate")

    //println("patternPerioddate: " + patternPerioddate)
            val patternPerioddateTime = params.getAs[String]("patternPerioddateTime")

    //println("patternPerioddateTime: " + patternPerioddateTime)
            val patternPeriodemail = params.getAs[String]("patternPeriodemail")

    //println("patternPeriodemail: " + patternPeriodemail)
  }

  

  val comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpOperation = (apiOperation[ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo]("comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("emailPeriodname").description("").optional, queryParam[Boolean]("emailPeriodcreatePostFromReply").description("").optional, queryParam[String]("emailPeriodaddCommentIdTo").description("").optional, queryParam[Int]("emailPeriodsubjectMaximumLength").description("").optional, queryParam[String]("emailPeriodreplyToAddress").description("").optional, queryParam[String]("emailPeriodreplyToDelimiter").description("").optional, queryParam[String]("emailPeriodtrackerIdPrefixInSubject").description("").optional, queryParam[String]("emailPeriodtrackerIdPrefixInBody").description("").optional, queryParam[Boolean]("emailPeriodasHTML").description("").optional, queryParam[String]("emailPerioddefaultUserName").description("").optional, queryParam[String]("emailPeriodtemplatesPeriodrootPath").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyConfigurationImpl", operation(comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val emailPeriodname = params.getAs[String]("emailPeriodname")

    //println("emailPeriodname: " + emailPeriodname)
            val emailPeriodcreatePostFromReply = params.getAs[Boolean]("emailPeriodcreatePostFromReply")

    //println("emailPeriodcreatePostFromReply: " + emailPeriodcreatePostFromReply)
            val emailPeriodaddCommentIdTo = params.getAs[String]("emailPeriodaddCommentIdTo")

    //println("emailPeriodaddCommentIdTo: " + emailPeriodaddCommentIdTo)
            val emailPeriodsubjectMaximumLength = params.getAs[Int]("emailPeriodsubjectMaximumLength")

    //println("emailPeriodsubjectMaximumLength: " + emailPeriodsubjectMaximumLength)
            val emailPeriodreplyToAddress = params.getAs[String]("emailPeriodreplyToAddress")

    //println("emailPeriodreplyToAddress: " + emailPeriodreplyToAddress)
            val emailPeriodreplyToDelimiter = params.getAs[String]("emailPeriodreplyToDelimiter")

    //println("emailPeriodreplyToDelimiter: " + emailPeriodreplyToDelimiter)
            val emailPeriodtrackerIdPrefixInSubject = params.getAs[String]("emailPeriodtrackerIdPrefixInSubject")

    //println("emailPeriodtrackerIdPrefixInSubject: " + emailPeriodtrackerIdPrefixInSubject)
            val emailPeriodtrackerIdPrefixInBody = params.getAs[String]("emailPeriodtrackerIdPrefixInBody")

    //println("emailPeriodtrackerIdPrefixInBody: " + emailPeriodtrackerIdPrefixInBody)
            val emailPeriodasHTML = params.getAs[Boolean]("emailPeriodasHTML")

    //println("emailPeriodasHTML: " + emailPeriodasHTML)
            val emailPerioddefaultUserName = params.getAs[String]("emailPerioddefaultUserName")

    //println("emailPerioddefaultUserName: " + emailPerioddefaultUserName)
            val emailPeriodtemplatesPeriodrootPath = params.getAs[String]("emailPeriodtemplatesPeriodrootPath")

    //println("emailPeriodtemplatesPeriodrootPath: " + emailPeriodtemplatesPeriodrootPath)
  }

  

  val comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterOperation = (apiOperation[ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo]("comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("connectProtocol").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyImporter", operation(comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val connectProtocol = params.getAs[String]("connectProtocol")

    //println("connectProtocol: " + connectProtocol)
  }

  

  val comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderOperation = (apiOperation[ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo]("comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("priorityOrder").description("").optional, queryParam[List[String]]("replyEmailPatterns").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.GmailEmailClientProvider", operation(comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val priorityOrder = params.getAs[Int]("priorityOrder")

    //println("priorityOrder: " + priorityOrder)
        val replyEmailPatternsString = params.getAs[String]("replyEmailPatterns")
    val replyEmailPatterns = if("multi" == "default" || "multi" == "csv") {
      replyEmailPatternsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("replyEmailPatterns: " + replyEmailPatterns)
  }

  

  val comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderOperation = (apiOperation[ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo]("comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("priorityOrder").description("").optional, queryParam[List[String]]("replyEmailPatterns").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.IOSEmailClientProvider", operation(comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val priorityOrder = params.getAs[Int]("priorityOrder")

    //println("priorityOrder: " + priorityOrder)
        val replyEmailPatternsString = params.getAs[String]("replyEmailPatterns")
    val replyEmailPatterns = if("multi" == "default" || "multi" == "csv") {
      replyEmailPatternsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("replyEmailPatterns: " + replyEmailPatterns)
  }

  

  val comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderOperation = (apiOperation[ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo]("comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("priorityOrder").description("").optional, queryParam[List[String]]("replyEmailPatterns").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.MacmailEmailClientProvider", operation(comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val priorityOrder = params.getAs[Int]("priorityOrder")

    //println("priorityOrder: " + priorityOrder)
        val replyEmailPatternsString = params.getAs[String]("replyEmailPatterns")
    val replyEmailPatterns = if("multi" == "default" || "multi" == "csv") {
      replyEmailPatternsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("replyEmailPatterns: " + replyEmailPatterns)
  }

  

  val comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderOperation = (apiOperation[ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo]("comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("priorityOrder").description("").optional, queryParam[List[String]]("replyEmailPatterns").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.OutLookEmailClientProvider", operation(comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val priorityOrder = params.getAs[Int]("priorityOrder")

    //println("priorityOrder: " + priorityOrder)
        val replyEmailPatternsString = params.getAs[String]("replyEmailPatterns")
    val replyEmailPatterns = if("multi" == "default" || "multi" == "csv") {
      replyEmailPatternsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("replyEmailPatterns: " + replyEmailPatterns)
  }

  

  val comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderOperation = (apiOperation[ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo]("comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("replyEmailPatterns").description("").optional, queryParam[Int]("priorityOrder").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.UnknownEmailClientProvider", operation(comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val replyEmailPatternsString = params.getAs[String]("replyEmailPatterns")
    val replyEmailPatterns = if("multi" == "default" || "multi" == "csv") {
      replyEmailPatternsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("replyEmailPatterns: " + replyEmailPatterns)
            val priorityOrder = params.getAs[Int]("priorityOrder")

    //println("priorityOrder: " + priorityOrder)
  }

  

  val comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderOperation = (apiOperation[ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo]("comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("priorityOrder").description("").optional, queryParam[List[String]]("replyEmailPatterns").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.YahooEmailClientProvider", operation(comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val priorityOrder = params.getAs[Int]("priorityOrder")

    //println("priorityOrder: " + priorityOrder)
        val replyEmailPatternsString = params.getAs[String]("replyEmailPatterns")
    val replyEmailPatterns = if("multi" == "default" || "multi" == "csv") {
      replyEmailPatternsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("replyEmailPatterns: " + replyEmailPatterns)
  }

  

  val comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadOperation = (apiOperation[ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo]("comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("numberOfDays").description("").optional, queryParam[Int]("ageOfFile").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.commons.maintainance.impl.DeleteTempUGCImageUploads", operation(comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val numberOfDays = params.getAs[Int]("numberOfDays")

    //println("numberOfDays: " + numberOfDays)
            val ageOfFile = params.getAs[Int]("ageOfFile")

    //println("ageOfFile: " + ageOfFile)
  }

  

  val comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplOperation = (apiOperation[ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo]("comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("eventPeriodtopics").description("").optional, queryParam[String]("eventPeriodfilter").description("").optional, queryParam[List[String]]("verbs").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.commons.ugclimiter.impl.UGCLimiterServiceImpl", operation(comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val eventPeriodtopics = params.getAs[String]("eventPeriodtopics")

    //println("eventPeriodtopics: " + eventPeriodtopics)
            val eventPeriodfilter = params.getAs[String]("eventPeriodfilter")

    //println("eventPeriodfilter: " + eventPeriodfilter)
        val verbsString = params.getAs[String]("verbs")
    val verbs = if("multi" == "default" || "multi" == "csv") {
      verbsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("verbs: " + verbs)
  }

  

  val comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitOperation = (apiOperation[ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo]("comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("enable").description("").optional, queryParam[Int]("uGCLimit").description("").optional, queryParam[Int]("ugcLimitDuration").description("").optional, queryParam[List[String]]("domains").description("").optional, queryParam[List[String]]("toList").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.commons.ugclimitsconfig.impl.CommunityUserUGCLimitsConfigImpl", operation(comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val enable = params.getAs[Boolean]("enable")

    //println("enable: " + enable)
            val uGCLimit = params.getAs[Int]("uGCLimit")

    //println("uGCLimit: " + uGCLimit)
            val ugcLimitDuration = params.getAs[Int]("ugcLimitDuration")

    //println("ugcLimitDuration: " + ugcLimitDuration)
        val domainsString = params.getAs[String]("domains")
    val domains = if("multi" == "default" || "multi" == "csv") {
      domainsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("domains: " + domains)
        val toListString = params.getAs[String]("toList")
    val toList = if("multi" == "default" || "multi" == "csv") {
      toListString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("toList: " + toList)
  }

  

  val comAdobeCqSocialConnectOauthImplFacebookProviderImplOperation = (apiOperation[ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo]("comAdobeCqSocialConnectOauthImplFacebookProviderImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("oauthPeriodproviderPeriodid").description("").optional, queryParam[String]("oauthPeriodcloudPeriodconfigPeriodroot").description("").optional, queryParam[String]("providerPeriodconfigPeriodroot").description("").optional, queryParam[Boolean]("providerPeriodconfigPeriodcreatePeriodtagsPeriodenabled").description("").optional, queryParam[String]("providerPeriodconfigPerioduserPeriodfolder").description("").optional, queryParam[Boolean]("providerPeriodconfigPeriodfacebookPeriodfetchPeriodfields").description("").optional, queryParam[List[String]]("providerPeriodconfigPeriodfacebookPeriodfields").description("").optional, queryParam[Boolean]("providerPeriodconfigPeriodrefreshPerioduserdataPeriodenabled").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.FacebookProviderImpl", operation(comAdobeCqSocialConnectOauthImplFacebookProviderImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val oauthPeriodproviderPeriodid = params.getAs[String]("oauthPeriodproviderPeriodid")

    //println("oauthPeriodproviderPeriodid: " + oauthPeriodproviderPeriodid)
            val oauthPeriodcloudPeriodconfigPeriodroot = params.getAs[String]("oauthPeriodcloudPeriodconfigPeriodroot")

    //println("oauthPeriodcloudPeriodconfigPeriodroot: " + oauthPeriodcloudPeriodconfigPeriodroot)
            val providerPeriodconfigPeriodroot = params.getAs[String]("providerPeriodconfigPeriodroot")

    //println("providerPeriodconfigPeriodroot: " + providerPeriodconfigPeriodroot)
            val providerPeriodconfigPeriodcreatePeriodtagsPeriodenabled = params.getAs[Boolean]("providerPeriodconfigPeriodcreatePeriodtagsPeriodenabled")

    //println("providerPeriodconfigPeriodcreatePeriodtagsPeriodenabled: " + providerPeriodconfigPeriodcreatePeriodtagsPeriodenabled)
            val providerPeriodconfigPerioduserPeriodfolder = params.getAs[String]("providerPeriodconfigPerioduserPeriodfolder")

    //println("providerPeriodconfigPerioduserPeriodfolder: " + providerPeriodconfigPerioduserPeriodfolder)
            val providerPeriodconfigPeriodfacebookPeriodfetchPeriodfields = params.getAs[Boolean]("providerPeriodconfigPeriodfacebookPeriodfetchPeriodfields")

    //println("providerPeriodconfigPeriodfacebookPeriodfetchPeriodfields: " + providerPeriodconfigPeriodfacebookPeriodfetchPeriodfields)
        val providerPeriodconfigPeriodfacebookPeriodfieldsString = params.getAs[String]("providerPeriodconfigPeriodfacebookPeriodfields")
    val providerPeriodconfigPeriodfacebookPeriodfields = if("multi" == "default" || "multi" == "csv") {
      providerPeriodconfigPeriodfacebookPeriodfieldsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("providerPeriodconfigPeriodfacebookPeriodfields: " + providerPeriodconfigPeriodfacebookPeriodfields)
            val providerPeriodconfigPeriodrefreshPerioduserdataPeriodenabled = params.getAs[Boolean]("providerPeriodconfigPeriodrefreshPerioduserdataPeriodenabled")

    //println("providerPeriodconfigPeriodrefreshPerioduserdataPeriodenabled: " + providerPeriodconfigPeriodrefreshPerioduserdataPeriodenabled)
  }

  

  val comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleOperation = (apiOperation[ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo]("comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("path").description("").optional, queryParam[Int]("servicePeriodranking").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthAuthenticationHandler", operation(comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val pathString = params.getAs[String]("path")
    val path = if("multi" == "default" || "multi" == "csv") {
      pathString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("path: " + path)
            val servicePeriodranking = params.getAs[Int]("servicePeriodranking")

    //println("servicePeriodranking: " + servicePeriodranking)
  }

  

  val comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperOperation = (apiOperation[ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo]("comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("facebook").description("").optional, queryParam[List[String]]("twitter").description("").optional, queryParam[String]("providerPeriodconfigPerioduserPeriodfolder").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthUserProfileMapper", operation(comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val facebookString = params.getAs[String]("facebook")
    val facebook = if("multi" == "default" || "multi" == "csv") {
      facebookString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("facebook: " + facebook)
        val twitterString = params.getAs[String]("twitter")
    val twitter = if("multi" == "default" || "multi" == "csv") {
      twitterString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("twitter: " + twitter)
            val providerPeriodconfigPerioduserPeriodfolder = params.getAs[String]("providerPeriodconfigPerioduserPeriodfolder")

    //println("providerPeriodconfigPerioduserPeriodfolder: " + providerPeriodconfigPerioduserPeriodfolder)
  }

  

  val comAdobeCqSocialConnectOauthImplTwitterProviderImplOperation = (apiOperation[ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo]("comAdobeCqSocialConnectOauthImplTwitterProviderImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("oauthPeriodproviderPeriodid").description("").optional, queryParam[String]("oauthPeriodcloudPeriodconfigPeriodroot").description("").optional, queryParam[String]("providerPeriodconfigPeriodroot").description("").optional, queryParam[String]("providerPeriodconfigPerioduserPeriodfolder").description("").optional, queryParam[Boolean]("providerPeriodconfigPeriodtwitterPeriodenablePeriodparams").description("").optional, queryParam[List[String]]("providerPeriodconfigPeriodtwitterPeriodparams").description("").optional, queryParam[Boolean]("providerPeriodconfigPeriodrefreshPerioduserdataPeriodenabled").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.TwitterProviderImpl", operation(comAdobeCqSocialConnectOauthImplTwitterProviderImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val oauthPeriodproviderPeriodid = params.getAs[String]("oauthPeriodproviderPeriodid")

    //println("oauthPeriodproviderPeriodid: " + oauthPeriodproviderPeriodid)
            val oauthPeriodcloudPeriodconfigPeriodroot = params.getAs[String]("oauthPeriodcloudPeriodconfigPeriodroot")

    //println("oauthPeriodcloudPeriodconfigPeriodroot: " + oauthPeriodcloudPeriodconfigPeriodroot)
            val providerPeriodconfigPeriodroot = params.getAs[String]("providerPeriodconfigPeriodroot")

    //println("providerPeriodconfigPeriodroot: " + providerPeriodconfigPeriodroot)
            val providerPeriodconfigPerioduserPeriodfolder = params.getAs[String]("providerPeriodconfigPerioduserPeriodfolder")

    //println("providerPeriodconfigPerioduserPeriodfolder: " + providerPeriodconfigPerioduserPeriodfolder)
            val providerPeriodconfigPeriodtwitterPeriodenablePeriodparams = params.getAs[Boolean]("providerPeriodconfigPeriodtwitterPeriodenablePeriodparams")

    //println("providerPeriodconfigPeriodtwitterPeriodenablePeriodparams: " + providerPeriodconfigPeriodtwitterPeriodenablePeriodparams)
        val providerPeriodconfigPeriodtwitterPeriodparamsString = params.getAs[String]("providerPeriodconfigPeriodtwitterPeriodparams")
    val providerPeriodconfigPeriodtwitterPeriodparams = if("multi" == "default" || "multi" == "csv") {
      providerPeriodconfigPeriodtwitterPeriodparamsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("providerPeriodconfigPeriodtwitterPeriodparams: " + providerPeriodconfigPeriodtwitterPeriodparams)
            val providerPeriodconfigPeriodrefreshPerioduserdataPeriodenabled = params.getAs[Boolean]("providerPeriodconfigPeriodrefreshPerioduserdataPeriodenabled")

    //println("providerPeriodconfigPeriodrefreshPerioduserdataPeriodenabled: " + providerPeriodconfigPeriodrefreshPerioduserdataPeriodenabled)
  }

  

  val comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenOperation = (apiOperation[ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo]("comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("cqPeriodsocialPeriodcontentPeriodfragmentsPeriodservicesPeriodenabled").description("").optional, queryParam[Int]("cqPeriodsocialPeriodcontentPeriodfragmentsPeriodservicesPeriodwaitTimeSeconds").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.content.fragments.services.impl.CommunitiesFragmentCreationServiceImpl", operation(comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val cqPeriodsocialPeriodcontentPeriodfragmentsPeriodservicesPeriodenabled = params.getAs[Boolean]("cqPeriodsocialPeriodcontentPeriodfragmentsPeriodservicesPeriodenabled")

    //println("cqPeriodsocialPeriodcontentPeriodfragmentsPeriodservicesPeriodenabled: " + cqPeriodsocialPeriodcontentPeriodfragmentsPeriodservicesPeriodenabled)
            val cqPeriodsocialPeriodcontentPeriodfragmentsPeriodservicesPeriodwaitTimeSeconds = params.getAs[Int]("cqPeriodsocialPeriodcontentPeriodfragmentsPeriodservicesPeriodwaitTimeSeconds")

    //println("cqPeriodsocialPeriodcontentPeriodfragmentsPeriodservicesPeriodwaitTimeSeconds: " + cqPeriodsocialPeriodcontentPeriodfragmentsPeriodservicesPeriodwaitTimeSeconds)
  }

  

  val comAdobeCqSocialDatastoreAsImplASResourceProviderFactoryOperation = (apiOperation[ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo]("comAdobeCqSocialDatastoreAsImplASResourceProviderFactory")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("versionPeriodid").description("").optional, queryParam[Boolean]("cachePeriodon").description("").optional, queryParam[Int]("concurrencyPeriodlevel").description("").optional, queryParam[Int]("cachePeriodstartPeriodsize").description("").optional, queryParam[Int]("cachePeriodttl").description("").optional, queryParam[Int]("cachePeriodsize").description("").optional, queryParam[Int]("timePeriodlimit").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.datastore.as.impl.ASResourceProviderFactory", operation(comAdobeCqSocialDatastoreAsImplASResourceProviderFactoryOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val versionPeriodid = params.getAs[String]("versionPeriodid")

    //println("versionPeriodid: " + versionPeriodid)
            val cachePeriodon = params.getAs[Boolean]("cachePeriodon")

    //println("cachePeriodon: " + cachePeriodon)
            val concurrencyPeriodlevel = params.getAs[Int]("concurrencyPeriodlevel")

    //println("concurrencyPeriodlevel: " + concurrencyPeriodlevel)
            val cachePeriodstartPeriodsize = params.getAs[Int]("cachePeriodstartPeriodsize")

    //println("cachePeriodstartPeriodsize: " + cachePeriodstartPeriodsize)
            val cachePeriodttl = params.getAs[Int]("cachePeriodttl")

    //println("cachePeriodttl: " + cachePeriodttl)
            val cachePeriodsize = params.getAs[Int]("cachePeriodsize")

    //println("cachePeriodsize: " + cachePeriodsize)
            val timePeriodlimit = params.getAs[Int]("timePeriodlimit")

    //println("timePeriodlimit: " + timePeriodlimit)
  }

  

  val comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryOperation = (apiOperation[ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo]("comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("solrPeriodzkPeriodtimeout").description("").optional, queryParam[String]("solrPeriodcommit").description("").optional, queryParam[Boolean]("cachePeriodon").description("").optional, queryParam[Int]("concurrencyPeriodlevel").description("").optional, queryParam[Int]("cachePeriodstartPeriodsize").description("").optional, queryParam[Int]("cachePeriodttl").description("").optional, queryParam[Int]("cachePeriodsize").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.datastore.op.impl.SocialMSResourceProviderFactory", operation(comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val solrPeriodzkPeriodtimeout = params.getAs[String]("solrPeriodzkPeriodtimeout")

    //println("solrPeriodzkPeriodtimeout: " + solrPeriodzkPeriodtimeout)
            val solrPeriodcommit = params.getAs[String]("solrPeriodcommit")

    //println("solrPeriodcommit: " + solrPeriodcommit)
            val cachePeriodon = params.getAs[Boolean]("cachePeriodon")

    //println("cachePeriodon: " + cachePeriodon)
            val concurrencyPeriodlevel = params.getAs[Int]("concurrencyPeriodlevel")

    //println("concurrencyPeriodlevel: " + concurrencyPeriodlevel)
            val cachePeriodstartPeriodsize = params.getAs[Int]("cachePeriodstartPeriodsize")

    //println("cachePeriodstartPeriodsize: " + cachePeriodstartPeriodsize)
            val cachePeriodttl = params.getAs[Int]("cachePeriodttl")

    //println("cachePeriodttl: " + cachePeriodttl)
            val cachePeriodsize = params.getAs[Int]("cachePeriodsize")

    //println("cachePeriodsize: " + cachePeriodsize)
  }

  

  val comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorOperation = (apiOperation[ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo]("comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("solrPeriodzkPeriodtimeout").description("").optional, queryParam[String]("solrPeriodcommit").description("").optional, queryParam[Boolean]("cachePeriodon").description("").optional, queryParam[Int]("concurrencyPeriodlevel").description("").optional, queryParam[Int]("cachePeriodstartPeriodsize").description("").optional, queryParam[Int]("cachePeriodttl").description("").optional, queryParam[Int]("cachePeriodsize").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.datastore.rdb.impl.SocialRDBResourceProviderFactory", operation(comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val solrPeriodzkPeriodtimeout = params.getAs[String]("solrPeriodzkPeriodtimeout")

    //println("solrPeriodzkPeriodtimeout: " + solrPeriodzkPeriodtimeout)
            val solrPeriodcommit = params.getAs[String]("solrPeriodcommit")

    //println("solrPeriodcommit: " + solrPeriodcommit)
            val cachePeriodon = params.getAs[Boolean]("cachePeriodon")

    //println("cachePeriodon: " + cachePeriodon)
            val concurrencyPeriodlevel = params.getAs[Int]("concurrencyPeriodlevel")

    //println("concurrencyPeriodlevel: " + concurrencyPeriodlevel)
            val cachePeriodstartPeriodsize = params.getAs[Int]("cachePeriodstartPeriodsize")

    //println("cachePeriodstartPeriodsize: " + cachePeriodstartPeriodsize)
            val cachePeriodttl = params.getAs[Int]("cachePeriodttl")

    //println("cachePeriodttl: " + cachePeriodttl)
            val cachePeriodsize = params.getAs[Int]("cachePeriodsize")

    //println("cachePeriodsize: " + cachePeriodsize)
  }

  

  val comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFOperation = (apiOperation[ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo]("comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("isMemberCheck").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementLearningPathAdaptorFactory", operation(comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val isMemberCheck = params.getAs[Boolean]("isMemberCheck")

    //println("isMemberCheck: " + isMemberCheck)
  }

  

  val comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoOperation = (apiOperation[ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo]("comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("isMemberCheck").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementResourceAdaptorFactory", operation(comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val isMemberCheck = params.getAs[Boolean]("isMemberCheck")

    //println("isMemberCheck: " + isMemberCheck)
  }

  

  val comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLOperation = (apiOperation[ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo]("comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("fieldWhitelist").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.enablement.learningpath.endpoints.impl.EnablementLearningPathModelOperationService", operation(comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val fieldWhitelistString = params.getAs[String]("fieldWhitelist")
    val fieldWhitelist = if("multi" == "default" || "multi" == "csv") {
      fieldWhitelistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("fieldWhitelist: " + fieldWhitelist)
  }

  

  val comAdobeCqSocialEnablementResourceEndpointsImplEnablementResouOperation = (apiOperation[ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo]("comAdobeCqSocialEnablementResourceEndpointsImplEnablementResou")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("fieldWhitelist").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.enablement.resource.endpoints.impl.EnablementResourceModelOperationService", operation(comAdobeCqSocialEnablementResourceEndpointsImplEnablementResouOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val fieldWhitelistString = params.getAs[String]("fieldWhitelist")
    val fieldWhitelist = if("multi" == "default" || "multi" == "csv") {
      fieldWhitelistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("fieldWhitelist: " + fieldWhitelist)
  }

  

  val comAdobeCqSocialEnablementServicesImplAuthorMarkerImplOperation = (apiOperation[ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo]("comAdobeCqSocialEnablementServicesImplAuthorMarkerImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("servicePeriodranking").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.enablement.services.impl.AuthorMarkerImpl", operation(comAdobeCqSocialEnablementServicesImplAuthorMarkerImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val servicePeriodranking = params.getAs[Int]("servicePeriodranking")

    //println("servicePeriodranking: " + servicePeriodranking)
  }

  

  val comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeOperation = (apiOperation[ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo]("comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("slingPeriodservletPeriodselectors").description("").optional, queryParam[String]("slingPeriodservletPeriodextensions").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.FilelibraryDownloadGetServlet", operation(comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val slingPeriodservletPeriodselectors = params.getAs[String]("slingPeriodservletPeriodselectors")

    //println("slingPeriodservletPeriodselectors: " + slingPeriodservletPeriodselectors)
            val slingPeriodservletPeriodextensions = params.getAs[String]("slingPeriodservletPeriodextensions")

    //println("slingPeriodservletPeriodextensions: " + slingPeriodservletPeriodextensions)
  }

  

  val comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaOperation = (apiOperation[ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo]("comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("fieldWhitelist").description("").optional, queryParam[List[String]]("attachmentTypeBlacklist").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.impl.FileLibraryOperationsService", operation(comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val fieldWhitelistString = params.getAs[String]("fieldWhitelist")
    val fieldWhitelist = if("multi" == "default" || "multi" == "csv") {
      fieldWhitelistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("fieldWhitelist: " + fieldWhitelist)
        val attachmentTypeBlacklistString = params.getAs[String]("attachmentTypeBlacklist")
    val attachmentTypeBlacklist = if("multi" == "default" || "multi" == "csv") {
      attachmentTypeBlacklistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("attachmentTypeBlacklist: " + attachmentTypeBlacklist)
  }

  

  val comAdobeCqSocialForumClientEndpointsImplForumOperationsServiceOperation = (apiOperation[ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo]("comAdobeCqSocialForumClientEndpointsImplForumOperationsService")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("fieldWhitelist").description("").optional, queryParam[List[String]]("attachmentTypeBlacklist").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.forum.client.endpoints.impl.ForumOperationsService", operation(comAdobeCqSocialForumClientEndpointsImplForumOperationsServiceOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val fieldWhitelistString = params.getAs[String]("fieldWhitelist")
    val fieldWhitelist = if("multi" == "default" || "multi" == "csv") {
      fieldWhitelistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("fieldWhitelist: " + fieldWhitelist)
        val attachmentTypeBlacklistString = params.getAs[String]("attachmentTypeBlacklist")
    val attachmentTypeBlacklist = if("multi" == "default" || "multi" == "csv") {
      attachmentTypeBlacklistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("attachmentTypeBlacklist: " + attachmentTypeBlacklist)
  }

  

  val comAdobeCqSocialForumDispatcherImplFlushOperationsOperation = (apiOperation[ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo]("comAdobeCqSocialForumDispatcherImplFlushOperations")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("extensionPeriodorder").description("").optional, queryParam[Boolean]("flushPeriodforumontopic").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.forum.dispatcher.impl.FlushOperations", operation(comAdobeCqSocialForumDispatcherImplFlushOperationsOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val extensionPeriodorder = params.getAs[Int]("extensionPeriodorder")

    //println("extensionPeriodorder: " + extensionPeriodorder)
            val flushPeriodforumontopic = params.getAs[Boolean]("flushPeriodforumontopic")

    //println("flushPeriodforumontopic: " + flushPeriodforumontopic)
  }

  

  val comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenOperation = (apiOperation[ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo]("comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("groupPeriodlistingPeriodpaginationPeriodenable").description("").optional, queryParam[Boolean]("groupPeriodlistingPeriodlazyloadingPeriodenable").description("").optional, queryParam[Int]("pagePeriodsize").description("").optional, queryParam[Int]("priority").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.group.client.impl.CommunityGroupCollectionComponentFactory", operation(comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val groupPeriodlistingPeriodpaginationPeriodenable = params.getAs[Boolean]("groupPeriodlistingPeriodpaginationPeriodenable")

    //println("groupPeriodlistingPeriodpaginationPeriodenable: " + groupPeriodlistingPeriodpaginationPeriodenable)
            val groupPeriodlistingPeriodlazyloadingPeriodenable = params.getAs[Boolean]("groupPeriodlistingPeriodlazyloadingPeriodenable")

    //println("groupPeriodlistingPeriodlazyloadingPeriodenable: " + groupPeriodlistingPeriodlazyloadingPeriodenable)
            val pagePeriodsize = params.getAs[Int]("pagePeriodsize")

    //println("pagePeriodsize: " + pagePeriodsize)
            val priority = params.getAs[Int]("priority")

    //println("priority: " + priority)
  }

  

  val comAdobeCqSocialGroupImplGroupServiceImplOperation = (apiOperation[ComAdobeCqSocialGroupImplGroupServiceImplInfo]("comAdobeCqSocialGroupImplGroupServiceImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("maxWaitTime").description("").optional, queryParam[Int]("minWaitBetweenRetries").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.group.impl.GroupServiceImpl", operation(comAdobeCqSocialGroupImplGroupServiceImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val maxWaitTime = params.getAs[Int]("maxWaitTime")

    //println("maxWaitTime: " + maxWaitTime)
            val minWaitBetweenRetries = params.getAs[Int]("minWaitBetweenRetries")

    //println("minWaitBetweenRetries: " + minWaitBetweenRetries)
  }

  

  val comAdobeCqSocialHandlebarsGuavaTemplateCacheImplOperation = (apiOperation[ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo]("comAdobeCqSocialHandlebarsGuavaTemplateCacheImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("parameterPeriodguavaPeriodcachePeriodenabled").description("").optional, queryParam[String]("parameterPeriodguavaPeriodcachePeriodparams").description("").optional, queryParam[Boolean]("parameterPeriodguavaPeriodcachePeriodreload").description("").optional, queryParam[Int]("servicePeriodranking").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.handlebars.GuavaTemplateCacheImpl", operation(comAdobeCqSocialHandlebarsGuavaTemplateCacheImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val parameterPeriodguavaPeriodcachePeriodenabled = params.getAs[Boolean]("parameterPeriodguavaPeriodcachePeriodenabled")

    //println("parameterPeriodguavaPeriodcachePeriodenabled: " + parameterPeriodguavaPeriodcachePeriodenabled)
            val parameterPeriodguavaPeriodcachePeriodparams = params.getAs[String]("parameterPeriodguavaPeriodcachePeriodparams")

    //println("parameterPeriodguavaPeriodcachePeriodparams: " + parameterPeriodguavaPeriodcachePeriodparams)
            val parameterPeriodguavaPeriodcachePeriodreload = params.getAs[Boolean]("parameterPeriodguavaPeriodcachePeriodreload")

    //println("parameterPeriodguavaPeriodcachePeriodreload: " + parameterPeriodguavaPeriodcachePeriodreload)
            val servicePeriodranking = params.getAs[Int]("servicePeriodranking")

    //println("servicePeriodranking: " + servicePeriodranking)
  }

  

  val comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSOperation = (apiOperation[ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo]("comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("fieldWhitelist").description("").optional, queryParam[List[String]]("attachmentTypeBlacklist").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.ideation.client.endpoints.impl.IdeationOperationsService", operation(comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val fieldWhitelistString = params.getAs[String]("fieldWhitelist")
    val fieldWhitelist = if("multi" == "default" || "multi" == "csv") {
      fieldWhitelistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("fieldWhitelist: " + fieldWhitelist)
        val attachmentTypeBlacklistString = params.getAs[String]("attachmentTypeBlacklist")
    val attachmentTypeBlacklist = if("multi" == "default" || "multi" == "csv") {
      attachmentTypeBlacklistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("attachmentTypeBlacklist: " + attachmentTypeBlacklist)
  }

  

  val comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerOperation = (apiOperation[ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo]("comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("fieldWhitelist").description("").optional, queryParam[List[String]]("attachmentTypeBlacklist").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.journal.client.endpoints.impl.JournalOperationsService", operation(comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val fieldWhitelistString = params.getAs[String]("fieldWhitelist")
    val fieldWhitelist = if("multi" == "default" || "multi" == "csv") {
      fieldWhitelistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("fieldWhitelist: " + fieldWhitelist)
        val attachmentTypeBlacklistString = params.getAs[String]("attachmentTypeBlacklist")
    val attachmentTypeBlacklist = if("multi" == "default" || "multi" == "csv") {
      attachmentTypeBlacklistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("attachmentTypeBlacklist: " + attachmentTypeBlacklist)
  }

  

  val comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileOperation = (apiOperation[ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo]("comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("fieldWhitelist").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberGroupProfileOperationService", operation(comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val fieldWhitelistString = params.getAs[String]("fieldWhitelist")
    val fieldWhitelist = if("multi" == "default" || "multi" == "csv") {
      fieldWhitelistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("fieldWhitelist: " + fieldWhitelist)
  }

  

  val comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOOperation = (apiOperation[ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo]("comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("fieldWhitelist").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberUserProfileOperationService", operation(comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val fieldWhitelistString = params.getAs[String]("fieldWhitelist")
    val fieldWhitelist = if("multi" == "default" || "multi" == "csv") {
      fieldWhitelistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("fieldWhitelist: " + fieldWhitelist)
  }

  

  val comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFOperation = (apiOperation[ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo]("comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("everyoneLimit").description("").optional, queryParam[Int]("priority").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.members.impl.CommunityMemberGroupProfileComponentFactory", operation(comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val everyoneLimit = params.getAs[Int]("everyoneLimit")

    //println("everyoneLimit: " + everyoneLimit)
            val priority = params.getAs[Int]("priority")

    //println("priority: " + priority)
  }

  

  val comAdobeCqSocialMessagingClientEndpointsImplMessagingOperationOperation = (apiOperation[ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo]("comAdobeCqSocialMessagingClientEndpointsImplMessagingOperation")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("messagePeriodproperties").description("").optional, queryParam[Int]("messageBoxSizeLimit").description("").optional, queryParam[Int]("messageCountLimit").description("").optional, queryParam[Boolean]("notifyFailure").description("").optional, queryParam[String]("failureMessageFrom").description("").optional, queryParam[String]("failureTemplatePath").description("").optional, queryParam[Int]("maxRetries").description("").optional, queryParam[Int]("minWaitBetweenRetries").description("").optional, queryParam[Int]("countUpdatePoolSize").description("").optional, queryParam[String]("inboxPeriodpath").description("").optional, queryParam[String]("sentitemsPeriodpath").description("").optional, queryParam[Boolean]("supportAttachments").description("").optional, queryParam[Boolean]("supportGroupMessaging").description("").optional, queryParam[Int]("maxTotalRecipients").description("").optional, queryParam[Int]("batchSize").description("").optional, queryParam[Int]("maxTotalAttachmentSize").description("").optional, queryParam[List[String]]("attachmentTypeBlacklist").description("").optional, queryParam[List[String]]("allowedAttachmentTypes").description("").optional, queryParam[String]("serviceSelector").description("").optional, queryParam[List[String]]("fieldWhitelist").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.messaging.client.endpoints.impl.MessagingOperationsServiceImpl", operation(comAdobeCqSocialMessagingClientEndpointsImplMessagingOperationOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val messagePeriodpropertiesString = params.getAs[String]("messagePeriodproperties")
    val messagePeriodproperties = if("multi" == "default" || "multi" == "csv") {
      messagePeriodpropertiesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("messagePeriodproperties: " + messagePeriodproperties)
            val messageBoxSizeLimit = params.getAs[Int]("messageBoxSizeLimit")

    //println("messageBoxSizeLimit: " + messageBoxSizeLimit)
            val messageCountLimit = params.getAs[Int]("messageCountLimit")

    //println("messageCountLimit: " + messageCountLimit)
            val notifyFailure = params.getAs[Boolean]("notifyFailure")

    //println("notifyFailure: " + notifyFailure)
            val failureMessageFrom = params.getAs[String]("failureMessageFrom")

    //println("failureMessageFrom: " + failureMessageFrom)
            val failureTemplatePath = params.getAs[String]("failureTemplatePath")

    //println("failureTemplatePath: " + failureTemplatePath)
            val maxRetries = params.getAs[Int]("maxRetries")

    //println("maxRetries: " + maxRetries)
            val minWaitBetweenRetries = params.getAs[Int]("minWaitBetweenRetries")

    //println("minWaitBetweenRetries: " + minWaitBetweenRetries)
            val countUpdatePoolSize = params.getAs[Int]("countUpdatePoolSize")

    //println("countUpdatePoolSize: " + countUpdatePoolSize)
            val inboxPeriodpath = params.getAs[String]("inboxPeriodpath")

    //println("inboxPeriodpath: " + inboxPeriodpath)
            val sentitemsPeriodpath = params.getAs[String]("sentitemsPeriodpath")

    //println("sentitemsPeriodpath: " + sentitemsPeriodpath)
            val supportAttachments = params.getAs[Boolean]("supportAttachments")

    //println("supportAttachments: " + supportAttachments)
            val supportGroupMessaging = params.getAs[Boolean]("supportGroupMessaging")

    //println("supportGroupMessaging: " + supportGroupMessaging)
            val maxTotalRecipients = params.getAs[Int]("maxTotalRecipients")

    //println("maxTotalRecipients: " + maxTotalRecipients)
            val batchSize = params.getAs[Int]("batchSize")

    //println("batchSize: " + batchSize)
            val maxTotalAttachmentSize = params.getAs[Int]("maxTotalAttachmentSize")

    //println("maxTotalAttachmentSize: " + maxTotalAttachmentSize)
        val attachmentTypeBlacklistString = params.getAs[String]("attachmentTypeBlacklist")
    val attachmentTypeBlacklist = if("multi" == "default" || "multi" == "csv") {
      attachmentTypeBlacklistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("attachmentTypeBlacklist: " + attachmentTypeBlacklist)
        val allowedAttachmentTypesString = params.getAs[String]("allowedAttachmentTypes")
    val allowedAttachmentTypes = if("multi" == "default" || "multi" == "csv") {
      allowedAttachmentTypesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("allowedAttachmentTypes: " + allowedAttachmentTypes)
            val serviceSelector = params.getAs[String]("serviceSelector")

    //println("serviceSelector: " + serviceSelector)
        val fieldWhitelistString = params.getAs[String]("fieldWhitelist")
    val fieldWhitelist = if("multi" == "default" || "multi" == "csv") {
      fieldWhitelistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("fieldWhitelist: " + fieldWhitelist)
  }

  

  val comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenOperation = (apiOperation[ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo]("comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("resourceTypePeriodfilters").description("").optional, queryParam[Int]("priority").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.FilterGroupSocialComponentFactory", operation(comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val resourceTypePeriodfiltersString = params.getAs[String]("resourceTypePeriodfilters")
    val resourceTypePeriodfilters = if("multi" == "default" || "multi" == "csv") {
      resourceTypePeriodfiltersString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("resourceTypePeriodfilters: " + resourceTypePeriodfilters)
            val priority = params.getAs[Int]("priority")

    //println("priority: " + priority)
  }

  

  val comAdobeCqSocialModerationDashboardApiModerationDashboardSocialOperation = (apiOperation[ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo]("comAdobeCqSocialModerationDashboardApiModerationDashboardSocial")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("priority").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.ModerationDashboardSocialComponentFactory", operation(comAdobeCqSocialModerationDashboardApiModerationDashboardSocialOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val priority = params.getAs[Int]("priority")

    //println("priority: " + priority)
  }

  

  val comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenOperation = (apiOperation[ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo]("comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("priority").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.UserDetailsSocialComponentFactory", operation(comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val priority = params.getAs[Int]("priority")

    //println("priority: " + priority)
  }

  

  val comAdobeCqSocialModerationDashboardInternalImplFilterGroupSociOperation = (apiOperation[ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo]("comAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("resourceTypePeriodfilters").description("").optional, queryParam[Int]("priority").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.internal.impl.FilterGroupSocialComponentFactoryV2", operation(comAdobeCqSocialModerationDashboardInternalImplFilterGroupSociOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val resourceTypePeriodfiltersString = params.getAs[String]("resourceTypePeriodfilters")
    val resourceTypePeriodfilters = if("multi" == "default" || "multi" == "csv") {
      resourceTypePeriodfiltersString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("resourceTypePeriodfilters: " + resourceTypePeriodfilters)
            val priority = params.getAs[Int]("priority")

    //println("priority: " + priority)
  }

  

  val comAdobeCqSocialNotificationsImplMentionsRouterOperation = (apiOperation[ComAdobeCqSocialNotificationsImplMentionsRouterInfo]("comAdobeCqSocialNotificationsImplMentionsRouter")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("eventPeriodtopics").description("").optional, queryParam[String]("eventPeriodfilter").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.notifications.impl.MentionsRouter", operation(comAdobeCqSocialNotificationsImplMentionsRouterOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val eventPeriodtopics = params.getAs[String]("eventPeriodtopics")

    //println("eventPeriodtopics: " + eventPeriodtopics)
            val eventPeriodfilter = params.getAs[String]("eventPeriodfilter")

    //println("eventPeriodfilter: " + eventPeriodfilter)
  }

  

  val comAdobeCqSocialNotificationsImplNotificationManagerImplOperation = (apiOperation[ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo]("comAdobeCqSocialNotificationsImplNotificationManagerImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("maxPeriodunreadPeriodnotificationPeriodcount").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationManagerImpl", operation(comAdobeCqSocialNotificationsImplNotificationManagerImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val maxPeriodunreadPeriodnotificationPeriodcount = params.getAs[Int]("maxPeriodunreadPeriodnotificationPeriodcount")

    //println("maxPeriodunreadPeriodnotificationPeriodcount: " + maxPeriodunreadPeriodnotificationPeriodcount)
  }

  

  val comAdobeCqSocialNotificationsImplNotificationsRouterOperation = (apiOperation[ComAdobeCqSocialNotificationsImplNotificationsRouterInfo]("comAdobeCqSocialNotificationsImplNotificationsRouter")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("eventPeriodtopics").description("").optional, queryParam[String]("eventPeriodfilter").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationsRouter", operation(comAdobeCqSocialNotificationsImplNotificationsRouterOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val eventPeriodtopics = params.getAs[String]("eventPeriodtopics")

    //println("eventPeriodtopics: " + eventPeriodtopics)
            val eventPeriodfilter = params.getAs[String]("eventPeriodfilter")

    //println("eventPeriodfilter: " + eventPeriodfilter)
  }

  

  val comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicOperation = (apiOperation[ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo]("comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("fieldWhitelist").description("").optional, queryParam[List[String]]("attachmentTypeBlacklist").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.qna.client.endpoints.impl.QnaForumOperationsService", operation(comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val fieldWhitelistString = params.getAs[String]("fieldWhitelist")
    val fieldWhitelist = if("multi" == "default" || "multi" == "csv") {
      fieldWhitelistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("fieldWhitelist: " + fieldWhitelist)
        val attachmentTypeBlacklistString = params.getAs[String]("attachmentTypeBlacklist")
    val attachmentTypeBlacklist = if("multi" == "default" || "multi" == "csv") {
      attachmentTypeBlacklistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("attachmentTypeBlacklist: " + attachmentTypeBlacklist)
  }

  

  val comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIOperation = (apiOperation[ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo]("comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("cqPeriodsocialPeriodreportingPeriodanalyticsPeriodpollingPeriodimporterPeriodinterval").description("").optional, queryParam[Int]("cqPeriodsocialPeriodreportingPeriodanalyticsPeriodpollingPeriodimporterPeriodpageSize").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportImporterServiceImpl", operation(comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val cqPeriodsocialPeriodreportingPeriodanalyticsPeriodpollingPeriodimporterPeriodinterval = params.getAs[Int]("cqPeriodsocialPeriodreportingPeriodanalyticsPeriodpollingPeriodimporterPeriodinterval")

    //println("cqPeriodsocialPeriodreportingPeriodanalyticsPeriodpollingPeriodimporterPeriodinterval: " + cqPeriodsocialPeriodreportingPeriodanalyticsPeriodpollingPeriodimporterPeriodinterval)
            val cqPeriodsocialPeriodreportingPeriodanalyticsPeriodpollingPeriodimporterPeriodpageSize = params.getAs[Int]("cqPeriodsocialPeriodreportingPeriodanalyticsPeriodpollingPeriodimporterPeriodpageSize")

    //println("cqPeriodsocialPeriodreportingPeriodanalyticsPeriodpollingPeriodimporterPeriodpageSize: " + cqPeriodsocialPeriodreportingPeriodanalyticsPeriodpollingPeriodimporterPeriodpageSize)
  }

  

  val comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMOperation = (apiOperation[ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo]("comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("reportPeriodfetchPerioddelay").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportManagementServiceImpl", operation(comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val reportPeriodfetchPerioddelay = params.getAs[Int]("reportPeriodfetchPerioddelay")

    //println("reportPeriodfetchPerioddelay: " + reportPeriodfetchPerioddelay)
  }

  

  val comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSOperation = (apiOperation[ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo]("comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("cqPeriodsocialPeriodconsolePeriodanalyticsPeriodsitesPeriodmapping").description("").optional, queryParam[Int]("priority").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.SiteTrendReportSocialComponentFactory", operation(comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val cqPeriodsocialPeriodconsolePeriodanalyticsPeriodsitesPeriodmappingString = params.getAs[String]("cqPeriodsocialPeriodconsolePeriodanalyticsPeriodsitesPeriodmapping")
    val cqPeriodsocialPeriodconsolePeriodanalyticsPeriodsitesPeriodmapping = if("multi" == "default" || "multi" == "csv") {
      cqPeriodsocialPeriodconsolePeriodanalyticsPeriodsitesPeriodmappingString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cqPeriodsocialPeriodconsolePeriodanalyticsPeriodsitesPeriodmapping: " + cqPeriodsocialPeriodconsolePeriodanalyticsPeriodsitesPeriodmapping)
            val priority = params.getAs[Int]("priority")

    //println("priority: " + priority)
  }

  

  val comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiOperation = (apiOperation[ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo]("comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("fieldWhitelist").description("").optional, queryParam[List[String]]("attachmentTypeBlacklist").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.review.client.endpoints.impl.ReviewOperationsService", operation(comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val fieldWhitelistString = params.getAs[String]("fieldWhitelist")
    val fieldWhitelist = if("multi" == "default" || "multi" == "csv") {
      fieldWhitelistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("fieldWhitelist: " + fieldWhitelist)
        val attachmentTypeBlacklistString = params.getAs[String]("attachmentTypeBlacklist")
    val attachmentTypeBlacklist = if("multi" == "default" || "multi" == "csv") {
      attachmentTypeBlacklistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("attachmentTypeBlacklist: " + attachmentTypeBlacklist)
  }

  

  val comAdobeCqSocialScfCoreOperationsImplSocialOperationsServletOperation = (apiOperation[ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo]("comAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("slingPeriodservletPeriodselectors").description("").optional, queryParam[String]("slingPeriodservletPeriodextensions").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.scf.core.operations.impl.SocialOperationsServlet", operation(comAdobeCqSocialScfCoreOperationsImplSocialOperationsServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val slingPeriodservletPeriodselectors = params.getAs[String]("slingPeriodservletPeriodselectors")

    //println("slingPeriodservletPeriodselectors: " + slingPeriodservletPeriodselectors)
            val slingPeriodservletPeriodextensions = params.getAs[String]("slingPeriodservletPeriodextensions")

    //println("slingPeriodservletPeriodextensions: " + slingPeriodservletPeriodextensions)
  }

  

  val comAdobeCqSocialScfEndpointsImplDefaultSocialGetServletOperation = (apiOperation[ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo]("comAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("slingPeriodservletPeriodselectors").description("").optional, queryParam[String]("slingPeriodservletPeriodextensions").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.scf.endpoints.impl.DefaultSocialGetServlet", operation(comAdobeCqSocialScfEndpointsImplDefaultSocialGetServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val slingPeriodservletPeriodselectorsString = params.getAs[String]("slingPeriodservletPeriodselectors")
    val slingPeriodservletPeriodselectors = if("multi" == "default" || "multi" == "csv") {
      slingPeriodservletPeriodselectorsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("slingPeriodservletPeriodselectors: " + slingPeriodservletPeriodselectors)
            val slingPeriodservletPeriodextensions = params.getAs[String]("slingPeriodservletPeriodextensions")

    //println("slingPeriodservletPeriodextensions: " + slingPeriodservletPeriodextensions)
  }

  

  val comAdobeCqSocialScoringImplScoringEventListenerOperation = (apiOperation[ComAdobeCqSocialScoringImplScoringEventListenerInfo]("comAdobeCqSocialScoringImplScoringEventListener")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("eventPeriodtopics").description("").optional, queryParam[String]("eventPeriodfilter").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.scoring.impl.ScoringEventListener", operation(comAdobeCqSocialScoringImplScoringEventListenerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val eventPeriodtopics = params.getAs[String]("eventPeriodtopics")

    //println("eventPeriodtopics: " + eventPeriodtopics)
            val eventPeriodfilter = params.getAs[String]("eventPeriodfilter")

    //println("eventPeriodfilter: " + eventPeriodfilter)
  }

  

  val comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplOperation = (apiOperation[ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo]("comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("enableFallback").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.serviceusers.internal.impl.ServiceUserWrapperImpl", operation(comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val enableFallback = params.getAs[Boolean]("enableFallback")

    //println("enableFallback: " + enableFallback)
  }

  

  val comAdobeCqSocialSiteEndpointsImplSiteOperationServiceOperation = (apiOperation[ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo]("comAdobeCqSocialSiteEndpointsImplSiteOperationService")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("fieldWhitelist").description("").optional, queryParam[List[String]]("sitePathFilters").description("").optional, queryParam[String]("sitePackageGroup").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.site.endpoints.impl.SiteOperationService", operation(comAdobeCqSocialSiteEndpointsImplSiteOperationServiceOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val fieldWhitelistString = params.getAs[String]("fieldWhitelist")
    val fieldWhitelist = if("multi" == "default" || "multi" == "csv") {
      fieldWhitelistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("fieldWhitelist: " + fieldWhitelist)
        val sitePathFiltersString = params.getAs[String]("sitePathFilters")
    val sitePathFilters = if("multi" == "default" || "multi" == "csv") {
      sitePathFiltersString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("sitePathFilters: " + sitePathFilters)
            val sitePackageGroup = params.getAs[String]("sitePackageGroup")

    //println("sitePackageGroup: " + sitePackageGroup)
  }

  

  val comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImOperation = (apiOperation[ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo]("comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("cqPeriodsocialPeriodconsolePeriodanalyticsPeriodcomponents").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.site.impl.AnalyticsComponentConfigurationServiceImpl", operation(comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val cqPeriodsocialPeriodconsolePeriodanalyticsPeriodcomponentsString = params.getAs[String]("cqPeriodsocialPeriodconsolePeriodanalyticsPeriodcomponents")
    val cqPeriodsocialPeriodconsolePeriodanalyticsPeriodcomponents = if("multi" == "default" || "multi" == "csv") {
      cqPeriodsocialPeriodconsolePeriodanalyticsPeriodcomponentsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cqPeriodsocialPeriodconsolePeriodanalyticsPeriodcomponents: " + cqPeriodsocialPeriodconsolePeriodanalyticsPeriodcomponents)
  }

  

  val comAdobeCqSocialSiteImplSiteConfiguratorImplOperation = (apiOperation[ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo]("comAdobeCqSocialSiteImplSiteConfiguratorImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("componentsUsingTags").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.site.impl.SiteConfiguratorImpl", operation(comAdobeCqSocialSiteImplSiteConfiguratorImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val componentsUsingTagsString = params.getAs[String]("componentsUsingTags")
    val componentsUsingTags = if("multi" == "default" || "multi" == "csv") {
      componentsUsingTagsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("componentsUsingTags: " + componentsUsingTags)
  }

  

  val comAdobeCqSocialSrpImplSocialSolrConnectorOperation = (apiOperation[ComAdobeCqSocialSrpImplSocialSolrConnectorInfo]("comAdobeCqSocialSrpImplSocialSolrConnector")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("srpPeriodtype").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.srp.impl.SocialSolrConnector", operation(comAdobeCqSocialSrpImplSocialSolrConnectorOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val srpPeriodtype = params.getAs[String]("srpPeriodtype")

    //println("srpPeriodtype: " + srpPeriodtype)
  }

  

  val comAdobeCqSocialSyncImplDiffChangesObserverOperation = (apiOperation[ComAdobeCqSocialSyncImplDiffChangesObserverInfo]("comAdobeCqSocialSyncImplDiffChangesObserver")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("enabled").description("").optional, queryParam[String]("agentName").description("").optional, queryParam[String]("diffPath").description("").optional, queryParam[String]("propertyNames").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.sync.impl.DiffChangesObserver", operation(comAdobeCqSocialSyncImplDiffChangesObserverOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val enabled = params.getAs[Boolean]("enabled")

    //println("enabled: " + enabled)
            val agentName = params.getAs[String]("agentName")

    //println("agentName: " + agentName)
            val diffPath = params.getAs[String]("diffPath")

    //println("diffPath: " + diffPath)
            val propertyNames = params.getAs[String]("propertyNames")

    //println("propertyNames: " + propertyNames)
  }

  

  val comAdobeCqSocialSyncImplGroupSyncListenerImplOperation = (apiOperation[ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo]("comAdobeCqSocialSyncImplGroupSyncListenerImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("nodetypes").description("").optional, queryParam[List[String]]("ignorableprops").description("").optional, queryParam[String]("ignorablenodes").description("").optional, queryParam[Boolean]("enabled").description("").optional, queryParam[String]("distfolders").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.sync.impl.GroupSyncListenerImpl", operation(comAdobeCqSocialSyncImplGroupSyncListenerImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val nodetypesString = params.getAs[String]("nodetypes")
    val nodetypes = if("multi" == "default" || "multi" == "csv") {
      nodetypesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("nodetypes: " + nodetypes)
        val ignorablepropsString = params.getAs[String]("ignorableprops")
    val ignorableprops = if("multi" == "default" || "multi" == "csv") {
      ignorablepropsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("ignorableprops: " + ignorableprops)
            val ignorablenodes = params.getAs[String]("ignorablenodes")

    //println("ignorablenodes: " + ignorablenodes)
            val enabled = params.getAs[Boolean]("enabled")

    //println("enabled: " + enabled)
            val distfolders = params.getAs[String]("distfolders")

    //println("distfolders: " + distfolders)
  }

  

  val comAdobeCqSocialSyncImplPublisherSyncServiceImplOperation = (apiOperation[ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo]("comAdobeCqSocialSyncImplPublisherSyncServiceImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("activeRunModes").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.sync.impl.PublisherSyncServiceImpl", operation(comAdobeCqSocialSyncImplPublisherSyncServiceImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val activeRunModesString = params.getAs[String]("activeRunModes")
    val activeRunModes = if("multi" == "default" || "multi" == "csv") {
      activeRunModesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("activeRunModes: " + activeRunModes)
  }

  

  val comAdobeCqSocialSyncImplUserSyncListenerImplOperation = (apiOperation[ComAdobeCqSocialSyncImplUserSyncListenerImplInfo]("comAdobeCqSocialSyncImplUserSyncListenerImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("nodetypes").description("").optional, queryParam[List[String]]("ignorableprops").description("").optional, queryParam[List[String]]("ignorablenodes").description("").optional, queryParam[Boolean]("enabled").description("").optional, queryParam[List[String]]("distfolders").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.sync.impl.UserSyncListenerImpl", operation(comAdobeCqSocialSyncImplUserSyncListenerImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val nodetypesString = params.getAs[String]("nodetypes")
    val nodetypes = if("multi" == "default" || "multi" == "csv") {
      nodetypesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("nodetypes: " + nodetypes)
        val ignorablepropsString = params.getAs[String]("ignorableprops")
    val ignorableprops = if("multi" == "default" || "multi" == "csv") {
      ignorablepropsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("ignorableprops: " + ignorableprops)
        val ignorablenodesString = params.getAs[String]("ignorablenodes")
    val ignorablenodes = if("multi" == "default" || "multi" == "csv") {
      ignorablenodesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("ignorablenodes: " + ignorablenodes)
            val enabled = params.getAs[Boolean]("enabled")

    //println("enabled: " + enabled)
        val distfoldersString = params.getAs[String]("distfolders")
    val distfolders = if("multi" == "default" || "multi" == "csv") {
      distfoldersString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("distfolders: " + distfolders)
  }

  

  val comAdobeCqSocialTranslationImplTranslationServiceConfigManagerOperation = (apiOperation[ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo]("comAdobeCqSocialTranslationImplTranslationServiceConfigManager")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("translatePeriodlanguage").description("").optional, queryParam[String]("translatePerioddisplay").description("").optional, queryParam[Boolean]("translatePeriodattribution").description("").optional, queryParam[String]("translatePeriodcaching").description("").optional, queryParam[String]("translatePeriodsmartPeriodrendering").description("").optional, queryParam[String]("translatePeriodcachingPeriodduration").description("").optional, queryParam[String]("translatePeriodsessionPeriodsavePeriodinterval").description("").optional, queryParam[String]("translatePeriodsessionPeriodsavePeriodbatchLimit").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.translation.impl.TranslationServiceConfigManager", operation(comAdobeCqSocialTranslationImplTranslationServiceConfigManagerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val translatePeriodlanguage = params.getAs[String]("translatePeriodlanguage")

    //println("translatePeriodlanguage: " + translatePeriodlanguage)
            val translatePerioddisplay = params.getAs[String]("translatePerioddisplay")

    //println("translatePerioddisplay: " + translatePerioddisplay)
            val translatePeriodattribution = params.getAs[Boolean]("translatePeriodattribution")

    //println("translatePeriodattribution: " + translatePeriodattribution)
            val translatePeriodcaching = params.getAs[String]("translatePeriodcaching")

    //println("translatePeriodcaching: " + translatePeriodcaching)
            val translatePeriodsmartPeriodrendering = params.getAs[String]("translatePeriodsmartPeriodrendering")

    //println("translatePeriodsmartPeriodrendering: " + translatePeriodsmartPeriodrendering)
            val translatePeriodcachingPeriodduration = params.getAs[String]("translatePeriodcachingPeriodduration")

    //println("translatePeriodcachingPeriodduration: " + translatePeriodcachingPeriodduration)
            val translatePeriodsessionPeriodsavePeriodinterval = params.getAs[String]("translatePeriodsessionPeriodsavePeriodinterval")

    //println("translatePeriodsessionPeriodsavePeriodinterval: " + translatePeriodsessionPeriodsavePeriodinterval)
            val translatePeriodsessionPeriodsavePeriodbatchLimit = params.getAs[String]("translatePeriodsessionPeriodsavePeriodbatchLimit")

    //println("translatePeriodsessionPeriodsavePeriodbatchLimit: " + translatePeriodsessionPeriodsavePeriodbatchLimit)
  }

  

  val comAdobeCqSocialTranslationImplUGCLanguageDetectorOperation = (apiOperation[ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo]("comAdobeCqSocialTranslationImplUGCLanguageDetector")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("eventPeriodtopics").description("").optional, queryParam[String]("eventPeriodfilter").description("").optional, queryParam[List[String]]("translatePeriodlistenerPeriodtype").description("").optional, queryParam[List[String]]("translatePeriodpropertyPeriodlist").description("").optional, queryParam[Int]("poolSize").description("").optional, queryParam[Int]("maxPoolSize").description("").optional, queryParam[Int]("queueSize").description("").optional, queryParam[Int]("keepAliveTime").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.translation.impl.UGCLanguageDetector", operation(comAdobeCqSocialTranslationImplUGCLanguageDetectorOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val eventPeriodtopics = params.getAs[String]("eventPeriodtopics")

    //println("eventPeriodtopics: " + eventPeriodtopics)
            val eventPeriodfilter = params.getAs[String]("eventPeriodfilter")

    //println("eventPeriodfilter: " + eventPeriodfilter)
        val translatePeriodlistenerPeriodtypeString = params.getAs[String]("translatePeriodlistenerPeriodtype")
    val translatePeriodlistenerPeriodtype = if("multi" == "default" || "multi" == "csv") {
      translatePeriodlistenerPeriodtypeString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("translatePeriodlistenerPeriodtype: " + translatePeriodlistenerPeriodtype)
        val translatePeriodpropertyPeriodlistString = params.getAs[String]("translatePeriodpropertyPeriodlist")
    val translatePeriodpropertyPeriodlist = if("multi" == "default" || "multi" == "csv") {
      translatePeriodpropertyPeriodlistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("translatePeriodpropertyPeriodlist: " + translatePeriodpropertyPeriodlist)
            val poolSize = params.getAs[Int]("poolSize")

    //println("poolSize: " + poolSize)
            val maxPoolSize = params.getAs[Int]("maxPoolSize")

    //println("maxPoolSize: " + maxPoolSize)
            val queueSize = params.getAs[Int]("queueSize")

    //println("queueSize: " + queueSize)
            val keepAliveTime = params.getAs[Int]("keepAliveTime")

    //println("keepAliveTime: " + keepAliveTime)
  }

  

  val comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplOperation = (apiOperation[ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo]("comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("threadPoolSize").description("").optional, queryParam[Int]("delayTime").description("").optional, queryParam[Int]("workerSleepTime").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.ugcbase.dispatcher.impl.FlushServiceImpl", operation(comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val threadPoolSize = params.getAs[Int]("threadPoolSize")

    //println("threadPoolSize: " + threadPoolSize)
            val delayTime = params.getAs[Int]("delayTime")

    //println("delayTime: " + delayTime)
            val workerSleepTime = params.getAs[Int]("workerSleepTime")

    //println("workerSleepTime: " + workerSleepTime)
  }

  

  val comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplOperation = (apiOperation[ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo]("comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("poolSize").description("").optional, queryParam[Int]("maxPoolSize").description("").optional, queryParam[Int]("queueSize").description("").optional, queryParam[Int]("keepAliveTime").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.AysncReverseReplicatorImpl", operation(comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val poolSize = params.getAs[Int]("poolSize")

    //println("poolSize: " + poolSize)
            val maxPoolSize = params.getAs[Int]("maxPoolSize")

    //println("maxPoolSize: " + maxPoolSize)
            val queueSize = params.getAs[Int]("queueSize")

    //println("queueSize: " + queueSize)
            val keepAliveTime = params.getAs[Int]("keepAliveTime")

    //println("keepAliveTime: " + keepAliveTime)
  }

  

  val comAdobeCqSocialUgcbaseImplPublisherConfigurationImplOperation = (apiOperation[ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo]("comAdobeCqSocialUgcbaseImplPublisherConfigurationImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("isPrimaryPublisher").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.PublisherConfigurationImpl", operation(comAdobeCqSocialUgcbaseImplPublisherConfigurationImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val isPrimaryPublisher = params.getAs[Boolean]("isPrimaryPublisher")

    //println("isPrimaryPublisher: " + isPrimaryPublisher)
  }

  

  val comAdobeCqSocialUgcbaseImplSocialUtilsImplOperation = (apiOperation[ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo]("comAdobeCqSocialUgcbaseImplSocialUtilsImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("legacyCloudUGCPathMapping").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.SocialUtilsImpl", operation(comAdobeCqSocialUgcbaseImplSocialUtilsImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val legacyCloudUGCPathMapping = params.getAs[Boolean]("legacyCloudUGCPathMapping")

    //println("legacyCloudUGCPathMapping: " + legacyCloudUGCPathMapping)
  }

  

  val comAdobeCqSocialUgcbaseModerationImplAutoModerationImplOperation = (apiOperation[ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo]("comAdobeCqSocialUgcbaseModerationImplAutoModerationImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("automoderationPeriodsequence").description("").optional, queryParam[Boolean]("automoderationPeriodonfailurestop").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.AutoModerationImpl", operation(comAdobeCqSocialUgcbaseModerationImplAutoModerationImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val automoderationPeriodsequenceString = params.getAs[String]("automoderationPeriodsequence")
    val automoderationPeriodsequence = if("multi" == "default" || "multi" == "csv") {
      automoderationPeriodsequenceString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("automoderationPeriodsequence: " + automoderationPeriodsequence)
            val automoderationPeriodonfailurestop = params.getAs[Boolean]("automoderationPeriodonfailurestop")

    //println("automoderationPeriodonfailurestop: " + automoderationPeriodonfailurestop)
  }

  

  val comAdobeCqSocialUgcbaseModerationImplSentimentProcessOperation = (apiOperation[ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo]("comAdobeCqSocialUgcbaseModerationImplSentimentProcess")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("watchwordsPeriodpositive").description("").optional, queryParam[List[String]]("watchwordsPeriodnegative").description("").optional, queryParam[String]("watchwordsPeriodpath").description("").optional, queryParam[String]("sentimentPeriodpath").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.SentimentProcess", operation(comAdobeCqSocialUgcbaseModerationImplSentimentProcessOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val watchwordsPeriodpositiveString = params.getAs[String]("watchwordsPeriodpositive")
    val watchwordsPeriodpositive = if("multi" == "default" || "multi" == "csv") {
      watchwordsPeriodpositiveString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("watchwordsPeriodpositive: " + watchwordsPeriodpositive)
        val watchwordsPeriodnegativeString = params.getAs[String]("watchwordsPeriodnegative")
    val watchwordsPeriodnegative = if("multi" == "default" || "multi" == "csv") {
      watchwordsPeriodnegativeString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("watchwordsPeriodnegative: " + watchwordsPeriodnegative)
            val watchwordsPeriodpath = params.getAs[String]("watchwordsPeriodpath")

    //println("watchwordsPeriodpath: " + watchwordsPeriodpath)
            val sentimentPeriodpath = params.getAs[String]("sentimentPeriodpath")

    //println("sentimentPeriodpath: " + sentimentPeriodpath)
  }

  

  val comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliOperation = (apiOperation[ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo]("comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("defaultPeriodattachmentPeriodtypePeriodblacklist").description("").optional, queryParam[List[String]]("baselinePeriodattachmentPeriodtypePeriodblacklist").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.DefaultAttachmentTypeBlacklistService", operation(comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val defaultPeriodattachmentPeriodtypePeriodblacklistString = params.getAs[String]("defaultPeriodattachmentPeriodtypePeriodblacklist")
    val defaultPeriodattachmentPeriodtypePeriodblacklist = if("multi" == "default" || "multi" == "csv") {
      defaultPeriodattachmentPeriodtypePeriodblacklistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("defaultPeriodattachmentPeriodtypePeriodblacklist: " + defaultPeriodattachmentPeriodtypePeriodblacklist)
        val baselinePeriodattachmentPeriodtypePeriodblacklistString = params.getAs[String]("baselinePeriodattachmentPeriodtypePeriodblacklist")
    val baselinePeriodattachmentPeriodtypePeriodblacklist = if("multi" == "default" || "multi" == "csv") {
      baselinePeriodattachmentPeriodtypePeriodblacklistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("baselinePeriodattachmentPeriodtypePeriodblacklist: " + baselinePeriodattachmentPeriodtypePeriodblacklist)
  }

  

  val comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplOperation = (apiOperation[ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo]("comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("parameterPeriodwhitelist").description("").optional, queryParam[List[String]]("parameterPeriodwhitelistPeriodprefixes").description("").optional, queryParam[List[String]]("binaryPeriodparameterPeriodwhitelist").description("").optional, queryParam[List[String]]("modifierPeriodwhitelist").description("").optional, queryParam[List[String]]("operationPeriodwhitelist").description("").optional, queryParam[List[String]]("operationPeriodwhitelistPeriodprefixes").description("").optional, queryParam[List[String]]("typehintPeriodwhitelist").description("").optional, queryParam[List[String]]("resourcetypePeriodwhitelist").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.SaferSlingPostValidatorImpl", operation(comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val parameterPeriodwhitelistString = params.getAs[String]("parameterPeriodwhitelist")
    val parameterPeriodwhitelist = if("multi" == "default" || "multi" == "csv") {
      parameterPeriodwhitelistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("parameterPeriodwhitelist: " + parameterPeriodwhitelist)
        val parameterPeriodwhitelistPeriodprefixesString = params.getAs[String]("parameterPeriodwhitelistPeriodprefixes")
    val parameterPeriodwhitelistPeriodprefixes = if("multi" == "default" || "multi" == "csv") {
      parameterPeriodwhitelistPeriodprefixesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("parameterPeriodwhitelistPeriodprefixes: " + parameterPeriodwhitelistPeriodprefixes)
        val binaryPeriodparameterPeriodwhitelistString = params.getAs[String]("binaryPeriodparameterPeriodwhitelist")
    val binaryPeriodparameterPeriodwhitelist = if("multi" == "default" || "multi" == "csv") {
      binaryPeriodparameterPeriodwhitelistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("binaryPeriodparameterPeriodwhitelist: " + binaryPeriodparameterPeriodwhitelist)
        val modifierPeriodwhitelistString = params.getAs[String]("modifierPeriodwhitelist")
    val modifierPeriodwhitelist = if("multi" == "default" || "multi" == "csv") {
      modifierPeriodwhitelistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("modifierPeriodwhitelist: " + modifierPeriodwhitelist)
        val operationPeriodwhitelistString = params.getAs[String]("operationPeriodwhitelist")
    val operationPeriodwhitelist = if("multi" == "default" || "multi" == "csv") {
      operationPeriodwhitelistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("operationPeriodwhitelist: " + operationPeriodwhitelist)
        val operationPeriodwhitelistPeriodprefixesString = params.getAs[String]("operationPeriodwhitelistPeriodprefixes")
    val operationPeriodwhitelistPeriodprefixes = if("multi" == "default" || "multi" == "csv") {
      operationPeriodwhitelistPeriodprefixesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("operationPeriodwhitelistPeriodprefixes: " + operationPeriodwhitelistPeriodprefixes)
        val typehintPeriodwhitelistString = params.getAs[String]("typehintPeriodwhitelist")
    val typehintPeriodwhitelist = if("multi" == "default" || "multi" == "csv") {
      typehintPeriodwhitelistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("typehintPeriodwhitelist: " + typehintPeriodwhitelist)
        val resourcetypePeriodwhitelistString = params.getAs[String]("resourcetypePeriodwhitelist")
    val resourcetypePeriodwhitelist = if("multi" == "default" || "multi" == "csv") {
      resourcetypePeriodwhitelistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("resourcetypePeriodwhitelist: " + resourcetypePeriodwhitelist)
  }

  

  val comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletOperation = (apiOperation[ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo]("comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("slingPeriodservletPeriodextensions").description("").optional, queryParam[String]("slingPeriodservletPeriodpaths").description("").optional, queryParam[String]("slingPeriodservletPeriodmethods").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.user.endpoints.impl.UsersGroupFromPublishServlet", operation(comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val slingPeriodservletPeriodextensions = params.getAs[String]("slingPeriodservletPeriodextensions")

    //println("slingPeriodservletPeriodextensions: " + slingPeriodservletPeriodextensions)
            val slingPeriodservletPeriodpaths = params.getAs[String]("slingPeriodservletPeriodpaths")

    //println("slingPeriodservletPeriodpaths: " + slingPeriodservletPeriodpaths)
            val slingPeriodservletPeriodmethods = params.getAs[String]("slingPeriodservletPeriodmethods")

    //println("slingPeriodservletPeriodmethods: " + slingPeriodservletPeriodmethods)
  }

  

  val comAdobeCqSocialUserImplTransportHttpToPublisherOperation = (apiOperation[ComAdobeCqSocialUserImplTransportHttpToPublisherInfo]("comAdobeCqSocialUserImplTransportHttpToPublisher")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("enable").description("").optional, queryParam[List[String]]("agentPeriodconfiguration").description("").optional, queryParam[String]("contextPeriodpath").description("").optional, queryParam[List[String]]("disabledPeriodcipherPeriodsuites").description("").optional, queryParam[List[String]]("enabledPeriodcipherPeriodsuites").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.social.user.impl.transport.HttpToPublisher", operation(comAdobeCqSocialUserImplTransportHttpToPublisherOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val enable = params.getAs[Boolean]("enable")

    //println("enable: " + enable)
        val agentPeriodconfigurationString = params.getAs[String]("agentPeriodconfiguration")
    val agentPeriodconfiguration = if("multi" == "default" || "multi" == "csv") {
      agentPeriodconfigurationString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("agentPeriodconfiguration: " + agentPeriodconfiguration)
            val contextPeriodpath = params.getAs[String]("contextPeriodpath")

    //println("contextPeriodpath: " + contextPeriodpath)
        val disabledPeriodcipherPeriodsuitesString = params.getAs[String]("disabledPeriodcipherPeriodsuites")
    val disabledPeriodcipherPeriodsuites = if("multi" == "default" || "multi" == "csv") {
      disabledPeriodcipherPeriodsuitesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("disabledPeriodcipherPeriodsuites: " + disabledPeriodcipherPeriodsuites)
        val enabledPeriodcipherPeriodsuitesString = params.getAs[String]("enabledPeriodcipherPeriodsuites")
    val enabledPeriodcipherPeriodsuites = if("multi" == "default" || "multi" == "csv") {
      enabledPeriodcipherPeriodsuitesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("enabledPeriodcipherPeriodsuites: " + enabledPeriodcipherPeriodsuites)
  }

  

  val comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactOperation = (apiOperation[ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo]("comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("resourcePeriodtypes").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.ui.wcm.commons.internal.servlets.rte.RTEFilterServletFactory.amended", operation(comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val resourcePeriodtypesString = params.getAs[String]("resourcePeriodtypes")
    val resourcePeriodtypes = if("multi" == "default" || "multi" == "csv") {
      resourcePeriodtypesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("resourcePeriodtypes: " + resourcePeriodtypes)
  }

  

  val comAdobeCqUpgradesCleanupImplUpgradeContentCleanupOperation = (apiOperation[ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo]("comAdobeCqUpgradesCleanupImplUpgradeContentCleanup")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("deletePeriodpathPeriodregexps").description("").optional, queryParam[String]("deletePeriodsql2Periodquery").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeContentCleanup", operation(comAdobeCqUpgradesCleanupImplUpgradeContentCleanupOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val deletePeriodpathPeriodregexpsString = params.getAs[String]("deletePeriodpathPeriodregexps")
    val deletePeriodpathPeriodregexps = if("multi" == "default" || "multi" == "csv") {
      deletePeriodpathPeriodregexpsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("deletePeriodpathPeriodregexps: " + deletePeriodpathPeriodregexps)
            val deletePeriodsql2Periodquery = params.getAs[String]("deletePeriodsql2Periodquery")

    //println("deletePeriodsql2Periodquery: " + deletePeriodsql2Periodquery)
  }

  

  val comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupOperation = (apiOperation[ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo]("comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("deletePeriodnamePeriodregexps").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeInstallFolderCleanup", operation(comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val deletePeriodnamePeriodregexpsString = params.getAs[String]("deletePeriodnamePeriodregexps")
    val deletePeriodnamePeriodregexps = if("multi" == "default" || "multi" == "csv") {
      deletePeriodnamePeriodregexpsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("deletePeriodnamePeriodregexps: " + deletePeriodnamePeriodregexps)
  }

  

  val comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceOperation = (apiOperation[ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo]("comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("threshold").description("").optional, queryParam[String]("jobTopicName").description("").optional, queryParam[Boolean]("emailEnabled").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncDeleteConfigProviderService", operation(comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val threshold = params.getAs[Int]("threshold")

    //println("threshold: " + threshold)
            val jobTopicName = params.getAs[String]("jobTopicName")

    //println("jobTopicName: " + jobTopicName)
            val emailEnabled = params.getAs[Boolean]("emailEnabled")

    //println("emailEnabled: " + emailEnabled)
  }

  

  val comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskOperation = (apiOperation[ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo]("comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("schedulerPeriodexpression").description("").optional, queryParam[Int]("jobPeriodpurgePeriodthreshold").description("").optional, queryParam[Int]("jobPeriodpurgePeriodmaxPeriodjobs").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncJobCleanUpTask", operation(comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val schedulerPeriodexpression = params.getAs[String]("schedulerPeriodexpression")

    //println("schedulerPeriodexpression: " + schedulerPeriodexpression)
            val jobPeriodpurgePeriodthreshold = params.getAs[Int]("jobPeriodpurgePeriodthreshold")

    //println("jobPeriodpurgePeriodthreshold: " + jobPeriodpurgePeriodthreshold)
            val jobPeriodpurgePeriodmaxPeriodjobs = params.getAs[Int]("jobPeriodpurgePeriodmaxPeriodjobs")

    //println("jobPeriodpurgePeriodmaxPeriodjobs: " + jobPeriodpurgePeriodmaxPeriodjobs)
  }

  

  val comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceOperation = (apiOperation[ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo]("comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("threshold").description("").optional, queryParam[String]("jobTopicName").description("").optional, queryParam[Boolean]("emailEnabled").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncMoveConfigProviderService", operation(comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val threshold = params.getAs[Int]("threshold")

    //println("threshold: " + threshold)
            val jobTopicName = params.getAs[String]("jobTopicName")

    //println("jobTopicName: " + jobTopicName)
            val emailEnabled = params.getAs[Boolean]("emailEnabled")

    //println("emailEnabled: " + emailEnabled)
  }

  

  val comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceOperation = (apiOperation[ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo]("comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("threshold").description("").optional, queryParam[String]("jobTopicName").description("").optional, queryParam[Boolean]("emailEnabled").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncPageMoveConfigProviderService", operation(comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val threshold = params.getAs[Int]("threshold")

    //println("threshold: " + threshold)
            val jobTopicName = params.getAs[String]("jobTopicName")

    //println("jobTopicName: " + jobTopicName)
            val emailEnabled = params.getAs[Boolean]("emailEnabled")

    //println("emailEnabled: " + emailEnabled)
  }

  

  val comAdobeCqWcmLaunchesImplLaunchesEventHandlerOperation = (apiOperation[ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo]("comAdobeCqWcmLaunchesImplLaunchesEventHandler")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("eventPeriodfilter").description("").optional, queryParam[Int]("launchesPeriodeventhandlerPeriodthreadpoolPeriodmaxsize").description("").optional, queryParam[String]("launchesPeriodeventhandlerPeriodthreadpoolPeriodpriority").description("").optional, queryParam[Boolean]("launchesPeriodeventhandlerPeriodupdatelastmodification").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.wcm.launches.impl.LaunchesEventHandler", operation(comAdobeCqWcmLaunchesImplLaunchesEventHandlerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val eventPeriodfilter = params.getAs[String]("eventPeriodfilter")

    //println("eventPeriodfilter: " + eventPeriodfilter)
            val launchesPeriodeventhandlerPeriodthreadpoolPeriodmaxsize = params.getAs[Int]("launchesPeriodeventhandlerPeriodthreadpoolPeriodmaxsize")

    //println("launchesPeriodeventhandlerPeriodthreadpoolPeriodmaxsize: " + launchesPeriodeventhandlerPeriodthreadpoolPeriodmaxsize)
            val launchesPeriodeventhandlerPeriodthreadpoolPeriodpriority = params.getAs[String]("launchesPeriodeventhandlerPeriodthreadpoolPeriodpriority")

    //println("launchesPeriodeventhandlerPeriodthreadpoolPeriodpriority: " + launchesPeriodeventhandlerPeriodthreadpoolPeriodpriority)
            val launchesPeriodeventhandlerPeriodupdatelastmodification = params.getAs[Boolean]("launchesPeriodeventhandlerPeriodupdatelastmodification")

    //println("launchesPeriodeventhandlerPeriodupdatelastmodification: " + launchesPeriodeventhandlerPeriodupdatelastmodification)
  }

  

  val comAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorOperation = (apiOperation[ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo]("comAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("cqPeriodwcmPeriodqrcodePeriodservletPeriodwhitelist").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.wcm.mobile.qrcode.servlet.QRCodeImageGenerator", operation(comAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val cqPeriodwcmPeriodqrcodePeriodservletPeriodwhitelistString = params.getAs[String]("cqPeriodwcmPeriodqrcodePeriodservletPeriodwhitelist")
    val cqPeriodwcmPeriodqrcodePeriodservletPeriodwhitelist = if("multi" == "default" || "multi" == "csv") {
      cqPeriodwcmPeriodqrcodePeriodservletPeriodwhitelistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cqPeriodwcmPeriodqrcodePeriodservletPeriodwhitelist: " + cqPeriodwcmPeriodqrcodePeriodservletPeriodwhitelist)
  }

  

  val comAdobeCqWcmStyleInternalComponentStyleInfoCacheImplOperation = (apiOperation[ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo]("comAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("size").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.wcm.style.internal.ComponentStyleInfoCacheImpl", operation(comAdobeCqWcmStyleInternalComponentStyleInfoCacheImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val size = params.getAs[Int]("size")

    //println("size: " + size)
  }

  

  val comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplOperation = (apiOperation[ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo]("comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("syncTranslationStatePeriodschedulingFormat").description("").optional, queryParam[String]("schedulingRepeatTranslationPeriodschedulingFormat").description("").optional, queryParam[String]("syncTranslationStatePeriodlockTimeoutInMinutes").description("").optional, queryParam[String]("exportPeriodformat").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.cq.wcm.translation.impl.TranslationPlatformConfigurationImpl", operation(comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val syncTranslationStatePeriodschedulingFormat = params.getAs[String]("syncTranslationStatePeriodschedulingFormat")

    //println("syncTranslationStatePeriodschedulingFormat: " + syncTranslationStatePeriodschedulingFormat)
            val schedulingRepeatTranslationPeriodschedulingFormat = params.getAs[String]("schedulingRepeatTranslationPeriodschedulingFormat")

    //println("schedulingRepeatTranslationPeriodschedulingFormat: " + schedulingRepeatTranslationPeriodschedulingFormat)
            val syncTranslationStatePeriodlockTimeoutInMinutes = params.getAs[String]("syncTranslationStatePeriodlockTimeoutInMinutes")

    //println("syncTranslationStatePeriodlockTimeoutInMinutes: " + syncTranslationStatePeriodlockTimeoutInMinutes)
            val exportPeriodformat = params.getAs[String]("exportPeriodformat")

    //println("exportPeriodformat: " + exportPeriodformat)
  }

  

  val comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceOperation = (apiOperation[ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo]("comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("portalPeriodoutboxes").description("").optional, queryParam[String]("draftPerioddataPeriodservice").description("").optional, queryParam[String]("draftPeriodmetadataPeriodservice").description("").optional, queryParam[String]("submitPerioddataPeriodservice").description("").optional, queryParam[String]("submitPeriodmetadataPeriodservice").description("").optional, queryParam[String]("pendingSignPerioddataPeriodservice").description("").optional, queryParam[String]("pendingSignPeriodmetadataPeriodservice").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.fd.fp.config.FormsPortalDraftsandSubmissionConfigService", operation(comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val portalPeriodoutboxesString = params.getAs[String]("portalPeriodoutboxes")
    val portalPeriodoutboxes = if("multi" == "default" || "multi" == "csv") {
      portalPeriodoutboxesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("portalPeriodoutboxes: " + portalPeriodoutboxes)
            val draftPerioddataPeriodservice = params.getAs[String]("draftPerioddataPeriodservice")

    //println("draftPerioddataPeriodservice: " + draftPerioddataPeriodservice)
            val draftPeriodmetadataPeriodservice = params.getAs[String]("draftPeriodmetadataPeriodservice")

    //println("draftPeriodmetadataPeriodservice: " + draftPeriodmetadataPeriodservice)
            val submitPerioddataPeriodservice = params.getAs[String]("submitPerioddataPeriodservice")

    //println("submitPerioddataPeriodservice: " + submitPerioddataPeriodservice)
            val submitPeriodmetadataPeriodservice = params.getAs[String]("submitPeriodmetadataPeriodservice")

    //println("submitPeriodmetadataPeriodservice: " + submitPeriodmetadataPeriodservice)
            val pendingSignPerioddataPeriodservice = params.getAs[String]("pendingSignPerioddataPeriodservice")

    //println("pendingSignPerioddataPeriodservice: " + pendingSignPerioddataPeriodservice)
            val pendingSignPeriodmetadataPeriodservice = params.getAs[String]("pendingSignPeriodmetadataPeriodservice")

    //println("pendingSignPeriodmetadataPeriodservice: " + pendingSignPeriodmetadataPeriodservice)
  }

  

  val comAdobeFdFpConfigFormsPortalSchedulerServiceOperation = (apiOperation[ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo]("comAdobeFdFpConfigFormsPortalSchedulerService")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("formportalPeriodinterval").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.fd.fp.config.FormsPortalSchedulerService", operation(comAdobeFdFpConfigFormsPortalSchedulerServiceOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val formportalPeriodinterval = params.getAs[String]("formportalPeriodinterval")

    //println("formportalPeriodinterval: " + formportalPeriodinterval)
  }

  

  val comAdobeFormsCommonServiceImplDefaultDataProviderOperation = (apiOperation[ComAdobeFormsCommonServiceImplDefaultDataProviderInfo]("comAdobeFormsCommonServiceImplDefaultDataProvider")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("alloweddataFileLocations").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.forms.common.service.impl.DefaultDataProvider", operation(comAdobeFormsCommonServiceImplDefaultDataProviderOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val alloweddataFileLocationsString = params.getAs[String]("alloweddataFileLocations")
    val alloweddataFileLocations = if("multi" == "default" || "multi" == "csv") {
      alloweddataFileLocationsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("alloweddataFileLocations: " + alloweddataFileLocations)
  }

  

  val comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpOperation = (apiOperation[ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo]("comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("tempStorageConfig").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.forms.common.service.impl.FormsCommonConfigurationServiceImpl", operation(comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val tempStorageConfig = params.getAs[String]("tempStorageConfig")

    //println("tempStorageConfig: " + tempStorageConfig)
  }

  

  val comAdobeFormsCommonServletTempCleanUpTaskOperation = (apiOperation[ComAdobeFormsCommonServletTempCleanUpTaskInfo]("comAdobeFormsCommonServletTempCleanUpTask")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("schedulerPeriodexpression").description("").optional, queryParam[String]("duration for Temporary Storage").description("").optional, queryParam[String]("duration for Anonymous Storage").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.forms.common.servlet.TempCleanUpTask", operation(comAdobeFormsCommonServletTempCleanUpTaskOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val schedulerPeriodexpression = params.getAs[String]("schedulerPeriodexpression")

    //println("schedulerPeriodexpression: " + schedulerPeriodexpression)
            val duration for Temporary Storage = params.getAs[String]("duration for Temporary Storage")

    //println("duration for Temporary Storage: " + duration for Temporary Storage)
            val duration for Anonymous Storage = params.getAs[String]("duration for Anonymous Storage")

    //println("duration for Anonymous Storage: " + duration for Anonymous Storage)
  }

  

  val comAdobeGraniteAcpPlatformPlatformServletOperation = (apiOperation[ComAdobeGraniteAcpPlatformPlatformServletInfo]("comAdobeGraniteAcpPlatformPlatformServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("queryPeriodlimit").description("").optional, queryParam[List[String]]("filePeriodtypePeriodextensionPeriodmap").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.acp.platform.PlatformServlet", operation(comAdobeGraniteAcpPlatformPlatformServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val queryPeriodlimit = params.getAs[Int]("queryPeriodlimit")

    //println("queryPeriodlimit: " + queryPeriodlimit)
        val filePeriodtypePeriodextensionPeriodmapString = params.getAs[String]("filePeriodtypePeriodextensionPeriodmap")
    val filePeriodtypePeriodextensionPeriodmap = if("multi" == "default" || "multi" == "csv") {
      filePeriodtypePeriodextensionPeriodmapString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("filePeriodtypePeriodextensionPeriodmap: " + filePeriodtypePeriodextensionPeriodmap)
  }

  

  val comAdobeGraniteActivitystreamsImplActivityManagerImplOperation = (apiOperation[ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo]("comAdobeGraniteActivitystreamsImplActivityManagerImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("aggregatePeriodrelationships").description("").optional, queryParam[Boolean]("aggregatePerioddescendPeriodvirtual").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.activitystreams.impl.ActivityManagerImpl", operation(comAdobeGraniteActivitystreamsImplActivityManagerImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val aggregatePeriodrelationshipsString = params.getAs[String]("aggregatePeriodrelationships")
    val aggregatePeriodrelationships = if("multi" == "default" || "multi" == "csv") {
      aggregatePeriodrelationshipsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("aggregatePeriodrelationships: " + aggregatePeriodrelationships)
            val aggregatePerioddescendPeriodvirtual = params.getAs[Boolean]("aggregatePerioddescendPeriodvirtual")

    //println("aggregatePerioddescendPeriodvirtual: " + aggregatePerioddescendPeriodvirtual)
  }

  

  val comAdobeGraniteAnalyzerBaseSystemStatusServletOperation = (apiOperation[ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo]("comAdobeGraniteAnalyzerBaseSystemStatusServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("disabled").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.analyzer.base.SystemStatusServlet", operation(comAdobeGraniteAnalyzerBaseSystemStatusServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val disabled = params.getAs[Boolean]("disabled")

    //println("disabled: " + disabled)
  }

  

  val comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletOperation = (apiOperation[ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo]("comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("disabled").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.analyzer.scripts.compile.AllScriptsCompilerServlet", operation(comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val disabled = params.getAs[Boolean]("disabled")

    //println("disabled: " + disabled)
  }

  

  val comAdobeGraniteApicontrollerFilterResolverHookFactoryOperation = (apiOperation[ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo]("comAdobeGraniteApicontrollerFilterResolverHookFactory")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodcdnPeriodcdnRewriter").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodcloudConfigPeriodcomponents").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodcloudConfigPeriodcore").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodcloudConfigPeriodui").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodeditor").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodprojectsPeriodcore").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodprojectsPeriodwcmPeriodcore").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPerioduiPeriodcommons").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodwcmPeriodstyle").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodcqActivitymapIntegration").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodcqContexthubCommons").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodcqDtm").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodcqHealthcheck").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodcqMultisiteTargeting").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodcqPreUpgradeCleanup").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodcqProductInfoProvider").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodcqRestSites").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodcqSecurityHc").description("").optional, queryParam[String]("comPeriodadobePeriodcqPerioddamPeriodcqDamSvgHandler").description("").optional, queryParam[String]("comPeriodadobePeriodcqPerioddamPeriodcqScene7Imaging").description("").optional, queryParam[String]("comPeriodadobePeriodcqPerioddtmReactorPeriodcore").description("").optional, queryParam[String]("comPeriodadobePeriodcqPerioddtmReactorPeriodui").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodexpJspelResolver").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodinboxPeriodcqInbox").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodjsonSchemaParser").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodmediaPeriodcqMediaPublishingDpsFpCore").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodmobilePeriodcqMobileCaas").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodmobilePeriodcqMobileIndexBuilder").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodmobilePeriodcqMobilePhonegapBuild").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodmyspell").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodsamplePeriodwePeriodretailPeriodcore").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodscreensPeriodcomPeriodadobePeriodcqPeriodscreensPerioddcc").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodscreensPeriodcomPeriodadobePeriodcqPeriodscreensPeriodmqPeriodcore").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialAsProvider").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialBadgingBasicImpl").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialBadgingImpl").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialCalendarImpl").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialContentFragmentsImpl").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialEnablementImpl").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialGraphImpl").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialIdeationImpl").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialJcrProvider").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialMembersImpl").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialMsProvider").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialNotificationsChannelsWeb").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialNotificationsImpl").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialRdbProvider").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScfImpl").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScoringBasicImpl").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScoringImpl").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialServiceusersImpl").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialSrpImpl").description("").optional, queryParam[String]("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialUgcbaseImpl").description("").optional, queryParam[String]("comPeriodadobePerioddamPeriodcqDamCfmImpl").description("").optional, queryParam[String]("comPeriodadobePeriodformsPeriodfoundationFormsFoundationBase").description("").optional, queryParam[String]("comPeriodadobePeriodgranitePeriodapicontroller").description("").optional, queryParam[String]("comPeriodadobePeriodgranitePeriodassetPeriodcore").description("").optional, queryParam[String]("comPeriodadobePeriodgranitePeriodauthPeriodsso").description("").optional, queryParam[String]("comPeriodadobePeriodgranitePeriodbundlesPeriodhcPeriodimpl").description("").optional, queryParam[String]("comPeriodadobePeriodgranitePeriodcompatRouter").description("").optional, queryParam[String]("comPeriodadobePeriodgranitePeriodconf").description("").optional, queryParam[String]("comPeriodadobePeriodgranitePeriodconfPerioduiPeriodcore").description("").optional, queryParam[String]("comPeriodadobePeriodgranitePeriodcors").description("").optional, queryParam[String]("comPeriodadobePeriodgranitePeriodcrxExplorer").description("").optional, queryParam[String]("comPeriodadobePeriodgranitePeriodcrxdeLite").description("").optional, queryParam[String]("comPeriodadobePeriodgranitePeriodcryptoPeriodconfig").description("").optional, queryParam[String]("comPeriodadobePeriodgranitePeriodcryptoPeriodextension").description("").optional, queryParam[String]("comPeriodadobePeriodgranitePeriodcryptoPeriodfile").description("").optional, queryParam[String]("comPeriodadobePeriodgranitePeriodcryptoPeriodjcr").description("").optional, queryParam[String]("comPeriodadobePeriodgranitePeriodcsrf").description("").optional, queryParam[String]("comPeriodadobePeriodgranitePerioddistributionPeriodcore").description("").optional, queryParam[String]("comPeriodadobePeriodgranitePerioddropwizardPeriodmetrics").description("").optional, queryParam[String]("comPeriodadobePeriodgranitePeriodfragsPeriodimpl").description("").optional, queryParam[String]("comPeriodadobePeriodgranitePeriodgibson").description("").optional, queryParam[String]("comPeriodadobePeriodgranitePeriodinfocollector").description("").optional, queryParam[String]("comPeriodadobePeriodgranitePeriodinstallerPeriodfactoryPeriodpackages").description("").optional, queryParam[String]("comPeriodadobePeriodgranitePeriodjettyPeriodssl").description("").optional, queryParam[String]("comPeriodadobePeriodgranitePeriodjobsPeriodasync").description("").optional, queryParam[String]("comPeriodadobePeriodgranitePeriodmaintenancePeriodoak").description("").optional, queryParam[String]("comPeriodadobePeriodgranitePeriodmonitoringPeriodcore").description("").optional, queryParam[String]("comPeriodadobePeriodgranitePeriodqueries").description("").optional, queryParam[String]("comPeriodadobePeriodgranitePeriodreplicationPeriodhcPeriodimpl").description("").optional, queryParam[String]("comPeriodadobePeriodgranitePeriodrepositoryPeriodchecker").description("").optional, queryParam[String]("comPeriodadobePeriodgranitePeriodrepositoryPeriodhcPeriodimpl").description("").optional, queryParam[String]("comPeriodadobePeriodgranitePeriodrestPeriodassets").description("").optional, queryParam[String]("comPeriodadobePeriodgranitePeriodsecurityPeriodui").description("").optional, queryParam[String]("comPeriodadobePeriodgranitePeriodstartup").description("").optional, queryParam[String]("comPeriodadobePeriodgranitePeriodtagsoup").description("").optional, queryParam[String]("comPeriodadobePeriodgranitePeriodtaskmanagementPeriodcore").description("").optional, queryParam[String]("comPeriodadobePeriodgranitePeriodtaskmanagementPeriodworkflow").description("").optional, queryParam[String]("comPeriodadobePeriodgranitePerioduiPeriodclientlibsPeriodcompilerPeriodless").description("").optional, queryParam[String]("comPeriodadobePeriodgranitePerioduiPeriodclientlibsPeriodprocessorPeriodgcc").description("").optional, queryParam[String]("comPeriodadobePeriodgranitePeriodwebconsolePeriodplugins").description("").optional, queryParam[String]("comPeriodadobePeriodgranitePeriodworkflowPeriodconsole").description("").optional, queryParam[String]("comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodlinux").description("").optional, queryParam[String]("comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodmacosx").description("").optional, queryParam[String]("comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodwin").description("").optional, queryParam[String]("comPerioddayPeriodcommonsPeriodosgiPeriodwrapperPeriodsimpleJndi").description("").optional, queryParam[String]("comPerioddayPeriodcqPeriodcqAuthhandler").description("").optional, queryParam[String]("comPerioddayPeriodcqPeriodcqCompatConfigupdate").description("").optional, queryParam[String]("comPerioddayPeriodcqPeriodcqLicensebranding").description("").optional, queryParam[String]("comPerioddayPeriodcqPeriodcqNotifcationImpl").description("").optional, queryParam[String]("comPerioddayPeriodcqPeriodcqReplicationAudit").description("").optional, queryParam[String]("comPerioddayPeriodcqPeriodcqSearchExt").description("").optional, queryParam[String]("comPerioddayPeriodcqPerioddamPeriodcqDamAnnotationPrint").description("").optional, queryParam[String]("comPerioddayPeriodcqPerioddamPeriodcqDamAssetUsage").description("").optional, queryParam[String]("comPerioddayPeriodcqPerioddamPeriodcqDamS7dam").description("").optional, queryParam[String]("comPerioddayPeriodcqPerioddamPeriodcqDamSimilaritysearch").description("").optional, queryParam[String]("comPerioddayPeriodcqPerioddamPerioddamWebdavSupport").description("").optional, queryParam[String]("comPerioddayPeriodcqPeriodpreUpgradeTasks").description("").optional, queryParam[String]("comPerioddayPeriodcqPeriodreplicationPeriodextensions").description("").optional, queryParam[String]("comPerioddayPeriodcqPeriodwcmPeriodcqMsmCore").description("").optional, queryParam[String]("comPerioddayPeriodcqPeriodwcmPeriodcqWcmTranslation").description("").optional, queryParam[String]("dayCommonsJrawio").description("").optional, queryParam[String]("orgPeriodapachePeriodariesPeriodjmxPeriodwhiteboard").description("").optional, queryParam[String]("orgPeriodapachePeriodfelixPeriodhttpPeriodsslfilter").description("").optional, queryParam[String]("orgPeriodapachePeriodfelixPeriodorgPeriodapachePeriodfelixPeriodthreaddump").description("").optional, queryParam[String]("orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodds").description("").optional, queryParam[String]("orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodevent").description("").optional, queryParam[String]("orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodmemoryusage").description("").optional, queryParam[String]("orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodpackageadmin").description("").optional, queryParam[String]("orgPeriodapachePeriodjackrabbitPeriodoakAuthLdap").description("").optional, queryParam[String]("orgPeriodapachePeriodjackrabbitPeriodoakSegmentTar").description("").optional, queryParam[String]("orgPeriodapachePeriodjackrabbitPeriodoakSolrOsgi").description("").optional, queryParam[String]("orgPeriodapachePeriodslingPeriodbundleresourcePeriodimpl").description("").optional, queryParam[String]("orgPeriodapachePeriodslingPeriodcommonsPeriodfsclassloader").description("").optional, queryParam[String]("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodwebconsole").description("").optional, queryParam[String]("orgPeriodapachePeriodslingPerioddatasource").description("").optional, queryParam[String]("orgPeriodapachePeriodslingPerioddiscoveryPeriodbase").description("").optional, queryParam[String]("orgPeriodapachePeriodslingPerioddiscoveryPeriodoak").description("").optional, queryParam[String]("orgPeriodapachePeriodslingPerioddiscoveryPeriodsupport").description("").optional, queryParam[String]("orgPeriodapachePeriodslingPerioddistributionPeriodapi").description("").optional, queryParam[String]("orgPeriodapachePeriodslingPerioddistributionPeriodcore").description("").optional, queryParam[String]("orgPeriodapachePeriodslingPeriodextensionsPeriodwebconsolesecurityprovider").description("").optional, queryParam[String]("orgPeriodapachePeriodslingPeriodhcPeriodwebconsole").description("").optional, queryParam[String]("orgPeriodapachePeriodslingPeriodinstallerPeriodconsole").description("").optional, queryParam[String]("orgPeriodapachePeriodslingPeriodinstallerPeriodproviderPeriodfile").description("").optional, queryParam[String]("orgPeriodapachePeriodslingPeriodinstallerPeriodproviderPeriodjcr").description("").optional, queryParam[String]("orgPeriodapachePeriodslingPeriodjcrPerioddavex").description("").optional, queryParam[String]("orgPeriodapachePeriodslingPeriodjcrPeriodresourcesecurity").description("").optional, queryParam[String]("orgPeriodapachePeriodslingPeriodjmxPeriodprovider").description("").optional, queryParam[String]("orgPeriodapachePeriodslingPeriodlaunchpadPeriodinstaller").description("").optional, queryParam[String]("orgPeriodapachePeriodslingPeriodmodelsPeriodimpl").description("").optional, queryParam[String]("orgPeriodapachePeriodslingPeriodrepoinitPeriodparser").description("").optional, queryParam[String]("orgPeriodapachePeriodslingPeriodresourcePeriodinventory").description("").optional, queryParam[String]("orgPeriodapachePeriodslingPeriodresourceresolver").description("").optional, queryParam[String]("orgPeriodapachePeriodslingPeriodscriptingPeriodjavascript").description("").optional, queryParam[String]("orgPeriodapachePeriodslingPeriodscriptingPeriodjst").description("").optional, queryParam[String]("orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodjsPeriodprovider").description("").optional, queryParam[String]("orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodmodelsPeriodprovider").description("").optional, queryParam[String]("orgPeriodapachePeriodslingPeriodsecurity").description("").optional, queryParam[String]("orgPeriodapachePeriodslingPeriodservletsPeriodcompat").description("").optional, queryParam[String]("orgPeriodapachePeriodslingPeriodservletsPeriodget").description("").optional, queryParam[String]("orgPeriodapachePeriodslingPeriodstartupfilterPerioddisabler").description("").optional, queryParam[String]("orgPeriodapachePeriodslingPeriodtracer").description("").optional, queryParam[String]("wePeriodretailPeriodclientPeriodappPeriodcore").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.apicontroller.FilterResolverHookFactory", operation(comAdobeGraniteApicontrollerFilterResolverHookFactoryOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val comPeriodadobePeriodcqPeriodcdnPeriodcdnRewriter = params.getAs[String]("comPeriodadobePeriodcqPeriodcdnPeriodcdnRewriter")

    //println("comPeriodadobePeriodcqPeriodcdnPeriodcdnRewriter: " + comPeriodadobePeriodcqPeriodcdnPeriodcdnRewriter)
            val comPeriodadobePeriodcqPeriodcloudConfigPeriodcomponents = params.getAs[String]("comPeriodadobePeriodcqPeriodcloudConfigPeriodcomponents")

    //println("comPeriodadobePeriodcqPeriodcloudConfigPeriodcomponents: " + comPeriodadobePeriodcqPeriodcloudConfigPeriodcomponents)
            val comPeriodadobePeriodcqPeriodcloudConfigPeriodcore = params.getAs[String]("comPeriodadobePeriodcqPeriodcloudConfigPeriodcore")

    //println("comPeriodadobePeriodcqPeriodcloudConfigPeriodcore: " + comPeriodadobePeriodcqPeriodcloudConfigPeriodcore)
            val comPeriodadobePeriodcqPeriodcloudConfigPeriodui = params.getAs[String]("comPeriodadobePeriodcqPeriodcloudConfigPeriodui")

    //println("comPeriodadobePeriodcqPeriodcloudConfigPeriodui: " + comPeriodadobePeriodcqPeriodcloudConfigPeriodui)
            val comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodeditor = params.getAs[String]("comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodeditor")

    //println("comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodeditor: " + comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodeditor)
            val comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodprojectsPeriodcore = params.getAs[String]("comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodprojectsPeriodcore")

    //println("comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodprojectsPeriodcore: " + comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodprojectsPeriodcore)
            val comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodprojectsPeriodwcmPeriodcore = params.getAs[String]("comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodprojectsPeriodwcmPeriodcore")

    //println("comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodprojectsPeriodwcmPeriodcore: " + comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodprojectsPeriodwcmPeriodcore)
            val comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPerioduiPeriodcommons = params.getAs[String]("comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPerioduiPeriodcommons")

    //println("comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPerioduiPeriodcommons: " + comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPerioduiPeriodcommons)
            val comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodwcmPeriodstyle = params.getAs[String]("comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodwcmPeriodstyle")

    //println("comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodwcmPeriodstyle: " + comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodwcmPeriodstyle)
            val comPeriodadobePeriodcqPeriodcqActivitymapIntegration = params.getAs[String]("comPeriodadobePeriodcqPeriodcqActivitymapIntegration")

    //println("comPeriodadobePeriodcqPeriodcqActivitymapIntegration: " + comPeriodadobePeriodcqPeriodcqActivitymapIntegration)
            val comPeriodadobePeriodcqPeriodcqContexthubCommons = params.getAs[String]("comPeriodadobePeriodcqPeriodcqContexthubCommons")

    //println("comPeriodadobePeriodcqPeriodcqContexthubCommons: " + comPeriodadobePeriodcqPeriodcqContexthubCommons)
            val comPeriodadobePeriodcqPeriodcqDtm = params.getAs[String]("comPeriodadobePeriodcqPeriodcqDtm")

    //println("comPeriodadobePeriodcqPeriodcqDtm: " + comPeriodadobePeriodcqPeriodcqDtm)
            val comPeriodadobePeriodcqPeriodcqHealthcheck = params.getAs[String]("comPeriodadobePeriodcqPeriodcqHealthcheck")

    //println("comPeriodadobePeriodcqPeriodcqHealthcheck: " + comPeriodadobePeriodcqPeriodcqHealthcheck)
            val comPeriodadobePeriodcqPeriodcqMultisiteTargeting = params.getAs[String]("comPeriodadobePeriodcqPeriodcqMultisiteTargeting")

    //println("comPeriodadobePeriodcqPeriodcqMultisiteTargeting: " + comPeriodadobePeriodcqPeriodcqMultisiteTargeting)
            val comPeriodadobePeriodcqPeriodcqPreUpgradeCleanup = params.getAs[String]("comPeriodadobePeriodcqPeriodcqPreUpgradeCleanup")

    //println("comPeriodadobePeriodcqPeriodcqPreUpgradeCleanup: " + comPeriodadobePeriodcqPeriodcqPreUpgradeCleanup)
            val comPeriodadobePeriodcqPeriodcqProductInfoProvider = params.getAs[String]("comPeriodadobePeriodcqPeriodcqProductInfoProvider")

    //println("comPeriodadobePeriodcqPeriodcqProductInfoProvider: " + comPeriodadobePeriodcqPeriodcqProductInfoProvider)
            val comPeriodadobePeriodcqPeriodcqRestSites = params.getAs[String]("comPeriodadobePeriodcqPeriodcqRestSites")

    //println("comPeriodadobePeriodcqPeriodcqRestSites: " + comPeriodadobePeriodcqPeriodcqRestSites)
            val comPeriodadobePeriodcqPeriodcqSecurityHc = params.getAs[String]("comPeriodadobePeriodcqPeriodcqSecurityHc")

    //println("comPeriodadobePeriodcqPeriodcqSecurityHc: " + comPeriodadobePeriodcqPeriodcqSecurityHc)
            val comPeriodadobePeriodcqPerioddamPeriodcqDamSvgHandler = params.getAs[String]("comPeriodadobePeriodcqPerioddamPeriodcqDamSvgHandler")

    //println("comPeriodadobePeriodcqPerioddamPeriodcqDamSvgHandler: " + comPeriodadobePeriodcqPerioddamPeriodcqDamSvgHandler)
            val comPeriodadobePeriodcqPerioddamPeriodcqScene7Imaging = params.getAs[String]("comPeriodadobePeriodcqPerioddamPeriodcqScene7Imaging")

    //println("comPeriodadobePeriodcqPerioddamPeriodcqScene7Imaging: " + comPeriodadobePeriodcqPerioddamPeriodcqScene7Imaging)
            val comPeriodadobePeriodcqPerioddtmReactorPeriodcore = params.getAs[String]("comPeriodadobePeriodcqPerioddtmReactorPeriodcore")

    //println("comPeriodadobePeriodcqPerioddtmReactorPeriodcore: " + comPeriodadobePeriodcqPerioddtmReactorPeriodcore)
            val comPeriodadobePeriodcqPerioddtmReactorPeriodui = params.getAs[String]("comPeriodadobePeriodcqPerioddtmReactorPeriodui")

    //println("comPeriodadobePeriodcqPerioddtmReactorPeriodui: " + comPeriodadobePeriodcqPerioddtmReactorPeriodui)
            val comPeriodadobePeriodcqPeriodexpJspelResolver = params.getAs[String]("comPeriodadobePeriodcqPeriodexpJspelResolver")

    //println("comPeriodadobePeriodcqPeriodexpJspelResolver: " + comPeriodadobePeriodcqPeriodexpJspelResolver)
            val comPeriodadobePeriodcqPeriodinboxPeriodcqInbox = params.getAs[String]("comPeriodadobePeriodcqPeriodinboxPeriodcqInbox")

    //println("comPeriodadobePeriodcqPeriodinboxPeriodcqInbox: " + comPeriodadobePeriodcqPeriodinboxPeriodcqInbox)
            val comPeriodadobePeriodcqPeriodjsonSchemaParser = params.getAs[String]("comPeriodadobePeriodcqPeriodjsonSchemaParser")

    //println("comPeriodadobePeriodcqPeriodjsonSchemaParser: " + comPeriodadobePeriodcqPeriodjsonSchemaParser)
            val comPeriodadobePeriodcqPeriodmediaPeriodcqMediaPublishingDpsFpCore = params.getAs[String]("comPeriodadobePeriodcqPeriodmediaPeriodcqMediaPublishingDpsFpCore")

    //println("comPeriodadobePeriodcqPeriodmediaPeriodcqMediaPublishingDpsFpCore: " + comPeriodadobePeriodcqPeriodmediaPeriodcqMediaPublishingDpsFpCore)
            val comPeriodadobePeriodcqPeriodmobilePeriodcqMobileCaas = params.getAs[String]("comPeriodadobePeriodcqPeriodmobilePeriodcqMobileCaas")

    //println("comPeriodadobePeriodcqPeriodmobilePeriodcqMobileCaas: " + comPeriodadobePeriodcqPeriodmobilePeriodcqMobileCaas)
            val comPeriodadobePeriodcqPeriodmobilePeriodcqMobileIndexBuilder = params.getAs[String]("comPeriodadobePeriodcqPeriodmobilePeriodcqMobileIndexBuilder")

    //println("comPeriodadobePeriodcqPeriodmobilePeriodcqMobileIndexBuilder: " + comPeriodadobePeriodcqPeriodmobilePeriodcqMobileIndexBuilder)
            val comPeriodadobePeriodcqPeriodmobilePeriodcqMobilePhonegapBuild = params.getAs[String]("comPeriodadobePeriodcqPeriodmobilePeriodcqMobilePhonegapBuild")

    //println("comPeriodadobePeriodcqPeriodmobilePeriodcqMobilePhonegapBuild: " + comPeriodadobePeriodcqPeriodmobilePeriodcqMobilePhonegapBuild)
            val comPeriodadobePeriodcqPeriodmyspell = params.getAs[String]("comPeriodadobePeriodcqPeriodmyspell")

    //println("comPeriodadobePeriodcqPeriodmyspell: " + comPeriodadobePeriodcqPeriodmyspell)
            val comPeriodadobePeriodcqPeriodsamplePeriodwePeriodretailPeriodcore = params.getAs[String]("comPeriodadobePeriodcqPeriodsamplePeriodwePeriodretailPeriodcore")

    //println("comPeriodadobePeriodcqPeriodsamplePeriodwePeriodretailPeriodcore: " + comPeriodadobePeriodcqPeriodsamplePeriodwePeriodretailPeriodcore)
            val comPeriodadobePeriodcqPeriodscreensPeriodcomPeriodadobePeriodcqPeriodscreensPerioddcc = params.getAs[String]("comPeriodadobePeriodcqPeriodscreensPeriodcomPeriodadobePeriodcqPeriodscreensPerioddcc")

    //println("comPeriodadobePeriodcqPeriodscreensPeriodcomPeriodadobePeriodcqPeriodscreensPerioddcc: " + comPeriodadobePeriodcqPeriodscreensPeriodcomPeriodadobePeriodcqPeriodscreensPerioddcc)
            val comPeriodadobePeriodcqPeriodscreensPeriodcomPeriodadobePeriodcqPeriodscreensPeriodmqPeriodcore = params.getAs[String]("comPeriodadobePeriodcqPeriodscreensPeriodcomPeriodadobePeriodcqPeriodscreensPeriodmqPeriodcore")

    //println("comPeriodadobePeriodcqPeriodscreensPeriodcomPeriodadobePeriodcqPeriodscreensPeriodmqPeriodcore: " + comPeriodadobePeriodcqPeriodscreensPeriodcomPeriodadobePeriodcqPeriodscreensPeriodmqPeriodcore)
            val comPeriodadobePeriodcqPeriodsocialPeriodcqSocialAsProvider = params.getAs[String]("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialAsProvider")

    //println("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialAsProvider: " + comPeriodadobePeriodcqPeriodsocialPeriodcqSocialAsProvider)
            val comPeriodadobePeriodcqPeriodsocialPeriodcqSocialBadgingBasicImpl = params.getAs[String]("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialBadgingBasicImpl")

    //println("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialBadgingBasicImpl: " + comPeriodadobePeriodcqPeriodsocialPeriodcqSocialBadgingBasicImpl)
            val comPeriodadobePeriodcqPeriodsocialPeriodcqSocialBadgingImpl = params.getAs[String]("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialBadgingImpl")

    //println("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialBadgingImpl: " + comPeriodadobePeriodcqPeriodsocialPeriodcqSocialBadgingImpl)
            val comPeriodadobePeriodcqPeriodsocialPeriodcqSocialCalendarImpl = params.getAs[String]("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialCalendarImpl")

    //println("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialCalendarImpl: " + comPeriodadobePeriodcqPeriodsocialPeriodcqSocialCalendarImpl)
            val comPeriodadobePeriodcqPeriodsocialPeriodcqSocialContentFragmentsImpl = params.getAs[String]("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialContentFragmentsImpl")

    //println("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialContentFragmentsImpl: " + comPeriodadobePeriodcqPeriodsocialPeriodcqSocialContentFragmentsImpl)
            val comPeriodadobePeriodcqPeriodsocialPeriodcqSocialEnablementImpl = params.getAs[String]("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialEnablementImpl")

    //println("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialEnablementImpl: " + comPeriodadobePeriodcqPeriodsocialPeriodcqSocialEnablementImpl)
            val comPeriodadobePeriodcqPeriodsocialPeriodcqSocialGraphImpl = params.getAs[String]("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialGraphImpl")

    //println("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialGraphImpl: " + comPeriodadobePeriodcqPeriodsocialPeriodcqSocialGraphImpl)
            val comPeriodadobePeriodcqPeriodsocialPeriodcqSocialIdeationImpl = params.getAs[String]("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialIdeationImpl")

    //println("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialIdeationImpl: " + comPeriodadobePeriodcqPeriodsocialPeriodcqSocialIdeationImpl)
            val comPeriodadobePeriodcqPeriodsocialPeriodcqSocialJcrProvider = params.getAs[String]("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialJcrProvider")

    //println("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialJcrProvider: " + comPeriodadobePeriodcqPeriodsocialPeriodcqSocialJcrProvider)
            val comPeriodadobePeriodcqPeriodsocialPeriodcqSocialMembersImpl = params.getAs[String]("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialMembersImpl")

    //println("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialMembersImpl: " + comPeriodadobePeriodcqPeriodsocialPeriodcqSocialMembersImpl)
            val comPeriodadobePeriodcqPeriodsocialPeriodcqSocialMsProvider = params.getAs[String]("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialMsProvider")

    //println("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialMsProvider: " + comPeriodadobePeriodcqPeriodsocialPeriodcqSocialMsProvider)
            val comPeriodadobePeriodcqPeriodsocialPeriodcqSocialNotificationsChannelsWeb = params.getAs[String]("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialNotificationsChannelsWeb")

    //println("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialNotificationsChannelsWeb: " + comPeriodadobePeriodcqPeriodsocialPeriodcqSocialNotificationsChannelsWeb)
            val comPeriodadobePeriodcqPeriodsocialPeriodcqSocialNotificationsImpl = params.getAs[String]("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialNotificationsImpl")

    //println("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialNotificationsImpl: " + comPeriodadobePeriodcqPeriodsocialPeriodcqSocialNotificationsImpl)
            val comPeriodadobePeriodcqPeriodsocialPeriodcqSocialRdbProvider = params.getAs[String]("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialRdbProvider")

    //println("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialRdbProvider: " + comPeriodadobePeriodcqPeriodsocialPeriodcqSocialRdbProvider)
            val comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScfImpl = params.getAs[String]("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScfImpl")

    //println("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScfImpl: " + comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScfImpl)
            val comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScoringBasicImpl = params.getAs[String]("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScoringBasicImpl")

    //println("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScoringBasicImpl: " + comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScoringBasicImpl)
            val comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScoringImpl = params.getAs[String]("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScoringImpl")

    //println("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScoringImpl: " + comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScoringImpl)
            val comPeriodadobePeriodcqPeriodsocialPeriodcqSocialServiceusersImpl = params.getAs[String]("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialServiceusersImpl")

    //println("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialServiceusersImpl: " + comPeriodadobePeriodcqPeriodsocialPeriodcqSocialServiceusersImpl)
            val comPeriodadobePeriodcqPeriodsocialPeriodcqSocialSrpImpl = params.getAs[String]("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialSrpImpl")

    //println("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialSrpImpl: " + comPeriodadobePeriodcqPeriodsocialPeriodcqSocialSrpImpl)
            val comPeriodadobePeriodcqPeriodsocialPeriodcqSocialUgcbaseImpl = params.getAs[String]("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialUgcbaseImpl")

    //println("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialUgcbaseImpl: " + comPeriodadobePeriodcqPeriodsocialPeriodcqSocialUgcbaseImpl)
            val comPeriodadobePerioddamPeriodcqDamCfmImpl = params.getAs[String]("comPeriodadobePerioddamPeriodcqDamCfmImpl")

    //println("comPeriodadobePerioddamPeriodcqDamCfmImpl: " + comPeriodadobePerioddamPeriodcqDamCfmImpl)
            val comPeriodadobePeriodformsPeriodfoundationFormsFoundationBase = params.getAs[String]("comPeriodadobePeriodformsPeriodfoundationFormsFoundationBase")

    //println("comPeriodadobePeriodformsPeriodfoundationFormsFoundationBase: " + comPeriodadobePeriodformsPeriodfoundationFormsFoundationBase)
            val comPeriodadobePeriodgranitePeriodapicontroller = params.getAs[String]("comPeriodadobePeriodgranitePeriodapicontroller")

    //println("comPeriodadobePeriodgranitePeriodapicontroller: " + comPeriodadobePeriodgranitePeriodapicontroller)
            val comPeriodadobePeriodgranitePeriodassetPeriodcore = params.getAs[String]("comPeriodadobePeriodgranitePeriodassetPeriodcore")

    //println("comPeriodadobePeriodgranitePeriodassetPeriodcore: " + comPeriodadobePeriodgranitePeriodassetPeriodcore)
            val comPeriodadobePeriodgranitePeriodauthPeriodsso = params.getAs[String]("comPeriodadobePeriodgranitePeriodauthPeriodsso")

    //println("comPeriodadobePeriodgranitePeriodauthPeriodsso: " + comPeriodadobePeriodgranitePeriodauthPeriodsso)
            val comPeriodadobePeriodgranitePeriodbundlesPeriodhcPeriodimpl = params.getAs[String]("comPeriodadobePeriodgranitePeriodbundlesPeriodhcPeriodimpl")

    //println("comPeriodadobePeriodgranitePeriodbundlesPeriodhcPeriodimpl: " + comPeriodadobePeriodgranitePeriodbundlesPeriodhcPeriodimpl)
            val comPeriodadobePeriodgranitePeriodcompatRouter = params.getAs[String]("comPeriodadobePeriodgranitePeriodcompatRouter")

    //println("comPeriodadobePeriodgranitePeriodcompatRouter: " + comPeriodadobePeriodgranitePeriodcompatRouter)
            val comPeriodadobePeriodgranitePeriodconf = params.getAs[String]("comPeriodadobePeriodgranitePeriodconf")

    //println("comPeriodadobePeriodgranitePeriodconf: " + comPeriodadobePeriodgranitePeriodconf)
            val comPeriodadobePeriodgranitePeriodconfPerioduiPeriodcore = params.getAs[String]("comPeriodadobePeriodgranitePeriodconfPerioduiPeriodcore")

    //println("comPeriodadobePeriodgranitePeriodconfPerioduiPeriodcore: " + comPeriodadobePeriodgranitePeriodconfPerioduiPeriodcore)
            val comPeriodadobePeriodgranitePeriodcors = params.getAs[String]("comPeriodadobePeriodgranitePeriodcors")

    //println("comPeriodadobePeriodgranitePeriodcors: " + comPeriodadobePeriodgranitePeriodcors)
            val comPeriodadobePeriodgranitePeriodcrxExplorer = params.getAs[String]("comPeriodadobePeriodgranitePeriodcrxExplorer")

    //println("comPeriodadobePeriodgranitePeriodcrxExplorer: " + comPeriodadobePeriodgranitePeriodcrxExplorer)
            val comPeriodadobePeriodgranitePeriodcrxdeLite = params.getAs[String]("comPeriodadobePeriodgranitePeriodcrxdeLite")

    //println("comPeriodadobePeriodgranitePeriodcrxdeLite: " + comPeriodadobePeriodgranitePeriodcrxdeLite)
            val comPeriodadobePeriodgranitePeriodcryptoPeriodconfig = params.getAs[String]("comPeriodadobePeriodgranitePeriodcryptoPeriodconfig")

    //println("comPeriodadobePeriodgranitePeriodcryptoPeriodconfig: " + comPeriodadobePeriodgranitePeriodcryptoPeriodconfig)
            val comPeriodadobePeriodgranitePeriodcryptoPeriodextension = params.getAs[String]("comPeriodadobePeriodgranitePeriodcryptoPeriodextension")

    //println("comPeriodadobePeriodgranitePeriodcryptoPeriodextension: " + comPeriodadobePeriodgranitePeriodcryptoPeriodextension)
            val comPeriodadobePeriodgranitePeriodcryptoPeriodfile = params.getAs[String]("comPeriodadobePeriodgranitePeriodcryptoPeriodfile")

    //println("comPeriodadobePeriodgranitePeriodcryptoPeriodfile: " + comPeriodadobePeriodgranitePeriodcryptoPeriodfile)
            val comPeriodadobePeriodgranitePeriodcryptoPeriodjcr = params.getAs[String]("comPeriodadobePeriodgranitePeriodcryptoPeriodjcr")

    //println("comPeriodadobePeriodgranitePeriodcryptoPeriodjcr: " + comPeriodadobePeriodgranitePeriodcryptoPeriodjcr)
            val comPeriodadobePeriodgranitePeriodcsrf = params.getAs[String]("comPeriodadobePeriodgranitePeriodcsrf")

    //println("comPeriodadobePeriodgranitePeriodcsrf: " + comPeriodadobePeriodgranitePeriodcsrf)
            val comPeriodadobePeriodgranitePerioddistributionPeriodcore = params.getAs[String]("comPeriodadobePeriodgranitePerioddistributionPeriodcore")

    //println("comPeriodadobePeriodgranitePerioddistributionPeriodcore: " + comPeriodadobePeriodgranitePerioddistributionPeriodcore)
            val comPeriodadobePeriodgranitePerioddropwizardPeriodmetrics = params.getAs[String]("comPeriodadobePeriodgranitePerioddropwizardPeriodmetrics")

    //println("comPeriodadobePeriodgranitePerioddropwizardPeriodmetrics: " + comPeriodadobePeriodgranitePerioddropwizardPeriodmetrics)
            val comPeriodadobePeriodgranitePeriodfragsPeriodimpl = params.getAs[String]("comPeriodadobePeriodgranitePeriodfragsPeriodimpl")

    //println("comPeriodadobePeriodgranitePeriodfragsPeriodimpl: " + comPeriodadobePeriodgranitePeriodfragsPeriodimpl)
            val comPeriodadobePeriodgranitePeriodgibson = params.getAs[String]("comPeriodadobePeriodgranitePeriodgibson")

    //println("comPeriodadobePeriodgranitePeriodgibson: " + comPeriodadobePeriodgranitePeriodgibson)
            val comPeriodadobePeriodgranitePeriodinfocollector = params.getAs[String]("comPeriodadobePeriodgranitePeriodinfocollector")

    //println("comPeriodadobePeriodgranitePeriodinfocollector: " + comPeriodadobePeriodgranitePeriodinfocollector)
            val comPeriodadobePeriodgranitePeriodinstallerPeriodfactoryPeriodpackages = params.getAs[String]("comPeriodadobePeriodgranitePeriodinstallerPeriodfactoryPeriodpackages")

    //println("comPeriodadobePeriodgranitePeriodinstallerPeriodfactoryPeriodpackages: " + comPeriodadobePeriodgranitePeriodinstallerPeriodfactoryPeriodpackages)
            val comPeriodadobePeriodgranitePeriodjettyPeriodssl = params.getAs[String]("comPeriodadobePeriodgranitePeriodjettyPeriodssl")

    //println("comPeriodadobePeriodgranitePeriodjettyPeriodssl: " + comPeriodadobePeriodgranitePeriodjettyPeriodssl)
            val comPeriodadobePeriodgranitePeriodjobsPeriodasync = params.getAs[String]("comPeriodadobePeriodgranitePeriodjobsPeriodasync")

    //println("comPeriodadobePeriodgranitePeriodjobsPeriodasync: " + comPeriodadobePeriodgranitePeriodjobsPeriodasync)
            val comPeriodadobePeriodgranitePeriodmaintenancePeriodoak = params.getAs[String]("comPeriodadobePeriodgranitePeriodmaintenancePeriodoak")

    //println("comPeriodadobePeriodgranitePeriodmaintenancePeriodoak: " + comPeriodadobePeriodgranitePeriodmaintenancePeriodoak)
            val comPeriodadobePeriodgranitePeriodmonitoringPeriodcore = params.getAs[String]("comPeriodadobePeriodgranitePeriodmonitoringPeriodcore")

    //println("comPeriodadobePeriodgranitePeriodmonitoringPeriodcore: " + comPeriodadobePeriodgranitePeriodmonitoringPeriodcore)
            val comPeriodadobePeriodgranitePeriodqueries = params.getAs[String]("comPeriodadobePeriodgranitePeriodqueries")

    //println("comPeriodadobePeriodgranitePeriodqueries: " + comPeriodadobePeriodgranitePeriodqueries)
            val comPeriodadobePeriodgranitePeriodreplicationPeriodhcPeriodimpl = params.getAs[String]("comPeriodadobePeriodgranitePeriodreplicationPeriodhcPeriodimpl")

    //println("comPeriodadobePeriodgranitePeriodreplicationPeriodhcPeriodimpl: " + comPeriodadobePeriodgranitePeriodreplicationPeriodhcPeriodimpl)
            val comPeriodadobePeriodgranitePeriodrepositoryPeriodchecker = params.getAs[String]("comPeriodadobePeriodgranitePeriodrepositoryPeriodchecker")

    //println("comPeriodadobePeriodgranitePeriodrepositoryPeriodchecker: " + comPeriodadobePeriodgranitePeriodrepositoryPeriodchecker)
            val comPeriodadobePeriodgranitePeriodrepositoryPeriodhcPeriodimpl = params.getAs[String]("comPeriodadobePeriodgranitePeriodrepositoryPeriodhcPeriodimpl")

    //println("comPeriodadobePeriodgranitePeriodrepositoryPeriodhcPeriodimpl: " + comPeriodadobePeriodgranitePeriodrepositoryPeriodhcPeriodimpl)
            val comPeriodadobePeriodgranitePeriodrestPeriodassets = params.getAs[String]("comPeriodadobePeriodgranitePeriodrestPeriodassets")

    //println("comPeriodadobePeriodgranitePeriodrestPeriodassets: " + comPeriodadobePeriodgranitePeriodrestPeriodassets)
            val comPeriodadobePeriodgranitePeriodsecurityPeriodui = params.getAs[String]("comPeriodadobePeriodgranitePeriodsecurityPeriodui")

    //println("comPeriodadobePeriodgranitePeriodsecurityPeriodui: " + comPeriodadobePeriodgranitePeriodsecurityPeriodui)
            val comPeriodadobePeriodgranitePeriodstartup = params.getAs[String]("comPeriodadobePeriodgranitePeriodstartup")

    //println("comPeriodadobePeriodgranitePeriodstartup: " + comPeriodadobePeriodgranitePeriodstartup)
            val comPeriodadobePeriodgranitePeriodtagsoup = params.getAs[String]("comPeriodadobePeriodgranitePeriodtagsoup")

    //println("comPeriodadobePeriodgranitePeriodtagsoup: " + comPeriodadobePeriodgranitePeriodtagsoup)
            val comPeriodadobePeriodgranitePeriodtaskmanagementPeriodcore = params.getAs[String]("comPeriodadobePeriodgranitePeriodtaskmanagementPeriodcore")

    //println("comPeriodadobePeriodgranitePeriodtaskmanagementPeriodcore: " + comPeriodadobePeriodgranitePeriodtaskmanagementPeriodcore)
            val comPeriodadobePeriodgranitePeriodtaskmanagementPeriodworkflow = params.getAs[String]("comPeriodadobePeriodgranitePeriodtaskmanagementPeriodworkflow")

    //println("comPeriodadobePeriodgranitePeriodtaskmanagementPeriodworkflow: " + comPeriodadobePeriodgranitePeriodtaskmanagementPeriodworkflow)
            val comPeriodadobePeriodgranitePerioduiPeriodclientlibsPeriodcompilerPeriodless = params.getAs[String]("comPeriodadobePeriodgranitePerioduiPeriodclientlibsPeriodcompilerPeriodless")

    //println("comPeriodadobePeriodgranitePerioduiPeriodclientlibsPeriodcompilerPeriodless: " + comPeriodadobePeriodgranitePerioduiPeriodclientlibsPeriodcompilerPeriodless)
            val comPeriodadobePeriodgranitePerioduiPeriodclientlibsPeriodprocessorPeriodgcc = params.getAs[String]("comPeriodadobePeriodgranitePerioduiPeriodclientlibsPeriodprocessorPeriodgcc")

    //println("comPeriodadobePeriodgranitePerioduiPeriodclientlibsPeriodprocessorPeriodgcc: " + comPeriodadobePeriodgranitePerioduiPeriodclientlibsPeriodprocessorPeriodgcc)
            val comPeriodadobePeriodgranitePeriodwebconsolePeriodplugins = params.getAs[String]("comPeriodadobePeriodgranitePeriodwebconsolePeriodplugins")

    //println("comPeriodadobePeriodgranitePeriodwebconsolePeriodplugins: " + comPeriodadobePeriodgranitePeriodwebconsolePeriodplugins)
            val comPeriodadobePeriodgranitePeriodworkflowPeriodconsole = params.getAs[String]("comPeriodadobePeriodgranitePeriodworkflowPeriodconsole")

    //println("comPeriodadobePeriodgranitePeriodworkflowPeriodconsole: " + comPeriodadobePeriodgranitePeriodworkflowPeriodconsole)
            val comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodlinux = params.getAs[String]("comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodlinux")

    //println("comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodlinux: " + comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodlinux)
            val comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodmacosx = params.getAs[String]("comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodmacosx")

    //println("comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodmacosx: " + comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodmacosx)
            val comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodwin = params.getAs[String]("comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodwin")

    //println("comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodwin: " + comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodwin)
            val comPerioddayPeriodcommonsPeriodosgiPeriodwrapperPeriodsimpleJndi = params.getAs[String]("comPerioddayPeriodcommonsPeriodosgiPeriodwrapperPeriodsimpleJndi")

    //println("comPerioddayPeriodcommonsPeriodosgiPeriodwrapperPeriodsimpleJndi: " + comPerioddayPeriodcommonsPeriodosgiPeriodwrapperPeriodsimpleJndi)
            val comPerioddayPeriodcqPeriodcqAuthhandler = params.getAs[String]("comPerioddayPeriodcqPeriodcqAuthhandler")

    //println("comPerioddayPeriodcqPeriodcqAuthhandler: " + comPerioddayPeriodcqPeriodcqAuthhandler)
            val comPerioddayPeriodcqPeriodcqCompatConfigupdate = params.getAs[String]("comPerioddayPeriodcqPeriodcqCompatConfigupdate")

    //println("comPerioddayPeriodcqPeriodcqCompatConfigupdate: " + comPerioddayPeriodcqPeriodcqCompatConfigupdate)
            val comPerioddayPeriodcqPeriodcqLicensebranding = params.getAs[String]("comPerioddayPeriodcqPeriodcqLicensebranding")

    //println("comPerioddayPeriodcqPeriodcqLicensebranding: " + comPerioddayPeriodcqPeriodcqLicensebranding)
            val comPerioddayPeriodcqPeriodcqNotifcationImpl = params.getAs[String]("comPerioddayPeriodcqPeriodcqNotifcationImpl")

    //println("comPerioddayPeriodcqPeriodcqNotifcationImpl: " + comPerioddayPeriodcqPeriodcqNotifcationImpl)
            val comPerioddayPeriodcqPeriodcqReplicationAudit = params.getAs[String]("comPerioddayPeriodcqPeriodcqReplicationAudit")

    //println("comPerioddayPeriodcqPeriodcqReplicationAudit: " + comPerioddayPeriodcqPeriodcqReplicationAudit)
            val comPerioddayPeriodcqPeriodcqSearchExt = params.getAs[String]("comPerioddayPeriodcqPeriodcqSearchExt")

    //println("comPerioddayPeriodcqPeriodcqSearchExt: " + comPerioddayPeriodcqPeriodcqSearchExt)
            val comPerioddayPeriodcqPerioddamPeriodcqDamAnnotationPrint = params.getAs[String]("comPerioddayPeriodcqPerioddamPeriodcqDamAnnotationPrint")

    //println("comPerioddayPeriodcqPerioddamPeriodcqDamAnnotationPrint: " + comPerioddayPeriodcqPerioddamPeriodcqDamAnnotationPrint)
            val comPerioddayPeriodcqPerioddamPeriodcqDamAssetUsage = params.getAs[String]("comPerioddayPeriodcqPerioddamPeriodcqDamAssetUsage")

    //println("comPerioddayPeriodcqPerioddamPeriodcqDamAssetUsage: " + comPerioddayPeriodcqPerioddamPeriodcqDamAssetUsage)
            val comPerioddayPeriodcqPerioddamPeriodcqDamS7dam = params.getAs[String]("comPerioddayPeriodcqPerioddamPeriodcqDamS7dam")

    //println("comPerioddayPeriodcqPerioddamPeriodcqDamS7dam: " + comPerioddayPeriodcqPerioddamPeriodcqDamS7dam)
            val comPerioddayPeriodcqPerioddamPeriodcqDamSimilaritysearch = params.getAs[String]("comPerioddayPeriodcqPerioddamPeriodcqDamSimilaritysearch")

    //println("comPerioddayPeriodcqPerioddamPeriodcqDamSimilaritysearch: " + comPerioddayPeriodcqPerioddamPeriodcqDamSimilaritysearch)
            val comPerioddayPeriodcqPerioddamPerioddamWebdavSupport = params.getAs[String]("comPerioddayPeriodcqPerioddamPerioddamWebdavSupport")

    //println("comPerioddayPeriodcqPerioddamPerioddamWebdavSupport: " + comPerioddayPeriodcqPerioddamPerioddamWebdavSupport)
            val comPerioddayPeriodcqPeriodpreUpgradeTasks = params.getAs[String]("comPerioddayPeriodcqPeriodpreUpgradeTasks")

    //println("comPerioddayPeriodcqPeriodpreUpgradeTasks: " + comPerioddayPeriodcqPeriodpreUpgradeTasks)
            val comPerioddayPeriodcqPeriodreplicationPeriodextensions = params.getAs[String]("comPerioddayPeriodcqPeriodreplicationPeriodextensions")

    //println("comPerioddayPeriodcqPeriodreplicationPeriodextensions: " + comPerioddayPeriodcqPeriodreplicationPeriodextensions)
            val comPerioddayPeriodcqPeriodwcmPeriodcqMsmCore = params.getAs[String]("comPerioddayPeriodcqPeriodwcmPeriodcqMsmCore")

    //println("comPerioddayPeriodcqPeriodwcmPeriodcqMsmCore: " + comPerioddayPeriodcqPeriodwcmPeriodcqMsmCore)
            val comPerioddayPeriodcqPeriodwcmPeriodcqWcmTranslation = params.getAs[String]("comPerioddayPeriodcqPeriodwcmPeriodcqWcmTranslation")

    //println("comPerioddayPeriodcqPeriodwcmPeriodcqWcmTranslation: " + comPerioddayPeriodcqPeriodwcmPeriodcqWcmTranslation)
            val dayCommonsJrawio = params.getAs[String]("dayCommonsJrawio")

    //println("dayCommonsJrawio: " + dayCommonsJrawio)
            val orgPeriodapachePeriodariesPeriodjmxPeriodwhiteboard = params.getAs[String]("orgPeriodapachePeriodariesPeriodjmxPeriodwhiteboard")

    //println("orgPeriodapachePeriodariesPeriodjmxPeriodwhiteboard: " + orgPeriodapachePeriodariesPeriodjmxPeriodwhiteboard)
            val orgPeriodapachePeriodfelixPeriodhttpPeriodsslfilter = params.getAs[String]("orgPeriodapachePeriodfelixPeriodhttpPeriodsslfilter")

    //println("orgPeriodapachePeriodfelixPeriodhttpPeriodsslfilter: " + orgPeriodapachePeriodfelixPeriodhttpPeriodsslfilter)
            val orgPeriodapachePeriodfelixPeriodorgPeriodapachePeriodfelixPeriodthreaddump = params.getAs[String]("orgPeriodapachePeriodfelixPeriodorgPeriodapachePeriodfelixPeriodthreaddump")

    //println("orgPeriodapachePeriodfelixPeriodorgPeriodapachePeriodfelixPeriodthreaddump: " + orgPeriodapachePeriodfelixPeriodorgPeriodapachePeriodfelixPeriodthreaddump)
            val orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodds = params.getAs[String]("orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodds")

    //println("orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodds: " + orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodds)
            val orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodevent = params.getAs[String]("orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodevent")

    //println("orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodevent: " + orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodevent)
            val orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodmemoryusage = params.getAs[String]("orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodmemoryusage")

    //println("orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodmemoryusage: " + orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodmemoryusage)
            val orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodpackageadmin = params.getAs[String]("orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodpackageadmin")

    //println("orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodpackageadmin: " + orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodpackageadmin)
            val orgPeriodapachePeriodjackrabbitPeriodoakAuthLdap = params.getAs[String]("orgPeriodapachePeriodjackrabbitPeriodoakAuthLdap")

    //println("orgPeriodapachePeriodjackrabbitPeriodoakAuthLdap: " + orgPeriodapachePeriodjackrabbitPeriodoakAuthLdap)
            val orgPeriodapachePeriodjackrabbitPeriodoakSegmentTar = params.getAs[String]("orgPeriodapachePeriodjackrabbitPeriodoakSegmentTar")

    //println("orgPeriodapachePeriodjackrabbitPeriodoakSegmentTar: " + orgPeriodapachePeriodjackrabbitPeriodoakSegmentTar)
            val orgPeriodapachePeriodjackrabbitPeriodoakSolrOsgi = params.getAs[String]("orgPeriodapachePeriodjackrabbitPeriodoakSolrOsgi")

    //println("orgPeriodapachePeriodjackrabbitPeriodoakSolrOsgi: " + orgPeriodapachePeriodjackrabbitPeriodoakSolrOsgi)
            val orgPeriodapachePeriodslingPeriodbundleresourcePeriodimpl = params.getAs[String]("orgPeriodapachePeriodslingPeriodbundleresourcePeriodimpl")

    //println("orgPeriodapachePeriodslingPeriodbundleresourcePeriodimpl: " + orgPeriodapachePeriodslingPeriodbundleresourcePeriodimpl)
            val orgPeriodapachePeriodslingPeriodcommonsPeriodfsclassloader = params.getAs[String]("orgPeriodapachePeriodslingPeriodcommonsPeriodfsclassloader")

    //println("orgPeriodapachePeriodslingPeriodcommonsPeriodfsclassloader: " + orgPeriodapachePeriodslingPeriodcommonsPeriodfsclassloader)
            val orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodwebconsole = params.getAs[String]("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodwebconsole")

    //println("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodwebconsole: " + orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodwebconsole)
            val orgPeriodapachePeriodslingPerioddatasource = params.getAs[String]("orgPeriodapachePeriodslingPerioddatasource")

    //println("orgPeriodapachePeriodslingPerioddatasource: " + orgPeriodapachePeriodslingPerioddatasource)
            val orgPeriodapachePeriodslingPerioddiscoveryPeriodbase = params.getAs[String]("orgPeriodapachePeriodslingPerioddiscoveryPeriodbase")

    //println("orgPeriodapachePeriodslingPerioddiscoveryPeriodbase: " + orgPeriodapachePeriodslingPerioddiscoveryPeriodbase)
            val orgPeriodapachePeriodslingPerioddiscoveryPeriodoak = params.getAs[String]("orgPeriodapachePeriodslingPerioddiscoveryPeriodoak")

    //println("orgPeriodapachePeriodslingPerioddiscoveryPeriodoak: " + orgPeriodapachePeriodslingPerioddiscoveryPeriodoak)
            val orgPeriodapachePeriodslingPerioddiscoveryPeriodsupport = params.getAs[String]("orgPeriodapachePeriodslingPerioddiscoveryPeriodsupport")

    //println("orgPeriodapachePeriodslingPerioddiscoveryPeriodsupport: " + orgPeriodapachePeriodslingPerioddiscoveryPeriodsupport)
            val orgPeriodapachePeriodslingPerioddistributionPeriodapi = params.getAs[String]("orgPeriodapachePeriodslingPerioddistributionPeriodapi")

    //println("orgPeriodapachePeriodslingPerioddistributionPeriodapi: " + orgPeriodapachePeriodslingPerioddistributionPeriodapi)
            val orgPeriodapachePeriodslingPerioddistributionPeriodcore = params.getAs[String]("orgPeriodapachePeriodslingPerioddistributionPeriodcore")

    //println("orgPeriodapachePeriodslingPerioddistributionPeriodcore: " + orgPeriodapachePeriodslingPerioddistributionPeriodcore)
            val orgPeriodapachePeriodslingPeriodextensionsPeriodwebconsolesecurityprovider = params.getAs[String]("orgPeriodapachePeriodslingPeriodextensionsPeriodwebconsolesecurityprovider")

    //println("orgPeriodapachePeriodslingPeriodextensionsPeriodwebconsolesecurityprovider: " + orgPeriodapachePeriodslingPeriodextensionsPeriodwebconsolesecurityprovider)
            val orgPeriodapachePeriodslingPeriodhcPeriodwebconsole = params.getAs[String]("orgPeriodapachePeriodslingPeriodhcPeriodwebconsole")

    //println("orgPeriodapachePeriodslingPeriodhcPeriodwebconsole: " + orgPeriodapachePeriodslingPeriodhcPeriodwebconsole)
            val orgPeriodapachePeriodslingPeriodinstallerPeriodconsole = params.getAs[String]("orgPeriodapachePeriodslingPeriodinstallerPeriodconsole")

    //println("orgPeriodapachePeriodslingPeriodinstallerPeriodconsole: " + orgPeriodapachePeriodslingPeriodinstallerPeriodconsole)
            val orgPeriodapachePeriodslingPeriodinstallerPeriodproviderPeriodfile = params.getAs[String]("orgPeriodapachePeriodslingPeriodinstallerPeriodproviderPeriodfile")

    //println("orgPeriodapachePeriodslingPeriodinstallerPeriodproviderPeriodfile: " + orgPeriodapachePeriodslingPeriodinstallerPeriodproviderPeriodfile)
            val orgPeriodapachePeriodslingPeriodinstallerPeriodproviderPeriodjcr = params.getAs[String]("orgPeriodapachePeriodslingPeriodinstallerPeriodproviderPeriodjcr")

    //println("orgPeriodapachePeriodslingPeriodinstallerPeriodproviderPeriodjcr: " + orgPeriodapachePeriodslingPeriodinstallerPeriodproviderPeriodjcr)
            val orgPeriodapachePeriodslingPeriodjcrPerioddavex = params.getAs[String]("orgPeriodapachePeriodslingPeriodjcrPerioddavex")

    //println("orgPeriodapachePeriodslingPeriodjcrPerioddavex: " + orgPeriodapachePeriodslingPeriodjcrPerioddavex)
            val orgPeriodapachePeriodslingPeriodjcrPeriodresourcesecurity = params.getAs[String]("orgPeriodapachePeriodslingPeriodjcrPeriodresourcesecurity")

    //println("orgPeriodapachePeriodslingPeriodjcrPeriodresourcesecurity: " + orgPeriodapachePeriodslingPeriodjcrPeriodresourcesecurity)
            val orgPeriodapachePeriodslingPeriodjmxPeriodprovider = params.getAs[String]("orgPeriodapachePeriodslingPeriodjmxPeriodprovider")

    //println("orgPeriodapachePeriodslingPeriodjmxPeriodprovider: " + orgPeriodapachePeriodslingPeriodjmxPeriodprovider)
            val orgPeriodapachePeriodslingPeriodlaunchpadPeriodinstaller = params.getAs[String]("orgPeriodapachePeriodslingPeriodlaunchpadPeriodinstaller")

    //println("orgPeriodapachePeriodslingPeriodlaunchpadPeriodinstaller: " + orgPeriodapachePeriodslingPeriodlaunchpadPeriodinstaller)
            val orgPeriodapachePeriodslingPeriodmodelsPeriodimpl = params.getAs[String]("orgPeriodapachePeriodslingPeriodmodelsPeriodimpl")

    //println("orgPeriodapachePeriodslingPeriodmodelsPeriodimpl: " + orgPeriodapachePeriodslingPeriodmodelsPeriodimpl)
            val orgPeriodapachePeriodslingPeriodrepoinitPeriodparser = params.getAs[String]("orgPeriodapachePeriodslingPeriodrepoinitPeriodparser")

    //println("orgPeriodapachePeriodslingPeriodrepoinitPeriodparser: " + orgPeriodapachePeriodslingPeriodrepoinitPeriodparser)
            val orgPeriodapachePeriodslingPeriodresourcePeriodinventory = params.getAs[String]("orgPeriodapachePeriodslingPeriodresourcePeriodinventory")

    //println("orgPeriodapachePeriodslingPeriodresourcePeriodinventory: " + orgPeriodapachePeriodslingPeriodresourcePeriodinventory)
            val orgPeriodapachePeriodslingPeriodresourceresolver = params.getAs[String]("orgPeriodapachePeriodslingPeriodresourceresolver")

    //println("orgPeriodapachePeriodslingPeriodresourceresolver: " + orgPeriodapachePeriodslingPeriodresourceresolver)
            val orgPeriodapachePeriodslingPeriodscriptingPeriodjavascript = params.getAs[String]("orgPeriodapachePeriodslingPeriodscriptingPeriodjavascript")

    //println("orgPeriodapachePeriodslingPeriodscriptingPeriodjavascript: " + orgPeriodapachePeriodslingPeriodscriptingPeriodjavascript)
            val orgPeriodapachePeriodslingPeriodscriptingPeriodjst = params.getAs[String]("orgPeriodapachePeriodslingPeriodscriptingPeriodjst")

    //println("orgPeriodapachePeriodslingPeriodscriptingPeriodjst: " + orgPeriodapachePeriodslingPeriodscriptingPeriodjst)
            val orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodjsPeriodprovider = params.getAs[String]("orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodjsPeriodprovider")

    //println("orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodjsPeriodprovider: " + orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodjsPeriodprovider)
            val orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodmodelsPeriodprovider = params.getAs[String]("orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodmodelsPeriodprovider")

    //println("orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodmodelsPeriodprovider: " + orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodmodelsPeriodprovider)
            val orgPeriodapachePeriodslingPeriodsecurity = params.getAs[String]("orgPeriodapachePeriodslingPeriodsecurity")

    //println("orgPeriodapachePeriodslingPeriodsecurity: " + orgPeriodapachePeriodslingPeriodsecurity)
            val orgPeriodapachePeriodslingPeriodservletsPeriodcompat = params.getAs[String]("orgPeriodapachePeriodslingPeriodservletsPeriodcompat")

    //println("orgPeriodapachePeriodslingPeriodservletsPeriodcompat: " + orgPeriodapachePeriodslingPeriodservletsPeriodcompat)
            val orgPeriodapachePeriodslingPeriodservletsPeriodget = params.getAs[String]("orgPeriodapachePeriodslingPeriodservletsPeriodget")

    //println("orgPeriodapachePeriodslingPeriodservletsPeriodget: " + orgPeriodapachePeriodslingPeriodservletsPeriodget)
            val orgPeriodapachePeriodslingPeriodstartupfilterPerioddisabler = params.getAs[String]("orgPeriodapachePeriodslingPeriodstartupfilterPerioddisabler")

    //println("orgPeriodapachePeriodslingPeriodstartupfilterPerioddisabler: " + orgPeriodapachePeriodslingPeriodstartupfilterPerioddisabler)
            val orgPeriodapachePeriodslingPeriodtracer = params.getAs[String]("orgPeriodapachePeriodslingPeriodtracer")

    //println("orgPeriodapachePeriodslingPeriodtracer: " + orgPeriodapachePeriodslingPeriodtracer)
            val wePeriodretailPeriodclientPeriodappPeriodcore = params.getAs[String]("wePeriodretailPeriodclientPeriodappPeriodcore")

    //println("wePeriodretailPeriodclientPeriodappPeriodcore: " + wePeriodretailPeriodclientPeriodappPeriodcore)
  }

  

  val comAdobeGraniteAuthCertImplClientCertAuthHandlerOperation = (apiOperation[ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo]("comAdobeGraniteAuthCertImplClientCertAuthHandler")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("path").description("").optional, queryParam[Int]("servicePeriodranking").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.auth.cert.impl.ClientCertAuthHandler", operation(comAdobeGraniteAuthCertImplClientCertAuthHandlerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val path = params.getAs[String]("path")

    //println("path: " + path)
            val servicePeriodranking = params.getAs[Int]("servicePeriodranking")

    //println("servicePeriodranking: " + servicePeriodranking)
  }

  

  val comAdobeGraniteAuthImsOperation = (apiOperation[ComAdobeGraniteAuthImsInfo]("comAdobeGraniteAuthIms")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("configid").description("").optional, queryParam[String]("scope").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.auth.ims", operation(comAdobeGraniteAuthImsOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val configid = params.getAs[String]("configid")

    //println("configid: " + configid)
            val scope = params.getAs[String]("scope")

    //println("scope: " + scope)
  }

  

  val comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionOperation = (apiOperation[ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo]("comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("oauthPeriodproviderPeriodid").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.auth.ims.impl.ExternalUserIdMappingProviderExtension", operation(comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val oauthPeriodproviderPeriodid = params.getAs[String]("oauthPeriodproviderPeriodid")

    //println("oauthPeriodproviderPeriodid: " + oauthPeriodproviderPeriodid)
  }

  

  val comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplOperation = (apiOperation[ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo]("comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("authPeriodimsPeriodclientPeriodsecret").description("").optional, queryParam[String]("customizerPeriodtype").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSAccessTokenRequestCustomizerImpl", operation(comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val authPeriodimsPeriodclientPeriodsecret = params.getAs[String]("authPeriodimsPeriodclientPeriodsecret")

    //println("authPeriodimsPeriodclientPeriodsecret: " + authPeriodimsPeriodclientPeriodsecret)
            val customizerPeriodtype = params.getAs[String]("customizerPeriodtype")

    //println("customizerPeriodtype: " + customizerPeriodtype)
  }

  

  val comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorOperation = (apiOperation[ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo]("comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("oauthPeriodproviderPeriodid").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSInstanceCredentialsValidator", operation(comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val oauthPeriodproviderPeriodid = params.getAs[String]("oauthPeriodproviderPeriodid")

    //println("oauthPeriodproviderPeriodid: " + oauthPeriodproviderPeriodid)
  }

  

  val comAdobeGraniteAuthImsImplIMSProviderImplOperation = (apiOperation[ComAdobeGraniteAuthImsImplIMSProviderImplInfo]("comAdobeGraniteAuthImsImplIMSProviderImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("oauthPeriodproviderPeriodid").description("").optional, queryParam[String]("oauthPeriodproviderPeriodimsPeriodauthorizationPeriodurl").description("").optional, queryParam[String]("oauthPeriodproviderPeriodimsPeriodtokenPeriodurl").description("").optional, queryParam[String]("oauthPeriodproviderPeriodimsPeriodprofilePeriodurl").description("").optional, queryParam[List[String]]("oauthPeriodproviderPeriodimsPeriodextendedPerioddetailsPeriodurls").description("").optional, queryParam[String]("oauthPeriodproviderPeriodimsPeriodvalidatePeriodtokenPeriodurl").description("").optional, queryParam[String]("oauthPeriodproviderPeriodimsPeriodsessionPeriodproperty").description("").optional, queryParam[String]("oauthPeriodproviderPeriodimsPeriodservicePeriodtokenPeriodclientPeriodid").description("").optional, queryParam[String]("oauthPeriodproviderPeriodimsPeriodservicePeriodtokenPeriodclientPeriodsecret").description("").optional, queryParam[String]("oauthPeriodproviderPeriodimsPeriodservicePeriodtoken").description("").optional, queryParam[String]("imsPeriodorgPeriodref").description("").optional, queryParam[List[String]]("imsPeriodgroupPeriodmapping").description("").optional, queryParam[Boolean]("oauthPeriodproviderPeriodimsPeriodonlyPeriodlicensePeriodgroup").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSProviderImpl", operation(comAdobeGraniteAuthImsImplIMSProviderImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val oauthPeriodproviderPeriodid = params.getAs[String]("oauthPeriodproviderPeriodid")

    //println("oauthPeriodproviderPeriodid: " + oauthPeriodproviderPeriodid)
            val oauthPeriodproviderPeriodimsPeriodauthorizationPeriodurl = params.getAs[String]("oauthPeriodproviderPeriodimsPeriodauthorizationPeriodurl")

    //println("oauthPeriodproviderPeriodimsPeriodauthorizationPeriodurl: " + oauthPeriodproviderPeriodimsPeriodauthorizationPeriodurl)
            val oauthPeriodproviderPeriodimsPeriodtokenPeriodurl = params.getAs[String]("oauthPeriodproviderPeriodimsPeriodtokenPeriodurl")

    //println("oauthPeriodproviderPeriodimsPeriodtokenPeriodurl: " + oauthPeriodproviderPeriodimsPeriodtokenPeriodurl)
            val oauthPeriodproviderPeriodimsPeriodprofilePeriodurl = params.getAs[String]("oauthPeriodproviderPeriodimsPeriodprofilePeriodurl")

    //println("oauthPeriodproviderPeriodimsPeriodprofilePeriodurl: " + oauthPeriodproviderPeriodimsPeriodprofilePeriodurl)
        val oauthPeriodproviderPeriodimsPeriodextendedPerioddetailsPeriodurlsString = params.getAs[String]("oauthPeriodproviderPeriodimsPeriodextendedPerioddetailsPeriodurls")
    val oauthPeriodproviderPeriodimsPeriodextendedPerioddetailsPeriodurls = if("multi" == "default" || "multi" == "csv") {
      oauthPeriodproviderPeriodimsPeriodextendedPerioddetailsPeriodurlsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("oauthPeriodproviderPeriodimsPeriodextendedPerioddetailsPeriodurls: " + oauthPeriodproviderPeriodimsPeriodextendedPerioddetailsPeriodurls)
            val oauthPeriodproviderPeriodimsPeriodvalidatePeriodtokenPeriodurl = params.getAs[String]("oauthPeriodproviderPeriodimsPeriodvalidatePeriodtokenPeriodurl")

    //println("oauthPeriodproviderPeriodimsPeriodvalidatePeriodtokenPeriodurl: " + oauthPeriodproviderPeriodimsPeriodvalidatePeriodtokenPeriodurl)
            val oauthPeriodproviderPeriodimsPeriodsessionPeriodproperty = params.getAs[String]("oauthPeriodproviderPeriodimsPeriodsessionPeriodproperty")

    //println("oauthPeriodproviderPeriodimsPeriodsessionPeriodproperty: " + oauthPeriodproviderPeriodimsPeriodsessionPeriodproperty)
            val oauthPeriodproviderPeriodimsPeriodservicePeriodtokenPeriodclientPeriodid = params.getAs[String]("oauthPeriodproviderPeriodimsPeriodservicePeriodtokenPeriodclientPeriodid")

    //println("oauthPeriodproviderPeriodimsPeriodservicePeriodtokenPeriodclientPeriodid: " + oauthPeriodproviderPeriodimsPeriodservicePeriodtokenPeriodclientPeriodid)
            val oauthPeriodproviderPeriodimsPeriodservicePeriodtokenPeriodclientPeriodsecret = params.getAs[String]("oauthPeriodproviderPeriodimsPeriodservicePeriodtokenPeriodclientPeriodsecret")

    //println("oauthPeriodproviderPeriodimsPeriodservicePeriodtokenPeriodclientPeriodsecret: " + oauthPeriodproviderPeriodimsPeriodservicePeriodtokenPeriodclientPeriodsecret)
            val oauthPeriodproviderPeriodimsPeriodservicePeriodtoken = params.getAs[String]("oauthPeriodproviderPeriodimsPeriodservicePeriodtoken")

    //println("oauthPeriodproviderPeriodimsPeriodservicePeriodtoken: " + oauthPeriodproviderPeriodimsPeriodservicePeriodtoken)
            val imsPeriodorgPeriodref = params.getAs[String]("imsPeriodorgPeriodref")

    //println("imsPeriodorgPeriodref: " + imsPeriodorgPeriodref)
        val imsPeriodgroupPeriodmappingString = params.getAs[String]("imsPeriodgroupPeriodmapping")
    val imsPeriodgroupPeriodmapping = if("multi" == "default" || "multi" == "csv") {
      imsPeriodgroupPeriodmappingString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("imsPeriodgroupPeriodmapping: " + imsPeriodgroupPeriodmapping)
            val oauthPeriodproviderPeriodimsPeriodonlyPeriodlicensePeriodgroup = params.getAs[Boolean]("oauthPeriodproviderPeriodimsPeriodonlyPeriodlicensePeriodgroup")

    //println("oauthPeriodproviderPeriodimsPeriodonlyPeriodlicensePeriodgroup: " + oauthPeriodproviderPeriodimsPeriodonlyPeriodlicensePeriodgroup)
  }

  

  val comAdobeGraniteAuthImsImplImsConfigProviderImplOperation = (apiOperation[ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo]("comAdobeGraniteAuthImsImplImsConfigProviderImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("oauthPeriodconfigmanagerPeriodimsPeriodconfigid").description("").optional, queryParam[String]("imsPeriodowningEntity").description("").optional, queryParam[String]("aemPeriodinstanceId").description("").optional, queryParam[String]("imsPeriodserviceCode").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.auth.ims.impl.ImsConfigProviderImpl", operation(comAdobeGraniteAuthImsImplImsConfigProviderImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val oauthPeriodconfigmanagerPeriodimsPeriodconfigid = params.getAs[String]("oauthPeriodconfigmanagerPeriodimsPeriodconfigid")

    //println("oauthPeriodconfigmanagerPeriodimsPeriodconfigid: " + oauthPeriodconfigmanagerPeriodimsPeriodconfigid)
            val imsPeriodowningEntity = params.getAs[String]("imsPeriodowningEntity")

    //println("imsPeriodowningEntity: " + imsPeriodowningEntity)
            val aemPeriodinstanceId = params.getAs[String]("aemPeriodinstanceId")

    //println("aemPeriodinstanceId: " + aemPeriodinstanceId)
            val imsPeriodserviceCode = params.getAs[String]("imsPeriodserviceCode")

    //println("imsPeriodserviceCode: " + imsPeriodserviceCode)
  }

  

  val comAdobeGraniteAuthOauthAccesstokenProviderOperation = (apiOperation[ComAdobeGraniteAuthOauthAccesstokenProviderInfo]("comAdobeGraniteAuthOauthAccesstokenProvider")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("name").description("").optional, queryParam[String]("authPeriodtokenPeriodproviderPeriodtitle").description("").optional, queryParam[List[String]]("authPeriodtokenPeriodproviderPerioddefaultPeriodclaims").description("").optional, queryParam[String]("authPeriodtokenPeriodproviderPeriodendpoint").description("").optional, queryParam[String]("authPeriodaccessPeriodtokenPeriodrequest").description("").optional, queryParam[String]("authPeriodtokenPeriodproviderPeriodkeypairPeriodalias").description("").optional, queryParam[Int]("authPeriodtokenPeriodproviderPeriodconnPeriodtimeout").description("").optional, queryParam[Int]("authPeriodtokenPeriodproviderPeriodsoPeriodtimeout").description("").optional, queryParam[String]("authPeriodtokenPeriodproviderPeriodclientPeriodid").description("").optional, queryParam[String]("authPeriodtokenPeriodproviderPeriodscope").description("").optional, queryParam[Boolean]("authPeriodtokenPeriodproviderPeriodreusePeriodaccessPeriodtoken").description("").optional, queryParam[Boolean]("authPeriodtokenPeriodproviderPeriodrelaxedPeriodssl").description("").optional, queryParam[String]("tokenPeriodrequestPeriodcustomizerPeriodtype").description("").optional, queryParam[String]("authPeriodtokenPeriodvalidatorPeriodtype").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.auth.oauth.accesstoken.provider", operation(comAdobeGraniteAuthOauthAccesstokenProviderOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val name = params.getAs[String]("name")

    //println("name: " + name)
            val authPeriodtokenPeriodproviderPeriodtitle = params.getAs[String]("authPeriodtokenPeriodproviderPeriodtitle")

    //println("authPeriodtokenPeriodproviderPeriodtitle: " + authPeriodtokenPeriodproviderPeriodtitle)
        val authPeriodtokenPeriodproviderPerioddefaultPeriodclaimsString = params.getAs[String]("authPeriodtokenPeriodproviderPerioddefaultPeriodclaims")
    val authPeriodtokenPeriodproviderPerioddefaultPeriodclaims = if("multi" == "default" || "multi" == "csv") {
      authPeriodtokenPeriodproviderPerioddefaultPeriodclaimsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("authPeriodtokenPeriodproviderPerioddefaultPeriodclaims: " + authPeriodtokenPeriodproviderPerioddefaultPeriodclaims)
            val authPeriodtokenPeriodproviderPeriodendpoint = params.getAs[String]("authPeriodtokenPeriodproviderPeriodendpoint")

    //println("authPeriodtokenPeriodproviderPeriodendpoint: " + authPeriodtokenPeriodproviderPeriodendpoint)
            val authPeriodaccessPeriodtokenPeriodrequest = params.getAs[String]("authPeriodaccessPeriodtokenPeriodrequest")

    //println("authPeriodaccessPeriodtokenPeriodrequest: " + authPeriodaccessPeriodtokenPeriodrequest)
            val authPeriodtokenPeriodproviderPeriodkeypairPeriodalias = params.getAs[String]("authPeriodtokenPeriodproviderPeriodkeypairPeriodalias")

    //println("authPeriodtokenPeriodproviderPeriodkeypairPeriodalias: " + authPeriodtokenPeriodproviderPeriodkeypairPeriodalias)
            val authPeriodtokenPeriodproviderPeriodconnPeriodtimeout = params.getAs[Int]("authPeriodtokenPeriodproviderPeriodconnPeriodtimeout")

    //println("authPeriodtokenPeriodproviderPeriodconnPeriodtimeout: " + authPeriodtokenPeriodproviderPeriodconnPeriodtimeout)
            val authPeriodtokenPeriodproviderPeriodsoPeriodtimeout = params.getAs[Int]("authPeriodtokenPeriodproviderPeriodsoPeriodtimeout")

    //println("authPeriodtokenPeriodproviderPeriodsoPeriodtimeout: " + authPeriodtokenPeriodproviderPeriodsoPeriodtimeout)
            val authPeriodtokenPeriodproviderPeriodclientPeriodid = params.getAs[String]("authPeriodtokenPeriodproviderPeriodclientPeriodid")

    //println("authPeriodtokenPeriodproviderPeriodclientPeriodid: " + authPeriodtokenPeriodproviderPeriodclientPeriodid)
            val authPeriodtokenPeriodproviderPeriodscope = params.getAs[String]("authPeriodtokenPeriodproviderPeriodscope")

    //println("authPeriodtokenPeriodproviderPeriodscope: " + authPeriodtokenPeriodproviderPeriodscope)
            val authPeriodtokenPeriodproviderPeriodreusePeriodaccessPeriodtoken = params.getAs[Boolean]("authPeriodtokenPeriodproviderPeriodreusePeriodaccessPeriodtoken")

    //println("authPeriodtokenPeriodproviderPeriodreusePeriodaccessPeriodtoken: " + authPeriodtokenPeriodproviderPeriodreusePeriodaccessPeriodtoken)
            val authPeriodtokenPeriodproviderPeriodrelaxedPeriodssl = params.getAs[Boolean]("authPeriodtokenPeriodproviderPeriodrelaxedPeriodssl")

    //println("authPeriodtokenPeriodproviderPeriodrelaxedPeriodssl: " + authPeriodtokenPeriodproviderPeriodrelaxedPeriodssl)
            val tokenPeriodrequestPeriodcustomizerPeriodtype = params.getAs[String]("tokenPeriodrequestPeriodcustomizerPeriodtype")

    //println("tokenPeriodrequestPeriodcustomizerPeriodtype: " + tokenPeriodrequestPeriodcustomizerPeriodtype)
            val authPeriodtokenPeriodvalidatorPeriodtype = params.getAs[String]("authPeriodtokenPeriodvalidatorPeriodtype")

    //println("authPeriodtokenPeriodvalidatorPeriodtype: " + authPeriodtokenPeriodvalidatorPeriodtype)
  }

  

  val comAdobeGraniteAuthOauthImplBearerAuthenticationHandlerOperation = (apiOperation[ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo]("comAdobeGraniteAuthOauthImplBearerAuthenticationHandler")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("path").description("").optional, queryParam[List[String]]("oauthPeriodclientIdsPeriodallowed").description("").optional, queryParam[Boolean]("authPeriodbearerPeriodsyncPeriodims").description("").optional, queryParam[String]("authPeriodtokenRequestParameter").description("").optional, queryParam[String]("oauthPeriodbearerPeriodconfigid").description("").optional, queryParam[Boolean]("oauthPeriodjwtPeriodsupport").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.auth.oauth.impl.BearerAuthenticationHandler", operation(comAdobeGraniteAuthOauthImplBearerAuthenticationHandlerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val path = params.getAs[String]("path")

    //println("path: " + path)
        val oauthPeriodclientIdsPeriodallowedString = params.getAs[String]("oauthPeriodclientIdsPeriodallowed")
    val oauthPeriodclientIdsPeriodallowed = if("multi" == "default" || "multi" == "csv") {
      oauthPeriodclientIdsPeriodallowedString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("oauthPeriodclientIdsPeriodallowed: " + oauthPeriodclientIdsPeriodallowed)
            val authPeriodbearerPeriodsyncPeriodims = params.getAs[Boolean]("authPeriodbearerPeriodsyncPeriodims")

    //println("authPeriodbearerPeriodsyncPeriodims: " + authPeriodbearerPeriodsyncPeriodims)
            val authPeriodtokenRequestParameter = params.getAs[String]("authPeriodtokenRequestParameter")

    //println("authPeriodtokenRequestParameter: " + authPeriodtokenRequestParameter)
            val oauthPeriodbearerPeriodconfigid = params.getAs[String]("oauthPeriodbearerPeriodconfigid")

    //println("oauthPeriodbearerPeriodconfigid: " + oauthPeriodbearerPeriodconfigid)
            val oauthPeriodjwtPeriodsupport = params.getAs[Boolean]("oauthPeriodjwtPeriodsupport")

    //println("oauthPeriodjwtPeriodsupport: " + oauthPeriodjwtPeriodsupport)
  }

  

  val comAdobeGraniteAuthOauthImplDefaultTokenValidatorImplOperation = (apiOperation[ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo]("comAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("authPeriodtokenPeriodvalidatorPeriodtype").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.auth.oauth.impl.DefaultTokenValidatorImpl", operation(comAdobeGraniteAuthOauthImplDefaultTokenValidatorImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val authPeriodtokenPeriodvalidatorPeriodtype = params.getAs[String]("authPeriodtokenPeriodvalidatorPeriodtype")

    //println("authPeriodtokenPeriodvalidatorPeriodtype: " + authPeriodtokenPeriodvalidatorPeriodtype)
  }

  

  val comAdobeGraniteAuthOauthImplFacebookProviderImplOperation = (apiOperation[ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo]("comAdobeGraniteAuthOauthImplFacebookProviderImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("oauthPeriodproviderPeriodid").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.auth.oauth.impl.FacebookProviderImpl", operation(comAdobeGraniteAuthOauthImplFacebookProviderImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val oauthPeriodproviderPeriodid = params.getAs[String]("oauthPeriodproviderPeriodid")

    //println("oauthPeriodproviderPeriodid: " + oauthPeriodproviderPeriodid)
  }

  

  val comAdobeGraniteAuthOauthImplGithubProviderImplOperation = (apiOperation[ComAdobeGraniteAuthOauthImplGithubProviderImplInfo]("comAdobeGraniteAuthOauthImplGithubProviderImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("oauthPeriodproviderPeriodid").description("").optional, queryParam[String]("oauthPeriodproviderPeriodgithubPeriodauthorizationPeriodurl").description("").optional, queryParam[String]("oauthPeriodproviderPeriodgithubPeriodtokenPeriodurl").description("").optional, queryParam[String]("oauthPeriodproviderPeriodgithubPeriodprofilePeriodurl").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.auth.oauth.impl.GithubProviderImpl", operation(comAdobeGraniteAuthOauthImplGithubProviderImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val oauthPeriodproviderPeriodid = params.getAs[String]("oauthPeriodproviderPeriodid")

    //println("oauthPeriodproviderPeriodid: " + oauthPeriodproviderPeriodid)
            val oauthPeriodproviderPeriodgithubPeriodauthorizationPeriodurl = params.getAs[String]("oauthPeriodproviderPeriodgithubPeriodauthorizationPeriodurl")

    //println("oauthPeriodproviderPeriodgithubPeriodauthorizationPeriodurl: " + oauthPeriodproviderPeriodgithubPeriodauthorizationPeriodurl)
            val oauthPeriodproviderPeriodgithubPeriodtokenPeriodurl = params.getAs[String]("oauthPeriodproviderPeriodgithubPeriodtokenPeriodurl")

    //println("oauthPeriodproviderPeriodgithubPeriodtokenPeriodurl: " + oauthPeriodproviderPeriodgithubPeriodtokenPeriodurl)
            val oauthPeriodproviderPeriodgithubPeriodprofilePeriodurl = params.getAs[String]("oauthPeriodproviderPeriodgithubPeriodprofilePeriodurl")

    //println("oauthPeriodproviderPeriodgithubPeriodprofilePeriodurl: " + oauthPeriodproviderPeriodgithubPeriodprofilePeriodurl)
  }

  

  val comAdobeGraniteAuthOauthImplGraniteProviderOperation = (apiOperation[ComAdobeGraniteAuthOauthImplGraniteProviderInfo]("comAdobeGraniteAuthOauthImplGraniteProvider")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("oauthPeriodproviderPeriodid").description("").optional, queryParam[String]("oauthPeriodproviderPeriodgranitePeriodauthorizationPeriodurl").description("").optional, queryParam[String]("oauthPeriodproviderPeriodgranitePeriodtokenPeriodurl").description("").optional, queryParam[String]("oauthPeriodproviderPeriodgranitePeriodprofilePeriodurl").description("").optional, queryParam[String]("oauthPeriodproviderPeriodgranitePeriodextendedPerioddetailsPeriodurls").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.auth.oauth.impl.GraniteProvider", operation(comAdobeGraniteAuthOauthImplGraniteProviderOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val oauthPeriodproviderPeriodid = params.getAs[String]("oauthPeriodproviderPeriodid")

    //println("oauthPeriodproviderPeriodid: " + oauthPeriodproviderPeriodid)
            val oauthPeriodproviderPeriodgranitePeriodauthorizationPeriodurl = params.getAs[String]("oauthPeriodproviderPeriodgranitePeriodauthorizationPeriodurl")

    //println("oauthPeriodproviderPeriodgranitePeriodauthorizationPeriodurl: " + oauthPeriodproviderPeriodgranitePeriodauthorizationPeriodurl)
            val oauthPeriodproviderPeriodgranitePeriodtokenPeriodurl = params.getAs[String]("oauthPeriodproviderPeriodgranitePeriodtokenPeriodurl")

    //println("oauthPeriodproviderPeriodgranitePeriodtokenPeriodurl: " + oauthPeriodproviderPeriodgranitePeriodtokenPeriodurl)
            val oauthPeriodproviderPeriodgranitePeriodprofilePeriodurl = params.getAs[String]("oauthPeriodproviderPeriodgranitePeriodprofilePeriodurl")

    //println("oauthPeriodproviderPeriodgranitePeriodprofilePeriodurl: " + oauthPeriodproviderPeriodgranitePeriodprofilePeriodurl)
            val oauthPeriodproviderPeriodgranitePeriodextendedPerioddetailsPeriodurls = params.getAs[String]("oauthPeriodproviderPeriodgranitePeriodextendedPerioddetailsPeriodurls")

    //println("oauthPeriodproviderPeriodgranitePeriodextendedPerioddetailsPeriodurls: " + oauthPeriodproviderPeriodgranitePeriodextendedPerioddetailsPeriodurls)
  }

  

  val comAdobeGraniteAuthOauthImplHelperProviderConfigManagerOperation = (apiOperation[ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo]("comAdobeGraniteAuthOauthImplHelperProviderConfigManager")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("oauthPeriodcookiePeriodloginPeriodtimeout").description("").optional, queryParam[String]("oauthPeriodcookiePeriodmaxPeriodage").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManager", operation(comAdobeGraniteAuthOauthImplHelperProviderConfigManagerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val oauthPeriodcookiePeriodloginPeriodtimeout = params.getAs[String]("oauthPeriodcookiePeriodloginPeriodtimeout")

    //println("oauthPeriodcookiePeriodloginPeriodtimeout: " + oauthPeriodcookiePeriodloginPeriodtimeout)
            val oauthPeriodcookiePeriodmaxPeriodage = params.getAs[String]("oauthPeriodcookiePeriodmaxPeriodage")

    //println("oauthPeriodcookiePeriodmaxPeriodage: " + oauthPeriodcookiePeriodmaxPeriodage)
  }

  

  val comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalOperation = (apiOperation[ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo]("comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("oauthPeriodcookiePeriodloginPeriodtimeout").description("").optional, queryParam[String]("oauthPeriodcookiePeriodmaxPeriodage").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManagerInternal", operation(comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val oauthPeriodcookiePeriodloginPeriodtimeout = params.getAs[String]("oauthPeriodcookiePeriodloginPeriodtimeout")

    //println("oauthPeriodcookiePeriodloginPeriodtimeout: " + oauthPeriodcookiePeriodloginPeriodtimeout)
            val oauthPeriodcookiePeriodmaxPeriodage = params.getAs[String]("oauthPeriodcookiePeriodmaxPeriodage")

    //println("oauthPeriodcookiePeriodmaxPeriodage: " + oauthPeriodcookiePeriodmaxPeriodage)
  }

  

  val comAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerOperation = (apiOperation[ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo]("comAdobeGraniteAuthOauthImplOAuthAuthenticationHandler")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("path").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.auth.oauth.impl.OAuthAuthenticationHandler", operation(comAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val path = params.getAs[String]("path")

    //println("path: " + path)
  }

  

  val comAdobeGraniteAuthOauthImplTwitterProviderImplOperation = (apiOperation[ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo]("comAdobeGraniteAuthOauthImplTwitterProviderImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("oauthPeriodproviderPeriodid").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.auth.oauth.impl.TwitterProviderImpl", operation(comAdobeGraniteAuthOauthImplTwitterProviderImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val oauthPeriodproviderPeriodid = params.getAs[String]("oauthPeriodproviderPeriodid")

    //println("oauthPeriodproviderPeriodid: " + oauthPeriodproviderPeriodid)
  }

  

  val comAdobeGraniteAuthOauthProviderOperation = (apiOperation[ComAdobeGraniteAuthOauthProviderInfo]("comAdobeGraniteAuthOauthProvider")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("oauthPeriodconfigPeriodid").description("").optional, queryParam[String]("oauthPeriodclientPeriodid").description("").optional, queryParam[String]("oauthPeriodclientPeriodsecret").description("").optional, queryParam[List[String]]("oauthPeriodscope").description("").optional, queryParam[String]("oauthPeriodconfigPeriodproviderPeriodid").description("").optional, queryParam[Boolean]("oauthPeriodcreatePeriodusers").description("").optional, queryParam[String]("oauthPerioduseridPeriodproperty").description("").optional, queryParam[Boolean]("forcePeriodstrictPeriodusernamePeriodmatching").description("").optional, queryParam[Boolean]("oauthPeriodencodePerioduserids").description("").optional, queryParam[Boolean]("oauthPeriodhashPerioduserids").description("").optional, queryParam[String]("oauthPeriodcallBackUrl").description("").optional, queryParam[Boolean]("oauthPeriodaccessPeriodtokenPeriodpersist").description("").optional, queryParam[Boolean]("oauthPeriodaccessPeriodtokenPeriodpersistPeriodcookie").description("").optional, queryParam[Boolean]("oauthPeriodcsrfPeriodstatePeriodprotection").description("").optional, queryParam[Boolean]("oauthPeriodredirectPeriodrequestPeriodparams").description("").optional, queryParam[Boolean]("oauthPeriodconfigPeriodsiblingsPeriodallow").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.auth.oauth.provider", operation(comAdobeGraniteAuthOauthProviderOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val oauthPeriodconfigPeriodid = params.getAs[String]("oauthPeriodconfigPeriodid")

    //println("oauthPeriodconfigPeriodid: " + oauthPeriodconfigPeriodid)
            val oauthPeriodclientPeriodid = params.getAs[String]("oauthPeriodclientPeriodid")

    //println("oauthPeriodclientPeriodid: " + oauthPeriodclientPeriodid)
            val oauthPeriodclientPeriodsecret = params.getAs[String]("oauthPeriodclientPeriodsecret")

    //println("oauthPeriodclientPeriodsecret: " + oauthPeriodclientPeriodsecret)
        val oauthPeriodscopeString = params.getAs[String]("oauthPeriodscope")
    val oauthPeriodscope = if("multi" == "default" || "multi" == "csv") {
      oauthPeriodscopeString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("oauthPeriodscope: " + oauthPeriodscope)
            val oauthPeriodconfigPeriodproviderPeriodid = params.getAs[String]("oauthPeriodconfigPeriodproviderPeriodid")

    //println("oauthPeriodconfigPeriodproviderPeriodid: " + oauthPeriodconfigPeriodproviderPeriodid)
            val oauthPeriodcreatePeriodusers = params.getAs[Boolean]("oauthPeriodcreatePeriodusers")

    //println("oauthPeriodcreatePeriodusers: " + oauthPeriodcreatePeriodusers)
            val oauthPerioduseridPeriodproperty = params.getAs[String]("oauthPerioduseridPeriodproperty")

    //println("oauthPerioduseridPeriodproperty: " + oauthPerioduseridPeriodproperty)
            val forcePeriodstrictPeriodusernamePeriodmatching = params.getAs[Boolean]("forcePeriodstrictPeriodusernamePeriodmatching")

    //println("forcePeriodstrictPeriodusernamePeriodmatching: " + forcePeriodstrictPeriodusernamePeriodmatching)
            val oauthPeriodencodePerioduserids = params.getAs[Boolean]("oauthPeriodencodePerioduserids")

    //println("oauthPeriodencodePerioduserids: " + oauthPeriodencodePerioduserids)
            val oauthPeriodhashPerioduserids = params.getAs[Boolean]("oauthPeriodhashPerioduserids")

    //println("oauthPeriodhashPerioduserids: " + oauthPeriodhashPerioduserids)
            val oauthPeriodcallBackUrl = params.getAs[String]("oauthPeriodcallBackUrl")

    //println("oauthPeriodcallBackUrl: " + oauthPeriodcallBackUrl)
            val oauthPeriodaccessPeriodtokenPeriodpersist = params.getAs[Boolean]("oauthPeriodaccessPeriodtokenPeriodpersist")

    //println("oauthPeriodaccessPeriodtokenPeriodpersist: " + oauthPeriodaccessPeriodtokenPeriodpersist)
            val oauthPeriodaccessPeriodtokenPeriodpersistPeriodcookie = params.getAs[Boolean]("oauthPeriodaccessPeriodtokenPeriodpersistPeriodcookie")

    //println("oauthPeriodaccessPeriodtokenPeriodpersistPeriodcookie: " + oauthPeriodaccessPeriodtokenPeriodpersistPeriodcookie)
            val oauthPeriodcsrfPeriodstatePeriodprotection = params.getAs[Boolean]("oauthPeriodcsrfPeriodstatePeriodprotection")

    //println("oauthPeriodcsrfPeriodstatePeriodprotection: " + oauthPeriodcsrfPeriodstatePeriodprotection)
            val oauthPeriodredirectPeriodrequestPeriodparams = params.getAs[Boolean]("oauthPeriodredirectPeriodrequestPeriodparams")

    //println("oauthPeriodredirectPeriodrequestPeriodparams: " + oauthPeriodredirectPeriodrequestPeriodparams)
            val oauthPeriodconfigPeriodsiblingsPeriodallow = params.getAs[Boolean]("oauthPeriodconfigPeriodsiblingsPeriodallow")

    //println("oauthPeriodconfigPeriodsiblingsPeriodallow: " + oauthPeriodconfigPeriodsiblingsPeriodallow)
  }

  

  val comAdobeGraniteAuthRequirementImplDefaultRequirementHandlerOperation = (apiOperation[ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo]("comAdobeGraniteAuthRequirementImplDefaultRequirementHandler")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("supportedPaths").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.auth.requirement.impl.DefaultRequirementHandler", operation(comAdobeGraniteAuthRequirementImplDefaultRequirementHandlerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val supportedPathsString = params.getAs[String]("supportedPaths")
    val supportedPaths = if("multi" == "default" || "multi" == "csv") {
      supportedPathsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("supportedPaths: " + supportedPaths)
  }

  

  val comAdobeGraniteAuthSamlSamlAuthenticationHandlerOperation = (apiOperation[ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo]("comAdobeGraniteAuthSamlSamlAuthenticationHandler")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("path").description("").optional, queryParam[Int]("servicePeriodranking").description("").optional, queryParam[String]("idpUrl").description("").optional, queryParam[String]("idpCertAlias").description("").optional, queryParam[Boolean]("idpHttpRedirect").description("").optional, queryParam[String]("serviceProviderEntityId").description("").optional, queryParam[String]("assertionConsumerServiceURL").description("").optional, queryParam[String]("spPrivateKeyAlias").description("").optional, queryParam[String]("keyStorePassword").description("").optional, queryParam[String]("defaultRedirectUrl").description("").optional, queryParam[String]("userIDAttribute").description("").optional, queryParam[Boolean]("useEncryption").description("").optional, queryParam[Boolean]("createUser").description("").optional, queryParam[String]("userIntermediatePath").description("").optional, queryParam[Boolean]("addGroupMemberships").description("").optional, queryParam[String]("groupMembershipAttribute").description("").optional, queryParam[List[String]]("defaultGroups").description("").optional, queryParam[String]("nameIdFormat").description("").optional, queryParam[List[String]]("synchronizeAttributes").description("").optional, queryParam[Boolean]("handleLogout").description("").optional, queryParam[String]("logoutUrl").description("").optional, queryParam[Int]("clockTolerance").description("").optional, queryParam[String]("digestMethod").description("").optional, queryParam[String]("signatureMethod").description("").optional, queryParam[String]("identitySyncType").description("").optional, queryParam[String]("idpIdentifier").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler", operation(comAdobeGraniteAuthSamlSamlAuthenticationHandlerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val pathString = params.getAs[String]("path")
    val path = if("multi" == "default" || "multi" == "csv") {
      pathString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("path: " + path)
            val servicePeriodranking = params.getAs[Int]("servicePeriodranking")

    //println("servicePeriodranking: " + servicePeriodranking)
            val idpUrl = params.getAs[String]("idpUrl")

    //println("idpUrl: " + idpUrl)
            val idpCertAlias = params.getAs[String]("idpCertAlias")

    //println("idpCertAlias: " + idpCertAlias)
            val idpHttpRedirect = params.getAs[Boolean]("idpHttpRedirect")

    //println("idpHttpRedirect: " + idpHttpRedirect)
            val serviceProviderEntityId = params.getAs[String]("serviceProviderEntityId")

    //println("serviceProviderEntityId: " + serviceProviderEntityId)
            val assertionConsumerServiceURL = params.getAs[String]("assertionConsumerServiceURL")

    //println("assertionConsumerServiceURL: " + assertionConsumerServiceURL)
            val spPrivateKeyAlias = params.getAs[String]("spPrivateKeyAlias")

    //println("spPrivateKeyAlias: " + spPrivateKeyAlias)
            val keyStorePassword = params.getAs[String]("keyStorePassword")

    //println("keyStorePassword: " + keyStorePassword)
            val defaultRedirectUrl = params.getAs[String]("defaultRedirectUrl")

    //println("defaultRedirectUrl: " + defaultRedirectUrl)
            val userIDAttribute = params.getAs[String]("userIDAttribute")

    //println("userIDAttribute: " + userIDAttribute)
            val useEncryption = params.getAs[Boolean]("useEncryption")

    //println("useEncryption: " + useEncryption)
            val createUser = params.getAs[Boolean]("createUser")

    //println("createUser: " + createUser)
            val userIntermediatePath = params.getAs[String]("userIntermediatePath")

    //println("userIntermediatePath: " + userIntermediatePath)
            val addGroupMemberships = params.getAs[Boolean]("addGroupMemberships")

    //println("addGroupMemberships: " + addGroupMemberships)
            val groupMembershipAttribute = params.getAs[String]("groupMembershipAttribute")

    //println("groupMembershipAttribute: " + groupMembershipAttribute)
        val defaultGroupsString = params.getAs[String]("defaultGroups")
    val defaultGroups = if("multi" == "default" || "multi" == "csv") {
      defaultGroupsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("defaultGroups: " + defaultGroups)
            val nameIdFormat = params.getAs[String]("nameIdFormat")

    //println("nameIdFormat: " + nameIdFormat)
        val synchronizeAttributesString = params.getAs[String]("synchronizeAttributes")
    val synchronizeAttributes = if("multi" == "default" || "multi" == "csv") {
      synchronizeAttributesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("synchronizeAttributes: " + synchronizeAttributes)
            val handleLogout = params.getAs[Boolean]("handleLogout")

    //println("handleLogout: " + handleLogout)
            val logoutUrl = params.getAs[String]("logoutUrl")

    //println("logoutUrl: " + logoutUrl)
            val clockTolerance = params.getAs[Int]("clockTolerance")

    //println("clockTolerance: " + clockTolerance)
            val digestMethod = params.getAs[String]("digestMethod")

    //println("digestMethod: " + digestMethod)
            val signatureMethod = params.getAs[String]("signatureMethod")

    //println("signatureMethod: " + signatureMethod)
            val identitySyncType = params.getAs[String]("identitySyncType")

    //println("identitySyncType: " + identitySyncType)
            val idpIdentifier = params.getAs[String]("idpIdentifier")

    //println("idpIdentifier: " + idpIdentifier)
  }

  

  val comAdobeGraniteAuthSsoImplSsoAuthenticationHandlerOperation = (apiOperation[ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo]("comAdobeGraniteAuthSsoImplSsoAuthenticationHandler")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("path").description("").optional, queryParam[Int]("servicePeriodranking").description("").optional, queryParam[String]("jaasPeriodcontrolFlag").description("").optional, queryParam[String]("jaasPeriodrealmName").description("").optional, queryParam[Int]("jaasPeriodranking").description("").optional, queryParam[List[String]]("headers").description("").optional, queryParam[List[String]]("cookies").description("").optional, queryParam[List[String]]("parameters").description("").optional, queryParam[List[String]]("usermap").description("").optional, queryParam[String]("format").description("").optional, queryParam[String]("trustedCredentialsAttribute").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.auth.sso.impl.SsoAuthenticationHandler", operation(comAdobeGraniteAuthSsoImplSsoAuthenticationHandlerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val path = params.getAs[String]("path")

    //println("path: " + path)
            val servicePeriodranking = params.getAs[Int]("servicePeriodranking")

    //println("servicePeriodranking: " + servicePeriodranking)
            val jaasPeriodcontrolFlag = params.getAs[String]("jaasPeriodcontrolFlag")

    //println("jaasPeriodcontrolFlag: " + jaasPeriodcontrolFlag)
            val jaasPeriodrealmName = params.getAs[String]("jaasPeriodrealmName")

    //println("jaasPeriodrealmName: " + jaasPeriodrealmName)
            val jaasPeriodranking = params.getAs[Int]("jaasPeriodranking")

    //println("jaasPeriodranking: " + jaasPeriodranking)
        val headersString = params.getAs[String]("headers")
    val headers = if("multi" == "default" || "multi" == "csv") {
      headersString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("headers: " + headers)
        val cookiesString = params.getAs[String]("cookies")
    val cookies = if("multi" == "default" || "multi" == "csv") {
      cookiesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cookies: " + cookies)
        val parametersString = params.getAs[String]("parameters")
    val parameters = if("multi" == "default" || "multi" == "csv") {
      parametersString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("parameters: " + parameters)
        val usermapString = params.getAs[String]("usermap")
    val usermap = if("multi" == "default" || "multi" == "csv") {
      usermapString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("usermap: " + usermap)
            val format = params.getAs[String]("format")

    //println("format: " + format)
            val trustedCredentialsAttribute = params.getAs[String]("trustedCredentialsAttribute")

    //println("trustedCredentialsAttribute: " + trustedCredentialsAttribute)
  }

  

  val comAdobeGraniteBundlesHcImplCodeCacheHealthCheckOperation = (apiOperation[ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo]("comAdobeGraniteBundlesHcImplCodeCacheHealthCheck")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("hcPeriodtags").description("").optional, queryParam[Int]("minimumPeriodcodePeriodcachePeriodsize").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.bundles.hc.impl.CodeCacheHealthCheck", operation(comAdobeGraniteBundlesHcImplCodeCacheHealthCheckOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val hcPeriodtagsString = params.getAs[String]("hcPeriodtags")
    val hcPeriodtags = if("multi" == "default" || "multi" == "csv") {
      hcPeriodtagsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("hcPeriodtags: " + hcPeriodtags)
            val minimumPeriodcodePeriodcachePeriodsize = params.getAs[Int]("minimumPeriodcodePeriodcachePeriodsize")

    //println("minimumPeriodcodePeriodcachePeriodsize: " + minimumPeriodcodePeriodcachePeriodsize)
  }

  

  val comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckOperation = (apiOperation[ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo]("comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("hcPeriodtags").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.bundles.hc.impl.CrxdeSupportBundleHealthCheck", operation(comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val hcPeriodtagsString = params.getAs[String]("hcPeriodtags")
    val hcPeriodtags = if("multi" == "default" || "multi" == "csv") {
      hcPeriodtagsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("hcPeriodtags: " + hcPeriodtags)
  }

  

  val comAdobeGraniteBundlesHcImplDavExBundleHealthCheckOperation = (apiOperation[ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo]("comAdobeGraniteBundlesHcImplDavExBundleHealthCheck")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("hcPeriodtags").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.bundles.hc.impl.DavExBundleHealthCheck", operation(comAdobeGraniteBundlesHcImplDavExBundleHealthCheckOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val hcPeriodtagsString = params.getAs[String]("hcPeriodtags")
    val hcPeriodtags = if("multi" == "default" || "multi" == "csv") {
      hcPeriodtagsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("hcPeriodtags: " + hcPeriodtags)
  }

  

  val comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckOperation = (apiOperation[ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo]("comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("hcPeriodtags").description("").optional, queryParam[List[String]]("ignoredPeriodbundles").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.bundles.hc.impl.InactiveBundlesHealthCheck", operation(comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val hcPeriodtagsString = params.getAs[String]("hcPeriodtags")
    val hcPeriodtags = if("multi" == "default" || "multi" == "csv") {
      hcPeriodtagsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("hcPeriodtags: " + hcPeriodtags)
        val ignoredPeriodbundlesString = params.getAs[String]("ignoredPeriodbundles")
    val ignoredPeriodbundles = if("multi" == "default" || "multi" == "csv") {
      ignoredPeriodbundlesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("ignoredPeriodbundles: " + ignoredPeriodbundles)
  }

  

  val comAdobeGraniteBundlesHcImplJobsHealthCheckOperation = (apiOperation[ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo]("comAdobeGraniteBundlesHcImplJobsHealthCheck")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("hcPeriodtags").description("").optional, queryParam[Int]("maxPeriodqueuedPeriodjobs").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.bundles.hc.impl.JobsHealthCheck", operation(comAdobeGraniteBundlesHcImplJobsHealthCheckOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val hcPeriodtagsString = params.getAs[String]("hcPeriodtags")
    val hcPeriodtags = if("multi" == "default" || "multi" == "csv") {
      hcPeriodtagsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("hcPeriodtags: " + hcPeriodtags)
            val maxPeriodqueuedPeriodjobs = params.getAs[Int]("maxPeriodqueuedPeriodjobs")

    //println("maxPeriodqueuedPeriodjobs: " + maxPeriodqueuedPeriodjobs)
  }

  

  val comAdobeGraniteBundlesHcImplSlingGetServletHealthCheckOperation = (apiOperation[ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo]("comAdobeGraniteBundlesHcImplSlingGetServletHealthCheck")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("hcPeriodtags").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingGetServletHealthCheck", operation(comAdobeGraniteBundlesHcImplSlingGetServletHealthCheckOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val hcPeriodtagsString = params.getAs[String]("hcPeriodtags")
    val hcPeriodtags = if("multi" == "default" || "multi" == "csv") {
      hcPeriodtagsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("hcPeriodtags: " + hcPeriodtags)
  }

  

  val comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckOperation = (apiOperation[ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo]("comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("hcPeriodtags").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJavaScriptHandlerHealthCheck", operation(comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val hcPeriodtagsString = params.getAs[String]("hcPeriodtags")
    val hcPeriodtags = if("multi" == "default" || "multi" == "csv") {
      hcPeriodtagsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("hcPeriodtags: " + hcPeriodtags)
  }

  

  val comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckOperation = (apiOperation[ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo]("comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("hcPeriodtags").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJspScriptHandlerHealthCheck", operation(comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val hcPeriodtagsString = params.getAs[String]("hcPeriodtags")
    val hcPeriodtags = if("multi" == "default" || "multi" == "csv") {
      hcPeriodtagsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("hcPeriodtags: " + hcPeriodtags)
  }

  

  val comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckOperation = (apiOperation[ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo]("comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("hcPeriodtags").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingReferrerFilterHealthCheck", operation(comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val hcPeriodtagsString = params.getAs[String]("hcPeriodtags")
    val hcPeriodtags = if("multi" == "default" || "multi" == "csv") {
      hcPeriodtagsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("hcPeriodtags: " + hcPeriodtags)
  }

  

  val comAdobeGraniteBundlesHcImplWebDavBundleHealthCheckOperation = (apiOperation[ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo]("comAdobeGraniteBundlesHcImplWebDavBundleHealthCheck")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("hcPeriodtags").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.bundles.hc.impl.WebDavBundleHealthCheck", operation(comAdobeGraniteBundlesHcImplWebDavBundleHealthCheckOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val hcPeriodtagsString = params.getAs[String]("hcPeriodtags")
    val hcPeriodtags = if("multi" == "default" || "multi" == "csv") {
      hcPeriodtagsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("hcPeriodtags: " + hcPeriodtags)
  }

  

  val comAdobeGraniteCommentsInternalCommentReplicationContentFilterFacOperation = (apiOperation[ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo]("comAdobeGraniteCommentsInternalCommentReplicationContentFilterFac")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("replicatePeriodcommentPeriodresourceTypes").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.comments.internal.CommentReplicationContentFilterFactory", operation(comAdobeGraniteCommentsInternalCommentReplicationContentFilterFacOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val replicatePeriodcommentPeriodresourceTypesString = params.getAs[String]("replicatePeriodcommentPeriodresourceTypes")
    val replicatePeriodcommentPeriodresourceTypes = if("multi" == "default" || "multi" == "csv") {
      replicatePeriodcommentPeriodresourceTypesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("replicatePeriodcommentPeriodresourceTypes: " + replicatePeriodcommentPeriodresourceTypes)
  }

  

  val comAdobeGraniteCompatrouterImplCompatSwitchingServiceImplOperation = (apiOperation[ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo]("comAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("compatgroups").description("").optional, queryParam[Boolean]("enabled").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.compatrouter.impl.CompatSwitchingServiceImpl", operation(comAdobeGraniteCompatrouterImplCompatSwitchingServiceImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val compatgroupsString = params.getAs[String]("compatgroups")
    val compatgroups = if("multi" == "default" || "multi" == "csv") {
      compatgroupsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("compatgroups: " + compatgroups)
            val enabled = params.getAs[Boolean]("enabled")

    //println("enabled: " + enabled)
  }

  

  val comAdobeGraniteCompatrouterImplRoutingConfigOperation = (apiOperation[ComAdobeGraniteCompatrouterImplRoutingConfigInfo]("comAdobeGraniteCompatrouterImplRoutingConfig")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("id").description("").optional, queryParam[String]("compatPath").description("").optional, queryParam[String]("newPath").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.compatrouter.impl.RoutingConfig", operation(comAdobeGraniteCompatrouterImplRoutingConfigOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val id = params.getAs[String]("id")

    //println("id: " + id)
            val compatPath = params.getAs[String]("compatPath")

    //println("compatPath: " + compatPath)
            val newPath = params.getAs[String]("newPath")

    //println("newPath: " + newPath)
  }

  

  val comAdobeGraniteCompatrouterImplSwitchMappingConfigOperation = (apiOperation[ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo]("comAdobeGraniteCompatrouterImplSwitchMappingConfig")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("group").description("").optional, queryParam[List[String]]("ids").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.compatrouter.impl.SwitchMappingConfig", operation(comAdobeGraniteCompatrouterImplSwitchMappingConfigOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val group = params.getAs[String]("group")

    //println("group: " + group)
        val idsString = params.getAs[String]("ids")
    val ids = if("multi" == "default" || "multi" == "csv") {
      idsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("ids: " + ids)
  }

  

  val comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingOperation = (apiOperation[ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo]("comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("enabled").description("").optional, queryParam[List[String]]("fallbackPaths").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.conf.impl.RuntimeAwareConfigurationResourceResolvingStrategy", operation(comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val enabled = params.getAs[Boolean]("enabled")

    //println("enabled: " + enabled)
        val fallbackPathsString = params.getAs[String]("fallbackPaths")
    val fallbackPaths = if("multi" == "default" || "multi" == "csv") {
      fallbackPathsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("fallbackPaths: " + fallbackPaths)
  }

  

  val comAdobeGraniteContexthubImplContextHubImplOperation = (apiOperation[ComAdobeGraniteContexthubImplContextHubImplInfo]("comAdobeGraniteContexthubImplContextHubImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("comPeriodadobePeriodgranitePeriodcontexthubPeriodsilentMode").description("").optional, queryParam[Boolean]("comPeriodadobePeriodgranitePeriodcontexthubPeriodshowUi").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.contexthub.impl.ContextHubImpl", operation(comAdobeGraniteContexthubImplContextHubImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val comPeriodadobePeriodgranitePeriodcontexthubPeriodsilentMode = params.getAs[Boolean]("comPeriodadobePeriodgranitePeriodcontexthubPeriodsilentMode")

    //println("comPeriodadobePeriodgranitePeriodcontexthubPeriodsilentMode: " + comPeriodadobePeriodgranitePeriodcontexthubPeriodsilentMode)
            val comPeriodadobePeriodgranitePeriodcontexthubPeriodshowUi = params.getAs[Boolean]("comPeriodadobePeriodgranitePeriodcontexthubPeriodshowUi")

    //println("comPeriodadobePeriodgranitePeriodcontexthubPeriodshowUi: " + comPeriodadobePeriodgranitePeriodcontexthubPeriodshowUi)
  }

  

  val comAdobeGraniteCorsImplCORSPolicyImplOperation = (apiOperation[ComAdobeGraniteCorsImplCORSPolicyImplInfo]("comAdobeGraniteCorsImplCORSPolicyImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("alloworigin").description("").optional, queryParam[List[String]]("alloworiginregexp").description("").optional, queryParam[List[String]]("allowedpaths").description("").optional, queryParam[List[String]]("exposedheaders").description("").optional, queryParam[Int]("maxage").description("").optional, queryParam[List[String]]("supportedheaders").description("").optional, queryParam[List[String]]("supportedmethods").description("").optional, queryParam[Boolean]("supportscredentials").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.cors.impl.CORSPolicyImpl", operation(comAdobeGraniteCorsImplCORSPolicyImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val alloworiginString = params.getAs[String]("alloworigin")
    val alloworigin = if("multi" == "default" || "multi" == "csv") {
      alloworiginString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("alloworigin: " + alloworigin)
        val alloworiginregexpString = params.getAs[String]("alloworiginregexp")
    val alloworiginregexp = if("multi" == "default" || "multi" == "csv") {
      alloworiginregexpString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("alloworiginregexp: " + alloworiginregexp)
        val allowedpathsString = params.getAs[String]("allowedpaths")
    val allowedpaths = if("multi" == "default" || "multi" == "csv") {
      allowedpathsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("allowedpaths: " + allowedpaths)
        val exposedheadersString = params.getAs[String]("exposedheaders")
    val exposedheaders = if("multi" == "default" || "multi" == "csv") {
      exposedheadersString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("exposedheaders: " + exposedheaders)
            val maxage = params.getAs[Int]("maxage")

    //println("maxage: " + maxage)
        val supportedheadersString = params.getAs[String]("supportedheaders")
    val supportedheaders = if("multi" == "default" || "multi" == "csv") {
      supportedheadersString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("supportedheaders: " + supportedheaders)
        val supportedmethodsString = params.getAs[String]("supportedmethods")
    val supportedmethods = if("multi" == "default" || "multi" == "csv") {
      supportedmethodsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("supportedmethods: " + supportedmethods)
            val supportscredentials = params.getAs[Boolean]("supportscredentials")

    //println("supportscredentials: " + supportscredentials)
  }

  

  val comAdobeGraniteCsrfImplCSRFFilterOperation = (apiOperation[ComAdobeGraniteCsrfImplCSRFFilterInfo]("comAdobeGraniteCsrfImplCSRFFilter")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("filterPeriodmethods").description("").optional, queryParam[Boolean]("filterPeriodenablePeriodsafePerioduserPeriodagents").description("").optional, queryParam[List[String]]("filterPeriodsafePerioduserPeriodagents").description("").optional, queryParam[List[String]]("filterPeriodexcludedPeriodpaths").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.csrf.impl.CSRFFilter", operation(comAdobeGraniteCsrfImplCSRFFilterOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val filterPeriodmethodsString = params.getAs[String]("filterPeriodmethods")
    val filterPeriodmethods = if("multi" == "default" || "multi" == "csv") {
      filterPeriodmethodsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("filterPeriodmethods: " + filterPeriodmethods)
            val filterPeriodenablePeriodsafePerioduserPeriodagents = params.getAs[Boolean]("filterPeriodenablePeriodsafePerioduserPeriodagents")

    //println("filterPeriodenablePeriodsafePerioduserPeriodagents: " + filterPeriodenablePeriodsafePerioduserPeriodagents)
        val filterPeriodsafePerioduserPeriodagentsString = params.getAs[String]("filterPeriodsafePerioduserPeriodagents")
    val filterPeriodsafePerioduserPeriodagents = if("multi" == "default" || "multi" == "csv") {
      filterPeriodsafePerioduserPeriodagentsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("filterPeriodsafePerioduserPeriodagents: " + filterPeriodsafePerioduserPeriodagents)
        val filterPeriodexcludedPeriodpathsString = params.getAs[String]("filterPeriodexcludedPeriodpaths")
    val filterPeriodexcludedPeriodpaths = if("multi" == "default" || "multi" == "csv") {
      filterPeriodexcludedPeriodpathsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("filterPeriodexcludedPeriodpaths: " + filterPeriodexcludedPeriodpaths)
  }

  

  val comAdobeGraniteCsrfImplCSRFServletOperation = (apiOperation[ComAdobeGraniteCsrfImplCSRFServletInfo]("comAdobeGraniteCsrfImplCSRFServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("csrfPeriodtokenPeriodexpiresPeriodin").description("").optional, queryParam[String]("slingPeriodauthPeriodrequirements").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.csrf.impl.CSRFServlet", operation(comAdobeGraniteCsrfImplCSRFServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val csrfPeriodtokenPeriodexpiresPeriodin = params.getAs[Int]("csrfPeriodtokenPeriodexpiresPeriodin")

    //println("csrfPeriodtokenPeriodexpiresPeriodin: " + csrfPeriodtokenPeriodexpiresPeriodin)
            val slingPeriodauthPeriodrequirements = params.getAs[String]("slingPeriodauthPeriodrequirements")

    //println("slingPeriodauthPeriodrequirements: " + slingPeriodauthPeriodrequirements)
  }

  

  val comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeOperation = (apiOperation[ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo]("comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("name").description("").optional, queryParam[String]("username").description("").optional, queryParam[String]("encryptedPassword").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.distribution.core.impl.CryptoDistributionTransportSecretProvider", operation(comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val name = params.getAs[String]("name")

    //println("name: " + name)
            val username = params.getAs[String]("username")

    //println("username: " + username)
            val encryptedPassword = params.getAs[String]("encryptedPassword")

    //println("encryptedPassword: " + encryptedPassword)
  }

  

  val comAdobeGraniteDistributionCoreImplDiffDiffChangesObserverOperation = (apiOperation[ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo]("comAdobeGraniteDistributionCoreImplDiffDiffChangesObserver")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("enabled").description("").optional, queryParam[String]("agentName").description("").optional, queryParam[String]("diffPath").description("").optional, queryParam[String]("observedPath").description("").optional, queryParam[String]("serviceName").description("").optional, queryParam[String]("propertyNames").description("").optional, queryParam[Int]("distributionDelay").description("").optional, queryParam[String]("serviceUserPeriodtarget").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffChangesObserver", operation(comAdobeGraniteDistributionCoreImplDiffDiffChangesObserverOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val enabled = params.getAs[Boolean]("enabled")

    //println("enabled: " + enabled)
            val agentName = params.getAs[String]("agentName")

    //println("agentName: " + agentName)
            val diffPath = params.getAs[String]("diffPath")

    //println("diffPath: " + diffPath)
            val observedPath = params.getAs[String]("observedPath")

    //println("observedPath: " + observedPath)
            val serviceName = params.getAs[String]("serviceName")

    //println("serviceName: " + serviceName)
            val propertyNames = params.getAs[String]("propertyNames")

    //println("propertyNames: " + propertyNames)
            val distributionDelay = params.getAs[Int]("distributionDelay")

    //println("distributionDelay: " + distributionDelay)
            val serviceUserPeriodtarget = params.getAs[String]("serviceUserPeriodtarget")

    //println("serviceUserPeriodtarget: " + serviceUserPeriodtarget)
  }

  

  val comAdobeGraniteDistributionCoreImplDiffDiffEventListenerOperation = (apiOperation[ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo]("comAdobeGraniteDistributionCoreImplDiffDiffEventListener")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("diffPath").description("").optional, queryParam[String]("serviceName").description("").optional, queryParam[String]("serviceUserPeriodtarget").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffEventListener", operation(comAdobeGraniteDistributionCoreImplDiffDiffEventListenerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val diffPath = params.getAs[String]("diffPath")

    //println("diffPath: " + diffPath)
            val serviceName = params.getAs[String]("serviceName")

    //println("serviceName: " + serviceName)
            val serviceUserPeriodtarget = params.getAs[String]("serviceUserPeriodtarget")

    //println("serviceUserPeriodtarget: " + serviceUserPeriodtarget)
  }

  

  val comAdobeGraniteDistributionCoreImplDistributionToReplicationEvenOperation = (apiOperation[ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo]("comAdobeGraniteDistributionCoreImplDistributionToReplicationEven")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("importerPeriodname").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.distribution.core.impl.DistributionToReplicationEventTransformer", operation(comAdobeGraniteDistributionCoreImplDistributionToReplicationEvenOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val importerPeriodnameString = params.getAs[String]("importerPeriodname")
    val importerPeriodname = if("multi" == "default" || "multi" == "csv") {
      importerPeriodnameString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("importerPeriodname: " + importerPeriodname)
  }

  

  val comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatOperation = (apiOperation[ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo]("comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("providerName").description("").optional, queryParam[Boolean]("forwardPeriodrequests").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.distribution.core.impl.replication.adapters.ReplicationAgentProvider", operation(comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val providerName = params.getAs[String]("providerName")

    //println("providerName: " + providerName)
            val forwardPeriodrequests = params.getAs[Boolean]("forwardPeriodrequests")

    //println("forwardPeriodrequests: " + forwardPeriodrequests)
  }

  

  val comAdobeGraniteDistributionCoreImplReplicationDistributionTransOperation = (apiOperation[ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo]("comAdobeGraniteDistributionCoreImplReplicationDistributionTrans")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("forwardPeriodrequests").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.distribution.core.impl.replication.DistributionTransportHandler", operation(comAdobeGraniteDistributionCoreImplReplicationDistributionTransOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val forwardPeriodrequests = params.getAs[Boolean]("forwardPeriodrequests")

    //println("forwardPeriodrequests: " + forwardPeriodrequests)
  }

  

  val comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuOperation = (apiOperation[ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo]("comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("name").description("").optional, queryParam[String]("serviceName").description("").optional, queryParam[String]("userId").description("").optional, queryParam[String]("accessTokenProviderPeriodtarget").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.distribution.core.impl.transport.AccessTokenDistributionTransportSecretProvider", operation(comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val name = params.getAs[String]("name")

    //println("name: " + name)
            val serviceName = params.getAs[String]("serviceName")

    //println("serviceName: " + serviceName)
            val userId = params.getAs[String]("userId")

    //println("userId: " + userId)
            val accessTokenProviderPeriodtarget = params.getAs[String]("accessTokenProviderPeriodtarget")

    //println("accessTokenProviderPeriodtarget: " + accessTokenProviderPeriodtarget)
  }

  

  val comAdobeGraniteFragsImplCheckHttpHeaderFlagOperation = (apiOperation[ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo]("comAdobeGraniteFragsImplCheckHttpHeaderFlag")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("featurePeriodname").description("").optional, queryParam[String]("featurePerioddescription").description("").optional, queryParam[String]("httpPeriodheaderPeriodname").description("").optional, queryParam[String]("httpPeriodheaderPeriodvaluepattern").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.frags.impl.CheckHttpHeaderFlag", operation(comAdobeGraniteFragsImplCheckHttpHeaderFlagOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val featurePeriodname = params.getAs[String]("featurePeriodname")

    //println("featurePeriodname: " + featurePeriodname)
            val featurePerioddescription = params.getAs[String]("featurePerioddescription")

    //println("featurePerioddescription: " + featurePerioddescription)
            val httpPeriodheaderPeriodname = params.getAs[String]("httpPeriodheaderPeriodname")

    //println("httpPeriodheaderPeriodname: " + httpPeriodheaderPeriodname)
            val httpPeriodheaderPeriodvaluepattern = params.getAs[String]("httpPeriodheaderPeriodvaluepattern")

    //println("httpPeriodheaderPeriodvaluepattern: " + httpPeriodheaderPeriodvaluepattern)
  }

  

  val comAdobeGraniteFragsImplRandomFeatureOperation = (apiOperation[ComAdobeGraniteFragsImplRandomFeatureInfo]("comAdobeGraniteFragsImplRandomFeature")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("featurePeriodname").description("").optional, queryParam[String]("featurePerioddescription").description("").optional, queryParam[String]("activePeriodpercentage").description("").optional, queryParam[String]("cookiePeriodname").description("").optional, queryParam[Int]("cookiePeriodmaxAge").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.frags.impl.RandomFeature", operation(comAdobeGraniteFragsImplRandomFeatureOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val featurePeriodname = params.getAs[String]("featurePeriodname")

    //println("featurePeriodname: " + featurePeriodname)
            val featurePerioddescription = params.getAs[String]("featurePerioddescription")

    //println("featurePerioddescription: " + featurePerioddescription)
            val activePeriodpercentage = params.getAs[String]("activePeriodpercentage")

    //println("activePeriodpercentage: " + activePeriodpercentage)
            val cookiePeriodname = params.getAs[String]("cookiePeriodname")

    //println("cookiePeriodname: " + cookiePeriodname)
            val cookiePeriodmaxAge = params.getAs[Int]("cookiePeriodmaxAge")

    //println("cookiePeriodmaxAge: " + cookiePeriodmaxAge)
  }

  

  val comAdobeGraniteHttpcacheFileFileCacheStoreOperation = (apiOperation[ComAdobeGraniteHttpcacheFileFileCacheStoreInfo]("comAdobeGraniteHttpcacheFileFileCacheStore")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("comPeriodadobePeriodgranitePeriodhttpcachePeriodfilePerioddocumentRoot").description("").optional, queryParam[String]("comPeriodadobePeriodgranitePeriodhttpcachePeriodfilePeriodincludeHost").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.httpcache.file.FileCacheStore", operation(comAdobeGraniteHttpcacheFileFileCacheStoreOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val comPeriodadobePeriodgranitePeriodhttpcachePeriodfilePerioddocumentRoot = params.getAs[String]("comPeriodadobePeriodgranitePeriodhttpcachePeriodfilePerioddocumentRoot")

    //println("comPeriodadobePeriodgranitePeriodhttpcachePeriodfilePerioddocumentRoot: " + comPeriodadobePeriodgranitePeriodhttpcachePeriodfilePerioddocumentRoot)
            val comPeriodadobePeriodgranitePeriodhttpcachePeriodfilePeriodincludeHost = params.getAs[String]("comPeriodadobePeriodgranitePeriodhttpcachePeriodfilePeriodincludeHost")

    //println("comPeriodadobePeriodgranitePeriodhttpcachePeriodfilePeriodincludeHost: " + comPeriodadobePeriodgranitePeriodhttpcachePeriodfilePeriodincludeHost)
  }

  

  val comAdobeGraniteHttpcacheImplOuterCacheFilterOperation = (apiOperation[ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo]("comAdobeGraniteHttpcacheImplOuterCacheFilter")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("comPeriodadobePeriodgranitePeriodhttpcachePeriodurlPeriodpaths").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.httpcache.impl.OuterCacheFilter", operation(comAdobeGraniteHttpcacheImplOuterCacheFilterOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val comPeriodadobePeriodgranitePeriodhttpcachePeriodurlPeriodpathsString = params.getAs[String]("comPeriodadobePeriodgranitePeriodhttpcachePeriodurlPeriodpaths")
    val comPeriodadobePeriodgranitePeriodhttpcachePeriodurlPeriodpaths = if("multi" == "default" || "multi" == "csv") {
      comPeriodadobePeriodgranitePeriodhttpcachePeriodurlPeriodpathsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("comPeriodadobePeriodgranitePeriodhttpcachePeriodurlPeriodpaths: " + comPeriodadobePeriodgranitePeriodhttpcachePeriodurlPeriodpaths)
  }

  

  val comAdobeGraniteI18nImplBundlePseudoTranslationsOperation = (apiOperation[ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo]("comAdobeGraniteI18nImplBundlePseudoTranslations")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("pseudoPeriodpatterns").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.i18n.impl.bundle.PseudoTranslations", operation(comAdobeGraniteI18nImplBundlePseudoTranslationsOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val pseudoPeriodpatternsString = params.getAs[String]("pseudoPeriodpatterns")
    val pseudoPeriodpatterns = if("multi" == "default" || "multi" == "csv") {
      pseudoPeriodpatternsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("pseudoPeriodpatterns: " + pseudoPeriodpatterns)
  }

  

  val comAdobeGraniteI18nImplPreferencesLocaleResolverServiceOperation = (apiOperation[ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo]("comAdobeGraniteI18nImplPreferencesLocaleResolverService")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("securityPeriodpreferencesPeriodname").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.i18n.impl.PreferencesLocaleResolverService", operation(comAdobeGraniteI18nImplPreferencesLocaleResolverServiceOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val securityPeriodpreferencesPeriodname = params.getAs[String]("securityPeriodpreferencesPeriodname")

    //println("securityPeriodpreferencesPeriodname: " + securityPeriodpreferencesPeriodname)
  }

  

  val comAdobeGraniteInfocollectorInfoCollectorOperation = (apiOperation[ComAdobeGraniteInfocollectorInfoCollectorInfo]("comAdobeGraniteInfocollectorInfoCollector")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("granitePeriodinfocollectorPeriodincludeThreadDumps").description("").optional, queryParam[Boolean]("granitePeriodinfocollectorPeriodincludeHeapDump").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.infocollector.InfoCollector", operation(comAdobeGraniteInfocollectorInfoCollectorOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val granitePeriodinfocollectorPeriodincludeThreadDumps = params.getAs[Boolean]("granitePeriodinfocollectorPeriodincludeThreadDumps")

    //println("granitePeriodinfocollectorPeriodincludeThreadDumps: " + granitePeriodinfocollectorPeriodincludeThreadDumps)
            val granitePeriodinfocollectorPeriodincludeHeapDump = params.getAs[Boolean]("granitePeriodinfocollectorPeriodincludeHeapDump")

    //println("granitePeriodinfocollectorPeriodincludeHeapDump: " + granitePeriodinfocollectorPeriodincludeHeapDump)
  }

  

  val comAdobeGraniteJettySslInternalGraniteSslConnectorFactoryOperation = (apiOperation[ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo]("comAdobeGraniteJettySslInternalGraniteSslConnectorFactory")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodport").description("").optional, queryParam[String]("comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodkeystorePerioduser").description("").optional, queryParam[String]("comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodkeystorePeriodpassword").description("").optional, queryParam[List[String]]("comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodciphersuitesPeriodexcluded").description("").optional, queryParam[List[String]]("comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodciphersuitesPeriodincluded").description("").optional, queryParam[String]("comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodclientPeriodcertificate").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.jetty.ssl.internal.GraniteSslConnectorFactory", operation(comAdobeGraniteJettySslInternalGraniteSslConnectorFactoryOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodport = params.getAs[Int]("comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodport")

    //println("comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodport: " + comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodport)
            val comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodkeystorePerioduser = params.getAs[String]("comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodkeystorePerioduser")

    //println("comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodkeystorePerioduser: " + comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodkeystorePerioduser)
            val comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodkeystorePeriodpassword = params.getAs[String]("comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodkeystorePeriodpassword")

    //println("comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodkeystorePeriodpassword: " + comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodkeystorePeriodpassword)
        val comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodciphersuitesPeriodexcludedString = params.getAs[String]("comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodciphersuitesPeriodexcluded")
    val comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodciphersuitesPeriodexcluded = if("multi" == "default" || "multi" == "csv") {
      comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodciphersuitesPeriodexcludedString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodciphersuitesPeriodexcluded: " + comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodciphersuitesPeriodexcluded)
        val comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodciphersuitesPeriodincludedString = params.getAs[String]("comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodciphersuitesPeriodincluded")
    val comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodciphersuitesPeriodincluded = if("multi" == "default" || "multi" == "csv") {
      comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodciphersuitesPeriodincludedString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodciphersuitesPeriodincluded: " + comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodciphersuitesPeriodincluded)
            val comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodclientPeriodcertificate = params.getAs[String]("comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodclientPeriodcertificate")

    //println("comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodclientPeriodcertificate: " + comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodclientPeriodcertificate)
  }

  

  val comAdobeGraniteLicenseImplLicenseCheckFilterOperation = (apiOperation[ComAdobeGraniteLicenseImplLicenseCheckFilterInfo]("comAdobeGraniteLicenseImplLicenseCheckFilter")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("checkInternval").description("").optional, queryParam[List[String]]("excludeIds").description("").optional, queryParam[Boolean]("encryptPing").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.license.impl.LicenseCheckFilter", operation(comAdobeGraniteLicenseImplLicenseCheckFilterOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val checkInternval = params.getAs[Int]("checkInternval")

    //println("checkInternval: " + checkInternval)
        val excludeIdsString = params.getAs[String]("excludeIds")
    val excludeIds = if("multi" == "default" || "multi" == "csv") {
      excludeIdsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("excludeIds: " + excludeIds)
            val encryptPing = params.getAs[Boolean]("encryptPing")

    //println("encryptPing: " + encryptPing)
  }

  

  val comAdobeGraniteLoggingImplLogAnalyserImplOperation = (apiOperation[ComAdobeGraniteLoggingImplLogAnalyserImplInfo]("comAdobeGraniteLoggingImplLogAnalyserImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("messagesPeriodqueuePeriodsize").description("").optional, queryParam[List[String]]("loggerPeriodconfig").description("").optional, queryParam[Int]("messagesPeriodsize").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.logging.impl.LogAnalyserImpl", operation(comAdobeGraniteLoggingImplLogAnalyserImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val messagesPeriodqueuePeriodsize = params.getAs[Int]("messagesPeriodqueuePeriodsize")

    //println("messagesPeriodqueuePeriodsize: " + messagesPeriodqueuePeriodsize)
        val loggerPeriodconfigString = params.getAs[String]("loggerPeriodconfig")
    val loggerPeriodconfig = if("multi" == "default" || "multi" == "csv") {
      loggerPeriodconfigString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("loggerPeriodconfig: " + loggerPeriodconfig)
            val messagesPeriodsize = params.getAs[Int]("messagesPeriodsize")

    //println("messagesPeriodsize: " + messagesPeriodsize)
  }

  

  val comAdobeGraniteLoggingImplLogErrorHealthCheckOperation = (apiOperation[ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo]("comAdobeGraniteLoggingImplLogErrorHealthCheck")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("hcPeriodtags").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.logging.impl.LogErrorHealthCheck", operation(comAdobeGraniteLoggingImplLogErrorHealthCheckOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val hcPeriodtagsString = params.getAs[String]("hcPeriodtags")
    val hcPeriodtags = if("multi" == "default" || "multi" == "csv") {
      hcPeriodtagsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("hcPeriodtags: " + hcPeriodtags)
  }

  

  val comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskOperation = (apiOperation[ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo]("comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("granitePeriodmaintenancePeriodmandatory").description("").optional, queryParam[String]("jobPeriodtopics").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.DataStoreGarbageCollectionTask", operation(comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val granitePeriodmaintenancePeriodmandatory = params.getAs[Boolean]("granitePeriodmaintenancePeriodmandatory")

    //println("granitePeriodmaintenancePeriodmandatory: " + granitePeriodmaintenancePeriodmandatory)
            val jobPeriodtopics = params.getAs[String]("jobPeriodtopics")

    //println("jobPeriodtopics: " + jobPeriodtopics)
  }

  

  val comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskOperation = (apiOperation[ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo]("comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("jobPeriodtopics").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.LuceneBinariesCleanupTask", operation(comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val jobPeriodtopics = params.getAs[String]("jobPeriodtopics")

    //println("jobPeriodtopics: " + jobPeriodtopics)
  }

  

  val comAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskOperation = (apiOperation[ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo]("comAdobeGraniteMaintenanceCrxImplRevisionCleanupTask")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("fullPeriodgcPerioddays").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.RevisionCleanupTask", operation(comAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val fullPeriodgcPerioddaysString = params.getAs[String]("fullPeriodgcPerioddays")
    val fullPeriodgcPerioddays = if("multi" == "default" || "multi" == "csv") {
      fullPeriodgcPerioddaysString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("fullPeriodgcPerioddays: " + fullPeriodgcPerioddays)
  }

  

  val comAdobeGraniteMonitoringImplScriptConfigImplOperation = (apiOperation[ComAdobeGraniteMonitoringImplScriptConfigImplInfo]("comAdobeGraniteMonitoringImplScriptConfigImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("scriptPeriodfilename").description("").optional, queryParam[String]("scriptPerioddisplay").description("").optional, queryParam[String]("scriptPeriodpath").description("").optional, queryParam[List[String]]("scriptPeriodplatform").description("").optional, queryParam[Int]("interval").description("").optional, queryParam[String]("jmxdomain").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.monitoring.impl.ScriptConfigImpl", operation(comAdobeGraniteMonitoringImplScriptConfigImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val scriptPeriodfilename = params.getAs[String]("scriptPeriodfilename")

    //println("scriptPeriodfilename: " + scriptPeriodfilename)
            val scriptPerioddisplay = params.getAs[String]("scriptPerioddisplay")

    //println("scriptPerioddisplay: " + scriptPerioddisplay)
            val scriptPeriodpath = params.getAs[String]("scriptPeriodpath")

    //println("scriptPeriodpath: " + scriptPeriodpath)
        val scriptPeriodplatformString = params.getAs[String]("scriptPeriodplatform")
    val scriptPeriodplatform = if("multi" == "default" || "multi" == "csv") {
      scriptPeriodplatformString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("scriptPeriodplatform: " + scriptPeriodplatform)
            val interval = params.getAs[Int]("interval")

    //println("interval: " + interval)
            val jmxdomain = params.getAs[String]("jmxdomain")

    //println("jmxdomain: " + jmxdomain)
  }

  

  val comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanOperation = (apiOperation[ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo]("comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("path").description("").optional, queryParam[String]("jaasPeriodcontrolFlag").description("").optional, queryParam[String]("jaasPeriodrealmName").description("").optional, queryParam[Int]("jaasPeriodranking").description("").optional, queryParam[Boolean]("oauthPeriodofflinePeriodvalidation").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.oauth.server.auth.impl.OAuth2ServerAuthenticationHandler", operation(comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val path = params.getAs[String]("path")

    //println("path: " + path)
            val jaasPeriodcontrolFlag = params.getAs[String]("jaasPeriodcontrolFlag")

    //println("jaasPeriodcontrolFlag: " + jaasPeriodcontrolFlag)
            val jaasPeriodrealmName = params.getAs[String]("jaasPeriodrealmName")

    //println("jaasPeriodrealmName: " + jaasPeriodrealmName)
            val jaasPeriodranking = params.getAs[Int]("jaasPeriodranking")

    //println("jaasPeriodranking: " + jaasPeriodranking)
            val oauthPeriodofflinePeriodvalidation = params.getAs[Boolean]("oauthPeriodofflinePeriodvalidation")

    //println("oauthPeriodofflinePeriodvalidation: " + oauthPeriodofflinePeriodvalidation)
  }

  

  val comAdobeGraniteOauthServerImplAccessTokenCleanupTaskOperation = (apiOperation[ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo]("comAdobeGraniteOauthServerImplAccessTokenCleanupTask")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("schedulerPeriodexpression").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.oauth.server.impl.AccessTokenCleanupTask", operation(comAdobeGraniteOauthServerImplAccessTokenCleanupTaskOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val schedulerPeriodexpression = params.getAs[String]("schedulerPeriodexpression")

    //println("schedulerPeriodexpression: " + schedulerPeriodexpression)
  }

  

  val comAdobeGraniteOauthServerImplOAuth2ClientRevocationServletOperation = (apiOperation[ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo]("comAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("oauthPeriodclientPeriodrevocationPeriodactive").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2ClientRevocationServlet", operation(comAdobeGraniteOauthServerImplOAuth2ClientRevocationServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val oauthPeriodclientPeriodrevocationPeriodactive = params.getAs[Boolean]("oauthPeriodclientPeriodrevocationPeriodactive")

    //println("oauthPeriodclientPeriodrevocationPeriodactive: " + oauthPeriodclientPeriodrevocationPeriodactive)
  }

  

  val comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletOperation = (apiOperation[ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo]("comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("slingPeriodservletPeriodpaths").description("").optional, queryParam[Boolean]("oauthPeriodrevocationPeriodactive").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2RevocationEndpointServlet", operation(comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val slingPeriodservletPeriodpaths = params.getAs[String]("slingPeriodservletPeriodpaths")

    //println("slingPeriodservletPeriodpaths: " + slingPeriodservletPeriodpaths)
            val oauthPeriodrevocationPeriodactive = params.getAs[Boolean]("oauthPeriodrevocationPeriodactive")

    //println("oauthPeriodrevocationPeriodactive: " + oauthPeriodrevocationPeriodactive)
  }

  

  val comAdobeGraniteOauthServerImplOAuth2TokenEndpointServletOperation = (apiOperation[ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo]("comAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("oauthPeriodissuer").description("").optional, queryParam[String]("oauthPeriodaccessPeriodtokenPeriodexpiresPeriodin").description("").optional, queryParam[String]("osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern").description("").optional, queryParam[String]("osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenEndpointServlet", operation(comAdobeGraniteOauthServerImplOAuth2TokenEndpointServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val oauthPeriodissuer = params.getAs[String]("oauthPeriodissuer")

    //println("oauthPeriodissuer: " + oauthPeriodissuer)
            val oauthPeriodaccessPeriodtokenPeriodexpiresPeriodin = params.getAs[String]("oauthPeriodaccessPeriodtokenPeriodexpiresPeriodin")

    //println("oauthPeriodaccessPeriodtokenPeriodexpiresPeriodin: " + oauthPeriodaccessPeriodtokenPeriodexpiresPeriodin)
            val osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern = params.getAs[String]("osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern")

    //println("osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern: " + osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern)
            val osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect = params.getAs[String]("osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect")

    //println("osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect: " + osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect)
  }

  

  val comAdobeGraniteOauthServerImplOAuth2TokenRevocationServletOperation = (apiOperation[ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo]("comAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("oauthPeriodtokenPeriodrevocationPeriodactive").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenRevocationServlet", operation(comAdobeGraniteOauthServerImplOAuth2TokenRevocationServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val oauthPeriodtokenPeriodrevocationPeriodactive = params.getAs[Boolean]("oauthPeriodtokenPeriodrevocationPeriodactive")

    //println("oauthPeriodtokenPeriodrevocationPeriodactive: " + oauthPeriodtokenPeriodrevocationPeriodactive)
  }

  

  val comAdobeGraniteOffloadingImplOffloadingConfiguratorOperation = (apiOperation[ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo]("comAdobeGraniteOffloadingImplOffloadingConfigurator")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("offloadingPeriodtransporter").description("").optional, queryParam[Boolean]("offloadingPeriodcleanupPeriodpayload").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingConfigurator", operation(comAdobeGraniteOffloadingImplOffloadingConfiguratorOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val offloadingPeriodtransporter = params.getAs[String]("offloadingPeriodtransporter")

    //println("offloadingPeriodtransporter: " + offloadingPeriodtransporter)
            val offloadingPeriodcleanupPeriodpayload = params.getAs[Boolean]("offloadingPeriodcleanupPeriodpayload")

    //println("offloadingPeriodcleanupPeriodpayload: " + offloadingPeriodcleanupPeriodpayload)
  }

  

  val comAdobeGraniteOffloadingImplOffloadingJobClonerOperation = (apiOperation[ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo]("comAdobeGraniteOffloadingImplOffloadingJobCloner")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("offloadingPeriodjobclonerPeriodenabled").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobCloner", operation(comAdobeGraniteOffloadingImplOffloadingJobClonerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val offloadingPeriodjobclonerPeriodenabled = params.getAs[Boolean]("offloadingPeriodjobclonerPeriodenabled")

    //println("offloadingPeriodjobclonerPeriodenabled: " + offloadingPeriodjobclonerPeriodenabled)
  }

  

  val comAdobeGraniteOffloadingImplOffloadingJobOffloaderOperation = (apiOperation[ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo]("comAdobeGraniteOffloadingImplOffloadingJobOffloader")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("offloadingPeriodoffloaderPeriodenabled").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobOffloader", operation(comAdobeGraniteOffloadingImplOffloadingJobOffloaderOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val offloadingPeriodoffloaderPeriodenabled = params.getAs[Boolean]("offloadingPeriodoffloaderPeriodenabled")

    //println("offloadingPeriodoffloaderPeriodenabled: " + offloadingPeriodoffloaderPeriodenabled)
  }

  

  val comAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerOperation = (apiOperation[ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo]("comAdobeGraniteOffloadingImplTransporterOffloadingAgentManager")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("offloadingPeriodagentmanagerPeriodenabled").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingAgentManager", operation(comAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val offloadingPeriodagentmanagerPeriodenabled = params.getAs[Boolean]("offloadingPeriodagentmanagerPeriodenabled")

    //println("offloadingPeriodagentmanagerPeriodenabled: " + offloadingPeriodagentmanagerPeriodenabled)
  }

  

  val comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoOperation = (apiOperation[ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo]("comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("defaultPeriodtransportPeriodagentToWorkerPeriodprefix").description("").optional, queryParam[String]("defaultPeriodtransportPeriodagentToMasterPeriodprefix").description("").optional, queryParam[String]("defaultPeriodtransportPeriodinputPeriodpackage").description("").optional, queryParam[String]("defaultPeriodtransportPeriodoutputPeriodpackage").description("").optional, queryParam[Boolean]("defaultPeriodtransportPeriodreplicationPeriodsynchronous").description("").optional, queryParam[Boolean]("defaultPeriodtransportPeriodcontentpackage").description("").optional, queryParam[Boolean]("offloadingPeriodtransporterPerioddefaultPeriodenabled").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingDefaultTransporter", operation(comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val defaultPeriodtransportPeriodagentToWorkerPeriodprefix = params.getAs[String]("defaultPeriodtransportPeriodagentToWorkerPeriodprefix")

    //println("defaultPeriodtransportPeriodagentToWorkerPeriodprefix: " + defaultPeriodtransportPeriodagentToWorkerPeriodprefix)
            val defaultPeriodtransportPeriodagentToMasterPeriodprefix = params.getAs[String]("defaultPeriodtransportPeriodagentToMasterPeriodprefix")

    //println("defaultPeriodtransportPeriodagentToMasterPeriodprefix: " + defaultPeriodtransportPeriodagentToMasterPeriodprefix)
            val defaultPeriodtransportPeriodinputPeriodpackage = params.getAs[String]("defaultPeriodtransportPeriodinputPeriodpackage")

    //println("defaultPeriodtransportPeriodinputPeriodpackage: " + defaultPeriodtransportPeriodinputPeriodpackage)
            val defaultPeriodtransportPeriodoutputPeriodpackage = params.getAs[String]("defaultPeriodtransportPeriodoutputPeriodpackage")

    //println("defaultPeriodtransportPeriodoutputPeriodpackage: " + defaultPeriodtransportPeriodoutputPeriodpackage)
            val defaultPeriodtransportPeriodreplicationPeriodsynchronous = params.getAs[Boolean]("defaultPeriodtransportPeriodreplicationPeriodsynchronous")

    //println("defaultPeriodtransportPeriodreplicationPeriodsynchronous: " + defaultPeriodtransportPeriodreplicationPeriodsynchronous)
            val defaultPeriodtransportPeriodcontentpackage = params.getAs[Boolean]("defaultPeriodtransportPeriodcontentpackage")

    //println("defaultPeriodtransportPeriodcontentpackage: " + defaultPeriodtransportPeriodcontentpackage)
            val offloadingPeriodtransporterPerioddefaultPeriodenabled = params.getAs[Boolean]("offloadingPeriodtransporterPerioddefaultPeriodenabled")

    //println("offloadingPeriodtransporterPerioddefaultPeriodenabled: " + offloadingPeriodtransporterPerioddefaultPeriodenabled)
  }

  

  val comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplOperation = (apiOperation[ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo]("comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("omnisearchPeriodsuggestionPeriodrequiretextPeriodmin").description("").optional, queryParam[Boolean]("omnisearchPeriodsuggestionPeriodspellcheckPeriodrequire").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.omnisearch.impl.core.OmniSearchServiceImpl", operation(comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val omnisearchPeriodsuggestionPeriodrequiretextPeriodmin = params.getAs[Int]("omnisearchPeriodsuggestionPeriodrequiretextPeriodmin")

    //println("omnisearchPeriodsuggestionPeriodrequiretextPeriodmin: " + omnisearchPeriodsuggestionPeriodrequiretextPeriodmin)
            val omnisearchPeriodsuggestionPeriodspellcheckPeriodrequire = params.getAs[Boolean]("omnisearchPeriodsuggestionPeriodspellcheckPeriodrequire")

    //println("omnisearchPeriodsuggestionPeriodspellcheckPeriodrequire: " + omnisearchPeriodsuggestionPeriodspellcheckPeriodrequire)
  }

  

  val comAdobeGraniteOptoutImplOptOutServiceImplOperation = (apiOperation[ComAdobeGraniteOptoutImplOptOutServiceImplInfo]("comAdobeGraniteOptoutImplOptOutServiceImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("optoutPeriodcookies").description("").optional, queryParam[List[String]]("optoutPeriodheaders").description("").optional, queryParam[List[String]]("optoutPeriodwhitelistPeriodcookies").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.optout.impl.OptOutServiceImpl", operation(comAdobeGraniteOptoutImplOptOutServiceImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val optoutPeriodcookiesString = params.getAs[String]("optoutPeriodcookies")
    val optoutPeriodcookies = if("multi" == "default" || "multi" == "csv") {
      optoutPeriodcookiesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("optoutPeriodcookies: " + optoutPeriodcookies)
        val optoutPeriodheadersString = params.getAs[String]("optoutPeriodheaders")
    val optoutPeriodheaders = if("multi" == "default" || "multi" == "csv") {
      optoutPeriodheadersString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("optoutPeriodheaders: " + optoutPeriodheaders)
        val optoutPeriodwhitelistPeriodcookiesString = params.getAs[String]("optoutPeriodwhitelistPeriodcookies")
    val optoutPeriodwhitelistPeriodcookies = if("multi" == "default" || "multi" == "csv") {
      optoutPeriodwhitelistPeriodcookiesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("optoutPeriodwhitelistPeriodcookies: " + optoutPeriodwhitelistPeriodcookies)
  }

  

  val comAdobeGraniteQueriesImplHcAsyncIndexHealthCheckOperation = (apiOperation[ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo]("comAdobeGraniteQueriesImplHcAsyncIndexHealthCheck")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("indexingPeriodcriticalPeriodthreshold").description("").optional, queryParam[Int]("indexingPeriodwarnPeriodthreshold").description("").optional, queryParam[List[String]]("hcPeriodtags").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.queries.impl.hc.AsyncIndexHealthCheck", operation(comAdobeGraniteQueriesImplHcAsyncIndexHealthCheckOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val indexingPeriodcriticalPeriodthreshold = params.getAs[Int]("indexingPeriodcriticalPeriodthreshold")

    //println("indexingPeriodcriticalPeriodthreshold: " + indexingPeriodcriticalPeriodthreshold)
            val indexingPeriodwarnPeriodthreshold = params.getAs[Int]("indexingPeriodwarnPeriodthreshold")

    //println("indexingPeriodwarnPeriodthreshold: " + indexingPeriodwarnPeriodthreshold)
        val hcPeriodtagsString = params.getAs[String]("hcPeriodtags")
    val hcPeriodtags = if("multi" == "default" || "multi" == "csv") {
      hcPeriodtagsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("hcPeriodtags: " + hcPeriodtags)
  }

  

  val comAdobeGraniteQueriesImplHcLargeIndexHealthCheckOperation = (apiOperation[ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo]("comAdobeGraniteQueriesImplHcLargeIndexHealthCheck")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("largePeriodindexPeriodcriticalPeriodthreshold").description("").optional, queryParam[Int]("largePeriodindexPeriodwarnPeriodthreshold").description("").optional, queryParam[List[String]]("hcPeriodtags").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.queries.impl.hc.LargeIndexHealthCheck", operation(comAdobeGraniteQueriesImplHcLargeIndexHealthCheckOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val largePeriodindexPeriodcriticalPeriodthreshold = params.getAs[Int]("largePeriodindexPeriodcriticalPeriodthreshold")

    //println("largePeriodindexPeriodcriticalPeriodthreshold: " + largePeriodindexPeriodcriticalPeriodthreshold)
            val largePeriodindexPeriodwarnPeriodthreshold = params.getAs[Int]("largePeriodindexPeriodwarnPeriodthreshold")

    //println("largePeriodindexPeriodwarnPeriodthreshold: " + largePeriodindexPeriodwarnPeriodthreshold)
        val hcPeriodtagsString = params.getAs[String]("hcPeriodtags")
    val hcPeriodtags = if("multi" == "default" || "multi" == "csv") {
      hcPeriodtagsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("hcPeriodtags: " + hcPeriodtags)
  }

  

  val comAdobeGraniteQueriesImplHcQueriesStatusHealthCheckOperation = (apiOperation[ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo]("comAdobeGraniteQueriesImplHcQueriesStatusHealthCheck")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("hcPeriodtags").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueriesStatusHealthCheck", operation(comAdobeGraniteQueriesImplHcQueriesStatusHealthCheckOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val hcPeriodtagsString = params.getAs[String]("hcPeriodtags")
    val hcPeriodtags = if("multi" == "default" || "multi" == "csv") {
      hcPeriodtagsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("hcPeriodtags: " + hcPeriodtags)
  }

  

  val comAdobeGraniteQueriesImplHcQueryHealthCheckMetricsOperation = (apiOperation[ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo]("comAdobeGraniteQueriesImplHcQueryHealthCheckMetrics")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("getPeriod").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueryHealthCheckMetrics", operation(comAdobeGraniteQueriesImplHcQueryHealthCheckMetricsOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val getPeriod = params.getAs[Int]("getPeriod")

    //println("getPeriod: " + getPeriod)
  }

  

  val comAdobeGraniteQueriesImplHcQueryLimitsHealthCheckOperation = (apiOperation[ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo]("comAdobeGraniteQueriesImplHcQueryLimitsHealthCheck")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("hcPeriodtags").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueryLimitsHealthCheck", operation(comAdobeGraniteQueriesImplHcQueryLimitsHealthCheckOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val hcPeriodtagsString = params.getAs[String]("hcPeriodtags")
    val hcPeriodtags = if("multi" == "default" || "multi" == "csv") {
      hcPeriodtagsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("hcPeriodtags: " + hcPeriodtags)
  }

  

  val comAdobeGraniteReplicationHcImplReplicationQueueHealthCheckOperation = (apiOperation[ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo]("comAdobeGraniteReplicationHcImplReplicationQueueHealthCheck")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("numberPeriodofPeriodretriesPeriodallowed").description("").optional, queryParam[List[String]]("hcPeriodtags").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationQueueHealthCheck", operation(comAdobeGraniteReplicationHcImplReplicationQueueHealthCheckOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val numberPeriodofPeriodretriesPeriodallowed = params.getAs[Int]("numberPeriodofPeriodretriesPeriodallowed")

    //println("numberPeriodofPeriodretriesPeriodallowed: " + numberPeriodofPeriodretriesPeriodallowed)
        val hcPeriodtagsString = params.getAs[String]("hcPeriodtags")
    val hcPeriodtags = if("multi" == "default" || "multi" == "csv") {
      hcPeriodtagsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("hcPeriodtags: " + hcPeriodtags)
  }

  

  val comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCOperation = (apiOperation[ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo]("comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("hcPeriodtags").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationTransportUsersHealthCheck", operation(comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val hcPeriodtagsString = params.getAs[String]("hcPeriodtags")
    val hcPeriodtags = if("multi" == "default" || "multi" == "csv") {
      hcPeriodtagsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("hcPeriodtags: " + hcPeriodtags)
  }

  

  val comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckOperation = (apiOperation[ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo]("comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("hcPeriodtags").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.repository.hc.impl.AuthorizableNodeNameHealthCheck", operation(comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val hcPeriodtagsString = params.getAs[String]("hcPeriodtags")
    val hcPeriodtags = if("multi" == "default" || "multi" == "csv") {
      hcPeriodtagsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("hcPeriodtags: " + hcPeriodtags)
  }

  

  val comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCOperation = (apiOperation[ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo]("comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("hcPeriodtags").description("").optional, queryParam[List[String]]("excludePeriodsearchPeriodpath").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.repository.hc.impl.content.sling.SlingContentHealthCheck", operation(comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val hcPeriodtagsString = params.getAs[String]("hcPeriodtags")
    val hcPeriodtags = if("multi" == "default" || "multi" == "csv") {
      hcPeriodtagsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("hcPeriodtags: " + hcPeriodtags)
        val excludePeriodsearchPeriodpathString = params.getAs[String]("excludePeriodsearchPeriodpath")
    val excludePeriodsearchPeriodpath = if("multi" == "default" || "multi" == "csv") {
      excludePeriodsearchPeriodpathString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("excludePeriodsearchPeriodpath: " + excludePeriodsearchPeriodpath)
  }

  

  val comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckOperation = (apiOperation[ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo]("comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("hcPeriodtags").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.repository.hc.impl.ContinuousRGCHealthCheck", operation(comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val hcPeriodtagsString = params.getAs[String]("hcPeriodtags")
    val hcPeriodtags = if("multi" == "default" || "multi" == "csv") {
      hcPeriodtagsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("hcPeriodtags: " + hcPeriodtags)
  }

  

  val comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheOperation = (apiOperation[ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo]("comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("hcPeriodtags").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultAccessUserProfileHealthCheck", operation(comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val hcPeriodtagsString = params.getAs[String]("hcPeriodtags")
    val hcPeriodtags = if("multi" == "default" || "multi" == "csv") {
      hcPeriodtagsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("hcPeriodtags: " + hcPeriodtags)
  }

  

  val comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckOperation = (apiOperation[ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo]("comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("hcPeriodtags").description("").optional, queryParam[List[String]]("accountPeriodlogins").description("").optional, queryParam[List[String]]("consolePeriodlogins").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultLoginsHealthCheck", operation(comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val hcPeriodtagsString = params.getAs[String]("hcPeriodtags")
    val hcPeriodtags = if("multi" == "default" || "multi" == "csv") {
      hcPeriodtagsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("hcPeriodtags: " + hcPeriodtags)
        val accountPeriodloginsString = params.getAs[String]("accountPeriodlogins")
    val accountPeriodlogins = if("multi" == "default" || "multi" == "csv") {
      accountPeriodloginsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("accountPeriodlogins: " + accountPeriodlogins)
        val consolePeriodloginsString = params.getAs[String]("consolePeriodlogins")
    val consolePeriodlogins = if("multi" == "default" || "multi" == "csv") {
      consolePeriodloginsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("consolePeriodlogins: " + consolePeriodlogins)
  }

  

  val comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckOperation = (apiOperation[ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo]("comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("hcPeriodtags").description("").optional, queryParam[Int]("diskPeriodspacePeriodwarnPeriodthreshold").description("").optional, queryParam[Int]("diskPeriodspacePerioderrorPeriodthreshold").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.repository.hc.impl.DiskSpaceHealthCheck", operation(comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val hcPeriodtagsString = params.getAs[String]("hcPeriodtags")
    val hcPeriodtags = if("multi" == "default" || "multi" == "csv") {
      hcPeriodtagsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("hcPeriodtags: " + hcPeriodtags)
            val diskPeriodspacePeriodwarnPeriodthreshold = params.getAs[Int]("diskPeriodspacePeriodwarnPeriodthreshold")

    //println("diskPeriodspacePeriodwarnPeriodthreshold: " + diskPeriodspacePeriodwarnPeriodthreshold)
            val diskPeriodspacePerioderrorPeriodthreshold = params.getAs[Int]("diskPeriodspacePerioderrorPeriodthreshold")

    //println("diskPeriodspacePerioderrorPeriodthreshold: " + diskPeriodspacePerioderrorPeriodthreshold)
  }

  

  val comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckOperation = (apiOperation[ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo]("comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("hcPeriodtags").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.repository.hc.impl.ObservationQueueLengthHealthCheck", operation(comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val hcPeriodtagsString = params.getAs[String]("hcPeriodtags")
    val hcPeriodtags = if("multi" == "default" || "multi" == "csv") {
      hcPeriodtagsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("hcPeriodtags: " + hcPeriodtags)
  }

  

  val comAdobeGraniteRepositoryImplCommitStatsConfigOperation = (apiOperation[ComAdobeGraniteRepositoryImplCommitStatsConfigInfo]("comAdobeGraniteRepositoryImplCommitStatsConfig")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("enabled").description("").optional, queryParam[Int]("intervalSeconds").description("").optional, queryParam[Int]("commitsPerIntervalThreshold").description("").optional, queryParam[Int]("maxLocationLength").description("").optional, queryParam[Int]("maxDetailsShown").description("").optional, queryParam[Int]("minDetailsPercentage").description("").optional, queryParam[List[String]]("threadMatchers").description("").optional, queryParam[Int]("maxGreedyDepth").description("").optional, queryParam[String]("greedyStackMatchers").description("").optional, queryParam[List[String]]("stackFilters").description("").optional, queryParam[List[String]]("stackMatchers").description("").optional, queryParam[List[String]]("stackCategorizers").description("").optional, queryParam[List[String]]("stackShorteners").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.repository.impl.CommitStatsConfig", operation(comAdobeGraniteRepositoryImplCommitStatsConfigOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val enabled = params.getAs[Boolean]("enabled")

    //println("enabled: " + enabled)
            val intervalSeconds = params.getAs[Int]("intervalSeconds")

    //println("intervalSeconds: " + intervalSeconds)
            val commitsPerIntervalThreshold = params.getAs[Int]("commitsPerIntervalThreshold")

    //println("commitsPerIntervalThreshold: " + commitsPerIntervalThreshold)
            val maxLocationLength = params.getAs[Int]("maxLocationLength")

    //println("maxLocationLength: " + maxLocationLength)
            val maxDetailsShown = params.getAs[Int]("maxDetailsShown")

    //println("maxDetailsShown: " + maxDetailsShown)
            val minDetailsPercentage = params.getAs[Int]("minDetailsPercentage")

    //println("minDetailsPercentage: " + minDetailsPercentage)
        val threadMatchersString = params.getAs[String]("threadMatchers")
    val threadMatchers = if("multi" == "default" || "multi" == "csv") {
      threadMatchersString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("threadMatchers: " + threadMatchers)
            val maxGreedyDepth = params.getAs[Int]("maxGreedyDepth")

    //println("maxGreedyDepth: " + maxGreedyDepth)
            val greedyStackMatchers = params.getAs[String]("greedyStackMatchers")

    //println("greedyStackMatchers: " + greedyStackMatchers)
        val stackFiltersString = params.getAs[String]("stackFilters")
    val stackFilters = if("multi" == "default" || "multi" == "csv") {
      stackFiltersString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("stackFilters: " + stackFilters)
        val stackMatchersString = params.getAs[String]("stackMatchers")
    val stackMatchers = if("multi" == "default" || "multi" == "csv") {
      stackMatchersString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("stackMatchers: " + stackMatchers)
        val stackCategorizersString = params.getAs[String]("stackCategorizers")
    val stackCategorizers = if("multi" == "default" || "multi" == "csv") {
      stackCategorizersString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("stackCategorizers: " + stackCategorizers)
        val stackShortenersString = params.getAs[String]("stackShorteners")
    val stackShorteners = if("multi" == "default" || "multi" == "csv") {
      stackShortenersString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("stackShorteners: " + stackShorteners)
  }

  

  val comAdobeGraniteRepositoryServiceUserConfigurationOperation = (apiOperation[ComAdobeGraniteRepositoryServiceUserConfigurationInfo]("comAdobeGraniteRepositoryServiceUserConfiguration")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("servicePeriodranking").description("").optional, queryParam[Boolean]("serviceusersPeriodsimpleSubjectPopulation").description("").optional, queryParam[List[String]]("serviceusersPeriodlist").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.repository.ServiceUserConfiguration", operation(comAdobeGraniteRepositoryServiceUserConfigurationOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val servicePeriodranking = params.getAs[Int]("servicePeriodranking")

    //println("servicePeriodranking: " + servicePeriodranking)
            val serviceusersPeriodsimpleSubjectPopulation = params.getAs[Boolean]("serviceusersPeriodsimpleSubjectPopulation")

    //println("serviceusersPeriodsimpleSubjectPopulation: " + serviceusersPeriodsimpleSubjectPopulation)
        val serviceusersPeriodlistString = params.getAs[String]("serviceusersPeriodlist")
    val serviceusersPeriodlist = if("multi" == "default" || "multi" == "csv") {
      serviceusersPeriodlistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("serviceusersPeriodlist: " + serviceusersPeriodlist)
  }

  

  val comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImOperation = (apiOperation[ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo]("comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("hcPeriodtags").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.requests.logging.impl.hc.RequestsStatusHealthCheckImpl", operation(comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val hcPeriodtagsString = params.getAs[String]("hcPeriodtags")
    val hcPeriodtags = if("multi" == "default" || "multi" == "csv") {
      hcPeriodtagsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("hcPeriodtags: " + hcPeriodtags)
  }

  

  val comAdobeGraniteResourcestatusImplCompositeStatusTypeOperation = (apiOperation[ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo]("comAdobeGraniteResourcestatusImplCompositeStatusType")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("name").description("").optional, queryParam[List[String]]("types").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.resourcestatus.impl.CompositeStatusType", operation(comAdobeGraniteResourcestatusImplCompositeStatusTypeOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val name = params.getAs[String]("name")

    //println("name: " + name)
        val typesString = params.getAs[String]("types")
    val types = if("multi" == "default" || "multi" == "csv") {
      typesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("types: " + types)
  }

  

  val comAdobeGraniteResourcestatusImplStatusResourceProviderImplOperation = (apiOperation[ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo]("comAdobeGraniteResourcestatusImplStatusResourceProviderImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("providerPeriodroot").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.resourcestatus.impl.StatusResourceProviderImpl", operation(comAdobeGraniteResourcestatusImplStatusResourceProviderImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val providerPeriodroot = params.getAs[String]("providerPeriodroot")

    //println("providerPeriodroot: " + providerPeriodroot)
  }

  

  val comAdobeGraniteRestAssetsImplAssetContentDispositionFilterOperation = (apiOperation[ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo]("comAdobeGraniteRestAssetsImplAssetContentDispositionFilter")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("mimePeriodallowEmpty").description("").optional, queryParam[List[String]]("mimePeriodallowed").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.rest.assets.impl.AssetContentDispositionFilter", operation(comAdobeGraniteRestAssetsImplAssetContentDispositionFilterOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val mimePeriodallowEmpty = params.getAs[Boolean]("mimePeriodallowEmpty")

    //println("mimePeriodallowEmpty: " + mimePeriodallowEmpty)
        val mimePeriodallowedString = params.getAs[String]("mimePeriodallowed")
    val mimePeriodallowed = if("multi" == "default" || "multi" == "csv") {
      mimePeriodallowedString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("mimePeriodallowed: " + mimePeriodallowed)
  }

  

  val comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplOperation = (apiOperation[ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo]("comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("providerPeriodroots").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.rest.impl.ApiEndpointResourceProviderFactoryImpl", operation(comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val providerPeriodroots = params.getAs[String]("providerPeriodroots")

    //println("providerPeriodroots: " + providerPeriodroots)
  }

  

  val comAdobeGraniteRestImplServletDefaultGETServletOperation = (apiOperation[ComAdobeGraniteRestImplServletDefaultGETServletInfo]("comAdobeGraniteRestImplServletDefaultGETServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("defaultPeriodlimit").description("").optional, queryParam[Boolean]("usePeriodabsolutePerioduri").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.rest.impl.servlet.DefaultGETServlet", operation(comAdobeGraniteRestImplServletDefaultGETServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val defaultPeriodlimit = params.getAs[Int]("defaultPeriodlimit")

    //println("defaultPeriodlimit: " + defaultPeriodlimit)
            val usePeriodabsolutePerioduri = params.getAs[Boolean]("usePeriodabsolutePerioduri")

    //println("usePeriodabsolutePerioduri: " + usePeriodabsolutePerioduri)
  }

  

  val comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSOperation = (apiOperation[ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo]("comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("hcPeriodtags").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.security.user.ui.internal.servlets.SSLConfigurationServlet", operation(comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val hcPeriodtagsString = params.getAs[String]("hcPeriodtags")
    val hcPeriodtags = if("multi" == "default" || "multi" == "csv") {
      hcPeriodtagsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("hcPeriodtags: " + hcPeriodtags)
  }

  

  val comAdobeGraniteSecurityUserUserPropertiesServiceOperation = (apiOperation[ComAdobeGraniteSecurityUserUserPropertiesServiceInfo]("comAdobeGraniteSecurityUserUserPropertiesService")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("adapterPeriodcondition").description("").optional, queryParam[List[String]]("granitePerioduserpropertiesPeriodnodetypes").description("").optional, queryParam[List[String]]("granitePerioduserpropertiesPeriodresourcetypes").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.security.user.UserPropertiesService", operation(comAdobeGraniteSecurityUserUserPropertiesServiceOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val adapterPeriodcondition = params.getAs[String]("adapterPeriodcondition")

    //println("adapterPeriodcondition: " + adapterPeriodcondition)
        val granitePerioduserpropertiesPeriodnodetypesString = params.getAs[String]("granitePerioduserpropertiesPeriodnodetypes")
    val granitePerioduserpropertiesPeriodnodetypes = if("multi" == "default" || "multi" == "csv") {
      granitePerioduserpropertiesPeriodnodetypesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("granitePerioduserpropertiesPeriodnodetypes: " + granitePerioduserpropertiesPeriodnodetypes)
        val granitePerioduserpropertiesPeriodresourcetypesString = params.getAs[String]("granitePerioduserpropertiesPeriodresourcetypes")
    val granitePerioduserpropertiesPeriodresourcetypes = if("multi" == "default" || "multi" == "csv") {
      granitePerioduserpropertiesPeriodresourcetypesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("granitePerioduserpropertiesPeriodresourcetypes: " + granitePerioduserpropertiesPeriodresourcetypes)
  }

  

  val comAdobeGraniteSocialgraphImplSocialGraphFactoryImplOperation = (apiOperation[ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo]("comAdobeGraniteSocialgraphImplSocialGraphFactoryImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("group2memberPeriodrelationshipPeriodoutgoing").description("").optional, queryParam[List[String]]("group2memberPeriodexcludedPeriodoutgoing").description("").optional, queryParam[String]("group2memberPeriodrelationshipPeriodincoming").description("").optional, queryParam[List[String]]("group2memberPeriodexcludedPeriodincoming").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.socialgraph.impl.SocialGraphFactoryImpl", operation(comAdobeGraniteSocialgraphImplSocialGraphFactoryImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val group2memberPeriodrelationshipPeriodoutgoing = params.getAs[String]("group2memberPeriodrelationshipPeriodoutgoing")

    //println("group2memberPeriodrelationshipPeriodoutgoing: " + group2memberPeriodrelationshipPeriodoutgoing)
        val group2memberPeriodexcludedPeriodoutgoingString = params.getAs[String]("group2memberPeriodexcludedPeriodoutgoing")
    val group2memberPeriodexcludedPeriodoutgoing = if("multi" == "default" || "multi" == "csv") {
      group2memberPeriodexcludedPeriodoutgoingString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("group2memberPeriodexcludedPeriodoutgoing: " + group2memberPeriodexcludedPeriodoutgoing)
            val group2memberPeriodrelationshipPeriodincoming = params.getAs[String]("group2memberPeriodrelationshipPeriodincoming")

    //println("group2memberPeriodrelationshipPeriodincoming: " + group2memberPeriodrelationshipPeriodincoming)
        val group2memberPeriodexcludedPeriodincomingString = params.getAs[String]("group2memberPeriodexcludedPeriodincoming")
    val group2memberPeriodexcludedPeriodincoming = if("multi" == "default" || "multi" == "csv") {
      group2memberPeriodexcludedPeriodincomingString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("group2memberPeriodexcludedPeriodincoming: " + group2memberPeriodexcludedPeriodincoming)
  }

  

  val comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplOperation = (apiOperation[ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo]("comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("schedulerPeriodexpression").description("").optional, queryParam[String]("jmxPeriodobjectname").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.system.monitoring.impl.SystemStatsMBeanImpl", operation(comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val schedulerPeriodexpression = params.getAs[String]("schedulerPeriodexpression")

    //println("schedulerPeriodexpression: " + schedulerPeriodexpression)
            val jmxPeriodobjectname = params.getAs[String]("jmxPeriodobjectname")

    //println("jmxPeriodobjectname: " + jmxPeriodobjectname)
  }

  

  val comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryOperation = (apiOperation[ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo]("comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("adapterPeriodcondition").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskAdapterFactory", operation(comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val adapterPeriodcondition = params.getAs[String]("adapterPeriodcondition")

    //println("adapterPeriodcondition: " + adapterPeriodcondition)
  }

  

  val comAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceOperation = (apiOperation[ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo]("comAdobeGraniteTaskmanagementImplJcrTaskArchiveService")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("archivingPeriodenabled").description("").optional, queryParam[String]("schedulerPeriodexpression").description("").optional, queryParam[Int]("archivePeriodsincePerioddaysPeriodcompleted").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskArchiveService", operation(comAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val archivingPeriodenabled = params.getAs[Boolean]("archivingPeriodenabled")

    //println("archivingPeriodenabled: " + archivingPeriodenabled)
            val schedulerPeriodexpression = params.getAs[String]("schedulerPeriodexpression")

    //println("schedulerPeriodexpression: " + schedulerPeriodexpression)
            val archivePeriodsincePerioddaysPeriodcompleted = params.getAs[Int]("archivePeriodsincePerioddaysPeriodcompleted")

    //println("archivePeriodsincePerioddaysPeriodcompleted: " + archivePeriodsincePerioddaysPeriodcompleted)
  }

  

  val comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskOperation = (apiOperation[ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo]("comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("purgeCompleted").description("").optional, queryParam[Int]("completedAge").description("").optional, queryParam[Boolean]("purgeActive").description("").optional, queryParam[Int]("activeAge").description("").optional, queryParam[Int]("saveThreshold").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.taskmanagement.impl.purge.TaskPurgeMaintenanceTask", operation(comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val purgeCompleted = params.getAs[Boolean]("purgeCompleted")

    //println("purgeCompleted: " + purgeCompleted)
            val completedAge = params.getAs[Int]("completedAge")

    //println("completedAge: " + completedAge)
            val purgeActive = params.getAs[Boolean]("purgeActive")

    //println("purgeActive: " + purgeActive)
            val activeAge = params.getAs[Int]("activeAge")

    //println("activeAge: " + activeAge)
            val saveThreshold = params.getAs[Int]("saveThreshold")

    //println("saveThreshold: " + saveThreshold)
  }

  

  val comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorOperation = (apiOperation[ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo]("comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("adapterPeriodcondition").description("").optional, queryParam[List[String]]("taskmanagerPeriodadmingroups").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.taskmanagement.impl.service.TaskManagerAdapterFactory", operation(comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val adapterPeriodcondition = params.getAs[String]("adapterPeriodcondition")

    //println("adapterPeriodcondition: " + adapterPeriodcondition)
        val taskmanagerPeriodadmingroupsString = params.getAs[String]("taskmanagerPeriodadmingroups")
    val taskmanagerPeriodadmingroups = if("multi" == "default" || "multi" == "csv") {
      taskmanagerPeriodadmingroupsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("taskmanagerPeriodadmingroups: " + taskmanagerPeriodadmingroups)
  }

  

  val comAdobeGraniteThreaddumpThreadDumpCollectorOperation = (apiOperation[ComAdobeGraniteThreaddumpThreadDumpCollectorInfo]("comAdobeGraniteThreaddumpThreadDumpCollector")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("schedulerPeriodperiod").description("").optional, queryParam[String]("schedulerPeriodrunOn").description("").optional, queryParam[Boolean]("granitePeriodthreaddumpPeriodenabled").description("").optional, queryParam[Int]("granitePeriodthreaddumpPerioddumpsPerFile").description("").optional, queryParam[Boolean]("granitePeriodthreaddumpPeriodenableGzipCompression").description("").optional, queryParam[Boolean]("granitePeriodthreaddumpPeriodenableDirectoriesCompression").description("").optional, queryParam[Boolean]("granitePeriodthreaddumpPeriodenableJStack").description("").optional, queryParam[Int]("granitePeriodthreaddumpPeriodmaxBackupDays").description("").optional, queryParam[String]("granitePeriodthreaddumpPeriodbackupCleanTrigger").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.threaddump.ThreadDumpCollector", operation(comAdobeGraniteThreaddumpThreadDumpCollectorOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val schedulerPeriodperiod = params.getAs[Int]("schedulerPeriodperiod")

    //println("schedulerPeriodperiod: " + schedulerPeriodperiod)
            val schedulerPeriodrunOn = params.getAs[String]("schedulerPeriodrunOn")

    //println("schedulerPeriodrunOn: " + schedulerPeriodrunOn)
            val granitePeriodthreaddumpPeriodenabled = params.getAs[Boolean]("granitePeriodthreaddumpPeriodenabled")

    //println("granitePeriodthreaddumpPeriodenabled: " + granitePeriodthreaddumpPeriodenabled)
            val granitePeriodthreaddumpPerioddumpsPerFile = params.getAs[Int]("granitePeriodthreaddumpPerioddumpsPerFile")

    //println("granitePeriodthreaddumpPerioddumpsPerFile: " + granitePeriodthreaddumpPerioddumpsPerFile)
            val granitePeriodthreaddumpPeriodenableGzipCompression = params.getAs[Boolean]("granitePeriodthreaddumpPeriodenableGzipCompression")

    //println("granitePeriodthreaddumpPeriodenableGzipCompression: " + granitePeriodthreaddumpPeriodenableGzipCompression)
            val granitePeriodthreaddumpPeriodenableDirectoriesCompression = params.getAs[Boolean]("granitePeriodthreaddumpPeriodenableDirectoriesCompression")

    //println("granitePeriodthreaddumpPeriodenableDirectoriesCompression: " + granitePeriodthreaddumpPeriodenableDirectoriesCompression)
            val granitePeriodthreaddumpPeriodenableJStack = params.getAs[Boolean]("granitePeriodthreaddumpPeriodenableJStack")

    //println("granitePeriodthreaddumpPeriodenableJStack: " + granitePeriodthreaddumpPeriodenableJStack)
            val granitePeriodthreaddumpPeriodmaxBackupDays = params.getAs[Int]("granitePeriodthreaddumpPeriodmaxBackupDays")

    //println("granitePeriodthreaddumpPeriodmaxBackupDays: " + granitePeriodthreaddumpPeriodmaxBackupDays)
            val granitePeriodthreaddumpPeriodbackupCleanTrigger = params.getAs[String]("granitePeriodthreaddumpPeriodbackupCleanTrigger")

    //println("granitePeriodthreaddumpPeriodbackupCleanTrigger: " + granitePeriodthreaddumpPeriodbackupCleanTrigger)
  }

  

  val comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslOperation = (apiOperation[ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo]("comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("translationFactory").description("").optional, queryParam[String]("defaultConnectorLabel").description("").optional, queryParam[String]("defaultConnectorAttribution").description("").optional, queryParam[String]("defaultConnectorWorkspaceId").description("").optional, queryParam[String]("defaultConnectorSubscriptionKey").description("").optional, queryParam[String]("languageMapLocation").description("").optional, queryParam[String]("categoryMapLocation").description("").optional, queryParam[Int]("retryAttempts").description("").optional, queryParam[Int]("timeoutCount").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.translation.connector.msft.core.impl.MicrosoftTranslationServiceFactoryImpl", operation(comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val translationFactory = params.getAs[String]("translationFactory")

    //println("translationFactory: " + translationFactory)
            val defaultConnectorLabel = params.getAs[String]("defaultConnectorLabel")

    //println("defaultConnectorLabel: " + defaultConnectorLabel)
            val defaultConnectorAttribution = params.getAs[String]("defaultConnectorAttribution")

    //println("defaultConnectorAttribution: " + defaultConnectorAttribution)
            val defaultConnectorWorkspaceId = params.getAs[String]("defaultConnectorWorkspaceId")

    //println("defaultConnectorWorkspaceId: " + defaultConnectorWorkspaceId)
            val defaultConnectorSubscriptionKey = params.getAs[String]("defaultConnectorSubscriptionKey")

    //println("defaultConnectorSubscriptionKey: " + defaultConnectorSubscriptionKey)
            val languageMapLocation = params.getAs[String]("languageMapLocation")

    //println("languageMapLocation: " + languageMapLocation)
            val categoryMapLocation = params.getAs[String]("categoryMapLocation")

    //println("categoryMapLocation: " + categoryMapLocation)
            val retryAttempts = params.getAs[Int]("retryAttempts")

    //println("retryAttempts: " + retryAttempts)
            val timeoutCount = params.getAs[Int]("timeoutCount")

    //println("timeoutCount: " + timeoutCount)
  }

  

  val comAdobeGraniteTranslationCoreImplTranslationManagerImplOperation = (apiOperation[ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo]("comAdobeGraniteTranslationCoreImplTranslationManagerImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("defaultConnectorName").description("").optional, queryParam[String]("defaultCategory").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.translation.core.impl.TranslationManagerImpl", operation(comAdobeGraniteTranslationCoreImplTranslationManagerImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val defaultConnectorName = params.getAs[String]("defaultConnectorName")

    //println("defaultConnectorName: " + defaultConnectorName)
            val defaultCategory = params.getAs[String]("defaultCategory")

    //println("defaultCategory: " + defaultCategory)
  }

  

  val comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplOperation = (apiOperation[ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo]("comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("htmllibmanagerPeriodtiming").description("").optional, queryParam[String]("htmllibmanagerPerioddebugPeriodinitPeriodjs").description("").optional, queryParam[Boolean]("htmllibmanagerPeriodminify").description("").optional, queryParam[Boolean]("htmllibmanagerPerioddebug").description("").optional, queryParam[Boolean]("htmllibmanagerPeriodgzip").description("").optional, queryParam[Int]("htmllibmanagerPeriodmaxDataUriSize").description("").optional, queryParam[Int]("htmllibmanagerPeriodmaxage").description("").optional, queryParam[Boolean]("htmllibmanagerPeriodforceCQUrlInfo").description("").optional, queryParam[String]("htmllibmanagerPerioddefaultthemename").description("").optional, queryParam[String]("htmllibmanagerPerioddefaultuserthemename").description("").optional, queryParam[String]("htmllibmanagerPeriodclientmanager").description("").optional, queryParam[List[String]]("htmllibmanagerPeriodpathPeriodlist").description("").optional, queryParam[List[String]]("htmllibmanagerPeriodexcludedPeriodpathPeriodlist").description("").optional, queryParam[List[String]]("htmllibmanagerPeriodprocessorPeriodjs").description("").optional, queryParam[List[String]]("htmllibmanagerPeriodprocessorPeriodcss").description("").optional, queryParam[List[String]]("htmllibmanagerPeriodlongcachePeriodpatterns").description("").optional, queryParam[String]("htmllibmanagerPeriodlongcachePeriodformat").description("").optional, queryParam[Boolean]("htmllibmanagerPerioduseFileSystemOutputCache").description("").optional, queryParam[String]("htmllibmanagerPeriodfileSystemOutputCacheLocation").description("").optional, queryParam[List[String]]("htmllibmanagerPerioddisablePeriodreplacement").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.ui.clientlibs.impl.HtmlLibraryManagerImpl", operation(comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val htmllibmanagerPeriodtiming = params.getAs[Boolean]("htmllibmanagerPeriodtiming")

    //println("htmllibmanagerPeriodtiming: " + htmllibmanagerPeriodtiming)
            val htmllibmanagerPerioddebugPeriodinitPeriodjs = params.getAs[String]("htmllibmanagerPerioddebugPeriodinitPeriodjs")

    //println("htmllibmanagerPerioddebugPeriodinitPeriodjs: " + htmllibmanagerPerioddebugPeriodinitPeriodjs)
            val htmllibmanagerPeriodminify = params.getAs[Boolean]("htmllibmanagerPeriodminify")

    //println("htmllibmanagerPeriodminify: " + htmllibmanagerPeriodminify)
            val htmllibmanagerPerioddebug = params.getAs[Boolean]("htmllibmanagerPerioddebug")

    //println("htmllibmanagerPerioddebug: " + htmllibmanagerPerioddebug)
            val htmllibmanagerPeriodgzip = params.getAs[Boolean]("htmllibmanagerPeriodgzip")

    //println("htmllibmanagerPeriodgzip: " + htmllibmanagerPeriodgzip)
            val htmllibmanagerPeriodmaxDataUriSize = params.getAs[Int]("htmllibmanagerPeriodmaxDataUriSize")

    //println("htmllibmanagerPeriodmaxDataUriSize: " + htmllibmanagerPeriodmaxDataUriSize)
            val htmllibmanagerPeriodmaxage = params.getAs[Int]("htmllibmanagerPeriodmaxage")

    //println("htmllibmanagerPeriodmaxage: " + htmllibmanagerPeriodmaxage)
            val htmllibmanagerPeriodforceCQUrlInfo = params.getAs[Boolean]("htmllibmanagerPeriodforceCQUrlInfo")

    //println("htmllibmanagerPeriodforceCQUrlInfo: " + htmllibmanagerPeriodforceCQUrlInfo)
            val htmllibmanagerPerioddefaultthemename = params.getAs[String]("htmllibmanagerPerioddefaultthemename")

    //println("htmllibmanagerPerioddefaultthemename: " + htmllibmanagerPerioddefaultthemename)
            val htmllibmanagerPerioddefaultuserthemename = params.getAs[String]("htmllibmanagerPerioddefaultuserthemename")

    //println("htmllibmanagerPerioddefaultuserthemename: " + htmllibmanagerPerioddefaultuserthemename)
            val htmllibmanagerPeriodclientmanager = params.getAs[String]("htmllibmanagerPeriodclientmanager")

    //println("htmllibmanagerPeriodclientmanager: " + htmllibmanagerPeriodclientmanager)
        val htmllibmanagerPeriodpathPeriodlistString = params.getAs[String]("htmllibmanagerPeriodpathPeriodlist")
    val htmllibmanagerPeriodpathPeriodlist = if("multi" == "default" || "multi" == "csv") {
      htmllibmanagerPeriodpathPeriodlistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("htmllibmanagerPeriodpathPeriodlist: " + htmllibmanagerPeriodpathPeriodlist)
        val htmllibmanagerPeriodexcludedPeriodpathPeriodlistString = params.getAs[String]("htmllibmanagerPeriodexcludedPeriodpathPeriodlist")
    val htmllibmanagerPeriodexcludedPeriodpathPeriodlist = if("multi" == "default" || "multi" == "csv") {
      htmllibmanagerPeriodexcludedPeriodpathPeriodlistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("htmllibmanagerPeriodexcludedPeriodpathPeriodlist: " + htmllibmanagerPeriodexcludedPeriodpathPeriodlist)
        val htmllibmanagerPeriodprocessorPeriodjsString = params.getAs[String]("htmllibmanagerPeriodprocessorPeriodjs")
    val htmllibmanagerPeriodprocessorPeriodjs = if("multi" == "default" || "multi" == "csv") {
      htmllibmanagerPeriodprocessorPeriodjsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("htmllibmanagerPeriodprocessorPeriodjs: " + htmllibmanagerPeriodprocessorPeriodjs)
        val htmllibmanagerPeriodprocessorPeriodcssString = params.getAs[String]("htmllibmanagerPeriodprocessorPeriodcss")
    val htmllibmanagerPeriodprocessorPeriodcss = if("multi" == "default" || "multi" == "csv") {
      htmllibmanagerPeriodprocessorPeriodcssString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("htmllibmanagerPeriodprocessorPeriodcss: " + htmllibmanagerPeriodprocessorPeriodcss)
        val htmllibmanagerPeriodlongcachePeriodpatternsString = params.getAs[String]("htmllibmanagerPeriodlongcachePeriodpatterns")
    val htmllibmanagerPeriodlongcachePeriodpatterns = if("multi" == "default" || "multi" == "csv") {
      htmllibmanagerPeriodlongcachePeriodpatternsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("htmllibmanagerPeriodlongcachePeriodpatterns: " + htmllibmanagerPeriodlongcachePeriodpatterns)
            val htmllibmanagerPeriodlongcachePeriodformat = params.getAs[String]("htmllibmanagerPeriodlongcachePeriodformat")

    //println("htmllibmanagerPeriodlongcachePeriodformat: " + htmllibmanagerPeriodlongcachePeriodformat)
            val htmllibmanagerPerioduseFileSystemOutputCache = params.getAs[Boolean]("htmllibmanagerPerioduseFileSystemOutputCache")

    //println("htmllibmanagerPerioduseFileSystemOutputCache: " + htmllibmanagerPerioduseFileSystemOutputCache)
            val htmllibmanagerPeriodfileSystemOutputCacheLocation = params.getAs[String]("htmllibmanagerPeriodfileSystemOutputCacheLocation")

    //println("htmllibmanagerPeriodfileSystemOutputCacheLocation: " + htmllibmanagerPeriodfileSystemOutputCacheLocation)
        val htmllibmanagerPerioddisablePeriodreplacementString = params.getAs[String]("htmllibmanagerPerioddisablePeriodreplacement")
    val htmllibmanagerPerioddisablePeriodreplacement = if("multi" == "default" || "multi" == "csv") {
      htmllibmanagerPerioddisablePeriodreplacementString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("htmllibmanagerPerioddisablePeriodreplacement: " + htmllibmanagerPerioddisablePeriodreplacement)
  }

  

  val comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureOperation = (apiOperation[ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo]("comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("enabled").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.workflow.console.frags.WorkflowWithdrawFeature", operation(comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val enabled = params.getAs[Boolean]("enabled")

    //println("enabled: " + enabled)
  }

  

  val comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceOperation = (apiOperation[ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo]("comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("granitePeriodworkflowPeriodWorkflowPublishEventServicePeriodenabled").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.workflow.console.publish.WorkflowPublishEventService", operation(comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val granitePeriodworkflowPeriodWorkflowPublishEventServicePeriodenabled = params.getAs[Boolean]("granitePeriodworkflowPeriodWorkflowPublishEventServicePeriodenabled")

    //println("granitePeriodworkflowPeriodWorkflowPublishEventServicePeriodenabled: " + granitePeriodworkflowPeriodWorkflowPublishEventServicePeriodenabled)
  }

  

  val comAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerOperation = (apiOperation[ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo]("comAdobeGraniteWorkflowCoreJcrWorkflowBucketManager")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("bucketSize").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.workflow.core.jcr.WorkflowBucketManager", operation(comAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val bucketSize = params.getAs[Int]("bucketSize")

    //println("bucketSize: " + bucketSize)
  }

  

  val comAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerOperation = (apiOperation[ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo]("comAdobeGraniteWorkflowCoreJobExternalProcessJobHandler")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("defaultPeriodtimeout").description("").optional, queryParam[Int]("maxPeriodtimeout").description("").optional, queryParam[Int]("defaultPeriodperiod").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.workflow.core.job.ExternalProcessJobHandler", operation(comAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val defaultPeriodtimeout = params.getAs[Int]("defaultPeriodtimeout")

    //println("defaultPeriodtimeout: " + defaultPeriodtimeout)
            val maxPeriodtimeout = params.getAs[Int]("maxPeriodtimeout")

    //println("maxPeriodtimeout: " + maxPeriodtimeout)
            val defaultPeriodperiod = params.getAs[Int]("defaultPeriodperiod")

    //println("defaultPeriodperiod: " + defaultPeriodperiod)
  }

  

  val comAdobeGraniteWorkflowCoreJobJobHandlerOperation = (apiOperation[ComAdobeGraniteWorkflowCoreJobJobHandlerInfo]("comAdobeGraniteWorkflowCoreJobJobHandler")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("jobPeriodtopics").description("").optional, queryParam[Boolean]("allowPeriodselfPeriodprocessPeriodtermination").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.workflow.core.job.JobHandler", operation(comAdobeGraniteWorkflowCoreJobJobHandlerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val jobPeriodtopicsString = params.getAs[String]("jobPeriodtopics")
    val jobPeriodtopics = if("multi" == "default" || "multi" == "csv") {
      jobPeriodtopicsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("jobPeriodtopics: " + jobPeriodtopics)
            val allowPeriodselfPeriodprocessPeriodtermination = params.getAs[Boolean]("allowPeriodselfPeriodprocessPeriodtermination")

    //println("allowPeriodselfPeriodprocessPeriodtermination: " + allowPeriodselfPeriodprocessPeriodtermination)
  }

  

  val comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumOperation = (apiOperation[ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo]("comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("jobPeriodtopics").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.workflow.core.offloading.WorkflowOffloadingJobConsumer", operation(comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val jobPeriodtopics = params.getAs[String]("jobPeriodtopics")

    //println("jobPeriodtopics: " + jobPeriodtopics)
  }

  

  val comAdobeGraniteWorkflowCorePayloadMapCacheOperation = (apiOperation[ComAdobeGraniteWorkflowCorePayloadMapCacheInfo]("comAdobeGraniteWorkflowCorePayloadMapCache")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("getSystemWorkflowModels").description("").optional, queryParam[String]("getPackageRootPath").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.workflow.core.PayloadMapCache", operation(comAdobeGraniteWorkflowCorePayloadMapCacheOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val getSystemWorkflowModelsString = params.getAs[String]("getSystemWorkflowModels")
    val getSystemWorkflowModels = if("multi" == "default" || "multi" == "csv") {
      getSystemWorkflowModelsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("getSystemWorkflowModels: " + getSystemWorkflowModels)
            val getPackageRootPath = params.getAs[String]("getPackageRootPath")

    //println("getPackageRootPath: " + getPackageRootPath)
  }

  

  val comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerOperation = (apiOperation[ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo]("comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("payloadPeriodmovePeriodwhitePeriodlist").description("").optional, queryParam[Boolean]("payloadPeriodmovePeriodhandlePeriodfromPeriodworkflowPeriodprocess").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.workflow.core.payloadmap.PayloadMoveListener", operation(comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val payloadPeriodmovePeriodwhitePeriodlistString = params.getAs[String]("payloadPeriodmovePeriodwhitePeriodlist")
    val payloadPeriodmovePeriodwhitePeriodlist = if("multi" == "default" || "multi" == "csv") {
      payloadPeriodmovePeriodwhitePeriodlistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("payloadPeriodmovePeriodwhitePeriodlist: " + payloadPeriodmovePeriodwhitePeriodlist)
            val payloadPeriodmovePeriodhandlePeriodfromPeriodworkflowPeriodprocess = params.getAs[Boolean]("payloadPeriodmovePeriodhandlePeriodfromPeriodworkflowPeriodprocess")

    //println("payloadPeriodmovePeriodhandlePeriodfromPeriodworkflowPeriodprocess: " + payloadPeriodmovePeriodhandlePeriodfromPeriodworkflowPeriodprocess)
  }

  

  val comAdobeGraniteWorkflowCoreWorkflowConfigOperation = (apiOperation[ComAdobeGraniteWorkflowCoreWorkflowConfigInfo]("comAdobeGraniteWorkflowCoreWorkflowConfig")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("cqPeriodworkflowPeriodconfigPeriodworkflowPeriodpackagesPeriodrootPeriodpath").description("").optional, queryParam[Boolean]("cqPeriodworkflowPeriodconfigPeriodworkflowPeriodprocessPeriodlegacyPeriodmode").description("").optional, queryParam[Boolean]("cqPeriodworkflowPeriodconfigPeriodallowPeriodlocking").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.workflow.core.WorkflowConfig", operation(comAdobeGraniteWorkflowCoreWorkflowConfigOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val cqPeriodworkflowPeriodconfigPeriodworkflowPeriodpackagesPeriodrootPeriodpathString = params.getAs[String]("cqPeriodworkflowPeriodconfigPeriodworkflowPeriodpackagesPeriodrootPeriodpath")
    val cqPeriodworkflowPeriodconfigPeriodworkflowPeriodpackagesPeriodrootPeriodpath = if("multi" == "default" || "multi" == "csv") {
      cqPeriodworkflowPeriodconfigPeriodworkflowPeriodpackagesPeriodrootPeriodpathString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cqPeriodworkflowPeriodconfigPeriodworkflowPeriodpackagesPeriodrootPeriodpath: " + cqPeriodworkflowPeriodconfigPeriodworkflowPeriodpackagesPeriodrootPeriodpath)
            val cqPeriodworkflowPeriodconfigPeriodworkflowPeriodprocessPeriodlegacyPeriodmode = params.getAs[Boolean]("cqPeriodworkflowPeriodconfigPeriodworkflowPeriodprocessPeriodlegacyPeriodmode")

    //println("cqPeriodworkflowPeriodconfigPeriodworkflowPeriodprocessPeriodlegacyPeriodmode: " + cqPeriodworkflowPeriodconfigPeriodworkflowPeriodprocessPeriodlegacyPeriodmode)
            val cqPeriodworkflowPeriodconfigPeriodallowPeriodlocking = params.getAs[Boolean]("cqPeriodworkflowPeriodconfigPeriodallowPeriodlocking")

    //println("cqPeriodworkflowPeriodconfigPeriodallowPeriodlocking: " + cqPeriodworkflowPeriodconfigPeriodallowPeriodlocking)
  }

  

  val comAdobeGraniteWorkflowCoreWorkflowSessionFactoryOperation = (apiOperation[ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo]("comAdobeGraniteWorkflowCoreWorkflowSessionFactory")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("granitePeriodworkflowinboxPeriodsortPeriodpropertyName").description("").optional, queryParam[String]("granitePeriodworkflowinboxPeriodsortPeriodorder").description("").optional, queryParam[Int]("cqPeriodworkflowPeriodjobPeriodretry").description("").optional, queryParam[List[String]]("cqPeriodworkflowPeriodsuperuser").description("").optional, queryParam[Int]("granitePeriodworkflowPeriodinboxQuerySize").description("").optional, queryParam[Boolean]("granitePeriodworkflowPeriodadminUserGroupFilter").description("").optional, queryParam[Boolean]("granitePeriodworkflowPeriodenforceWorkitemAssigneePermissions").description("").optional, queryParam[Boolean]("granitePeriodworkflowPeriodenforceWorkflowInitiatorPermissions").description("").optional, queryParam[Boolean]("granitePeriodworkflowPeriodinjectTenantIdInJobTopics").description("").optional, queryParam[Int]("granitePeriodworkflowPeriodmaxPurgeSaveThreshold").description("").optional, queryParam[Int]("granitePeriodworkflowPeriodmaxPurgeQueryCount").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.workflow.core.WorkflowSessionFactory", operation(comAdobeGraniteWorkflowCoreWorkflowSessionFactoryOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val granitePeriodworkflowinboxPeriodsortPeriodpropertyName = params.getAs[String]("granitePeriodworkflowinboxPeriodsortPeriodpropertyName")

    //println("granitePeriodworkflowinboxPeriodsortPeriodpropertyName: " + granitePeriodworkflowinboxPeriodsortPeriodpropertyName)
            val granitePeriodworkflowinboxPeriodsortPeriodorder = params.getAs[String]("granitePeriodworkflowinboxPeriodsortPeriodorder")

    //println("granitePeriodworkflowinboxPeriodsortPeriodorder: " + granitePeriodworkflowinboxPeriodsortPeriodorder)
            val cqPeriodworkflowPeriodjobPeriodretry = params.getAs[Int]("cqPeriodworkflowPeriodjobPeriodretry")

    //println("cqPeriodworkflowPeriodjobPeriodretry: " + cqPeriodworkflowPeriodjobPeriodretry)
        val cqPeriodworkflowPeriodsuperuserString = params.getAs[String]("cqPeriodworkflowPeriodsuperuser")
    val cqPeriodworkflowPeriodsuperuser = if("multi" == "default" || "multi" == "csv") {
      cqPeriodworkflowPeriodsuperuserString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cqPeriodworkflowPeriodsuperuser: " + cqPeriodworkflowPeriodsuperuser)
            val granitePeriodworkflowPeriodinboxQuerySize = params.getAs[Int]("granitePeriodworkflowPeriodinboxQuerySize")

    //println("granitePeriodworkflowPeriodinboxQuerySize: " + granitePeriodworkflowPeriodinboxQuerySize)
            val granitePeriodworkflowPeriodadminUserGroupFilter = params.getAs[Boolean]("granitePeriodworkflowPeriodadminUserGroupFilter")

    //println("granitePeriodworkflowPeriodadminUserGroupFilter: " + granitePeriodworkflowPeriodadminUserGroupFilter)
            val granitePeriodworkflowPeriodenforceWorkitemAssigneePermissions = params.getAs[Boolean]("granitePeriodworkflowPeriodenforceWorkitemAssigneePermissions")

    //println("granitePeriodworkflowPeriodenforceWorkitemAssigneePermissions: " + granitePeriodworkflowPeriodenforceWorkitemAssigneePermissions)
            val granitePeriodworkflowPeriodenforceWorkflowInitiatorPermissions = params.getAs[Boolean]("granitePeriodworkflowPeriodenforceWorkflowInitiatorPermissions")

    //println("granitePeriodworkflowPeriodenforceWorkflowInitiatorPermissions: " + granitePeriodworkflowPeriodenforceWorkflowInitiatorPermissions)
            val granitePeriodworkflowPeriodinjectTenantIdInJobTopics = params.getAs[Boolean]("granitePeriodworkflowPeriodinjectTenantIdInJobTopics")

    //println("granitePeriodworkflowPeriodinjectTenantIdInJobTopics: " + granitePeriodworkflowPeriodinjectTenantIdInJobTopics)
            val granitePeriodworkflowPeriodmaxPurgeSaveThreshold = params.getAs[Int]("granitePeriodworkflowPeriodmaxPurgeSaveThreshold")

    //println("granitePeriodworkflowPeriodmaxPurgeSaveThreshold: " + granitePeriodworkflowPeriodmaxPurgeSaveThreshold)
            val granitePeriodworkflowPeriodmaxPurgeQueryCount = params.getAs[Int]("granitePeriodworkflowPeriodmaxPurgeQueryCount")

    //println("granitePeriodworkflowPeriodmaxPurgeQueryCount: " + granitePeriodworkflowPeriodmaxPurgeQueryCount)
  }

  

  val comAdobeGraniteWorkflowPurgeSchedulerOperation = (apiOperation[ComAdobeGraniteWorkflowPurgeSchedulerInfo]("comAdobeGraniteWorkflowPurgeScheduler")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("scheduledpurgePeriodname").description("").optional, queryParam[String]("scheduledpurgePeriodworkflowStatus").description("").optional, queryParam[List[String]]("scheduledpurgePeriodmodelIds").description("").optional, queryParam[Int]("scheduledpurgePerioddaysold").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.granite.workflow.purge.Scheduler", operation(comAdobeGraniteWorkflowPurgeSchedulerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val scheduledpurgePeriodname = params.getAs[String]("scheduledpurgePeriodname")

    //println("scheduledpurgePeriodname: " + scheduledpurgePeriodname)
            val scheduledpurgePeriodworkflowStatus = params.getAs[String]("scheduledpurgePeriodworkflowStatus")

    //println("scheduledpurgePeriodworkflowStatus: " + scheduledpurgePeriodworkflowStatus)
        val scheduledpurgePeriodmodelIdsString = params.getAs[String]("scheduledpurgePeriodmodelIds")
    val scheduledpurgePeriodmodelIds = if("multi" == "default" || "multi" == "csv") {
      scheduledpurgePeriodmodelIdsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("scheduledpurgePeriodmodelIds: " + scheduledpurgePeriodmodelIds)
            val scheduledpurgePerioddaysold = params.getAs[Int]("scheduledpurgePerioddaysold")

    //println("scheduledpurgePerioddaysold: " + scheduledpurgePerioddaysold)
  }

  

  val comAdobeOctopusNcommBootstrapOperation = (apiOperation[ComAdobeOctopusNcommBootstrapInfo]("comAdobeOctopusNcommBootstrap")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("maxConnections").description("").optional, queryParam[Int]("maxRequests").description("").optional, queryParam[Int]("requestTimeout").description("").optional, queryParam[Int]("requestRetries").description("").optional, queryParam[Int]("launchTimeout").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.octopus.ncomm.bootstrap", operation(comAdobeOctopusNcommBootstrapOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val maxConnections = params.getAs[Int]("maxConnections")

    //println("maxConnections: " + maxConnections)
            val maxRequests = params.getAs[Int]("maxRequests")

    //println("maxRequests: " + maxRequests)
            val requestTimeout = params.getAs[Int]("requestTimeout")

    //println("requestTimeout: " + requestTimeout)
            val requestRetries = params.getAs[Int]("requestRetries")

    //println("requestRetries: " + requestRetries)
            val launchTimeout = params.getAs[Int]("launchTimeout")

    //println("launchTimeout: " + launchTimeout)
  }

  

  val comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSOperation = (apiOperation[ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo]("comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("communitiesPeriodintegrationPeriodlivefyrePeriodslingPeriodeventPeriodfilter").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.social.integrations.livefyre.user.pingforpull.impl.PingPullServlet", operation(comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val communitiesPeriodintegrationPeriodlivefyrePeriodslingPeriodeventPeriodfilter = params.getAs[String]("communitiesPeriodintegrationPeriodlivefyrePeriodslingPeriodeventPeriodfilter")

    //println("communitiesPeriodintegrationPeriodlivefyrePeriodslingPeriodeventPeriodfilter: " + communitiesPeriodintegrationPeriodlivefyrePeriodslingPeriodeventPeriodfilter)
  }

  

  val comAdobeXmpWorkerFilesNcommXMPFilesNCommOperation = (apiOperation[ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo]("comAdobeXmpWorkerFilesNcommXMPFilesNComm")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("maxConnections").description("").optional, queryParam[String]("maxRequests").description("").optional, queryParam[String]("requestTimeout").description("").optional, queryParam[String]("logDir").description("").optional)
  )

  post("/system/console/configMgr/com.adobe.xmp.worker.files.ncomm.XMPFilesNComm", operation(comAdobeXmpWorkerFilesNcommXMPFilesNCommOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val maxConnections = params.getAs[String]("maxConnections")

    //println("maxConnections: " + maxConnections)
            val maxRequests = params.getAs[String]("maxRequests")

    //println("maxRequests: " + maxRequests)
            val requestTimeout = params.getAs[String]("requestTimeout")

    //println("requestTimeout: " + requestTimeout)
            val logDir = params.getAs[String]("logDir")

    //println("logDir: " + logDir)
  }

  

  val comDayCommonsDatasourceJdbcpoolJdbcPoolServiceOperation = (apiOperation[ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo]("comDayCommonsDatasourceJdbcpoolJdbcPoolService")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("jdbcPerioddriverPeriodclass").description("").optional, queryParam[String]("jdbcPeriodconnectionPerioduri").description("").optional, queryParam[String]("jdbcPeriodusername").description("").optional, queryParam[String]("jdbcPeriodpassword").description("").optional, queryParam[String]("jdbcPeriodvalidationPeriodquery").description("").optional, queryParam[Boolean]("defaultPeriodreadonly").description("").optional, queryParam[Boolean]("defaultPeriodautocommit").description("").optional, queryParam[Int]("poolPeriodsize").description("").optional, queryParam[Int]("poolPeriodmaxPeriodwaitPeriodmsec").description("").optional, queryParam[String]("datasourcePeriodname").description("").optional, queryParam[List[String]]("datasourcePeriodsvcPeriodproperties").description("").optional)
  )

  post("/system/console/configMgr/com.day.commons.datasource.jdbcpool.JdbcPoolService", operation(comDayCommonsDatasourceJdbcpoolJdbcPoolServiceOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val jdbcPerioddriverPeriodclass = params.getAs[String]("jdbcPerioddriverPeriodclass")

    //println("jdbcPerioddriverPeriodclass: " + jdbcPerioddriverPeriodclass)
            val jdbcPeriodconnectionPerioduri = params.getAs[String]("jdbcPeriodconnectionPerioduri")

    //println("jdbcPeriodconnectionPerioduri: " + jdbcPeriodconnectionPerioduri)
            val jdbcPeriodusername = params.getAs[String]("jdbcPeriodusername")

    //println("jdbcPeriodusername: " + jdbcPeriodusername)
            val jdbcPeriodpassword = params.getAs[String]("jdbcPeriodpassword")

    //println("jdbcPeriodpassword: " + jdbcPeriodpassword)
            val jdbcPeriodvalidationPeriodquery = params.getAs[String]("jdbcPeriodvalidationPeriodquery")

    //println("jdbcPeriodvalidationPeriodquery: " + jdbcPeriodvalidationPeriodquery)
            val defaultPeriodreadonly = params.getAs[Boolean]("defaultPeriodreadonly")

    //println("defaultPeriodreadonly: " + defaultPeriodreadonly)
            val defaultPeriodautocommit = params.getAs[Boolean]("defaultPeriodautocommit")

    //println("defaultPeriodautocommit: " + defaultPeriodautocommit)
            val poolPeriodsize = params.getAs[Int]("poolPeriodsize")

    //println("poolPeriodsize: " + poolPeriodsize)
            val poolPeriodmaxPeriodwaitPeriodmsec = params.getAs[Int]("poolPeriodmaxPeriodwaitPeriodmsec")

    //println("poolPeriodmaxPeriodwaitPeriodmsec: " + poolPeriodmaxPeriodwaitPeriodmsec)
            val datasourcePeriodname = params.getAs[String]("datasourcePeriodname")

    //println("datasourcePeriodname: " + datasourcePeriodname)
        val datasourcePeriodsvcPeriodpropertiesString = params.getAs[String]("datasourcePeriodsvcPeriodproperties")
    val datasourcePeriodsvcPeriodproperties = if("multi" == "default" || "multi" == "csv") {
      datasourcePeriodsvcPeriodpropertiesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("datasourcePeriodsvcPeriodproperties: " + datasourcePeriodsvcPeriodproperties)
  }

  

  val comDayCommonsHttpclientOperation = (apiOperation[ComDayCommonsHttpclientInfo]("comDayCommonsHttpclient")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("proxyPeriodenabled").description("").optional, queryParam[String]("proxyPeriodhost").description("").optional, queryParam[String]("proxyPerioduser").description("").optional, queryParam[String]("proxyPeriodpassword").description("").optional, queryParam[String]("proxyPeriodntlmPeriodhost").description("").optional, queryParam[String]("proxyPeriodntlmPerioddomain").description("").optional, queryParam[List[String]]("proxyPeriodexceptions").description("").optional)
  )

  post("/system/console/configMgr/com.day.commons.httpclient", operation(comDayCommonsHttpclientOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val proxyPeriodenabled = params.getAs[Boolean]("proxyPeriodenabled")

    //println("proxyPeriodenabled: " + proxyPeriodenabled)
            val proxyPeriodhost = params.getAs[String]("proxyPeriodhost")

    //println("proxyPeriodhost: " + proxyPeriodhost)
            val proxyPerioduser = params.getAs[String]("proxyPerioduser")

    //println("proxyPerioduser: " + proxyPerioduser)
            val proxyPeriodpassword = params.getAs[String]("proxyPeriodpassword")

    //println("proxyPeriodpassword: " + proxyPeriodpassword)
            val proxyPeriodntlmPeriodhost = params.getAs[String]("proxyPeriodntlmPeriodhost")

    //println("proxyPeriodntlmPeriodhost: " + proxyPeriodntlmPeriodhost)
            val proxyPeriodntlmPerioddomain = params.getAs[String]("proxyPeriodntlmPerioddomain")

    //println("proxyPeriodntlmPerioddomain: " + proxyPeriodntlmPerioddomain)
        val proxyPeriodexceptionsString = params.getAs[String]("proxyPeriodexceptions")
    val proxyPeriodexceptions = if("multi" == "default" || "multi" == "csv") {
      proxyPeriodexceptionsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("proxyPeriodexceptions: " + proxyPeriodexceptions)
  }

  

  val comDayCqAnalyticsImplStorePropertiesChangeListenerOperation = (apiOperation[ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo]("comDayCqAnalyticsImplStorePropertiesChangeListener")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("cqPeriodstorePeriodlistenerPeriodadditionalStorePaths").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.analytics.impl.StorePropertiesChangeListener", operation(comDayCqAnalyticsImplStorePropertiesChangeListenerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val cqPeriodstorePeriodlistenerPeriodadditionalStorePathsString = params.getAs[String]("cqPeriodstorePeriodlistenerPeriodadditionalStorePaths")
    val cqPeriodstorePeriodlistenerPeriodadditionalStorePaths = if("multi" == "default" || "multi" == "csv") {
      cqPeriodstorePeriodlistenerPeriodadditionalStorePathsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cqPeriodstorePeriodlistenerPeriodadditionalStorePaths: " + cqPeriodstorePeriodlistenerPeriodadditionalStorePaths)
  }

  

  val comDayCqAnalyticsSitecatalystImplExporterClassificationsExporteOperation = (apiOperation[ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo]("comDayCqAnalyticsSitecatalystImplExporterClassificationsExporte")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("allowedPeriodpaths").description("").optional, queryParam[Int]("cqPeriodanalyticsPeriodsaintPeriodexporterPeriodpagesize").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.exporter.ClassificationsExporter", operation(comDayCqAnalyticsSitecatalystImplExporterClassificationsExporteOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val allowedPeriodpathsString = params.getAs[String]("allowedPeriodpaths")
    val allowedPeriodpaths = if("multi" == "default" || "multi" == "csv") {
      allowedPeriodpathsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("allowedPeriodpaths: " + allowedPeriodpaths)
            val cqPeriodanalyticsPeriodsaintPeriodexporterPeriodpagesize = params.getAs[Int]("cqPeriodanalyticsPeriodsaintPeriodexporterPeriodpagesize")

    //println("cqPeriodanalyticsPeriodsaintPeriodexporterPeriodpagesize: " + cqPeriodanalyticsPeriodsaintPeriodexporterPeriodpagesize)
  }

  

  val comDayCqAnalyticsSitecatalystImplImporterReportImporterOperation = (apiOperation[ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo]("comDayCqAnalyticsSitecatalystImplImporterReportImporter")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("reportPeriodfetchPeriodattempts").description("").optional, queryParam[Int]("reportPeriodfetchPerioddelay").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.importer.ReportImporter", operation(comDayCqAnalyticsSitecatalystImplImporterReportImporterOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val reportPeriodfetchPeriodattempts = params.getAs[Int]("reportPeriodfetchPeriodattempts")

    //println("reportPeriodfetchPeriodattempts: " + reportPeriodfetchPeriodattempts)
            val reportPeriodfetchPerioddelay = params.getAs[Int]("reportPeriodfetchPerioddelay")

    //println("reportPeriodfetchPerioddelay: " + reportPeriodfetchPerioddelay)
  }

  

  val comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryOperation = (apiOperation[ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo]("comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("cqPeriodanalyticsPeriodadapterfactoryPeriodcontextstores").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystAdapterFactory", operation(comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val cqPeriodanalyticsPeriodadapterfactoryPeriodcontextstoresString = params.getAs[String]("cqPeriodanalyticsPeriodadapterfactoryPeriodcontextstores")
    val cqPeriodanalyticsPeriodadapterfactoryPeriodcontextstores = if("multi" == "default" || "multi" == "csv") {
      cqPeriodanalyticsPeriodadapterfactoryPeriodcontextstoresString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cqPeriodanalyticsPeriodadapterfactoryPeriodcontextstores: " + cqPeriodanalyticsPeriodadapterfactoryPeriodcontextstores)
  }

  

  val comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplOperation = (apiOperation[ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo]("comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("cqPeriodanalyticsPeriodsitecatalystPeriodservicePerioddatacenterPeriodurl").description("").optional, queryParam[List[String]]("devhostnamepatterns").description("").optional, queryParam[Int]("connectionPeriodtimeout").description("").optional, queryParam[Int]("socketPeriodtimeout").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystHttpClientImpl", operation(comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val cqPeriodanalyticsPeriodsitecatalystPeriodservicePerioddatacenterPeriodurlString = params.getAs[String]("cqPeriodanalyticsPeriodsitecatalystPeriodservicePerioddatacenterPeriodurl")
    val cqPeriodanalyticsPeriodsitecatalystPeriodservicePerioddatacenterPeriodurl = if("multi" == "default" || "multi" == "csv") {
      cqPeriodanalyticsPeriodsitecatalystPeriodservicePerioddatacenterPeriodurlString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cqPeriodanalyticsPeriodsitecatalystPeriodservicePerioddatacenterPeriodurl: " + cqPeriodanalyticsPeriodsitecatalystPeriodservicePerioddatacenterPeriodurl)
        val devhostnamepatternsString = params.getAs[String]("devhostnamepatterns")
    val devhostnamepatterns = if("multi" == "default" || "multi" == "csv") {
      devhostnamepatternsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("devhostnamepatterns: " + devhostnamepatterns)
            val connectionPeriodtimeout = params.getAs[Int]("connectionPeriodtimeout")

    //println("connectionPeriodtimeout: " + connectionPeriodtimeout)
            val socketPeriodtimeout = params.getAs[Int]("socketPeriodtimeout")

    //println("socketPeriodtimeout: " + socketPeriodtimeout)
  }

  

  val comDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterOperation = (apiOperation[ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo]("comDayCqAnalyticsTestandtargetImplAccountOptionsUpdater")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("cqPeriodanalyticsPeriodtestandtargetPeriodaccountoptionsupdaterPeriodenabled").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.AccountOptionsUpdater", operation(comDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val cqPeriodanalyticsPeriodtestandtargetPeriodaccountoptionsupdaterPeriodenabled = params.getAs[Boolean]("cqPeriodanalyticsPeriodtestandtargetPeriodaccountoptionsupdaterPeriodenabled")

    //println("cqPeriodanalyticsPeriodtestandtargetPeriodaccountoptionsupdaterPeriodenabled: " + cqPeriodanalyticsPeriodtestandtargetPeriodaccountoptionsupdaterPeriodenabled)
  }

  

  val comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerOperation = (apiOperation[ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo]("comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("cqPeriodanalyticsPeriodtestandtargetPerioddeleteauthoractivitylistenerPeriodenabled").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.DeleteAuthorActivityListener", operation(comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val cqPeriodanalyticsPeriodtestandtargetPerioddeleteauthoractivitylistenerPeriodenabled = params.getAs[Boolean]("cqPeriodanalyticsPeriodtestandtargetPerioddeleteauthoractivitylistenerPeriodenabled")

    //println("cqPeriodanalyticsPeriodtestandtargetPerioddeleteauthoractivitylistenerPeriodenabled: " + cqPeriodanalyticsPeriodtestandtargetPerioddeleteauthoractivitylistenerPeriodenabled)
  }

  

  val comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerOperation = (apiOperation[ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo]("comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("cqPeriodanalyticsPeriodtestandtargetPeriodpushauthorcampaignpagelistenerPeriodenabled").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.PushAuthorCampaignPageListener", operation(comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val cqPeriodanalyticsPeriodtestandtargetPeriodpushauthorcampaignpagelistenerPeriodenabled = params.getAs[Boolean]("cqPeriodanalyticsPeriodtestandtargetPeriodpushauthorcampaignpagelistenerPeriodenabled")

    //println("cqPeriodanalyticsPeriodtestandtargetPeriodpushauthorcampaignpagelistenerPeriodenabled: " + cqPeriodanalyticsPeriodtestandtargetPeriodpushauthorcampaignpagelistenerPeriodenabled)
  }

  

  val comDayCqAnalyticsTestandtargetImplSegmentImporterOperation = (apiOperation[ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo]("comDayCqAnalyticsTestandtargetImplSegmentImporter")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("cqPeriodanalyticsPeriodtestandtargetPeriodsegmentimporterPeriodenabled").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.SegmentImporter", operation(comDayCqAnalyticsTestandtargetImplSegmentImporterOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val cqPeriodanalyticsPeriodtestandtargetPeriodsegmentimporterPeriodenabled = params.getAs[Boolean]("cqPeriodanalyticsPeriodtestandtargetPeriodsegmentimporterPeriodenabled")

    //println("cqPeriodanalyticsPeriodtestandtargetPeriodsegmentimporterPeriodenabled: " + cqPeriodanalyticsPeriodtestandtargetPeriodsegmentimporterPeriodenabled)
  }

  

  val comDayCqAnalyticsTestandtargetImplServiceWebServiceImplOperation = (apiOperation[ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo]("comDayCqAnalyticsTestandtargetImplServiceWebServiceImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("endpointUri").description("").optional, queryParam[Int]("connectionTimeout").description("").optional, queryParam[Int]("socketTimeout").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.service.WebServiceImpl", operation(comDayCqAnalyticsTestandtargetImplServiceWebServiceImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val endpointUri = params.getAs[String]("endpointUri")

    //println("endpointUri: " + endpointUri)
            val connectionTimeout = params.getAs[Int]("connectionTimeout")

    //println("connectionTimeout: " + connectionTimeout)
            val socketTimeout = params.getAs[Int]("socketTimeout")

    //println("socketTimeout: " + socketTimeout)
  }

  

  val comDayCqAnalyticsTestandtargetImplServletsAdminServerServletOperation = (apiOperation[ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo]("comDayCqAnalyticsTestandtargetImplServletsAdminServerServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("testandtargetPeriodendpointPeriodurl").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.servlets.AdminServerServlet", operation(comDayCqAnalyticsTestandtargetImplServletsAdminServerServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val testandtargetPeriodendpointPeriodurl = params.getAs[String]("testandtargetPeriodendpointPeriodurl")

    //println("testandtargetPeriodendpointPeriodurl: " + testandtargetPeriodendpointPeriodurl)
  }

  

  val comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplOperation = (apiOperation[ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo]("comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("cqPeriodanalyticsPeriodtestandtargetPeriodapiPeriodurl").description("").optional, queryParam[Int]("cqPeriodanalyticsPeriodtestandtargetPeriodtimeout").description("").optional, queryParam[Int]("cqPeriodanalyticsPeriodtestandtargetPeriodsockettimeout").description("").optional, queryParam[String]("cqPeriodanalyticsPeriodtestandtargetPeriodrecommendationsPeriodurlPeriodreplace").description("").optional, queryParam[String]("cqPeriodanalyticsPeriodtestandtargetPeriodrecommendationsPeriodurlPeriodreplacewith").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.TestandtargetHttpClientImpl", operation(comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val cqPeriodanalyticsPeriodtestandtargetPeriodapiPeriodurl = params.getAs[String]("cqPeriodanalyticsPeriodtestandtargetPeriodapiPeriodurl")

    //println("cqPeriodanalyticsPeriodtestandtargetPeriodapiPeriodurl: " + cqPeriodanalyticsPeriodtestandtargetPeriodapiPeriodurl)
            val cqPeriodanalyticsPeriodtestandtargetPeriodtimeout = params.getAs[Int]("cqPeriodanalyticsPeriodtestandtargetPeriodtimeout")

    //println("cqPeriodanalyticsPeriodtestandtargetPeriodtimeout: " + cqPeriodanalyticsPeriodtestandtargetPeriodtimeout)
            val cqPeriodanalyticsPeriodtestandtargetPeriodsockettimeout = params.getAs[Int]("cqPeriodanalyticsPeriodtestandtargetPeriodsockettimeout")

    //println("cqPeriodanalyticsPeriodtestandtargetPeriodsockettimeout: " + cqPeriodanalyticsPeriodtestandtargetPeriodsockettimeout)
            val cqPeriodanalyticsPeriodtestandtargetPeriodrecommendationsPeriodurlPeriodreplace = params.getAs[String]("cqPeriodanalyticsPeriodtestandtargetPeriodrecommendationsPeriodurlPeriodreplace")

    //println("cqPeriodanalyticsPeriodtestandtargetPeriodrecommendationsPeriodurlPeriodreplace: " + cqPeriodanalyticsPeriodtestandtargetPeriodrecommendationsPeriodurlPeriodreplace)
            val cqPeriodanalyticsPeriodtestandtargetPeriodrecommendationsPeriodurlPeriodreplacewith = params.getAs[String]("cqPeriodanalyticsPeriodtestandtargetPeriodrecommendationsPeriodurlPeriodreplacewith")

    //println("cqPeriodanalyticsPeriodtestandtargetPeriodrecommendationsPeriodurlPeriodreplacewith: " + cqPeriodanalyticsPeriodtestandtargetPeriodrecommendationsPeriodurlPeriodreplacewith)
  }

  

  val comDayCqAuthImplCugCugSupportImplOperation = (apiOperation[ComDayCqAuthImplCugCugSupportImplInfo]("comDayCqAuthImplCugCugSupportImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("cugPeriodexemptedPeriodprincipals").description("").optional, queryParam[Boolean]("cugPeriodenabled").description("").optional, queryParam[String]("cugPeriodprincipalsPeriodregex").description("").optional, queryParam[String]("cugPeriodprincipalsPeriodreplacement").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.auth.impl.cug.CugSupportImpl", operation(comDayCqAuthImplCugCugSupportImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val cugPeriodexemptedPeriodprincipalsString = params.getAs[String]("cugPeriodexemptedPeriodprincipals")
    val cugPeriodexemptedPeriodprincipals = if("multi" == "default" || "multi" == "csv") {
      cugPeriodexemptedPeriodprincipalsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cugPeriodexemptedPeriodprincipals: " + cugPeriodexemptedPeriodprincipals)
            val cugPeriodenabled = params.getAs[Boolean]("cugPeriodenabled")

    //println("cugPeriodenabled: " + cugPeriodenabled)
            val cugPeriodprincipalsPeriodregex = params.getAs[String]("cugPeriodprincipalsPeriodregex")

    //println("cugPeriodprincipalsPeriodregex: " + cugPeriodprincipalsPeriodregex)
            val cugPeriodprincipalsPeriodreplacement = params.getAs[String]("cugPeriodprincipalsPeriodreplacement")

    //println("cugPeriodprincipalsPeriodreplacement: " + cugPeriodprincipalsPeriodreplacement)
  }

  

  val comDayCqAuthImplLoginSelectorHandlerOperation = (apiOperation[ComDayCqAuthImplLoginSelectorHandlerInfo]("comDayCqAuthImplLoginSelectorHandler")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("path").description("").optional, queryParam[Int]("servicePeriodranking").description("").optional, queryParam[List[String]]("authPeriodloginselectorPeriodmappings").description("").optional, queryParam[List[String]]("authPeriodloginselectorPeriodchangepwPeriodmappings").description("").optional, queryParam[String]("authPeriodloginselectorPerioddefaultloginpage").description("").optional, queryParam[String]("authPeriodloginselectorPerioddefaultchangepwpage").description("").optional, queryParam[List[String]]("authPeriodloginselectorPeriodhandle").description("").optional, queryParam[Boolean]("authPeriodloginselectorPeriodhandlePeriodallPeriodextensions").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.auth.impl.LoginSelectorHandler", operation(comDayCqAuthImplLoginSelectorHandlerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val path = params.getAs[String]("path")

    //println("path: " + path)
            val servicePeriodranking = params.getAs[Int]("servicePeriodranking")

    //println("servicePeriodranking: " + servicePeriodranking)
        val authPeriodloginselectorPeriodmappingsString = params.getAs[String]("authPeriodloginselectorPeriodmappings")
    val authPeriodloginselectorPeriodmappings = if("multi" == "default" || "multi" == "csv") {
      authPeriodloginselectorPeriodmappingsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("authPeriodloginselectorPeriodmappings: " + authPeriodloginselectorPeriodmappings)
        val authPeriodloginselectorPeriodchangepwPeriodmappingsString = params.getAs[String]("authPeriodloginselectorPeriodchangepwPeriodmappings")
    val authPeriodloginselectorPeriodchangepwPeriodmappings = if("multi" == "default" || "multi" == "csv") {
      authPeriodloginselectorPeriodchangepwPeriodmappingsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("authPeriodloginselectorPeriodchangepwPeriodmappings: " + authPeriodloginselectorPeriodchangepwPeriodmappings)
            val authPeriodloginselectorPerioddefaultloginpage = params.getAs[String]("authPeriodloginselectorPerioddefaultloginpage")

    //println("authPeriodloginselectorPerioddefaultloginpage: " + authPeriodloginselectorPerioddefaultloginpage)
            val authPeriodloginselectorPerioddefaultchangepwpage = params.getAs[String]("authPeriodloginselectorPerioddefaultchangepwpage")

    //println("authPeriodloginselectorPerioddefaultchangepwpage: " + authPeriodloginselectorPerioddefaultchangepwpage)
        val authPeriodloginselectorPeriodhandleString = params.getAs[String]("authPeriodloginselectorPeriodhandle")
    val authPeriodloginselectorPeriodhandle = if("multi" == "default" || "multi" == "csv") {
      authPeriodloginselectorPeriodhandleString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("authPeriodloginselectorPeriodhandle: " + authPeriodloginselectorPeriodhandle)
            val authPeriodloginselectorPeriodhandlePeriodallPeriodextensions = params.getAs[Boolean]("authPeriodloginselectorPeriodhandlePeriodallPeriodextensions")

    //println("authPeriodloginselectorPeriodhandlePeriodallPeriodextensions: " + authPeriodloginselectorPeriodhandlePeriodallPeriodextensions)
  }

  

  val comDayCqCommonsImplExternalizerImplOperation = (apiOperation[ComDayCqCommonsImplExternalizerImplInfo]("comDayCqCommonsImplExternalizerImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("externalizerPerioddomains").description("").optional, queryParam[String]("externalizerPeriodhost").description("").optional, queryParam[String]("externalizerPeriodcontextpath").description("").optional, queryParam[Boolean]("externalizerPeriodencodedpath").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.commons.impl.ExternalizerImpl", operation(comDayCqCommonsImplExternalizerImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val externalizerPerioddomainsString = params.getAs[String]("externalizerPerioddomains")
    val externalizerPerioddomains = if("multi" == "default" || "multi" == "csv") {
      externalizerPerioddomainsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("externalizerPerioddomains: " + externalizerPerioddomains)
            val externalizerPeriodhost = params.getAs[String]("externalizerPeriodhost")

    //println("externalizerPeriodhost: " + externalizerPeriodhost)
            val externalizerPeriodcontextpath = params.getAs[String]("externalizerPeriodcontextpath")

    //println("externalizerPeriodcontextpath: " + externalizerPeriodcontextpath)
            val externalizerPeriodencodedpath = params.getAs[Boolean]("externalizerPeriodencodedpath")

    //println("externalizerPeriodencodedpath: " + externalizerPeriodencodedpath)
  }

  

  val comDayCqCommonsServletsRootMappingServletOperation = (apiOperation[ComDayCqCommonsServletsRootMappingServletInfo]("comDayCqCommonsServletsRootMappingServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("rootmappingPeriodtarget").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.commons.servlets.RootMappingServlet", operation(comDayCqCommonsServletsRootMappingServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val rootmappingPeriodtarget = params.getAs[String]("rootmappingPeriodtarget")

    //println("rootmappingPeriodtarget: " + rootmappingPeriodtarget)
  }

  

  val comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeOperation = (apiOperation[ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo]("comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("codeupgradetasks").description("").optional, queryParam[List[String]]("codeupgradetaskfilters").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.CodeUpgradeExecutionConditionChecker", operation(comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val codeupgradetasksString = params.getAs[String]("codeupgradetasks")
    val codeupgradetasks = if("multi" == "default" || "multi" == "csv") {
      codeupgradetasksString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("codeupgradetasks: " + codeupgradetasks)
        val codeupgradetaskfiltersString = params.getAs[String]("codeupgradetaskfilters")
    val codeupgradetaskfilters = if("multi" == "default" || "multi" == "csv") {
      codeupgradetaskfiltersString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("codeupgradetaskfilters: " + codeupgradetaskfilters)
  }

  

  val comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListOperation = (apiOperation[ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo]("comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("upgradeTaskIgnoreList").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.UpgradeTaskIgnoreList", operation(comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val upgradeTaskIgnoreListString = params.getAs[String]("upgradeTaskIgnoreList")
    val upgradeTaskIgnoreList = if("multi" == "default" || "multi" == "csv") {
      upgradeTaskIgnoreListString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("upgradeTaskIgnoreList: " + upgradeTaskIgnoreList)
  }

  

  val comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistOperation = (apiOperation[ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo]("comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("effectiveBundleListPath").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.VersionRangeTaskIgnorelist", operation(comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val effectiveBundleListPath = params.getAs[String]("effectiveBundleListPath")

    //println("effectiveBundleListPath: " + effectiveBundleListPath)
  }

  

  val comDayCqContentsyncImplContentSyncManagerImplOperation = (apiOperation[ComDayCqContentsyncImplContentSyncManagerImplInfo]("comDayCqContentsyncImplContentSyncManagerImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("contentsyncPeriodfallbackPeriodauthorizable").description("").optional, queryParam[String]("contentsyncPeriodfallbackPeriodupdateuser").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.contentsync.impl.ContentSyncManagerImpl", operation(comDayCqContentsyncImplContentSyncManagerImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val contentsyncPeriodfallbackPeriodauthorizable = params.getAs[String]("contentsyncPeriodfallbackPeriodauthorizable")

    //println("contentsyncPeriodfallbackPeriodauthorizable: " + contentsyncPeriodfallbackPeriodauthorizable)
            val contentsyncPeriodfallbackPeriodupdateuser = params.getAs[String]("contentsyncPeriodfallbackPeriodupdateuser")

    //println("contentsyncPeriodfallbackPeriodupdateuser: " + contentsyncPeriodfallbackPeriodupdateuser)
  }

  

  val comDayCqDamCommonsHandlerStandardImageHandlerOperation = (apiOperation[ComDayCqDamCommonsHandlerStandardImageHandlerInfo]("comDayCqDamCommonsHandlerStandardImageHandler")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("largeFileThreshold").description("").optional, queryParam[Int]("largeCommentThreshold").description("").optional, queryParam[Boolean]("cqPerioddamPeriodenablePeriodextPeriodmetaPeriodextraction").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.commons.handler.StandardImageHandler", operation(comDayCqDamCommonsHandlerStandardImageHandlerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val largeFileThreshold = params.getAs[Int]("largeFileThreshold")

    //println("largeFileThreshold: " + largeFileThreshold)
            val largeCommentThreshold = params.getAs[Int]("largeCommentThreshold")

    //println("largeCommentThreshold: " + largeCommentThreshold)
            val cqPerioddamPeriodenablePeriodextPeriodmetaPeriodextraction = params.getAs[Boolean]("cqPerioddamPeriodenablePeriodextPeriodmetaPeriodextraction")

    //println("cqPerioddamPeriodenablePeriodextPeriodmetaPeriodextraction: " + cqPerioddamPeriodenablePeriodextPeriodmetaPeriodextraction)
  }

  

  val comDayCqDamCommonsMetadataXmpFilterBlackWhiteOperation = (apiOperation[ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo]("comDayCqDamCommonsMetadataXmpFilterBlackWhite")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("xmpPeriodfilterPeriodapplyWhitelist").description("").optional, queryParam[List[String]]("xmpPeriodfilterPeriodwhitelist").description("").optional, queryParam[Boolean]("xmpPeriodfilterPeriodapplyBlacklist").description("").optional, queryParam[List[String]]("xmpPeriodfilterPeriodblacklist").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.commons.metadata.XmpFilterBlackWhite", operation(comDayCqDamCommonsMetadataXmpFilterBlackWhiteOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val xmpPeriodfilterPeriodapplyWhitelist = params.getAs[Boolean]("xmpPeriodfilterPeriodapplyWhitelist")

    //println("xmpPeriodfilterPeriodapplyWhitelist: " + xmpPeriodfilterPeriodapplyWhitelist)
        val xmpPeriodfilterPeriodwhitelistString = params.getAs[String]("xmpPeriodfilterPeriodwhitelist")
    val xmpPeriodfilterPeriodwhitelist = if("multi" == "default" || "multi" == "csv") {
      xmpPeriodfilterPeriodwhitelistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("xmpPeriodfilterPeriodwhitelist: " + xmpPeriodfilterPeriodwhitelist)
            val xmpPeriodfilterPeriodapplyBlacklist = params.getAs[Boolean]("xmpPeriodfilterPeriodapplyBlacklist")

    //println("xmpPeriodfilterPeriodapplyBlacklist: " + xmpPeriodfilterPeriodapplyBlacklist)
        val xmpPeriodfilterPeriodblacklistString = params.getAs[String]("xmpPeriodfilterPeriodblacklist")
    val xmpPeriodfilterPeriodblacklist = if("multi" == "default" || "multi" == "csv") {
      xmpPeriodfilterPeriodblacklistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("xmpPeriodfilterPeriodblacklist: " + xmpPeriodfilterPeriodblacklist)
  }

  

  val comDayCqDamCommonsUtilImplAssetCacheImplOperation = (apiOperation[ComDayCqDamCommonsUtilImplAssetCacheImplInfo]("comDayCqDamCommonsUtilImplAssetCacheImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("largePeriodfilePeriodmin").description("").optional, queryParam[Boolean]("cachePeriodapply").description("").optional, queryParam[List[String]]("mimePeriodtypes").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.commons.util.impl.AssetCacheImpl", operation(comDayCqDamCommonsUtilImplAssetCacheImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val largePeriodfilePeriodmin = params.getAs[Int]("largePeriodfilePeriodmin")

    //println("largePeriodfilePeriodmin: " + largePeriodfilePeriodmin)
            val cachePeriodapply = params.getAs[Boolean]("cachePeriodapply")

    //println("cachePeriodapply: " + cachePeriodapply)
        val mimePeriodtypesString = params.getAs[String]("mimePeriodtypes")
    val mimePeriodtypes = if("multi" == "default" || "multi" == "csv") {
      mimePeriodtypesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("mimePeriodtypes: " + mimePeriodtypes)
  }

  

  val comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigOperation = (apiOperation[ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo]("comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodwidth").description("").optional, queryParam[Int]("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodheight").description("").optional, queryParam[Int]("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodpaddingPeriodhorizontal").description("").optional, queryParam[Int]("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodpaddingPeriodvertical").description("").optional, queryParam[Int]("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodsize").description("").optional, queryParam[String]("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodcolor").description("").optional, queryParam[String]("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodfamily").description("").optional, queryParam[String]("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodlight").description("").optional, queryParam[Int]("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodmarginTextImage").description("").optional, queryParam[Int]("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodminImageHeight").description("").optional, queryParam[Int]("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodwidth").description("").optional, queryParam[String]("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodapproved").description("").optional, queryParam[String]("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodrejected").description("").optional, queryParam[String]("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodchangesRequested").description("").optional, queryParam[Int]("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodannotationMarkerPeriodwidth").description("").optional, queryParam[Int]("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodassetPeriodminheight").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.core.impl.annotation.pdf.AnnotationPdfConfig", operation(comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodwidth = params.getAs[Int]("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodwidth")

    //println("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodwidth: " + cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodwidth)
            val cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodheight = params.getAs[Int]("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodheight")

    //println("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodheight: " + cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodheight)
            val cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodpaddingPeriodhorizontal = params.getAs[Int]("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodpaddingPeriodhorizontal")

    //println("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodpaddingPeriodhorizontal: " + cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodpaddingPeriodhorizontal)
            val cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodpaddingPeriodvertical = params.getAs[Int]("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodpaddingPeriodvertical")

    //println("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodpaddingPeriodvertical: " + cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodpaddingPeriodvertical)
            val cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodsize = params.getAs[Int]("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodsize")

    //println("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodsize: " + cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodsize)
            val cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodcolor = params.getAs[String]("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodcolor")

    //println("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodcolor: " + cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodcolor)
            val cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodfamily = params.getAs[String]("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodfamily")

    //println("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodfamily: " + cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodfamily)
            val cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodlight = params.getAs[String]("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodlight")

    //println("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodlight: " + cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodlight)
            val cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodmarginTextImage = params.getAs[Int]("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodmarginTextImage")

    //println("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodmarginTextImage: " + cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodmarginTextImage)
            val cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodminImageHeight = params.getAs[Int]("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodminImageHeight")

    //println("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodminImageHeight: " + cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodminImageHeight)
            val cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodwidth = params.getAs[Int]("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodwidth")

    //println("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodwidth: " + cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodwidth)
            val cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodapproved = params.getAs[String]("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodapproved")

    //println("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodapproved: " + cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodapproved)
            val cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodrejected = params.getAs[String]("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodrejected")

    //println("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodrejected: " + cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodrejected)
            val cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodchangesRequested = params.getAs[String]("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodchangesRequested")

    //println("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodchangesRequested: " + cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodchangesRequested)
            val cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodannotationMarkerPeriodwidth = params.getAs[Int]("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodannotationMarkerPeriodwidth")

    //println("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodannotationMarkerPeriodwidth: " + cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodannotationMarkerPeriodwidth)
            val cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodassetPeriodminheight = params.getAs[Int]("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodassetPeriodminheight")

    //println("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodassetPeriodminheight: " + cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodassetPeriodminheight)
  }

  

  val comDayCqDamCoreImplAssetMoveListenerOperation = (apiOperation[ComDayCqDamCoreImplAssetMoveListenerInfo]("comDayCqDamCoreImplAssetMoveListener")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("enabled").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.core.impl.AssetMoveListener", operation(comDayCqDamCoreImplAssetMoveListenerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val enabled = params.getAs[Boolean]("enabled")

    //println("enabled: " + enabled)
  }

  

  val comDayCqDamCoreImplAssethomeAssetHomePageConfigurationOperation = (apiOperation[ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo]("comDayCqDamCoreImplAssethomeAssetHomePageConfiguration")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("isEnabled").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.core.impl.assethome.AssetHomePageConfiguration", operation(comDayCqDamCoreImplAssethomeAssetHomePageConfigurationOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val isEnabled = params.getAs[Boolean]("isEnabled")

    //println("isEnabled: " + isEnabled)
  }

  

  val comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletOperation = (apiOperation[ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo]("comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("cqPerioddamPeriodadhocPeriodassetPeriodsharePeriodprezipPeriodmaxcontentsize").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.core.impl.assetlinkshare.AdhocAssetShareProxyServlet", operation(comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val cqPerioddamPeriodadhocPeriodassetPeriodsharePeriodprezipPeriodmaxcontentsize = params.getAs[Int]("cqPerioddamPeriodadhocPeriodassetPeriodsharePeriodprezipPeriodmaxcontentsize")

    //println("cqPerioddamPeriodadhocPeriodassetPeriodsharePeriodprezipPeriodmaxcontentsize: " + cqPerioddamPeriodadhocPeriodassetPeriodsharePeriodprezipPeriodmaxcontentsize)
  }

  

  val comDayCqDamCoreImplCacheCQBufferedImageCacheOperation = (apiOperation[ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo]("comDayCqDamCoreImplCacheCQBufferedImageCache")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("cqPerioddamPeriodimagePeriodcachePeriodmaxPeriodmemory").description("").optional, queryParam[Int]("cqPerioddamPeriodimagePeriodcachePeriodmaxPeriodage").description("").optional, queryParam[String]("cqPerioddamPeriodimagePeriodcachePeriodmaxPerioddimension").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.core.impl.cache.CQBufferedImageCache", operation(comDayCqDamCoreImplCacheCQBufferedImageCacheOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val cqPerioddamPeriodimagePeriodcachePeriodmaxPeriodmemory = params.getAs[Int]("cqPerioddamPeriodimagePeriodcachePeriodmaxPeriodmemory")

    //println("cqPerioddamPeriodimagePeriodcachePeriodmaxPeriodmemory: " + cqPerioddamPeriodimagePeriodcachePeriodmaxPeriodmemory)
            val cqPerioddamPeriodimagePeriodcachePeriodmaxPeriodage = params.getAs[Int]("cqPerioddamPeriodimagePeriodcachePeriodmaxPeriodage")

    //println("cqPerioddamPeriodimagePeriodcachePeriodmaxPeriodage: " + cqPerioddamPeriodimagePeriodcachePeriodmaxPeriodage)
            val cqPerioddamPeriodimagePeriodcachePeriodmaxPerioddimension = params.getAs[String]("cqPerioddamPeriodimagePeriodcachePeriodmaxPerioddimension")

    //println("cqPerioddamPeriodimagePeriodcachePeriodmaxPerioddimension: " + cqPerioddamPeriodimagePeriodcachePeriodmaxPerioddimension)
  }

  

  val comDayCqDamCoreImplDamChangeEventListenerOperation = (apiOperation[ComDayCqDamCoreImplDamChangeEventListenerInfo]("comDayCqDamCoreImplDamChangeEventListener")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("changeeventlistenerPeriodobservedPeriodpaths").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.core.impl.DamChangeEventListener", operation(comDayCqDamCoreImplDamChangeEventListenerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val changeeventlistenerPeriodobservedPeriodpathsString = params.getAs[String]("changeeventlistenerPeriodobservedPeriodpaths")
    val changeeventlistenerPeriodobservedPeriodpaths = if("multi" == "default" || "multi" == "csv") {
      changeeventlistenerPeriodobservedPeriodpathsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("changeeventlistenerPeriodobservedPeriodpaths: " + changeeventlistenerPeriodobservedPeriodpaths)
  }

  

  val comDayCqDamCoreImplDamEventPurgeServiceOperation = (apiOperation[ComDayCqDamCoreImplDamEventPurgeServiceInfo]("comDayCqDamCoreImplDamEventPurgeService")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("schedulerPeriodexpression").description("").optional, queryParam[Int]("maxSavedActivities").description("").optional, queryParam[Int]("saveInterval").description("").optional, queryParam[Boolean]("enableActivityPurge").description("").optional, queryParam[String]("eventTypes").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.core.impl.DamEventPurgeService", operation(comDayCqDamCoreImplDamEventPurgeServiceOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val schedulerPeriodexpression = params.getAs[String]("schedulerPeriodexpression")

    //println("schedulerPeriodexpression: " + schedulerPeriodexpression)
            val maxSavedActivities = params.getAs[Int]("maxSavedActivities")

    //println("maxSavedActivities: " + maxSavedActivities)
            val saveInterval = params.getAs[Int]("saveInterval")

    //println("saveInterval: " + saveInterval)
            val enableActivityPurge = params.getAs[Boolean]("enableActivityPurge")

    //println("enableActivityPurge: " + enableActivityPurge)
            val eventTypes = params.getAs[String]("eventTypes")

    //println("eventTypes: " + eventTypes)
  }

  

  val comDayCqDamCoreImplDamEventRecorderImplOperation = (apiOperation[ComDayCqDamCoreImplDamEventRecorderImplInfo]("comDayCqDamCoreImplDamEventRecorderImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("eventPeriodfilter").description("").optional, queryParam[Int]("eventPeriodqueuePeriodlength").description("").optional, queryParam[Boolean]("eventrecorderPeriodenabled").description("").optional, queryParam[List[String]]("eventrecorderPeriodblacklist").description("").optional, queryParam[String]("eventrecorderPeriodeventtypes").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.core.impl.DamEventRecorderImpl", operation(comDayCqDamCoreImplDamEventRecorderImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val eventPeriodfilter = params.getAs[String]("eventPeriodfilter")

    //println("eventPeriodfilter: " + eventPeriodfilter)
            val eventPeriodqueuePeriodlength = params.getAs[Int]("eventPeriodqueuePeriodlength")

    //println("eventPeriodqueuePeriodlength: " + eventPeriodqueuePeriodlength)
            val eventrecorderPeriodenabled = params.getAs[Boolean]("eventrecorderPeriodenabled")

    //println("eventrecorderPeriodenabled: " + eventrecorderPeriodenabled)
        val eventrecorderPeriodblacklistString = params.getAs[String]("eventrecorderPeriodblacklist")
    val eventrecorderPeriodblacklist = if("multi" == "default" || "multi" == "csv") {
      eventrecorderPeriodblacklistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("eventrecorderPeriodblacklist: " + eventrecorderPeriodblacklist)
            val eventrecorderPeriodeventtypes = params.getAs[String]("eventrecorderPeriodeventtypes")

    //println("eventrecorderPeriodeventtypes: " + eventrecorderPeriodeventtypes)
  }

  

  val comDayCqDamCoreImplEventDamEventAuditListenerOperation = (apiOperation[ComDayCqDamCoreImplEventDamEventAuditListenerInfo]("comDayCqDamCoreImplEventDamEventAuditListener")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("eventPeriodfilter").description("").optional, queryParam[Boolean]("enabled").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.core.impl.event.DamEventAuditListener", operation(comDayCqDamCoreImplEventDamEventAuditListenerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val eventPeriodfilter = params.getAs[String]("eventPeriodfilter")

    //println("eventPeriodfilter: " + eventPeriodfilter)
            val enabled = params.getAs[Boolean]("enabled")

    //println("enabled: " + enabled)
  }

  

  val comDayCqDamCoreImplExpiryNotificationJobImplOperation = (apiOperation[ComDayCqDamCoreImplExpiryNotificationJobImplInfo]("comDayCqDamCoreImplExpiryNotificationJobImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodistimebased").description("").optional, queryParam[String]("cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodtimebasedPeriodrule").description("").optional, queryParam[Int]("cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodperiodPeriodrule").description("").optional, queryParam[Boolean]("sendEmail").description("").optional, queryParam[Int]("assetExpiredLimit").description("").optional, queryParam[Int]("priorNotificationSeconds").description("").optional, queryParam[String]("cqPerioddamPeriodexpiryPeriodnotificationPeriodurlPeriodprotocol").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.core.impl.ExpiryNotificationJobImpl", operation(comDayCqDamCoreImplExpiryNotificationJobImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodistimebased = params.getAs[Boolean]("cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodistimebased")

    //println("cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodistimebased: " + cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodistimebased)
            val cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodtimebasedPeriodrule = params.getAs[String]("cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodtimebasedPeriodrule")

    //println("cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodtimebasedPeriodrule: " + cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodtimebasedPeriodrule)
            val cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodperiodPeriodrule = params.getAs[Int]("cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodperiodPeriodrule")

    //println("cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodperiodPeriodrule: " + cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodperiodPeriodrule)
            val sendEmail = params.getAs[Boolean]("sendEmail")

    //println("sendEmail: " + sendEmail)
            val assetExpiredLimit = params.getAs[Int]("assetExpiredLimit")

    //println("assetExpiredLimit: " + assetExpiredLimit)
            val priorNotificationSeconds = params.getAs[Int]("priorNotificationSeconds")

    //println("priorNotificationSeconds: " + priorNotificationSeconds)
            val cqPerioddamPeriodexpiryPeriodnotificationPeriodurlPeriodprotocol = params.getAs[String]("cqPerioddamPeriodexpiryPeriodnotificationPeriodurlPeriodprotocol")

    //println("cqPerioddamPeriodexpiryPeriodnotificationPeriodurlPeriodprotocol: " + cqPerioddamPeriodexpiryPeriodnotificationPeriodurlPeriodprotocol)
  }

  

  val comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatOperation = (apiOperation[ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo]("comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("isEnabled").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.core.impl.foldermetadataschema.FolderMetadataSchemaFeatureFlag", operation(comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val isEnabled = params.getAs[Boolean]("isEnabled")

    //println("isEnabled: " + isEnabled)
  }

  

  val comDayCqDamCoreImplGfxCommonsGfxRendererOperation = (apiOperation[ComDayCqDamCoreImplGfxCommonsGfxRendererInfo]("comDayCqDamCoreImplGfxCommonsGfxRenderer")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("skipPeriodbufferedcache").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.core.impl.gfx.CommonsGfxRenderer", operation(comDayCqDamCoreImplGfxCommonsGfxRendererOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val skipPeriodbufferedcache = params.getAs[Boolean]("skipPeriodbufferedcache")

    //println("skipPeriodbufferedcache: " + skipPeriodbufferedcache)
  }

  

  val comDayCqDamCoreImplHandlerEPSFormatHandlerOperation = (apiOperation[ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo]("comDayCqDamCoreImplHandlerEPSFormatHandler")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("mimetype").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.core.impl.handler.EPSFormatHandler", operation(comDayCqDamCoreImplHandlerEPSFormatHandlerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val mimetype = params.getAs[String]("mimetype")

    //println("mimetype: " + mimetype)
  }

  

  val comDayCqDamCoreImplHandlerIndesignFormatHandlerOperation = (apiOperation[ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo]("comDayCqDamCoreImplHandlerIndesignFormatHandler")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("mimetype").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.core.impl.handler.IndesignFormatHandler", operation(comDayCqDamCoreImplHandlerIndesignFormatHandlerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val mimetypeString = params.getAs[String]("mimetype")
    val mimetype = if("multi" == "default" || "multi" == "csv") {
      mimetypeString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("mimetype: " + mimetype)
  }

  

  val comDayCqDamCoreImplHandlerJpegHandlerOperation = (apiOperation[ComDayCqDamCoreImplHandlerJpegHandlerInfo]("comDayCqDamCoreImplHandlerJpegHandler")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("cqPerioddamPeriodenablePeriodextPeriodmetaPeriodextraction").description("").optional, queryParam[Int]("largeFileThreshold").description("").optional, queryParam[Int]("largeCommentThreshold").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.core.impl.handler.JpegHandler", operation(comDayCqDamCoreImplHandlerJpegHandlerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val cqPerioddamPeriodenablePeriodextPeriodmetaPeriodextraction = params.getAs[Boolean]("cqPerioddamPeriodenablePeriodextPeriodmetaPeriodextraction")

    //println("cqPerioddamPeriodenablePeriodextPeriodmetaPeriodextraction: " + cqPerioddamPeriodenablePeriodextPeriodmetaPeriodextraction)
            val largeFileThreshold = params.getAs[Int]("largeFileThreshold")

    //println("largeFileThreshold: " + largeFileThreshold)
            val largeCommentThreshold = params.getAs[Int]("largeCommentThreshold")

    //println("largeCommentThreshold: " + largeCommentThreshold)
  }

  

  val comDayCqDamCoreImplHandlerXmpNCommXMPHandlerOperation = (apiOperation[ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo]("comDayCqDamCoreImplHandlerXmpNCommXMPHandler")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("xmphandlerPeriodcqPeriodformats").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.core.impl.handler.xmp.NCommXMPHandler", operation(comDayCqDamCoreImplHandlerXmpNCommXMPHandlerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val xmphandlerPeriodcqPeriodformatsString = params.getAs[String]("xmphandlerPeriodcqPeriodformats")
    val xmphandlerPeriodcqPeriodformats = if("multi" == "default" || "multi" == "csv") {
      xmphandlerPeriodcqPeriodformatsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("xmphandlerPeriodcqPeriodformats: " + xmphandlerPeriodcqPeriodformats)
  }

  

  val comDayCqDamCoreImplJmxAssetIndexUpdateMonitorOperation = (apiOperation[ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo]("comDayCqDamCoreImplJmxAssetIndexUpdateMonitor")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("jmxPeriodobjectname").description("").optional, queryParam[Boolean]("propertyPeriodmeasurePeriodenabled").description("").optional, queryParam[String]("propertyPeriodname").description("").optional, queryParam[Int]("propertyPeriodmaxPeriodwaitPeriodms").description("").optional, queryParam[BigDecimal]("propertyPeriodmaxPeriodrate").description("").optional, queryParam[Boolean]("fulltextPeriodmeasurePeriodenabled").description("").optional, queryParam[String]("fulltextPeriodname").description("").optional, queryParam[Int]("fulltextPeriodmaxPeriodwaitPeriodms").description("").optional, queryParam[BigDecimal]("fulltextPeriodmaxPeriodrate").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetIndexUpdateMonitor", operation(comDayCqDamCoreImplJmxAssetIndexUpdateMonitorOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val jmxPeriodobjectname = params.getAs[String]("jmxPeriodobjectname")

    //println("jmxPeriodobjectname: " + jmxPeriodobjectname)
            val propertyPeriodmeasurePeriodenabled = params.getAs[Boolean]("propertyPeriodmeasurePeriodenabled")

    //println("propertyPeriodmeasurePeriodenabled: " + propertyPeriodmeasurePeriodenabled)
            val propertyPeriodname = params.getAs[String]("propertyPeriodname")

    //println("propertyPeriodname: " + propertyPeriodname)
            val propertyPeriodmaxPeriodwaitPeriodms = params.getAs[Int]("propertyPeriodmaxPeriodwaitPeriodms")

    //println("propertyPeriodmaxPeriodwaitPeriodms: " + propertyPeriodmaxPeriodwaitPeriodms)
            val propertyPeriodmaxPeriodrate = params.getAs[BigDecimal]("propertyPeriodmaxPeriodrate")

    //println("propertyPeriodmaxPeriodrate: " + propertyPeriodmaxPeriodrate)
            val fulltextPeriodmeasurePeriodenabled = params.getAs[Boolean]("fulltextPeriodmeasurePeriodenabled")

    //println("fulltextPeriodmeasurePeriodenabled: " + fulltextPeriodmeasurePeriodenabled)
            val fulltextPeriodname = params.getAs[String]("fulltextPeriodname")

    //println("fulltextPeriodname: " + fulltextPeriodname)
            val fulltextPeriodmaxPeriodwaitPeriodms = params.getAs[Int]("fulltextPeriodmaxPeriodwaitPeriodms")

    //println("fulltextPeriodmaxPeriodwaitPeriodms: " + fulltextPeriodmaxPeriodwaitPeriodms)
            val fulltextPeriodmaxPeriodrate = params.getAs[BigDecimal]("fulltextPeriodmaxPeriodrate")

    //println("fulltextPeriodmaxPeriodrate: " + fulltextPeriodmaxPeriodrate)
  }

  

  val comDayCqDamCoreImplJmxAssetMigrationMBeanImplOperation = (apiOperation[ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo]("comDayCqDamCoreImplJmxAssetMigrationMBeanImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("jmxPeriodobjectname").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetMigrationMBeanImpl", operation(comDayCqDamCoreImplJmxAssetMigrationMBeanImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val jmxPeriodobjectname = params.getAs[String]("jmxPeriodobjectname")

    //println("jmxPeriodobjectname: " + jmxPeriodobjectname)
  }

  

  val comDayCqDamCoreImplJmxAssetUpdateMonitorImplOperation = (apiOperation[ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo]("comDayCqDamCoreImplJmxAssetUpdateMonitorImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("jmxPeriodobjectname").description("").optional, queryParam[Boolean]("active").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetUpdateMonitorImpl", operation(comDayCqDamCoreImplJmxAssetUpdateMonitorImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val jmxPeriodobjectname = params.getAs[String]("jmxPeriodobjectname")

    //println("jmxPeriodobjectname: " + jmxPeriodobjectname)
            val active = params.getAs[Boolean]("active")

    //println("active: " + active)
  }

  

  val comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigOperation = (apiOperation[ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo]("comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("operation").description("").optional, queryParam[Boolean]("emailEnabled").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataexport.AsyncMetadataExportConfigProviderService", operation(comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val operation = params.getAs[String]("operation")

    //println("operation: " + operation)
            val emailEnabled = params.getAs[Boolean]("emailEnabled")

    //println("emailEnabled: " + emailEnabled)
  }

  

  val comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigOperation = (apiOperation[ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo]("comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("operation").description("").optional, queryParam[String]("operationIcon").description("").optional, queryParam[String]("topicName").description("").optional, queryParam[Boolean]("emailEnabled").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataimport.AsyncMetadataImportConfigProviderService", operation(comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val operation = params.getAs[String]("operation")

    //println("operation: " + operation)
            val operationIcon = params.getAs[String]("operationIcon")

    //println("operationIcon: " + operationIcon)
            val topicName = params.getAs[String]("topicName")

    //println("topicName: " + topicName)
            val emailEnabled = params.getAs[Boolean]("emailEnabled")

    //println("emailEnabled: " + emailEnabled)
  }

  

  val comDayCqDamCoreImplLightboxLightboxServletOperation = (apiOperation[ComDayCqDamCoreImplLightboxLightboxServletInfo]("comDayCqDamCoreImplLightboxLightboxServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("slingPeriodservletPeriodpaths").description("").optional, queryParam[List[String]]("slingPeriodservletPeriodmethods").description("").optional, queryParam[Boolean]("cqPerioddamPeriodenablePeriodanonymous").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.core.impl.lightbox.LightboxServlet", operation(comDayCqDamCoreImplLightboxLightboxServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val slingPeriodservletPeriodpaths = params.getAs[String]("slingPeriodservletPeriodpaths")

    //println("slingPeriodservletPeriodpaths: " + slingPeriodservletPeriodpaths)
        val slingPeriodservletPeriodmethodsString = params.getAs[String]("slingPeriodservletPeriodmethods")
    val slingPeriodservletPeriodmethods = if("multi" == "default" || "multi" == "csv") {
      slingPeriodservletPeriodmethodsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("slingPeriodservletPeriodmethods: " + slingPeriodservletPeriodmethods)
            val cqPerioddamPeriodenablePeriodanonymous = params.getAs[Boolean]("cqPerioddamPeriodenablePeriodanonymous")

    //println("cqPerioddamPeriodenablePeriodanonymous: " + cqPerioddamPeriodenablePeriodanonymous)
  }

  

  val comDayCqDamCoreImplMetadataEditorSelectComponentHandlerOperation = (apiOperation[ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo]("comDayCqDamCoreImplMetadataEditorSelectComponentHandler")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("graniteData").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.core.impl.metadata.editor.SelectComponentHandler", operation(comDayCqDamCoreImplMetadataEditorSelectComponentHandlerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val graniteDataString = params.getAs[String]("graniteData")
    val graniteData = if("multi" == "default" || "multi" == "csv") {
      graniteDataString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("graniteData: " + graniteData)
  }

  

  val comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperOperation = (apiOperation[ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo]("comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("cqPerioddamPeriodallowPeriodallPeriodmime").description("").optional, queryParam[List[String]]("cqPerioddamPeriodallowedPeriodassetPeriodmimes").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.core.impl.mimeType.AssetUploadRestrictionHelper", operation(comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val cqPerioddamPeriodallowPeriodallPeriodmime = params.getAs[Boolean]("cqPerioddamPeriodallowPeriodallPeriodmime")

    //println("cqPerioddamPeriodallowPeriodallPeriodmime: " + cqPerioddamPeriodallowPeriodallPeriodmime)
        val cqPerioddamPeriodallowedPeriodassetPeriodmimesString = params.getAs[String]("cqPerioddamPeriodallowedPeriodassetPeriodmimes")
    val cqPerioddamPeriodallowedPeriodassetPeriodmimes = if("multi" == "default" || "multi" == "csv") {
      cqPerioddamPeriodallowedPeriodassetPeriodmimesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cqPerioddamPeriodallowedPeriodassetPeriodmimes: " + cqPerioddamPeriodallowedPeriodassetPeriodmimes)
  }

  

  val comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplOperation = (apiOperation[ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo]("comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("cqPerioddamPerioddetectPeriodassetPeriodmimePeriodfromPeriodcontent").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.core.impl.mimeType.DamMimeTypeServiceImpl", operation(comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val cqPerioddamPerioddetectPeriodassetPeriodmimePeriodfromPeriodcontent = params.getAs[Boolean]("cqPerioddamPerioddetectPeriodassetPeriodmimePeriodfromPeriodcontent")

    //println("cqPerioddamPerioddetectPeriodassetPeriodmimePeriodfromPeriodcontent: " + cqPerioddamPerioddetectPeriodassetPeriodmimePeriodfromPeriodcontent)
  }

  

  val comDayCqDamCoreImplMissingMetadataNotificationJobOperation = (apiOperation[ComDayCqDamCoreImplMissingMetadataNotificationJobInfo]("comDayCqDamCoreImplMissingMetadataNotificationJob")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodistimebased").description("").optional, queryParam[String]("cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodtimebasedPeriodrule").description("").optional, queryParam[Int]("cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodperiodPeriodrule").description("").optional, queryParam[String]("cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodrecipient").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.core.impl.MissingMetadataNotificationJob", operation(comDayCqDamCoreImplMissingMetadataNotificationJobOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodistimebased = params.getAs[Boolean]("cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodistimebased")

    //println("cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodistimebased: " + cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodistimebased)
            val cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodtimebasedPeriodrule = params.getAs[String]("cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodtimebasedPeriodrule")

    //println("cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodtimebasedPeriodrule: " + cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodtimebasedPeriodrule)
            val cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodperiodPeriodrule = params.getAs[Int]("cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodperiodPeriodrule")

    //println("cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodperiodPeriodrule: " + cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodperiodPeriodrule)
            val cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodrecipient = params.getAs[String]("cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodrecipient")

    //println("cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodrecipient: " + cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodrecipient)
  }

  

  val comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrOperation = (apiOperation[ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo]("comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("processPeriodlabel").description("").optional, queryParam[Boolean]("notify on Complete").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.core.impl.process.SendTransientWorkflowCompletedEmailProcess", operation(comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val processPeriodlabel = params.getAs[String]("processPeriodlabel")

    //println("processPeriodlabel: " + processPeriodlabel)
            val notify on Complete = params.getAs[Boolean]("notify on Complete")

    //println("notify on Complete: " + notify on Complete)
  }

  

  val comDayCqDamCoreImplProcessTextExtractionProcessOperation = (apiOperation[ComDayCqDamCoreImplProcessTextExtractionProcessInfo]("comDayCqDamCoreImplProcessTextExtractionProcess")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("mimeTypes").description("").optional, queryParam[Int]("maxExtract").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.core.impl.process.TextExtractionProcess", operation(comDayCqDamCoreImplProcessTextExtractionProcessOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val mimeTypesString = params.getAs[String]("mimeTypes")
    val mimeTypes = if("multi" == "default" || "multi" == "csv") {
      mimeTypesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("mimeTypes: " + mimeTypes)
            val maxExtract = params.getAs[Int]("maxExtract")

    //println("maxExtract: " + maxExtract)
  }

  

  val comDayCqDamCoreImplRenditionMakerImplOperation = (apiOperation[ComDayCqDamCoreImplRenditionMakerImplInfo]("comDayCqDamCoreImplRenditionMakerImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("xmpPeriodpropagate").description("").optional, queryParam[List[String]]("xmpPeriodexcludes").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.core.impl.RenditionMakerImpl", operation(comDayCqDamCoreImplRenditionMakerImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val xmpPeriodpropagate = params.getAs[Boolean]("xmpPeriodpropagate")

    //println("xmpPeriodpropagate: " + xmpPeriodpropagate)
        val xmpPeriodexcludesString = params.getAs[String]("xmpPeriodexcludes")
    val xmpPeriodexcludes = if("multi" == "default" || "multi" == "csv") {
      xmpPeriodexcludesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("xmpPeriodexcludes: " + xmpPeriodexcludes)
  }

  

  val comDayCqDamCoreImplReportsReportExportServiceOperation = (apiOperation[ComDayCqDamCoreImplReportsReportExportServiceInfo]("comDayCqDamCoreImplReportsReportExportService")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("queryBatchSize").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.core.impl.reports.ReportExportService", operation(comDayCqDamCoreImplReportsReportExportServiceOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val queryBatchSize = params.getAs[Int]("queryBatchSize")

    //println("queryBatchSize: " + queryBatchSize)
  }

  

  val comDayCqDamCoreImplReportsReportPurgeServiceOperation = (apiOperation[ComDayCqDamCoreImplReportsReportPurgeServiceInfo]("comDayCqDamCoreImplReportsReportPurgeService")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("schedulerPeriodexpression").description("").optional, queryParam[Int]("maxSavedReports").description("").optional, queryParam[Int]("timeDuration").description("").optional, queryParam[Boolean]("enableReportPurge").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.core.impl.reports.ReportPurgeService", operation(comDayCqDamCoreImplReportsReportPurgeServiceOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val schedulerPeriodexpression = params.getAs[String]("schedulerPeriodexpression")

    //println("schedulerPeriodexpression: " + schedulerPeriodexpression)
            val maxSavedReports = params.getAs[Int]("maxSavedReports")

    //println("maxSavedReports: " + maxSavedReports)
            val timeDuration = params.getAs[Int]("timeDuration")

    //println("timeDuration: " + timeDuration)
            val enableReportPurge = params.getAs[Boolean]("enableReportPurge")

    //println("enableReportPurge: " + enableReportPurge)
  }

  

  val comDayCqDamCoreImplServletAssetDownloadServletOperation = (apiOperation[ComDayCqDamCoreImplServletAssetDownloadServletInfo]("comDayCqDamCoreImplServletAssetDownloadServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("enabled").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetDownloadServlet", operation(comDayCqDamCoreImplServletAssetDownloadServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val enabled = params.getAs[Boolean]("enabled")

    //println("enabled: " + enabled)
  }

  

  val comDayCqDamCoreImplServletAssetStatusServletOperation = (apiOperation[ComDayCqDamCoreImplServletAssetStatusServletInfo]("comDayCqDamCoreImplServletAssetStatusServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("cqPerioddamPeriodbatchPeriodstatusPeriodmaxassets").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetStatusServlet", operation(comDayCqDamCoreImplServletAssetStatusServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val cqPerioddamPeriodbatchPeriodstatusPeriodmaxassets = params.getAs[Int]("cqPerioddamPeriodbatchPeriodstatusPeriodmaxassets")

    //println("cqPerioddamPeriodbatchPeriodstatusPeriodmaxassets: " + cqPerioddamPeriodbatchPeriodstatusPeriodmaxassets)
  }

  

  val comDayCqDamCoreImplServletAssetXMPSearchServletOperation = (apiOperation[ComDayCqDamCoreImplServletAssetXMPSearchServletInfo]("comDayCqDamCoreImplServletAssetXMPSearchServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("cqPerioddamPeriodbatchPeriodindesignPeriodmaxassets").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetXMPSearchServlet", operation(comDayCqDamCoreImplServletAssetXMPSearchServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val cqPerioddamPeriodbatchPeriodindesignPeriodmaxassets = params.getAs[Int]("cqPerioddamPeriodbatchPeriodindesignPeriodmaxassets")

    //println("cqPerioddamPeriodbatchPeriodindesignPeriodmaxassets: " + cqPerioddamPeriodbatchPeriodindesignPeriodmaxassets)
  }

  

  val comDayCqDamCoreImplServletBatchMetadataServletOperation = (apiOperation[ComDayCqDamCoreImplServletBatchMetadataServletInfo]("comDayCqDamCoreImplServletBatchMetadataServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("cqPerioddamPeriodbatchPeriodmetadataPeriodassetPerioddefault").description("").optional, queryParam[List[String]]("cqPerioddamPeriodbatchPeriodmetadataPeriodcollectionPerioddefault").description("").optional, queryParam[Int]("cqPerioddamPeriodbatchPeriodmetadataPeriodmaxresources").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.BatchMetadataServlet", operation(comDayCqDamCoreImplServletBatchMetadataServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val cqPerioddamPeriodbatchPeriodmetadataPeriodassetPerioddefaultString = params.getAs[String]("cqPerioddamPeriodbatchPeriodmetadataPeriodassetPerioddefault")
    val cqPerioddamPeriodbatchPeriodmetadataPeriodassetPerioddefault = if("multi" == "default" || "multi" == "csv") {
      cqPerioddamPeriodbatchPeriodmetadataPeriodassetPerioddefaultString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cqPerioddamPeriodbatchPeriodmetadataPeriodassetPerioddefault: " + cqPerioddamPeriodbatchPeriodmetadataPeriodassetPerioddefault)
        val cqPerioddamPeriodbatchPeriodmetadataPeriodcollectionPerioddefaultString = params.getAs[String]("cqPerioddamPeriodbatchPeriodmetadataPeriodcollectionPerioddefault")
    val cqPerioddamPeriodbatchPeriodmetadataPeriodcollectionPerioddefault = if("multi" == "default" || "multi" == "csv") {
      cqPerioddamPeriodbatchPeriodmetadataPeriodcollectionPerioddefaultString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cqPerioddamPeriodbatchPeriodmetadataPeriodcollectionPerioddefault: " + cqPerioddamPeriodbatchPeriodmetadataPeriodcollectionPerioddefault)
            val cqPerioddamPeriodbatchPeriodmetadataPeriodmaxresources = params.getAs[Int]("cqPerioddamPeriodbatchPeriodmetadataPeriodmaxresources")

    //println("cqPerioddamPeriodbatchPeriodmetadataPeriodmaxresources: " + cqPerioddamPeriodbatchPeriodmetadataPeriodmaxresources)
  }

  

  val comDayCqDamCoreImplServletBinaryProviderServletOperation = (apiOperation[ComDayCqDamCoreImplServletBinaryProviderServletInfo]("comDayCqDamCoreImplServletBinaryProviderServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("slingPeriodservletPeriodresourceTypes").description("").optional, queryParam[List[String]]("slingPeriodservletPeriodmethods").description("").optional, queryParam[Boolean]("cqPerioddamPerioddrmPeriodenable").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.BinaryProviderServlet", operation(comDayCqDamCoreImplServletBinaryProviderServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val slingPeriodservletPeriodresourceTypesString = params.getAs[String]("slingPeriodservletPeriodresourceTypes")
    val slingPeriodservletPeriodresourceTypes = if("multi" == "default" || "multi" == "csv") {
      slingPeriodservletPeriodresourceTypesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("slingPeriodservletPeriodresourceTypes: " + slingPeriodservletPeriodresourceTypes)
        val slingPeriodservletPeriodmethodsString = params.getAs[String]("slingPeriodservletPeriodmethods")
    val slingPeriodservletPeriodmethods = if("multi" == "default" || "multi" == "csv") {
      slingPeriodservletPeriodmethodsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("slingPeriodservletPeriodmethods: " + slingPeriodservletPeriodmethods)
            val cqPerioddamPerioddrmPeriodenable = params.getAs[Boolean]("cqPerioddamPerioddrmPeriodenable")

    //println("cqPerioddamPerioddrmPeriodenable: " + cqPerioddamPerioddrmPeriodenable)
  }

  

  val comDayCqDamCoreImplServletCollectionServletOperation = (apiOperation[ComDayCqDamCoreImplServletCollectionServletInfo]("comDayCqDamCoreImplServletCollectionServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("cqPerioddamPeriodbatchPeriodcollectionPeriodproperties").description("").optional, queryParam[Int]("cqPerioddamPeriodbatchPeriodcollectionPeriodmaxcollections").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionServlet", operation(comDayCqDamCoreImplServletCollectionServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val cqPerioddamPeriodbatchPeriodcollectionPeriodpropertiesString = params.getAs[String]("cqPerioddamPeriodbatchPeriodcollectionPeriodproperties")
    val cqPerioddamPeriodbatchPeriodcollectionPeriodproperties = if("multi" == "default" || "multi" == "csv") {
      cqPerioddamPeriodbatchPeriodcollectionPeriodpropertiesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cqPerioddamPeriodbatchPeriodcollectionPeriodproperties: " + cqPerioddamPeriodbatchPeriodcollectionPeriodproperties)
            val cqPerioddamPeriodbatchPeriodcollectionPeriodmaxcollections = params.getAs[Int]("cqPerioddamPeriodbatchPeriodcollectionPeriodmaxcollections")

    //println("cqPerioddamPeriodbatchPeriodcollectionPeriodmaxcollections: " + cqPerioddamPeriodbatchPeriodcollectionPeriodmaxcollections)
  }

  

  val comDayCqDamCoreImplServletCollectionsServletOperation = (apiOperation[ComDayCqDamCoreImplServletCollectionsServletInfo]("comDayCqDamCoreImplServletCollectionsServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("cqPerioddamPeriodbatchPeriodcollectionsPeriodproperties").description("").optional, queryParam[Int]("cqPerioddamPeriodbatchPeriodcollectionsPeriodlimit").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionsServlet", operation(comDayCqDamCoreImplServletCollectionsServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val cqPerioddamPeriodbatchPeriodcollectionsPeriodpropertiesString = params.getAs[String]("cqPerioddamPeriodbatchPeriodcollectionsPeriodproperties")
    val cqPerioddamPeriodbatchPeriodcollectionsPeriodproperties = if("multi" == "default" || "multi" == "csv") {
      cqPerioddamPeriodbatchPeriodcollectionsPeriodpropertiesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cqPerioddamPeriodbatchPeriodcollectionsPeriodproperties: " + cqPerioddamPeriodbatchPeriodcollectionsPeriodproperties)
            val cqPerioddamPeriodbatchPeriodcollectionsPeriodlimit = params.getAs[Int]("cqPerioddamPeriodbatchPeriodcollectionsPeriodlimit")

    //println("cqPerioddamPeriodbatchPeriodcollectionsPeriodlimit: " + cqPerioddamPeriodbatchPeriodcollectionsPeriodlimit)
  }

  

  val comDayCqDamCoreImplServletCompanionServletOperation = (apiOperation[ComDayCqDamCoreImplServletCompanionServletInfo]("comDayCqDamCoreImplServletCompanionServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("more Info").description("").optional, queryParam[String]("SlashmntSlashoverlaySlashdamSlashguiSlashcontentSlashassetsSlashmoreinfoPeriodhtmlSlashDollarLeft_Curly_BracketpathRight_Curly_Bracket").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CompanionServlet", operation(comDayCqDamCoreImplServletCompanionServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val more Info = params.getAs[String]("more Info")

    //println("more Info: " + more Info)
            val SlashmntSlashoverlaySlashdamSlashguiSlashcontentSlashassetsSlashmoreinfoPeriodhtmlSlashDollarLeft_Curly_BracketpathRight_Curly_Bracket = params.getAs[String]("SlashmntSlashoverlaySlashdamSlashguiSlashcontentSlashassetsSlashmoreinfoPeriodhtmlSlashDollarLeft_Curly_BracketpathRight_Curly_Bracket")

    //println("SlashmntSlashoverlaySlashdamSlashguiSlashcontentSlashassetsSlashmoreinfoPeriodhtmlSlashDollarLeft_Curly_BracketpathRight_Curly_Bracket: " + SlashmntSlashoverlaySlashdamSlashguiSlashcontentSlashassetsSlashmoreinfoPeriodhtmlSlashDollarLeft_Curly_BracketpathRight_Curly_Bracket)
  }

  

  val comDayCqDamCoreImplServletCreateAssetServletOperation = (apiOperation[ComDayCqDamCoreImplServletCreateAssetServletInfo]("comDayCqDamCoreImplServletCreateAssetServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("detectDuplicate").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CreateAssetServlet", operation(comDayCqDamCoreImplServletCreateAssetServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val detectDuplicate = params.getAs[Boolean]("detectDuplicate")

    //println("detectDuplicate: " + detectDuplicate)
  }

  

  val comDayCqDamCoreImplServletDamContentDispositionFilterOperation = (apiOperation[ComDayCqDamCoreImplServletDamContentDispositionFilterInfo]("comDayCqDamCoreImplServletDamContentDispositionFilter")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("cqPeriodmimePeriodtypePeriodblacklist").description("").optional, queryParam[Boolean]("cqPerioddamPeriodemptyPeriodmime").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.DamContentDispositionFilter", operation(comDayCqDamCoreImplServletDamContentDispositionFilterOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val cqPeriodmimePeriodtypePeriodblacklistString = params.getAs[String]("cqPeriodmimePeriodtypePeriodblacklist")
    val cqPeriodmimePeriodtypePeriodblacklist = if("multi" == "default" || "multi" == "csv") {
      cqPeriodmimePeriodtypePeriodblacklistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cqPeriodmimePeriodtypePeriodblacklist: " + cqPeriodmimePeriodtypePeriodblacklist)
            val cqPerioddamPeriodemptyPeriodmime = params.getAs[Boolean]("cqPerioddamPeriodemptyPeriodmime")

    //println("cqPerioddamPeriodemptyPeriodmime: " + cqPerioddamPeriodemptyPeriodmime)
  }

  

  val comDayCqDamCoreImplServletGuidLookupFilterOperation = (apiOperation[ComDayCqDamCoreImplServletGuidLookupFilterInfo]("comDayCqDamCoreImplServletGuidLookupFilter")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("cqPerioddamPeriodcorePeriodguidlookupfilterPeriodenabled").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.GuidLookupFilter", operation(comDayCqDamCoreImplServletGuidLookupFilterOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val cqPerioddamPeriodcorePeriodguidlookupfilterPeriodenabled = params.getAs[Boolean]("cqPerioddamPeriodcorePeriodguidlookupfilterPeriodenabled")

    //println("cqPerioddamPeriodcorePeriodguidlookupfilterPeriodenabled: " + cqPerioddamPeriodcorePeriodguidlookupfilterPeriodenabled)
  }

  

  val comDayCqDamCoreImplServletHealthCheckServletOperation = (apiOperation[ComDayCqDamCoreImplServletHealthCheckServletInfo]("comDayCqDamCoreImplServletHealthCheckServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("cqPerioddamPeriodsyncPeriodworkflowPeriodid").description("").optional, queryParam[List[String]]("cqPerioddamPeriodsyncPeriodfolderPeriodtypes").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.HealthCheckServlet", operation(comDayCqDamCoreImplServletHealthCheckServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val cqPerioddamPeriodsyncPeriodworkflowPeriodid = params.getAs[String]("cqPerioddamPeriodsyncPeriodworkflowPeriodid")

    //println("cqPerioddamPeriodsyncPeriodworkflowPeriodid: " + cqPerioddamPeriodsyncPeriodworkflowPeriodid)
        val cqPerioddamPeriodsyncPeriodfolderPeriodtypesString = params.getAs[String]("cqPerioddamPeriodsyncPeriodfolderPeriodtypes")
    val cqPerioddamPeriodsyncPeriodfolderPeriodtypes = if("multi" == "default" || "multi" == "csv") {
      cqPerioddamPeriodsyncPeriodfolderPeriodtypesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cqPerioddamPeriodsyncPeriodfolderPeriodtypes: " + cqPerioddamPeriodsyncPeriodfolderPeriodtypes)
  }

  

  val comDayCqDamCoreImplServletMetadataGetServletOperation = (apiOperation[ComDayCqDamCoreImplServletMetadataGetServletInfo]("comDayCqDamCoreImplServletMetadataGetServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("slingPeriodservletPeriodresourceTypes").description("").optional, queryParam[String]("slingPeriodservletPeriodmethods").description("").optional, queryParam[String]("slingPeriodservletPeriodextensions").description("").optional, queryParam[String]("slingPeriodservletPeriodselectors").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.MetadataGetServlet", operation(comDayCqDamCoreImplServletMetadataGetServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val slingPeriodservletPeriodresourceTypes = params.getAs[String]("slingPeriodservletPeriodresourceTypes")

    //println("slingPeriodservletPeriodresourceTypes: " + slingPeriodservletPeriodresourceTypes)
            val slingPeriodservletPeriodmethods = params.getAs[String]("slingPeriodservletPeriodmethods")

    //println("slingPeriodservletPeriodmethods: " + slingPeriodservletPeriodmethods)
            val slingPeriodservletPeriodextensions = params.getAs[String]("slingPeriodservletPeriodextensions")

    //println("slingPeriodservletPeriodextensions: " + slingPeriodservletPeriodextensions)
            val slingPeriodservletPeriodselectors = params.getAs[String]("slingPeriodservletPeriodselectors")

    //println("slingPeriodservletPeriodselectors: " + slingPeriodservletPeriodselectors)
  }

  

  val comDayCqDamCoreImplServletMultipleLicenseAcceptServletOperation = (apiOperation[ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo]("comDayCqDamCoreImplServletMultipleLicenseAcceptServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("cqPerioddamPerioddrmPeriodenable").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.MultipleLicenseAcceptServlet", operation(comDayCqDamCoreImplServletMultipleLicenseAcceptServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val cqPerioddamPerioddrmPeriodenable = params.getAs[Boolean]("cqPerioddamPerioddrmPeriodenable")

    //println("cqPerioddamPerioddrmPeriodenable: " + cqPerioddamPerioddrmPeriodenable)
  }

  

  val comDayCqDamCoreImplServletResourceCollectionServletOperation = (apiOperation[ComDayCqDamCoreImplServletResourceCollectionServletInfo]("comDayCqDamCoreImplServletResourceCollectionServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("slingPeriodservletPeriodresourceTypes").description("").optional, queryParam[String]("slingPeriodservletPeriodmethods").description("").optional, queryParam[String]("slingPeriodservletPeriodselectors").description("").optional, queryParam[String]("downloadPeriodconfig").description("").optional, queryParam[String]("viewPeriodselector").description("").optional, queryParam[Boolean]("sendEmail").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.ResourceCollectionServlet", operation(comDayCqDamCoreImplServletResourceCollectionServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val slingPeriodservletPeriodresourceTypesString = params.getAs[String]("slingPeriodservletPeriodresourceTypes")
    val slingPeriodservletPeriodresourceTypes = if("multi" == "default" || "multi" == "csv") {
      slingPeriodservletPeriodresourceTypesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("slingPeriodservletPeriodresourceTypes: " + slingPeriodservletPeriodresourceTypes)
            val slingPeriodservletPeriodmethods = params.getAs[String]("slingPeriodservletPeriodmethods")

    //println("slingPeriodservletPeriodmethods: " + slingPeriodservletPeriodmethods)
            val slingPeriodservletPeriodselectors = params.getAs[String]("slingPeriodservletPeriodselectors")

    //println("slingPeriodservletPeriodselectors: " + slingPeriodservletPeriodselectors)
            val downloadPeriodconfig = params.getAs[String]("downloadPeriodconfig")

    //println("downloadPeriodconfig: " + downloadPeriodconfig)
            val viewPeriodselector = params.getAs[String]("viewPeriodselector")

    //println("viewPeriodselector: " + viewPeriodselector)
            val sendEmail = params.getAs[Boolean]("sendEmail")

    //println("sendEmail: " + sendEmail)
  }

  

  val comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplOperation = (apiOperation[ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo]("comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("createPreviewEnabled").description("").optional, queryParam[Boolean]("updatePreviewEnabled").description("").optional, queryParam[Int]("queueSize").description("").optional, queryParam[String]("folderPreviewRenditionRegex").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.core.impl.ui.preview.FolderPreviewUpdaterImpl", operation(comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val createPreviewEnabled = params.getAs[Boolean]("createPreviewEnabled")

    //println("createPreviewEnabled: " + createPreviewEnabled)
            val updatePreviewEnabled = params.getAs[Boolean]("updatePreviewEnabled")

    //println("updatePreviewEnabled: " + updatePreviewEnabled)
            val queueSize = params.getAs[Int]("queueSize")

    //println("queueSize: " + queueSize)
            val folderPreviewRenditionRegex = params.getAs[String]("folderPreviewRenditionRegex")

    //println("folderPreviewRenditionRegex: " + folderPreviewRenditionRegex)
  }

  

  val comDayCqDamCoreImplUnzipUnzipConfigOperation = (apiOperation[ComDayCqDamCoreImplUnzipUnzipConfigInfo]("comDayCqDamCoreImplUnzipUnzipConfig")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("cqPerioddamPeriodconfigPeriodunzipPeriodmaxuncompressedsize").description("").optional, queryParam[String]("cqPerioddamPeriodconfigPeriodunzipPeriodencoding").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.core.impl.unzip.UnzipConfig", operation(comDayCqDamCoreImplUnzipUnzipConfigOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val cqPerioddamPeriodconfigPeriodunzipPeriodmaxuncompressedsize = params.getAs[Int]("cqPerioddamPeriodconfigPeriodunzipPeriodmaxuncompressedsize")

    //println("cqPerioddamPeriodconfigPeriodunzipPeriodmaxuncompressedsize: " + cqPerioddamPeriodconfigPeriodunzipPeriodmaxuncompressedsize)
            val cqPerioddamPeriodconfigPeriodunzipPeriodencoding = params.getAs[String]("cqPerioddamPeriodconfigPeriodunzipPeriodencoding")

    //println("cqPerioddamPeriodconfigPeriodunzipPeriodencoding: " + cqPerioddamPeriodconfigPeriodunzipPeriodencoding)
  }

  

  val comDayCqDamCoreProcessExifToolExtractMetadataProcessOperation = (apiOperation[ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo]("comDayCqDamCoreProcessExifToolExtractMetadataProcess")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("processPeriodlabel").description("").optional, queryParam[Boolean]("cqPerioddamPeriodenablePeriodsha1").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.core.process.ExifToolExtractMetadataProcess", operation(comDayCqDamCoreProcessExifToolExtractMetadataProcessOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val processPeriodlabel = params.getAs[String]("processPeriodlabel")

    //println("processPeriodlabel: " + processPeriodlabel)
            val cqPerioddamPeriodenablePeriodsha1 = params.getAs[Boolean]("cqPerioddamPeriodenablePeriodsha1")

    //println("cqPerioddamPeriodenablePeriodsha1: " + cqPerioddamPeriodenablePeriodsha1)
  }

  

  val comDayCqDamCoreProcessExtractMetadataProcessOperation = (apiOperation[ComDayCqDamCoreProcessExtractMetadataProcessInfo]("comDayCqDamCoreProcessExtractMetadataProcess")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("processPeriodlabel").description("").optional, queryParam[Boolean]("cqPerioddamPeriodenablePeriodsha1").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.core.process.ExtractMetadataProcess", operation(comDayCqDamCoreProcessExtractMetadataProcessOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val processPeriodlabel = params.getAs[String]("processPeriodlabel")

    //println("processPeriodlabel: " + processPeriodlabel)
            val cqPerioddamPeriodenablePeriodsha1 = params.getAs[Boolean]("cqPerioddamPeriodenablePeriodsha1")

    //println("cqPerioddamPeriodenablePeriodsha1: " + cqPerioddamPeriodenablePeriodsha1)
  }

  

  val comDayCqDamCoreProcessMetadataProcessorProcessOperation = (apiOperation[ComDayCqDamCoreProcessMetadataProcessorProcessInfo]("comDayCqDamCoreProcessMetadataProcessorProcess")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("processPeriodlabel").description("").optional, queryParam[Boolean]("cqPerioddamPeriodenablePeriodsha1").description("").optional, queryParam[List[String]]("cqPerioddamPeriodmetadataPeriodxssprotectedPeriodproperties").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.core.process.MetadataProcessorProcess", operation(comDayCqDamCoreProcessMetadataProcessorProcessOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val processPeriodlabel = params.getAs[String]("processPeriodlabel")

    //println("processPeriodlabel: " + processPeriodlabel)
            val cqPerioddamPeriodenablePeriodsha1 = params.getAs[Boolean]("cqPerioddamPeriodenablePeriodsha1")

    //println("cqPerioddamPeriodenablePeriodsha1: " + cqPerioddamPeriodenablePeriodsha1)
        val cqPerioddamPeriodmetadataPeriodxssprotectedPeriodpropertiesString = params.getAs[String]("cqPerioddamPeriodmetadataPeriodxssprotectedPeriodproperties")
    val cqPerioddamPeriodmetadataPeriodxssprotectedPeriodproperties = if("multi" == "default" || "multi" == "csv") {
      cqPerioddamPeriodmetadataPeriodxssprotectedPeriodpropertiesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cqPerioddamPeriodmetadataPeriodxssprotectedPeriodproperties: " + cqPerioddamPeriodmetadataPeriodxssprotectedPeriodproperties)
  }

  

  val comDayCqDamHandlerFfmpegLocatorImplOperation = (apiOperation[ComDayCqDamHandlerFfmpegLocatorImplInfo]("comDayCqDamHandlerFfmpegLocatorImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("executablePeriodsearchpath").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.handler.ffmpeg.LocatorImpl", operation(comDayCqDamHandlerFfmpegLocatorImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val executablePeriodsearchpathString = params.getAs[String]("executablePeriodsearchpath")
    val executablePeriodsearchpath = if("multi" == "default" || "multi" == "csv") {
      executablePeriodsearchpathString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("executablePeriodsearchpath: " + executablePeriodsearchpath)
  }

  

  val comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplOperation = (apiOperation[ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo]("comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("eventPeriodfilter").description("").optional, queryParam[List[String]]("fontmgrPeriodsystemPeriodfontPerioddir").description("").optional, queryParam[String]("fontmgrPeriodadobePeriodfontPerioddir").description("").optional, queryParam[String]("fontmgrPeriodcustomerPeriodfontPerioddir").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.handler.gibson.fontmanager.impl.FontManagerServiceImpl", operation(comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val eventPeriodfilter = params.getAs[String]("eventPeriodfilter")

    //println("eventPeriodfilter: " + eventPeriodfilter)
        val fontmgrPeriodsystemPeriodfontPerioddirString = params.getAs[String]("fontmgrPeriodsystemPeriodfontPerioddir")
    val fontmgrPeriodsystemPeriodfontPerioddir = if("multi" == "default" || "multi" == "csv") {
      fontmgrPeriodsystemPeriodfontPerioddirString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("fontmgrPeriodsystemPeriodfontPerioddir: " + fontmgrPeriodsystemPeriodfontPerioddir)
            val fontmgrPeriodadobePeriodfontPerioddir = params.getAs[String]("fontmgrPeriodadobePeriodfontPerioddir")

    //println("fontmgrPeriodadobePeriodfontPerioddir: " + fontmgrPeriodadobePeriodfontPerioddir)
            val fontmgrPeriodcustomerPeriodfontPerioddir = params.getAs[String]("fontmgrPeriodcustomerPeriodfontPerioddir")

    //println("fontmgrPeriodcustomerPeriodfontPerioddir: " + fontmgrPeriodcustomerPeriodfontPerioddir)
  }

  

  val comDayCqDamHandlerStandardPdfPdfHandlerOperation = (apiOperation[ComDayCqDamHandlerStandardPdfPdfHandlerInfo]("comDayCqDamHandlerStandardPdfPdfHandler")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("rasterPeriodannotation").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.handler.standard.pdf.PdfHandler", operation(comDayCqDamHandlerStandardPdfPdfHandlerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val rasterPeriodannotation = params.getAs[Boolean]("rasterPeriodannotation")

    //println("rasterPeriodannotation: " + rasterPeriodannotation)
  }

  

  val comDayCqDamHandlerStandardPsPostScriptHandlerOperation = (apiOperation[ComDayCqDamHandlerStandardPsPostScriptHandlerInfo]("comDayCqDamHandlerStandardPsPostScriptHandler")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("rasterPeriodannotation").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.handler.standard.ps.PostScriptHandler", operation(comDayCqDamHandlerStandardPsPostScriptHandlerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val rasterPeriodannotation = params.getAs[Boolean]("rasterPeriodannotation")

    //println("rasterPeriodannotation: " + rasterPeriodannotation)
  }

  

  val comDayCqDamHandlerStandardPsdPsdHandlerOperation = (apiOperation[ComDayCqDamHandlerStandardPsdPsdHandlerInfo]("comDayCqDamHandlerStandardPsdPsdHandler")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("largeFileThreshold").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.handler.standard.psd.PsdHandler", operation(comDayCqDamHandlerStandardPsdPsdHandlerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val largeFileThreshold = params.getAs[Int]("largeFileThreshold")

    //println("largeFileThreshold: " + largeFileThreshold)
  }

  

  val comDayCqDamIdsImplIDSJobProcessorOperation = (apiOperation[ComDayCqDamIdsImplIDSJobProcessorInfo]("comDayCqDamIdsImplIDSJobProcessor")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("enablePeriodmultisession").description("").optional, queryParam[Boolean]("idsPeriodccPeriodenable").description("").optional, queryParam[Boolean]("enablePeriodretry").description("").optional, queryParam[Boolean]("enablePeriodretryPeriodscripterror").description("").optional, queryParam[String]("externalizerPerioddomainPeriodcqhost").description("").optional, queryParam[String]("externalizerPerioddomainPeriodhttp").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.ids.impl.IDSJobProcessor", operation(comDayCqDamIdsImplIDSJobProcessorOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val enablePeriodmultisession = params.getAs[Boolean]("enablePeriodmultisession")

    //println("enablePeriodmultisession: " + enablePeriodmultisession)
            val idsPeriodccPeriodenable = params.getAs[Boolean]("idsPeriodccPeriodenable")

    //println("idsPeriodccPeriodenable: " + idsPeriodccPeriodenable)
            val enablePeriodretry = params.getAs[Boolean]("enablePeriodretry")

    //println("enablePeriodretry: " + enablePeriodretry)
            val enablePeriodretryPeriodscripterror = params.getAs[Boolean]("enablePeriodretryPeriodscripterror")

    //println("enablePeriodretryPeriodscripterror: " + enablePeriodretryPeriodscripterror)
            val externalizerPerioddomainPeriodcqhost = params.getAs[String]("externalizerPerioddomainPeriodcqhost")

    //println("externalizerPerioddomainPeriodcqhost: " + externalizerPerioddomainPeriodcqhost)
            val externalizerPerioddomainPeriodhttp = params.getAs[String]("externalizerPerioddomainPeriodhttp")

    //println("externalizerPerioddomainPeriodhttp: " + externalizerPerioddomainPeriodhttp)
  }

  

  val comDayCqDamIdsImplIDSPoolManagerImplOperation = (apiOperation[ComDayCqDamIdsImplIDSPoolManagerImplInfo]("comDayCqDamIdsImplIDSPoolManagerImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("maxPerioderrorsPeriodtoPeriodblacklist").description("").optional, queryParam[Int]("retryPeriodintervalPeriodtoPeriodwhitelist").description("").optional, queryParam[Int]("connectPeriodtimeout").description("").optional, queryParam[Int]("socketPeriodtimeout").description("").optional, queryParam[String]("processPeriodlabel").description("").optional, queryParam[Int]("connectionPeriodusePeriodmax").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.ids.impl.IDSPoolManagerImpl", operation(comDayCqDamIdsImplIDSPoolManagerImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val maxPerioderrorsPeriodtoPeriodblacklist = params.getAs[Int]("maxPerioderrorsPeriodtoPeriodblacklist")

    //println("maxPerioderrorsPeriodtoPeriodblacklist: " + maxPerioderrorsPeriodtoPeriodblacklist)
            val retryPeriodintervalPeriodtoPeriodwhitelist = params.getAs[Int]("retryPeriodintervalPeriodtoPeriodwhitelist")

    //println("retryPeriodintervalPeriodtoPeriodwhitelist: " + retryPeriodintervalPeriodtoPeriodwhitelist)
            val connectPeriodtimeout = params.getAs[Int]("connectPeriodtimeout")

    //println("connectPeriodtimeout: " + connectPeriodtimeout)
            val socketPeriodtimeout = params.getAs[Int]("socketPeriodtimeout")

    //println("socketPeriodtimeout: " + socketPeriodtimeout)
            val processPeriodlabel = params.getAs[String]("processPeriodlabel")

    //println("processPeriodlabel: " + processPeriodlabel)
            val connectionPeriodusePeriodmax = params.getAs[Int]("connectionPeriodusePeriodmax")

    //println("connectionPeriodusePeriodmax: " + connectionPeriodusePeriodmax)
  }

  

  val comDayCqDamInddImplHandlerIndesignXMPHandlerOperation = (apiOperation[ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo]("comDayCqDamInddImplHandlerIndesignXMPHandler")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("processPeriodlabel").description("").optional, queryParam[Boolean]("extractPeriodpages").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.indd.impl.handler.IndesignXMPHandler", operation(comDayCqDamInddImplHandlerIndesignXMPHandlerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val processPeriodlabel = params.getAs[String]("processPeriodlabel")

    //println("processPeriodlabel: " + processPeriodlabel)
            val extractPeriodpages = params.getAs[Boolean]("extractPeriodpages")

    //println("extractPeriodpages: " + extractPeriodpages)
  }

  

  val comDayCqDamInddImplServletSnippetCreationServletOperation = (apiOperation[ComDayCqDamInddImplServletSnippetCreationServletInfo]("comDayCqDamInddImplServletSnippetCreationServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("snippetcreationPeriodmaxcollections").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.indd.impl.servlet.SnippetCreationServlet", operation(comDayCqDamInddImplServletSnippetCreationServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val snippetcreationPeriodmaxcollections = params.getAs[Int]("snippetcreationPeriodmaxcollections")

    //println("snippetcreationPeriodmaxcollections: " + snippetcreationPeriodmaxcollections)
  }

  

  val comDayCqDamInddProcessINDDMediaExtractProcessOperation = (apiOperation[ComDayCqDamInddProcessINDDMediaExtractProcessInfo]("comDayCqDamInddProcessINDDMediaExtractProcess")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("processPeriodlabel").description("").optional, queryParam[String]("cqPerioddamPeriodinddPeriodpagesPeriodregex").description("").optional, queryParam[Boolean]("idsPeriodjobPerioddecoupled").description("").optional, queryParam[String]("idsPeriodjobPeriodworkflowPeriodmodel").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.indd.process.INDDMediaExtractProcess", operation(comDayCqDamInddProcessINDDMediaExtractProcessOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val processPeriodlabel = params.getAs[String]("processPeriodlabel")

    //println("processPeriodlabel: " + processPeriodlabel)
            val cqPerioddamPeriodinddPeriodpagesPeriodregex = params.getAs[String]("cqPerioddamPeriodinddPeriodpagesPeriodregex")

    //println("cqPerioddamPeriodinddPeriodpagesPeriodregex: " + cqPerioddamPeriodinddPeriodpagesPeriodregex)
            val idsPeriodjobPerioddecoupled = params.getAs[Boolean]("idsPeriodjobPerioddecoupled")

    //println("idsPeriodjobPerioddecoupled: " + idsPeriodjobPerioddecoupled)
            val idsPeriodjobPeriodworkflowPeriodmodel = params.getAs[String]("idsPeriodjobPeriodworkflowPeriodmodel")

    //println("idsPeriodjobPeriodworkflowPeriodmodel: " + idsPeriodjobPeriodworkflowPeriodmodel)
  }

  

  val comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplOperation = (apiOperation[ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo]("comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("batchPeriodcommitPeriodsize").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceDataHandlerImpl", operation(comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val batchPeriodcommitPeriodsize = params.getAs[Int]("batchPeriodcommitPeriodsize")

    //println("batchPeriodcommitPeriodsize: " + batchPeriodcommitPeriodsize)
  }

  

  val comDayCqDamPerformanceInternalAssetPerformanceReportSyncJobOperation = (apiOperation[ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo]("comDayCqDamPerformanceInternalAssetPerformanceReportSyncJob")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("schedulerPeriodexpression").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceReportSyncJob", operation(comDayCqDamPerformanceInternalAssetPerformanceReportSyncJobOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val schedulerPeriodexpression = params.getAs[String]("schedulerPeriodexpression")

    //println("schedulerPeriodexpression: " + schedulerPeriodexpression)
  }

  

  val comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProOperation = (apiOperation[ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo]("comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("deletePeriodzipPeriodfile").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.pim.impl.sourcing.upload.process.ProductAssetsUploadProcess", operation(comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val deletePeriodzipPeriodfile = params.getAs[Boolean]("deletePeriodzipPeriodfile")

    //println("deletePeriodzipPeriodfile: " + deletePeriodzipPeriodfile)
  }

  

  val comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenOperation = (apiOperation[ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo]("comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("cqPerioddamPeriods7damPerioddynamicmediaconfigeventlistenerPeriodenabled").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.S7damDynamicMediaConfigEventListener", operation(comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val cqPerioddamPeriods7damPerioddynamicmediaconfigeventlistenerPeriodenabled = params.getAs[Boolean]("cqPerioddamPeriods7damPerioddynamicmediaconfigeventlistenerPeriodenabled")

    //println("cqPerioddamPeriods7damPerioddynamicmediaconfigeventlistenerPeriodenabled: " + cqPerioddamPeriods7damPerioddynamicmediaconfigeventlistenerPeriodenabled)
  }

  

  val comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerOperation = (apiOperation[ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo]("comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("schedulerPeriodexpression").description("").optional, queryParam[Boolean]("schedulerPeriodconcurrent").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.SiteCatalystReportRunner", operation(comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val schedulerPeriodexpression = params.getAs[String]("schedulerPeriodexpression")

    //println("schedulerPeriodexpression: " + schedulerPeriodexpression)
            val schedulerPeriodconcurrent = params.getAs[Boolean]("schedulerPeriodconcurrent")

    //println("schedulerPeriodconcurrent: " + schedulerPeriodconcurrent)
  }

  

  val comDayCqDamS7damCommonPostServletsSetCreateHandlerOperation = (apiOperation[ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo]("comDayCqDamS7damCommonPostServletsSetCreateHandler")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("slingPeriodpostPeriodoperation").description("").optional, queryParam[String]("slingPeriodservletPeriodmethods").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetCreateHandler", operation(comDayCqDamS7damCommonPostServletsSetCreateHandlerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val slingPeriodpostPeriodoperation = params.getAs[String]("slingPeriodpostPeriodoperation")

    //println("slingPeriodpostPeriodoperation: " + slingPeriodpostPeriodoperation)
            val slingPeriodservletPeriodmethods = params.getAs[String]("slingPeriodservletPeriodmethods")

    //println("slingPeriodservletPeriodmethods: " + slingPeriodservletPeriodmethods)
  }

  

  val comDayCqDamS7damCommonPostServletsSetModifyHandlerOperation = (apiOperation[ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo]("comDayCqDamS7damCommonPostServletsSetModifyHandler")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("slingPeriodpostPeriodoperation").description("").optional, queryParam[String]("slingPeriodservletPeriodmethods").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetModifyHandler", operation(comDayCqDamS7damCommonPostServletsSetModifyHandlerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val slingPeriodpostPeriodoperation = params.getAs[String]("slingPeriodpostPeriodoperation")

    //println("slingPeriodpostPeriodoperation: " + slingPeriodpostPeriodoperation)
            val slingPeriodservletPeriodmethods = params.getAs[String]("slingPeriodservletPeriodmethods")

    //println("slingPeriodservletPeriodmethods: " + slingPeriodservletPeriodmethods)
  }

  

  val comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessOperation = (apiOperation[ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo]("comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("processPeriodlabel").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.s7dam.common.process.VideoThumbnailDownloadProcess", operation(comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val processPeriodlabel = params.getAs[String]("processPeriodlabel")

    //println("processPeriodlabel: " + processPeriodlabel)
  }

  

  val comDayCqDamS7damCommonS7damDamChangeEventListenerOperation = (apiOperation[ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo]("comDayCqDamS7damCommonS7damDamChangeEventListener")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("cqPerioddamPeriods7damPerioddamchangeeventlistenerPeriodenabled").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.s7dam.common.S7damDamChangeEventListener", operation(comDayCqDamS7damCommonS7damDamChangeEventListenerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val cqPerioddamPeriods7damPerioddamchangeeventlistenerPeriodenabled = params.getAs[Boolean]("cqPerioddamPeriods7damPerioddamchangeeventlistenerPeriodenabled")

    //println("cqPerioddamPeriods7damPerioddamchangeeventlistenerPeriodenabled: " + cqPerioddamPeriods7damPerioddamchangeeventlistenerPeriodenabled)
  }

  

  val comDayCqDamS7damCommonServletsS7damProductInfoServletOperation = (apiOperation[ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo]("comDayCqDamS7damCommonServletsS7damProductInfoServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("slingPeriodservletPeriodpaths").description("").optional, queryParam[String]("slingPeriodservletPeriodmethods").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.s7dam.common.servlets.S7damProductInfoServlet", operation(comDayCqDamS7damCommonServletsS7damProductInfoServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val slingPeriodservletPeriodpaths = params.getAs[String]("slingPeriodservletPeriodpaths")

    //println("slingPeriodservletPeriodpaths: " + slingPeriodservletPeriodpaths)
            val slingPeriodservletPeriodmethods = params.getAs[String]("slingPeriodservletPeriodmethods")

    //println("slingPeriodservletPeriodmethods: " + slingPeriodservletPeriodmethods)
  }

  

  val comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplOperation = (apiOperation[ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo]("comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodminsizePeriodname").description("").optional, queryParam[Int]("cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodpartsizePeriodname").description("").optional, queryParam[Int]("cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodnumthreadPeriodname").description("").optional, queryParam[Int]("cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodreadtimeoutPeriodname").description("").optional, queryParam[Int]("cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodconnectiontimeoutPeriodname").description("").optional, queryParam[Int]("cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodmaxretrycountPeriodname").description("").optional, queryParam[Int]("cqPerioddamPeriods7damPeriodvideoproxyclientservicePerioduploadprogressPeriodintervalPeriodname").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.s7dam.common.video.impl.VideoProxyClientServiceImpl", operation(comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodminsizePeriodname = params.getAs[Int]("cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodminsizePeriodname")

    //println("cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodminsizePeriodname: " + cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodminsizePeriodname)
            val cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodpartsizePeriodname = params.getAs[Int]("cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodpartsizePeriodname")

    //println("cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodpartsizePeriodname: " + cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodpartsizePeriodname)
            val cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodnumthreadPeriodname = params.getAs[Int]("cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodnumthreadPeriodname")

    //println("cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodnumthreadPeriodname: " + cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodnumthreadPeriodname)
            val cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodreadtimeoutPeriodname = params.getAs[Int]("cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodreadtimeoutPeriodname")

    //println("cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodreadtimeoutPeriodname: " + cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodreadtimeoutPeriodname)
            val cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodconnectiontimeoutPeriodname = params.getAs[Int]("cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodconnectiontimeoutPeriodname")

    //println("cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodconnectiontimeoutPeriodname: " + cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodconnectiontimeoutPeriodname)
            val cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodmaxretrycountPeriodname = params.getAs[Int]("cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodmaxretrycountPeriodname")

    //println("cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodmaxretrycountPeriodname: " + cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodmaxretrycountPeriodname)
            val cqPerioddamPeriods7damPeriodvideoproxyclientservicePerioduploadprogressPeriodintervalPeriodname = params.getAs[Int]("cqPerioddamPeriods7damPeriodvideoproxyclientservicePerioduploadprogressPeriodintervalPeriodname")

    //println("cqPerioddamPeriods7damPeriodvideoproxyclientservicePerioduploadprogressPeriodintervalPeriodname: " + cqPerioddamPeriods7damPeriodvideoproxyclientservicePerioduploadprogressPeriodintervalPeriodname)
  }

  

  val comDayCqDamScene7ImplScene7APIClientImplOperation = (apiOperation[ComDayCqDamScene7ImplScene7APIClientImplInfo]("comDayCqDamScene7ImplScene7APIClientImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("cqPerioddamPeriodscene7PeriodapiclientPeriodrecordsperpagePeriodnofilterPeriodname").description("").optional, queryParam[Int]("cqPerioddamPeriodscene7PeriodapiclientPeriodrecordsperpagePeriodwithfilterPeriodname").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7APIClientImpl", operation(comDayCqDamScene7ImplScene7APIClientImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val cqPerioddamPeriodscene7PeriodapiclientPeriodrecordsperpagePeriodnofilterPeriodname = params.getAs[Int]("cqPerioddamPeriodscene7PeriodapiclientPeriodrecordsperpagePeriodnofilterPeriodname")

    //println("cqPerioddamPeriodscene7PeriodapiclientPeriodrecordsperpagePeriodnofilterPeriodname: " + cqPerioddamPeriodscene7PeriodapiclientPeriodrecordsperpagePeriodnofilterPeriodname)
            val cqPerioddamPeriodscene7PeriodapiclientPeriodrecordsperpagePeriodwithfilterPeriodname = params.getAs[Int]("cqPerioddamPeriodscene7PeriodapiclientPeriodrecordsperpagePeriodwithfilterPeriodname")

    //println("cqPerioddamPeriodscene7PeriodapiclientPeriodrecordsperpagePeriodwithfilterPeriodname: " + cqPerioddamPeriodscene7PeriodapiclientPeriodrecordsperpagePeriodwithfilterPeriodname)
  }

  

  val comDayCqDamScene7ImplScene7AssetMimeTypeServiceImplOperation = (apiOperation[ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo]("comDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("cqPerioddamPeriodscene7PeriodassetmimetypeservicePeriodmapping").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7AssetMimeTypeServiceImpl", operation(comDayCqDamScene7ImplScene7AssetMimeTypeServiceImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val cqPerioddamPeriodscene7PeriodassetmimetypeservicePeriodmappingString = params.getAs[String]("cqPerioddamPeriodscene7PeriodassetmimetypeservicePeriodmapping")
    val cqPerioddamPeriodscene7PeriodassetmimetypeservicePeriodmapping = if("multi" == "default" || "multi" == "csv") {
      cqPerioddamPeriodscene7PeriodassetmimetypeservicePeriodmappingString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cqPerioddamPeriodscene7PeriodassetmimetypeservicePeriodmapping: " + cqPerioddamPeriodscene7PeriodassetmimetypeservicePeriodmapping)
  }

  

  val comDayCqDamScene7ImplScene7ConfigurationEventListenerOperation = (apiOperation[ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo]("comDayCqDamScene7ImplScene7ConfigurationEventListener")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("cqPerioddamPeriodscene7PeriodconfigurationeventlistenerPeriodenabled").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7ConfigurationEventListener", operation(comDayCqDamScene7ImplScene7ConfigurationEventListenerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val cqPerioddamPeriodscene7PeriodconfigurationeventlistenerPeriodenabled = params.getAs[Boolean]("cqPerioddamPeriodscene7PeriodconfigurationeventlistenerPeriodenabled")

    //println("cqPerioddamPeriodscene7PeriodconfigurationeventlistenerPeriodenabled: " + cqPerioddamPeriodscene7PeriodconfigurationeventlistenerPeriodenabled)
  }

  

  val comDayCqDamScene7ImplScene7DamChangeEventListenerOperation = (apiOperation[ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo]("comDayCqDamScene7ImplScene7DamChangeEventListener")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("cqPerioddamPeriodscene7PerioddamchangeeventlistenerPeriodenabled").description("").optional, queryParam[List[String]]("cqPerioddamPeriodscene7PerioddamchangeeventlistenerPeriodobservedPeriodpaths").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7DamChangeEventListener", operation(comDayCqDamScene7ImplScene7DamChangeEventListenerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val cqPerioddamPeriodscene7PerioddamchangeeventlistenerPeriodenabled = params.getAs[Boolean]("cqPerioddamPeriodscene7PerioddamchangeeventlistenerPeriodenabled")

    //println("cqPerioddamPeriodscene7PerioddamchangeeventlistenerPeriodenabled: " + cqPerioddamPeriodscene7PerioddamchangeeventlistenerPeriodenabled)
        val cqPerioddamPeriodscene7PerioddamchangeeventlistenerPeriodobservedPeriodpathsString = params.getAs[String]("cqPerioddamPeriodscene7PerioddamchangeeventlistenerPeriodobservedPeriodpaths")
    val cqPerioddamPeriodscene7PerioddamchangeeventlistenerPeriodobservedPeriodpaths = if("multi" == "default" || "multi" == "csv") {
      cqPerioddamPeriodscene7PerioddamchangeeventlistenerPeriodobservedPeriodpathsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cqPerioddamPeriodscene7PerioddamchangeeventlistenerPeriodobservedPeriodpaths: " + cqPerioddamPeriodscene7PerioddamchangeeventlistenerPeriodobservedPeriodpaths)
  }

  

  val comDayCqDamScene7ImplScene7FlashTemplatesServiceImplOperation = (apiOperation[ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo]("comDayCqDamScene7ImplScene7FlashTemplatesServiceImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("scene7FlashTemplatesPeriodrti").description("").optional, queryParam[String]("scene7FlashTemplatesPeriodrsi").description("").optional, queryParam[String]("scene7FlashTemplatesPeriodrb").description("").optional, queryParam[String]("scene7FlashTemplatesPeriodrurl").description("").optional, queryParam[String]("scene7FlashTemplatePeriodurlFormatParameter").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7FlashTemplatesServiceImpl", operation(comDayCqDamScene7ImplScene7FlashTemplatesServiceImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val scene7FlashTemplatesPeriodrti = params.getAs[String]("scene7FlashTemplatesPeriodrti")

    //println("scene7FlashTemplatesPeriodrti: " + scene7FlashTemplatesPeriodrti)
            val scene7FlashTemplatesPeriodrsi = params.getAs[String]("scene7FlashTemplatesPeriodrsi")

    //println("scene7FlashTemplatesPeriodrsi: " + scene7FlashTemplatesPeriodrsi)
            val scene7FlashTemplatesPeriodrb = params.getAs[String]("scene7FlashTemplatesPeriodrb")

    //println("scene7FlashTemplatesPeriodrb: " + scene7FlashTemplatesPeriodrb)
            val scene7FlashTemplatesPeriodrurl = params.getAs[String]("scene7FlashTemplatesPeriodrurl")

    //println("scene7FlashTemplatesPeriodrurl: " + scene7FlashTemplatesPeriodrurl)
            val scene7FlashTemplatePeriodurlFormatParameter = params.getAs[String]("scene7FlashTemplatePeriodurlFormatParameter")

    //println("scene7FlashTemplatePeriodurlFormatParameter: " + scene7FlashTemplatePeriodurlFormatParameter)
  }

  

  val comDayCqDamScene7ImplScene7UploadServiceImplOperation = (apiOperation[ComDayCqDamScene7ImplScene7UploadServiceImplInfo]("comDayCqDamScene7ImplScene7UploadServiceImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("cqPerioddamPeriodscene7PerioduploadservicePeriodactivejobtimeoutPeriodlabel").description("").optional, queryParam[Int]("cqPerioddamPeriodscene7PerioduploadservicePeriodconnectionmaxperroutePeriodlabel").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7UploadServiceImpl", operation(comDayCqDamScene7ImplScene7UploadServiceImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val cqPerioddamPeriodscene7PerioduploadservicePeriodactivejobtimeoutPeriodlabel = params.getAs[Int]("cqPerioddamPeriodscene7PerioduploadservicePeriodactivejobtimeoutPeriodlabel")

    //println("cqPerioddamPeriodscene7PerioduploadservicePeriodactivejobtimeoutPeriodlabel: " + cqPerioddamPeriodscene7PerioduploadservicePeriodactivejobtimeoutPeriodlabel)
            val cqPerioddamPeriodscene7PerioduploadservicePeriodconnectionmaxperroutePeriodlabel = params.getAs[Int]("cqPerioddamPeriodscene7PerioduploadservicePeriodconnectionmaxperroutePeriodlabel")

    //println("cqPerioddamPeriodscene7PerioduploadservicePeriodconnectionmaxperroutePeriodlabel: " + cqPerioddamPeriodscene7PerioduploadservicePeriodconnectionmaxperroutePeriodlabel)
  }

  

  val comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerOperation = (apiOperation[ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo]("comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("getCacheExpirationUnit").description("").optional, queryParam[Int]("getCacheExpirationValue").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.stock.integration.impl.cache.StockCacheConfigurationServiceImpl", operation(comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val getCacheExpirationUnit = params.getAs[String]("getCacheExpirationUnit")

    //println("getCacheExpirationUnit: " + getCacheExpirationUnit)
            val getCacheExpirationValue = params.getAs[Int]("getCacheExpirationValue")

    //println("getCacheExpirationValue: " + getCacheExpirationValue)
  }

  

  val comDayCqDamStockIntegrationImplConfigurationStockConfigurationOperation = (apiOperation[ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo]("comDayCqDamStockIntegrationImplConfigurationStockConfiguration")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("name").description("").optional, queryParam[String]("locale").description("").optional, queryParam[String]("imsConfig").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.stock.integration.impl.configuration.StockConfigurationImpl", operation(comDayCqDamStockIntegrationImplConfigurationStockConfigurationOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val name = params.getAs[String]("name")

    //println("name: " + name)
            val locale = params.getAs[String]("locale")

    //println("locale: " + locale)
            val imsConfig = params.getAs[String]("imsConfig")

    //println("imsConfig: " + imsConfig)
  }

  

  val comDayCqDamVideoImplServletVideoTestServletOperation = (apiOperation[ComDayCqDamVideoImplServletVideoTestServletInfo]("comDayCqDamVideoImplServletVideoTestServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("enabled").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.dam.video.impl.servlet.VideoTestServlet", operation(comDayCqDamVideoImplServletVideoTestServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val enabled = params.getAs[Boolean]("enabled")

    //println("enabled: " + enabled)
  }

  

  val comDayCqExtwidgetServletsImageSpriteServletOperation = (apiOperation[ComDayCqExtwidgetServletsImageSpriteServletInfo]("comDayCqExtwidgetServletsImageSpriteServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("maxWidth").description("").optional, queryParam[Int]("maxHeight").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.extwidget.servlets.ImageSpriteServlet", operation(comDayCqExtwidgetServletsImageSpriteServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val maxWidth = params.getAs[Int]("maxWidth")

    //println("maxWidth: " + maxWidth)
            val maxHeight = params.getAs[Int]("maxHeight")

    //println("maxHeight: " + maxHeight)
  }

  

  val comDayCqImageInternalFontFontHelperOperation = (apiOperation[ComDayCqImageInternalFontFontHelperInfo]("comDayCqImageInternalFontFontHelper")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("fontpath").description("").optional, queryParam[Int]("oversamplingFactor").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.image.internal.font.FontHelper", operation(comDayCqImageInternalFontFontHelperOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val fontpathString = params.getAs[String]("fontpath")
    val fontpath = if("multi" == "default" || "multi" == "csv") {
      fontpathString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("fontpath: " + fontpath)
            val oversamplingFactor = params.getAs[Int]("oversamplingFactor")

    //println("oversamplingFactor: " + oversamplingFactor)
  }

  

  val comDayCqJcrclustersupportClusterStartLevelControllerOperation = (apiOperation[ComDayCqJcrclustersupportClusterStartLevelControllerInfo]("comDayCqJcrclustersupportClusterStartLevelController")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("clusterPeriodlevelPeriodenable").description("").optional, queryParam[Int]("clusterPeriodmasterPeriodlevel").description("").optional, queryParam[Int]("clusterPeriodslavePeriodlevel").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.jcrclustersupport.ClusterStartLevelController", operation(comDayCqJcrclustersupportClusterStartLevelControllerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val clusterPeriodlevelPeriodenable = params.getAs[Boolean]("clusterPeriodlevelPeriodenable")

    //println("clusterPeriodlevelPeriodenable: " + clusterPeriodlevelPeriodenable)
            val clusterPeriodmasterPeriodlevel = params.getAs[Int]("clusterPeriodmasterPeriodlevel")

    //println("clusterPeriodmasterPeriodlevel: " + clusterPeriodmasterPeriodlevel)
            val clusterPeriodslavePeriodlevel = params.getAs[Int]("clusterPeriodslavePeriodlevel")

    //println("clusterPeriodslavePeriodlevel: " + clusterPeriodslavePeriodlevel)
  }

  

  val comDayCqMailerDefaultMailServiceOperation = (apiOperation[ComDayCqMailerDefaultMailServiceInfo]("comDayCqMailerDefaultMailService")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("smtpPeriodhost").description("").optional, queryParam[Int]("smtpPeriodport").description("").optional, queryParam[String]("smtpPerioduser").description("").optional, queryParam[String]("smtpPeriodpassword").description("").optional, queryParam[String]("fromPeriodaddress").description("").optional, queryParam[Boolean]("smtpPeriodssl").description("").optional, queryParam[Boolean]("smtpPeriodstarttls").description("").optional, queryParam[Boolean]("debugPeriodemail").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.mailer.DefaultMailService", operation(comDayCqMailerDefaultMailServiceOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val smtpPeriodhost = params.getAs[String]("smtpPeriodhost")

    //println("smtpPeriodhost: " + smtpPeriodhost)
            val smtpPeriodport = params.getAs[Int]("smtpPeriodport")

    //println("smtpPeriodport: " + smtpPeriodport)
            val smtpPerioduser = params.getAs[String]("smtpPerioduser")

    //println("smtpPerioduser: " + smtpPerioduser)
            val smtpPeriodpassword = params.getAs[String]("smtpPeriodpassword")

    //println("smtpPeriodpassword: " + smtpPeriodpassword)
            val fromPeriodaddress = params.getAs[String]("fromPeriodaddress")

    //println("fromPeriodaddress: " + fromPeriodaddress)
            val smtpPeriodssl = params.getAs[Boolean]("smtpPeriodssl")

    //println("smtpPeriodssl: " + smtpPeriodssl)
            val smtpPeriodstarttls = params.getAs[Boolean]("smtpPeriodstarttls")

    //println("smtpPeriodstarttls: " + smtpPeriodstarttls)
            val debugPeriodemail = params.getAs[Boolean]("debugPeriodemail")

    //println("debugPeriodemail: " + debugPeriodemail)
  }

  

  val comDayCqMailerImplCqMailingServiceOperation = (apiOperation[ComDayCqMailerImplCqMailingServiceInfo]("comDayCqMailerImplCqMailingService")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("maxPeriodrecipientPeriodcount").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.mailer.impl.CqMailingService", operation(comDayCqMailerImplCqMailingServiceOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val maxPeriodrecipientPeriodcount = params.getAs[String]("maxPeriodrecipientPeriodcount")

    //println("maxPeriodrecipientPeriodcount: " + maxPeriodrecipientPeriodcount)
  }

  

  val comDayCqMailerImplEmailCqEmailTemplateFactoryOperation = (apiOperation[ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo]("comDayCqMailerImplEmailCqEmailTemplateFactory")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("mailerPeriodemailPeriodcharset").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.mailer.impl.email.CqEmailTemplateFactory", operation(comDayCqMailerImplEmailCqEmailTemplateFactoryOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val mailerPeriodemailPeriodcharset = params.getAs[String]("mailerPeriodemailPeriodcharset")

    //println("mailerPeriodemailPeriodcharset: " + mailerPeriodemailPeriodcharset)
  }

  

  val comDayCqMailerImplEmailCqRetrieverTemplateFactoryOperation = (apiOperation[ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo]("comDayCqMailerImplEmailCqRetrieverTemplateFactory")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("mailerPeriodemailPeriodembed").description("").optional, queryParam[String]("mailerPeriodemailPeriodcharset").description("").optional, queryParam[String]("mailerPeriodemailPeriodretrieverUserID").description("").optional, queryParam[String]("mailerPeriodemailPeriodretrieverUserPWD").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.mailer.impl.email.CqRetrieverTemplateFactory", operation(comDayCqMailerImplEmailCqRetrieverTemplateFactoryOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val mailerPeriodemailPeriodembed = params.getAs[Boolean]("mailerPeriodemailPeriodembed")

    //println("mailerPeriodemailPeriodembed: " + mailerPeriodemailPeriodembed)
            val mailerPeriodemailPeriodcharset = params.getAs[String]("mailerPeriodemailPeriodcharset")

    //println("mailerPeriodemailPeriodcharset: " + mailerPeriodemailPeriodcharset)
            val mailerPeriodemailPeriodretrieverUserID = params.getAs[String]("mailerPeriodemailPeriodretrieverUserID")

    //println("mailerPeriodemailPeriodretrieverUserID: " + mailerPeriodemailPeriodretrieverUserID)
            val mailerPeriodemailPeriodretrieverUserPWD = params.getAs[String]("mailerPeriodemailPeriodretrieverUserPWD")

    //println("mailerPeriodemailPeriodretrieverUserPWD: " + mailerPeriodemailPeriodretrieverUserPWD)
  }

  

  val comDayCqMcmCampaignImplIntegrationConfigImplOperation = (apiOperation[ComDayCqMcmCampaignImplIntegrationConfigImplInfo]("comDayCqMcmCampaignImplIntegrationConfigImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("aemPeriodmcmPeriodcampaignPeriodformConstraints").description("").optional, queryParam[String]("aemPeriodmcmPeriodcampaignPeriodpublicUrl").description("").optional, queryParam[Boolean]("aemPeriodmcmPeriodcampaignPeriodrelaxedSSL").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.mcm.campaign.impl.IntegrationConfigImpl", operation(comDayCqMcmCampaignImplIntegrationConfigImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val aemPeriodmcmPeriodcampaignPeriodformConstraintsString = params.getAs[String]("aemPeriodmcmPeriodcampaignPeriodformConstraints")
    val aemPeriodmcmPeriodcampaignPeriodformConstraints = if("multi" == "default" || "multi" == "csv") {
      aemPeriodmcmPeriodcampaignPeriodformConstraintsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("aemPeriodmcmPeriodcampaignPeriodformConstraints: " + aemPeriodmcmPeriodcampaignPeriodformConstraints)
            val aemPeriodmcmPeriodcampaignPeriodpublicUrl = params.getAs[String]("aemPeriodmcmPeriodcampaignPeriodpublicUrl")

    //println("aemPeriodmcmPeriodcampaignPeriodpublicUrl: " + aemPeriodmcmPeriodcampaignPeriodpublicUrl)
            val aemPeriodmcmPeriodcampaignPeriodrelaxedSSL = params.getAs[Boolean]("aemPeriodmcmPeriodcampaignPeriodrelaxedSSL")

    //println("aemPeriodmcmPeriodcampaignPeriodrelaxedSSL: " + aemPeriodmcmPeriodcampaignPeriodrelaxedSSL)
  }

  

  val comDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryOperation = (apiOperation[ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo]("comDayCqMcmCampaignImporterPersonalizedTextHandlerFactory")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("servicePeriodranking").description("").optional, queryParam[String]("tagpattern").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.mcm.campaign.importer.PersonalizedTextHandlerFactory", operation(comDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val servicePeriodranking = params.getAs[Int]("servicePeriodranking")

    //println("servicePeriodranking: " + servicePeriodranking)
            val tagpattern = params.getAs[String]("tagpattern")

    //println("tagpattern: " + tagpattern)
  }

  

  val comDayCqMcmCoreNewsletterNewsletterEmailServiceImplOperation = (apiOperation[ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo]("comDayCqMcmCoreNewsletterNewsletterEmailServiceImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("fromPeriodaddress").description("").optional, queryParam[String]("senderPeriodhost").description("").optional, queryParam[String]("maxPeriodbouncePeriodcount").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.mcm.core.newsletter.NewsletterEmailServiceImpl", operation(comDayCqMcmCoreNewsletterNewsletterEmailServiceImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val fromPeriodaddress = params.getAs[String]("fromPeriodaddress")

    //println("fromPeriodaddress: " + fromPeriodaddress)
            val senderPeriodhost = params.getAs[String]("senderPeriodhost")

    //println("senderPeriodhost: " + senderPeriodhost)
            val maxPeriodbouncePeriodcount = params.getAs[String]("maxPeriodbouncePeriodcount")

    //println("maxPeriodbouncePeriodcount: " + maxPeriodbouncePeriodcount)
  }

  

  val comDayCqMcmImplMCMConfigurationOperation = (apiOperation[ComDayCqMcmImplMCMConfigurationInfo]("comDayCqMcmImplMCMConfiguration")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("experiencePeriodindirection").description("").optional, queryParam[List[String]]("touchpointPeriodindirection").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.mcm.impl.MCMConfiguration", operation(comDayCqMcmImplMCMConfigurationOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val experiencePeriodindirectionString = params.getAs[String]("experiencePeriodindirection")
    val experiencePeriodindirection = if("multi" == "default" || "multi" == "csv") {
      experiencePeriodindirectionString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("experiencePeriodindirection: " + experiencePeriodindirection)
        val touchpointPeriodindirectionString = params.getAs[String]("touchpointPeriodindirection")
    val touchpointPeriodindirection = if("multi" == "default" || "multi" == "csv") {
      touchpointPeriodindirectionString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("touchpointPeriodindirection: " + touchpointPeriodindirection)
  }

  

  val comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenOperation = (apiOperation[ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo]("comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("servicePeriodranking").description("").optional, queryParam[String]("tagpattern").description("").optional, queryParam[String]("componentPeriodresourceType").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.ClickThroughComponentTagHandlerFactory", operation(comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val servicePeriodranking = params.getAs[Int]("servicePeriodranking")

    //println("servicePeriodranking: " + servicePeriodranking)
            val tagpattern = params.getAs[String]("tagpattern")

    //println("tagpattern: " + tagpattern)
            val componentPeriodresourceType = params.getAs[String]("componentPeriodresourceType")

    //println("componentPeriodresourceType: " + componentPeriodresourceType)
  }

  

  val comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougOperation = (apiOperation[ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo]("comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("servicePeriodranking").description("").optional, queryParam[String]("tagpattern").description("").optional, queryParam[String]("componentPeriodresourceType").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.GraphicalClickThroughComponentTagHandlerFactory", operation(comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val servicePeriodranking = params.getAs[Int]("servicePeriodranking")

    //println("servicePeriodranking: " + servicePeriodranking)
            val tagpattern = params.getAs[String]("tagpattern")

    //println("tagpattern: " + tagpattern)
            val componentPeriodresourceType = params.getAs[String]("componentPeriodresourceType")

    //println("componentPeriodresourceType: " + componentPeriodresourceType)
  }

  

  val comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentOperation = (apiOperation[ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo]("comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("servicePeriodranking").description("").optional, queryParam[String]("tagpattern").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.LeadFormCTAComponentTagHandlerFactory", operation(comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val servicePeriodranking = params.getAs[Int]("servicePeriodranking")

    //println("servicePeriodranking: " + servicePeriodranking)
            val tagpattern = params.getAs[String]("tagpattern")

    //println("tagpattern: " + tagpattern)
  }

  

  val comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaOperation = (apiOperation[ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo]("comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("servicePeriodranking").description("").optional, queryParam[String]("tagpattern").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.MBoxExperienceTagHandlerFactory", operation(comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val servicePeriodranking = params.getAs[Int]("servicePeriodranking")

    //println("servicePeriodranking: " + servicePeriodranking)
            val tagpattern = params.getAs[String]("tagpattern")

    //println("tagpattern: " + tagpattern)
  }

  

  val comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHOperation = (apiOperation[ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo]("comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("servicePeriodranking").description("").optional, queryParam[String]("tagpattern").description("").optional, queryParam[String]("componentPeriodresourceType").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.TargetComponentTagHandlerFactory", operation(comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val servicePeriodranking = params.getAs[Int]("servicePeriodranking")

    //println("servicePeriodranking: " + servicePeriodranking)
            val tagpattern = params.getAs[String]("tagpattern")

    //println("tagpattern: " + tagpattern)
            val componentPeriodresourceType = params.getAs[String]("componentPeriodresourceType")

    //println("componentPeriodresourceType: " + componentPeriodresourceType)
  }

  

  val comDayCqNotificationImplNotificationServiceImplOperation = (apiOperation[ComDayCqNotificationImplNotificationServiceImplInfo]("comDayCqNotificationImplNotificationServiceImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("eventPeriodfilter").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.notification.impl.NotificationServiceImpl", operation(comDayCqNotificationImplNotificationServiceImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val eventPeriodfilter = params.getAs[String]("eventPeriodfilter")

    //println("eventPeriodfilter: " + eventPeriodfilter)
  }

  

  val comDayCqPersonalizationImplServletsTargetingConfigurationServletOperation = (apiOperation[ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo]("comDayCqPersonalizationImplServletsTargetingConfigurationServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("forcelocation").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.personalization.impl.servlets.TargetingConfigurationServlet", operation(comDayCqPersonalizationImplServletsTargetingConfigurationServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val forcelocation = params.getAs[Boolean]("forcelocation")

    //println("forcelocation: " + forcelocation)
  }

  

  val comDayCqPollingImporterImplManagedPollConfigImplOperation = (apiOperation[ComDayCqPollingImporterImplManagedPollConfigImplInfo]("comDayCqPollingImporterImplManagedPollConfigImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("id").description("").optional, queryParam[Boolean]("enabled").description("").optional, queryParam[Boolean]("reference").description("").optional, queryParam[Int]("interval").description("").optional, queryParam[String]("expression").description("").optional, queryParam[String]("source").description("").optional, queryParam[String]("target").description("").optional, queryParam[String]("login").description("").optional, queryParam[String]("password").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollConfigImpl", operation(comDayCqPollingImporterImplManagedPollConfigImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val id = params.getAs[String]("id")

    //println("id: " + id)
            val enabled = params.getAs[Boolean]("enabled")

    //println("enabled: " + enabled)
            val reference = params.getAs[Boolean]("reference")

    //println("reference: " + reference)
            val interval = params.getAs[Int]("interval")

    //println("interval: " + interval)
            val expression = params.getAs[String]("expression")

    //println("expression: " + expression)
            val source = params.getAs[String]("source")

    //println("source: " + source)
            val target = params.getAs[String]("target")

    //println("target: " + target)
            val login = params.getAs[String]("login")

    //println("login: " + login)
            val password = params.getAs[String]("password")

    //println("password: " + password)
  }

  

  val comDayCqPollingImporterImplManagedPollingImporterImplOperation = (apiOperation[ComDayCqPollingImporterImplManagedPollingImporterImplInfo]("comDayCqPollingImporterImplManagedPollingImporterImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("importerPerioduser").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollingImporterImpl", operation(comDayCqPollingImporterImplManagedPollingImporterImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val importerPerioduser = params.getAs[String]("importerPerioduser")

    //println("importerPerioduser: " + importerPerioduser)
  }

  

  val comDayCqPollingImporterImplPollingImporterImplOperation = (apiOperation[ComDayCqPollingImporterImplPollingImporterImplInfo]("comDayCqPollingImporterImplPollingImporterImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("importerPeriodminPeriodinterval").description("").optional, queryParam[String]("importerPerioduser").description("").optional, queryParam[List[String]]("excludePeriodpaths").description("").optional, queryParam[List[String]]("includePeriodpaths").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.polling.importer.impl.PollingImporterImpl", operation(comDayCqPollingImporterImplPollingImporterImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val importerPeriodminPeriodinterval = params.getAs[Int]("importerPeriodminPeriodinterval")

    //println("importerPeriodminPeriodinterval: " + importerPeriodminPeriodinterval)
            val importerPerioduser = params.getAs[String]("importerPerioduser")

    //println("importerPerioduser: " + importerPerioduser)
        val excludePeriodpathsString = params.getAs[String]("excludePeriodpaths")
    val excludePeriodpaths = if("multi" == "default" || "multi" == "csv") {
      excludePeriodpathsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("excludePeriodpaths: " + excludePeriodpaths)
        val includePeriodpathsString = params.getAs[String]("includePeriodpaths")
    val includePeriodpaths = if("multi" == "default" || "multi" == "csv") {
      includePeriodpathsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("includePeriodpaths: " + includePeriodpaths)
  }

  

  val comDayCqReplicationAuditReplicationEventListenerOperation = (apiOperation[ComDayCqReplicationAuditReplicationEventListenerInfo]("comDayCqReplicationAuditReplicationEventListener")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("servicePeriodranking").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.replication.audit.ReplicationEventListener", operation(comDayCqReplicationAuditReplicationEventListenerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val servicePeriodranking = params.getAs[Int]("servicePeriodranking")

    //println("servicePeriodranking: " + servicePeriodranking)
  }

  

  val comDayCqReplicationContentStaticContentBuilderOperation = (apiOperation[ComDayCqReplicationContentStaticContentBuilderInfo]("comDayCqReplicationContentStaticContentBuilder")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("host").description("").optional, queryParam[Int]("port").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.replication.content.StaticContentBuilder", operation(comDayCqReplicationContentStaticContentBuilderOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val host = params.getAs[String]("host")

    //println("host: " + host)
            val port = params.getAs[Int]("port")

    //println("port: " + port)
  }

  

  val comDayCqReplicationImplAgentManagerImplOperation = (apiOperation[ComDayCqReplicationImplAgentManagerImplInfo]("comDayCqReplicationImplAgentManagerImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("jobPeriodtopics").description("").optional, queryParam[String]("serviceUserPeriodtarget").description("").optional, queryParam[String]("agentProviderPeriodtarget").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.replication.impl.AgentManagerImpl", operation(comDayCqReplicationImplAgentManagerImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val jobPeriodtopics = params.getAs[String]("jobPeriodtopics")

    //println("jobPeriodtopics: " + jobPeriodtopics)
            val serviceUserPeriodtarget = params.getAs[String]("serviceUserPeriodtarget")

    //println("serviceUserPeriodtarget: " + serviceUserPeriodtarget)
            val agentProviderPeriodtarget = params.getAs[String]("agentProviderPeriodtarget")

    //println("agentProviderPeriodtarget: " + agentProviderPeriodtarget)
  }

  

  val comDayCqReplicationImplContentDurboBinaryLessContentBuilderOperation = (apiOperation[ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo]("comDayCqReplicationImplContentDurboBinaryLessContentBuilder")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("binaryPeriodthreshold").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.replication.impl.content.durbo.BinaryLessContentBuilder", operation(comDayCqReplicationImplContentDurboBinaryLessContentBuilderOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val binaryPeriodthreshold = params.getAs[Int]("binaryPeriodthreshold")

    //println("binaryPeriodthreshold: " + binaryPeriodthreshold)
  }

  

  val comDayCqReplicationImplContentDurboDurboImportConfigurationProvOperation = (apiOperation[ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo]("comDayCqReplicationImplContentDurboDurboImportConfigurationProv")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("preservePeriodhierarchyPeriodnodes").description("").optional, queryParam[Boolean]("ignorePeriodversioning").description("").optional, queryParam[Boolean]("importPeriodacl").description("").optional, queryParam[Int]("savePeriodthreshold").description("").optional, queryParam[Boolean]("preservePerioduserPeriodpaths").description("").optional, queryParam[Boolean]("preservePerioduuid").description("").optional, queryParam[List[String]]("preservePerioduuidPeriodnodetypes").description("").optional, queryParam[List[String]]("preservePerioduuidPeriodsubtrees").description("").optional, queryParam[Boolean]("autoPeriodcommit").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.replication.impl.content.durbo.DurboImportConfigurationProviderService", operation(comDayCqReplicationImplContentDurboDurboImportConfigurationProvOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val preservePeriodhierarchyPeriodnodes = params.getAs[Boolean]("preservePeriodhierarchyPeriodnodes")

    //println("preservePeriodhierarchyPeriodnodes: " + preservePeriodhierarchyPeriodnodes)
            val ignorePeriodversioning = params.getAs[Boolean]("ignorePeriodversioning")

    //println("ignorePeriodversioning: " + ignorePeriodversioning)
            val importPeriodacl = params.getAs[Boolean]("importPeriodacl")

    //println("importPeriodacl: " + importPeriodacl)
            val savePeriodthreshold = params.getAs[Int]("savePeriodthreshold")

    //println("savePeriodthreshold: " + savePeriodthreshold)
            val preservePerioduserPeriodpaths = params.getAs[Boolean]("preservePerioduserPeriodpaths")

    //println("preservePerioduserPeriodpaths: " + preservePerioduserPeriodpaths)
            val preservePerioduuid = params.getAs[Boolean]("preservePerioduuid")

    //println("preservePerioduuid: " + preservePerioduuid)
        val preservePerioduuidPeriodnodetypesString = params.getAs[String]("preservePerioduuidPeriodnodetypes")
    val preservePerioduuidPeriodnodetypes = if("multi" == "default" || "multi" == "csv") {
      preservePerioduuidPeriodnodetypesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("preservePerioduuidPeriodnodetypes: " + preservePerioduuidPeriodnodetypes)
        val preservePerioduuidPeriodsubtreesString = params.getAs[String]("preservePerioduuidPeriodsubtrees")
    val preservePerioduuidPeriodsubtrees = if("multi" == "default" || "multi" == "csv") {
      preservePerioduuidPeriodsubtreesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("preservePerioduuidPeriodsubtrees: " + preservePerioduuidPeriodsubtrees)
            val autoPeriodcommit = params.getAs[Boolean]("autoPeriodcommit")

    //println("autoPeriodcommit: " + autoPeriodcommit)
  }

  

  val comDayCqReplicationImplReplicationContentFactoryProviderImplOperation = (apiOperation[ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo]("comDayCqReplicationImplReplicationContentFactoryProviderImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("replicationPeriodcontentPerioduseFileStorage").description("").optional, queryParam[Int]("replicationPeriodcontentPeriodmaxCommitAttempts").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.replication.impl.ReplicationContentFactoryProviderImpl", operation(comDayCqReplicationImplReplicationContentFactoryProviderImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val replicationPeriodcontentPerioduseFileStorage = params.getAs[Boolean]("replicationPeriodcontentPerioduseFileStorage")

    //println("replicationPeriodcontentPerioduseFileStorage: " + replicationPeriodcontentPerioduseFileStorage)
            val replicationPeriodcontentPeriodmaxCommitAttempts = params.getAs[Int]("replicationPeriodcontentPeriodmaxCommitAttempts")

    //println("replicationPeriodcontentPeriodmaxCommitAttempts: " + replicationPeriodcontentPeriodmaxCommitAttempts)
  }

  

  val comDayCqReplicationImplReplicationReceiverImplOperation = (apiOperation[ComDayCqReplicationImplReplicationReceiverImplInfo]("comDayCqReplicationImplReplicationReceiverImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("receiverPeriodtmpfilePeriodthreshold").description("").optional, queryParam[Boolean]("receiverPeriodpackagesPeriodusePeriodinstall").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.replication.impl.ReplicationReceiverImpl", operation(comDayCqReplicationImplReplicationReceiverImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val receiverPeriodtmpfilePeriodthreshold = params.getAs[Int]("receiverPeriodtmpfilePeriodthreshold")

    //println("receiverPeriodtmpfilePeriodthreshold: " + receiverPeriodtmpfilePeriodthreshold)
            val receiverPeriodpackagesPeriodusePeriodinstall = params.getAs[Boolean]("receiverPeriodpackagesPeriodusePeriodinstall")

    //println("receiverPeriodpackagesPeriodusePeriodinstall: " + receiverPeriodpackagesPeriodusePeriodinstall)
  }

  

  val comDayCqReplicationImplReplicatorImplOperation = (apiOperation[ComDayCqReplicationImplReplicatorImplInfo]("comDayCqReplicationImplReplicatorImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("distributeEvents").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.replication.impl.ReplicatorImpl", operation(comDayCqReplicationImplReplicatorImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val distributeEvents = params.getAs[Boolean]("distributeEvents")

    //println("distributeEvents: " + distributeEvents)
  }

  

  val comDayCqReplicationImplReverseReplicatorOperation = (apiOperation[ComDayCqReplicationImplReverseReplicatorInfo]("comDayCqReplicationImplReverseReplicator")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("schedulerPeriodperiod").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.replication.impl.ReverseReplicator", operation(comDayCqReplicationImplReverseReplicatorOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val schedulerPeriodperiod = params.getAs[Int]("schedulerPeriodperiod")

    //println("schedulerPeriodperiod: " + schedulerPeriodperiod)
  }

  

  val comDayCqReplicationImplTransportBinaryLessTransportHandlerOperation = (apiOperation[ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo]("comDayCqReplicationImplTransportBinaryLessTransportHandler")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("disabledPeriodcipherPeriodsuites").description("").optional, queryParam[List[String]]("enabledPeriodcipherPeriodsuites").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.replication.impl.transport.BinaryLessTransportHandler", operation(comDayCqReplicationImplTransportBinaryLessTransportHandlerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val disabledPeriodcipherPeriodsuitesString = params.getAs[String]("disabledPeriodcipherPeriodsuites")
    val disabledPeriodcipherPeriodsuites = if("multi" == "default" || "multi" == "csv") {
      disabledPeriodcipherPeriodsuitesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("disabledPeriodcipherPeriodsuites: " + disabledPeriodcipherPeriodsuites)
        val enabledPeriodcipherPeriodsuitesString = params.getAs[String]("enabledPeriodcipherPeriodsuites")
    val enabledPeriodcipherPeriodsuites = if("multi" == "default" || "multi" == "csv") {
      enabledPeriodcipherPeriodsuitesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("enabledPeriodcipherPeriodsuites: " + enabledPeriodcipherPeriodsuites)
  }

  

  val comDayCqReplicationImplTransportHttpOperation = (apiOperation[ComDayCqReplicationImplTransportHttpInfo]("comDayCqReplicationImplTransportHttp")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("disabledPeriodcipherPeriodsuites").description("").optional, queryParam[List[String]]("enabledPeriodcipherPeriodsuites").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.replication.impl.transport.Http", operation(comDayCqReplicationImplTransportHttpOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val disabledPeriodcipherPeriodsuitesString = params.getAs[String]("disabledPeriodcipherPeriodsuites")
    val disabledPeriodcipherPeriodsuites = if("multi" == "default" || "multi" == "csv") {
      disabledPeriodcipherPeriodsuitesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("disabledPeriodcipherPeriodsuites: " + disabledPeriodcipherPeriodsuites)
        val enabledPeriodcipherPeriodsuitesString = params.getAs[String]("enabledPeriodcipherPeriodsuites")
    val enabledPeriodcipherPeriodsuites = if("multi" == "default" || "multi" == "csv") {
      enabledPeriodcipherPeriodsuitesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("enabledPeriodcipherPeriodsuites: " + enabledPeriodcipherPeriodsuites)
  }

  

  val comDayCqReportingImplCacheCacheImplOperation = (apiOperation[ComDayCqReportingImplCacheCacheImplInfo]("comDayCqReportingImplCacheCacheImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("repcachePeriodenable").description("").optional, queryParam[Int]("repcachePeriodttl").description("").optional, queryParam[Int]("repcachePeriodmax").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.reporting.impl.cache.CacheImpl", operation(comDayCqReportingImplCacheCacheImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val repcachePeriodenable = params.getAs[Boolean]("repcachePeriodenable")

    //println("repcachePeriodenable: " + repcachePeriodenable)
            val repcachePeriodttl = params.getAs[Int]("repcachePeriodttl")

    //println("repcachePeriodttl: " + repcachePeriodttl)
            val repcachePeriodmax = params.getAs[Int]("repcachePeriodmax")

    //println("repcachePeriodmax: " + repcachePeriodmax)
  }

  

  val comDayCqReportingImplConfigServiceImplOperation = (apiOperation[ComDayCqReportingImplConfigServiceImplInfo]("comDayCqReportingImplConfigServiceImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("repconfPeriodtimezone").description("").optional, queryParam[String]("repconfPeriodlocale").description("").optional, queryParam[String]("repconfPeriodsnapshots").description("").optional, queryParam[String]("repconfPeriodrepdir").description("").optional, queryParam[Int]("repconfPeriodhourofday").description("").optional, queryParam[Int]("repconfPeriodminofhour").description("").optional, queryParam[Int]("repconfPeriodmaxrows").description("").optional, queryParam[Boolean]("repconfPeriodfakedata").description("").optional, queryParam[String]("repconfPeriodsnapshotuser").description("").optional, queryParam[Boolean]("repconfPeriodenforcesnapshotuser").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.reporting.impl.ConfigServiceImpl", operation(comDayCqReportingImplConfigServiceImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val repconfPeriodtimezone = params.getAs[String]("repconfPeriodtimezone")

    //println("repconfPeriodtimezone: " + repconfPeriodtimezone)
            val repconfPeriodlocale = params.getAs[String]("repconfPeriodlocale")

    //println("repconfPeriodlocale: " + repconfPeriodlocale)
            val repconfPeriodsnapshots = params.getAs[String]("repconfPeriodsnapshots")

    //println("repconfPeriodsnapshots: " + repconfPeriodsnapshots)
            val repconfPeriodrepdir = params.getAs[String]("repconfPeriodrepdir")

    //println("repconfPeriodrepdir: " + repconfPeriodrepdir)
            val repconfPeriodhourofday = params.getAs[Int]("repconfPeriodhourofday")

    //println("repconfPeriodhourofday: " + repconfPeriodhourofday)
            val repconfPeriodminofhour = params.getAs[Int]("repconfPeriodminofhour")

    //println("repconfPeriodminofhour: " + repconfPeriodminofhour)
            val repconfPeriodmaxrows = params.getAs[Int]("repconfPeriodmaxrows")

    //println("repconfPeriodmaxrows: " + repconfPeriodmaxrows)
            val repconfPeriodfakedata = params.getAs[Boolean]("repconfPeriodfakedata")

    //println("repconfPeriodfakedata: " + repconfPeriodfakedata)
            val repconfPeriodsnapshotuser = params.getAs[String]("repconfPeriodsnapshotuser")

    //println("repconfPeriodsnapshotuser: " + repconfPeriodsnapshotuser)
            val repconfPeriodenforcesnapshotuser = params.getAs[Boolean]("repconfPeriodenforcesnapshotuser")

    //println("repconfPeriodenforcesnapshotuser: " + repconfPeriodenforcesnapshotuser)
  }

  

  val comDayCqReportingImplRLogAnalyzerOperation = (apiOperation[ComDayCqReportingImplRLogAnalyzerInfo]("comDayCqReportingImplRLogAnalyzer")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("requestPeriodlogPeriodoutput").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.reporting.impl.RLogAnalyzer", operation(comDayCqReportingImplRLogAnalyzerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val requestPeriodlogPeriodoutput = params.getAs[String]("requestPeriodlogPeriodoutput")

    //println("requestPeriodlogPeriodoutput: " + requestPeriodlogPeriodoutput)
  }

  

  val comDayCqRewriterLinkcheckerImplLinkCheckerImplOperation = (apiOperation[ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo]("comDayCqRewriterLinkcheckerImplLinkCheckerImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("schedulerPeriodperiod").description("").optional, queryParam[Boolean]("schedulerPeriodconcurrent").description("").optional, queryParam[Int]("servicePeriodbadLinkToleranceInterval").description("").optional, queryParam[List[String]]("servicePeriodcheckOverridePatterns").description("").optional, queryParam[Boolean]("servicePeriodcacheBrokenInternalLinks").description("").optional, queryParam[List[String]]("servicePeriodspecialLinkPrefix").description("").optional, queryParam[List[String]]("servicePeriodspecialLinkPatterns").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerImpl", operation(comDayCqRewriterLinkcheckerImplLinkCheckerImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val schedulerPeriodperiod = params.getAs[Int]("schedulerPeriodperiod")

    //println("schedulerPeriodperiod: " + schedulerPeriodperiod)
            val schedulerPeriodconcurrent = params.getAs[Boolean]("schedulerPeriodconcurrent")

    //println("schedulerPeriodconcurrent: " + schedulerPeriodconcurrent)
            val servicePeriodbadLinkToleranceInterval = params.getAs[Int]("servicePeriodbadLinkToleranceInterval")

    //println("servicePeriodbadLinkToleranceInterval: " + servicePeriodbadLinkToleranceInterval)
        val servicePeriodcheckOverridePatternsString = params.getAs[String]("servicePeriodcheckOverridePatterns")
    val servicePeriodcheckOverridePatterns = if("multi" == "default" || "multi" == "csv") {
      servicePeriodcheckOverridePatternsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("servicePeriodcheckOverridePatterns: " + servicePeriodcheckOverridePatterns)
            val servicePeriodcacheBrokenInternalLinks = params.getAs[Boolean]("servicePeriodcacheBrokenInternalLinks")

    //println("servicePeriodcacheBrokenInternalLinks: " + servicePeriodcacheBrokenInternalLinks)
        val servicePeriodspecialLinkPrefixString = params.getAs[String]("servicePeriodspecialLinkPrefix")
    val servicePeriodspecialLinkPrefix = if("multi" == "default" || "multi" == "csv") {
      servicePeriodspecialLinkPrefixString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("servicePeriodspecialLinkPrefix: " + servicePeriodspecialLinkPrefix)
        val servicePeriodspecialLinkPatternsString = params.getAs[String]("servicePeriodspecialLinkPatterns")
    val servicePeriodspecialLinkPatterns = if("multi" == "default" || "multi" == "csv") {
      servicePeriodspecialLinkPatternsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("servicePeriodspecialLinkPatterns: " + servicePeriodspecialLinkPatterns)
  }

  

  val comDayCqRewriterLinkcheckerImplLinkCheckerTaskOperation = (apiOperation[ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo]("comDayCqRewriterLinkcheckerImplLinkCheckerTask")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("schedulerPeriodperiod").description("").optional, queryParam[Boolean]("schedulerPeriodconcurrent").description("").optional, queryParam[Int]("goodLinkTestInterval").description("").optional, queryParam[Int]("badLinkTestInterval").description("").optional, queryParam[Int]("linkUnusedInterval").description("").optional, queryParam[Int]("connectionPeriodtimeout").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTask", operation(comDayCqRewriterLinkcheckerImplLinkCheckerTaskOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val schedulerPeriodperiod = params.getAs[Int]("schedulerPeriodperiod")

    //println("schedulerPeriodperiod: " + schedulerPeriodperiod)
            val schedulerPeriodconcurrent = params.getAs[Boolean]("schedulerPeriodconcurrent")

    //println("schedulerPeriodconcurrent: " + schedulerPeriodconcurrent)
            val goodLinkTestInterval = params.getAs[Int]("goodLinkTestInterval")

    //println("goodLinkTestInterval: " + goodLinkTestInterval)
            val badLinkTestInterval = params.getAs[Int]("badLinkTestInterval")

    //println("badLinkTestInterval: " + badLinkTestInterval)
            val linkUnusedInterval = params.getAs[Int]("linkUnusedInterval")

    //println("linkUnusedInterval: " + linkUnusedInterval)
            val connectionPeriodtimeout = params.getAs[Int]("connectionPeriodtimeout")

    //println("connectionPeriodtimeout: " + connectionPeriodtimeout)
  }

  

  val comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryOperation = (apiOperation[ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo]("comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("linkcheckertransformerPerioddisableRewriting").description("").optional, queryParam[Boolean]("linkcheckertransformerPerioddisableChecking").description("").optional, queryParam[Int]("linkcheckertransformerPeriodmapCacheSize").description("").optional, queryParam[Boolean]("linkcheckertransformerPeriodstrictExtensionCheck").description("").optional, queryParam[Boolean]("linkcheckertransformerPeriodstripHtmltExtension").description("").optional, queryParam[List[String]]("linkcheckertransformerPeriodrewriteElements").description("").optional, queryParam[List[String]]("linkcheckertransformerPeriodstripExtensionPathBlacklist").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTransformerFactory", operation(comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val linkcheckertransformerPerioddisableRewriting = params.getAs[Boolean]("linkcheckertransformerPerioddisableRewriting")

    //println("linkcheckertransformerPerioddisableRewriting: " + linkcheckertransformerPerioddisableRewriting)
            val linkcheckertransformerPerioddisableChecking = params.getAs[Boolean]("linkcheckertransformerPerioddisableChecking")

    //println("linkcheckertransformerPerioddisableChecking: " + linkcheckertransformerPerioddisableChecking)
            val linkcheckertransformerPeriodmapCacheSize = params.getAs[Int]("linkcheckertransformerPeriodmapCacheSize")

    //println("linkcheckertransformerPeriodmapCacheSize: " + linkcheckertransformerPeriodmapCacheSize)
            val linkcheckertransformerPeriodstrictExtensionCheck = params.getAs[Boolean]("linkcheckertransformerPeriodstrictExtensionCheck")

    //println("linkcheckertransformerPeriodstrictExtensionCheck: " + linkcheckertransformerPeriodstrictExtensionCheck)
            val linkcheckertransformerPeriodstripHtmltExtension = params.getAs[Boolean]("linkcheckertransformerPeriodstripHtmltExtension")

    //println("linkcheckertransformerPeriodstripHtmltExtension: " + linkcheckertransformerPeriodstripHtmltExtension)
        val linkcheckertransformerPeriodrewriteElementsString = params.getAs[String]("linkcheckertransformerPeriodrewriteElements")
    val linkcheckertransformerPeriodrewriteElements = if("multi" == "default" || "multi" == "csv") {
      linkcheckertransformerPeriodrewriteElementsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("linkcheckertransformerPeriodrewriteElements: " + linkcheckertransformerPeriodrewriteElements)
        val linkcheckertransformerPeriodstripExtensionPathBlacklistString = params.getAs[String]("linkcheckertransformerPeriodstripExtensionPathBlacklist")
    val linkcheckertransformerPeriodstripExtensionPathBlacklist = if("multi" == "default" || "multi" == "csv") {
      linkcheckertransformerPeriodstripExtensionPathBlacklistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("linkcheckertransformerPeriodstripExtensionPathBlacklist: " + linkcheckertransformerPeriodstripExtensionPathBlacklist)
  }

  

  val comDayCqRewriterLinkcheckerImplLinkInfoStorageImplOperation = (apiOperation[ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo]("comDayCqRewriterLinkcheckerImplLinkInfoStorageImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("servicePeriodmaxLinksPerHost").description("").optional, queryParam[Boolean]("servicePeriodsaveExternalLinkReferences").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkInfoStorageImpl", operation(comDayCqRewriterLinkcheckerImplLinkInfoStorageImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val servicePeriodmaxLinksPerHost = params.getAs[Int]("servicePeriodmaxLinksPerHost")

    //println("servicePeriodmaxLinksPerHost: " + servicePeriodmaxLinksPerHost)
            val servicePeriodsaveExternalLinkReferences = params.getAs[Boolean]("servicePeriodsaveExternalLinkReferences")

    //println("servicePeriodsaveExternalLinkReferences: " + servicePeriodsaveExternalLinkReferences)
  }

  

  val comDayCqRewriterProcessorImplHtmlParserFactoryOperation = (apiOperation[ComDayCqRewriterProcessorImplHtmlParserFactoryInfo]("comDayCqRewriterProcessorImplHtmlParserFactory")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("htmlparserPeriodprocessTags").description("").optional, queryParam[Boolean]("htmlparserPeriodpreserveCamelCase").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.rewriter.processor.impl.HtmlParserFactory", operation(comDayCqRewriterProcessorImplHtmlParserFactoryOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val htmlparserPeriodprocessTagsString = params.getAs[String]("htmlparserPeriodprocessTags")
    val htmlparserPeriodprocessTags = if("multi" == "default" || "multi" == "csv") {
      htmlparserPeriodprocessTagsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("htmlparserPeriodprocessTags: " + htmlparserPeriodprocessTags)
            val htmlparserPeriodpreserveCamelCase = params.getAs[Boolean]("htmlparserPeriodpreserveCamelCase")

    //println("htmlparserPeriodpreserveCamelCase: " + htmlparserPeriodpreserveCamelCase)
  }

  

  val comDayCqSearchImplBuilderQueryBuilderImplOperation = (apiOperation[ComDayCqSearchImplBuilderQueryBuilderImplInfo]("comDayCqSearchImplBuilderQueryBuilderImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("excerptPeriodproperties").description("").optional, queryParam[Int]("cachePeriodmaxPeriodentries").description("").optional, queryParam[Int]("cachePeriodentryPeriodlifetime").description("").optional, queryParam[Boolean]("xpathPeriodunion").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.search.impl.builder.QueryBuilderImpl", operation(comDayCqSearchImplBuilderQueryBuilderImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val excerptPeriodpropertiesString = params.getAs[String]("excerptPeriodproperties")
    val excerptPeriodproperties = if("multi" == "default" || "multi" == "csv") {
      excerptPeriodpropertiesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("excerptPeriodproperties: " + excerptPeriodproperties)
            val cachePeriodmaxPeriodentries = params.getAs[Int]("cachePeriodmaxPeriodentries")

    //println("cachePeriodmaxPeriodentries: " + cachePeriodmaxPeriodentries)
            val cachePeriodentryPeriodlifetime = params.getAs[Int]("cachePeriodentryPeriodlifetime")

    //println("cachePeriodentryPeriodlifetime: " + cachePeriodentryPeriodlifetime)
            val xpathPeriodunion = params.getAs[Boolean]("xpathPeriodunion")

    //println("xpathPeriodunion: " + xpathPeriodunion)
  }

  

  val comDayCqSearchSuggestImplSuggestionIndexManagerImplOperation = (apiOperation[ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo]("comDayCqSearchSuggestImplSuggestionIndexManagerImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("pathBuilderPeriodtarget").description("").optional, queryParam[String]("suggestPeriodbasepath").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.search.suggest.impl.SuggestionIndexManagerImpl", operation(comDayCqSearchSuggestImplSuggestionIndexManagerImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val pathBuilderPeriodtarget = params.getAs[String]("pathBuilderPeriodtarget")

    //println("pathBuilderPeriodtarget: " + pathBuilderPeriodtarget)
            val suggestPeriodbasepath = params.getAs[String]("suggestPeriodbasepath")

    //println("suggestPeriodbasepath: " + suggestPeriodbasepath)
  }

  

  val comDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerOperation = (apiOperation[ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo]("comDayCqSearchpromoteImplPublishSearchPromoteConfigHandler")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("cqPeriodsearchpromotePeriodconfighandlerPeriodenabled").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.searchpromote.impl.PublishSearchPromoteConfigHandler", operation(comDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val cqPeriodsearchpromotePeriodconfighandlerPeriodenabled = params.getAs[Boolean]("cqPeriodsearchpromotePeriodconfighandlerPeriodenabled")

    //println("cqPeriodsearchpromotePeriodconfighandlerPeriodenabled: " + cqPeriodsearchpromotePeriodconfighandlerPeriodenabled)
  }

  

  val comDayCqSearchpromoteImplSearchPromoteServiceImplOperation = (apiOperation[ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo]("comDayCqSearchpromoteImplSearchPromoteServiceImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("cqPeriodsearchpromotePeriodconfigurationPeriodserverPerioduri").description("").optional, queryParam[String]("cqPeriodsearchpromotePeriodconfigurationPeriodenvironment").description("").optional, queryParam[Int]("connectionPeriodtimeout").description("").optional, queryParam[Int]("socketPeriodtimeout").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.searchpromote.impl.SearchPromoteServiceImpl", operation(comDayCqSearchpromoteImplSearchPromoteServiceImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val cqPeriodsearchpromotePeriodconfigurationPeriodserverPerioduri = params.getAs[String]("cqPeriodsearchpromotePeriodconfigurationPeriodserverPerioduri")

    //println("cqPeriodsearchpromotePeriodconfigurationPeriodserverPerioduri: " + cqPeriodsearchpromotePeriodconfigurationPeriodserverPerioduri)
            val cqPeriodsearchpromotePeriodconfigurationPeriodenvironment = params.getAs[String]("cqPeriodsearchpromotePeriodconfigurationPeriodenvironment")

    //println("cqPeriodsearchpromotePeriodconfigurationPeriodenvironment: " + cqPeriodsearchpromotePeriodconfigurationPeriodenvironment)
            val connectionPeriodtimeout = params.getAs[Int]("connectionPeriodtimeout")

    //println("connectionPeriodtimeout: " + connectionPeriodtimeout)
            val socketPeriodtimeout = params.getAs[Int]("socketPeriodtimeout")

    //println("socketPeriodtimeout: " + socketPeriodtimeout)
  }

  

  val comDayCqSecurityACLSetupOperation = (apiOperation[ComDayCqSecurityACLSetupInfo]("comDayCqSecurityACLSetup")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("cqPeriodaclsetupPeriodrules").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.security.ACLSetup", operation(comDayCqSecurityACLSetupOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val cqPeriodaclsetupPeriodrulesString = params.getAs[String]("cqPeriodaclsetupPeriodrules")
    val cqPeriodaclsetupPeriodrules = if("multi" == "default" || "multi" == "csv") {
      cqPeriodaclsetupPeriodrulesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cqPeriodaclsetupPeriodrules: " + cqPeriodaclsetupPeriodrules)
  }

  

  val comDayCqStatisticsImplStatisticsServiceImplOperation = (apiOperation[ComDayCqStatisticsImplStatisticsServiceImplInfo]("comDayCqStatisticsImplStatisticsServiceImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("schedulerPeriodperiod").description("").optional, queryParam[Boolean]("schedulerPeriodconcurrent").description("").optional, queryParam[String]("path").description("").optional, queryParam[String]("workspace").description("").optional, queryParam[String]("keywordsPath").description("").optional, queryParam[Boolean]("asyncEntries").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.statistics.impl.StatisticsServiceImpl", operation(comDayCqStatisticsImplStatisticsServiceImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val schedulerPeriodperiod = params.getAs[Int]("schedulerPeriodperiod")

    //println("schedulerPeriodperiod: " + schedulerPeriodperiod)
            val schedulerPeriodconcurrent = params.getAs[Boolean]("schedulerPeriodconcurrent")

    //println("schedulerPeriodconcurrent: " + schedulerPeriodconcurrent)
            val path = params.getAs[String]("path")

    //println("path: " + path)
            val workspace = params.getAs[String]("workspace")

    //println("workspace: " + workspace)
            val keywordsPath = params.getAs[String]("keywordsPath")

    //println("keywordsPath: " + keywordsPath)
            val asyncEntries = params.getAs[Boolean]("asyncEntries")

    //println("asyncEntries: " + asyncEntries)
  }

  

  val comDayCqTaggingImplJcrTagManagerFactoryImplOperation = (apiOperation[ComDayCqTaggingImplJcrTagManagerFactoryImplInfo]("comDayCqTaggingImplJcrTagManagerFactoryImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("validationPeriodenabled").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.tagging.impl.JcrTagManagerFactoryImpl", operation(comDayCqTaggingImplJcrTagManagerFactoryImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val validationPeriodenabled = params.getAs[Boolean]("validationPeriodenabled")

    //println("validationPeriodenabled: " + validationPeriodenabled)
  }

  

  val comDayCqTaggingImplSearchTagPredicateEvaluatorOperation = (apiOperation[ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo]("comDayCqTaggingImplSearchTagPredicateEvaluator")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("ignorePath").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.tagging.impl.search.TagPredicateEvaluator", operation(comDayCqTaggingImplSearchTagPredicateEvaluatorOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val ignorePath = params.getAs[Boolean]("ignorePath")

    //println("ignorePath: " + ignorePath)
  }

  

  val comDayCqTaggingImplTagGarbageCollectorOperation = (apiOperation[ComDayCqTaggingImplTagGarbageCollectorInfo]("comDayCqTaggingImplTagGarbageCollector")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("schedulerPeriodexpression").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.tagging.impl.TagGarbageCollector", operation(comDayCqTaggingImplTagGarbageCollectorOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val schedulerPeriodexpression = params.getAs[String]("schedulerPeriodexpression")

    //println("schedulerPeriodexpression: " + schedulerPeriodexpression)
  }

  

  val comDayCqWcmContentsyncImplHandlerPagesUpdateHandlerOperation = (apiOperation[ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo]("comDayCqWcmContentsyncImplHandlerPagesUpdateHandler")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("cqPeriodpagesupdatehandlerPeriodimageresourcetypes").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.contentsync.impl.handler.PagesUpdateHandler", operation(comDayCqWcmContentsyncImplHandlerPagesUpdateHandlerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val cqPeriodpagesupdatehandlerPeriodimageresourcetypesString = params.getAs[String]("cqPeriodpagesupdatehandlerPeriodimageresourcetypes")
    val cqPeriodpagesupdatehandlerPeriodimageresourcetypes = if("multi" == "default" || "multi" == "csv") {
      cqPeriodpagesupdatehandlerPeriodimageresourcetypesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cqPeriodpagesupdatehandlerPeriodimageresourcetypes: " + cqPeriodpagesupdatehandlerPeriodimageresourcetypes)
  }

  

  val comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorOperation = (apiOperation[ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo]("comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodlinks").description("").optional, queryParam[List[String]]("cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodclientlibs").description("").optional, queryParam[List[String]]("cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodimages").description("").optional, queryParam[String]("cqPeriodcontentsyncPeriodpathrewritertransformerPeriodattributePeriodpattern").description("").optional, queryParam[String]("cqPeriodcontentsyncPeriodpathrewritertransformerPeriodclientlibraryPeriodpattern").description("").optional, queryParam[String]("cqPeriodcontentsyncPeriodpathrewritertransformerPeriodclientlibraryPeriodreplace").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.contentsync.impl.rewriter.PathRewriterTransformerFactory", operation(comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodlinksString = params.getAs[String]("cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodlinks")
    val cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodlinks = if("multi" == "default" || "multi" == "csv") {
      cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodlinksString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodlinks: " + cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodlinks)
        val cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodclientlibsString = params.getAs[String]("cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodclientlibs")
    val cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodclientlibs = if("multi" == "default" || "multi" == "csv") {
      cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodclientlibsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodclientlibs: " + cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodclientlibs)
        val cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodimagesString = params.getAs[String]("cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodimages")
    val cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodimages = if("multi" == "default" || "multi" == "csv") {
      cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodimagesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodimages: " + cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodimages)
            val cqPeriodcontentsyncPeriodpathrewritertransformerPeriodattributePeriodpattern = params.getAs[String]("cqPeriodcontentsyncPeriodpathrewritertransformerPeriodattributePeriodpattern")

    //println("cqPeriodcontentsyncPeriodpathrewritertransformerPeriodattributePeriodpattern: " + cqPeriodcontentsyncPeriodpathrewritertransformerPeriodattributePeriodpattern)
            val cqPeriodcontentsyncPeriodpathrewritertransformerPeriodclientlibraryPeriodpattern = params.getAs[String]("cqPeriodcontentsyncPeriodpathrewritertransformerPeriodclientlibraryPeriodpattern")

    //println("cqPeriodcontentsyncPeriodpathrewritertransformerPeriodclientlibraryPeriodpattern: " + cqPeriodcontentsyncPeriodpathrewritertransformerPeriodclientlibraryPeriodpattern)
            val cqPeriodcontentsyncPeriodpathrewritertransformerPeriodclientlibraryPeriodreplace = params.getAs[String]("cqPeriodcontentsyncPeriodpathrewritertransformerPeriodclientlibraryPeriodreplace")

    //println("cqPeriodcontentsyncPeriodpathrewritertransformerPeriodclientlibraryPeriodreplace: " + cqPeriodcontentsyncPeriodpathrewritertransformerPeriodclientlibraryPeriodreplace)
  }

  

  val comDayCqWcmCoreImplAuthoringUIModeServiceImplOperation = (apiOperation[ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo]("comDayCqWcmCoreImplAuthoringUIModeServiceImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("authoringUIModeServicePerioddefault").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.core.impl.AuthoringUIModeServiceImpl", operation(comDayCqWcmCoreImplAuthoringUIModeServiceImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val authoringUIModeServicePerioddefault = params.getAs[String]("authoringUIModeServicePerioddefault")

    //println("authoringUIModeServicePerioddefault: " + authoringUIModeServicePerioddefault)
  }

  

  val comDayCqWcmCoreImplCommandsWCMCommandServletOperation = (apiOperation[ComDayCqWcmCoreImplCommandsWCMCommandServletInfo]("comDayCqWcmCoreImplCommandsWCMCommandServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("wcmcommandservletPerioddeleteWhitelist").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.core.impl.commands.WCMCommandServlet", operation(comDayCqWcmCoreImplCommandsWCMCommandServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val wcmcommandservletPerioddeleteWhitelistString = params.getAs[String]("wcmcommandservletPerioddeleteWhitelist")
    val wcmcommandservletPerioddeleteWhitelist = if("multi" == "default" || "multi" == "csv") {
      wcmcommandservletPerioddeleteWhitelistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("wcmcommandservletPerioddeleteWhitelist: " + wcmcommandservletPerioddeleteWhitelist)
  }

  

  val comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplOperation = (apiOperation[ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo]("comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("dimPerioddefaultPeriodmode").description("").optional, queryParam[Boolean]("dimPeriodappcachePeriodenabled").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.core.impl.devicedetection.DeviceIdentificationModeImpl", operation(comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val dimPerioddefaultPeriodmode = params.getAs[String]("dimPerioddefaultPeriodmode")

    //println("dimPerioddefaultPeriodmode: " + dimPerioddefaultPeriodmode)
            val dimPeriodappcachePeriodenabled = params.getAs[Boolean]("dimPeriodappcachePeriodenabled")

    //println("dimPeriodappcachePeriodenabled: " + dimPeriodappcachePeriodenabled)
  }

  

  val comDayCqWcmCoreImplEventPageEventAuditListenerOperation = (apiOperation[ComDayCqWcmCoreImplEventPageEventAuditListenerInfo]("comDayCqWcmCoreImplEventPageEventAuditListener")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("configured").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.core.impl.event.PageEventAuditListener", operation(comDayCqWcmCoreImplEventPageEventAuditListenerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val configured = params.getAs[String]("configured")

    //println("configured: " + configured)
  }

  

  val comDayCqWcmCoreImplEventPagePostProcessorOperation = (apiOperation[ComDayCqWcmCoreImplEventPagePostProcessorInfo]("comDayCqWcmCoreImplEventPagePostProcessor")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("paths").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.core.impl.event.PagePostProcessor", operation(comDayCqWcmCoreImplEventPagePostProcessorOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val pathsString = params.getAs[String]("paths")
    val paths = if("multi" == "default" || "multi" == "csv") {
      pathsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("paths: " + paths)
  }

  

  val comDayCqWcmCoreImplEventRepositoryChangeEventListenerOperation = (apiOperation[ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo]("comDayCqWcmCoreImplEventRepositoryChangeEventListener")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("paths").description("").optional, queryParam[List[String]]("excludedPaths").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.core.impl.event.RepositoryChangeEventListener", operation(comDayCqWcmCoreImplEventRepositoryChangeEventListenerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val pathsString = params.getAs[String]("paths")
    val paths = if("multi" == "default" || "multi" == "csv") {
      pathsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("paths: " + paths)
        val excludedPathsString = params.getAs[String]("excludedPaths")
    val excludedPaths = if("multi" == "default" || "multi" == "csv") {
      excludedPathsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("excludedPaths: " + excludedPaths)
  }

  

  val comDayCqWcmCoreImplEventTemplatePostProcessorOperation = (apiOperation[ComDayCqWcmCoreImplEventTemplatePostProcessorInfo]("comDayCqWcmCoreImplEventTemplatePostProcessor")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("paths").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.core.impl.event.TemplatePostProcessor", operation(comDayCqWcmCoreImplEventTemplatePostProcessorOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val paths = params.getAs[String]("paths")

    //println("paths: " + paths)
  }

  

  val comDayCqWcmCoreImplLanguageManagerImplOperation = (apiOperation[ComDayCqWcmCoreImplLanguageManagerImplInfo]("comDayCqWcmCoreImplLanguageManagerImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("langmgrPeriodlistPeriodpath").description("").optional, queryParam[List[String]]("langmgrPeriodcountryPerioddefault").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.core.impl.LanguageManagerImpl", operation(comDayCqWcmCoreImplLanguageManagerImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val langmgrPeriodlistPeriodpath = params.getAs[String]("langmgrPeriodlistPeriodpath")

    //println("langmgrPeriodlistPeriodpath: " + langmgrPeriodlistPeriodpath)
        val langmgrPeriodcountryPerioddefaultString = params.getAs[String]("langmgrPeriodcountryPerioddefault")
    val langmgrPeriodcountryPerioddefault = if("multi" == "default" || "multi" == "csv") {
      langmgrPeriodcountryPerioddefaultString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("langmgrPeriodcountryPerioddefault: " + langmgrPeriodcountryPerioddefault)
  }

  

  val comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplOperation = (apiOperation[ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo]("comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("linkPeriodexpiredPeriodprefix").description("").optional, queryParam[Boolean]("linkPeriodexpiredPeriodremove").description("").optional, queryParam[String]("linkPeriodexpiredPeriodsuffix").description("").optional, queryParam[String]("linkPeriodinvalidPeriodprefix").description("").optional, queryParam[Boolean]("linkPeriodinvalidPeriodremove").description("").optional, queryParam[String]("linkPeriodinvalidPeriodsuffix").description("").optional, queryParam[String]("linkPeriodpredatedPeriodprefix").description("").optional, queryParam[Boolean]("linkPeriodpredatedPeriodremove").description("").optional, queryParam[String]("linkPeriodpredatedPeriodsuffix").description("").optional, queryParam[List[String]]("linkPeriodwcmmodes").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.core.impl.LinkCheckerConfigurationFactoryImpl", operation(comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val linkPeriodexpiredPeriodprefix = params.getAs[String]("linkPeriodexpiredPeriodprefix")

    //println("linkPeriodexpiredPeriodprefix: " + linkPeriodexpiredPeriodprefix)
            val linkPeriodexpiredPeriodremove = params.getAs[Boolean]("linkPeriodexpiredPeriodremove")

    //println("linkPeriodexpiredPeriodremove: " + linkPeriodexpiredPeriodremove)
            val linkPeriodexpiredPeriodsuffix = params.getAs[String]("linkPeriodexpiredPeriodsuffix")

    //println("linkPeriodexpiredPeriodsuffix: " + linkPeriodexpiredPeriodsuffix)
            val linkPeriodinvalidPeriodprefix = params.getAs[String]("linkPeriodinvalidPeriodprefix")

    //println("linkPeriodinvalidPeriodprefix: " + linkPeriodinvalidPeriodprefix)
            val linkPeriodinvalidPeriodremove = params.getAs[Boolean]("linkPeriodinvalidPeriodremove")

    //println("linkPeriodinvalidPeriodremove: " + linkPeriodinvalidPeriodremove)
            val linkPeriodinvalidPeriodsuffix = params.getAs[String]("linkPeriodinvalidPeriodsuffix")

    //println("linkPeriodinvalidPeriodsuffix: " + linkPeriodinvalidPeriodsuffix)
            val linkPeriodpredatedPeriodprefix = params.getAs[String]("linkPeriodpredatedPeriodprefix")

    //println("linkPeriodpredatedPeriodprefix: " + linkPeriodpredatedPeriodprefix)
            val linkPeriodpredatedPeriodremove = params.getAs[Boolean]("linkPeriodpredatedPeriodremove")

    //println("linkPeriodpredatedPeriodremove: " + linkPeriodpredatedPeriodremove)
            val linkPeriodpredatedPeriodsuffix = params.getAs[String]("linkPeriodpredatedPeriodsuffix")

    //println("linkPeriodpredatedPeriodsuffix: " + linkPeriodpredatedPeriodsuffix)
        val linkPeriodwcmmodesString = params.getAs[String]("linkPeriodwcmmodes")
    val linkPeriodwcmmodes = if("multi" == "default" || "multi" == "csv") {
      linkPeriodwcmmodesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("linkPeriodwcmmodes: " + linkPeriodwcmmodes)
  }

  

  val comDayCqWcmCoreImplPagePageInfoAggregatorImplOperation = (apiOperation[ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo]("comDayCqWcmCoreImplPagePageInfoAggregatorImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("pagePeriodinfoPeriodproviderPeriodpropertyPeriodregexPerioddefault").description("").optional, queryParam[String]("pagePeriodinfoPeriodproviderPeriodpropertyPeriodname").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.core.impl.page.PageInfoAggregatorImpl", operation(comDayCqWcmCoreImplPagePageInfoAggregatorImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val pagePeriodinfoPeriodproviderPeriodpropertyPeriodregexPerioddefault = params.getAs[String]("pagePeriodinfoPeriodproviderPeriodpropertyPeriodregexPerioddefault")

    //println("pagePeriodinfoPeriodproviderPeriodpropertyPeriodregexPerioddefault: " + pagePeriodinfoPeriodproviderPeriodpropertyPeriodregexPerioddefault)
            val pagePeriodinfoPeriodproviderPeriodpropertyPeriodname = params.getAs[String]("pagePeriodinfoPeriodproviderPeriodpropertyPeriodname")

    //println("pagePeriodinfoPeriodproviderPeriodpropertyPeriodname: " + pagePeriodinfoPeriodproviderPeriodpropertyPeriodname)
  }

  

  val comDayCqWcmCoreImplPagePageManagerFactoryImplOperation = (apiOperation[ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo]("comDayCqWcmCoreImplPagePageManagerFactoryImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("illegalCharMapping").description("").optional, queryParam[Boolean]("pageSubTreeActivationCheck").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.core.impl.page.PageManagerFactoryImpl", operation(comDayCqWcmCoreImplPagePageManagerFactoryImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val illegalCharMapping = params.getAs[String]("illegalCharMapping")

    //println("illegalCharMapping: " + illegalCharMapping)
            val pageSubTreeActivationCheck = params.getAs[Boolean]("pageSubTreeActivationCheck")

    //println("pageSubTreeActivationCheck: " + pageSubTreeActivationCheck)
  }

  

  val comDayCqWcmCoreImplReferencesContentContentReferenceConfigOperation = (apiOperation[ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo]("comDayCqWcmCoreImplReferencesContentContentReferenceConfig")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("contentReferenceConfigPeriodresourceTypes").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.core.impl.references.content.ContentReferenceConfig", operation(comDayCqWcmCoreImplReferencesContentContentReferenceConfigOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val contentReferenceConfigPeriodresourceTypesString = params.getAs[String]("contentReferenceConfigPeriodresourceTypes")
    val contentReferenceConfigPeriodresourceTypes = if("multi" == "default" || "multi" == "csv") {
      contentReferenceConfigPeriodresourceTypesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("contentReferenceConfigPeriodresourceTypes: " + contentReferenceConfigPeriodresourceTypes)
  }

  

  val comDayCqWcmCoreImplServletsContentfinderAssetViewHandlerOperation = (apiOperation[ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo]("comDayCqWcmCoreImplServletsContentfinderAssetViewHandler")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("damPeriodshowexpired").description("").optional, queryParam[Boolean]("damPeriodshowhidden").description("").optional, queryParam[Boolean]("tagTitleSearch").description("").optional, queryParam[String]("guessTotal").description("").optional, queryParam[String]("damPeriodexpiryProperty").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.AssetViewHandler", operation(comDayCqWcmCoreImplServletsContentfinderAssetViewHandlerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val damPeriodshowexpired = params.getAs[Boolean]("damPeriodshowexpired")

    //println("damPeriodshowexpired: " + damPeriodshowexpired)
            val damPeriodshowhidden = params.getAs[Boolean]("damPeriodshowhidden")

    //println("damPeriodshowhidden: " + damPeriodshowhidden)
            val tagTitleSearch = params.getAs[Boolean]("tagTitleSearch")

    //println("tagTitleSearch: " + tagTitleSearch)
            val guessTotal = params.getAs[String]("guessTotal")

    //println("guessTotal: " + guessTotal)
            val damPeriodexpiryProperty = params.getAs[String]("damPeriodexpiryProperty")

    //println("damPeriodexpiryProperty: " + damPeriodexpiryProperty)
  }

  

  val comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieOperation = (apiOperation[ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo]("comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("itemPeriodresourcePeriodtypes").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.connector.ConnectorViewHandler", operation(comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val itemPeriodresourcePeriodtypesString = params.getAs[String]("itemPeriodresourcePeriodtypes")
    val itemPeriodresourcePeriodtypes = if("multi" == "default" || "multi" == "csv") {
      itemPeriodresourcePeriodtypesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("itemPeriodresourcePeriodtypes: " + itemPeriodresourcePeriodtypes)
  }

  

  val comDayCqWcmCoreImplServletsContentfinderPageViewHandlerOperation = (apiOperation[ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo]("comDayCqWcmCoreImplServletsContentfinderPageViewHandler")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("guessTotal").description("").optional, queryParam[Boolean]("tagTitleSearch").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.PageViewHandler", operation(comDayCqWcmCoreImplServletsContentfinderPageViewHandlerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val guessTotal = params.getAs[String]("guessTotal")

    //println("guessTotal: " + guessTotal)
            val tagTitleSearch = params.getAs[Boolean]("tagTitleSearch")

    //println("tagTitleSearch: " + tagTitleSearch)
  }

  

  val comDayCqWcmCoreImplServletsFindReplaceServletOperation = (apiOperation[ComDayCqWcmCoreImplServletsFindReplaceServletInfo]("comDayCqWcmCoreImplServletsFindReplaceServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("scope").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.FindReplaceServlet", operation(comDayCqWcmCoreImplServletsFindReplaceServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val scopeString = params.getAs[String]("scope")
    val scope = if("multi" == "default" || "multi" == "csv") {
      scopeString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("scope: " + scope)
  }

  

  val comDayCqWcmCoreImplServletsReferenceSearchServletOperation = (apiOperation[ComDayCqWcmCoreImplServletsReferenceSearchServletInfo]("comDayCqWcmCoreImplServletsReferenceSearchServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("referencesearchservletPeriodmaxReferencesPerPage").description("").optional, queryParam[Int]("referencesearchservletPeriodmaxPages").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.ReferenceSearchServlet", operation(comDayCqWcmCoreImplServletsReferenceSearchServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val referencesearchservletPeriodmaxReferencesPerPage = params.getAs[Int]("referencesearchservletPeriodmaxReferencesPerPage")

    //println("referencesearchservletPeriodmaxReferencesPerPage: " + referencesearchservletPeriodmaxReferencesPerPage)
            val referencesearchservletPeriodmaxPages = params.getAs[Int]("referencesearchservletPeriodmaxPages")

    //println("referencesearchservletPeriodmaxPages: " + referencesearchservletPeriodmaxPages)
  }

  

  val comDayCqWcmCoreImplServletsThumbnailServletOperation = (apiOperation[ComDayCqWcmCoreImplServletsThumbnailServletInfo]("comDayCqWcmCoreImplServletsThumbnailServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("workspace").description("").optional, queryParam[List[String]]("dimensions").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.ThumbnailServlet", operation(comDayCqWcmCoreImplServletsThumbnailServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val workspace = params.getAs[String]("workspace")

    //println("workspace: " + workspace)
        val dimensionsString = params.getAs[String]("dimensions")
    val dimensions = if("multi" == "default" || "multi" == "csv") {
      dimensionsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("dimensions: " + dimensions)
  }

  

  val comDayCqWcmCoreImplUtilsDefaultPageNameValidatorOperation = (apiOperation[ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo]("comDayCqWcmCoreImplUtilsDefaultPageNameValidator")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("nonValidChars").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.core.impl.utils.DefaultPageNameValidator", operation(comDayCqWcmCoreImplUtilsDefaultPageNameValidatorOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val nonValidChars = params.getAs[String]("nonValidChars")

    //println("nonValidChars: " + nonValidChars)
  }

  

  val comDayCqWcmCoreImplVariantsPageVariantsProviderImplOperation = (apiOperation[ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo]("comDayCqWcmCoreImplVariantsPageVariantsProviderImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("defaultPeriodexternalizerPerioddomain").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.core.impl.variants.PageVariantsProviderImpl", operation(comDayCqWcmCoreImplVariantsPageVariantsProviderImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val defaultPeriodexternalizerPerioddomain = params.getAs[String]("defaultPeriodexternalizerPerioddomain")

    //println("defaultPeriodexternalizerPerioddomain: " + defaultPeriodexternalizerPerioddomain)
  }

  

  val comDayCqWcmCoreImplVersionManagerImplOperation = (apiOperation[ComDayCqWcmCoreImplVersionManagerImplInfo]("comDayCqWcmCoreImplVersionManagerImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("versionmanagerPeriodcreateVersionOnActivation").description("").optional, queryParam[Boolean]("versionmanagerPeriodpurgingEnabled").description("").optional, queryParam[List[String]]("versionmanagerPeriodpurgePaths").description("").optional, queryParam[List[String]]("versionmanagerPeriodivPaths").description("").optional, queryParam[Int]("versionmanagerPeriodmaxAgeDays").description("").optional, queryParam[Int]("versionmanagerPeriodmaxNumberVersions").description("").optional, queryParam[Int]("versionmanagerPeriodminNumberVersions").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.core.impl.VersionManagerImpl", operation(comDayCqWcmCoreImplVersionManagerImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val versionmanagerPeriodcreateVersionOnActivation = params.getAs[Boolean]("versionmanagerPeriodcreateVersionOnActivation")

    //println("versionmanagerPeriodcreateVersionOnActivation: " + versionmanagerPeriodcreateVersionOnActivation)
            val versionmanagerPeriodpurgingEnabled = params.getAs[Boolean]("versionmanagerPeriodpurgingEnabled")

    //println("versionmanagerPeriodpurgingEnabled: " + versionmanagerPeriodpurgingEnabled)
        val versionmanagerPeriodpurgePathsString = params.getAs[String]("versionmanagerPeriodpurgePaths")
    val versionmanagerPeriodpurgePaths = if("multi" == "default" || "multi" == "csv") {
      versionmanagerPeriodpurgePathsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("versionmanagerPeriodpurgePaths: " + versionmanagerPeriodpurgePaths)
        val versionmanagerPeriodivPathsString = params.getAs[String]("versionmanagerPeriodivPaths")
    val versionmanagerPeriodivPaths = if("multi" == "default" || "multi" == "csv") {
      versionmanagerPeriodivPathsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("versionmanagerPeriodivPaths: " + versionmanagerPeriodivPaths)
            val versionmanagerPeriodmaxAgeDays = params.getAs[Int]("versionmanagerPeriodmaxAgeDays")

    //println("versionmanagerPeriodmaxAgeDays: " + versionmanagerPeriodmaxAgeDays)
            val versionmanagerPeriodmaxNumberVersions = params.getAs[Int]("versionmanagerPeriodmaxNumberVersions")

    //println("versionmanagerPeriodmaxNumberVersions: " + versionmanagerPeriodmaxNumberVersions)
            val versionmanagerPeriodminNumberVersions = params.getAs[Int]("versionmanagerPeriodminNumberVersions")

    //println("versionmanagerPeriodminNumberVersions: " + versionmanagerPeriodminNumberVersions)
  }

  

  val comDayCqWcmCoreImplVersionPurgeTaskOperation = (apiOperation[ComDayCqWcmCoreImplVersionPurgeTaskInfo]("comDayCqWcmCoreImplVersionPurgeTask")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("versionpurgePeriodpaths").description("").optional, queryParam[Boolean]("versionpurgePeriodrecursive").description("").optional, queryParam[Int]("versionpurgePeriodmaxVersions").description("").optional, queryParam[Int]("versionpurgePeriodminVersions").description("").optional, queryParam[Int]("versionpurgePeriodmaxAgeDays").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.core.impl.VersionPurgeTask", operation(comDayCqWcmCoreImplVersionPurgeTaskOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val versionpurgePeriodpathsString = params.getAs[String]("versionpurgePeriodpaths")
    val versionpurgePeriodpaths = if("multi" == "default" || "multi" == "csv") {
      versionpurgePeriodpathsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("versionpurgePeriodpaths: " + versionpurgePeriodpaths)
            val versionpurgePeriodrecursive = params.getAs[Boolean]("versionpurgePeriodrecursive")

    //println("versionpurgePeriodrecursive: " + versionpurgePeriodrecursive)
            val versionpurgePeriodmaxVersions = params.getAs[Int]("versionpurgePeriodmaxVersions")

    //println("versionpurgePeriodmaxVersions: " + versionpurgePeriodmaxVersions)
            val versionpurgePeriodminVersions = params.getAs[Int]("versionpurgePeriodminVersions")

    //println("versionpurgePeriodminVersions: " + versionpurgePeriodminVersions)
            val versionpurgePeriodmaxAgeDays = params.getAs[Int]("versionpurgePeriodmaxAgeDays")

    //println("versionpurgePeriodmaxAgeDays: " + versionpurgePeriodmaxAgeDays)
  }

  

  val comDayCqWcmCoreImplWCMDebugFilterOperation = (apiOperation[ComDayCqWcmCoreImplWCMDebugFilterInfo]("comDayCqWcmCoreImplWCMDebugFilter")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("wcmdbgfilterPeriodenabled").description("").optional, queryParam[Boolean]("wcmdbgfilterPeriodjspDebug").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.core.impl.WCMDebugFilter", operation(comDayCqWcmCoreImplWCMDebugFilterOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val wcmdbgfilterPeriodenabled = params.getAs[Boolean]("wcmdbgfilterPeriodenabled")

    //println("wcmdbgfilterPeriodenabled: " + wcmdbgfilterPeriodenabled)
            val wcmdbgfilterPeriodjspDebug = params.getAs[Boolean]("wcmdbgfilterPeriodjspDebug")

    //println("wcmdbgfilterPeriodjspDebug: " + wcmdbgfilterPeriodjspDebug)
  }

  

  val comDayCqWcmCoreImplWCMDeveloperModeFilterOperation = (apiOperation[ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo]("comDayCqWcmCoreImplWCMDeveloperModeFilter")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("wcmdevmodefilterPeriodenabled").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.core.impl.WCMDeveloperModeFilter", operation(comDayCqWcmCoreImplWCMDeveloperModeFilterOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val wcmdevmodefilterPeriodenabled = params.getAs[Boolean]("wcmdevmodefilterPeriodenabled")

    //println("wcmdevmodefilterPeriodenabled: " + wcmdevmodefilterPeriodenabled)
  }

  

  val comDayCqWcmCoreImplWarpTimeWarpFilterOperation = (apiOperation[ComDayCqWcmCoreImplWarpTimeWarpFilterInfo]("comDayCqWcmCoreImplWarpTimeWarpFilter")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("filterPeriodorder").description("").optional, queryParam[String]("filterPeriodscope").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.core.impl.warp.TimeWarpFilter", operation(comDayCqWcmCoreImplWarpTimeWarpFilterOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val filterPeriodorder = params.getAs[String]("filterPeriodorder")

    //println("filterPeriodorder: " + filterPeriodorder)
            val filterPeriodscope = params.getAs[String]("filterPeriodscope")

    //println("filterPeriodscope: " + filterPeriodscope)
  }

  

  val comDayCqWcmCoreMvtMVTStatisticsImplOperation = (apiOperation[ComDayCqWcmCoreMvtMVTStatisticsImplInfo]("comDayCqWcmCoreMvtMVTStatisticsImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("mvtstatisticsPeriodtrackingurl").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.core.mvt.MVTStatisticsImpl", operation(comDayCqWcmCoreMvtMVTStatisticsImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val mvtstatisticsPeriodtrackingurl = params.getAs[String]("mvtstatisticsPeriodtrackingurl")

    //println("mvtstatisticsPeriodtrackingurl: " + mvtstatisticsPeriodtrackingurl)
  }

  

  val comDayCqWcmCoreStatsPageViewStatisticsImplOperation = (apiOperation[ComDayCqWcmCoreStatsPageViewStatisticsImplInfo]("comDayCqWcmCoreStatsPageViewStatisticsImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("pageviewstatisticsPeriodtrackingurl").description("").optional, queryParam[String]("pageviewstatisticsPeriodtrackingscriptPeriodenabled").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.core.stats.PageViewStatisticsImpl", operation(comDayCqWcmCoreStatsPageViewStatisticsImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val pageviewstatisticsPeriodtrackingurl = params.getAs[String]("pageviewstatisticsPeriodtrackingurl")

    //println("pageviewstatisticsPeriodtrackingurl: " + pageviewstatisticsPeriodtrackingurl)
            val pageviewstatisticsPeriodtrackingscriptPeriodenabled = params.getAs[String]("pageviewstatisticsPeriodtrackingscriptPeriodenabled")

    //println("pageviewstatisticsPeriodtrackingscriptPeriodenabled: " + pageviewstatisticsPeriodtrackingscriptPeriodenabled)
  }

  

  val comDayCqWcmCoreWCMRequestFilterOperation = (apiOperation[ComDayCqWcmCoreWCMRequestFilterInfo]("comDayCqWcmCoreWCMRequestFilter")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("wcmfilterPeriodmode").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.core.WCMRequestFilter", operation(comDayCqWcmCoreWCMRequestFilterOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val wcmfilterPeriodmode = params.getAs[String]("wcmfilterPeriodmode")

    //println("wcmfilterPeriodmode: " + wcmfilterPeriodmode)
  }

  

  val comDayCqWcmDesignimporterDesignPackageImporterOperation = (apiOperation[ComDayCqWcmDesignimporterDesignPackageImporterInfo]("comDayCqWcmDesignimporterDesignPackageImporter")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("extractPeriodfilter").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.designimporter.DesignPackageImporter", operation(comDayCqWcmDesignimporterDesignPackageImporterOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val extractPeriodfilterString = params.getAs[String]("extractPeriodfilter")
    val extractPeriodfilter = if("multi" == "default" || "multi" == "csv") {
      extractPeriodfilterString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("extractPeriodfilter: " + extractPeriodfilter)
  }

  

  val comDayCqWcmDesignimporterImplCanvasBuilderImplOperation = (apiOperation[ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo]("comDayCqWcmDesignimporterImplCanvasBuilderImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("filepattern").description("").optional, queryParam[Boolean]("buildPeriodpagePeriodnodes").description("").optional, queryParam[Boolean]("buildPeriodclientPeriodlibs").description("").optional, queryParam[Boolean]("buildPeriodcanvasPeriodcomponent").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasBuilderImpl", operation(comDayCqWcmDesignimporterImplCanvasBuilderImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val filepattern = params.getAs[String]("filepattern")

    //println("filepattern: " + filepattern)
            val buildPeriodpagePeriodnodes = params.getAs[Boolean]("buildPeriodpagePeriodnodes")

    //println("buildPeriodpagePeriodnodes: " + buildPeriodpagePeriodnodes)
            val buildPeriodclientPeriodlibs = params.getAs[Boolean]("buildPeriodclientPeriodlibs")

    //println("buildPeriodclientPeriodlibs: " + buildPeriodclientPeriodlibs)
            val buildPeriodcanvasPeriodcomponent = params.getAs[Boolean]("buildPeriodcanvasPeriodcomponent")

    //println("buildPeriodcanvasPeriodcomponent: " + buildPeriodcanvasPeriodcomponent)
  }

  

  val comDayCqWcmDesignimporterImplCanvasPageDeleteHandlerOperation = (apiOperation[ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo]("comDayCqWcmDesignimporterImplCanvasPageDeleteHandler")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("minThreadPoolSize").description("").optional, queryParam[Int]("maxThreadPoolSize").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasPageDeleteHandler", operation(comDayCqWcmDesignimporterImplCanvasPageDeleteHandlerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val minThreadPoolSize = params.getAs[Int]("minThreadPoolSize")

    //println("minThreadPoolSize: " + minThreadPoolSize)
            val maxThreadPoolSize = params.getAs[Int]("maxThreadPoolSize")

    //println("maxThreadPoolSize: " + maxThreadPoolSize)
  }

  

  val comDayCqWcmDesignimporterImplEntryPreprocessorImplOperation = (apiOperation[ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo]("comDayCqWcmDesignimporterImplEntryPreprocessorImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("searchPeriodpattern").description("").optional, queryParam[String]("replacePeriodpattern").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.designimporter.impl.EntryPreprocessorImpl", operation(comDayCqWcmDesignimporterImplEntryPreprocessorImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val searchPeriodpattern = params.getAs[String]("searchPeriodpattern")

    //println("searchPeriodpattern: " + searchPeriodpattern)
            val replacePeriodpattern = params.getAs[String]("replacePeriodpattern")

    //println("replacePeriodpattern: " + replacePeriodpattern)
  }

  

  val comDayCqWcmDesignimporterImplMobileCanvasBuilderImplOperation = (apiOperation[ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo]("comDayCqWcmDesignimporterImplMobileCanvasBuilderImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("filepattern").description("").optional, queryParam[List[String]]("devicePeriodgroups").description("").optional, queryParam[Boolean]("buildPeriodpagePeriodnodes").description("").optional, queryParam[Boolean]("buildPeriodclientPeriodlibs").description("").optional, queryParam[Boolean]("buildPeriodcanvasPeriodcomponent").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.designimporter.impl.MobileCanvasBuilderImpl", operation(comDayCqWcmDesignimporterImplMobileCanvasBuilderImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val filepattern = params.getAs[String]("filepattern")

    //println("filepattern: " + filepattern)
        val devicePeriodgroupsString = params.getAs[String]("devicePeriodgroups")
    val devicePeriodgroups = if("multi" == "default" || "multi" == "csv") {
      devicePeriodgroupsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("devicePeriodgroups: " + devicePeriodgroups)
            val buildPeriodpagePeriodnodes = params.getAs[Boolean]("buildPeriodpagePeriodnodes")

    //println("buildPeriodpagePeriodnodes: " + buildPeriodpagePeriodnodes)
            val buildPeriodclientPeriodlibs = params.getAs[Boolean]("buildPeriodclientPeriodlibs")

    //println("buildPeriodclientPeriodlibs: " + buildPeriodclientPeriodlibs)
            val buildPeriodcanvasPeriodcomponent = params.getAs[Boolean]("buildPeriodcanvasPeriodcomponent")

    //println("buildPeriodcanvasPeriodcomponent: " + buildPeriodcanvasPeriodcomponent)
  }

  

  val comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeOperation = (apiOperation[ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo]("comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("servicePeriodranking").description("").optional, queryParam[String]("tagpattern").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.CanvasComponentTagHandlerFactory", operation(comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val servicePeriodranking = params.getAs[Int]("servicePeriodranking")

    //println("servicePeriodranking: " + servicePeriodranking)
            val tagpattern = params.getAs[String]("tagpattern")

    //println("tagpattern: " + tagpattern)
  }

  

  val comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponOperation = (apiOperation[ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo]("comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("servicePeriodranking").description("").optional, queryParam[String]("tagpattern").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultComponentTagHandlerFactory", operation(comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val servicePeriodranking = params.getAs[Int]("servicePeriodranking")

    //println("servicePeriodranking: " + servicePeriodranking)
            val tagpattern = params.getAs[String]("tagpattern")

    //println("tagpattern: " + tagpattern)
  }

  

  val comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanOperation = (apiOperation[ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo]("comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("servicePeriodranking").description("").optional, queryParam[String]("tagpattern").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultTagHandlerFactory", operation(comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val servicePeriodranking = params.getAs[Int]("servicePeriodranking")

    //println("servicePeriodranking: " + servicePeriodranking)
            val tagpattern = params.getAs[String]("tagpattern")

    //println("tagpattern: " + tagpattern)
  }

  

  val comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleOperation = (apiOperation[ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo]("comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("servicePeriodranking").description("").optional, queryParam[String]("tagpattern").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.HeadTagHandlerFactory", operation(comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val servicePeriodranking = params.getAs[Int]("servicePeriodranking")

    //println("servicePeriodranking: " + servicePeriodranking)
            val tagpattern = params.getAs[String]("tagpattern")

    //println("tagpattern: " + tagpattern)
  }

  

  val comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandOperation = (apiOperation[ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo]("comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("servicePeriodranking").description("").optional, queryParam[String]("tagpattern").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.IFrameTagHandlerFactory", operation(comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val servicePeriodranking = params.getAs[Int]("servicePeriodranking")

    //println("servicePeriodranking: " + servicePeriodranking)
            val tagpattern = params.getAs[String]("tagpattern")

    //println("tagpattern: " + tagpattern)
  }

  

  val comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenOperation = (apiOperation[ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo]("comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("servicePeriodranking").description("").optional, queryParam[String]("tagpattern").description("").optional, queryParam[String]("componentPeriodresourceType").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImageComponentTagHandlerFactory", operation(comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val servicePeriodranking = params.getAs[Int]("servicePeriodranking")

    //println("servicePeriodranking: " + servicePeriodranking)
            val tagpattern = params.getAs[String]("tagpattern")

    //println("tagpattern: " + tagpattern)
            val componentPeriodresourceType = params.getAs[String]("componentPeriodresourceType")

    //println("componentPeriodresourceType: " + componentPeriodresourceType)
  }

  

  val comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerOperation = (apiOperation[ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo]("comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("servicePeriodranking").description("").optional, queryParam[String]("tagpattern").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImgTagHandlerFactory", operation(comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val servicePeriodranking = params.getAs[Int]("servicePeriodranking")

    //println("servicePeriodranking: " + servicePeriodranking)
            val tagpattern = params.getAs[String]("tagpattern")

    //println("tagpattern: " + tagpattern)
  }

  

  val comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTOperation = (apiOperation[ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo]("comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("servicePeriodranking").description("").optional, queryParam[String]("tagpattern").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.InlineScriptTagHandlerFactory", operation(comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val servicePeriodranking = params.getAs[Int]("servicePeriodranking")

    //println("servicePeriodranking: " + servicePeriodranking)
            val tagpattern = params.getAs[String]("tagpattern")

    //println("tagpattern: " + tagpattern)
  }

  

  val comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleOperation = (apiOperation[ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo]("comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("servicePeriodranking").description("").optional, queryParam[String]("tagpattern").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.LinkTagHandlerFactory", operation(comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val servicePeriodranking = params.getAs[Int]("servicePeriodranking")

    //println("servicePeriodranking: " + servicePeriodranking)
            val tagpattern = params.getAs[String]("tagpattern")

    //println("tagpattern: " + tagpattern)
  }

  

  val comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleOperation = (apiOperation[ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo]("comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("servicePeriodranking").description("").optional, queryParam[String]("tagpattern").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.MetaTagHandlerFactory", operation(comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val servicePeriodranking = params.getAs[Int]("servicePeriodranking")

    //println("servicePeriodranking: " + servicePeriodranking)
            val tagpattern = params.getAs[String]("tagpattern")

    //println("tagpattern: " + tagpattern)
  }

  

  val comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHOperation = (apiOperation[ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo]("comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("servicePeriodranking").description("").optional, queryParam[String]("tagpattern").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.NonScriptTagHandlerFactory", operation(comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val servicePeriodranking = params.getAs[Int]("servicePeriodranking")

    //println("servicePeriodranking: " + servicePeriodranking)
            val tagpattern = params.getAs[String]("tagpattern")

    //println("tagpattern: " + tagpattern)
  }

  

  val comDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeOperation = (apiOperation[ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo]("comDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("servicePeriodranking").description("").optional, queryParam[String]("tagpattern").description("").optional, queryParam[String]("componentPeriodresourceType").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ParsysComponentTagHandlerFactory", operation(comDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val servicePeriodranking = params.getAs[Int]("servicePeriodranking")

    //println("servicePeriodranking: " + servicePeriodranking)
            val tagpattern = params.getAs[String]("tagpattern")

    //println("tagpattern: " + tagpattern)
            val componentPeriodresourceType = params.getAs[String]("componentPeriodresourceType")

    //println("componentPeriodresourceType: " + componentPeriodresourceType)
  }

  

  val comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandOperation = (apiOperation[ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo]("comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("servicePeriodranking").description("").optional, queryParam[String]("tagpattern").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ScriptTagHandlerFactory", operation(comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val servicePeriodranking = params.getAs[Int]("servicePeriodranking")

    //println("servicePeriodranking: " + servicePeriodranking)
            val tagpattern = params.getAs[String]("tagpattern")

    //println("tagpattern: " + tagpattern)
  }

  

  val comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlOperation = (apiOperation[ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo]("comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("servicePeriodranking").description("").optional, queryParam[String]("tagpattern").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.StyleTagHandlerFactory", operation(comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val servicePeriodranking = params.getAs[Int]("servicePeriodranking")

    //println("servicePeriodranking: " + servicePeriodranking)
            val tagpattern = params.getAs[String]("tagpattern")

    //println("tagpattern: " + tagpattern)
  }

  

  val comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentOperation = (apiOperation[ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo]("comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("servicePeriodranking").description("").optional, queryParam[String]("tagpattern").description("").optional, queryParam[String]("componentPeriodresourceType").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TextComponentTagHandlerFactory", operation(comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val servicePeriodranking = params.getAs[Int]("servicePeriodranking")

    //println("servicePeriodranking: " + servicePeriodranking)
            val tagpattern = params.getAs[String]("tagpattern")

    //println("tagpattern: " + tagpattern)
            val componentPeriodresourceType = params.getAs[String]("componentPeriodresourceType")

    //println("componentPeriodresourceType: " + componentPeriodresourceType)
  }

  

  val comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenOperation = (apiOperation[ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo]("comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("servicePeriodranking").description("").optional, queryParam[String]("tagpattern").description("").optional, queryParam[String]("componentPeriodresourceType").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleComponentTagHandlerFactory", operation(comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val servicePeriodranking = params.getAs[Int]("servicePeriodranking")

    //println("servicePeriodranking: " + servicePeriodranking)
            val tagpattern = params.getAs[String]("tagpattern")

    //println("tagpattern: " + tagpattern)
            val componentPeriodresourceType = params.getAs[String]("componentPeriodresourceType")

    //println("componentPeriodresourceType: " + componentPeriodresourceType)
  }

  

  val comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlOperation = (apiOperation[ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo]("comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("servicePeriodranking").description("").optional, queryParam[String]("tagpattern").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleTagHandlerFactory", operation(comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val servicePeriodranking = params.getAs[Int]("servicePeriodranking")

    //println("servicePeriodranking: " + servicePeriodranking)
            val tagpattern = params.getAs[String]("tagpattern")

    //println("tagpattern: " + tagpattern)
  }

  

  val comDayCqWcmFoundationFormsImplFormChooserServletOperation = (apiOperation[ComDayCqWcmFoundationFormsImplFormChooserServletInfo]("comDayCqWcmFoundationFormsImplFormChooserServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("servicePeriodname").description("").optional, queryParam[String]("slingPeriodservletPeriodresourceTypes").description("").optional, queryParam[String]("slingPeriodservletPeriodselectors").description("").optional, queryParam[List[String]]("slingPeriodservletPeriodmethods").description("").optional, queryParam[Boolean]("formsPeriodformchooserservletPeriodadvansesearchPeriodrequire").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormChooserServlet", operation(comDayCqWcmFoundationFormsImplFormChooserServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val servicePeriodname = params.getAs[String]("servicePeriodname")

    //println("servicePeriodname: " + servicePeriodname)
            val slingPeriodservletPeriodresourceTypes = params.getAs[String]("slingPeriodservletPeriodresourceTypes")

    //println("slingPeriodservletPeriodresourceTypes: " + slingPeriodservletPeriodresourceTypes)
            val slingPeriodservletPeriodselectors = params.getAs[String]("slingPeriodservletPeriodselectors")

    //println("slingPeriodservletPeriodselectors: " + slingPeriodservletPeriodselectors)
        val slingPeriodservletPeriodmethodsString = params.getAs[String]("slingPeriodservletPeriodmethods")
    val slingPeriodservletPeriodmethods = if("multi" == "default" || "multi" == "csv") {
      slingPeriodservletPeriodmethodsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("slingPeriodservletPeriodmethods: " + slingPeriodservletPeriodmethods)
            val formsPeriodformchooserservletPeriodadvansesearchPeriodrequire = params.getAs[Boolean]("formsPeriodformchooserservletPeriodadvansesearchPeriodrequire")

    //println("formsPeriodformchooserservletPeriodadvansesearchPeriodrequire: " + formsPeriodformchooserservletPeriodadvansesearchPeriodrequire)
  }

  

  val comDayCqWcmFoundationFormsImplFormParagraphPostProcessorOperation = (apiOperation[ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo]("comDayCqWcmFoundationFormsImplFormParagraphPostProcessor")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("formsPeriodformparagraphpostprocessorPeriodenabled").description("").optional, queryParam[List[String]]("formsPeriodformparagraphpostprocessorPeriodformresourcetypes").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormParagraphPostProcessor", operation(comDayCqWcmFoundationFormsImplFormParagraphPostProcessorOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val formsPeriodformparagraphpostprocessorPeriodenabled = params.getAs[Boolean]("formsPeriodformparagraphpostprocessorPeriodenabled")

    //println("formsPeriodformparagraphpostprocessorPeriodenabled: " + formsPeriodformparagraphpostprocessorPeriodenabled)
        val formsPeriodformparagraphpostprocessorPeriodformresourcetypesString = params.getAs[String]("formsPeriodformparagraphpostprocessorPeriodformresourcetypes")
    val formsPeriodformparagraphpostprocessorPeriodformresourcetypes = if("multi" == "default" || "multi" == "csv") {
      formsPeriodformparagraphpostprocessorPeriodformresourcetypesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("formsPeriodformparagraphpostprocessorPeriodformresourcetypes: " + formsPeriodformparagraphpostprocessorPeriodformresourcetypes)
  }

  

  val comDayCqWcmFoundationFormsImplFormsHandlingServletOperation = (apiOperation[ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo]("comDayCqWcmFoundationFormsImplFormsHandlingServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("namePeriodwhitelist").description("").optional, queryParam[Boolean]("allowPeriodexpressions").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormsHandlingServlet", operation(comDayCqWcmFoundationFormsImplFormsHandlingServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val namePeriodwhitelist = params.getAs[String]("namePeriodwhitelist")

    //println("namePeriodwhitelist: " + namePeriodwhitelist)
            val allowPeriodexpressions = params.getAs[Boolean]("allowPeriodexpressions")

    //println("allowPeriodexpressions: " + allowPeriodexpressions)
  }

  

  val comDayCqWcmFoundationFormsImplMailServletOperation = (apiOperation[ComDayCqWcmFoundationFormsImplMailServletInfo]("comDayCqWcmFoundationFormsImplMailServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("slingPeriodservletPeriodresourceTypes").description("").optional, queryParam[String]("slingPeriodservletPeriodselectors").description("").optional, queryParam[List[String]]("resourcePeriodwhitelist").description("").optional, queryParam[String]("resourcePeriodblacklist").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.MailServlet", operation(comDayCqWcmFoundationFormsImplMailServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val slingPeriodservletPeriodresourceTypes = params.getAs[String]("slingPeriodservletPeriodresourceTypes")

    //println("slingPeriodservletPeriodresourceTypes: " + slingPeriodservletPeriodresourceTypes)
            val slingPeriodservletPeriodselectors = params.getAs[String]("slingPeriodservletPeriodselectors")

    //println("slingPeriodservletPeriodselectors: " + slingPeriodservletPeriodselectors)
        val resourcePeriodwhitelistString = params.getAs[String]("resourcePeriodwhitelist")
    val resourcePeriodwhitelist = if("multi" == "default" || "multi" == "csv") {
      resourcePeriodwhitelistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("resourcePeriodwhitelist: " + resourcePeriodwhitelist)
            val resourcePeriodblacklist = params.getAs[String]("resourcePeriodblacklist")

    //println("resourcePeriodblacklist: " + resourcePeriodblacklist)
  }

  

  val comDayCqWcmFoundationImplAdaptiveImageComponentServletOperation = (apiOperation[ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo]("comDayCqWcmFoundationImplAdaptiveImageComponentServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("adaptPeriodsupportedPeriodwidths").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.foundation.impl.AdaptiveImageComponentServlet", operation(comDayCqWcmFoundationImplAdaptiveImageComponentServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val adaptPeriodsupportedPeriodwidthsString = params.getAs[String]("adaptPeriodsupportedPeriodwidths")
    val adaptPeriodsupportedPeriodwidths = if("multi" == "default" || "multi" == "csv") {
      adaptPeriodsupportedPeriodwidthsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("adaptPeriodsupportedPeriodwidths: " + adaptPeriodsupportedPeriodwidths)
  }

  

  val comDayCqWcmFoundationImplHTTPAuthHandlerOperation = (apiOperation[ComDayCqWcmFoundationImplHTTPAuthHandlerInfo]("comDayCqWcmFoundationImplHTTPAuthHandler")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("path").description("").optional, queryParam[Boolean]("authPeriodhttpPeriodnologin").description("").optional, queryParam[String]("authPeriodhttpPeriodrealm").description("").optional, queryParam[String]("authPerioddefaultPeriodloginpage").description("").optional, queryParam[List[String]]("authPeriodcredPeriodform").description("").optional, queryParam[List[String]]("authPeriodcredPeriodutf8").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.foundation.impl.HTTPAuthHandler", operation(comDayCqWcmFoundationImplHTTPAuthHandlerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val path = params.getAs[String]("path")

    //println("path: " + path)
            val authPeriodhttpPeriodnologin = params.getAs[Boolean]("authPeriodhttpPeriodnologin")

    //println("authPeriodhttpPeriodnologin: " + authPeriodhttpPeriodnologin)
            val authPeriodhttpPeriodrealm = params.getAs[String]("authPeriodhttpPeriodrealm")

    //println("authPeriodhttpPeriodrealm: " + authPeriodhttpPeriodrealm)
            val authPerioddefaultPeriodloginpage = params.getAs[String]("authPerioddefaultPeriodloginpage")

    //println("authPerioddefaultPeriodloginpage: " + authPerioddefaultPeriodloginpage)
        val authPeriodcredPeriodformString = params.getAs[String]("authPeriodcredPeriodform")
    val authPeriodcredPeriodform = if("multi" == "default" || "multi" == "csv") {
      authPeriodcredPeriodformString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("authPeriodcredPeriodform: " + authPeriodcredPeriodform)
        val authPeriodcredPeriodutf8String = params.getAs[String]("authPeriodcredPeriodutf8")
    val authPeriodcredPeriodutf8 = if("multi" == "default" || "multi" == "csv") {
      authPeriodcredPeriodutf8String match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("authPeriodcredPeriodutf8: " + authPeriodcredPeriodutf8)
  }

  

  val comDayCqWcmFoundationImplPageImpressionsTrackerOperation = (apiOperation[ComDayCqWcmFoundationImplPageImpressionsTrackerInfo]("comDayCqWcmFoundationImplPageImpressionsTracker")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("slingPeriodauthPeriodrequirements").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.foundation.impl.PageImpressionsTracker", operation(comDayCqWcmFoundationImplPageImpressionsTrackerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val slingPeriodauthPeriodrequirements = params.getAs[String]("slingPeriodauthPeriodrequirements")

    //println("slingPeriodauthPeriodrequirements: " + slingPeriodauthPeriodrequirements)
  }

  

  val comDayCqWcmFoundationImplPageRedirectServletOperation = (apiOperation[ComDayCqWcmFoundationImplPageRedirectServletInfo]("comDayCqWcmFoundationImplPageRedirectServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("excludedPeriodresourcePeriodtypes").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.foundation.impl.PageRedirectServlet", operation(comDayCqWcmFoundationImplPageRedirectServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val excludedPeriodresourcePeriodtypesString = params.getAs[String]("excludedPeriodresourcePeriodtypes")
    val excludedPeriodresourcePeriodtypes = if("multi" == "default" || "multi" == "csv") {
      excludedPeriodresourcePeriodtypesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("excludedPeriodresourcePeriodtypes: " + excludedPeriodresourcePeriodtypes)
  }

  

  val comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistOperation = (apiOperation[ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo]("comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("defaultPeriodattachmentPeriodtypePeriodblacklist").description("").optional, queryParam[List[String]]("baselinePeriodattachmentPeriodtypePeriodblacklist").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.foundation.security.impl.DefaultAttachmentTypeBlacklistService", operation(comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val defaultPeriodattachmentPeriodtypePeriodblacklistString = params.getAs[String]("defaultPeriodattachmentPeriodtypePeriodblacklist")
    val defaultPeriodattachmentPeriodtypePeriodblacklist = if("multi" == "default" || "multi" == "csv") {
      defaultPeriodattachmentPeriodtypePeriodblacklistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("defaultPeriodattachmentPeriodtypePeriodblacklist: " + defaultPeriodattachmentPeriodtypePeriodblacklist)
        val baselinePeriodattachmentPeriodtypePeriodblacklistString = params.getAs[String]("baselinePeriodattachmentPeriodtypePeriodblacklist")
    val baselinePeriodattachmentPeriodtypePeriodblacklist = if("multi" == "default" || "multi" == "csv") {
      baselinePeriodattachmentPeriodtypePeriodblacklistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("baselinePeriodattachmentPeriodtypePeriodblacklist: " + baselinePeriodattachmentPeriodtypePeriodblacklist)
  }

  

  val comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplOperation = (apiOperation[ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo]("comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("parameterPeriodwhitelist").description("").optional, queryParam[List[String]]("parameterPeriodwhitelistPeriodprefixes").description("").optional, queryParam[List[String]]("binaryPeriodparameterPeriodwhitelist").description("").optional, queryParam[List[String]]("modifierPeriodwhitelist").description("").optional, queryParam[List[String]]("operationPeriodwhitelist").description("").optional, queryParam[List[String]]("operationPeriodwhitelistPeriodprefixes").description("").optional, queryParam[List[String]]("typehintPeriodwhitelist").description("").optional, queryParam[List[String]]("resourcetypePeriodwhitelist").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.foundation.security.impl.SaferSlingPostValidatorImpl", operation(comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val parameterPeriodwhitelistString = params.getAs[String]("parameterPeriodwhitelist")
    val parameterPeriodwhitelist = if("multi" == "default" || "multi" == "csv") {
      parameterPeriodwhitelistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("parameterPeriodwhitelist: " + parameterPeriodwhitelist)
        val parameterPeriodwhitelistPeriodprefixesString = params.getAs[String]("parameterPeriodwhitelistPeriodprefixes")
    val parameterPeriodwhitelistPeriodprefixes = if("multi" == "default" || "multi" == "csv") {
      parameterPeriodwhitelistPeriodprefixesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("parameterPeriodwhitelistPeriodprefixes: " + parameterPeriodwhitelistPeriodprefixes)
        val binaryPeriodparameterPeriodwhitelistString = params.getAs[String]("binaryPeriodparameterPeriodwhitelist")
    val binaryPeriodparameterPeriodwhitelist = if("multi" == "default" || "multi" == "csv") {
      binaryPeriodparameterPeriodwhitelistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("binaryPeriodparameterPeriodwhitelist: " + binaryPeriodparameterPeriodwhitelist)
        val modifierPeriodwhitelistString = params.getAs[String]("modifierPeriodwhitelist")
    val modifierPeriodwhitelist = if("multi" == "default" || "multi" == "csv") {
      modifierPeriodwhitelistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("modifierPeriodwhitelist: " + modifierPeriodwhitelist)
        val operationPeriodwhitelistString = params.getAs[String]("operationPeriodwhitelist")
    val operationPeriodwhitelist = if("multi" == "default" || "multi" == "csv") {
      operationPeriodwhitelistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("operationPeriodwhitelist: " + operationPeriodwhitelist)
        val operationPeriodwhitelistPeriodprefixesString = params.getAs[String]("operationPeriodwhitelistPeriodprefixes")
    val operationPeriodwhitelistPeriodprefixes = if("multi" == "default" || "multi" == "csv") {
      operationPeriodwhitelistPeriodprefixesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("operationPeriodwhitelistPeriodprefixes: " + operationPeriodwhitelistPeriodprefixes)
        val typehintPeriodwhitelistString = params.getAs[String]("typehintPeriodwhitelist")
    val typehintPeriodwhitelist = if("multi" == "default" || "multi" == "csv") {
      typehintPeriodwhitelistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("typehintPeriodwhitelist: " + typehintPeriodwhitelist)
        val resourcetypePeriodwhitelistString = params.getAs[String]("resourcetypePeriodwhitelist")
    val resourcetypePeriodwhitelist = if("multi" == "default" || "multi" == "csv") {
      resourcetypePeriodwhitelistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("resourcetypePeriodwhitelist: " + resourcetypePeriodwhitelist)
  }

  

  val comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryOperation = (apiOperation[ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo]("comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("devicePeriodinfoPeriodtransformerPeriodenabled").description("").optional, queryParam[String]("devicePeriodinfoPeriodtransformerPeriodcssPeriodstyle").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.mobile.core.impl.device.DeviceInfoTransformerFactory", operation(comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val devicePeriodinfoPeriodtransformerPeriodenabled = params.getAs[Boolean]("devicePeriodinfoPeriodtransformerPeriodenabled")

    //println("devicePeriodinfoPeriodtransformerPeriodenabled: " + devicePeriodinfoPeriodtransformerPeriodenabled)
            val devicePeriodinfoPeriodtransformerPeriodcssPeriodstyle = params.getAs[String]("devicePeriodinfoPeriodtransformerPeriodcssPeriodstyle")

    //println("devicePeriodinfoPeriodtransformerPeriodcssPeriodstyle: " + devicePeriodinfoPeriodtransformerPeriodcssPeriodstyle)
  }

  

  val comDayCqWcmMobileCoreImplRedirectRedirectFilterOperation = (apiOperation[ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo]("comDayCqWcmMobileCoreImplRedirectRedirectFilter")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("redirectPeriodenabled").description("").optional, queryParam[Boolean]("redirectPeriodstatsPeriodenabled").description("").optional, queryParam[List[String]]("redirectPeriodextensions").description("").optional, queryParam[List[String]]("redirectPeriodpaths").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.mobile.core.impl.redirect.RedirectFilter", operation(comDayCqWcmMobileCoreImplRedirectRedirectFilterOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val redirectPeriodenabled = params.getAs[Boolean]("redirectPeriodenabled")

    //println("redirectPeriodenabled: " + redirectPeriodenabled)
            val redirectPeriodstatsPeriodenabled = params.getAs[Boolean]("redirectPeriodstatsPeriodenabled")

    //println("redirectPeriodstatsPeriodenabled: " + redirectPeriodstatsPeriodenabled)
        val redirectPeriodextensionsString = params.getAs[String]("redirectPeriodextensions")
    val redirectPeriodextensions = if("multi" == "default" || "multi" == "csv") {
      redirectPeriodextensionsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("redirectPeriodextensions: " + redirectPeriodextensions)
        val redirectPeriodpathsString = params.getAs[String]("redirectPeriodpaths")
    val redirectPeriodpaths = if("multi" == "default" || "multi" == "csv") {
      redirectPeriodpathsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("redirectPeriodpaths: " + redirectPeriodpaths)
  }

  

  val comDayCqWcmMsmImplActionsContentCopyActionFactoryOperation = (apiOperation[ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo]("comDayCqWcmMsmImplActionsContentCopyActionFactory")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes").description("").optional, queryParam[List[String]]("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems").description("").optional, queryParam[List[String]]("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops").description("").optional, queryParam[String]("contentcopyactionPeriodorderPeriodstyle").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentCopyActionFactory", operation(comDayCqWcmMsmImplActionsContentCopyActionFactoryOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypesString = params.getAs[String]("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes")
    val cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes = if("multi" == "default" || "multi" == "csv") {
      cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes: " + cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes)
        val cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitemsString = params.getAs[String]("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems")
    val cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems = if("multi" == "default" || "multi" == "csv") {
      cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitemsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems: " + cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems)
        val cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedpropsString = params.getAs[String]("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops")
    val cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops = if("multi" == "default" || "multi" == "csv") {
      cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedpropsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops: " + cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops)
            val contentcopyactionPeriodorderPeriodstyle = params.getAs[String]("contentcopyactionPeriodorderPeriodstyle")

    //println("contentcopyactionPeriodorderPeriodstyle: " + contentcopyactionPeriodorderPeriodstyle)
  }

  

  val comDayCqWcmMsmImplActionsContentDeleteActionFactoryOperation = (apiOperation[ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo]("comDayCqWcmMsmImplActionsContentDeleteActionFactory")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes").description("").optional, queryParam[List[String]]("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems").description("").optional, queryParam[List[String]]("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentDeleteActionFactory", operation(comDayCqWcmMsmImplActionsContentDeleteActionFactoryOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypesString = params.getAs[String]("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes")
    val cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes = if("multi" == "default" || "multi" == "csv") {
      cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes: " + cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes)
        val cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitemsString = params.getAs[String]("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems")
    val cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems = if("multi" == "default" || "multi" == "csv") {
      cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitemsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems: " + cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems)
        val cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedpropsString = params.getAs[String]("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops")
    val cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops = if("multi" == "default" || "multi" == "csv") {
      cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedpropsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops: " + cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops)
  }

  

  val comDayCqWcmMsmImplActionsContentUpdateActionFactoryOperation = (apiOperation[ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo]("comDayCqWcmMsmImplActionsContentUpdateActionFactory")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes").description("").optional, queryParam[List[String]]("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems").description("").optional, queryParam[List[String]]("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops").description("").optional, queryParam[List[String]]("cqPeriodwcmPeriodmsmPeriodactionPeriodignoredMixin").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentUpdateActionFactory", operation(comDayCqWcmMsmImplActionsContentUpdateActionFactoryOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypesString = params.getAs[String]("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes")
    val cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes = if("multi" == "default" || "multi" == "csv") {
      cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes: " + cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes)
        val cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitemsString = params.getAs[String]("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems")
    val cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems = if("multi" == "default" || "multi" == "csv") {
      cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitemsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems: " + cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems)
        val cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedpropsString = params.getAs[String]("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops")
    val cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops = if("multi" == "default" || "multi" == "csv") {
      cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedpropsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops: " + cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops)
        val cqPeriodwcmPeriodmsmPeriodactionPeriodignoredMixinString = params.getAs[String]("cqPeriodwcmPeriodmsmPeriodactionPeriodignoredMixin")
    val cqPeriodwcmPeriodmsmPeriodactionPeriodignoredMixin = if("multi" == "default" || "multi" == "csv") {
      cqPeriodwcmPeriodmsmPeriodactionPeriodignoredMixinString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cqPeriodwcmPeriodmsmPeriodactionPeriodignoredMixin: " + cqPeriodwcmPeriodmsmPeriodactionPeriodignoredMixin)
  }

  

  val comDayCqWcmMsmImplActionsOrderChildrenActionFactoryOperation = (apiOperation[ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo]("comDayCqWcmMsmImplActionsOrderChildrenActionFactory")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes").description("").optional, queryParam[List[String]]("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems").description("").optional, queryParam[List[String]]("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.OrderChildrenActionFactory", operation(comDayCqWcmMsmImplActionsOrderChildrenActionFactoryOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypesString = params.getAs[String]("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes")
    val cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes = if("multi" == "default" || "multi" == "csv") {
      cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes: " + cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes)
        val cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitemsString = params.getAs[String]("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems")
    val cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems = if("multi" == "default" || "multi" == "csv") {
      cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitemsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems: " + cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems)
        val cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedpropsString = params.getAs[String]("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops")
    val cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops = if("multi" == "default" || "multi" == "csv") {
      cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedpropsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops: " + cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops)
  }

  

  val comDayCqWcmMsmImplActionsPageMoveActionFactoryOperation = (apiOperation[ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo]("comDayCqWcmMsmImplActionsPageMoveActionFactory")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes").description("").optional, queryParam[List[String]]("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems").description("").optional, queryParam[List[String]]("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops").description("").optional, queryParam[Boolean]("cqPeriodwcmPeriodmsmPeriodimplPeriodactionsPeriodpagemovePeriodpropReferenceUpdate").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.PageMoveActionFactory", operation(comDayCqWcmMsmImplActionsPageMoveActionFactoryOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypesString = params.getAs[String]("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes")
    val cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes = if("multi" == "default" || "multi" == "csv") {
      cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes: " + cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes)
        val cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitemsString = params.getAs[String]("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems")
    val cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems = if("multi" == "default" || "multi" == "csv") {
      cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitemsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems: " + cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems)
        val cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedpropsString = params.getAs[String]("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops")
    val cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops = if("multi" == "default" || "multi" == "csv") {
      cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedpropsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops: " + cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops)
            val cqPeriodwcmPeriodmsmPeriodimplPeriodactionsPeriodpagemovePeriodpropReferenceUpdate = params.getAs[Boolean]("cqPeriodwcmPeriodmsmPeriodimplPeriodactionsPeriodpagemovePeriodpropReferenceUpdate")

    //println("cqPeriodwcmPeriodmsmPeriodimplPeriodactionsPeriodpagemovePeriodpropReferenceUpdate: " + cqPeriodwcmPeriodmsmPeriodimplPeriodactionsPeriodpagemovePeriodpropReferenceUpdate)
  }

  

  val comDayCqWcmMsmImplActionsReferencesUpdateActionFactoryOperation = (apiOperation[ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo]("comDayCqWcmMsmImplActionsReferencesUpdateActionFactory")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes").description("").optional, queryParam[List[String]]("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems").description("").optional, queryParam[List[String]]("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops").description("").optional, queryParam[Boolean]("cqPeriodwcmPeriodmsmPeriodimplPeriodactionPeriodreferencesupdatePeriodpropUpdateNested").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ReferencesUpdateActionFactory", operation(comDayCqWcmMsmImplActionsReferencesUpdateActionFactoryOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypesString = params.getAs[String]("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes")
    val cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes = if("multi" == "default" || "multi" == "csv") {
      cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes: " + cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes)
        val cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitemsString = params.getAs[String]("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems")
    val cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems = if("multi" == "default" || "multi" == "csv") {
      cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitemsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems: " + cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems)
        val cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedpropsString = params.getAs[String]("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops")
    val cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops = if("multi" == "default" || "multi" == "csv") {
      cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedpropsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops: " + cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops)
            val cqPeriodwcmPeriodmsmPeriodimplPeriodactionPeriodreferencesupdatePeriodpropUpdateNested = params.getAs[Boolean]("cqPeriodwcmPeriodmsmPeriodimplPeriodactionPeriodreferencesupdatePeriodpropUpdateNested")

    //println("cqPeriodwcmPeriodmsmPeriodimplPeriodactionPeriodreferencesupdatePeriodpropUpdateNested: " + cqPeriodwcmPeriodmsmPeriodimplPeriodactionPeriodreferencesupdatePeriodpropUpdateNested)
  }

  

  val comDayCqWcmMsmImplActionsVersionCopyActionFactoryOperation = (apiOperation[ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo]("comDayCqWcmMsmImplActionsVersionCopyActionFactory")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes").description("").optional, queryParam[List[String]]("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems").description("").optional, queryParam[List[String]]("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.VersionCopyActionFactory", operation(comDayCqWcmMsmImplActionsVersionCopyActionFactoryOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypesString = params.getAs[String]("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes")
    val cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes = if("multi" == "default" || "multi" == "csv") {
      cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes: " + cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes)
        val cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitemsString = params.getAs[String]("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems")
    val cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems = if("multi" == "default" || "multi" == "csv") {
      cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitemsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems: " + cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems)
        val cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedpropsString = params.getAs[String]("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops")
    val cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops = if("multi" == "default" || "multi" == "csv") {
      cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedpropsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops: " + cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops)
  }

  

  val comDayCqWcmMsmImplLiveRelationshipManagerImplOperation = (apiOperation[ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo]("comDayCqWcmMsmImplLiveRelationshipManagerImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("liverelationshipmgrPeriodrelationsconfigPerioddefault").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.msm.impl.LiveRelationshipManagerImpl", operation(comDayCqWcmMsmImplLiveRelationshipManagerImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val liverelationshipmgrPeriodrelationsconfigPerioddefault = params.getAs[String]("liverelationshipmgrPeriodrelationsconfigPerioddefault")

    //println("liverelationshipmgrPeriodrelationsconfigPerioddefault: " + liverelationshipmgrPeriodrelationsconfigPerioddefault)
  }

  

  val comDayCqWcmMsmImplRolloutManagerImplOperation = (apiOperation[ComDayCqWcmMsmImplRolloutManagerImplInfo]("comDayCqWcmMsmImplRolloutManagerImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("eventPeriodfilter").description("").optional, queryParam[List[String]]("rolloutmgrPeriodexcludedpropsPerioddefault").description("").optional, queryParam[List[String]]("rolloutmgrPeriodexcludedparagraphpropsPerioddefault").description("").optional, queryParam[List[String]]("rolloutmgrPeriodexcludednodetypesPerioddefault").description("").optional, queryParam[Int]("rolloutmgrPeriodthreadpoolPeriodmaxsize").description("").optional, queryParam[Int]("rolloutmgrPeriodthreadpoolPeriodmaxshutdowntime").description("").optional, queryParam[String]("rolloutmgrPeriodthreadpoolPeriodpriority").description("").optional, queryParam[Int]("rolloutmgrPeriodcommitPeriodsize").description("").optional, queryParam[Boolean]("rolloutmgrPeriodconflicthandlingPeriodenabled").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.msm.impl.RolloutManagerImpl", operation(comDayCqWcmMsmImplRolloutManagerImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val eventPeriodfilter = params.getAs[String]("eventPeriodfilter")

    //println("eventPeriodfilter: " + eventPeriodfilter)
        val rolloutmgrPeriodexcludedpropsPerioddefaultString = params.getAs[String]("rolloutmgrPeriodexcludedpropsPerioddefault")
    val rolloutmgrPeriodexcludedpropsPerioddefault = if("multi" == "default" || "multi" == "csv") {
      rolloutmgrPeriodexcludedpropsPerioddefaultString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("rolloutmgrPeriodexcludedpropsPerioddefault: " + rolloutmgrPeriodexcludedpropsPerioddefault)
        val rolloutmgrPeriodexcludedparagraphpropsPerioddefaultString = params.getAs[String]("rolloutmgrPeriodexcludedparagraphpropsPerioddefault")
    val rolloutmgrPeriodexcludedparagraphpropsPerioddefault = if("multi" == "default" || "multi" == "csv") {
      rolloutmgrPeriodexcludedparagraphpropsPerioddefaultString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("rolloutmgrPeriodexcludedparagraphpropsPerioddefault: " + rolloutmgrPeriodexcludedparagraphpropsPerioddefault)
        val rolloutmgrPeriodexcludednodetypesPerioddefaultString = params.getAs[String]("rolloutmgrPeriodexcludednodetypesPerioddefault")
    val rolloutmgrPeriodexcludednodetypesPerioddefault = if("multi" == "default" || "multi" == "csv") {
      rolloutmgrPeriodexcludednodetypesPerioddefaultString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("rolloutmgrPeriodexcludednodetypesPerioddefault: " + rolloutmgrPeriodexcludednodetypesPerioddefault)
            val rolloutmgrPeriodthreadpoolPeriodmaxsize = params.getAs[Int]("rolloutmgrPeriodthreadpoolPeriodmaxsize")

    //println("rolloutmgrPeriodthreadpoolPeriodmaxsize: " + rolloutmgrPeriodthreadpoolPeriodmaxsize)
            val rolloutmgrPeriodthreadpoolPeriodmaxshutdowntime = params.getAs[Int]("rolloutmgrPeriodthreadpoolPeriodmaxshutdowntime")

    //println("rolloutmgrPeriodthreadpoolPeriodmaxshutdowntime: " + rolloutmgrPeriodthreadpoolPeriodmaxshutdowntime)
            val rolloutmgrPeriodthreadpoolPeriodpriority = params.getAs[String]("rolloutmgrPeriodthreadpoolPeriodpriority")

    //println("rolloutmgrPeriodthreadpoolPeriodpriority: " + rolloutmgrPeriodthreadpoolPeriodpriority)
            val rolloutmgrPeriodcommitPeriodsize = params.getAs[Int]("rolloutmgrPeriodcommitPeriodsize")

    //println("rolloutmgrPeriodcommitPeriodsize: " + rolloutmgrPeriodcommitPeriodsize)
            val rolloutmgrPeriodconflicthandlingPeriodenabled = params.getAs[Boolean]("rolloutmgrPeriodconflicthandlingPeriodenabled")

    //println("rolloutmgrPeriodconflicthandlingPeriodenabled: " + rolloutmgrPeriodconflicthandlingPeriodenabled)
  }

  

  val comDayCqWcmMsmImplServletsAuditLogServletOperation = (apiOperation[ComDayCqWcmMsmImplServletsAuditLogServletInfo]("comDayCqWcmMsmImplServletsAuditLogServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("auditlogservletPerioddefaultPeriodeventsPeriodcount").description("").optional, queryParam[String]("auditlogservletPerioddefaultPeriodpath").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.msm.impl.servlets.AuditLogServlet", operation(comDayCqWcmMsmImplServletsAuditLogServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val auditlogservletPerioddefaultPeriodeventsPeriodcount = params.getAs[Int]("auditlogservletPerioddefaultPeriodeventsPeriodcount")

    //println("auditlogservletPerioddefaultPeriodeventsPeriodcount: " + auditlogservletPerioddefaultPeriodeventsPeriodcount)
            val auditlogservletPerioddefaultPeriodpath = params.getAs[String]("auditlogservletPerioddefaultPeriodpath")

    //println("auditlogservletPerioddefaultPeriodpath: " + auditlogservletPerioddefaultPeriodpath)
  }

  

  val comDayCqWcmNotificationEmailImplEmailChannelOperation = (apiOperation[ComDayCqWcmNotificationEmailImplEmailChannelInfo]("comDayCqWcmNotificationEmailImplEmailChannel")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("emailPeriodfrom").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.notification.email.impl.EmailChannel", operation(comDayCqWcmNotificationEmailImplEmailChannelOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val emailPeriodfrom = params.getAs[String]("emailPeriodfrom")

    //println("emailPeriodfrom: " + emailPeriodfrom)
  }

  

  val comDayCqWcmNotificationImplNotificationManagerImplOperation = (apiOperation[ComDayCqWcmNotificationImplNotificationManagerImplInfo]("comDayCqWcmNotificationImplNotificationManagerImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("eventPeriodtopics").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.notification.impl.NotificationManagerImpl", operation(comDayCqWcmNotificationImplNotificationManagerImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val eventPeriodtopicsString = params.getAs[String]("eventPeriodtopics")
    val eventPeriodtopics = if("multi" == "default" || "multi" == "csv") {
      eventPeriodtopicsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("eventPeriodtopics: " + eventPeriodtopics)
  }

  

  val comDayCqWcmScriptingImplBVPManagerOperation = (apiOperation[ComDayCqWcmScriptingImplBVPManagerInfo]("comDayCqWcmScriptingImplBVPManager")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("comPerioddayPeriodcqPeriodwcmPeriodscriptingPeriodbvpPeriodscriptPeriodengines").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.scripting.impl.BVPManager", operation(comDayCqWcmScriptingImplBVPManagerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val comPerioddayPeriodcqPeriodwcmPeriodscriptingPeriodbvpPeriodscriptPeriodenginesString = params.getAs[String]("comPerioddayPeriodcqPeriodwcmPeriodscriptingPeriodbvpPeriodscriptPeriodengines")
    val comPerioddayPeriodcqPeriodwcmPeriodscriptingPeriodbvpPeriodscriptPeriodengines = if("multi" == "default" || "multi" == "csv") {
      comPerioddayPeriodcqPeriodwcmPeriodscriptingPeriodbvpPeriodscriptPeriodenginesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("comPerioddayPeriodcqPeriodwcmPeriodscriptingPeriodbvpPeriodscriptPeriodengines: " + comPerioddayPeriodcqPeriodwcmPeriodscriptingPeriodbvpPeriodscriptPeriodengines)
  }

  

  val comDayCqWcmUndoUndoConfigOperation = (apiOperation[ComDayCqWcmUndoUndoConfigInfo]("comDayCqWcmUndoUndoConfig")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("cqPeriodwcmPeriodundoPeriodenabled").description("").optional, queryParam[String]("cqPeriodwcmPeriodundoPeriodpath").description("").optional, queryParam[Int]("cqPeriodwcmPeriodundoPeriodvalidity").description("").optional, queryParam[Int]("cqPeriodwcmPeriodundoPeriodsteps").description("").optional, queryParam[String]("cqPeriodwcmPeriodundoPeriodpersistence").description("").optional, queryParam[Boolean]("cqPeriodwcmPeriodundoPeriodpersistencePeriodmode").description("").optional, queryParam[String]("cqPeriodwcmPeriodundoPeriodmarkermode").description("").optional, queryParam[List[String]]("cqPeriodwcmPeriodundoPeriodwhitelist").description("").optional, queryParam[List[String]]("cqPeriodwcmPeriodundoPeriodblacklist").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.undo.UndoConfig", operation(comDayCqWcmUndoUndoConfigOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val cqPeriodwcmPeriodundoPeriodenabled = params.getAs[Boolean]("cqPeriodwcmPeriodundoPeriodenabled")

    //println("cqPeriodwcmPeriodundoPeriodenabled: " + cqPeriodwcmPeriodundoPeriodenabled)
            val cqPeriodwcmPeriodundoPeriodpath = params.getAs[String]("cqPeriodwcmPeriodundoPeriodpath")

    //println("cqPeriodwcmPeriodundoPeriodpath: " + cqPeriodwcmPeriodundoPeriodpath)
            val cqPeriodwcmPeriodundoPeriodvalidity = params.getAs[Int]("cqPeriodwcmPeriodundoPeriodvalidity")

    //println("cqPeriodwcmPeriodundoPeriodvalidity: " + cqPeriodwcmPeriodundoPeriodvalidity)
            val cqPeriodwcmPeriodundoPeriodsteps = params.getAs[Int]("cqPeriodwcmPeriodundoPeriodsteps")

    //println("cqPeriodwcmPeriodundoPeriodsteps: " + cqPeriodwcmPeriodundoPeriodsteps)
            val cqPeriodwcmPeriodundoPeriodpersistence = params.getAs[String]("cqPeriodwcmPeriodundoPeriodpersistence")

    //println("cqPeriodwcmPeriodundoPeriodpersistence: " + cqPeriodwcmPeriodundoPeriodpersistence)
            val cqPeriodwcmPeriodundoPeriodpersistencePeriodmode = params.getAs[Boolean]("cqPeriodwcmPeriodundoPeriodpersistencePeriodmode")

    //println("cqPeriodwcmPeriodundoPeriodpersistencePeriodmode: " + cqPeriodwcmPeriodundoPeriodpersistencePeriodmode)
            val cqPeriodwcmPeriodundoPeriodmarkermode = params.getAs[String]("cqPeriodwcmPeriodundoPeriodmarkermode")

    //println("cqPeriodwcmPeriodundoPeriodmarkermode: " + cqPeriodwcmPeriodundoPeriodmarkermode)
        val cqPeriodwcmPeriodundoPeriodwhitelistString = params.getAs[String]("cqPeriodwcmPeriodundoPeriodwhitelist")
    val cqPeriodwcmPeriodundoPeriodwhitelist = if("multi" == "default" || "multi" == "csv") {
      cqPeriodwcmPeriodundoPeriodwhitelistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cqPeriodwcmPeriodundoPeriodwhitelist: " + cqPeriodwcmPeriodundoPeriodwhitelist)
        val cqPeriodwcmPeriodundoPeriodblacklistString = params.getAs[String]("cqPeriodwcmPeriodundoPeriodblacklist")
    val cqPeriodwcmPeriodundoPeriodblacklist = if("multi" == "default" || "multi" == "csv") {
      cqPeriodwcmPeriodundoPeriodblacklistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cqPeriodwcmPeriodundoPeriodblacklist: " + cqPeriodwcmPeriodundoPeriodblacklist)
  }

  

  val comDayCqWcmWebservicesupportImplReplicationEventListenerOperation = (apiOperation[ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo]("comDayCqWcmWebservicesupportImplReplicationEventListener")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("flush agents").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.webservicesupport.impl.ReplicationEventListener", operation(comDayCqWcmWebservicesupportImplReplicationEventListenerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val flush agentsString = params.getAs[String]("flush agents")
    val flush agents = if("multi" == "default" || "multi" == "csv") {
      flush agentsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("flush agents: " + flush agents)
  }

  

  val comDayCqWcmWorkflowImplWcmWorkflowServiceImplOperation = (apiOperation[ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo]("comDayCqWcmWorkflowImplWcmWorkflowServiceImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("eventPeriodfilter").description("").optional, queryParam[Int]("minThreadPoolSize").description("").optional, queryParam[Int]("maxThreadPoolSize").description("").optional, queryParam[Boolean]("cqPeriodwcmPeriodworkflowPeriodterminatePeriodonPeriodactivate").description("").optional, queryParam[List[String]]("cqPeriodwcmPeriodworklfowPeriodterminatePeriodexclusionPeriodlist").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.workflow.impl.WcmWorkflowServiceImpl", operation(comDayCqWcmWorkflowImplWcmWorkflowServiceImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val eventPeriodfilter = params.getAs[String]("eventPeriodfilter")

    //println("eventPeriodfilter: " + eventPeriodfilter)
            val minThreadPoolSize = params.getAs[Int]("minThreadPoolSize")

    //println("minThreadPoolSize: " + minThreadPoolSize)
            val maxThreadPoolSize = params.getAs[Int]("maxThreadPoolSize")

    //println("maxThreadPoolSize: " + maxThreadPoolSize)
            val cqPeriodwcmPeriodworkflowPeriodterminatePeriodonPeriodactivate = params.getAs[Boolean]("cqPeriodwcmPeriodworkflowPeriodterminatePeriodonPeriodactivate")

    //println("cqPeriodwcmPeriodworkflowPeriodterminatePeriodonPeriodactivate: " + cqPeriodwcmPeriodworkflowPeriodterminatePeriodonPeriodactivate)
        val cqPeriodwcmPeriodworklfowPeriodterminatePeriodexclusionPeriodlistString = params.getAs[String]("cqPeriodwcmPeriodworklfowPeriodterminatePeriodexclusionPeriodlist")
    val cqPeriodwcmPeriodworklfowPeriodterminatePeriodexclusionPeriodlist = if("multi" == "default" || "multi" == "csv") {
      cqPeriodwcmPeriodworklfowPeriodterminatePeriodexclusionPeriodlistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cqPeriodwcmPeriodworklfowPeriodterminatePeriodexclusionPeriodlist: " + cqPeriodwcmPeriodworklfowPeriodterminatePeriodexclusionPeriodlist)
  }

  

  val comDayCqWcmWorkflowImplWorkflowPackageInfoProviderOperation = (apiOperation[ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo]("comDayCqWcmWorkflowImplWorkflowPackageInfoProvider")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("workflowpackageinfoproviderPeriodfilter").description("").optional, queryParam[String]("workflowpackageinfoproviderPeriodfilterPeriodrootpath").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.wcm.workflow.impl.WorkflowPackageInfoProvider", operation(comDayCqWcmWorkflowImplWorkflowPackageInfoProviderOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val workflowpackageinfoproviderPeriodfilterString = params.getAs[String]("workflowpackageinfoproviderPeriodfilter")
    val workflowpackageinfoproviderPeriodfilter = if("multi" == "default" || "multi" == "csv") {
      workflowpackageinfoproviderPeriodfilterString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("workflowpackageinfoproviderPeriodfilter: " + workflowpackageinfoproviderPeriodfilter)
            val workflowpackageinfoproviderPeriodfilterPeriodrootpath = params.getAs[String]("workflowpackageinfoproviderPeriodfilterPeriodrootpath")

    //println("workflowpackageinfoproviderPeriodfilterPeriodrootpath: " + workflowpackageinfoproviderPeriodfilterPeriodrootpath)
  }

  

  val comDayCqWidgetImplHtmlLibraryManagerImplOperation = (apiOperation[ComDayCqWidgetImplHtmlLibraryManagerImplInfo]("comDayCqWidgetImplHtmlLibraryManagerImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("htmllibmanagerPeriodclientmanager").description("").optional, queryParam[Boolean]("htmllibmanagerPerioddebug").description("").optional, queryParam[Boolean]("htmllibmanagerPerioddebugPeriodconsole").description("").optional, queryParam[String]("htmllibmanagerPerioddebugPeriodinitPeriodjs").description("").optional, queryParam[String]("htmllibmanagerPerioddefaultthemename").description("").optional, queryParam[String]("htmllibmanagerPerioddefaultuserthemename").description("").optional, queryParam[String]("htmllibmanagerPeriodfirebuglitePeriodpath").description("").optional, queryParam[Boolean]("htmllibmanagerPeriodforceCQUrlInfo").description("").optional, queryParam[Boolean]("htmllibmanagerPeriodgzip").description("").optional, queryParam[Int]("htmllibmanagerPeriodmaxage").description("").optional, queryParam[Int]("htmllibmanagerPeriodmaxDataUriSize").description("").optional, queryParam[Boolean]("htmllibmanagerPeriodminify").description("").optional, queryParam[List[String]]("htmllibmanagerPeriodpathPeriodlist").description("").optional, queryParam[Boolean]("htmllibmanagerPeriodtiming").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.widget.impl.HtmlLibraryManagerImpl", operation(comDayCqWidgetImplHtmlLibraryManagerImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val htmllibmanagerPeriodclientmanager = params.getAs[String]("htmllibmanagerPeriodclientmanager")

    //println("htmllibmanagerPeriodclientmanager: " + htmllibmanagerPeriodclientmanager)
            val htmllibmanagerPerioddebug = params.getAs[Boolean]("htmllibmanagerPerioddebug")

    //println("htmllibmanagerPerioddebug: " + htmllibmanagerPerioddebug)
            val htmllibmanagerPerioddebugPeriodconsole = params.getAs[Boolean]("htmllibmanagerPerioddebugPeriodconsole")

    //println("htmllibmanagerPerioddebugPeriodconsole: " + htmllibmanagerPerioddebugPeriodconsole)
            val htmllibmanagerPerioddebugPeriodinitPeriodjs = params.getAs[String]("htmllibmanagerPerioddebugPeriodinitPeriodjs")

    //println("htmllibmanagerPerioddebugPeriodinitPeriodjs: " + htmllibmanagerPerioddebugPeriodinitPeriodjs)
            val htmllibmanagerPerioddefaultthemename = params.getAs[String]("htmllibmanagerPerioddefaultthemename")

    //println("htmllibmanagerPerioddefaultthemename: " + htmllibmanagerPerioddefaultthemename)
            val htmllibmanagerPerioddefaultuserthemename = params.getAs[String]("htmllibmanagerPerioddefaultuserthemename")

    //println("htmllibmanagerPerioddefaultuserthemename: " + htmllibmanagerPerioddefaultuserthemename)
            val htmllibmanagerPeriodfirebuglitePeriodpath = params.getAs[String]("htmllibmanagerPeriodfirebuglitePeriodpath")

    //println("htmllibmanagerPeriodfirebuglitePeriodpath: " + htmllibmanagerPeriodfirebuglitePeriodpath)
            val htmllibmanagerPeriodforceCQUrlInfo = params.getAs[Boolean]("htmllibmanagerPeriodforceCQUrlInfo")

    //println("htmllibmanagerPeriodforceCQUrlInfo: " + htmllibmanagerPeriodforceCQUrlInfo)
            val htmllibmanagerPeriodgzip = params.getAs[Boolean]("htmllibmanagerPeriodgzip")

    //println("htmllibmanagerPeriodgzip: " + htmllibmanagerPeriodgzip)
            val htmllibmanagerPeriodmaxage = params.getAs[Int]("htmllibmanagerPeriodmaxage")

    //println("htmllibmanagerPeriodmaxage: " + htmllibmanagerPeriodmaxage)
            val htmllibmanagerPeriodmaxDataUriSize = params.getAs[Int]("htmllibmanagerPeriodmaxDataUriSize")

    //println("htmllibmanagerPeriodmaxDataUriSize: " + htmllibmanagerPeriodmaxDataUriSize)
            val htmllibmanagerPeriodminify = params.getAs[Boolean]("htmllibmanagerPeriodminify")

    //println("htmllibmanagerPeriodminify: " + htmllibmanagerPeriodminify)
        val htmllibmanagerPeriodpathPeriodlistString = params.getAs[String]("htmllibmanagerPeriodpathPeriodlist")
    val htmllibmanagerPeriodpathPeriodlist = if("multi" == "default" || "multi" == "csv") {
      htmllibmanagerPeriodpathPeriodlistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("htmllibmanagerPeriodpathPeriodlist: " + htmllibmanagerPeriodpathPeriodlist)
            val htmllibmanagerPeriodtiming = params.getAs[Boolean]("htmllibmanagerPeriodtiming")

    //println("htmllibmanagerPeriodtiming: " + htmllibmanagerPeriodtiming)
  }

  

  val comDayCqWidgetImplWidgetExtensionProviderImplOperation = (apiOperation[ComDayCqWidgetImplWidgetExtensionProviderImplInfo]("comDayCqWidgetImplWidgetExtensionProviderImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("extendablePeriodwidgets").description("").optional, queryParam[Boolean]("widgetextensionproviderPerioddebug").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.widget.impl.WidgetExtensionProviderImpl", operation(comDayCqWidgetImplWidgetExtensionProviderImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val extendablePeriodwidgetsString = params.getAs[String]("extendablePeriodwidgets")
    val extendablePeriodwidgets = if("multi" == "default" || "multi" == "csv") {
      extendablePeriodwidgetsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("extendablePeriodwidgets: " + extendablePeriodwidgets)
            val widgetextensionproviderPerioddebug = params.getAs[Boolean]("widgetextensionproviderPerioddebug")

    //println("widgetextensionproviderPerioddebug: " + widgetextensionproviderPerioddebug)
  }

  

  val comDayCqWorkflowImplEmailEMailNotificationServiceOperation = (apiOperation[ComDayCqWorkflowImplEmailEMailNotificationServiceInfo]("comDayCqWorkflowImplEmailEMailNotificationService")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("fromPeriodaddress").description("").optional, queryParam[String]("hostPeriodprefix").description("").optional, queryParam[Boolean]("notifyPeriodonabort").description("").optional, queryParam[Boolean]("notifyPeriodoncomplete").description("").optional, queryParam[Boolean]("notifyPeriodoncontainercomplete").description("").optional, queryParam[Boolean]("notifyPerioduseronly").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.workflow.impl.email.EMailNotificationService", operation(comDayCqWorkflowImplEmailEMailNotificationServiceOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val fromPeriodaddress = params.getAs[String]("fromPeriodaddress")

    //println("fromPeriodaddress: " + fromPeriodaddress)
            val hostPeriodprefix = params.getAs[String]("hostPeriodprefix")

    //println("hostPeriodprefix: " + hostPeriodprefix)
            val notifyPeriodonabort = params.getAs[Boolean]("notifyPeriodonabort")

    //println("notifyPeriodonabort: " + notifyPeriodonabort)
            val notifyPeriodoncomplete = params.getAs[Boolean]("notifyPeriodoncomplete")

    //println("notifyPeriodoncomplete: " + notifyPeriodoncomplete)
            val notifyPeriodoncontainercomplete = params.getAs[Boolean]("notifyPeriodoncontainercomplete")

    //println("notifyPeriodoncontainercomplete: " + notifyPeriodoncontainercomplete)
            val notifyPerioduseronly = params.getAs[Boolean]("notifyPerioduseronly")

    //println("notifyPerioduseronly: " + notifyPerioduseronly)
  }

  

  val comDayCqWorkflowImplEmailTaskEMailNotificationServiceOperation = (apiOperation[ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo]("comDayCqWorkflowImplEmailTaskEMailNotificationService")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("notifyPeriodonupdate").description("").optional, queryParam[Boolean]("notifyPeriodoncomplete").description("").optional)
  )

  post("/system/console/configMgr/com.day.cq.workflow.impl.email.TaskEMailNotificationService", operation(comDayCqWorkflowImplEmailTaskEMailNotificationServiceOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val notifyPeriodonupdate = params.getAs[Boolean]("notifyPeriodonupdate")

    //println("notifyPeriodonupdate: " + notifyPeriodonupdate)
            val notifyPeriodoncomplete = params.getAs[Boolean]("notifyPeriodoncomplete")

    //println("notifyPeriodoncomplete: " + notifyPeriodoncomplete)
  }

  

  val comDayCrxSecurityTokenImplImplTokenAuthenticationHandlerOperation = (apiOperation[ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo]("comDayCrxSecurityTokenImplImplTokenAuthenticationHandler")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("path").description("").optional, queryParam[String]("tokenPeriodrequiredPeriodattr").description("").optional, queryParam[String]("tokenPeriodalternatePeriodurl").description("").optional, queryParam[Boolean]("tokenPeriodencapsulated").description("").optional, queryParam[List[String]]("skipPeriodtokenPeriodrefresh").description("").optional)
  )

  post("/system/console/configMgr/com.day.crx.security.token.impl.impl.TokenAuthenticationHandler", operation(comDayCrxSecurityTokenImplImplTokenAuthenticationHandlerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val path = params.getAs[String]("path")

    //println("path: " + path)
            val tokenPeriodrequiredPeriodattr = params.getAs[String]("tokenPeriodrequiredPeriodattr")

    //println("tokenPeriodrequiredPeriodattr: " + tokenPeriodrequiredPeriodattr)
            val tokenPeriodalternatePeriodurl = params.getAs[String]("tokenPeriodalternatePeriodurl")

    //println("tokenPeriodalternatePeriodurl: " + tokenPeriodalternatePeriodurl)
            val tokenPeriodencapsulated = params.getAs[Boolean]("tokenPeriodencapsulated")

    //println("tokenPeriodencapsulated: " + tokenPeriodencapsulated)
        val skipPeriodtokenPeriodrefreshString = params.getAs[String]("skipPeriodtokenPeriodrefresh")
    val skipPeriodtokenPeriodrefresh = if("multi" == "default" || "multi" == "csv") {
      skipPeriodtokenPeriodrefreshString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("skipPeriodtokenPeriodrefresh: " + skipPeriodtokenPeriodrefresh)
  }

  

  val comDayCrxSecurityTokenImplTokenCleanupTaskOperation = (apiOperation[ComDayCrxSecurityTokenImplTokenCleanupTaskInfo]("comDayCrxSecurityTokenImplTokenCleanupTask")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("enablePeriodtokenPeriodcleanupPeriodtask").description("").optional, queryParam[String]("schedulerPeriodexpression").description("").optional, queryParam[Int]("batchPeriodsize").description("").optional)
  )

  post("/system/console/configMgr/com.day.crx.security.token.impl.TokenCleanupTask", operation(comDayCrxSecurityTokenImplTokenCleanupTaskOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val enablePeriodtokenPeriodcleanupPeriodtask = params.getAs[Boolean]("enablePeriodtokenPeriodcleanupPeriodtask")

    //println("enablePeriodtokenPeriodcleanupPeriodtask: " + enablePeriodtokenPeriodcleanupPeriodtask)
            val schedulerPeriodexpression = params.getAs[String]("schedulerPeriodexpression")

    //println("schedulerPeriodexpression: " + schedulerPeriodexpression)
            val batchPeriodsize = params.getAs[Int]("batchPeriodsize")

    //println("batchPeriodsize: " + batchPeriodsize)
  }

  

  val guideLocalizationServiceOperation = (apiOperation[GuideLocalizationServiceInfo]("guideLocalizationService")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("supportedLocales").description("").optional, queryParam[List[String]]("localizable Properties").description("").optional)
  )

  post("/system/console/configMgr/Guide Localization Service", operation(guideLocalizationServiceOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val supportedLocalesString = params.getAs[String]("supportedLocales")
    val supportedLocales = if("multi" == "default" || "multi" == "csv") {
      supportedLocalesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("supportedLocales: " + supportedLocales)
        val localizable PropertiesString = params.getAs[String]("localizable Properties")
    val localizable Properties = if("multi" == "default" || "multi" == "csv") {
      localizable PropertiesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("localizable Properties: " + localizable Properties)
  }

  

  val messagingUserComponentFactoryOperation = (apiOperation[MessagingUserComponentFactoryInfo]("messagingUserComponentFactory")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("priority").description("").optional)
  )

  post("/system/console/configMgr/MessagingUserComponentFactory", operation(messagingUserComponentFactoryOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val priority = params.getAs[Int]("priority")

    //println("priority: " + priority)
  }

  

  val orgApacheAriesJmxFrameworkStateConfigOperation = (apiOperation[OrgApacheAriesJmxFrameworkStateConfigInfo]("orgApacheAriesJmxFrameworkStateConfig")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("attributeChangeNotificationEnabled").description("").optional)
  )

  post("/system/console/configMgr/org.apache.aries.jmx.framework.StateConfig", operation(orgApacheAriesJmxFrameworkStateConfigOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val attributeChangeNotificationEnabled = params.getAs[Boolean]("attributeChangeNotificationEnabled")

    //println("attributeChangeNotificationEnabled: " + attributeChangeNotificationEnabled)
  }

  

  val orgApacheFelixEventadminImplEventAdminOperation = (apiOperation[OrgApacheFelixEventadminImplEventAdminInfo]("orgApacheFelixEventadminImplEventAdmin")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("orgPeriodapachePeriodfelixPeriodeventadminPeriodThreadPoolSize").description("").optional, queryParam[BigDecimal]("orgPeriodapachePeriodfelixPeriodeventadminPeriodAsyncToSyncThreadRatio").description("").optional, queryParam[Int]("orgPeriodapachePeriodfelixPeriodeventadminPeriodTimeout").description("").optional, queryParam[Boolean]("orgPeriodapachePeriodfelixPeriodeventadminPeriodRequireTopic").description("").optional, queryParam[List[String]]("orgPeriodapachePeriodfelixPeriodeventadminPeriodIgnoreTimeout").description("").optional, queryParam[List[String]]("orgPeriodapachePeriodfelixPeriodeventadminPeriodIgnoreTopic").description("").optional)
  )

  post("/system/console/configMgr/org.apache.felix.eventadmin.impl.EventAdmin", operation(orgApacheFelixEventadminImplEventAdminOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val orgPeriodapachePeriodfelixPeriodeventadminPeriodThreadPoolSize = params.getAs[Int]("orgPeriodapachePeriodfelixPeriodeventadminPeriodThreadPoolSize")

    //println("orgPeriodapachePeriodfelixPeriodeventadminPeriodThreadPoolSize: " + orgPeriodapachePeriodfelixPeriodeventadminPeriodThreadPoolSize)
            val orgPeriodapachePeriodfelixPeriodeventadminPeriodAsyncToSyncThreadRatio = params.getAs[BigDecimal]("orgPeriodapachePeriodfelixPeriodeventadminPeriodAsyncToSyncThreadRatio")

    //println("orgPeriodapachePeriodfelixPeriodeventadminPeriodAsyncToSyncThreadRatio: " + orgPeriodapachePeriodfelixPeriodeventadminPeriodAsyncToSyncThreadRatio)
            val orgPeriodapachePeriodfelixPeriodeventadminPeriodTimeout = params.getAs[Int]("orgPeriodapachePeriodfelixPeriodeventadminPeriodTimeout")

    //println("orgPeriodapachePeriodfelixPeriodeventadminPeriodTimeout: " + orgPeriodapachePeriodfelixPeriodeventadminPeriodTimeout)
            val orgPeriodapachePeriodfelixPeriodeventadminPeriodRequireTopic = params.getAs[Boolean]("orgPeriodapachePeriodfelixPeriodeventadminPeriodRequireTopic")

    //println("orgPeriodapachePeriodfelixPeriodeventadminPeriodRequireTopic: " + orgPeriodapachePeriodfelixPeriodeventadminPeriodRequireTopic)
        val orgPeriodapachePeriodfelixPeriodeventadminPeriodIgnoreTimeoutString = params.getAs[String]("orgPeriodapachePeriodfelixPeriodeventadminPeriodIgnoreTimeout")
    val orgPeriodapachePeriodfelixPeriodeventadminPeriodIgnoreTimeout = if("multi" == "default" || "multi" == "csv") {
      orgPeriodapachePeriodfelixPeriodeventadminPeriodIgnoreTimeoutString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("orgPeriodapachePeriodfelixPeriodeventadminPeriodIgnoreTimeout: " + orgPeriodapachePeriodfelixPeriodeventadminPeriodIgnoreTimeout)
        val orgPeriodapachePeriodfelixPeriodeventadminPeriodIgnoreTopicString = params.getAs[String]("orgPeriodapachePeriodfelixPeriodeventadminPeriodIgnoreTopic")
    val orgPeriodapachePeriodfelixPeriodeventadminPeriodIgnoreTopic = if("multi" == "default" || "multi" == "csv") {
      orgPeriodapachePeriodfelixPeriodeventadminPeriodIgnoreTopicString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("orgPeriodapachePeriodfelixPeriodeventadminPeriodIgnoreTopic: " + orgPeriodapachePeriodfelixPeriodeventadminPeriodIgnoreTopic)
  }

  

  val orgApacheFelixHttpOperation = (apiOperation[OrgApacheFelixHttpInfo]("orgApacheFelixHttp")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("orgPeriodapachePeriodfelixPeriodhttpPeriodhost").description("").optional, queryParam[Boolean]("orgPeriodapachePeriodfelixPeriodhttpPeriodenable").description("").optional, queryParam[Int]("orgPeriodosgiPeriodservicePeriodhttpPeriodport").description("").optional, queryParam[Int]("orgPeriodapachePeriodfelixPeriodhttpPeriodtimeout").description("").optional, queryParam[Boolean]("orgPeriodapachePeriodfelixPeriodhttpsPeriodenable").description("").optional, queryParam[Int]("orgPeriodosgiPeriodservicePeriodhttpPeriodportPeriodsecure").description("").optional, queryParam[String]("orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystore").description("").optional, queryParam[String]("orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodpassword").description("").optional, queryParam[String]("orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkeyPeriodpassword").description("").optional, queryParam[String]("orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststore").description("").optional, queryParam[String]("orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststorePeriodpassword").description("").optional, queryParam[String]("orgPeriodapachePeriodfelixPeriodhttpsPeriodclientcertificate").description("").optional, queryParam[String]("orgPeriodapachePeriodfelixPeriodhttpPeriodcontextPath").description("").optional, queryParam[Boolean]("orgPeriodapachePeriodfelixPeriodhttpPeriodmbeans").description("").optional, queryParam[Int]("orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPeriodtimeout").description("").optional, queryParam[Int]("orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodthreadpoolPeriodmax").description("").optional, queryParam[Int]("orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodacceptors").description("").optional, queryParam[Int]("orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodselectors").description("").optional, queryParam[Int]("orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodheaderBufferSize").description("").optional, queryParam[Int]("orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodrequestBufferSize").description("").optional, queryParam[Int]("orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodresponseBufferSize").description("").optional, queryParam[Int]("orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodmaxFormSize").description("").optional, queryParam[List[String]]("orgPeriodapachePeriodfelixPeriodhttpPeriodpathExclusions").description("").optional, queryParam[List[String]]("orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodciphersuitesPeriodexcluded").description("").optional, queryParam[List[String]]("orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodciphersuitesPeriodincluded").description("").optional, queryParam[Boolean]("orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodsendServerHeader").description("").optional, queryParam[List[String]]("orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodprotocolsPeriodincluded").description("").optional, queryParam[List[String]]("orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodprotocolsPeriodexcluded").description("").optional, queryParam[Boolean]("orgPeriodapachePeriodfelixPeriodproxyPeriodloadPeriodbalancerPeriodconnectionPeriodenable").description("").optional, queryParam[Boolean]("orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodrenegotiateAllowed").description("").optional, queryParam[Boolean]("orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodsessionPeriodcookiePeriodhttpOnly").description("").optional, queryParam[Boolean]("orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodsessionPeriodcookiePeriodsecure").description("").optional, queryParam[String]("orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionIdPathParameterName").description("").optional, queryParam[Boolean]("orgPeriodeclipsePeriodjettyPeriodservletPeriodCheckingRemoteSessionIdEncoding").description("").optional, queryParam[String]("orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionCookie").description("").optional, queryParam[String]("orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionDomain").description("").optional, queryParam[String]("orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionPath").description("").optional, queryParam[Int]("orgPeriodeclipsePeriodjettyPeriodservletPeriodMaxAge").description("").optional, queryParam[String]("orgPeriodapachePeriodfelixPeriodhttpPeriodname").description("").optional, queryParam[Boolean]("orgPeriodapachePeriodfelixPeriodjettyPeriodgziphandlerPeriodenable").description("").optional, queryParam[Int]("orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodminGzipSize").description("").optional, queryParam[Int]("orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodcompressionLevel").description("").optional, queryParam[Int]("orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodinflateBufferSize").description("").optional, queryParam[Boolean]("orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodsyncFlush").description("").optional, queryParam[List[String]]("orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedUserAgents").description("").optional, queryParam[List[String]]("orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedMethods").description("").optional, queryParam[List[String]]("orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedMethods").description("").optional, queryParam[List[String]]("orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedPaths").description("").optional, queryParam[List[String]]("orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedPaths").description("").optional, queryParam[List[String]]("orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedMimeTypes").description("").optional, queryParam[List[String]]("orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedMimeTypes").description("").optional, queryParam[Boolean]("orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPeriodinvalidate").description("").optional, queryParam[Boolean]("orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPerioduniqueid").description("").optional)
  )

  post("/system/console/configMgr/org.apache.felix.http", operation(orgApacheFelixHttpOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val orgPeriodapachePeriodfelixPeriodhttpPeriodhost = params.getAs[String]("orgPeriodapachePeriodfelixPeriodhttpPeriodhost")

    //println("orgPeriodapachePeriodfelixPeriodhttpPeriodhost: " + orgPeriodapachePeriodfelixPeriodhttpPeriodhost)
            val orgPeriodapachePeriodfelixPeriodhttpPeriodenable = params.getAs[Boolean]("orgPeriodapachePeriodfelixPeriodhttpPeriodenable")

    //println("orgPeriodapachePeriodfelixPeriodhttpPeriodenable: " + orgPeriodapachePeriodfelixPeriodhttpPeriodenable)
            val orgPeriodosgiPeriodservicePeriodhttpPeriodport = params.getAs[Int]("orgPeriodosgiPeriodservicePeriodhttpPeriodport")

    //println("orgPeriodosgiPeriodservicePeriodhttpPeriodport: " + orgPeriodosgiPeriodservicePeriodhttpPeriodport)
            val orgPeriodapachePeriodfelixPeriodhttpPeriodtimeout = params.getAs[Int]("orgPeriodapachePeriodfelixPeriodhttpPeriodtimeout")

    //println("orgPeriodapachePeriodfelixPeriodhttpPeriodtimeout: " + orgPeriodapachePeriodfelixPeriodhttpPeriodtimeout)
            val orgPeriodapachePeriodfelixPeriodhttpsPeriodenable = params.getAs[Boolean]("orgPeriodapachePeriodfelixPeriodhttpsPeriodenable")

    //println("orgPeriodapachePeriodfelixPeriodhttpsPeriodenable: " + orgPeriodapachePeriodfelixPeriodhttpsPeriodenable)
            val orgPeriodosgiPeriodservicePeriodhttpPeriodportPeriodsecure = params.getAs[Int]("orgPeriodosgiPeriodservicePeriodhttpPeriodportPeriodsecure")

    //println("orgPeriodosgiPeriodservicePeriodhttpPeriodportPeriodsecure: " + orgPeriodosgiPeriodservicePeriodhttpPeriodportPeriodsecure)
            val orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystore = params.getAs[String]("orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystore")

    //println("orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystore: " + orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystore)
            val orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodpassword = params.getAs[String]("orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodpassword")

    //println("orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodpassword: " + orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodpassword)
            val orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkeyPeriodpassword = params.getAs[String]("orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkeyPeriodpassword")

    //println("orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkeyPeriodpassword: " + orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkeyPeriodpassword)
            val orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststore = params.getAs[String]("orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststore")

    //println("orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststore: " + orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststore)
            val orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststorePeriodpassword = params.getAs[String]("orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststorePeriodpassword")

    //println("orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststorePeriodpassword: " + orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststorePeriodpassword)
            val orgPeriodapachePeriodfelixPeriodhttpsPeriodclientcertificate = params.getAs[String]("orgPeriodapachePeriodfelixPeriodhttpsPeriodclientcertificate")

    //println("orgPeriodapachePeriodfelixPeriodhttpsPeriodclientcertificate: " + orgPeriodapachePeriodfelixPeriodhttpsPeriodclientcertificate)
            val orgPeriodapachePeriodfelixPeriodhttpPeriodcontextPath = params.getAs[String]("orgPeriodapachePeriodfelixPeriodhttpPeriodcontextPath")

    //println("orgPeriodapachePeriodfelixPeriodhttpPeriodcontextPath: " + orgPeriodapachePeriodfelixPeriodhttpPeriodcontextPath)
            val orgPeriodapachePeriodfelixPeriodhttpPeriodmbeans = params.getAs[Boolean]("orgPeriodapachePeriodfelixPeriodhttpPeriodmbeans")

    //println("orgPeriodapachePeriodfelixPeriodhttpPeriodmbeans: " + orgPeriodapachePeriodfelixPeriodhttpPeriodmbeans)
            val orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPeriodtimeout = params.getAs[Int]("orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPeriodtimeout")

    //println("orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPeriodtimeout: " + orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPeriodtimeout)
            val orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodthreadpoolPeriodmax = params.getAs[Int]("orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodthreadpoolPeriodmax")

    //println("orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodthreadpoolPeriodmax: " + orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodthreadpoolPeriodmax)
            val orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodacceptors = params.getAs[Int]("orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodacceptors")

    //println("orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodacceptors: " + orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodacceptors)
            val orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodselectors = params.getAs[Int]("orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodselectors")

    //println("orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodselectors: " + orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodselectors)
            val orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodheaderBufferSize = params.getAs[Int]("orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodheaderBufferSize")

    //println("orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodheaderBufferSize: " + orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodheaderBufferSize)
            val orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodrequestBufferSize = params.getAs[Int]("orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodrequestBufferSize")

    //println("orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodrequestBufferSize: " + orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodrequestBufferSize)
            val orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodresponseBufferSize = params.getAs[Int]("orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodresponseBufferSize")

    //println("orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodresponseBufferSize: " + orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodresponseBufferSize)
            val orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodmaxFormSize = params.getAs[Int]("orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodmaxFormSize")

    //println("orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodmaxFormSize: " + orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodmaxFormSize)
        val orgPeriodapachePeriodfelixPeriodhttpPeriodpathExclusionsString = params.getAs[String]("orgPeriodapachePeriodfelixPeriodhttpPeriodpathExclusions")
    val orgPeriodapachePeriodfelixPeriodhttpPeriodpathExclusions = if("multi" == "default" || "multi" == "csv") {
      orgPeriodapachePeriodfelixPeriodhttpPeriodpathExclusionsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("orgPeriodapachePeriodfelixPeriodhttpPeriodpathExclusions: " + orgPeriodapachePeriodfelixPeriodhttpPeriodpathExclusions)
        val orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodciphersuitesPeriodexcludedString = params.getAs[String]("orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodciphersuitesPeriodexcluded")
    val orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodciphersuitesPeriodexcluded = if("multi" == "default" || "multi" == "csv") {
      orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodciphersuitesPeriodexcludedString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodciphersuitesPeriodexcluded: " + orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodciphersuitesPeriodexcluded)
        val orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodciphersuitesPeriodincludedString = params.getAs[String]("orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodciphersuitesPeriodincluded")
    val orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodciphersuitesPeriodincluded = if("multi" == "default" || "multi" == "csv") {
      orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodciphersuitesPeriodincludedString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodciphersuitesPeriodincluded: " + orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodciphersuitesPeriodincluded)
            val orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodsendServerHeader = params.getAs[Boolean]("orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodsendServerHeader")

    //println("orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodsendServerHeader: " + orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodsendServerHeader)
        val orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodprotocolsPeriodincludedString = params.getAs[String]("orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodprotocolsPeriodincluded")
    val orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodprotocolsPeriodincluded = if("multi" == "default" || "multi" == "csv") {
      orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodprotocolsPeriodincludedString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodprotocolsPeriodincluded: " + orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodprotocolsPeriodincluded)
        val orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodprotocolsPeriodexcludedString = params.getAs[String]("orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodprotocolsPeriodexcluded")
    val orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodprotocolsPeriodexcluded = if("multi" == "default" || "multi" == "csv") {
      orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodprotocolsPeriodexcludedString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodprotocolsPeriodexcluded: " + orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodprotocolsPeriodexcluded)
            val orgPeriodapachePeriodfelixPeriodproxyPeriodloadPeriodbalancerPeriodconnectionPeriodenable = params.getAs[Boolean]("orgPeriodapachePeriodfelixPeriodproxyPeriodloadPeriodbalancerPeriodconnectionPeriodenable")

    //println("orgPeriodapachePeriodfelixPeriodproxyPeriodloadPeriodbalancerPeriodconnectionPeriodenable: " + orgPeriodapachePeriodfelixPeriodproxyPeriodloadPeriodbalancerPeriodconnectionPeriodenable)
            val orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodrenegotiateAllowed = params.getAs[Boolean]("orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodrenegotiateAllowed")

    //println("orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodrenegotiateAllowed: " + orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodrenegotiateAllowed)
            val orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodsessionPeriodcookiePeriodhttpOnly = params.getAs[Boolean]("orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodsessionPeriodcookiePeriodhttpOnly")

    //println("orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodsessionPeriodcookiePeriodhttpOnly: " + orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodsessionPeriodcookiePeriodhttpOnly)
            val orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodsessionPeriodcookiePeriodsecure = params.getAs[Boolean]("orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodsessionPeriodcookiePeriodsecure")

    //println("orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodsessionPeriodcookiePeriodsecure: " + orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodsessionPeriodcookiePeriodsecure)
            val orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionIdPathParameterName = params.getAs[String]("orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionIdPathParameterName")

    //println("orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionIdPathParameterName: " + orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionIdPathParameterName)
            val orgPeriodeclipsePeriodjettyPeriodservletPeriodCheckingRemoteSessionIdEncoding = params.getAs[Boolean]("orgPeriodeclipsePeriodjettyPeriodservletPeriodCheckingRemoteSessionIdEncoding")

    //println("orgPeriodeclipsePeriodjettyPeriodservletPeriodCheckingRemoteSessionIdEncoding: " + orgPeriodeclipsePeriodjettyPeriodservletPeriodCheckingRemoteSessionIdEncoding)
            val orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionCookie = params.getAs[String]("orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionCookie")

    //println("orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionCookie: " + orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionCookie)
            val orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionDomain = params.getAs[String]("orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionDomain")

    //println("orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionDomain: " + orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionDomain)
            val orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionPath = params.getAs[String]("orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionPath")

    //println("orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionPath: " + orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionPath)
            val orgPeriodeclipsePeriodjettyPeriodservletPeriodMaxAge = params.getAs[Int]("orgPeriodeclipsePeriodjettyPeriodservletPeriodMaxAge")

    //println("orgPeriodeclipsePeriodjettyPeriodservletPeriodMaxAge: " + orgPeriodeclipsePeriodjettyPeriodservletPeriodMaxAge)
            val orgPeriodapachePeriodfelixPeriodhttpPeriodname = params.getAs[String]("orgPeriodapachePeriodfelixPeriodhttpPeriodname")

    //println("orgPeriodapachePeriodfelixPeriodhttpPeriodname: " + orgPeriodapachePeriodfelixPeriodhttpPeriodname)
            val orgPeriodapachePeriodfelixPeriodjettyPeriodgziphandlerPeriodenable = params.getAs[Boolean]("orgPeriodapachePeriodfelixPeriodjettyPeriodgziphandlerPeriodenable")

    //println("orgPeriodapachePeriodfelixPeriodjettyPeriodgziphandlerPeriodenable: " + orgPeriodapachePeriodfelixPeriodjettyPeriodgziphandlerPeriodenable)
            val orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodminGzipSize = params.getAs[Int]("orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodminGzipSize")

    //println("orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodminGzipSize: " + orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodminGzipSize)
            val orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodcompressionLevel = params.getAs[Int]("orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodcompressionLevel")

    //println("orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodcompressionLevel: " + orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodcompressionLevel)
            val orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodinflateBufferSize = params.getAs[Int]("orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodinflateBufferSize")

    //println("orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodinflateBufferSize: " + orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodinflateBufferSize)
            val orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodsyncFlush = params.getAs[Boolean]("orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodsyncFlush")

    //println("orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodsyncFlush: " + orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodsyncFlush)
        val orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedUserAgentsString = params.getAs[String]("orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedUserAgents")
    val orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedUserAgents = if("multi" == "default" || "multi" == "csv") {
      orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedUserAgentsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedUserAgents: " + orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedUserAgents)
        val orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedMethodsString = params.getAs[String]("orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedMethods")
    val orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedMethods = if("multi" == "default" || "multi" == "csv") {
      orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedMethodsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedMethods: " + orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedMethods)
        val orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedMethodsString = params.getAs[String]("orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedMethods")
    val orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedMethods = if("multi" == "default" || "multi" == "csv") {
      orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedMethodsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedMethods: " + orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedMethods)
        val orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedPathsString = params.getAs[String]("orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedPaths")
    val orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedPaths = if("multi" == "default" || "multi" == "csv") {
      orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedPathsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedPaths: " + orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedPaths)
        val orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedPathsString = params.getAs[String]("orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedPaths")
    val orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedPaths = if("multi" == "default" || "multi" == "csv") {
      orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedPathsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedPaths: " + orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedPaths)
        val orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedMimeTypesString = params.getAs[String]("orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedMimeTypes")
    val orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedMimeTypes = if("multi" == "default" || "multi" == "csv") {
      orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedMimeTypesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedMimeTypes: " + orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedMimeTypes)
        val orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedMimeTypesString = params.getAs[String]("orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedMimeTypes")
    val orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedMimeTypes = if("multi" == "default" || "multi" == "csv") {
      orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedMimeTypesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedMimeTypes: " + orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedMimeTypes)
            val orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPeriodinvalidate = params.getAs[Boolean]("orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPeriodinvalidate")

    //println("orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPeriodinvalidate: " + orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPeriodinvalidate)
            val orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPerioduniqueid = params.getAs[Boolean]("orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPerioduniqueid")

    //println("orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPerioduniqueid: " + orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPerioduniqueid)
  }

  

  val orgApacheFelixHttpSslfilterSslFilterOperation = (apiOperation[OrgApacheFelixHttpSslfilterSslFilterInfo]("orgApacheFelixHttpSslfilterSslFilter")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("sslForwardPeriodheader").description("").optional, queryParam[String]("sslForwardPeriodvalue").description("").optional, queryParam[String]("sslForwardCertPeriodheader").description("").optional, queryParam[Boolean]("rewritePeriodabsolutePeriodurls").description("").optional)
  )

  post("/system/console/configMgr/org.apache.felix.http.sslfilter.SslFilter", operation(orgApacheFelixHttpSslfilterSslFilterOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val sslForwardPeriodheader = params.getAs[String]("sslForwardPeriodheader")

    //println("sslForwardPeriodheader: " + sslForwardPeriodheader)
            val sslForwardPeriodvalue = params.getAs[String]("sslForwardPeriodvalue")

    //println("sslForwardPeriodvalue: " + sslForwardPeriodvalue)
            val sslForwardCertPeriodheader = params.getAs[String]("sslForwardCertPeriodheader")

    //println("sslForwardCertPeriodheader: " + sslForwardCertPeriodheader)
            val rewritePeriodabsolutePeriodurls = params.getAs[Boolean]("rewritePeriodabsolutePeriodurls")

    //println("rewritePeriodabsolutePeriodurls: " + rewritePeriodabsolutePeriodurls)
  }

  

  val orgApacheFelixJaasConfigurationFactoryOperation = (apiOperation[OrgApacheFelixJaasConfigurationFactoryInfo]("orgApacheFelixJaasConfigurationFactory")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("jaasPeriodcontrolFlag").description("").optional, queryParam[Int]("jaasPeriodranking").description("").optional, queryParam[String]("jaasPeriodrealmName").description("").optional, queryParam[String]("jaasPeriodclassname").description("").optional, queryParam[List[String]]("jaasPeriodoptions").description("").optional)
  )

  post("/system/console/configMgr/org.apache.felix.jaas.Configuration.factory", operation(orgApacheFelixJaasConfigurationFactoryOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val jaasPeriodcontrolFlag = params.getAs[String]("jaasPeriodcontrolFlag")

    //println("jaasPeriodcontrolFlag: " + jaasPeriodcontrolFlag)
            val jaasPeriodranking = params.getAs[Int]("jaasPeriodranking")

    //println("jaasPeriodranking: " + jaasPeriodranking)
            val jaasPeriodrealmName = params.getAs[String]("jaasPeriodrealmName")

    //println("jaasPeriodrealmName: " + jaasPeriodrealmName)
            val jaasPeriodclassname = params.getAs[String]("jaasPeriodclassname")

    //println("jaasPeriodclassname: " + jaasPeriodclassname)
        val jaasPeriodoptionsString = params.getAs[String]("jaasPeriodoptions")
    val jaasPeriodoptions = if("multi" == "default" || "multi" == "csv") {
      jaasPeriodoptionsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("jaasPeriodoptions: " + jaasPeriodoptions)
  }

  

  val orgApacheFelixJaasConfigurationSpiOperation = (apiOperation[OrgApacheFelixJaasConfigurationSpiInfo]("orgApacheFelixJaasConfigurationSpi")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("jaasPerioddefaultRealmName").description("").optional, queryParam[String]("jaasPeriodconfigProviderName").description("").optional, queryParam[String]("jaasPeriodglobalConfigPolicy").description("").optional)
  )

  post("/system/console/configMgr/org.apache.felix.jaas.ConfigurationSpi", operation(orgApacheFelixJaasConfigurationSpiOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val jaasPerioddefaultRealmName = params.getAs[String]("jaasPerioddefaultRealmName")

    //println("jaasPerioddefaultRealmName: " + jaasPerioddefaultRealmName)
            val jaasPeriodconfigProviderName = params.getAs[String]("jaasPeriodconfigProviderName")

    //println("jaasPeriodconfigProviderName: " + jaasPeriodconfigProviderName)
            val jaasPeriodglobalConfigPolicy = params.getAs[String]("jaasPeriodglobalConfigPolicy")

    //println("jaasPeriodglobalConfigPolicy: " + jaasPeriodglobalConfigPolicy)
  }

  

  val orgApacheFelixScrScrServiceOperation = (apiOperation[OrgApacheFelixScrScrServiceInfo]("orgApacheFelixScrScrService")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("dsPeriodloglevel").description("").optional, queryParam[Boolean]("dsPeriodfactoryPeriodenabled").description("").optional, queryParam[Boolean]("dsPerioddelayedPeriodkeepInstances").description("").optional, queryParam[Int]("dsPeriodlockPeriodtimeoutPeriodmilliseconds").description("").optional, queryParam[Int]("dsPeriodstopPeriodtimeoutPeriodmilliseconds").description("").optional, queryParam[Boolean]("dsPeriodglobalPeriodextender").description("").optional)
  )

  post("/system/console/configMgr/org.apache.felix.scr.ScrService", operation(orgApacheFelixScrScrServiceOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val dsPeriodloglevel = params.getAs[Int]("dsPeriodloglevel")

    //println("dsPeriodloglevel: " + dsPeriodloglevel)
            val dsPeriodfactoryPeriodenabled = params.getAs[Boolean]("dsPeriodfactoryPeriodenabled")

    //println("dsPeriodfactoryPeriodenabled: " + dsPeriodfactoryPeriodenabled)
            val dsPerioddelayedPeriodkeepInstances = params.getAs[Boolean]("dsPerioddelayedPeriodkeepInstances")

    //println("dsPerioddelayedPeriodkeepInstances: " + dsPerioddelayedPeriodkeepInstances)
            val dsPeriodlockPeriodtimeoutPeriodmilliseconds = params.getAs[Int]("dsPeriodlockPeriodtimeoutPeriodmilliseconds")

    //println("dsPeriodlockPeriodtimeoutPeriodmilliseconds: " + dsPeriodlockPeriodtimeoutPeriodmilliseconds)
            val dsPeriodstopPeriodtimeoutPeriodmilliseconds = params.getAs[Int]("dsPeriodstopPeriodtimeoutPeriodmilliseconds")

    //println("dsPeriodstopPeriodtimeoutPeriodmilliseconds: " + dsPeriodstopPeriodtimeoutPeriodmilliseconds)
            val dsPeriodglobalPeriodextender = params.getAs[Boolean]("dsPeriodglobalPeriodextender")

    //println("dsPeriodglobalPeriodextender: " + dsPeriodglobalPeriodextender)
  }

  

  val orgApacheFelixSystemreadyImplComponentsCheckOperation = (apiOperation[OrgApacheFelixSystemreadyImplComponentsCheckInfo]("orgApacheFelixSystemreadyImplComponentsCheck")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("componentsPeriodlist").description("").optional, queryParam[String]("`type`").description("").optional)
  )

  post("/system/console/configMgr/org.apache.felix.systemready.impl.ComponentsCheck", operation(orgApacheFelixSystemreadyImplComponentsCheckOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val componentsPeriodlistString = params.getAs[String]("componentsPeriodlist")
    val componentsPeriodlist = if("multi" == "default" || "multi" == "csv") {
      componentsPeriodlistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("componentsPeriodlist: " + componentsPeriodlist)
            val `type` = params.getAs[String]("`type`")

    //println("`type`: " + `type`)
  }

  

  val orgApacheFelixSystemreadyImplFrameworkStartCheckOperation = (apiOperation[OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo]("orgApacheFelixSystemreadyImplFrameworkStartCheck")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("timeout").description("").optional, queryParam[Int]("targetPeriodstartPeriodlevel").description("").optional, queryParam[String]("targetPeriodstartPeriodlevelPeriodpropPeriodname").description("").optional, queryParam[String]("`type`").description("").optional)
  )

  post("/system/console/configMgr/org.apache.felix.systemready.impl.FrameworkStartCheck", operation(orgApacheFelixSystemreadyImplFrameworkStartCheckOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val timeout = params.getAs[Int]("timeout")

    //println("timeout: " + timeout)
            val targetPeriodstartPeriodlevel = params.getAs[Int]("targetPeriodstartPeriodlevel")

    //println("targetPeriodstartPeriodlevel: " + targetPeriodstartPeriodlevel)
            val targetPeriodstartPeriodlevelPeriodpropPeriodname = params.getAs[String]("targetPeriodstartPeriodlevelPeriodpropPeriodname")

    //println("targetPeriodstartPeriodlevelPeriodpropPeriodname: " + targetPeriodstartPeriodlevelPeriodpropPeriodname)
            val `type` = params.getAs[String]("`type`")

    //println("`type`: " + `type`)
  }

  

  val orgApacheFelixSystemreadyImplServicesCheckOperation = (apiOperation[OrgApacheFelixSystemreadyImplServicesCheckInfo]("orgApacheFelixSystemreadyImplServicesCheck")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("servicesPeriodlist").description("").optional, queryParam[String]("`type`").description("").optional)
  )

  post("/system/console/configMgr/org.apache.felix.systemready.impl.ServicesCheck", operation(orgApacheFelixSystemreadyImplServicesCheckOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val servicesPeriodlistString = params.getAs[String]("servicesPeriodlist")
    val servicesPeriodlist = if("multi" == "default" || "multi" == "csv") {
      servicesPeriodlistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("servicesPeriodlist: " + servicesPeriodlist)
            val `type` = params.getAs[String]("`type`")

    //println("`type`: " + `type`)
  }

  

  val orgApacheFelixSystemreadyImplServletSystemAliveServletOperation = (apiOperation[OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo]("orgApacheFelixSystemreadyImplServletSystemAliveServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern").description("").optional, queryParam[String]("osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect").description("").optional)
  )

  post("/system/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemAliveServlet", operation(orgApacheFelixSystemreadyImplServletSystemAliveServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern = params.getAs[String]("osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern")

    //println("osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern: " + osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern)
            val osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect = params.getAs[String]("osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect")

    //println("osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect: " + osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect)
  }

  

  val orgApacheFelixSystemreadyImplServletSystemReadyServletOperation = (apiOperation[OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo]("orgApacheFelixSystemreadyImplServletSystemReadyServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern").description("").optional, queryParam[String]("osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect").description("").optional)
  )

  post("/system/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemReadyServlet", operation(orgApacheFelixSystemreadyImplServletSystemReadyServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern = params.getAs[String]("osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern")

    //println("osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern: " + osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern)
            val osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect = params.getAs[String]("osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect")

    //println("osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect: " + osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect)
  }

  

  val orgApacheFelixSystemreadySystemReadyMonitorOperation = (apiOperation[OrgApacheFelixSystemreadySystemReadyMonitorInfo]("orgApacheFelixSystemreadySystemReadyMonitor")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("pollPeriodinterval").description("").optional)
  )

  post("/system/console/configMgr/org.apache.felix.systemready.SystemReadyMonitor", operation(orgApacheFelixSystemreadySystemReadyMonitorOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val pollPeriodinterval = params.getAs[Int]("pollPeriodinterval")

    //println("pollPeriodinterval: " + pollPeriodinterval)
  }

  

  val orgApacheFelixWebconsoleInternalServletOsgiManagerOperation = (apiOperation[OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo]("orgApacheFelixWebconsoleInternalServletOsgiManager")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("managerPeriodroot").description("").optional, queryParam[String]("httpPeriodservicePeriodfilter").description("").optional, queryParam[String]("defaultPeriodrender").description("").optional, queryParam[String]("realm").description("").optional, queryParam[String]("username").description("").optional, queryParam[String]("password").description("").optional, queryParam[String]("category").description("").optional, queryParam[String]("locale").description("").optional, queryParam[Int]("loglevel").description("").optional, queryParam[String]("plugins").description("").optional)
  )

  post("/system/console/configMgr/org.apache.felix.webconsole.internal.servlet.OsgiManager", operation(orgApacheFelixWebconsoleInternalServletOsgiManagerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val managerPeriodroot = params.getAs[String]("managerPeriodroot")

    //println("managerPeriodroot: " + managerPeriodroot)
            val httpPeriodservicePeriodfilter = params.getAs[String]("httpPeriodservicePeriodfilter")

    //println("httpPeriodservicePeriodfilter: " + httpPeriodservicePeriodfilter)
            val defaultPeriodrender = params.getAs[String]("defaultPeriodrender")

    //println("defaultPeriodrender: " + defaultPeriodrender)
            val realm = params.getAs[String]("realm")

    //println("realm: " + realm)
            val username = params.getAs[String]("username")

    //println("username: " + username)
            val password = params.getAs[String]("password")

    //println("password: " + password)
            val category = params.getAs[String]("category")

    //println("category: " + category)
            val locale = params.getAs[String]("locale")

    //println("locale: " + locale)
            val loglevel = params.getAs[Int]("loglevel")

    //println("loglevel: " + loglevel)
            val plugins = params.getAs[String]("plugins")

    //println("plugins: " + plugins)
  }

  

  val orgApacheFelixWebconsolePluginsEventInternalPluginServletOperation = (apiOperation[OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo]("orgApacheFelixWebconsolePluginsEventInternalPluginServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("maxPeriodsize").description("").optional)
  )

  post("/system/console/configMgr/org.apache.felix.webconsole.plugins.event.internal.PluginServlet", operation(orgApacheFelixWebconsolePluginsEventInternalPluginServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val maxPeriodsize = params.getAs[Int]("maxPeriodsize")

    //println("maxPeriodsize: " + maxPeriodsize)
  }

  

  val orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoOperation = (apiOperation[OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo]("orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("felixPeriodmemoryusagePerioddumpPeriodthreshold").description("").optional, queryParam[Int]("felixPeriodmemoryusagePerioddumpPeriodinterval").description("").optional, queryParam[String]("felixPeriodmemoryusagePerioddumpPeriodlocation").description("").optional)
  )

  post("/system/console/configMgr/org.apache.felix.webconsole.plugins.memoryusage.internal.MemoryUsageConfigurator", operation(orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val felixPeriodmemoryusagePerioddumpPeriodthreshold = params.getAs[Int]("felixPeriodmemoryusagePerioddumpPeriodthreshold")

    //println("felixPeriodmemoryusagePerioddumpPeriodthreshold: " + felixPeriodmemoryusagePerioddumpPeriodthreshold)
            val felixPeriodmemoryusagePerioddumpPeriodinterval = params.getAs[Int]("felixPeriodmemoryusagePerioddumpPeriodinterval")

    //println("felixPeriodmemoryusagePerioddumpPeriodinterval: " + felixPeriodmemoryusagePerioddumpPeriodinterval)
            val felixPeriodmemoryusagePerioddumpPeriodlocation = params.getAs[String]("felixPeriodmemoryusagePerioddumpPeriodlocation")

    //println("felixPeriodmemoryusagePerioddumpPeriodlocation: " + felixPeriodmemoryusagePerioddumpPeriodlocation)
  }

  

  val orgApacheHttpProxyconfiguratorOperation = (apiOperation[OrgApacheHttpProxyconfiguratorInfo]("orgApacheHttpProxyconfigurator")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("proxyPeriodenabled").description("").optional, queryParam[String]("proxyPeriodhost").description("").optional, queryParam[Int]("proxyPeriodport").description("").optional, queryParam[String]("proxyPerioduser").description("").optional, queryParam[String]("proxyPeriodpassword").description("").optional, queryParam[List[String]]("proxyPeriodexceptions").description("").optional)
  )

  post("/system/console/configMgr/org.apache.http.proxyconfigurator", operation(orgApacheHttpProxyconfiguratorOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val proxyPeriodenabled = params.getAs[Boolean]("proxyPeriodenabled")

    //println("proxyPeriodenabled: " + proxyPeriodenabled)
            val proxyPeriodhost = params.getAs[String]("proxyPeriodhost")

    //println("proxyPeriodhost: " + proxyPeriodhost)
            val proxyPeriodport = params.getAs[Int]("proxyPeriodport")

    //println("proxyPeriodport: " + proxyPeriodport)
            val proxyPerioduser = params.getAs[String]("proxyPerioduser")

    //println("proxyPerioduser: " + proxyPerioduser)
            val proxyPeriodpassword = params.getAs[String]("proxyPeriodpassword")

    //println("proxyPeriodpassword: " + proxyPeriodpassword)
        val proxyPeriodexceptionsString = params.getAs[String]("proxyPeriodexceptions")
    val proxyPeriodexceptions = if("multi" == "default" || "multi" == "csv") {
      proxyPeriodexceptionsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("proxyPeriodexceptions: " + proxyPeriodexceptions)
  }

  

  val orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderOperation = (apiOperation[OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo]("orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("dir").description("").optional)
  )

  post("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreTextProviderService", operation(orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val dir = params.getAs[String]("dir")

    //println("dir: " + dir)
  }

  

  val orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreOperation = (apiOperation[OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo]("orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("path").description("").optional)
  )

  post("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.FileDataStore", operation(orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val path = params.getAs[String]("path")

    //println("path: " + path)
  }

  

  val orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceOperation = (apiOperation[OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo]("orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("mongouri").description("").optional, queryParam[String]("db").description("").optional, queryParam[Boolean]("socketKeepAlive").description("").optional, queryParam[Int]("cache").description("").optional, queryParam[Int]("nodeCachePercentage").description("").optional, queryParam[Int]("prevDocCachePercentage").description("").optional, queryParam[Int]("childrenCachePercentage").description("").optional, queryParam[Int]("diffCachePercentage").description("").optional, queryParam[Int]("cacheSegmentCount").description("").optional, queryParam[Int]("cacheStackMoveDistance").description("").optional, queryParam[Int]("blobCacheSize").description("").optional, queryParam[String]("persistentCache").description("").optional, queryParam[String]("journalCache").description("").optional, queryParam[Boolean]("customBlobStore").description("").optional, queryParam[Int]("journalGCInterval").description("").optional, queryParam[Int]("journalGCMaxAge").description("").optional, queryParam[Boolean]("prefetchExternalChanges").description("").optional, queryParam[String]("role").description("").optional, queryParam[Int]("versionGcMaxAgeInSecs").description("").optional, queryParam[String]("versionGCExpression").description("").optional, queryParam[Int]("versionGCTimeLimitInSecs").description("").optional, queryParam[Int]("blobGcMaxAgeInSecs").description("").optional, queryParam[Int]("blobTrackSnapshotIntervalInSecs").description("").optional, queryParam[String]("repositoryPeriodhome").description("").optional, queryParam[Int]("maxReplicationLagInSecs").description("").optional, queryParam[String]("documentStoreType").description("").optional, queryParam[Boolean]("bundlingDisabled").description("").optional, queryParam[Int]("updateLimit").description("").optional, queryParam[List[String]]("persistentCacheIncludes").description("").optional, queryParam[String]("leaseCheckMode").description("").optional)
  )

  post("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreService", operation(orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val mongouri = params.getAs[String]("mongouri")

    //println("mongouri: " + mongouri)
            val db = params.getAs[String]("db")

    //println("db: " + db)
            val socketKeepAlive = params.getAs[Boolean]("socketKeepAlive")

    //println("socketKeepAlive: " + socketKeepAlive)
            val cache = params.getAs[Int]("cache")

    //println("cache: " + cache)
            val nodeCachePercentage = params.getAs[Int]("nodeCachePercentage")

    //println("nodeCachePercentage: " + nodeCachePercentage)
            val prevDocCachePercentage = params.getAs[Int]("prevDocCachePercentage")

    //println("prevDocCachePercentage: " + prevDocCachePercentage)
            val childrenCachePercentage = params.getAs[Int]("childrenCachePercentage")

    //println("childrenCachePercentage: " + childrenCachePercentage)
            val diffCachePercentage = params.getAs[Int]("diffCachePercentage")

    //println("diffCachePercentage: " + diffCachePercentage)
            val cacheSegmentCount = params.getAs[Int]("cacheSegmentCount")

    //println("cacheSegmentCount: " + cacheSegmentCount)
            val cacheStackMoveDistance = params.getAs[Int]("cacheStackMoveDistance")

    //println("cacheStackMoveDistance: " + cacheStackMoveDistance)
            val blobCacheSize = params.getAs[Int]("blobCacheSize")

    //println("blobCacheSize: " + blobCacheSize)
            val persistentCache = params.getAs[String]("persistentCache")

    //println("persistentCache: " + persistentCache)
            val journalCache = params.getAs[String]("journalCache")

    //println("journalCache: " + journalCache)
            val customBlobStore = params.getAs[Boolean]("customBlobStore")

    //println("customBlobStore: " + customBlobStore)
            val journalGCInterval = params.getAs[Int]("journalGCInterval")

    //println("journalGCInterval: " + journalGCInterval)
            val journalGCMaxAge = params.getAs[Int]("journalGCMaxAge")

    //println("journalGCMaxAge: " + journalGCMaxAge)
            val prefetchExternalChanges = params.getAs[Boolean]("prefetchExternalChanges")

    //println("prefetchExternalChanges: " + prefetchExternalChanges)
            val role = params.getAs[String]("role")

    //println("role: " + role)
            val versionGcMaxAgeInSecs = params.getAs[Int]("versionGcMaxAgeInSecs")

    //println("versionGcMaxAgeInSecs: " + versionGcMaxAgeInSecs)
            val versionGCExpression = params.getAs[String]("versionGCExpression")

    //println("versionGCExpression: " + versionGCExpression)
            val versionGCTimeLimitInSecs = params.getAs[Int]("versionGCTimeLimitInSecs")

    //println("versionGCTimeLimitInSecs: " + versionGCTimeLimitInSecs)
            val blobGcMaxAgeInSecs = params.getAs[Int]("blobGcMaxAgeInSecs")

    //println("blobGcMaxAgeInSecs: " + blobGcMaxAgeInSecs)
            val blobTrackSnapshotIntervalInSecs = params.getAs[Int]("blobTrackSnapshotIntervalInSecs")

    //println("blobTrackSnapshotIntervalInSecs: " + blobTrackSnapshotIntervalInSecs)
            val repositoryPeriodhome = params.getAs[String]("repositoryPeriodhome")

    //println("repositoryPeriodhome: " + repositoryPeriodhome)
            val maxReplicationLagInSecs = params.getAs[Int]("maxReplicationLagInSecs")

    //println("maxReplicationLagInSecs: " + maxReplicationLagInSecs)
            val documentStoreType = params.getAs[String]("documentStoreType")

    //println("documentStoreType: " + documentStoreType)
            val bundlingDisabled = params.getAs[Boolean]("bundlingDisabled")

    //println("bundlingDisabled: " + bundlingDisabled)
            val updateLimit = params.getAs[Int]("updateLimit")

    //println("updateLimit: " + updateLimit)
        val persistentCacheIncludesString = params.getAs[String]("persistentCacheIncludes")
    val persistentCacheIncludes = if("multi" == "default" || "multi" == "csv") {
      persistentCacheIncludesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("persistentCacheIncludes: " + persistentCacheIncludes)
            val leaseCheckMode = params.getAs[String]("leaseCheckMode")

    //println("leaseCheckMode: " + leaseCheckMode)
  }

  

  val orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreOperation = (apiOperation[OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo]("orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("persistentCacheIncludes").description("").optional)
  )

  post("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreServicePreset", operation(orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val persistentCacheIncludesString = params.getAs[String]("persistentCacheIncludes")
    val persistentCacheIncludes = if("multi" == "default" || "multi" == "csv") {
      persistentCacheIncludesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("persistentCacheIncludes: " + persistentCacheIncludes)
  }

  

  val orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacOperation = (apiOperation[OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo]("orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("includedPaths").description("").optional, queryParam[Boolean]("enableAsyncObserver").description("").optional, queryParam[Int]("observerQueueSize").description("").optional)
  )

  post("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.secondary.SecondaryStoreCacheService", operation(orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val includedPathsString = params.getAs[String]("includedPaths")
    val includedPaths = if("multi" == "default" || "multi" == "csv") {
      includedPathsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("includedPaths: " + includedPaths)
            val enableAsyncObserver = params.getAs[Boolean]("enableAsyncObserver")

    //println("enableAsyncObserver: " + enableAsyncObserver)
            val observerQueueSize = params.getAs[Int]("observerQueueSize")

    //println("observerQueueSize: " + observerQueueSize)
  }

  

  val orgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceOperation = (apiOperation[OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo]("orgApacheJackrabbitOakPluginsIndexAsyncIndexerService")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("asyncConfigs").description("").optional, queryParam[Int]("leaseTimeOutMinutes").description("").optional, queryParam[Int]("failingIndexTimeoutSeconds").description("").optional, queryParam[Int]("errorWarnIntervalSeconds").description("").optional)
  )

  post("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.AsyncIndexerService", operation(orgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val asyncConfigsString = params.getAs[String]("asyncConfigs")
    val asyncConfigs = if("multi" == "default" || "multi" == "csv") {
      asyncConfigsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("asyncConfigs: " + asyncConfigs)
            val leaseTimeOutMinutes = params.getAs[Int]("leaseTimeOutMinutes")

    //println("leaseTimeOutMinutes: " + leaseTimeOutMinutes)
            val failingIndexTimeoutSeconds = params.getAs[Int]("failingIndexTimeoutSeconds")

    //println("failingIndexTimeoutSeconds: " + failingIndexTimeoutSeconds)
            val errorWarnIntervalSeconds = params.getAs[Int]("errorWarnIntervalSeconds")

    //println("errorWarnIntervalSeconds: " + errorWarnIntervalSeconds)
  }

  

  val orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServOperation = (apiOperation[OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo]("orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("disabled").description("").optional, queryParam[Boolean]("debug").description("").optional, queryParam[String]("localIndexDir").description("").optional, queryParam[Boolean]("enableOpenIndexAsync").description("").optional, queryParam[Int]("threadPoolSize").description("").optional, queryParam[Boolean]("prefetchIndexFiles").description("").optional, queryParam[Int]("extractedTextCacheSizeInMB").description("").optional, queryParam[Int]("extractedTextCacheExpiryInSecs").description("").optional, queryParam[Boolean]("alwaysUsePreExtractedCache").description("").optional, queryParam[Int]("booleanClauseLimit").description("").optional, queryParam[Boolean]("enableHybridIndexing").description("").optional, queryParam[Int]("hybridQueueSize").description("").optional, queryParam[Boolean]("disableStoredIndexDefinition").description("").optional, queryParam[Boolean]("deletedBlobsCollectionEnabled").description("").optional, queryParam[Int]("propIndexCleanerIntervalInSecs").description("").optional, queryParam[Boolean]("enableSingleBlobIndexFiles").description("").optional)
  )

  post("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexProviderService", operation(orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val disabled = params.getAs[Boolean]("disabled")

    //println("disabled: " + disabled)
            val debug = params.getAs[Boolean]("debug")

    //println("debug: " + debug)
            val localIndexDir = params.getAs[String]("localIndexDir")

    //println("localIndexDir: " + localIndexDir)
            val enableOpenIndexAsync = params.getAs[Boolean]("enableOpenIndexAsync")

    //println("enableOpenIndexAsync: " + enableOpenIndexAsync)
            val threadPoolSize = params.getAs[Int]("threadPoolSize")

    //println("threadPoolSize: " + threadPoolSize)
            val prefetchIndexFiles = params.getAs[Boolean]("prefetchIndexFiles")

    //println("prefetchIndexFiles: " + prefetchIndexFiles)
            val extractedTextCacheSizeInMB = params.getAs[Int]("extractedTextCacheSizeInMB")

    //println("extractedTextCacheSizeInMB: " + extractedTextCacheSizeInMB)
            val extractedTextCacheExpiryInSecs = params.getAs[Int]("extractedTextCacheExpiryInSecs")

    //println("extractedTextCacheExpiryInSecs: " + extractedTextCacheExpiryInSecs)
            val alwaysUsePreExtractedCache = params.getAs[Boolean]("alwaysUsePreExtractedCache")

    //println("alwaysUsePreExtractedCache: " + alwaysUsePreExtractedCache)
            val booleanClauseLimit = params.getAs[Int]("booleanClauseLimit")

    //println("booleanClauseLimit: " + booleanClauseLimit)
            val enableHybridIndexing = params.getAs[Boolean]("enableHybridIndexing")

    //println("enableHybridIndexing: " + enableHybridIndexing)
            val hybridQueueSize = params.getAs[Int]("hybridQueueSize")

    //println("hybridQueueSize: " + hybridQueueSize)
            val disableStoredIndexDefinition = params.getAs[Boolean]("disableStoredIndexDefinition")

    //println("disableStoredIndexDefinition: " + disableStoredIndexDefinition)
            val deletedBlobsCollectionEnabled = params.getAs[Boolean]("deletedBlobsCollectionEnabled")

    //println("deletedBlobsCollectionEnabled: " + deletedBlobsCollectionEnabled)
            val propIndexCleanerIntervalInSecs = params.getAs[Int]("propIndexCleanerIntervalInSecs")

    //println("propIndexCleanerIntervalInSecs: " + propIndexCleanerIntervalInSecs)
            val enableSingleBlobIndexFiles = params.getAs[Boolean]("enableSingleBlobIndexFiles")

    //println("enableSingleBlobIndexFiles: " + enableSingleBlobIndexFiles)
  }

  

  val orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoOperation = (apiOperation[OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo]("orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("solrPeriodhomePeriodpath").description("").optional, queryParam[String]("solrPeriodcorePeriodname").description("").optional)
  )

  post("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.EmbeddedSolrServerConfigurationProvider", operation(orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val solrPeriodhomePeriodpath = params.getAs[String]("solrPeriodhomePeriodpath")

    //println("solrPeriodhomePeriodpath: " + solrPeriodhomePeriodpath)
            val solrPeriodcorePeriodname = params.getAs[String]("solrPeriodcorePeriodname")

    //println("solrPeriodcorePeriodname: " + solrPeriodcorePeriodname)
  }

  

  val orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersOperation = (apiOperation[OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo]("orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("enabled").description("").optional)
  )

  post("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.NodeStateSolrServersObserverService", operation(orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val enabled = params.getAs[Boolean]("enabled")

    //println("enabled: " + enabled)
  }

  

  val orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationOperation = (apiOperation[OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo]("orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("pathPerioddescPeriodfield").description("").optional, queryParam[String]("pathPeriodchildPeriodfield").description("").optional, queryParam[String]("pathPeriodparentPeriodfield").description("").optional, queryParam[String]("pathPeriodexactPeriodfield").description("").optional, queryParam[String]("catchPeriodallPeriodfield").description("").optional, queryParam[String]("collapsedPeriodpathPeriodfield").description("").optional, queryParam[String]("pathPerioddepthPeriodfield").description("").optional, queryParam[String]("commitPeriodpolicy").description("").optional, queryParam[Int]("rows").description("").optional, queryParam[Boolean]("pathPeriodrestrictions").description("").optional, queryParam[Boolean]("propertyPeriodrestrictions").description("").optional, queryParam[Boolean]("primarytypesPeriodrestrictions").description("").optional, queryParam[List[String]]("ignoredPeriodproperties").description("").optional, queryParam[List[String]]("usedPeriodproperties").description("").optional, queryParam[List[String]]("typePeriodmappings").description("").optional, queryParam[List[String]]("propertyPeriodmappings").description("").optional, queryParam[Boolean]("collapsePeriodjcrcontentPeriodnodes").description("").optional)
  )

  post("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.OakSolrConfigurationProviderService", operation(orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val pathPerioddescPeriodfield = params.getAs[String]("pathPerioddescPeriodfield")

    //println("pathPerioddescPeriodfield: " + pathPerioddescPeriodfield)
            val pathPeriodchildPeriodfield = params.getAs[String]("pathPeriodchildPeriodfield")

    //println("pathPeriodchildPeriodfield: " + pathPeriodchildPeriodfield)
            val pathPeriodparentPeriodfield = params.getAs[String]("pathPeriodparentPeriodfield")

    //println("pathPeriodparentPeriodfield: " + pathPeriodparentPeriodfield)
            val pathPeriodexactPeriodfield = params.getAs[String]("pathPeriodexactPeriodfield")

    //println("pathPeriodexactPeriodfield: " + pathPeriodexactPeriodfield)
            val catchPeriodallPeriodfield = params.getAs[String]("catchPeriodallPeriodfield")

    //println("catchPeriodallPeriodfield: " + catchPeriodallPeriodfield)
            val collapsedPeriodpathPeriodfield = params.getAs[String]("collapsedPeriodpathPeriodfield")

    //println("collapsedPeriodpathPeriodfield: " + collapsedPeriodpathPeriodfield)
            val pathPerioddepthPeriodfield = params.getAs[String]("pathPerioddepthPeriodfield")

    //println("pathPerioddepthPeriodfield: " + pathPerioddepthPeriodfield)
            val commitPeriodpolicy = params.getAs[String]("commitPeriodpolicy")

    //println("commitPeriodpolicy: " + commitPeriodpolicy)
            val rows = params.getAs[Int]("rows")

    //println("rows: " + rows)
            val pathPeriodrestrictions = params.getAs[Boolean]("pathPeriodrestrictions")

    //println("pathPeriodrestrictions: " + pathPeriodrestrictions)
            val propertyPeriodrestrictions = params.getAs[Boolean]("propertyPeriodrestrictions")

    //println("propertyPeriodrestrictions: " + propertyPeriodrestrictions)
            val primarytypesPeriodrestrictions = params.getAs[Boolean]("primarytypesPeriodrestrictions")

    //println("primarytypesPeriodrestrictions: " + primarytypesPeriodrestrictions)
        val ignoredPeriodpropertiesString = params.getAs[String]("ignoredPeriodproperties")
    val ignoredPeriodproperties = if("multi" == "default" || "multi" == "csv") {
      ignoredPeriodpropertiesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("ignoredPeriodproperties: " + ignoredPeriodproperties)
        val usedPeriodpropertiesString = params.getAs[String]("usedPeriodproperties")
    val usedPeriodproperties = if("multi" == "default" || "multi" == "csv") {
      usedPeriodpropertiesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("usedPeriodproperties: " + usedPeriodproperties)
        val typePeriodmappingsString = params.getAs[String]("typePeriodmappings")
    val typePeriodmappings = if("multi" == "default" || "multi" == "csv") {
      typePeriodmappingsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("typePeriodmappings: " + typePeriodmappings)
        val propertyPeriodmappingsString = params.getAs[String]("propertyPeriodmappings")
    val propertyPeriodmappings = if("multi" == "default" || "multi" == "csv") {
      propertyPeriodmappingsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertyPeriodmappings: " + propertyPeriodmappings)
            val collapsePeriodjcrcontentPeriodnodes = params.getAs[Boolean]("collapsePeriodjcrcontentPeriodnodes")

    //println("collapsePeriodjcrcontentPeriodnodes: " + collapsePeriodjcrcontentPeriodnodes)
  }

  

  val orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfOperation = (apiOperation[OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo]("orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("solrPeriodhttpPeriodurl").description("").optional, queryParam[String]("solrPeriodzkPeriodhost").description("").optional, queryParam[String]("solrPeriodcollection").description("").optional, queryParam[Int]("solrPeriodsocketPeriodtimeout").description("").optional, queryParam[Int]("solrPeriodconnectionPeriodtimeout").description("").optional, queryParam[Int]("solrPeriodshardsPeriodno").description("").optional, queryParam[Int]("solrPeriodreplicationPeriodfactor").description("").optional, queryParam[String]("solrPeriodconfPerioddir").description("").optional)
  )

  post("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.RemoteSolrServerConfigurationProvider", operation(orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val solrPeriodhttpPeriodurl = params.getAs[String]("solrPeriodhttpPeriodurl")

    //println("solrPeriodhttpPeriodurl: " + solrPeriodhttpPeriodurl)
            val solrPeriodzkPeriodhost = params.getAs[String]("solrPeriodzkPeriodhost")

    //println("solrPeriodzkPeriodhost: " + solrPeriodzkPeriodhost)
            val solrPeriodcollection = params.getAs[String]("solrPeriodcollection")

    //println("solrPeriodcollection: " + solrPeriodcollection)
            val solrPeriodsocketPeriodtimeout = params.getAs[Int]("solrPeriodsocketPeriodtimeout")

    //println("solrPeriodsocketPeriodtimeout: " + solrPeriodsocketPeriodtimeout)
            val solrPeriodconnectionPeriodtimeout = params.getAs[Int]("solrPeriodconnectionPeriodtimeout")

    //println("solrPeriodconnectionPeriodtimeout: " + solrPeriodconnectionPeriodtimeout)
            val solrPeriodshardsPeriodno = params.getAs[Int]("solrPeriodshardsPeriodno")

    //println("solrPeriodshardsPeriodno: " + solrPeriodshardsPeriodno)
            val solrPeriodreplicationPeriodfactor = params.getAs[Int]("solrPeriodreplicationPeriodfactor")

    //println("solrPeriodreplicationPeriodfactor: " + solrPeriodreplicationPeriodfactor)
            val solrPeriodconfPerioddir = params.getAs[String]("solrPeriodconfPerioddir")

    //println("solrPeriodconfPerioddir: " + solrPeriodconfPerioddir)
  }

  

  val orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidOperation = (apiOperation[OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo]("orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("queryPeriodaggregation").description("").optional)
  )

  post("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrQueryIndexProviderService", operation(orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val queryPeriodaggregation = params.getAs[Boolean]("queryPeriodaggregation")

    //println("queryPeriodaggregation: " + queryPeriodaggregation)
  }

  

  val orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeOperation = (apiOperation[OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo]("orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("serverPeriodtype").description("").optional)
  )

  post("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrServerProviderService", operation(orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val serverPeriodtype = params.getAs[String]("serverPeriodtype")

    //println("serverPeriodtype: " + serverPeriodtype)
  }

  

  val orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryOperation = (apiOperation[OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo]("orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("providerType").description("").optional)
  )

  post("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.metric.StatisticsProviderFactory", operation(orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val providerType = params.getAs[String]("providerType")

    //println("providerType: " + providerType)
  }

  

  val orgApacheJackrabbitOakPluginsObservationChangeCollectorProviderOperation = (apiOperation[OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo]("orgApacheJackrabbitOakPluginsObservationChangeCollectorProvider")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("maxItems").description("").optional, queryParam[Int]("maxPathDepth").description("").optional, queryParam[Boolean]("enabled").description("").optional)
  )

  post("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.observation.ChangeCollectorProvider", operation(orgApacheJackrabbitOakPluginsObservationChangeCollectorProviderOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val maxItems = params.getAs[Int]("maxItems")

    //println("maxItems: " + maxItems)
            val maxPathDepth = params.getAs[Int]("maxPathDepth")

    //println("maxPathDepth: " + maxPathDepth)
            val enabled = params.getAs[Boolean]("enabled")

    //println("enabled: " + enabled)
  }

  

  val orgApacheJackrabbitOakQueryQueryEngineSettingsServiceOperation = (apiOperation[OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo]("orgApacheJackrabbitOakQueryQueryEngineSettingsService")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("queryLimitInMemory").description("").optional, queryParam[Int]("queryLimitReads").description("").optional, queryParam[Boolean]("queryFailTraversal").description("").optional, queryParam[Boolean]("fastQuerySize").description("").optional)
  )

  post("/system/console/configMgr/org.apache.jackrabbit.oak.query.QueryEngineSettingsService", operation(orgApacheJackrabbitOakQueryQueryEngineSettingsServiceOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val queryLimitInMemory = params.getAs[Int]("queryLimitInMemory")

    //println("queryLimitInMemory: " + queryLimitInMemory)
            val queryLimitReads = params.getAs[Int]("queryLimitReads")

    //println("queryLimitReads: " + queryLimitReads)
            val queryFailTraversal = params.getAs[Boolean]("queryFailTraversal")

    //println("queryFailTraversal: " + queryFailTraversal)
            val fastQuerySize = params.getAs[Boolean]("fastQuerySize")

    //println("fastQuerySize: " + fastQuerySize)
  }

  

  val orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigOperation = (apiOperation[OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo]("orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("orgPeriodapachePeriodjackrabbitPeriodoakPeriodauthenticationPeriodappName").description("").optional, queryParam[String]("orgPeriodapachePeriodjackrabbitPeriodoakPeriodauthenticationPeriodconfigSpiName").description("").optional)
  )

  post("/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.AuthenticationConfigurationImpl", operation(orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val orgPeriodapachePeriodjackrabbitPeriodoakPeriodauthenticationPeriodappName = params.getAs[String]("orgPeriodapachePeriodjackrabbitPeriodoakPeriodauthenticationPeriodappName")

    //println("orgPeriodapachePeriodjackrabbitPeriodoakPeriodauthenticationPeriodappName: " + orgPeriodapachePeriodjackrabbitPeriodoakPeriodauthenticationPeriodappName)
            val orgPeriodapachePeriodjackrabbitPeriodoakPeriodauthenticationPeriodconfigSpiName = params.getAs[String]("orgPeriodapachePeriodjackrabbitPeriodoakPeriodauthenticationPeriodconfigSpiName")

    //println("orgPeriodapachePeriodjackrabbitPeriodoakPeriodauthenticationPeriodconfigSpiName: " + orgPeriodapachePeriodjackrabbitPeriodoakPeriodauthenticationPeriodconfigSpiName)
  }

  

  val orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiOperation = (apiOperation[OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo]("orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("providerPeriodname").description("").optional, queryParam[String]("hostPeriodname").description("").optional, queryParam[Int]("hostPeriodport").description("").optional, queryParam[Boolean]("hostPeriodssl").description("").optional, queryParam[Boolean]("hostPeriodtls").description("").optional, queryParam[Boolean]("hostPeriodnoCertCheck").description("").optional, queryParam[String]("bindPerioddn").description("").optional, queryParam[String]("bindPeriodpassword").description("").optional, queryParam[String]("searchTimeout").description("").optional, queryParam[Int]("adminPoolPeriodmaxActive").description("").optional, queryParam[Boolean]("adminPoolPeriodlookupOnValidate").description("").optional, queryParam[Int]("userPoolPeriodmaxActive").description("").optional, queryParam[Boolean]("userPoolPeriodlookupOnValidate").description("").optional, queryParam[String]("userPeriodbaseDN").description("").optional, queryParam[List[String]]("userPeriodobjectclass").description("").optional, queryParam[String]("userPeriodidAttribute").description("").optional, queryParam[String]("userPeriodextraFilter").description("").optional, queryParam[Boolean]("userPeriodmakeDnPath").description("").optional, queryParam[String]("groupPeriodbaseDN").description("").optional, queryParam[List[String]]("groupPeriodobjectclass").description("").optional, queryParam[String]("groupPeriodnameAttribute").description("").optional, queryParam[String]("groupPeriodextraFilter").description("").optional, queryParam[Boolean]("groupPeriodmakeDnPath").description("").optional, queryParam[String]("groupPeriodmemberAttribute").description("").optional, queryParam[Boolean]("useUidForExtId").description("").optional, queryParam[List[String]]("customattributes").description("").optional)
  )

  post("/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.ldap.impl.LdapIdentityProvider", operation(orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val providerPeriodname = params.getAs[String]("providerPeriodname")

    //println("providerPeriodname: " + providerPeriodname)
            val hostPeriodname = params.getAs[String]("hostPeriodname")

    //println("hostPeriodname: " + hostPeriodname)
            val hostPeriodport = params.getAs[Int]("hostPeriodport")

    //println("hostPeriodport: " + hostPeriodport)
            val hostPeriodssl = params.getAs[Boolean]("hostPeriodssl")

    //println("hostPeriodssl: " + hostPeriodssl)
            val hostPeriodtls = params.getAs[Boolean]("hostPeriodtls")

    //println("hostPeriodtls: " + hostPeriodtls)
            val hostPeriodnoCertCheck = params.getAs[Boolean]("hostPeriodnoCertCheck")

    //println("hostPeriodnoCertCheck: " + hostPeriodnoCertCheck)
            val bindPerioddn = params.getAs[String]("bindPerioddn")

    //println("bindPerioddn: " + bindPerioddn)
            val bindPeriodpassword = params.getAs[String]("bindPeriodpassword")

    //println("bindPeriodpassword: " + bindPeriodpassword)
            val searchTimeout = params.getAs[String]("searchTimeout")

    //println("searchTimeout: " + searchTimeout)
            val adminPoolPeriodmaxActive = params.getAs[Int]("adminPoolPeriodmaxActive")

    //println("adminPoolPeriodmaxActive: " + adminPoolPeriodmaxActive)
            val adminPoolPeriodlookupOnValidate = params.getAs[Boolean]("adminPoolPeriodlookupOnValidate")

    //println("adminPoolPeriodlookupOnValidate: " + adminPoolPeriodlookupOnValidate)
            val userPoolPeriodmaxActive = params.getAs[Int]("userPoolPeriodmaxActive")

    //println("userPoolPeriodmaxActive: " + userPoolPeriodmaxActive)
            val userPoolPeriodlookupOnValidate = params.getAs[Boolean]("userPoolPeriodlookupOnValidate")

    //println("userPoolPeriodlookupOnValidate: " + userPoolPeriodlookupOnValidate)
            val userPeriodbaseDN = params.getAs[String]("userPeriodbaseDN")

    //println("userPeriodbaseDN: " + userPeriodbaseDN)
        val userPeriodobjectclassString = params.getAs[String]("userPeriodobjectclass")
    val userPeriodobjectclass = if("multi" == "default" || "multi" == "csv") {
      userPeriodobjectclassString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("userPeriodobjectclass: " + userPeriodobjectclass)
            val userPeriodidAttribute = params.getAs[String]("userPeriodidAttribute")

    //println("userPeriodidAttribute: " + userPeriodidAttribute)
            val userPeriodextraFilter = params.getAs[String]("userPeriodextraFilter")

    //println("userPeriodextraFilter: " + userPeriodextraFilter)
            val userPeriodmakeDnPath = params.getAs[Boolean]("userPeriodmakeDnPath")

    //println("userPeriodmakeDnPath: " + userPeriodmakeDnPath)
            val groupPeriodbaseDN = params.getAs[String]("groupPeriodbaseDN")

    //println("groupPeriodbaseDN: " + groupPeriodbaseDN)
        val groupPeriodobjectclassString = params.getAs[String]("groupPeriodobjectclass")
    val groupPeriodobjectclass = if("multi" == "default" || "multi" == "csv") {
      groupPeriodobjectclassString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("groupPeriodobjectclass: " + groupPeriodobjectclass)
            val groupPeriodnameAttribute = params.getAs[String]("groupPeriodnameAttribute")

    //println("groupPeriodnameAttribute: " + groupPeriodnameAttribute)
            val groupPeriodextraFilter = params.getAs[String]("groupPeriodextraFilter")

    //println("groupPeriodextraFilter: " + groupPeriodextraFilter)
            val groupPeriodmakeDnPath = params.getAs[Boolean]("groupPeriodmakeDnPath")

    //println("groupPeriodmakeDnPath: " + groupPeriodmakeDnPath)
            val groupPeriodmemberAttribute = params.getAs[String]("groupPeriodmemberAttribute")

    //println("groupPeriodmemberAttribute: " + groupPeriodmemberAttribute)
            val useUidForExtId = params.getAs[Boolean]("useUidForExtId")

    //println("useUidForExtId: " + useUidForExtId)
        val customattributesString = params.getAs[String]("customattributes")
    val customattributes = if("multi" == "default" || "multi" == "csv") {
      customattributesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("customattributes: " + customattributes)
  }

  

  val orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraOperation = (apiOperation[OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo]("orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("tokenExpiration").description("").optional, queryParam[String]("tokenLength").description("").optional, queryParam[Boolean]("tokenRefresh").description("").optional, queryParam[Int]("tokenCleanupThreshold").description("").optional, queryParam[String]("passwordHashAlgorithm").description("").optional, queryParam[Int]("passwordHashIterations").description("").optional, queryParam[Int]("passwordSaltSize").description("").optional)
  )

  post("/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.token.TokenConfigurationImpl", operation(orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val tokenExpiration = params.getAs[String]("tokenExpiration")

    //println("tokenExpiration: " + tokenExpiration)
            val tokenLength = params.getAs[String]("tokenLength")

    //println("tokenLength: " + tokenLength)
            val tokenRefresh = params.getAs[Boolean]("tokenRefresh")

    //println("tokenRefresh: " + tokenRefresh)
            val tokenCleanupThreshold = params.getAs[Int]("tokenCleanupThreshold")

    //println("tokenCleanupThreshold: " + tokenCleanupThreshold)
            val passwordHashAlgorithm = params.getAs[String]("passwordHashAlgorithm")

    //println("passwordHashAlgorithm: " + passwordHashAlgorithm)
            val passwordHashIterations = params.getAs[Int]("passwordHashIterations")

    //println("passwordHashIterations: " + passwordHashIterations)
            val passwordSaltSize = params.getAs[Int]("passwordSaltSize")

    //println("passwordSaltSize: " + passwordSaltSize)
  }

  

  val orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurOperation = (apiOperation[OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo]("orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("permissionsJr2").description("").optional, queryParam[String]("importBehavior").description("").optional, queryParam[List[String]]("readPaths").description("").optional, queryParam[List[String]]("administrativePrincipals").description("").optional, queryParam[Int]("configurationRanking").description("").optional)
  )

  post("/system/console/configMgr/org.apache.jackrabbit.oak.security.authorization.AuthorizationConfigurationImpl", operation(orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val permissionsJr2 = params.getAs[String]("permissionsJr2")

    //println("permissionsJr2: " + permissionsJr2)
            val importBehavior = params.getAs[String]("importBehavior")

    //println("importBehavior: " + importBehavior)
        val readPathsString = params.getAs[String]("readPaths")
    val readPaths = if("multi" == "default" || "multi" == "csv") {
      readPathsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("readPaths: " + readPaths)
        val administrativePrincipalsString = params.getAs[String]("administrativePrincipals")
    val administrativePrincipals = if("multi" == "default" || "multi" == "csv") {
      administrativePrincipalsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("administrativePrincipals: " + administrativePrincipals)
            val configurationRanking = params.getAs[Int]("configurationRanking")

    //println("configurationRanking: " + configurationRanking)
  }

  

  val orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiOperation = (apiOperation[OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo]("orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("requiredServicePids").description("").optional, queryParam[String]("authorizationCompositionType").description("").optional)
  )

  post("/system/console/configMgr/org.apache.jackrabbit.oak.security.internal.SecurityProviderRegistration", operation(orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val requiredServicePidsString = params.getAs[String]("requiredServicePids")
    val requiredServicePids = if("multi" == "default" || "multi" == "csv") {
      requiredServicePidsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("requiredServicePids: " + requiredServicePids)
            val authorizationCompositionType = params.getAs[String]("authorizationCompositionType")

    //println("authorizationCompositionType: " + authorizationCompositionType)
  }

  

  val orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameOperation = (apiOperation[OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo]("orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("length").description("").optional)
  )

  post("/system/console/configMgr/org.apache.jackrabbit.oak.security.user.RandomAuthorizableNodeName", operation(orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val length = params.getAs[Int]("length")

    //println("length: " + length)
  }

  

  val orgApacheJackrabbitOakSecurityUserUserConfigurationImplOperation = (apiOperation[OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo]("orgApacheJackrabbitOakSecurityUserUserConfigurationImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("usersPath").description("").optional, queryParam[String]("groupsPath").description("").optional, queryParam[String]("systemRelativePath").description("").optional, queryParam[Int]("defaultDepth").description("").optional, queryParam[String]("importBehavior").description("").optional, queryParam[String]("passwordHashAlgorithm").description("").optional, queryParam[Int]("passwordHashIterations").description("").optional, queryParam[Int]("passwordSaltSize").description("").optional, queryParam[Boolean]("omitAdminPw").description("").optional, queryParam[Boolean]("supportAutoSave").description("").optional, queryParam[Int]("passwordMaxAge").description("").optional, queryParam[Boolean]("initialPasswordChange").description("").optional, queryParam[Int]("passwordHistorySize").description("").optional, queryParam[Boolean]("passwordExpiryForAdmin").description("").optional, queryParam[Int]("cacheExpiration").description("").optional, queryParam[Boolean]("enableRFC7613UsercaseMappedProfile").description("").optional)
  )

  post("/system/console/configMgr/org.apache.jackrabbit.oak.security.user.UserConfigurationImpl", operation(orgApacheJackrabbitOakSecurityUserUserConfigurationImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val usersPath = params.getAs[String]("usersPath")

    //println("usersPath: " + usersPath)
            val groupsPath = params.getAs[String]("groupsPath")

    //println("groupsPath: " + groupsPath)
            val systemRelativePath = params.getAs[String]("systemRelativePath")

    //println("systemRelativePath: " + systemRelativePath)
            val defaultDepth = params.getAs[Int]("defaultDepth")

    //println("defaultDepth: " + defaultDepth)
            val importBehavior = params.getAs[String]("importBehavior")

    //println("importBehavior: " + importBehavior)
            val passwordHashAlgorithm = params.getAs[String]("passwordHashAlgorithm")

    //println("passwordHashAlgorithm: " + passwordHashAlgorithm)
            val passwordHashIterations = params.getAs[Int]("passwordHashIterations")

    //println("passwordHashIterations: " + passwordHashIterations)
            val passwordSaltSize = params.getAs[Int]("passwordSaltSize")

    //println("passwordSaltSize: " + passwordSaltSize)
            val omitAdminPw = params.getAs[Boolean]("omitAdminPw")

    //println("omitAdminPw: " + omitAdminPw)
            val supportAutoSave = params.getAs[Boolean]("supportAutoSave")

    //println("supportAutoSave: " + supportAutoSave)
            val passwordMaxAge = params.getAs[Int]("passwordMaxAge")

    //println("passwordMaxAge: " + passwordMaxAge)
            val initialPasswordChange = params.getAs[Boolean]("initialPasswordChange")

    //println("initialPasswordChange: " + initialPasswordChange)
            val passwordHistorySize = params.getAs[Int]("passwordHistorySize")

    //println("passwordHistorySize: " + passwordHistorySize)
            val passwordExpiryForAdmin = params.getAs[Boolean]("passwordExpiryForAdmin")

    //println("passwordExpiryForAdmin: " + passwordExpiryForAdmin)
            val cacheExpiration = params.getAs[Int]("cacheExpiration")

    //println("cacheExpiration: " + cacheExpiration)
            val enableRFC7613UsercaseMappedProfile = params.getAs[Boolean]("enableRFC7613UsercaseMappedProfile")

    //println("enableRFC7613UsercaseMappedProfile: " + enableRFC7613UsercaseMappedProfile)
  }

  

  val orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceOperation = (apiOperation[OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo]("orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("accountName").description("").optional, queryParam[String]("containerName").description("").optional, queryParam[String]("accessKey").description("").optional, queryParam[String]("rootPath").description("").optional, queryParam[String]("connectionURL").description("").optional)
  )

  post("/system/console/configMgr/org.apache.jackrabbit.oak.segment.azure.AzureSegmentStoreService", operation(orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val accountName = params.getAs[String]("accountName")

    //println("accountName: " + accountName)
            val containerName = params.getAs[String]("containerName")

    //println("containerName: " + containerName)
            val accessKey = params.getAs[String]("accessKey")

    //println("accessKey: " + accessKey)
            val rootPath = params.getAs[String]("rootPath")

    //println("rootPath: " + rootPath)
            val connectionURL = params.getAs[String]("connectionURL")

    //println("connectionURL: " + connectionURL)
  }

  

  val orgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryOperation = (apiOperation[OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo]("orgApacheJackrabbitOakSegmentSegmentNodeStoreFactory")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("repositoryPeriodhome").description("").optional, queryParam[String]("tarmkPeriodmode").description("").optional, queryParam[Int]("tarmkPeriodsize").description("").optional, queryParam[Int]("segmentCachePeriodsize").description("").optional, queryParam[Int]("stringCachePeriodsize").description("").optional, queryParam[Int]("templateCachePeriodsize").description("").optional, queryParam[Int]("stringDeduplicationCachePeriodsize").description("").optional, queryParam[Int]("templateDeduplicationCachePeriodsize").description("").optional, queryParam[Int]("nodeDeduplicationCachePeriodsize").description("").optional, queryParam[Boolean]("pauseCompaction").description("").optional, queryParam[Int]("compactionPeriodretryCount").description("").optional, queryParam[Int]("compactionPeriodforcePeriodtimeout").description("").optional, queryParam[Int]("compactionPeriodsizeDeltaEstimation").description("").optional, queryParam[Boolean]("compactionPerioddisableEstimation").description("").optional, queryParam[Int]("compactionPeriodretainedGenerations").description("").optional, queryParam[Int]("compactionPeriodmemoryThreshold").description("").optional, queryParam[Int]("compactionPeriodprogressLog").description("").optional, queryParam[Boolean]("standby").description("").optional, queryParam[Boolean]("customBlobStore").description("").optional, queryParam[Boolean]("customSegmentStore").description("").optional, queryParam[Boolean]("splitPersistence").description("").optional, queryParam[String]("repositoryPeriodbackupPerioddir").description("").optional, queryParam[Int]("blobGcMaxAgeInSecs").description("").optional, queryParam[Int]("blobTrackSnapshotIntervalInSecs").description("").optional, queryParam[String]("role").description("").optional, queryParam[Boolean]("registerDescriptors").description("").optional, queryParam[Boolean]("dispatchChanges").description("").optional)
  )

  post("/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreFactory", operation(orgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val repositoryPeriodhome = params.getAs[String]("repositoryPeriodhome")

    //println("repositoryPeriodhome: " + repositoryPeriodhome)
            val tarmkPeriodmode = params.getAs[String]("tarmkPeriodmode")

    //println("tarmkPeriodmode: " + tarmkPeriodmode)
            val tarmkPeriodsize = params.getAs[Int]("tarmkPeriodsize")

    //println("tarmkPeriodsize: " + tarmkPeriodsize)
            val segmentCachePeriodsize = params.getAs[Int]("segmentCachePeriodsize")

    //println("segmentCachePeriodsize: " + segmentCachePeriodsize)
            val stringCachePeriodsize = params.getAs[Int]("stringCachePeriodsize")

    //println("stringCachePeriodsize: " + stringCachePeriodsize)
            val templateCachePeriodsize = params.getAs[Int]("templateCachePeriodsize")

    //println("templateCachePeriodsize: " + templateCachePeriodsize)
            val stringDeduplicationCachePeriodsize = params.getAs[Int]("stringDeduplicationCachePeriodsize")

    //println("stringDeduplicationCachePeriodsize: " + stringDeduplicationCachePeriodsize)
            val templateDeduplicationCachePeriodsize = params.getAs[Int]("templateDeduplicationCachePeriodsize")

    //println("templateDeduplicationCachePeriodsize: " + templateDeduplicationCachePeriodsize)
            val nodeDeduplicationCachePeriodsize = params.getAs[Int]("nodeDeduplicationCachePeriodsize")

    //println("nodeDeduplicationCachePeriodsize: " + nodeDeduplicationCachePeriodsize)
            val pauseCompaction = params.getAs[Boolean]("pauseCompaction")

    //println("pauseCompaction: " + pauseCompaction)
            val compactionPeriodretryCount = params.getAs[Int]("compactionPeriodretryCount")

    //println("compactionPeriodretryCount: " + compactionPeriodretryCount)
            val compactionPeriodforcePeriodtimeout = params.getAs[Int]("compactionPeriodforcePeriodtimeout")

    //println("compactionPeriodforcePeriodtimeout: " + compactionPeriodforcePeriodtimeout)
            val compactionPeriodsizeDeltaEstimation = params.getAs[Int]("compactionPeriodsizeDeltaEstimation")

    //println("compactionPeriodsizeDeltaEstimation: " + compactionPeriodsizeDeltaEstimation)
            val compactionPerioddisableEstimation = params.getAs[Boolean]("compactionPerioddisableEstimation")

    //println("compactionPerioddisableEstimation: " + compactionPerioddisableEstimation)
            val compactionPeriodretainedGenerations = params.getAs[Int]("compactionPeriodretainedGenerations")

    //println("compactionPeriodretainedGenerations: " + compactionPeriodretainedGenerations)
            val compactionPeriodmemoryThreshold = params.getAs[Int]("compactionPeriodmemoryThreshold")

    //println("compactionPeriodmemoryThreshold: " + compactionPeriodmemoryThreshold)
            val compactionPeriodprogressLog = params.getAs[Int]("compactionPeriodprogressLog")

    //println("compactionPeriodprogressLog: " + compactionPeriodprogressLog)
            val standby = params.getAs[Boolean]("standby")

    //println("standby: " + standby)
            val customBlobStore = params.getAs[Boolean]("customBlobStore")

    //println("customBlobStore: " + customBlobStore)
            val customSegmentStore = params.getAs[Boolean]("customSegmentStore")

    //println("customSegmentStore: " + customSegmentStore)
            val splitPersistence = params.getAs[Boolean]("splitPersistence")

    //println("splitPersistence: " + splitPersistence)
            val repositoryPeriodbackupPerioddir = params.getAs[String]("repositoryPeriodbackupPerioddir")

    //println("repositoryPeriodbackupPerioddir: " + repositoryPeriodbackupPerioddir)
            val blobGcMaxAgeInSecs = params.getAs[Int]("blobGcMaxAgeInSecs")

    //println("blobGcMaxAgeInSecs: " + blobGcMaxAgeInSecs)
            val blobTrackSnapshotIntervalInSecs = params.getAs[Int]("blobTrackSnapshotIntervalInSecs")

    //println("blobTrackSnapshotIntervalInSecs: " + blobTrackSnapshotIntervalInSecs)
            val role = params.getAs[String]("role")

    //println("role: " + role)
            val registerDescriptors = params.getAs[Boolean]("registerDescriptors")

    //println("registerDescriptors: " + registerDescriptors)
            val dispatchChanges = params.getAs[Boolean]("dispatchChanges")

    //println("dispatchChanges: " + dispatchChanges)
  }

  

  val orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceOperation = (apiOperation[OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo]("orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("commitsTrackerWriterGroups").description("").optional)
  )

  post("/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreMonitorService", operation(orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val commitsTrackerWriterGroupsString = params.getAs[String]("commitsTrackerWriterGroups")
    val commitsTrackerWriterGroups = if("multi" == "default" || "multi" == "csv") {
      commitsTrackerWriterGroupsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("commitsTrackerWriterGroups: " + commitsTrackerWriterGroups)
  }

  

  val orgApacheJackrabbitOakSegmentSegmentNodeStoreServiceOperation = (apiOperation[OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo]("orgApacheJackrabbitOakSegmentSegmentNodeStoreService")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("repositoryPeriodhome").description("").optional, queryParam[String]("tarmkPeriodmode").description("").optional, queryParam[Int]("tarmkPeriodsize").description("").optional, queryParam[Int]("segmentCachePeriodsize").description("").optional, queryParam[Int]("stringCachePeriodsize").description("").optional, queryParam[Int]("templateCachePeriodsize").description("").optional, queryParam[Int]("stringDeduplicationCachePeriodsize").description("").optional, queryParam[Int]("templateDeduplicationCachePeriodsize").description("").optional, queryParam[Int]("nodeDeduplicationCachePeriodsize").description("").optional, queryParam[Boolean]("pauseCompaction").description("").optional, queryParam[Int]("compactionPeriodretryCount").description("").optional, queryParam[Int]("compactionPeriodforcePeriodtimeout").description("").optional, queryParam[Int]("compactionPeriodsizeDeltaEstimation").description("").optional, queryParam[Boolean]("compactionPerioddisableEstimation").description("").optional, queryParam[Int]("compactionPeriodretainedGenerations").description("").optional, queryParam[Int]("compactionPeriodmemoryThreshold").description("").optional, queryParam[Int]("compactionPeriodprogressLog").description("").optional, queryParam[Boolean]("standby").description("").optional, queryParam[Boolean]("customBlobStore").description("").optional, queryParam[Boolean]("customSegmentStore").description("").optional, queryParam[Boolean]("splitPersistence").description("").optional, queryParam[String]("repositoryPeriodbackupPerioddir").description("").optional, queryParam[Int]("blobGcMaxAgeInSecs").description("").optional, queryParam[Int]("blobTrackSnapshotIntervalInSecs").description("").optional)
  )

  post("/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreService", operation(orgApacheJackrabbitOakSegmentSegmentNodeStoreServiceOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val repositoryPeriodhome = params.getAs[String]("repositoryPeriodhome")

    //println("repositoryPeriodhome: " + repositoryPeriodhome)
            val tarmkPeriodmode = params.getAs[String]("tarmkPeriodmode")

    //println("tarmkPeriodmode: " + tarmkPeriodmode)
            val tarmkPeriodsize = params.getAs[Int]("tarmkPeriodsize")

    //println("tarmkPeriodsize: " + tarmkPeriodsize)
            val segmentCachePeriodsize = params.getAs[Int]("segmentCachePeriodsize")

    //println("segmentCachePeriodsize: " + segmentCachePeriodsize)
            val stringCachePeriodsize = params.getAs[Int]("stringCachePeriodsize")

    //println("stringCachePeriodsize: " + stringCachePeriodsize)
            val templateCachePeriodsize = params.getAs[Int]("templateCachePeriodsize")

    //println("templateCachePeriodsize: " + templateCachePeriodsize)
            val stringDeduplicationCachePeriodsize = params.getAs[Int]("stringDeduplicationCachePeriodsize")

    //println("stringDeduplicationCachePeriodsize: " + stringDeduplicationCachePeriodsize)
            val templateDeduplicationCachePeriodsize = params.getAs[Int]("templateDeduplicationCachePeriodsize")

    //println("templateDeduplicationCachePeriodsize: " + templateDeduplicationCachePeriodsize)
            val nodeDeduplicationCachePeriodsize = params.getAs[Int]("nodeDeduplicationCachePeriodsize")

    //println("nodeDeduplicationCachePeriodsize: " + nodeDeduplicationCachePeriodsize)
            val pauseCompaction = params.getAs[Boolean]("pauseCompaction")

    //println("pauseCompaction: " + pauseCompaction)
            val compactionPeriodretryCount = params.getAs[Int]("compactionPeriodretryCount")

    //println("compactionPeriodretryCount: " + compactionPeriodretryCount)
            val compactionPeriodforcePeriodtimeout = params.getAs[Int]("compactionPeriodforcePeriodtimeout")

    //println("compactionPeriodforcePeriodtimeout: " + compactionPeriodforcePeriodtimeout)
            val compactionPeriodsizeDeltaEstimation = params.getAs[Int]("compactionPeriodsizeDeltaEstimation")

    //println("compactionPeriodsizeDeltaEstimation: " + compactionPeriodsizeDeltaEstimation)
            val compactionPerioddisableEstimation = params.getAs[Boolean]("compactionPerioddisableEstimation")

    //println("compactionPerioddisableEstimation: " + compactionPerioddisableEstimation)
            val compactionPeriodretainedGenerations = params.getAs[Int]("compactionPeriodretainedGenerations")

    //println("compactionPeriodretainedGenerations: " + compactionPeriodretainedGenerations)
            val compactionPeriodmemoryThreshold = params.getAs[Int]("compactionPeriodmemoryThreshold")

    //println("compactionPeriodmemoryThreshold: " + compactionPeriodmemoryThreshold)
            val compactionPeriodprogressLog = params.getAs[Int]("compactionPeriodprogressLog")

    //println("compactionPeriodprogressLog: " + compactionPeriodprogressLog)
            val standby = params.getAs[Boolean]("standby")

    //println("standby: " + standby)
            val customBlobStore = params.getAs[Boolean]("customBlobStore")

    //println("customBlobStore: " + customBlobStore)
            val customSegmentStore = params.getAs[Boolean]("customSegmentStore")

    //println("customSegmentStore: " + customSegmentStore)
            val splitPersistence = params.getAs[Boolean]("splitPersistence")

    //println("splitPersistence: " + splitPersistence)
            val repositoryPeriodbackupPerioddir = params.getAs[String]("repositoryPeriodbackupPerioddir")

    //println("repositoryPeriodbackupPerioddir: " + repositoryPeriodbackupPerioddir)
            val blobGcMaxAgeInSecs = params.getAs[Int]("blobGcMaxAgeInSecs")

    //println("blobGcMaxAgeInSecs: " + blobGcMaxAgeInSecs)
            val blobTrackSnapshotIntervalInSecs = params.getAs[Int]("blobTrackSnapshotIntervalInSecs")

    //println("blobTrackSnapshotIntervalInSecs: " + blobTrackSnapshotIntervalInSecs)
  }

  

  val orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceOperation = (apiOperation[OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo]("orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("orgPeriodapachePeriodslingPeriodinstallerPeriodconfigurationPeriodpersist").description("").optional, queryParam[String]("mode").description("").optional, queryParam[Int]("port").description("").optional, queryParam[String]("primaryPeriodhost").description("").optional, queryParam[Int]("interval").description("").optional, queryParam[List[String]]("primaryPeriodallowedClientIpRanges").description("").optional, queryParam[Boolean]("secure").description("").optional, queryParam[Int]("standbyPeriodreadtimeout").description("").optional, queryParam[Boolean]("standbyPeriodautoclean").description("").optional)
  )

  post("/system/console/configMgr/org.apache.jackrabbit.oak.segment.standby.store.StandbyStoreService", operation(orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val orgPeriodapachePeriodslingPeriodinstallerPeriodconfigurationPeriodpersist = params.getAs[Boolean]("orgPeriodapachePeriodslingPeriodinstallerPeriodconfigurationPeriodpersist")

    //println("orgPeriodapachePeriodslingPeriodinstallerPeriodconfigurationPeriodpersist: " + orgPeriodapachePeriodslingPeriodinstallerPeriodconfigurationPeriodpersist)
            val mode = params.getAs[String]("mode")

    //println("mode: " + mode)
            val port = params.getAs[Int]("port")

    //println("port: " + port)
            val primaryPeriodhost = params.getAs[String]("primaryPeriodhost")

    //println("primaryPeriodhost: " + primaryPeriodhost)
            val interval = params.getAs[Int]("interval")

    //println("interval: " + interval)
        val primaryPeriodallowedClientIpRangesString = params.getAs[String]("primaryPeriodallowedClientIpRanges")
    val primaryPeriodallowedClientIpRanges = if("multi" == "default" || "multi" == "csv") {
      primaryPeriodallowedClientIpRangesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("primaryPeriodallowedClientIpRanges: " + primaryPeriodallowedClientIpRanges)
            val secure = params.getAs[Boolean]("secure")

    //println("secure: " + secure)
            val standbyPeriodreadtimeout = params.getAs[Int]("standbyPeriodreadtimeout")

    //println("standbyPeriodreadtimeout: " + standbyPeriodreadtimeout)
            val standbyPeriodautoclean = params.getAs[Boolean]("standbyPeriodautoclean")

    //println("standbyPeriodautoclean: " + standbyPeriodautoclean)
  }

  

  val orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeOperation = (apiOperation[OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo]("orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("handlerPeriodname").description("").optional, queryParam[String]("userPeriodexpirationTime").description("").optional, queryParam[List[String]]("userPeriodautoMembership").description("").optional, queryParam[List[String]]("userPeriodpropertyMapping").description("").optional, queryParam[String]("userPeriodpathPrefix").description("").optional, queryParam[String]("userPeriodmembershipExpTime").description("").optional, queryParam[Int]("userPeriodmembershipNestingDepth").description("").optional, queryParam[Boolean]("userPerioddynamicMembership").description("").optional, queryParam[Boolean]("userPerioddisableMissing").description("").optional, queryParam[String]("groupPeriodexpirationTime").description("").optional, queryParam[List[String]]("groupPeriodautoMembership").description("").optional, queryParam[List[String]]("groupPeriodpropertyMapping").description("").optional, queryParam[String]("groupPeriodpathPrefix").description("").optional, queryParam[Boolean]("enableRFC7613UsercaseMappedProfile").description("").optional)
  )

  post("/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.DefaultSyncHandler", operation(orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val handlerPeriodname = params.getAs[String]("handlerPeriodname")

    //println("handlerPeriodname: " + handlerPeriodname)
            val userPeriodexpirationTime = params.getAs[String]("userPeriodexpirationTime")

    //println("userPeriodexpirationTime: " + userPeriodexpirationTime)
        val userPeriodautoMembershipString = params.getAs[String]("userPeriodautoMembership")
    val userPeriodautoMembership = if("multi" == "default" || "multi" == "csv") {
      userPeriodautoMembershipString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("userPeriodautoMembership: " + userPeriodautoMembership)
        val userPeriodpropertyMappingString = params.getAs[String]("userPeriodpropertyMapping")
    val userPeriodpropertyMapping = if("multi" == "default" || "multi" == "csv") {
      userPeriodpropertyMappingString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("userPeriodpropertyMapping: " + userPeriodpropertyMapping)
            val userPeriodpathPrefix = params.getAs[String]("userPeriodpathPrefix")

    //println("userPeriodpathPrefix: " + userPeriodpathPrefix)
            val userPeriodmembershipExpTime = params.getAs[String]("userPeriodmembershipExpTime")

    //println("userPeriodmembershipExpTime: " + userPeriodmembershipExpTime)
            val userPeriodmembershipNestingDepth = params.getAs[Int]("userPeriodmembershipNestingDepth")

    //println("userPeriodmembershipNestingDepth: " + userPeriodmembershipNestingDepth)
            val userPerioddynamicMembership = params.getAs[Boolean]("userPerioddynamicMembership")

    //println("userPerioddynamicMembership: " + userPerioddynamicMembership)
            val userPerioddisableMissing = params.getAs[Boolean]("userPerioddisableMissing")

    //println("userPerioddisableMissing: " + userPerioddisableMissing)
            val groupPeriodexpirationTime = params.getAs[String]("groupPeriodexpirationTime")

    //println("groupPeriodexpirationTime: " + groupPeriodexpirationTime)
        val groupPeriodautoMembershipString = params.getAs[String]("groupPeriodautoMembership")
    val groupPeriodautoMembership = if("multi" == "default" || "multi" == "csv") {
      groupPeriodautoMembershipString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("groupPeriodautoMembership: " + groupPeriodautoMembership)
        val groupPeriodpropertyMappingString = params.getAs[String]("groupPeriodpropertyMapping")
    val groupPeriodpropertyMapping = if("multi" == "default" || "multi" == "csv") {
      groupPeriodpropertyMappingString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("groupPeriodpropertyMapping: " + groupPeriodpropertyMapping)
            val groupPeriodpathPrefix = params.getAs[String]("groupPeriodpathPrefix")

    //println("groupPeriodpathPrefix: " + groupPeriodpathPrefix)
            val enableRFC7613UsercaseMappedProfile = params.getAs[Boolean]("enableRFC7613UsercaseMappedProfile")

    //println("enableRFC7613UsercaseMappedProfile: " + enableRFC7613UsercaseMappedProfile)
  }

  

  val orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExOperation = (apiOperation[OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo]("orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("jaasPeriodranking").description("").optional, queryParam[String]("jaasPeriodcontrolFlag").description("").optional, queryParam[String]("jaasPeriodrealmName").description("").optional, queryParam[String]("idpPeriodname").description("").optional, queryParam[String]("syncPeriodhandlerName").description("").optional)
  )

  post("/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.ExternalLoginModuleFactory", operation(orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val jaasPeriodranking = params.getAs[Int]("jaasPeriodranking")

    //println("jaasPeriodranking: " + jaasPeriodranking)
            val jaasPeriodcontrolFlag = params.getAs[String]("jaasPeriodcontrolFlag")

    //println("jaasPeriodcontrolFlag: " + jaasPeriodcontrolFlag)
            val jaasPeriodrealmName = params.getAs[String]("jaasPeriodrealmName")

    //println("jaasPeriodrealmName: " + jaasPeriodrealmName)
            val idpPeriodname = params.getAs[String]("idpPeriodname")

    //println("idpPeriodname: " + idpPeriodname)
            val syncPeriodhandlerName = params.getAs[String]("syncPeriodhandlerName")

    //println("syncPeriodhandlerName: " + syncPeriodhandlerName)
  }

  

  val orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrOperation = (apiOperation[OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo]("orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("protectExternalId").description("").optional)
  )

  post("/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.principal.ExternalPrincipalConfiguration", operation(orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val protectExternalId = params.getAs[Boolean]("protectExternalId")

    //println("protectExternalId: " + protectExternalId)
  }

  

  val orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiOperation = (apiOperation[OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo]("orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("cugSupportedPaths").description("").optional, queryParam[Boolean]("cugEnabled").description("").optional, queryParam[Int]("configurationRanking").description("").optional)
  )

  post("/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugConfiguration", operation(orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val cugSupportedPathsString = params.getAs[String]("cugSupportedPaths")
    val cugSupportedPaths = if("multi" == "default" || "multi" == "csv") {
      cugSupportedPathsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("cugSupportedPaths: " + cugSupportedPaths)
            val cugEnabled = params.getAs[Boolean]("cugEnabled")

    //println("cugEnabled: " + cugEnabled)
            val configurationRanking = params.getAs[Int]("configurationRanking")

    //println("configurationRanking: " + configurationRanking)
  }

  

  val orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluOperation = (apiOperation[OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo]("orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("principalNames").description("").optional)
  )

  post("/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugExcludeImpl", operation(orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val principalNamesString = params.getAs[String]("principalNames")
    val principalNames = if("multi" == "default" || "multi" == "csv") {
      principalNamesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("principalNames: " + principalNames)
  }

  

  val orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableOperation = (apiOperation[OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo]("orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("enabledActions").description("").optional, queryParam[List[String]]("userPrivilegeNames").description("").optional, queryParam[List[String]]("groupPrivilegeNames").description("").optional, queryParam[String]("constraint").description("").optional)
  )

  post("/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.user.action.DefaultAuthorizableActionProvider", operation(orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val enabledActions = params.getAs[String]("enabledActions")

    //println("enabledActions: " + enabledActions)
        val userPrivilegeNamesString = params.getAs[String]("userPrivilegeNames")
    val userPrivilegeNames = if("multi" == "default" || "multi" == "csv") {
      userPrivilegeNamesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("userPrivilegeNames: " + userPrivilegeNames)
        val groupPrivilegeNamesString = params.getAs[String]("groupPrivilegeNames")
    val groupPrivilegeNames = if("multi" == "default" || "multi" == "csv") {
      groupPrivilegeNamesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("groupPrivilegeNames: " + groupPrivilegeNames)
            val constraint = params.getAs[String]("constraint")

    //println("constraint: " + constraint)
  }

  

  val orgApacheJackrabbitVaultPackagingImplPackagingImplOperation = (apiOperation[OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo]("orgApacheJackrabbitVaultPackagingImplPackagingImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("packageRoots").description("").optional)
  )

  post("/system/console/configMgr/org.apache.jackrabbit.vault.packaging.impl.PackagingImpl", operation(orgApacheJackrabbitVaultPackagingImplPackagingImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val packageRootsString = params.getAs[String]("packageRoots")
    val packageRoots = if("multi" == "default" || "multi" == "csv") {
      packageRootsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("packageRoots: " + packageRoots)
  }

  

  val orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryOperation = (apiOperation[OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo]("orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("homePath").description("").optional)
  )

  post("/system/console/configMgr/org.apache.jackrabbit.vault.packaging.registry.impl.FSPackageRegistry", operation(orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val homePath = params.getAs[String]("homePath")

    //println("homePath: " + homePath)
  }

  

  val orgApacheSlingAuthCoreImplLogoutServletOperation = (apiOperation[OrgApacheSlingAuthCoreImplLogoutServletInfo]("orgApacheSlingAuthCoreImplLogoutServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("slingPeriodservletPeriodmethods").description("").optional, queryParam[String]("slingPeriodservletPeriodpaths").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.auth.core.impl.LogoutServlet", operation(orgApacheSlingAuthCoreImplLogoutServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val slingPeriodservletPeriodmethodsString = params.getAs[String]("slingPeriodservletPeriodmethods")
    val slingPeriodservletPeriodmethods = if("multi" == "default" || "multi" == "csv") {
      slingPeriodservletPeriodmethodsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("slingPeriodservletPeriodmethods: " + slingPeriodservletPeriodmethods)
            val slingPeriodservletPeriodpaths = params.getAs[String]("slingPeriodservletPeriodpaths")

    //println("slingPeriodservletPeriodpaths: " + slingPeriodservletPeriodpaths)
  }

  

  val orgApacheSlingCaconfigImplConfigurationBindingsValueProviderOperation = (apiOperation[OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo]("orgApacheSlingCaconfigImplConfigurationBindingsValueProvider")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("enabled").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationBindingsValueProvider", operation(orgApacheSlingCaconfigImplConfigurationBindingsValueProviderOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val enabled = params.getAs[Boolean]("enabled")

    //println("enabled: " + enabled)
  }

  

  val orgApacheSlingCaconfigImplConfigurationResolverImplOperation = (apiOperation[OrgApacheSlingCaconfigImplConfigurationResolverImplInfo]("orgApacheSlingCaconfigImplConfigurationResolverImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("configBucketNames").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationResolverImpl", operation(orgApacheSlingCaconfigImplConfigurationResolverImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val configBucketNamesString = params.getAs[String]("configBucketNames")
    val configBucketNames = if("multi" == "default" || "multi" == "csv") {
      configBucketNamesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("configBucketNames: " + configBucketNames)
  }

  

  val orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraOperation = (apiOperation[OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo]("orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("enabled").description("").optional, queryParam[List[String]]("configPropertyInheritancePropertyNames").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationInheritanceStrategy", operation(orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val enabled = params.getAs[Boolean]("enabled")

    //println("enabled: " + enabled)
        val configPropertyInheritancePropertyNamesString = params.getAs[String]("configPropertyInheritancePropertyNames")
    val configPropertyInheritancePropertyNames = if("multi" == "default" || "multi" == "csv") {
      configPropertyInheritancePropertyNamesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("configPropertyInheritancePropertyNames: " + configPropertyInheritancePropertyNames)
  }

  

  val orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraOperation = (apiOperation[OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo]("orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("enabled").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationPersistenceStrategy", operation(orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val enabled = params.getAs[Boolean]("enabled")

    //println("enabled: " + enabled)
  }

  

  val orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviOperation = (apiOperation[OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo]("orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("description").description("").optional, queryParam[List[String]]("overrides").description("").optional, queryParam[Boolean]("enabled").description("").optional, queryParam[Int]("servicePeriodranking").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.caconfig.impl.override.OsgiConfigurationOverrideProvider", operation(orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val description = params.getAs[String]("description")

    //println("description: " + description)
        val overridesString = params.getAs[String]("overrides")
    val overrides = if("multi" == "default" || "multi" == "csv") {
      overridesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("overrides: " + overrides)
            val enabled = params.getAs[Boolean]("enabled")

    //println("enabled: " + enabled)
            val servicePeriodranking = params.getAs[Int]("servicePeriodranking")

    //println("servicePeriodranking: " + servicePeriodranking)
  }

  

  val orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveOperation = (apiOperation[OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo]("orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("enabled").description("").optional, queryParam[Int]("servicePeriodranking").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.caconfig.impl.override.SystemPropertyConfigurationOverrideProvider", operation(orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val enabled = params.getAs[Boolean]("enabled")

    //println("enabled: " + enabled)
            val servicePeriodranking = params.getAs[Int]("servicePeriodranking")

    //println("servicePeriodranking: " + servicePeriodranking)
  }

  

  val orgApacheSlingCaconfigManagementImplConfigurationManagementSettiOperation = (apiOperation[OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo]("orgApacheSlingCaconfigManagementImplConfigurationManagementSetti")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("ignorePropertyNameRegex").description("").optional, queryParam[List[String]]("configCollectionPropertiesResourceNames").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.caconfig.management.impl.ConfigurationManagementSettingsImpl", operation(orgApacheSlingCaconfigManagementImplConfigurationManagementSettiOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val ignorePropertyNameRegexString = params.getAs[String]("ignorePropertyNameRegex")
    val ignorePropertyNameRegex = if("multi" == "default" || "multi" == "csv") {
      ignorePropertyNameRegexString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("ignorePropertyNameRegex: " + ignorePropertyNameRegex)
        val configCollectionPropertiesResourceNamesString = params.getAs[String]("configCollectionPropertiesResourceNames")
    val configCollectionPropertiesResourceNames = if("multi" == "default" || "multi" == "csv") {
      configCollectionPropertiesResourceNamesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("configCollectionPropertiesResourceNames: " + configCollectionPropertiesResourceNames)
  }

  

  val orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourOperation = (apiOperation[OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo]("orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("enabled").description("").optional, queryParam[String]("configPath").description("").optional, queryParam[List[String]]("fallbackPaths").description("").optional, queryParam[List[String]]("configCollectionInheritancePropertyNames").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultConfigurationResourceResolvingStrategy", operation(orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val enabled = params.getAs[Boolean]("enabled")

    //println("enabled: " + enabled)
            val configPath = params.getAs[String]("configPath")

    //println("configPath: " + configPath)
        val fallbackPathsString = params.getAs[String]("fallbackPaths")
    val fallbackPaths = if("multi" == "default" || "multi" == "csv") {
      fallbackPathsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("fallbackPaths: " + fallbackPaths)
        val configCollectionInheritancePropertyNamesString = params.getAs[String]("configCollectionInheritancePropertyNames")
    val configCollectionInheritancePropertyNames = if("multi" == "default" || "multi" == "csv") {
      configCollectionInheritancePropertyNamesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("configCollectionInheritancePropertyNames: " + configCollectionInheritancePropertyNames)
  }

  

  val orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyOperation = (apiOperation[OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo]("orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("enabled").description("").optional, queryParam[List[String]]("configRefResourceNames").description("").optional, queryParam[List[String]]("configRefPropertyNames").description("").optional, queryParam[Int]("servicePeriodranking").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultContextPathStrategy", operation(orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val enabled = params.getAs[Boolean]("enabled")

    //println("enabled: " + enabled)
        val configRefResourceNamesString = params.getAs[String]("configRefResourceNames")
    val configRefResourceNames = if("multi" == "default" || "multi" == "csv") {
      configRefResourceNamesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("configRefResourceNames: " + configRefResourceNames)
        val configRefPropertyNamesString = params.getAs[String]("configRefPropertyNames")
    val configRefPropertyNames = if("multi" == "default" || "multi" == "csv") {
      configRefPropertyNamesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("configRefPropertyNames: " + configRefPropertyNames)
            val servicePeriodranking = params.getAs[Int]("servicePeriodranking")

    //println("servicePeriodranking: " + servicePeriodranking)
  }

  

  val orgApacheSlingCommonsHtmlInternalTagsoupHtmlParserOperation = (apiOperation[OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo]("orgApacheSlingCommonsHtmlInternalTagsoupHtmlParser")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("parserPeriodfeatures").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.commons.html.internal.TagsoupHtmlParser", operation(orgApacheSlingCommonsHtmlInternalTagsoupHtmlParserOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val parserPeriodfeaturesString = params.getAs[String]("parserPeriodfeatures")
    val parserPeriodfeatures = if("multi" == "default" || "multi" == "csv") {
      parserPeriodfeaturesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("parserPeriodfeatures: " + parserPeriodfeatures)
  }

  

  val orgApacheSlingCommonsLogLogManagerOperation = (apiOperation[OrgApacheSlingCommonsLogLogManagerInfo]("orgApacheSlingCommonsLogLogManager")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodlevel").description("").optional, queryParam[String]("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile").description("").optional, queryParam[Int]("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodnumber").description("").optional, queryParam[String]("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodsize").description("").optional, queryParam[String]("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpattern").description("").optional, queryParam[String]("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodconfigurationFile").description("").optional, queryParam[Boolean]("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpackagingDataEnabled").description("").optional, queryParam[Int]("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodmaxCallerDataDepth").description("").optional, queryParam[Int]("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodmaxOldFileCountInDump").description("").optional, queryParam[Int]("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodnumOfLines").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.commons.log.LogManager", operation(orgApacheSlingCommonsLogLogManagerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodlevel = params.getAs[String]("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodlevel")

    //println("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodlevel: " + orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodlevel)
            val orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile = params.getAs[String]("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile")

    //println("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile: " + orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile)
            val orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodnumber = params.getAs[Int]("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodnumber")

    //println("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodnumber: " + orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodnumber)
            val orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodsize = params.getAs[String]("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodsize")

    //println("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodsize: " + orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodsize)
            val orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpattern = params.getAs[String]("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpattern")

    //println("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpattern: " + orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpattern)
            val orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodconfigurationFile = params.getAs[String]("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodconfigurationFile")

    //println("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodconfigurationFile: " + orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodconfigurationFile)
            val orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpackagingDataEnabled = params.getAs[Boolean]("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpackagingDataEnabled")

    //println("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpackagingDataEnabled: " + orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpackagingDataEnabled)
            val orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodmaxCallerDataDepth = params.getAs[Int]("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodmaxCallerDataDepth")

    //println("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodmaxCallerDataDepth: " + orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodmaxCallerDataDepth)
            val orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodmaxOldFileCountInDump = params.getAs[Int]("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodmaxOldFileCountInDump")

    //println("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodmaxOldFileCountInDump: " + orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodmaxOldFileCountInDump)
            val orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodnumOfLines = params.getAs[Int]("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodnumOfLines")

    //println("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodnumOfLines: " + orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodnumOfLines)
  }

  

  val orgApacheSlingCommonsLogLogManagerFactoryConfigOperation = (apiOperation[OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo]("orgApacheSlingCommonsLogLogManagerFactoryConfig")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodlevel").description("").optional, queryParam[String]("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile").description("").optional, queryParam[String]("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpattern").description("").optional, queryParam[List[String]]("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodnames").description("").optional, queryParam[Boolean]("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodadditiv").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.commons.log.LogManager.factory.config", operation(orgApacheSlingCommonsLogLogManagerFactoryConfigOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodlevel = params.getAs[String]("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodlevel")

    //println("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodlevel: " + orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodlevel)
            val orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile = params.getAs[String]("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile")

    //println("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile: " + orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile)
            val orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpattern = params.getAs[String]("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpattern")

    //println("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpattern: " + orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpattern)
        val orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodnamesString = params.getAs[String]("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodnames")
    val orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodnames = if("multi" == "default" || "multi" == "csv") {
      orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodnamesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodnames: " + orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodnames)
            val orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodadditiv = params.getAs[Boolean]("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodadditiv")

    //println("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodadditiv: " + orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodadditiv)
  }

  

  val orgApacheSlingCommonsLogLogManagerFactoryWriterOperation = (apiOperation[OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo]("orgApacheSlingCommonsLogLogManagerFactoryWriter")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile").description("").optional, queryParam[Int]("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodnumber").description("").optional, queryParam[String]("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodsize").description("").optional, queryParam[Boolean]("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodbuffered").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.commons.log.LogManager.factory.writer", operation(orgApacheSlingCommonsLogLogManagerFactoryWriterOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile = params.getAs[String]("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile")

    //println("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile: " + orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile)
            val orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodnumber = params.getAs[Int]("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodnumber")

    //println("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodnumber: " + orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodnumber)
            val orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodsize = params.getAs[String]("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodsize")

    //println("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodsize: " + orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodsize)
            val orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodbuffered = params.getAs[Boolean]("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodbuffered")

    //println("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodbuffered: " + orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodbuffered)
  }

  

  val orgApacheSlingCommonsMetricsInternalLogReporterOperation = (apiOperation[OrgApacheSlingCommonsMetricsInternalLogReporterInfo]("orgApacheSlingCommonsMetricsInternalLogReporter")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("period").description("").optional, queryParam[String]("timeUnit").description("").optional, queryParam[String]("level").description("").optional, queryParam[String]("loggerName").description("").optional, queryParam[String]("prefix").description("").optional, queryParam[String]("pattern").description("").optional, queryParam[String]("registryName").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.commons.metrics.internal.LogReporter", operation(orgApacheSlingCommonsMetricsInternalLogReporterOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val period = params.getAs[Int]("period")

    //println("period: " + period)
            val timeUnit = params.getAs[String]("timeUnit")

    //println("timeUnit: " + timeUnit)
            val level = params.getAs[String]("level")

    //println("level: " + level)
            val loggerName = params.getAs[String]("loggerName")

    //println("loggerName: " + loggerName)
            val prefix = params.getAs[String]("prefix")

    //println("prefix: " + prefix)
            val pattern = params.getAs[String]("pattern")

    //println("pattern: " + pattern)
            val registryName = params.getAs[String]("registryName")

    //println("registryName: " + registryName)
  }

  

  val orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterOperation = (apiOperation[OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo]("orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("datasources").description("").optional, queryParam[Int]("step").description("").optional, queryParam[List[String]]("archives").description("").optional, queryParam[String]("path").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.commons.metrics.rrd4j.impl.CodahaleMetricsReporter", operation(orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val datasourcesString = params.getAs[String]("datasources")
    val datasources = if("multi" == "default" || "multi" == "csv") {
      datasourcesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("datasources: " + datasources)
            val step = params.getAs[Int]("step")

    //println("step: " + step)
        val archivesString = params.getAs[String]("archives")
    val archives = if("multi" == "default" || "multi" == "csv") {
      archivesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("archives: " + archives)
            val path = params.getAs[String]("path")

    //println("path: " + path)
  }

  

  val orgApacheSlingCommonsMimeInternalMimeTypeServiceImplOperation = (apiOperation[OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo]("orgApacheSlingCommonsMimeInternalMimeTypeServiceImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("mimePeriodtypes").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.commons.mime.internal.MimeTypeServiceImpl", operation(orgApacheSlingCommonsMimeInternalMimeTypeServiceImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val mimePeriodtypesString = params.getAs[String]("mimePeriodtypes")
    val mimePeriodtypes = if("multi" == "default" || "multi" == "csv") {
      mimePeriodtypesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("mimePeriodtypes: " + mimePeriodtypes)
  }

  

  val orgApacheSlingCommonsSchedulerImplQuartzSchedulerOperation = (apiOperation[OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo]("orgApacheSlingCommonsSchedulerImplQuartzScheduler")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("poolName").description("").optional, queryParam[List[String]]("allowedPoolNames").description("").optional, queryParam[Boolean]("schedulerPerioduseleaderforsingle").description("").optional, queryParam[List[String]]("metricsPeriodfilters").description("").optional, queryParam[Int]("slowThresholdMillis").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.commons.scheduler.impl.QuartzScheduler", operation(orgApacheSlingCommonsSchedulerImplQuartzSchedulerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val poolName = params.getAs[String]("poolName")

    //println("poolName: " + poolName)
        val allowedPoolNamesString = params.getAs[String]("allowedPoolNames")
    val allowedPoolNames = if("multi" == "default" || "multi" == "csv") {
      allowedPoolNamesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("allowedPoolNames: " + allowedPoolNames)
            val schedulerPerioduseleaderforsingle = params.getAs[Boolean]("schedulerPerioduseleaderforsingle")

    //println("schedulerPerioduseleaderforsingle: " + schedulerPerioduseleaderforsingle)
        val metricsPeriodfiltersString = params.getAs[String]("metricsPeriodfilters")
    val metricsPeriodfilters = if("multi" == "default" || "multi" == "csv") {
      metricsPeriodfiltersString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("metricsPeriodfilters: " + metricsPeriodfilters)
            val slowThresholdMillis = params.getAs[Int]("slowThresholdMillis")

    //println("slowThresholdMillis: " + slowThresholdMillis)
  }

  

  val orgApacheSlingCommonsSchedulerImplSchedulerHealthCheckOperation = (apiOperation[OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo]("orgApacheSlingCommonsSchedulerImplSchedulerHealthCheck")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("maxPeriodquartzJobPerioddurationPeriodacceptable").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.commons.scheduler.impl.SchedulerHealthCheck", operation(orgApacheSlingCommonsSchedulerImplSchedulerHealthCheckOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val maxPeriodquartzJobPerioddurationPeriodacceptable = params.getAs[Int]("maxPeriodquartzJobPerioddurationPeriodacceptable")

    //println("maxPeriodquartzJobPerioddurationPeriodacceptable: " + maxPeriodquartzJobPerioddurationPeriodacceptable)
  }

  

  val orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryOperation = (apiOperation[OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo]("orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("name").description("").optional, queryParam[Int]("minPoolSize").description("").optional, queryParam[Int]("maxPoolSize").description("").optional, queryParam[Int]("queueSize").description("").optional, queryParam[Int]("maxThreadAge").description("").optional, queryParam[Int]("keepAliveTime").description("").optional, queryParam[String]("blockPolicy").description("").optional, queryParam[Boolean]("shutdownGraceful").description("").optional, queryParam[Boolean]("daemon").description("").optional, queryParam[Int]("shutdownWaitTime").description("").optional, queryParam[String]("priority").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.commons.threads.impl.DefaultThreadPool.factory", operation(orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val name = params.getAs[String]("name")

    //println("name: " + name)
            val minPoolSize = params.getAs[Int]("minPoolSize")

    //println("minPoolSize: " + minPoolSize)
            val maxPoolSize = params.getAs[Int]("maxPoolSize")

    //println("maxPoolSize: " + maxPoolSize)
            val queueSize = params.getAs[Int]("queueSize")

    //println("queueSize: " + queueSize)
            val maxThreadAge = params.getAs[Int]("maxThreadAge")

    //println("maxThreadAge: " + maxThreadAge)
            val keepAliveTime = params.getAs[Int]("keepAliveTime")

    //println("keepAliveTime: " + keepAliveTime)
            val blockPolicy = params.getAs[String]("blockPolicy")

    //println("blockPolicy: " + blockPolicy)
            val shutdownGraceful = params.getAs[Boolean]("shutdownGraceful")

    //println("shutdownGraceful: " + shutdownGraceful)
            val daemon = params.getAs[Boolean]("daemon")

    //println("daemon: " + daemon)
            val shutdownWaitTime = params.getAs[Int]("shutdownWaitTime")

    //println("shutdownWaitTime: " + shutdownWaitTime)
            val priority = params.getAs[String]("priority")

    //println("priority: " + priority)
  }

  

  val orgApacheSlingDatasourceDataSourceFactoryOperation = (apiOperation[OrgApacheSlingDatasourceDataSourceFactoryInfo]("orgApacheSlingDatasourceDataSourceFactory")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("datasourcePeriodname").description("").optional, queryParam[String]("datasourcePeriodsvcPeriodpropPeriodname").description("").optional, queryParam[String]("driverClassName").description("").optional, queryParam[String]("url").description("").optional, queryParam[String]("username").description("").optional, queryParam[String]("password").description("").optional, queryParam[String]("defaultAutoCommit").description("").optional, queryParam[String]("defaultReadOnly").description("").optional, queryParam[String]("defaultTransactionIsolation").description("").optional, queryParam[String]("defaultCatalog").description("").optional, queryParam[Int]("maxActive").description("").optional, queryParam[Int]("maxIdle").description("").optional, queryParam[Int]("minIdle").description("").optional, queryParam[Int]("initialSize").description("").optional, queryParam[Int]("maxWait").description("").optional, queryParam[Int]("maxAge").description("").optional, queryParam[Boolean]("testOnBorrow").description("").optional, queryParam[Boolean]("testOnReturn").description("").optional, queryParam[Boolean]("testWhileIdle").description("").optional, queryParam[String]("validationQuery").description("").optional, queryParam[Int]("validationQueryTimeout").description("").optional, queryParam[Int]("timeBetweenEvictionRunsMillis").description("").optional, queryParam[Int]("minEvictableIdleTimeMillis").description("").optional, queryParam[String]("connectionProperties").description("").optional, queryParam[String]("initSQL").description("").optional, queryParam[String]("jdbcInterceptors").description("").optional, queryParam[Int]("validationInterval").description("").optional, queryParam[Boolean]("logValidationErrors").description("").optional, queryParam[List[String]]("datasourcePeriodsvcPeriodproperties").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.datasource.DataSourceFactory", operation(orgApacheSlingDatasourceDataSourceFactoryOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val datasourcePeriodname = params.getAs[String]("datasourcePeriodname")

    //println("datasourcePeriodname: " + datasourcePeriodname)
            val datasourcePeriodsvcPeriodpropPeriodname = params.getAs[String]("datasourcePeriodsvcPeriodpropPeriodname")

    //println("datasourcePeriodsvcPeriodpropPeriodname: " + datasourcePeriodsvcPeriodpropPeriodname)
            val driverClassName = params.getAs[String]("driverClassName")

    //println("driverClassName: " + driverClassName)
            val url = params.getAs[String]("url")

    //println("url: " + url)
            val username = params.getAs[String]("username")

    //println("username: " + username)
            val password = params.getAs[String]("password")

    //println("password: " + password)
            val defaultAutoCommit = params.getAs[String]("defaultAutoCommit")

    //println("defaultAutoCommit: " + defaultAutoCommit)
            val defaultReadOnly = params.getAs[String]("defaultReadOnly")

    //println("defaultReadOnly: " + defaultReadOnly)
            val defaultTransactionIsolation = params.getAs[String]("defaultTransactionIsolation")

    //println("defaultTransactionIsolation: " + defaultTransactionIsolation)
            val defaultCatalog = params.getAs[String]("defaultCatalog")

    //println("defaultCatalog: " + defaultCatalog)
            val maxActive = params.getAs[Int]("maxActive")

    //println("maxActive: " + maxActive)
            val maxIdle = params.getAs[Int]("maxIdle")

    //println("maxIdle: " + maxIdle)
            val minIdle = params.getAs[Int]("minIdle")

    //println("minIdle: " + minIdle)
            val initialSize = params.getAs[Int]("initialSize")

    //println("initialSize: " + initialSize)
            val maxWait = params.getAs[Int]("maxWait")

    //println("maxWait: " + maxWait)
            val maxAge = params.getAs[Int]("maxAge")

    //println("maxAge: " + maxAge)
            val testOnBorrow = params.getAs[Boolean]("testOnBorrow")

    //println("testOnBorrow: " + testOnBorrow)
            val testOnReturn = params.getAs[Boolean]("testOnReturn")

    //println("testOnReturn: " + testOnReturn)
            val testWhileIdle = params.getAs[Boolean]("testWhileIdle")

    //println("testWhileIdle: " + testWhileIdle)
            val validationQuery = params.getAs[String]("validationQuery")

    //println("validationQuery: " + validationQuery)
            val validationQueryTimeout = params.getAs[Int]("validationQueryTimeout")

    //println("validationQueryTimeout: " + validationQueryTimeout)
            val timeBetweenEvictionRunsMillis = params.getAs[Int]("timeBetweenEvictionRunsMillis")

    //println("timeBetweenEvictionRunsMillis: " + timeBetweenEvictionRunsMillis)
            val minEvictableIdleTimeMillis = params.getAs[Int]("minEvictableIdleTimeMillis")

    //println("minEvictableIdleTimeMillis: " + minEvictableIdleTimeMillis)
            val connectionProperties = params.getAs[String]("connectionProperties")

    //println("connectionProperties: " + connectionProperties)
            val initSQL = params.getAs[String]("initSQL")

    //println("initSQL: " + initSQL)
            val jdbcInterceptors = params.getAs[String]("jdbcInterceptors")

    //println("jdbcInterceptors: " + jdbcInterceptors)
            val validationInterval = params.getAs[Int]("validationInterval")

    //println("validationInterval: " + validationInterval)
            val logValidationErrors = params.getAs[Boolean]("logValidationErrors")

    //println("logValidationErrors: " + logValidationErrors)
        val datasourcePeriodsvcPeriodpropertiesString = params.getAs[String]("datasourcePeriodsvcPeriodproperties")
    val datasourcePeriodsvcPeriodproperties = if("multi" == "default" || "multi" == "csv") {
      datasourcePeriodsvcPeriodpropertiesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("datasourcePeriodsvcPeriodproperties: " + datasourcePeriodsvcPeriodproperties)
  }

  

  val orgApacheSlingDatasourceJNDIDataSourceFactoryOperation = (apiOperation[OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo]("orgApacheSlingDatasourceJNDIDataSourceFactory")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("datasourcePeriodname").description("").optional, queryParam[String]("datasourcePeriodsvcPeriodpropPeriodname").description("").optional, queryParam[String]("datasourcePeriodjndiPeriodname").description("").optional, queryParam[List[String]]("jndiPeriodproperties").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.datasource.JNDIDataSourceFactory", operation(orgApacheSlingDatasourceJNDIDataSourceFactoryOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val datasourcePeriodname = params.getAs[String]("datasourcePeriodname")

    //println("datasourcePeriodname: " + datasourcePeriodname)
            val datasourcePeriodsvcPeriodpropPeriodname = params.getAs[String]("datasourcePeriodsvcPeriodpropPeriodname")

    //println("datasourcePeriodsvcPeriodpropPeriodname: " + datasourcePeriodsvcPeriodpropPeriodname)
            val datasourcePeriodjndiPeriodname = params.getAs[String]("datasourcePeriodjndiPeriodname")

    //println("datasourcePeriodjndiPeriodname: " + datasourcePeriodjndiPeriodname)
        val jndiPeriodpropertiesString = params.getAs[String]("jndiPeriodproperties")
    val jndiPeriodproperties = if("multi" == "default" || "multi" == "csv") {
      jndiPeriodpropertiesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("jndiPeriodproperties: " + jndiPeriodproperties)
  }

  

  val orgApacheSlingDiscoveryOakConfigOperation = (apiOperation[OrgApacheSlingDiscoveryOakConfigInfo]("orgApacheSlingDiscoveryOakConfig")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("connectorPingTimeout").description("").optional, queryParam[Int]("connectorPingInterval").description("").optional, queryParam[Int]("discoveryLiteCheckInterval").description("").optional, queryParam[Int]("clusterSyncServiceTimeout").description("").optional, queryParam[Int]("clusterSyncServiceInterval").description("").optional, queryParam[Boolean]("enableSyncToken").description("").optional, queryParam[Int]("minEventDelay").description("").optional, queryParam[Int]("socketConnectTimeout").description("").optional, queryParam[Int]("soTimeout").description("").optional, queryParam[List[String]]("topologyConnectorUrls").description("").optional, queryParam[List[String]]("topologyConnectorWhitelist").description("").optional, queryParam[Boolean]("autoStopLocalLoopEnabled").description("").optional, queryParam[Boolean]("gzipConnectorRequestsEnabled").description("").optional, queryParam[Boolean]("hmacEnabled").description("").optional, queryParam[Boolean]("enableEncryption").description("").optional, queryParam[String]("sharedKey").description("").optional, queryParam[Int]("hmacSharedKeyTTL").description("").optional, queryParam[String]("backoffStandbyFactor").description("").optional, queryParam[String]("backoffStableFactor").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.discovery.oak.Config", operation(orgApacheSlingDiscoveryOakConfigOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val connectorPingTimeout = params.getAs[Int]("connectorPingTimeout")

    //println("connectorPingTimeout: " + connectorPingTimeout)
            val connectorPingInterval = params.getAs[Int]("connectorPingInterval")

    //println("connectorPingInterval: " + connectorPingInterval)
            val discoveryLiteCheckInterval = params.getAs[Int]("discoveryLiteCheckInterval")

    //println("discoveryLiteCheckInterval: " + discoveryLiteCheckInterval)
            val clusterSyncServiceTimeout = params.getAs[Int]("clusterSyncServiceTimeout")

    //println("clusterSyncServiceTimeout: " + clusterSyncServiceTimeout)
            val clusterSyncServiceInterval = params.getAs[Int]("clusterSyncServiceInterval")

    //println("clusterSyncServiceInterval: " + clusterSyncServiceInterval)
            val enableSyncToken = params.getAs[Boolean]("enableSyncToken")

    //println("enableSyncToken: " + enableSyncToken)
            val minEventDelay = params.getAs[Int]("minEventDelay")

    //println("minEventDelay: " + minEventDelay)
            val socketConnectTimeout = params.getAs[Int]("socketConnectTimeout")

    //println("socketConnectTimeout: " + socketConnectTimeout)
            val soTimeout = params.getAs[Int]("soTimeout")

    //println("soTimeout: " + soTimeout)
        val topologyConnectorUrlsString = params.getAs[String]("topologyConnectorUrls")
    val topologyConnectorUrls = if("multi" == "default" || "multi" == "csv") {
      topologyConnectorUrlsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("topologyConnectorUrls: " + topologyConnectorUrls)
        val topologyConnectorWhitelistString = params.getAs[String]("topologyConnectorWhitelist")
    val topologyConnectorWhitelist = if("multi" == "default" || "multi" == "csv") {
      topologyConnectorWhitelistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("topologyConnectorWhitelist: " + topologyConnectorWhitelist)
            val autoStopLocalLoopEnabled = params.getAs[Boolean]("autoStopLocalLoopEnabled")

    //println("autoStopLocalLoopEnabled: " + autoStopLocalLoopEnabled)
            val gzipConnectorRequestsEnabled = params.getAs[Boolean]("gzipConnectorRequestsEnabled")

    //println("gzipConnectorRequestsEnabled: " + gzipConnectorRequestsEnabled)
            val hmacEnabled = params.getAs[Boolean]("hmacEnabled")

    //println("hmacEnabled: " + hmacEnabled)
            val enableEncryption = params.getAs[Boolean]("enableEncryption")

    //println("enableEncryption: " + enableEncryption)
            val sharedKey = params.getAs[String]("sharedKey")

    //println("sharedKey: " + sharedKey)
            val hmacSharedKeyTTL = params.getAs[Int]("hmacSharedKeyTTL")

    //println("hmacSharedKeyTTL: " + hmacSharedKeyTTL)
            val backoffStandbyFactor = params.getAs[String]("backoffStandbyFactor")

    //println("backoffStandbyFactor: " + backoffStandbyFactor)
            val backoffStableFactor = params.getAs[String]("backoffStableFactor")

    //println("backoffStableFactor: " + backoffStableFactor)
  }

  

  val orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckOperation = (apiOperation[OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo]("orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("hcPeriodname").description("").optional, queryParam[List[String]]("hcPeriodtags").description("").optional, queryParam[String]("hcPeriodmbeanPeriodname").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.discovery.oak.SynchronizedClocksHealthCheck", operation(orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val hcPeriodname = params.getAs[String]("hcPeriodname")

    //println("hcPeriodname: " + hcPeriodname)
        val hcPeriodtagsString = params.getAs[String]("hcPeriodtags")
    val hcPeriodtags = if("multi" == "default" || "multi" == "csv") {
      hcPeriodtagsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("hcPeriodtags: " + hcPeriodtags)
            val hcPeriodmbeanPeriodname = params.getAs[String]("hcPeriodmbeanPeriodname")

    //println("hcPeriodmbeanPeriodname: " + hcPeriodmbeanPeriodname)
  }

  

  val orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoOperation = (apiOperation[OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo]("orgApacheSlingDistributionAgentImplForwardDistributionAgentFacto")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("name").description("").optional, queryParam[String]("title").description("").optional, queryParam[String]("details").description("").optional, queryParam[Boolean]("enabled").description("").optional, queryParam[String]("serviceName").description("").optional, queryParam[String]("logPeriodlevel").description("").optional, queryParam[List[String]]("allowedPeriodroots").description("").optional, queryParam[Boolean]("queuePeriodprocessingPeriodenabled").description("").optional, queryParam[List[String]]("packageImporterPeriodendpoints").description("").optional, queryParam[List[String]]("passiveQueues").description("").optional, queryParam[List[String]]("priorityQueues").description("").optional, queryParam[String]("retryPeriodstrategy").description("").optional, queryParam[Int]("retryPeriodattempts").description("").optional, queryParam[String]("requestAuthorizationStrategyPeriodtarget").description("").optional, queryParam[String]("transportSecretProviderPeriodtarget").description("").optional, queryParam[String]("packageBuilderPeriodtarget").description("").optional, queryParam[String]("triggersPeriodtarget").description("").optional, queryParam[String]("queuePeriodprovider").description("").optional, queryParam[Boolean]("asyncPerioddelivery").description("").optional, queryParam[Int]("httpPeriodconnPeriodtimeout").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.distribution.agent.impl.ForwardDistributionAgentFactory", operation(orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val name = params.getAs[String]("name")

    //println("name: " + name)
            val title = params.getAs[String]("title")

    //println("title: " + title)
            val details = params.getAs[String]("details")

    //println("details: " + details)
            val enabled = params.getAs[Boolean]("enabled")

    //println("enabled: " + enabled)
            val serviceName = params.getAs[String]("serviceName")

    //println("serviceName: " + serviceName)
            val logPeriodlevel = params.getAs[String]("logPeriodlevel")

    //println("logPeriodlevel: " + logPeriodlevel)
        val allowedPeriodrootsString = params.getAs[String]("allowedPeriodroots")
    val allowedPeriodroots = if("multi" == "default" || "multi" == "csv") {
      allowedPeriodrootsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("allowedPeriodroots: " + allowedPeriodroots)
            val queuePeriodprocessingPeriodenabled = params.getAs[Boolean]("queuePeriodprocessingPeriodenabled")

    //println("queuePeriodprocessingPeriodenabled: " + queuePeriodprocessingPeriodenabled)
        val packageImporterPeriodendpointsString = params.getAs[String]("packageImporterPeriodendpoints")
    val packageImporterPeriodendpoints = if("multi" == "default" || "multi" == "csv") {
      packageImporterPeriodendpointsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("packageImporterPeriodendpoints: " + packageImporterPeriodendpoints)
        val passiveQueuesString = params.getAs[String]("passiveQueues")
    val passiveQueues = if("multi" == "default" || "multi" == "csv") {
      passiveQueuesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("passiveQueues: " + passiveQueues)
        val priorityQueuesString = params.getAs[String]("priorityQueues")
    val priorityQueues = if("multi" == "default" || "multi" == "csv") {
      priorityQueuesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("priorityQueues: " + priorityQueues)
            val retryPeriodstrategy = params.getAs[String]("retryPeriodstrategy")

    //println("retryPeriodstrategy: " + retryPeriodstrategy)
            val retryPeriodattempts = params.getAs[Int]("retryPeriodattempts")

    //println("retryPeriodattempts: " + retryPeriodattempts)
            val requestAuthorizationStrategyPeriodtarget = params.getAs[String]("requestAuthorizationStrategyPeriodtarget")

    //println("requestAuthorizationStrategyPeriodtarget: " + requestAuthorizationStrategyPeriodtarget)
            val transportSecretProviderPeriodtarget = params.getAs[String]("transportSecretProviderPeriodtarget")

    //println("transportSecretProviderPeriodtarget: " + transportSecretProviderPeriodtarget)
            val packageBuilderPeriodtarget = params.getAs[String]("packageBuilderPeriodtarget")

    //println("packageBuilderPeriodtarget: " + packageBuilderPeriodtarget)
            val triggersPeriodtarget = params.getAs[String]("triggersPeriodtarget")

    //println("triggersPeriodtarget: " + triggersPeriodtarget)
            val queuePeriodprovider = params.getAs[String]("queuePeriodprovider")

    //println("queuePeriodprovider: " + queuePeriodprovider)
            val asyncPerioddelivery = params.getAs[Boolean]("asyncPerioddelivery")

    //println("asyncPerioddelivery: " + asyncPerioddelivery)
            val httpPeriodconnPeriodtimeout = params.getAs[Int]("httpPeriodconnPeriodtimeout")

    //println("httpPeriodconnPeriodtimeout: " + httpPeriodconnPeriodtimeout)
  }

  

  val orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAOperation = (apiOperation[OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo]("orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("name").description("").optional, queryParam[String]("jcrPrivilege").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.distribution.agent.impl.PrivilegeDistributionRequestAuthorizationStrategyFactory", operation(orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val name = params.getAs[String]("name")

    //println("name: " + name)
            val jcrPrivilege = params.getAs[String]("jcrPrivilege")

    //println("jcrPrivilege: " + jcrPrivilege)
  }

  

  val orgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryOperation = (apiOperation[OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo]("orgApacheSlingDistributionAgentImplQueueDistributionAgentFactory")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("name").description("").optional, queryParam[String]("title").description("").optional, queryParam[String]("details").description("").optional, queryParam[Boolean]("enabled").description("").optional, queryParam[String]("serviceName").description("").optional, queryParam[String]("logPeriodlevel").description("").optional, queryParam[List[String]]("allowedPeriodroots").description("").optional, queryParam[String]("requestAuthorizationStrategyPeriodtarget").description("").optional, queryParam[String]("queueProviderFactoryPeriodtarget").description("").optional, queryParam[String]("packageBuilderPeriodtarget").description("").optional, queryParam[String]("triggersPeriodtarget").description("").optional, queryParam[List[String]]("priorityQueues").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.distribution.agent.impl.QueueDistributionAgentFactory", operation(orgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val name = params.getAs[String]("name")

    //println("name: " + name)
            val title = params.getAs[String]("title")

    //println("title: " + title)
            val details = params.getAs[String]("details")

    //println("details: " + details)
            val enabled = params.getAs[Boolean]("enabled")

    //println("enabled: " + enabled)
            val serviceName = params.getAs[String]("serviceName")

    //println("serviceName: " + serviceName)
            val logPeriodlevel = params.getAs[String]("logPeriodlevel")

    //println("logPeriodlevel: " + logPeriodlevel)
        val allowedPeriodrootsString = params.getAs[String]("allowedPeriodroots")
    val allowedPeriodroots = if("multi" == "default" || "multi" == "csv") {
      allowedPeriodrootsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("allowedPeriodroots: " + allowedPeriodroots)
            val requestAuthorizationStrategyPeriodtarget = params.getAs[String]("requestAuthorizationStrategyPeriodtarget")

    //println("requestAuthorizationStrategyPeriodtarget: " + requestAuthorizationStrategyPeriodtarget)
            val queueProviderFactoryPeriodtarget = params.getAs[String]("queueProviderFactoryPeriodtarget")

    //println("queueProviderFactoryPeriodtarget: " + queueProviderFactoryPeriodtarget)
            val packageBuilderPeriodtarget = params.getAs[String]("packageBuilderPeriodtarget")

    //println("packageBuilderPeriodtarget: " + packageBuilderPeriodtarget)
            val triggersPeriodtarget = params.getAs[String]("triggersPeriodtarget")

    //println("triggersPeriodtarget: " + triggersPeriodtarget)
        val priorityQueuesString = params.getAs[String]("priorityQueues")
    val priorityQueues = if("multi" == "default" || "multi" == "csv") {
      priorityQueuesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("priorityQueues: " + priorityQueues)
  }

  

  val orgApacheSlingDistributionAgentImplReverseDistributionAgentFactoOperation = (apiOperation[OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo]("orgApacheSlingDistributionAgentImplReverseDistributionAgentFacto")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("name").description("").optional, queryParam[String]("title").description("").optional, queryParam[String]("details").description("").optional, queryParam[Boolean]("enabled").description("").optional, queryParam[String]("serviceName").description("").optional, queryParam[String]("logPeriodlevel").description("").optional, queryParam[Boolean]("queuePeriodprocessingPeriodenabled").description("").optional, queryParam[List[String]]("packageExporterPeriodendpoints").description("").optional, queryParam[Int]("pullPerioditems").description("").optional, queryParam[Int]("httpPeriodconnPeriodtimeout").description("").optional, queryParam[String]("requestAuthorizationStrategyPeriodtarget").description("").optional, queryParam[String]("transportSecretProviderPeriodtarget").description("").optional, queryParam[String]("packageBuilderPeriodtarget").description("").optional, queryParam[String]("triggersPeriodtarget").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.distribution.agent.impl.ReverseDistributionAgentFactory", operation(orgApacheSlingDistributionAgentImplReverseDistributionAgentFactoOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val name = params.getAs[String]("name")

    //println("name: " + name)
            val title = params.getAs[String]("title")

    //println("title: " + title)
            val details = params.getAs[String]("details")

    //println("details: " + details)
            val enabled = params.getAs[Boolean]("enabled")

    //println("enabled: " + enabled)
            val serviceName = params.getAs[String]("serviceName")

    //println("serviceName: " + serviceName)
            val logPeriodlevel = params.getAs[String]("logPeriodlevel")

    //println("logPeriodlevel: " + logPeriodlevel)
            val queuePeriodprocessingPeriodenabled = params.getAs[Boolean]("queuePeriodprocessingPeriodenabled")

    //println("queuePeriodprocessingPeriodenabled: " + queuePeriodprocessingPeriodenabled)
        val packageExporterPeriodendpointsString = params.getAs[String]("packageExporterPeriodendpoints")
    val packageExporterPeriodendpoints = if("multi" == "default" || "multi" == "csv") {
      packageExporterPeriodendpointsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("packageExporterPeriodendpoints: " + packageExporterPeriodendpoints)
            val pullPerioditems = params.getAs[Int]("pullPerioditems")

    //println("pullPerioditems: " + pullPerioditems)
            val httpPeriodconnPeriodtimeout = params.getAs[Int]("httpPeriodconnPeriodtimeout")

    //println("httpPeriodconnPeriodtimeout: " + httpPeriodconnPeriodtimeout)
            val requestAuthorizationStrategyPeriodtarget = params.getAs[String]("requestAuthorizationStrategyPeriodtarget")

    //println("requestAuthorizationStrategyPeriodtarget: " + requestAuthorizationStrategyPeriodtarget)
            val transportSecretProviderPeriodtarget = params.getAs[String]("transportSecretProviderPeriodtarget")

    //println("transportSecretProviderPeriodtarget: " + transportSecretProviderPeriodtarget)
            val packageBuilderPeriodtarget = params.getAs[String]("packageBuilderPeriodtarget")

    //println("packageBuilderPeriodtarget: " + packageBuilderPeriodtarget)
            val triggersPeriodtarget = params.getAs[String]("triggersPeriodtarget")

    //println("triggersPeriodtarget: " + triggersPeriodtarget)
  }

  

  val orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorOperation = (apiOperation[OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo]("orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("name").description("").optional, queryParam[String]("title").description("").optional, queryParam[String]("details").description("").optional, queryParam[Boolean]("enabled").description("").optional, queryParam[String]("serviceName").description("").optional, queryParam[String]("logPeriodlevel").description("").optional, queryParam[Boolean]("queuePeriodprocessingPeriodenabled").description("").optional, queryParam[String]("packageExporterPeriodtarget").description("").optional, queryParam[String]("packageImporterPeriodtarget").description("").optional, queryParam[String]("requestAuthorizationStrategyPeriodtarget").description("").optional, queryParam[String]("triggersPeriodtarget").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.distribution.agent.impl.SimpleDistributionAgentFactory", operation(orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val name = params.getAs[String]("name")

    //println("name: " + name)
            val title = params.getAs[String]("title")

    //println("title: " + title)
            val details = params.getAs[String]("details")

    //println("details: " + details)
            val enabled = params.getAs[Boolean]("enabled")

    //println("enabled: " + enabled)
            val serviceName = params.getAs[String]("serviceName")

    //println("serviceName: " + serviceName)
            val logPeriodlevel = params.getAs[String]("logPeriodlevel")

    //println("logPeriodlevel: " + logPeriodlevel)
            val queuePeriodprocessingPeriodenabled = params.getAs[Boolean]("queuePeriodprocessingPeriodenabled")

    //println("queuePeriodprocessingPeriodenabled: " + queuePeriodprocessingPeriodenabled)
            val packageExporterPeriodtarget = params.getAs[String]("packageExporterPeriodtarget")

    //println("packageExporterPeriodtarget: " + packageExporterPeriodtarget)
            val packageImporterPeriodtarget = params.getAs[String]("packageImporterPeriodtarget")

    //println("packageImporterPeriodtarget: " + packageImporterPeriodtarget)
            val requestAuthorizationStrategyPeriodtarget = params.getAs[String]("requestAuthorizationStrategyPeriodtarget")

    //println("requestAuthorizationStrategyPeriodtarget: " + requestAuthorizationStrategyPeriodtarget)
            val triggersPeriodtarget = params.getAs[String]("triggersPeriodtarget")

    //println("triggersPeriodtarget: " + triggersPeriodtarget)
  }

  

  val orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryOperation = (apiOperation[OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo]("orgApacheSlingDistributionAgentImplSyncDistributionAgentFactory")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("name").description("").optional, queryParam[String]("title").description("").optional, queryParam[String]("details").description("").optional, queryParam[Boolean]("enabled").description("").optional, queryParam[String]("serviceName").description("").optional, queryParam[String]("logPeriodlevel").description("").optional, queryParam[Boolean]("queuePeriodprocessingPeriodenabled").description("").optional, queryParam[List[String]]("passiveQueues").description("").optional, queryParam[List[String]]("packageExporterPeriodendpoints").description("").optional, queryParam[List[String]]("packageImporterPeriodendpoints").description("").optional, queryParam[String]("retryPeriodstrategy").description("").optional, queryParam[Int]("retryPeriodattempts").description("").optional, queryParam[Int]("pullPerioditems").description("").optional, queryParam[Int]("httpPeriodconnPeriodtimeout").description("").optional, queryParam[String]("requestAuthorizationStrategyPeriodtarget").description("").optional, queryParam[String]("transportSecretProviderPeriodtarget").description("").optional, queryParam[String]("packageBuilderPeriodtarget").description("").optional, queryParam[String]("triggersPeriodtarget").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.distribution.agent.impl.SyncDistributionAgentFactory", operation(orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val name = params.getAs[String]("name")

    //println("name: " + name)
            val title = params.getAs[String]("title")

    //println("title: " + title)
            val details = params.getAs[String]("details")

    //println("details: " + details)
            val enabled = params.getAs[Boolean]("enabled")

    //println("enabled: " + enabled)
            val serviceName = params.getAs[String]("serviceName")

    //println("serviceName: " + serviceName)
            val logPeriodlevel = params.getAs[String]("logPeriodlevel")

    //println("logPeriodlevel: " + logPeriodlevel)
            val queuePeriodprocessingPeriodenabled = params.getAs[Boolean]("queuePeriodprocessingPeriodenabled")

    //println("queuePeriodprocessingPeriodenabled: " + queuePeriodprocessingPeriodenabled)
        val passiveQueuesString = params.getAs[String]("passiveQueues")
    val passiveQueues = if("multi" == "default" || "multi" == "csv") {
      passiveQueuesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("passiveQueues: " + passiveQueues)
        val packageExporterPeriodendpointsString = params.getAs[String]("packageExporterPeriodendpoints")
    val packageExporterPeriodendpoints = if("multi" == "default" || "multi" == "csv") {
      packageExporterPeriodendpointsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("packageExporterPeriodendpoints: " + packageExporterPeriodendpoints)
        val packageImporterPeriodendpointsString = params.getAs[String]("packageImporterPeriodendpoints")
    val packageImporterPeriodendpoints = if("multi" == "default" || "multi" == "csv") {
      packageImporterPeriodendpointsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("packageImporterPeriodendpoints: " + packageImporterPeriodendpoints)
            val retryPeriodstrategy = params.getAs[String]("retryPeriodstrategy")

    //println("retryPeriodstrategy: " + retryPeriodstrategy)
            val retryPeriodattempts = params.getAs[Int]("retryPeriodattempts")

    //println("retryPeriodattempts: " + retryPeriodattempts)
            val pullPerioditems = params.getAs[Int]("pullPerioditems")

    //println("pullPerioditems: " + pullPerioditems)
            val httpPeriodconnPeriodtimeout = params.getAs[Int]("httpPeriodconnPeriodtimeout")

    //println("httpPeriodconnPeriodtimeout: " + httpPeriodconnPeriodtimeout)
            val requestAuthorizationStrategyPeriodtarget = params.getAs[String]("requestAuthorizationStrategyPeriodtarget")

    //println("requestAuthorizationStrategyPeriodtarget: " + requestAuthorizationStrategyPeriodtarget)
            val transportSecretProviderPeriodtarget = params.getAs[String]("transportSecretProviderPeriodtarget")

    //println("transportSecretProviderPeriodtarget: " + transportSecretProviderPeriodtarget)
            val packageBuilderPeriodtarget = params.getAs[String]("packageBuilderPeriodtarget")

    //println("packageBuilderPeriodtarget: " + packageBuilderPeriodtarget)
            val triggersPeriodtarget = params.getAs[String]("triggersPeriodtarget")

    //println("triggersPeriodtarget: " + triggersPeriodtarget)
  }

  

  val orgApacheSlingDistributionMonitorDistributionQueueHealthCheckOperation = (apiOperation[OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo]("orgApacheSlingDistributionMonitorDistributionQueueHealthCheck")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("hcPeriodname").description("").optional, queryParam[List[String]]("hcPeriodtags").description("").optional, queryParam[String]("hcPeriodmbeanPeriodname").description("").optional, queryParam[Int]("numberOfRetriesAllowed").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.distribution.monitor.DistributionQueueHealthCheck", operation(orgApacheSlingDistributionMonitorDistributionQueueHealthCheckOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val hcPeriodname = params.getAs[String]("hcPeriodname")

    //println("hcPeriodname: " + hcPeriodname)
        val hcPeriodtagsString = params.getAs[String]("hcPeriodtags")
    val hcPeriodtags = if("multi" == "default" || "multi" == "csv") {
      hcPeriodtagsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("hcPeriodtags: " + hcPeriodtags)
            val hcPeriodmbeanPeriodname = params.getAs[String]("hcPeriodmbeanPeriodname")

    //println("hcPeriodmbeanPeriodname: " + hcPeriodmbeanPeriodname)
            val numberOfRetriesAllowed = params.getAs[Int]("numberOfRetriesAllowed")

    //println("numberOfRetriesAllowed: " + numberOfRetriesAllowed)
  }

  

  val orgApacheSlingDistributionPackagingImplExporterAgentDistributioOperation = (apiOperation[OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo]("orgApacheSlingDistributionPackagingImplExporterAgentDistributio")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("name").description("").optional, queryParam[String]("queue").description("").optional, queryParam[Boolean]("dropPeriodinvalidPerioditems").description("").optional, queryParam[String]("agentPeriodtarget").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.AgentDistributionPackageExporterFactory", operation(orgApacheSlingDistributionPackagingImplExporterAgentDistributioOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val name = params.getAs[String]("name")

    //println("name: " + name)
            val queue = params.getAs[String]("queue")

    //println("queue: " + queue)
            val dropPeriodinvalidPerioditems = params.getAs[Boolean]("dropPeriodinvalidPerioditems")

    //println("dropPeriodinvalidPerioditems: " + dropPeriodinvalidPerioditems)
            val agentPeriodtarget = params.getAs[String]("agentPeriodtarget")

    //println("agentPeriodtarget: " + agentPeriodtarget)
  }

  

  val orgApacheSlingDistributionPackagingImplExporterLocalDistributioOperation = (apiOperation[OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo]("orgApacheSlingDistributionPackagingImplExporterLocalDistributio")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("name").description("").optional, queryParam[String]("packageBuilderPeriodtarget").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.LocalDistributionPackageExporterFactory", operation(orgApacheSlingDistributionPackagingImplExporterLocalDistributioOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val name = params.getAs[String]("name")

    //println("name: " + name)
            val packageBuilderPeriodtarget = params.getAs[String]("packageBuilderPeriodtarget")

    //println("packageBuilderPeriodtarget: " + packageBuilderPeriodtarget)
  }

  

  val orgApacheSlingDistributionPackagingImplExporterRemoteDistributiOperation = (apiOperation[OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo]("orgApacheSlingDistributionPackagingImplExporterRemoteDistributi")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("name").description("").optional, queryParam[List[String]]("endpoints").description("").optional, queryParam[Int]("pullPerioditems").description("").optional, queryParam[String]("packageBuilderPeriodtarget").description("").optional, queryParam[String]("transportSecretProviderPeriodtarget").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.RemoteDistributionPackageExporterFactory", operation(orgApacheSlingDistributionPackagingImplExporterRemoteDistributiOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val name = params.getAs[String]("name")

    //println("name: " + name)
        val endpointsString = params.getAs[String]("endpoints")
    val endpoints = if("multi" == "default" || "multi" == "csv") {
      endpointsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("endpoints: " + endpoints)
            val pullPerioditems = params.getAs[Int]("pullPerioditems")

    //println("pullPerioditems: " + pullPerioditems)
            val packageBuilderPeriodtarget = params.getAs[String]("packageBuilderPeriodtarget")

    //println("packageBuilderPeriodtarget: " + packageBuilderPeriodtarget)
            val transportSecretProviderPeriodtarget = params.getAs[String]("transportSecretProviderPeriodtarget")

    //println("transportSecretProviderPeriodtarget: " + transportSecretProviderPeriodtarget)
  }

  

  val orgApacheSlingDistributionPackagingImplImporterLocalDistributioOperation = (apiOperation[OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo]("orgApacheSlingDistributionPackagingImplImporterLocalDistributio")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("name").description("").optional, queryParam[String]("packageBuilderPeriodtarget").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.LocalDistributionPackageImporterFactory", operation(orgApacheSlingDistributionPackagingImplImporterLocalDistributioOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val name = params.getAs[String]("name")

    //println("name: " + name)
            val packageBuilderPeriodtarget = params.getAs[String]("packageBuilderPeriodtarget")

    //println("packageBuilderPeriodtarget: " + packageBuilderPeriodtarget)
  }

  

  val orgApacheSlingDistributionPackagingImplImporterRemoteDistributiOperation = (apiOperation[OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo]("orgApacheSlingDistributionPackagingImplImporterRemoteDistributi")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("name").description("").optional, queryParam[List[String]]("endpoints").description("").optional, queryParam[String]("transportSecretProviderPeriodtarget").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RemoteDistributionPackageImporterFactory", operation(orgApacheSlingDistributionPackagingImplImporterRemoteDistributiOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val name = params.getAs[String]("name")

    //println("name: " + name)
        val endpointsString = params.getAs[String]("endpoints")
    val endpoints = if("multi" == "default" || "multi" == "csv") {
      endpointsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("endpoints: " + endpoints)
            val transportSecretProviderPeriodtarget = params.getAs[String]("transportSecretProviderPeriodtarget")

    //println("transportSecretProviderPeriodtarget: " + transportSecretProviderPeriodtarget)
  }

  

  val orgApacheSlingDistributionPackagingImplImporterRepositoryDistriOperation = (apiOperation[OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo]("orgApacheSlingDistributionPackagingImplImporterRepositoryDistri")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("name").description("").optional, queryParam[String]("servicePeriodname").description("").optional, queryParam[String]("path").description("").optional, queryParam[String]("privilegePeriodname").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RepositoryDistributionPackageImporterFactory", operation(orgApacheSlingDistributionPackagingImplImporterRepositoryDistriOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val name = params.getAs[String]("name")

    //println("name: " + name)
            val servicePeriodname = params.getAs[String]("servicePeriodname")

    //println("servicePeriodname: " + servicePeriodname)
            val path = params.getAs[String]("path")

    //println("path: " + path)
            val privilegePeriodname = params.getAs[String]("privilegePeriodname")

    //println("privilegePeriodname: " + privilegePeriodname)
  }

  

  val orgApacheSlingDistributionResourcesImplDistributionConfigurationOperation = (apiOperation[OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo]("orgApacheSlingDistributionResourcesImplDistributionConfiguration")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("providerPeriodroots").description("").optional, queryParam[String]("kind").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionConfigurationResourceProviderFactory", operation(orgApacheSlingDistributionResourcesImplDistributionConfigurationOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val providerPeriodroots = params.getAs[String]("providerPeriodroots")

    //println("providerPeriodroots: " + providerPeriodroots)
            val kind = params.getAs[String]("kind")

    //println("kind: " + kind)
  }

  

  val orgApacheSlingDistributionResourcesImplDistributionServiceResourOperation = (apiOperation[OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo]("orgApacheSlingDistributionResourcesImplDistributionServiceResour")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("providerPeriodroots").description("").optional, queryParam[String]("kind").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionServiceResourceProviderFactory", operation(orgApacheSlingDistributionResourcesImplDistributionServiceResourOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val providerPeriodroots = params.getAs[String]("providerPeriodroots")

    //println("providerPeriodroots: " + providerPeriodroots)
            val kind = params.getAs[String]("kind")

    //println("kind: " + kind)
  }

  

  val orgApacheSlingDistributionSerializationImplDistributionPackageBuOperation = (apiOperation[OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo]("orgApacheSlingDistributionSerializationImplDistributionPackageBu")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("name").description("").optional, queryParam[String]("`type`").description("").optional, queryParam[String]("formatPeriodtarget").description("").optional, queryParam[String]("tempFsFolder").description("").optional, queryParam[Int]("fileThreshold").description("").optional, queryParam[String]("memoryUnit").description("").optional, queryParam[Boolean]("useOffHeapMemory").description("").optional, queryParam[String]("digestAlgorithm").description("").optional, queryParam[Int]("monitoringQueueSize").description("").optional, queryParam[Int]("cleanupDelay").description("").optional, queryParam[List[String]]("packagePeriodfilters").description("").optional, queryParam[List[String]]("propertyPeriodfilters").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.distribution.serialization.impl.DistributionPackageBuilderFactory", operation(orgApacheSlingDistributionSerializationImplDistributionPackageBuOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val name = params.getAs[String]("name")

    //println("name: " + name)
            val `type` = params.getAs[String]("`type`")

    //println("`type`: " + `type`)
            val formatPeriodtarget = params.getAs[String]("formatPeriodtarget")

    //println("formatPeriodtarget: " + formatPeriodtarget)
            val tempFsFolder = params.getAs[String]("tempFsFolder")

    //println("tempFsFolder: " + tempFsFolder)
            val fileThreshold = params.getAs[Int]("fileThreshold")

    //println("fileThreshold: " + fileThreshold)
            val memoryUnit = params.getAs[String]("memoryUnit")

    //println("memoryUnit: " + memoryUnit)
            val useOffHeapMemory = params.getAs[Boolean]("useOffHeapMemory")

    //println("useOffHeapMemory: " + useOffHeapMemory)
            val digestAlgorithm = params.getAs[String]("digestAlgorithm")

    //println("digestAlgorithm: " + digestAlgorithm)
            val monitoringQueueSize = params.getAs[Int]("monitoringQueueSize")

    //println("monitoringQueueSize: " + monitoringQueueSize)
            val cleanupDelay = params.getAs[Int]("cleanupDelay")

    //println("cleanupDelay: " + cleanupDelay)
        val packagePeriodfiltersString = params.getAs[String]("packagePeriodfilters")
    val packagePeriodfilters = if("multi" == "default" || "multi" == "csv") {
      packagePeriodfiltersString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("packagePeriodfilters: " + packagePeriodfilters)
        val propertyPeriodfiltersString = params.getAs[String]("propertyPeriodfilters")
    val propertyPeriodfilters = if("multi" == "default" || "multi" == "csv") {
      propertyPeriodfiltersString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertyPeriodfilters: " + propertyPeriodfilters)
  }

  

  val orgApacheSlingDistributionSerializationImplVltVaultDistributionOperation = (apiOperation[OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo]("orgApacheSlingDistributionSerializationImplVltVaultDistribution")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("name").description("").optional, queryParam[String]("`type`").description("").optional, queryParam[String]("importMode").description("").optional, queryParam[String]("aclHandling").description("").optional, queryParam[String]("packagePeriodroots").description("").optional, queryParam[List[String]]("packagePeriodfilters").description("").optional, queryParam[List[String]]("propertyPeriodfilters").description("").optional, queryParam[String]("tempFsFolder").description("").optional, queryParam[Boolean]("useBinaryReferences").description("").optional, queryParam[Int]("autoSaveThreshold").description("").optional, queryParam[Int]("cleanupDelay").description("").optional, queryParam[Int]("fileThreshold").description("").optional, queryParam[String]("mEGABYTES").description("").optional, queryParam[Boolean]("useOffHeapMemory").description("").optional, queryParam[String]("digestAlgorithm").description("").optional, queryParam[Int]("monitoringQueueSize").description("").optional, queryParam[List[String]]("pathsMapping").description("").optional, queryParam[Boolean]("strictImport").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.distribution.serialization.impl.vlt.VaultDistributionPackageBuilderFactory", operation(orgApacheSlingDistributionSerializationImplVltVaultDistributionOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val name = params.getAs[String]("name")

    //println("name: " + name)
            val `type` = params.getAs[String]("`type`")

    //println("`type`: " + `type`)
            val importMode = params.getAs[String]("importMode")

    //println("importMode: " + importMode)
            val aclHandling = params.getAs[String]("aclHandling")

    //println("aclHandling: " + aclHandling)
            val packagePeriodroots = params.getAs[String]("packagePeriodroots")

    //println("packagePeriodroots: " + packagePeriodroots)
        val packagePeriodfiltersString = params.getAs[String]("packagePeriodfilters")
    val packagePeriodfilters = if("multi" == "default" || "multi" == "csv") {
      packagePeriodfiltersString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("packagePeriodfilters: " + packagePeriodfilters)
        val propertyPeriodfiltersString = params.getAs[String]("propertyPeriodfilters")
    val propertyPeriodfilters = if("multi" == "default" || "multi" == "csv") {
      propertyPeriodfiltersString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertyPeriodfilters: " + propertyPeriodfilters)
            val tempFsFolder = params.getAs[String]("tempFsFolder")

    //println("tempFsFolder: " + tempFsFolder)
            val useBinaryReferences = params.getAs[Boolean]("useBinaryReferences")

    //println("useBinaryReferences: " + useBinaryReferences)
            val autoSaveThreshold = params.getAs[Int]("autoSaveThreshold")

    //println("autoSaveThreshold: " + autoSaveThreshold)
            val cleanupDelay = params.getAs[Int]("cleanupDelay")

    //println("cleanupDelay: " + cleanupDelay)
            val fileThreshold = params.getAs[Int]("fileThreshold")

    //println("fileThreshold: " + fileThreshold)
            val mEGABYTES = params.getAs[String]("mEGABYTES")

    //println("mEGABYTES: " + mEGABYTES)
            val useOffHeapMemory = params.getAs[Boolean]("useOffHeapMemory")

    //println("useOffHeapMemory: " + useOffHeapMemory)
            val digestAlgorithm = params.getAs[String]("digestAlgorithm")

    //println("digestAlgorithm: " + digestAlgorithm)
            val monitoringQueueSize = params.getAs[Int]("monitoringQueueSize")

    //println("monitoringQueueSize: " + monitoringQueueSize)
        val pathsMappingString = params.getAs[String]("pathsMapping")
    val pathsMapping = if("multi" == "default" || "multi" == "csv") {
      pathsMappingString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("pathsMapping: " + pathsMapping)
            val strictImport = params.getAs[Boolean]("strictImport")

    //println("strictImport: " + strictImport)
  }

  

  val orgApacheSlingDistributionTransportImplUserCredentialsDistributiOperation = (apiOperation[OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo]("orgApacheSlingDistributionTransportImplUserCredentialsDistributi")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("name").description("").optional, queryParam[String]("username").description("").optional, queryParam[String]("password").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.distribution.transport.impl.UserCredentialsDistributionTransportSecretProvider", operation(orgApacheSlingDistributionTransportImplUserCredentialsDistributiOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val name = params.getAs[String]("name")

    //println("name: " + name)
            val username = params.getAs[String]("username")

    //println("username: " + username)
            val password = params.getAs[String]("password")

    //println("password: " + password)
  }

  

  val orgApacheSlingDistributionTriggerImplDistributionEventDistributeOperation = (apiOperation[OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo]("orgApacheSlingDistributionTriggerImplDistributionEventDistribute")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("name").description("").optional, queryParam[String]("path").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.distribution.trigger.impl.DistributionEventDistributeDistributionTriggerFactory", operation(orgApacheSlingDistributionTriggerImplDistributionEventDistributeOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val name = params.getAs[String]("name")

    //println("name: " + name)
            val path = params.getAs[String]("path")

    //println("path: " + path)
  }

  

  val orgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerOperation = (apiOperation[OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo]("orgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("name").description("").optional, queryParam[String]("path").description("").optional, queryParam[List[String]]("ignoredPathsPatterns").description("").optional, queryParam[String]("serviceName").description("").optional, queryParam[Boolean]("deep").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.distribution.trigger.impl.JcrEventDistributionTriggerFactory", operation(orgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val name = params.getAs[String]("name")

    //println("name: " + name)
            val path = params.getAs[String]("path")

    //println("path: " + path)
        val ignoredPathsPatternsString = params.getAs[String]("ignoredPathsPatterns")
    val ignoredPathsPatterns = if("multi" == "default" || "multi" == "csv") {
      ignoredPathsPatternsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("ignoredPathsPatterns: " + ignoredPathsPatterns)
            val serviceName = params.getAs[String]("serviceName")

    //println("serviceName: " + serviceName)
            val deep = params.getAs[Boolean]("deep")

    //println("deep: " + deep)
  }

  

  val orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiOperation = (apiOperation[OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo]("orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("name").description("").optional, queryParam[String]("path").description("").optional, queryParam[String]("serviceName").description("").optional, queryParam[String]("nuggetsPath").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.distribution.trigger.impl.PersistedJcrEventDistributionTriggerFactory", operation(orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val name = params.getAs[String]("name")

    //println("name: " + name)
            val path = params.getAs[String]("path")

    //println("path: " + path)
            val serviceName = params.getAs[String]("serviceName")

    //println("serviceName: " + serviceName)
            val nuggetsPath = params.getAs[String]("nuggetsPath")

    //println("nuggetsPath: " + nuggetsPath)
  }

  

  val orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigOperation = (apiOperation[OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo]("orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("name").description("").optional, queryParam[String]("endpoint").description("").optional, queryParam[String]("transportSecretProviderPeriodtarget").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.distribution.trigger.impl.RemoteEventDistributionTriggerFactory", operation(orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val name = params.getAs[String]("name")

    //println("name: " + name)
            val endpoint = params.getAs[String]("endpoint")

    //println("endpoint: " + endpoint)
            val transportSecretProviderPeriodtarget = params.getAs[String]("transportSecretProviderPeriodtarget")

    //println("transportSecretProviderPeriodtarget: " + transportSecretProviderPeriodtarget)
  }

  

  val orgApacheSlingDistributionTriggerImplResourceEventDistributionTrOperation = (apiOperation[OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo]("orgApacheSlingDistributionTriggerImplResourceEventDistributionTr")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("name").description("").optional, queryParam[String]("path").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.distribution.trigger.impl.ResourceEventDistributionTriggerFactory", operation(orgApacheSlingDistributionTriggerImplResourceEventDistributionTrOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val name = params.getAs[String]("name")

    //println("name: " + name)
            val path = params.getAs[String]("path")

    //println("path: " + path)
  }

  

  val orgApacheSlingDistributionTriggerImplScheduledDistributionTriggeOperation = (apiOperation[OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo]("orgApacheSlingDistributionTriggerImplScheduledDistributionTrigge")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("name").description("").optional, queryParam[String]("path").description("").optional, queryParam[String]("seconds").description("").optional, queryParam[String]("serviceName").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.distribution.trigger.impl.ScheduledDistributionTriggerFactory", operation(orgApacheSlingDistributionTriggerImplScheduledDistributionTriggeOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val name = params.getAs[String]("name")

    //println("name: " + name)
            val path = params.getAs[String]("path")

    //println("path: " + path)
            val seconds = params.getAs[String]("seconds")

    //println("seconds: " + seconds)
            val serviceName = params.getAs[String]("serviceName")

    //println("serviceName: " + serviceName)
  }

  

  val orgApacheSlingEngineImplAuthSlingAuthenticatorOperation = (apiOperation[OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo]("orgApacheSlingEngineImplAuthSlingAuthenticator")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect").description("").optional, queryParam[String]("osgiPeriodhttpPeriodwhiteboardPeriodlistener").description("").optional, queryParam[String]("authPeriodsudoPeriodcookie").description("").optional, queryParam[String]("authPeriodsudoPeriodparameter").description("").optional, queryParam[Boolean]("authPeriodannonymous").description("").optional, queryParam[List[String]]("slingPeriodauthPeriodrequirements").description("").optional, queryParam[String]("slingPeriodauthPeriodanonymousPerioduser").description("").optional, queryParam[String]("slingPeriodauthPeriodanonymousPeriodpassword").description("").optional, queryParam[String]("authPeriodhttp").description("").optional, queryParam[String]("authPeriodhttpPeriodrealm").description("").optional, queryParam[List[String]]("authPerioduriPeriodsuffix").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.engine.impl.auth.SlingAuthenticator", operation(orgApacheSlingEngineImplAuthSlingAuthenticatorOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect = params.getAs[String]("osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect")

    //println("osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect: " + osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect)
            val osgiPeriodhttpPeriodwhiteboardPeriodlistener = params.getAs[String]("osgiPeriodhttpPeriodwhiteboardPeriodlistener")

    //println("osgiPeriodhttpPeriodwhiteboardPeriodlistener: " + osgiPeriodhttpPeriodwhiteboardPeriodlistener)
            val authPeriodsudoPeriodcookie = params.getAs[String]("authPeriodsudoPeriodcookie")

    //println("authPeriodsudoPeriodcookie: " + authPeriodsudoPeriodcookie)
            val authPeriodsudoPeriodparameter = params.getAs[String]("authPeriodsudoPeriodparameter")

    //println("authPeriodsudoPeriodparameter: " + authPeriodsudoPeriodparameter)
            val authPeriodannonymous = params.getAs[Boolean]("authPeriodannonymous")

    //println("authPeriodannonymous: " + authPeriodannonymous)
        val slingPeriodauthPeriodrequirementsString = params.getAs[String]("slingPeriodauthPeriodrequirements")
    val slingPeriodauthPeriodrequirements = if("multi" == "default" || "multi" == "csv") {
      slingPeriodauthPeriodrequirementsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("slingPeriodauthPeriodrequirements: " + slingPeriodauthPeriodrequirements)
            val slingPeriodauthPeriodanonymousPerioduser = params.getAs[String]("slingPeriodauthPeriodanonymousPerioduser")

    //println("slingPeriodauthPeriodanonymousPerioduser: " + slingPeriodauthPeriodanonymousPerioduser)
            val slingPeriodauthPeriodanonymousPeriodpassword = params.getAs[String]("slingPeriodauthPeriodanonymousPeriodpassword")

    //println("slingPeriodauthPeriodanonymousPeriodpassword: " + slingPeriodauthPeriodanonymousPeriodpassword)
            val authPeriodhttp = params.getAs[String]("authPeriodhttp")

    //println("authPeriodhttp: " + authPeriodhttp)
            val authPeriodhttpPeriodrealm = params.getAs[String]("authPeriodhttpPeriodrealm")

    //println("authPeriodhttpPeriodrealm: " + authPeriodhttpPeriodrealm)
        val authPerioduriPeriodsuffixString = params.getAs[String]("authPerioduriPeriodsuffix")
    val authPerioduriPeriodsuffix = if("multi" == "default" || "multi" == "csv") {
      authPerioduriPeriodsuffixString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("authPerioduriPeriodsuffix: " + authPerioduriPeriodsuffix)
  }

  

  val orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterOperation = (apiOperation[OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo]("orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("extensions").description("").optional, queryParam[Int]("minDurationMs").description("").optional, queryParam[Int]("maxDurationMs").description("").optional, queryParam[Boolean]("compactLogFormat").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.engine.impl.debug.RequestProgressTrackerLogFilter", operation(orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val extensionsString = params.getAs[String]("extensions")
    val extensions = if("multi" == "default" || "multi" == "csv") {
      extensionsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("extensions: " + extensions)
            val minDurationMs = params.getAs[Int]("minDurationMs")

    //println("minDurationMs: " + minDurationMs)
            val maxDurationMs = params.getAs[Int]("maxDurationMs")

    //println("maxDurationMs: " + maxDurationMs)
            val compactLogFormat = params.getAs[Boolean]("compactLogFormat")

    //println("compactLogFormat: " + compactLogFormat)
  }

  

  val orgApacheSlingEngineImplLogRequestLoggerOperation = (apiOperation[OrgApacheSlingEngineImplLogRequestLoggerInfo]("orgApacheSlingEngineImplLogRequestLogger")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("requestPeriodlogPeriodoutput").description("").optional, queryParam[Int]("requestPeriodlogPeriodoutputtype").description("").optional, queryParam[Boolean]("requestPeriodlogPeriodenabled").description("").optional, queryParam[String]("accessPeriodlogPeriodoutput").description("").optional, queryParam[Int]("accessPeriodlogPeriodoutputtype").description("").optional, queryParam[Boolean]("accessPeriodlogPeriodenabled").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.engine.impl.log.RequestLogger", operation(orgApacheSlingEngineImplLogRequestLoggerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val requestPeriodlogPeriodoutput = params.getAs[String]("requestPeriodlogPeriodoutput")

    //println("requestPeriodlogPeriodoutput: " + requestPeriodlogPeriodoutput)
            val requestPeriodlogPeriodoutputtype = params.getAs[Int]("requestPeriodlogPeriodoutputtype")

    //println("requestPeriodlogPeriodoutputtype: " + requestPeriodlogPeriodoutputtype)
            val requestPeriodlogPeriodenabled = params.getAs[Boolean]("requestPeriodlogPeriodenabled")

    //println("requestPeriodlogPeriodenabled: " + requestPeriodlogPeriodenabled)
            val accessPeriodlogPeriodoutput = params.getAs[String]("accessPeriodlogPeriodoutput")

    //println("accessPeriodlogPeriodoutput: " + accessPeriodlogPeriodoutput)
            val accessPeriodlogPeriodoutputtype = params.getAs[Int]("accessPeriodlogPeriodoutputtype")

    //println("accessPeriodlogPeriodoutputtype: " + accessPeriodlogPeriodoutputtype)
            val accessPeriodlogPeriodenabled = params.getAs[Boolean]("accessPeriodlogPeriodenabled")

    //println("accessPeriodlogPeriodenabled: " + accessPeriodlogPeriodenabled)
  }

  

  val orgApacheSlingEngineImplLogRequestLoggerServiceOperation = (apiOperation[OrgApacheSlingEngineImplLogRequestLoggerServiceInfo]("orgApacheSlingEngineImplLogRequestLoggerService")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("requestPeriodlogPeriodservicePeriodformat").description("").optional, queryParam[String]("requestPeriodlogPeriodservicePeriodoutput").description("").optional, queryParam[Int]("requestPeriodlogPeriodservicePeriodoutputtype").description("").optional, queryParam[Boolean]("requestPeriodlogPeriodservicePeriodonentry").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.engine.impl.log.RequestLoggerService", operation(orgApacheSlingEngineImplLogRequestLoggerServiceOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val requestPeriodlogPeriodservicePeriodformat = params.getAs[String]("requestPeriodlogPeriodservicePeriodformat")

    //println("requestPeriodlogPeriodservicePeriodformat: " + requestPeriodlogPeriodservicePeriodformat)
            val requestPeriodlogPeriodservicePeriodoutput = params.getAs[String]("requestPeriodlogPeriodservicePeriodoutput")

    //println("requestPeriodlogPeriodservicePeriodoutput: " + requestPeriodlogPeriodservicePeriodoutput)
            val requestPeriodlogPeriodservicePeriodoutputtype = params.getAs[Int]("requestPeriodlogPeriodservicePeriodoutputtype")

    //println("requestPeriodlogPeriodservicePeriodoutputtype: " + requestPeriodlogPeriodservicePeriodoutputtype)
            val requestPeriodlogPeriodservicePeriodonentry = params.getAs[Boolean]("requestPeriodlogPeriodservicePeriodonentry")

    //println("requestPeriodlogPeriodservicePeriodonentry: " + requestPeriodlogPeriodservicePeriodonentry)
  }

  

  val orgApacheSlingEngineImplSlingMainServletOperation = (apiOperation[OrgApacheSlingEngineImplSlingMainServletInfo]("orgApacheSlingEngineImplSlingMainServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("slingPeriodmaxPeriodcalls").description("").optional, queryParam[Int]("slingPeriodmaxPeriodinclusions").description("").optional, queryParam[Boolean]("slingPeriodtracePeriodallow").description("").optional, queryParam[Int]("slingPeriodmaxPeriodrecordPeriodrequests").description("").optional, queryParam[List[String]]("slingPeriodstorePeriodpatternPeriodrequests").description("").optional, queryParam[String]("slingPeriodserverinfo").description("").optional, queryParam[List[String]]("slingPeriodadditionalPeriodresponsePeriodheaders").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.engine.impl.SlingMainServlet", operation(orgApacheSlingEngineImplSlingMainServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val slingPeriodmaxPeriodcalls = params.getAs[Int]("slingPeriodmaxPeriodcalls")

    //println("slingPeriodmaxPeriodcalls: " + slingPeriodmaxPeriodcalls)
            val slingPeriodmaxPeriodinclusions = params.getAs[Int]("slingPeriodmaxPeriodinclusions")

    //println("slingPeriodmaxPeriodinclusions: " + slingPeriodmaxPeriodinclusions)
            val slingPeriodtracePeriodallow = params.getAs[Boolean]("slingPeriodtracePeriodallow")

    //println("slingPeriodtracePeriodallow: " + slingPeriodtracePeriodallow)
            val slingPeriodmaxPeriodrecordPeriodrequests = params.getAs[Int]("slingPeriodmaxPeriodrecordPeriodrequests")

    //println("slingPeriodmaxPeriodrecordPeriodrequests: " + slingPeriodmaxPeriodrecordPeriodrequests)
        val slingPeriodstorePeriodpatternPeriodrequestsString = params.getAs[String]("slingPeriodstorePeriodpatternPeriodrequests")
    val slingPeriodstorePeriodpatternPeriodrequests = if("multi" == "default" || "multi" == "csv") {
      slingPeriodstorePeriodpatternPeriodrequestsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("slingPeriodstorePeriodpatternPeriodrequests: " + slingPeriodstorePeriodpatternPeriodrequests)
            val slingPeriodserverinfo = params.getAs[String]("slingPeriodserverinfo")

    //println("slingPeriodserverinfo: " + slingPeriodserverinfo)
        val slingPeriodadditionalPeriodresponsePeriodheadersString = params.getAs[String]("slingPeriodadditionalPeriodresponsePeriodheaders")
    val slingPeriodadditionalPeriodresponsePeriodheaders = if("multi" == "default" || "multi" == "csv") {
      slingPeriodadditionalPeriodresponsePeriodheadersString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("slingPeriodadditionalPeriodresponsePeriodheaders: " + slingPeriodadditionalPeriodresponsePeriodheaders)
  }

  

  val orgApacheSlingEngineParametersOperation = (apiOperation[OrgApacheSlingEngineParametersInfo]("orgApacheSlingEngineParameters")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("slingPerioddefaultPeriodparameterPeriodencoding").description("").optional, queryParam[Int]("slingPerioddefaultPeriodmaxPeriodparameters").description("").optional, queryParam[String]("filePeriodlocation").description("").optional, queryParam[Int]("filePeriodthreshold").description("").optional, queryParam[Int]("filePeriodmax").description("").optional, queryParam[Int]("requestPeriodmax").description("").optional, queryParam[Boolean]("slingPerioddefaultPeriodparameterPeriodcheckForAdditionalContainerParameters").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.engine.parameters", operation(orgApacheSlingEngineParametersOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val slingPerioddefaultPeriodparameterPeriodencoding = params.getAs[String]("slingPerioddefaultPeriodparameterPeriodencoding")

    //println("slingPerioddefaultPeriodparameterPeriodencoding: " + slingPerioddefaultPeriodparameterPeriodencoding)
            val slingPerioddefaultPeriodmaxPeriodparameters = params.getAs[Int]("slingPerioddefaultPeriodmaxPeriodparameters")

    //println("slingPerioddefaultPeriodmaxPeriodparameters: " + slingPerioddefaultPeriodmaxPeriodparameters)
            val filePeriodlocation = params.getAs[String]("filePeriodlocation")

    //println("filePeriodlocation: " + filePeriodlocation)
            val filePeriodthreshold = params.getAs[Int]("filePeriodthreshold")

    //println("filePeriodthreshold: " + filePeriodthreshold)
            val filePeriodmax = params.getAs[Int]("filePeriodmax")

    //println("filePeriodmax: " + filePeriodmax)
            val requestPeriodmax = params.getAs[Int]("requestPeriodmax")

    //println("requestPeriodmax: " + requestPeriodmax)
            val slingPerioddefaultPeriodparameterPeriodcheckForAdditionalContainerParameters = params.getAs[Boolean]("slingPerioddefaultPeriodparameterPeriodcheckForAdditionalContainerParameters")

    //println("slingPerioddefaultPeriodparameterPeriodcheckForAdditionalContainerParameters: " + slingPerioddefaultPeriodparameterPeriodcheckForAdditionalContainerParameters)
  }

  

  val orgApacheSlingEventImplEventingThreadPoolOperation = (apiOperation[OrgApacheSlingEventImplEventingThreadPoolInfo]("orgApacheSlingEventImplEventingThreadPool")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("minPoolSize").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.event.impl.EventingThreadPool", operation(orgApacheSlingEventImplEventingThreadPoolOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val minPoolSize = params.getAs[Int]("minPoolSize")

    //println("minPoolSize: " + minPoolSize)
  }

  

  val orgApacheSlingEventImplJobsDefaultJobManagerOperation = (apiOperation[OrgApacheSlingEventImplJobsDefaultJobManagerInfo]("orgApacheSlingEventImplJobsDefaultJobManager")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("queuePeriodpriority").description("").optional, queryParam[Int]("queuePeriodretries").description("").optional, queryParam[Int]("queuePeriodretrydelay").description("").optional, queryParam[Int]("queuePeriodmaxparallel").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.event.impl.jobs.DefaultJobManager", operation(orgApacheSlingEventImplJobsDefaultJobManagerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val queuePeriodpriority = params.getAs[String]("queuePeriodpriority")

    //println("queuePeriodpriority: " + queuePeriodpriority)
            val queuePeriodretries = params.getAs[Int]("queuePeriodretries")

    //println("queuePeriodretries: " + queuePeriodretries)
            val queuePeriodretrydelay = params.getAs[Int]("queuePeriodretrydelay")

    //println("queuePeriodretrydelay: " + queuePeriodretrydelay)
            val queuePeriodmaxparallel = params.getAs[Int]("queuePeriodmaxparallel")

    //println("queuePeriodmaxparallel: " + queuePeriodmaxparallel)
  }

  

  val orgApacheSlingEventImplJobsJcrPersistenceHandlerOperation = (apiOperation[OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo]("orgApacheSlingEventImplJobsJcrPersistenceHandler")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("jobPeriodconsumermanagerPerioddisableDistribution").description("").optional, queryParam[Int]("startupPerioddelay").description("").optional, queryParam[Int]("cleanupPeriodperiod").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.event.impl.jobs.jcr.PersistenceHandler", operation(orgApacheSlingEventImplJobsJcrPersistenceHandlerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val jobPeriodconsumermanagerPerioddisableDistribution = params.getAs[Boolean]("jobPeriodconsumermanagerPerioddisableDistribution")

    //println("jobPeriodconsumermanagerPerioddisableDistribution: " + jobPeriodconsumermanagerPerioddisableDistribution)
            val startupPerioddelay = params.getAs[Int]("startupPerioddelay")

    //println("startupPerioddelay: " + startupPerioddelay)
            val cleanupPeriodperiod = params.getAs[Int]("cleanupPeriodperiod")

    //println("cleanupPeriodperiod: " + cleanupPeriodperiod)
  }

  

  val orgApacheSlingEventImplJobsJobConsumerManagerOperation = (apiOperation[OrgApacheSlingEventImplJobsJobConsumerManagerInfo]("orgApacheSlingEventImplJobsJobConsumerManager")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("orgPeriodapachePeriodslingPeriodinstallerPeriodconfigurationPeriodpersist").description("").optional, queryParam[List[String]]("jobPeriodconsumermanagerPeriodwhitelist").description("").optional, queryParam[List[String]]("jobPeriodconsumermanagerPeriodblacklist").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.event.impl.jobs.JobConsumerManager", operation(orgApacheSlingEventImplJobsJobConsumerManagerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val orgPeriodapachePeriodslingPeriodinstallerPeriodconfigurationPeriodpersist = params.getAs[Boolean]("orgPeriodapachePeriodslingPeriodinstallerPeriodconfigurationPeriodpersist")

    //println("orgPeriodapachePeriodslingPeriodinstallerPeriodconfigurationPeriodpersist: " + orgPeriodapachePeriodslingPeriodinstallerPeriodconfigurationPeriodpersist)
        val jobPeriodconsumermanagerPeriodwhitelistString = params.getAs[String]("jobPeriodconsumermanagerPeriodwhitelist")
    val jobPeriodconsumermanagerPeriodwhitelist = if("multi" == "default" || "multi" == "csv") {
      jobPeriodconsumermanagerPeriodwhitelistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("jobPeriodconsumermanagerPeriodwhitelist: " + jobPeriodconsumermanagerPeriodwhitelist)
        val jobPeriodconsumermanagerPeriodblacklistString = params.getAs[String]("jobPeriodconsumermanagerPeriodblacklist")
    val jobPeriodconsumermanagerPeriodblacklist = if("multi" == "default" || "multi" == "csv") {
      jobPeriodconsumermanagerPeriodblacklistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("jobPeriodconsumermanagerPeriodblacklist: " + jobPeriodconsumermanagerPeriodblacklist)
  }

  

  val orgApacheSlingEventJobsQueueConfigurationOperation = (apiOperation[OrgApacheSlingEventJobsQueueConfigurationInfo]("orgApacheSlingEventJobsQueueConfiguration")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("queuePeriodname").description("").optional, queryParam[List[String]]("queuePeriodtopics").description("").optional, queryParam[String]("queuePeriodtype").description("").optional, queryParam[String]("queuePeriodpriority").description("").optional, queryParam[Int]("queuePeriodretries").description("").optional, queryParam[Int]("queuePeriodretrydelay").description("").optional, queryParam[BigDecimal]("queuePeriodmaxparallel").description("").optional, queryParam[Boolean]("queuePeriodkeepJobs").description("").optional, queryParam[Boolean]("queuePeriodpreferRunOnCreationInstance").description("").optional, queryParam[Int]("queuePeriodthreadPoolSize").description("").optional, queryParam[Int]("servicePeriodranking").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.event.jobs.QueueConfiguration", operation(orgApacheSlingEventJobsQueueConfigurationOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val queuePeriodname = params.getAs[String]("queuePeriodname")

    //println("queuePeriodname: " + queuePeriodname)
        val queuePeriodtopicsString = params.getAs[String]("queuePeriodtopics")
    val queuePeriodtopics = if("multi" == "default" || "multi" == "csv") {
      queuePeriodtopicsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("queuePeriodtopics: " + queuePeriodtopics)
            val queuePeriodtype = params.getAs[String]("queuePeriodtype")

    //println("queuePeriodtype: " + queuePeriodtype)
            val queuePeriodpriority = params.getAs[String]("queuePeriodpriority")

    //println("queuePeriodpriority: " + queuePeriodpriority)
            val queuePeriodretries = params.getAs[Int]("queuePeriodretries")

    //println("queuePeriodretries: " + queuePeriodretries)
            val queuePeriodretrydelay = params.getAs[Int]("queuePeriodretrydelay")

    //println("queuePeriodretrydelay: " + queuePeriodretrydelay)
            val queuePeriodmaxparallel = params.getAs[BigDecimal]("queuePeriodmaxparallel")

    //println("queuePeriodmaxparallel: " + queuePeriodmaxparallel)
            val queuePeriodkeepJobs = params.getAs[Boolean]("queuePeriodkeepJobs")

    //println("queuePeriodkeepJobs: " + queuePeriodkeepJobs)
            val queuePeriodpreferRunOnCreationInstance = params.getAs[Boolean]("queuePeriodpreferRunOnCreationInstance")

    //println("queuePeriodpreferRunOnCreationInstance: " + queuePeriodpreferRunOnCreationInstance)
            val queuePeriodthreadPoolSize = params.getAs[Int]("queuePeriodthreadPoolSize")

    //println("queuePeriodthreadPoolSize: " + queuePeriodthreadPoolSize)
            val servicePeriodranking = params.getAs[Int]("servicePeriodranking")

    //println("servicePeriodranking: " + servicePeriodranking)
  }

  

  val orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWOperation = (apiOperation[OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo]("orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("users").description("").optional, queryParam[List[String]]("groups").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.extensions.webconsolesecurityprovider.internal.SlingWebConsoleSecurityProvider", operation(orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val usersString = params.getAs[String]("users")
    val users = if("multi" == "default" || "multi" == "csv") {
      usersString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("users: " + users)
        val groupsString = params.getAs[String]("groups")
    val groups = if("multi" == "default" || "multi" == "csv") {
      groupsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("groups: " + groups)
  }

  

  val orgApacheSlingFeatureflagsFeatureOperation = (apiOperation[OrgApacheSlingFeatureflagsFeatureInfo]("orgApacheSlingFeatureflagsFeature")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("name").description("").optional, queryParam[String]("description").description("").optional, queryParam[Boolean]("enabled").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.featureflags.Feature", operation(orgApacheSlingFeatureflagsFeatureOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val name = params.getAs[String]("name")

    //println("name: " + name)
            val description = params.getAs[String]("description")

    //println("description: " + description)
            val enabled = params.getAs[Boolean]("enabled")

    //println("enabled: " + enabled)
  }

  

  val orgApacheSlingFeatureflagsImplConfiguredFeatureOperation = (apiOperation[OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo]("orgApacheSlingFeatureflagsImplConfiguredFeature")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("name").description("").optional, queryParam[String]("description").description("").optional, queryParam[Boolean]("enabled").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.featureflags.impl.ConfiguredFeature", operation(orgApacheSlingFeatureflagsImplConfiguredFeatureOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val name = params.getAs[String]("name")

    //println("name: " + name)
            val description = params.getAs[String]("description")

    //println("description: " + description)
            val enabled = params.getAs[Boolean]("enabled")

    //println("enabled: " + enabled)
  }

  

  val orgApacheSlingHapiImplHApiUtilImplOperation = (apiOperation[OrgApacheSlingHapiImplHApiUtilImplInfo]("orgApacheSlingHapiImplHApiUtilImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodresourcetype").description("").optional, queryParam[String]("orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodcollectionresourcetype").description("").optional, queryParam[List[String]]("orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodsearchpaths").description("").optional, queryParam[String]("orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodexternalurl").description("").optional, queryParam[Boolean]("orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodenabled").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.hapi.impl.HApiUtilImpl", operation(orgApacheSlingHapiImplHApiUtilImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodresourcetype = params.getAs[String]("orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodresourcetype")

    //println("orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodresourcetype: " + orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodresourcetype)
            val orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodcollectionresourcetype = params.getAs[String]("orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodcollectionresourcetype")

    //println("orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodcollectionresourcetype: " + orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodcollectionresourcetype)
        val orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodsearchpathsString = params.getAs[String]("orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodsearchpaths")
    val orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodsearchpaths = if("multi" == "default" || "multi" == "csv") {
      orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodsearchpathsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodsearchpaths: " + orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodsearchpaths)
            val orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodexternalurl = params.getAs[String]("orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodexternalurl")

    //println("orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodexternalurl: " + orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodexternalurl)
            val orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodenabled = params.getAs[Boolean]("orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodenabled")

    //println("orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodenabled: " + orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodenabled)
  }

  

  val orgApacheSlingHcCoreImplCompositeHealthCheckOperation = (apiOperation[OrgApacheSlingHcCoreImplCompositeHealthCheckInfo]("orgApacheSlingHcCoreImplCompositeHealthCheck")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("hcPeriodname").description("").optional, queryParam[List[String]]("hcPeriodtags").description("").optional, queryParam[String]("hcPeriodmbeanPeriodname").description("").optional, queryParam[List[String]]("filterPeriodtags").description("").optional, queryParam[Boolean]("filterPeriodcombineTagsWithOr").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.hc.core.impl.CompositeHealthCheck", operation(orgApacheSlingHcCoreImplCompositeHealthCheckOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val hcPeriodname = params.getAs[String]("hcPeriodname")

    //println("hcPeriodname: " + hcPeriodname)
        val hcPeriodtagsString = params.getAs[String]("hcPeriodtags")
    val hcPeriodtags = if("multi" == "default" || "multi" == "csv") {
      hcPeriodtagsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("hcPeriodtags: " + hcPeriodtags)
            val hcPeriodmbeanPeriodname = params.getAs[String]("hcPeriodmbeanPeriodname")

    //println("hcPeriodmbeanPeriodname: " + hcPeriodmbeanPeriodname)
        val filterPeriodtagsString = params.getAs[String]("filterPeriodtags")
    val filterPeriodtags = if("multi" == "default" || "multi" == "csv") {
      filterPeriodtagsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("filterPeriodtags: " + filterPeriodtags)
            val filterPeriodcombineTagsWithOr = params.getAs[Boolean]("filterPeriodcombineTagsWithOr")

    //println("filterPeriodcombineTagsWithOr: " + filterPeriodcombineTagsWithOr)
  }

  

  val orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplOperation = (apiOperation[OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo]("orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("timeoutInMs").description("").optional, queryParam[Int]("longRunningFutureThresholdForCriticalMs").description("").optional, queryParam[Int]("resultCacheTtlInMs").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.hc.core.impl.executor.HealthCheckExecutorImpl", operation(orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val timeoutInMs = params.getAs[Int]("timeoutInMs")

    //println("timeoutInMs: " + timeoutInMs)
            val longRunningFutureThresholdForCriticalMs = params.getAs[Int]("longRunningFutureThresholdForCriticalMs")

    //println("longRunningFutureThresholdForCriticalMs: " + longRunningFutureThresholdForCriticalMs)
            val resultCacheTtlInMs = params.getAs[Int]("resultCacheTtlInMs")

    //println("resultCacheTtlInMs: " + resultCacheTtlInMs)
  }

  

  val orgApacheSlingHcCoreImplJmxAttributeHealthCheckOperation = (apiOperation[OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo]("orgApacheSlingHcCoreImplJmxAttributeHealthCheck")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("hcPeriodname").description("").optional, queryParam[List[String]]("hcPeriodtags").description("").optional, queryParam[String]("hcPeriodmbeanPeriodname").description("").optional, queryParam[String]("mbeanPeriodname").description("").optional, queryParam[String]("attributePeriodname").description("").optional, queryParam[String]("attributePeriodvaluePeriodconstraint").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.hc.core.impl.JmxAttributeHealthCheck", operation(orgApacheSlingHcCoreImplJmxAttributeHealthCheckOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val hcPeriodname = params.getAs[String]("hcPeriodname")

    //println("hcPeriodname: " + hcPeriodname)
        val hcPeriodtagsString = params.getAs[String]("hcPeriodtags")
    val hcPeriodtags = if("multi" == "default" || "multi" == "csv") {
      hcPeriodtagsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("hcPeriodtags: " + hcPeriodtags)
            val hcPeriodmbeanPeriodname = params.getAs[String]("hcPeriodmbeanPeriodname")

    //println("hcPeriodmbeanPeriodname: " + hcPeriodmbeanPeriodname)
            val mbeanPeriodname = params.getAs[String]("mbeanPeriodname")

    //println("mbeanPeriodname: " + mbeanPeriodname)
            val attributePeriodname = params.getAs[String]("attributePeriodname")

    //println("attributePeriodname: " + attributePeriodname)
            val attributePeriodvaluePeriodconstraint = params.getAs[String]("attributePeriodvaluePeriodconstraint")

    //println("attributePeriodvaluePeriodconstraint: " + attributePeriodvaluePeriodconstraint)
  }

  

  val orgApacheSlingHcCoreImplScriptableHealthCheckOperation = (apiOperation[OrgApacheSlingHcCoreImplScriptableHealthCheckInfo]("orgApacheSlingHcCoreImplScriptableHealthCheck")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("hcPeriodname").description("").optional, queryParam[List[String]]("hcPeriodtags").description("").optional, queryParam[String]("hcPeriodmbeanPeriodname").description("").optional, queryParam[String]("expression").description("").optional, queryParam[String]("languagePeriodextension").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.hc.core.impl.ScriptableHealthCheck", operation(orgApacheSlingHcCoreImplScriptableHealthCheckOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val hcPeriodname = params.getAs[String]("hcPeriodname")

    //println("hcPeriodname: " + hcPeriodname)
        val hcPeriodtagsString = params.getAs[String]("hcPeriodtags")
    val hcPeriodtags = if("multi" == "default" || "multi" == "csv") {
      hcPeriodtagsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("hcPeriodtags: " + hcPeriodtags)
            val hcPeriodmbeanPeriodname = params.getAs[String]("hcPeriodmbeanPeriodname")

    //println("hcPeriodmbeanPeriodname: " + hcPeriodmbeanPeriodname)
            val expression = params.getAs[String]("expression")

    //println("expression: " + expression)
            val languagePeriodextension = params.getAs[String]("languagePeriodextension")

    //println("languagePeriodextension: " + languagePeriodextension)
  }

  

  val orgApacheSlingHcCoreImplServletHealthCheckExecutorServletOperation = (apiOperation[OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo]("orgApacheSlingHcCoreImplServletHealthCheckExecutorServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("servletPath").description("").optional, queryParam[Boolean]("disabled").description("").optional, queryParam[String]("corsPeriodaccessControlAllowOrigin").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.hc.core.impl.servlet.HealthCheckExecutorServlet", operation(orgApacheSlingHcCoreImplServletHealthCheckExecutorServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val servletPath = params.getAs[String]("servletPath")

    //println("servletPath: " + servletPath)
            val disabled = params.getAs[Boolean]("disabled")

    //println("disabled: " + disabled)
            val corsPeriodaccessControlAllowOrigin = params.getAs[String]("corsPeriodaccessControlAllowOrigin")

    //println("corsPeriodaccessControlAllowOrigin: " + corsPeriodaccessControlAllowOrigin)
  }

  

  val orgApacheSlingHcCoreImplServletResultTxtVerboseSerializerOperation = (apiOperation[OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo]("orgApacheSlingHcCoreImplServletResultTxtVerboseSerializer")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("totalWidth").description("").optional, queryParam[Int]("colWidthName").description("").optional, queryParam[Int]("colWidthResult").description("").optional, queryParam[Int]("colWidthTiming").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.hc.core.impl.servlet.ResultTxtVerboseSerializer", operation(orgApacheSlingHcCoreImplServletResultTxtVerboseSerializerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val totalWidth = params.getAs[Int]("totalWidth")

    //println("totalWidth: " + totalWidth)
            val colWidthName = params.getAs[Int]("colWidthName")

    //println("colWidthName: " + colWidthName)
            val colWidthResult = params.getAs[Int]("colWidthResult")

    //println("colWidthResult: " + colWidthResult)
            val colWidthTiming = params.getAs[Int]("colWidthTiming")

    //println("colWidthTiming: " + colWidthTiming)
  }

  

  val orgApacheSlingI18nImplI18NFilterOperation = (apiOperation[OrgApacheSlingI18nImplI18NFilterInfo]("orgApacheSlingI18nImplI18NFilter")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("servicePeriodranking").description("").optional, queryParam[List[String]]("slingPeriodfilterPeriodscope").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.i18n.impl.I18NFilter", operation(orgApacheSlingI18nImplI18NFilterOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val servicePeriodranking = params.getAs[Int]("servicePeriodranking")

    //println("servicePeriodranking: " + servicePeriodranking)
        val slingPeriodfilterPeriodscopeString = params.getAs[String]("slingPeriodfilterPeriodscope")
    val slingPeriodfilterPeriodscope = if("multi" == "default" || "multi" == "csv") {
      slingPeriodfilterPeriodscopeString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("slingPeriodfilterPeriodscope: " + slingPeriodfilterPeriodscope)
  }

  

  val orgApacheSlingI18nImplJcrResourceBundleProviderOperation = (apiOperation[OrgApacheSlingI18nImplJcrResourceBundleProviderInfo]("orgApacheSlingI18nImplJcrResourceBundleProvider")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("localePerioddefault").description("").optional, queryParam[Boolean]("preloadPeriodbundles").description("").optional, queryParam[Int]("invalidationPerioddelay").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.i18n.impl.JcrResourceBundleProvider", operation(orgApacheSlingI18nImplJcrResourceBundleProviderOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val localePerioddefault = params.getAs[String]("localePerioddefault")

    //println("localePerioddefault: " + localePerioddefault)
            val preloadPeriodbundles = params.getAs[Boolean]("preloadPeriodbundles")

    //println("preloadPeriodbundles: " + preloadPeriodbundles)
            val invalidationPerioddelay = params.getAs[Int]("invalidationPerioddelay")

    //println("invalidationPerioddelay: " + invalidationPerioddelay)
  }

  

  val orgApacheSlingInstallerProviderJcrImplJcrInstallerOperation = (apiOperation[OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo]("orgApacheSlingInstallerProviderJcrImplJcrInstaller")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("handlerPeriodschemes").description("").optional, queryParam[String]("slingPeriodjcrinstallPeriodfolderPeriodnamePeriodregexp").description("").optional, queryParam[Int]("slingPeriodjcrinstallPeriodfolderPeriodmaxPerioddepth").description("").optional, queryParam[List[String]]("slingPeriodjcrinstallPeriodsearchPeriodpath").description("").optional, queryParam[String]("slingPeriodjcrinstallPeriodnewPeriodconfigPeriodpath").description("").optional, queryParam[String]("slingPeriodjcrinstallPeriodsignalPeriodpath").description("").optional, queryParam[Boolean]("slingPeriodjcrinstallPeriodenablePeriodwriteback").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.installer.provider.jcr.impl.JcrInstaller", operation(orgApacheSlingInstallerProviderJcrImplJcrInstallerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val handlerPeriodschemesString = params.getAs[String]("handlerPeriodschemes")
    val handlerPeriodschemes = if("multi" == "default" || "multi" == "csv") {
      handlerPeriodschemesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("handlerPeriodschemes: " + handlerPeriodschemes)
            val slingPeriodjcrinstallPeriodfolderPeriodnamePeriodregexp = params.getAs[String]("slingPeriodjcrinstallPeriodfolderPeriodnamePeriodregexp")

    //println("slingPeriodjcrinstallPeriodfolderPeriodnamePeriodregexp: " + slingPeriodjcrinstallPeriodfolderPeriodnamePeriodregexp)
            val slingPeriodjcrinstallPeriodfolderPeriodmaxPerioddepth = params.getAs[Int]("slingPeriodjcrinstallPeriodfolderPeriodmaxPerioddepth")

    //println("slingPeriodjcrinstallPeriodfolderPeriodmaxPerioddepth: " + slingPeriodjcrinstallPeriodfolderPeriodmaxPerioddepth)
        val slingPeriodjcrinstallPeriodsearchPeriodpathString = params.getAs[String]("slingPeriodjcrinstallPeriodsearchPeriodpath")
    val slingPeriodjcrinstallPeriodsearchPeriodpath = if("multi" == "default" || "multi" == "csv") {
      slingPeriodjcrinstallPeriodsearchPeriodpathString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("slingPeriodjcrinstallPeriodsearchPeriodpath: " + slingPeriodjcrinstallPeriodsearchPeriodpath)
            val slingPeriodjcrinstallPeriodnewPeriodconfigPeriodpath = params.getAs[String]("slingPeriodjcrinstallPeriodnewPeriodconfigPeriodpath")

    //println("slingPeriodjcrinstallPeriodnewPeriodconfigPeriodpath: " + slingPeriodjcrinstallPeriodnewPeriodconfigPeriodpath)
            val slingPeriodjcrinstallPeriodsignalPeriodpath = params.getAs[String]("slingPeriodjcrinstallPeriodsignalPeriodpath")

    //println("slingPeriodjcrinstallPeriodsignalPeriodpath: " + slingPeriodjcrinstallPeriodsignalPeriodpath)
            val slingPeriodjcrinstallPeriodenablePeriodwriteback = params.getAs[Boolean]("slingPeriodjcrinstallPeriodenablePeriodwriteback")

    //println("slingPeriodjcrinstallPeriodenablePeriodwriteback: " + slingPeriodjcrinstallPeriodenablePeriodwriteback)
  }

  

  val orgApacheSlingJcrBaseInternalLoginAdminWhitelistOperation = (apiOperation[OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo]("orgApacheSlingJcrBaseInternalLoginAdminWhitelist")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("whitelistPeriodbypass").description("").optional, queryParam[String]("whitelistPeriodbundlesPeriodregexp").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist", operation(orgApacheSlingJcrBaseInternalLoginAdminWhitelistOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val whitelistPeriodbypass = params.getAs[Boolean]("whitelistPeriodbypass")

    //println("whitelistPeriodbypass: " + whitelistPeriodbypass)
            val whitelistPeriodbundlesPeriodregexp = params.getAs[String]("whitelistPeriodbundlesPeriodregexp")

    //println("whitelistPeriodbundlesPeriodregexp: " + whitelistPeriodbundlesPeriodregexp)
  }

  

  val orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentOperation = (apiOperation[OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo]("orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("whitelistPeriodname").description("").optional, queryParam[List[String]]("whitelistPeriodbundles").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist.fragment", operation(orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val whitelistPeriodname = params.getAs[String]("whitelistPeriodname")

    //println("whitelistPeriodname: " + whitelistPeriodname)
        val whitelistPeriodbundlesString = params.getAs[String]("whitelistPeriodbundles")
    val whitelistPeriodbundles = if("multi" == "default" || "multi" == "csv") {
      whitelistPeriodbundlesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("whitelistPeriodbundles: " + whitelistPeriodbundles)
  }

  

  val orgApacheSlingJcrDavexImplServletsSlingDavExServletOperation = (apiOperation[OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo]("orgApacheSlingJcrDavexImplServletsSlingDavExServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("alias").description("").optional, queryParam[Boolean]("davPeriodcreateAbsoluteUri").description("").optional, queryParam[String]("davPeriodprotectedhandlers").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet", operation(orgApacheSlingJcrDavexImplServletsSlingDavExServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val alias = params.getAs[String]("alias")

    //println("alias: " + alias)
            val davPeriodcreateAbsoluteUri = params.getAs[Boolean]("davPeriodcreateAbsoluteUri")

    //println("davPeriodcreateAbsoluteUri: " + davPeriodcreateAbsoluteUri)
            val davPeriodprotectedhandlers = params.getAs[String]("davPeriodprotectedhandlers")

    //println("davPeriodprotectedhandlers: " + davPeriodprotectedhandlers)
  }

  

  val orgApacheSlingJcrJackrabbitServerJndiRegistrationSupportOperation = (apiOperation[OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo]("orgApacheSlingJcrJackrabbitServerJndiRegistrationSupport")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("javaPeriodnamingPeriodfactoryPeriodinitial").description("").optional, queryParam[String]("javaPeriodnamingPeriodproviderPeriodurl").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.jcr.jackrabbit.server.JndiRegistrationSupport", operation(orgApacheSlingJcrJackrabbitServerJndiRegistrationSupportOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val javaPeriodnamingPeriodfactoryPeriodinitial = params.getAs[String]("javaPeriodnamingPeriodfactoryPeriodinitial")

    //println("javaPeriodnamingPeriodfactoryPeriodinitial: " + javaPeriodnamingPeriodfactoryPeriodinitial)
            val javaPeriodnamingPeriodproviderPeriodurl = params.getAs[String]("javaPeriodnamingPeriodproviderPeriodurl")

    //println("javaPeriodnamingPeriodproviderPeriodurl: " + javaPeriodnamingPeriodproviderPeriodurl)
  }

  

  val orgApacheSlingJcrJackrabbitServerRmiRegistrationSupportOperation = (apiOperation[OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo]("orgApacheSlingJcrJackrabbitServerRmiRegistrationSupport")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("port").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.jcr.jackrabbit.server.RmiRegistrationSupport", operation(orgApacheSlingJcrJackrabbitServerRmiRegistrationSupportOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val port = params.getAs[Int]("port")

    //println("port: " + port)
  }

  

  val orgApacheSlingJcrRepoinitImplRepositoryInitializerOperation = (apiOperation[OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo]("orgApacheSlingJcrRepoinitImplRepositoryInitializer")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("references").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.jcr.repoinit.impl.RepositoryInitializer", operation(orgApacheSlingJcrRepoinitImplRepositoryInitializerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val referencesString = params.getAs[String]("references")
    val references = if("multi" == "default" || "multi" == "csv") {
      referencesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("references: " + references)
  }

  

  val orgApacheSlingJcrRepoinitRepositoryInitializerOperation = (apiOperation[OrgApacheSlingJcrRepoinitRepositoryInitializerInfo]("orgApacheSlingJcrRepoinitRepositoryInitializer")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("references").description("").optional, queryParam[List[String]]("scripts").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.jcr.repoinit.RepositoryInitializer", operation(orgApacheSlingJcrRepoinitRepositoryInitializerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val referencesString = params.getAs[String]("references")
    val references = if("multi" == "default" || "multi" == "csv") {
      referencesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("references: " + references)
        val scriptsString = params.getAs[String]("scripts")
    val scripts = if("multi" == "default" || "multi" == "csv") {
      scriptsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("scripts: " + scripts)
  }

  

  val orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplOperation = (apiOperation[OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo]("orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("resourcePeriodresolverPeriodsearchpath").description("").optional, queryParam[Boolean]("resourcePeriodresolverPeriodmanglenamespaces").description("").optional, queryParam[Boolean]("resourcePeriodresolverPeriodallowDirect").description("").optional, queryParam[List[String]]("resourcePeriodresolverPeriodrequiredPeriodproviders").description("").optional, queryParam[List[String]]("resourcePeriodresolverPeriodrequiredPeriodprovidernames").description("").optional, queryParam[List[String]]("resourcePeriodresolverPeriodvirtual").description("").optional, queryParam[List[String]]("resourcePeriodresolverPeriodmapping").description("").optional, queryParam[String]("resourcePeriodresolverPeriodmapPeriodlocation").description("").optional, queryParam[List[String]]("resourcePeriodresolverPeriodmapPeriodobservation").description("").optional, queryParam[Int]("resourcePeriodresolverPerioddefaultPeriodvanityPeriodredirectPeriodstatus").description("").optional, queryParam[Boolean]("resourcePeriodresolverPeriodenablePeriodvanitypath").description("").optional, queryParam[Int]("resourcePeriodresolverPeriodvanitypathPeriodmaxEntries").description("").optional, queryParam[Boolean]("resourcePeriodresolverPeriodvanitypathPeriodmaxEntriesPeriodstartup").description("").optional, queryParam[Int]("resourcePeriodresolverPeriodvanitypathPeriodbloomfilterPeriodmaxBytes").description("").optional, queryParam[Boolean]("resourcePeriodresolverPeriodoptimizePeriodaliasPeriodresolution").description("").optional, queryParam[List[String]]("resourcePeriodresolverPeriodvanitypathPeriodwhitelist").description("").optional, queryParam[List[String]]("resourcePeriodresolverPeriodvanitypathPeriodblacklist").description("").optional, queryParam[Boolean]("resourcePeriodresolverPeriodvanityPeriodprecedence").description("").optional, queryParam[Boolean]("resourcePeriodresolverPeriodproviderhandlingPeriodparanoid").description("").optional, queryParam[Boolean]("resourcePeriodresolverPeriodlogPeriodclosing").description("").optional, queryParam[Boolean]("resourcePeriodresolverPeriodlogPeriodunclosed").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.jcr.resource.internal.JcrResourceResolverFactoryImpl", operation(orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val resourcePeriodresolverPeriodsearchpathString = params.getAs[String]("resourcePeriodresolverPeriodsearchpath")
    val resourcePeriodresolverPeriodsearchpath = if("multi" == "default" || "multi" == "csv") {
      resourcePeriodresolverPeriodsearchpathString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("resourcePeriodresolverPeriodsearchpath: " + resourcePeriodresolverPeriodsearchpath)
            val resourcePeriodresolverPeriodmanglenamespaces = params.getAs[Boolean]("resourcePeriodresolverPeriodmanglenamespaces")

    //println("resourcePeriodresolverPeriodmanglenamespaces: " + resourcePeriodresolverPeriodmanglenamespaces)
            val resourcePeriodresolverPeriodallowDirect = params.getAs[Boolean]("resourcePeriodresolverPeriodallowDirect")

    //println("resourcePeriodresolverPeriodallowDirect: " + resourcePeriodresolverPeriodallowDirect)
        val resourcePeriodresolverPeriodrequiredPeriodprovidersString = params.getAs[String]("resourcePeriodresolverPeriodrequiredPeriodproviders")
    val resourcePeriodresolverPeriodrequiredPeriodproviders = if("multi" == "default" || "multi" == "csv") {
      resourcePeriodresolverPeriodrequiredPeriodprovidersString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("resourcePeriodresolverPeriodrequiredPeriodproviders: " + resourcePeriodresolverPeriodrequiredPeriodproviders)
        val resourcePeriodresolverPeriodrequiredPeriodprovidernamesString = params.getAs[String]("resourcePeriodresolverPeriodrequiredPeriodprovidernames")
    val resourcePeriodresolverPeriodrequiredPeriodprovidernames = if("multi" == "default" || "multi" == "csv") {
      resourcePeriodresolverPeriodrequiredPeriodprovidernamesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("resourcePeriodresolverPeriodrequiredPeriodprovidernames: " + resourcePeriodresolverPeriodrequiredPeriodprovidernames)
        val resourcePeriodresolverPeriodvirtualString = params.getAs[String]("resourcePeriodresolverPeriodvirtual")
    val resourcePeriodresolverPeriodvirtual = if("multi" == "default" || "multi" == "csv") {
      resourcePeriodresolverPeriodvirtualString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("resourcePeriodresolverPeriodvirtual: " + resourcePeriodresolverPeriodvirtual)
        val resourcePeriodresolverPeriodmappingString = params.getAs[String]("resourcePeriodresolverPeriodmapping")
    val resourcePeriodresolverPeriodmapping = if("multi" == "default" || "multi" == "csv") {
      resourcePeriodresolverPeriodmappingString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("resourcePeriodresolverPeriodmapping: " + resourcePeriodresolverPeriodmapping)
            val resourcePeriodresolverPeriodmapPeriodlocation = params.getAs[String]("resourcePeriodresolverPeriodmapPeriodlocation")

    //println("resourcePeriodresolverPeriodmapPeriodlocation: " + resourcePeriodresolverPeriodmapPeriodlocation)
        val resourcePeriodresolverPeriodmapPeriodobservationString = params.getAs[String]("resourcePeriodresolverPeriodmapPeriodobservation")
    val resourcePeriodresolverPeriodmapPeriodobservation = if("multi" == "default" || "multi" == "csv") {
      resourcePeriodresolverPeriodmapPeriodobservationString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("resourcePeriodresolverPeriodmapPeriodobservation: " + resourcePeriodresolverPeriodmapPeriodobservation)
            val resourcePeriodresolverPerioddefaultPeriodvanityPeriodredirectPeriodstatus = params.getAs[Int]("resourcePeriodresolverPerioddefaultPeriodvanityPeriodredirectPeriodstatus")

    //println("resourcePeriodresolverPerioddefaultPeriodvanityPeriodredirectPeriodstatus: " + resourcePeriodresolverPerioddefaultPeriodvanityPeriodredirectPeriodstatus)
            val resourcePeriodresolverPeriodenablePeriodvanitypath = params.getAs[Boolean]("resourcePeriodresolverPeriodenablePeriodvanitypath")

    //println("resourcePeriodresolverPeriodenablePeriodvanitypath: " + resourcePeriodresolverPeriodenablePeriodvanitypath)
            val resourcePeriodresolverPeriodvanitypathPeriodmaxEntries = params.getAs[Int]("resourcePeriodresolverPeriodvanitypathPeriodmaxEntries")

    //println("resourcePeriodresolverPeriodvanitypathPeriodmaxEntries: " + resourcePeriodresolverPeriodvanitypathPeriodmaxEntries)
            val resourcePeriodresolverPeriodvanitypathPeriodmaxEntriesPeriodstartup = params.getAs[Boolean]("resourcePeriodresolverPeriodvanitypathPeriodmaxEntriesPeriodstartup")

    //println("resourcePeriodresolverPeriodvanitypathPeriodmaxEntriesPeriodstartup: " + resourcePeriodresolverPeriodvanitypathPeriodmaxEntriesPeriodstartup)
            val resourcePeriodresolverPeriodvanitypathPeriodbloomfilterPeriodmaxBytes = params.getAs[Int]("resourcePeriodresolverPeriodvanitypathPeriodbloomfilterPeriodmaxBytes")

    //println("resourcePeriodresolverPeriodvanitypathPeriodbloomfilterPeriodmaxBytes: " + resourcePeriodresolverPeriodvanitypathPeriodbloomfilterPeriodmaxBytes)
            val resourcePeriodresolverPeriodoptimizePeriodaliasPeriodresolution = params.getAs[Boolean]("resourcePeriodresolverPeriodoptimizePeriodaliasPeriodresolution")

    //println("resourcePeriodresolverPeriodoptimizePeriodaliasPeriodresolution: " + resourcePeriodresolverPeriodoptimizePeriodaliasPeriodresolution)
        val resourcePeriodresolverPeriodvanitypathPeriodwhitelistString = params.getAs[String]("resourcePeriodresolverPeriodvanitypathPeriodwhitelist")
    val resourcePeriodresolverPeriodvanitypathPeriodwhitelist = if("multi" == "default" || "multi" == "csv") {
      resourcePeriodresolverPeriodvanitypathPeriodwhitelistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("resourcePeriodresolverPeriodvanitypathPeriodwhitelist: " + resourcePeriodresolverPeriodvanitypathPeriodwhitelist)
        val resourcePeriodresolverPeriodvanitypathPeriodblacklistString = params.getAs[String]("resourcePeriodresolverPeriodvanitypathPeriodblacklist")
    val resourcePeriodresolverPeriodvanitypathPeriodblacklist = if("multi" == "default" || "multi" == "csv") {
      resourcePeriodresolverPeriodvanitypathPeriodblacklistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("resourcePeriodresolverPeriodvanitypathPeriodblacklist: " + resourcePeriodresolverPeriodvanitypathPeriodblacklist)
            val resourcePeriodresolverPeriodvanityPeriodprecedence = params.getAs[Boolean]("resourcePeriodresolverPeriodvanityPeriodprecedence")

    //println("resourcePeriodresolverPeriodvanityPeriodprecedence: " + resourcePeriodresolverPeriodvanityPeriodprecedence)
            val resourcePeriodresolverPeriodproviderhandlingPeriodparanoid = params.getAs[Boolean]("resourcePeriodresolverPeriodproviderhandlingPeriodparanoid")

    //println("resourcePeriodresolverPeriodproviderhandlingPeriodparanoid: " + resourcePeriodresolverPeriodproviderhandlingPeriodparanoid)
            val resourcePeriodresolverPeriodlogPeriodclosing = params.getAs[Boolean]("resourcePeriodresolverPeriodlogPeriodclosing")

    //println("resourcePeriodresolverPeriodlogPeriodclosing: " + resourcePeriodresolverPeriodlogPeriodclosing)
            val resourcePeriodresolverPeriodlogPeriodunclosed = params.getAs[Boolean]("resourcePeriodresolverPeriodlogPeriodunclosed")

    //println("resourcePeriodresolverPeriodlogPeriodunclosed: " + resourcePeriodresolverPeriodlogPeriodunclosed)
  }

  

  val orgApacheSlingJcrResourceInternalJcrSystemUserValidatorOperation = (apiOperation[OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo]("orgApacheSlingJcrResourceInternalJcrSystemUserValidator")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("allowPeriodonlyPeriodsystemPerioduser").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.jcr.resource.internal.JcrSystemUserValidator", operation(orgApacheSlingJcrResourceInternalJcrSystemUserValidatorOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val allowPeriodonlyPeriodsystemPerioduser = params.getAs[Boolean]("allowPeriodonlyPeriodsystemPerioduser")

    //println("allowPeriodonlyPeriodsystemPerioduser: " + allowPeriodonlyPeriodsystemPerioduser)
  }

  

  val orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryOperation = (apiOperation[OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo]("orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("path").description("").optional, queryParam[String]("checkpathPeriodprefix").description("").optional, queryParam[String]("jcrPath").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.jcr.resourcesecurity.impl.ResourceAccessGateFactory", operation(orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val path = params.getAs[String]("path")

    //println("path: " + path)
            val checkpathPeriodprefix = params.getAs[String]("checkpathPeriodprefix")

    //println("checkpathPeriodprefix: " + checkpathPeriodprefix)
            val jcrPath = params.getAs[String]("jcrPath")

    //println("jcrPath: " + jcrPath)
  }

  

  val orgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceOperation = (apiOperation[OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo]("orgApacheSlingJcrWebdavImplHandlerDefaultHandlerService")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("servicePeriodranking").description("").optional, queryParam[String]("typePeriodcollections").description("").optional, queryParam[String]("typePeriodnoncollections").description("").optional, queryParam[String]("typePeriodcontent").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DefaultHandlerService", operation(orgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val servicePeriodranking = params.getAs[Int]("servicePeriodranking")

    //println("servicePeriodranking: " + servicePeriodranking)
            val typePeriodcollections = params.getAs[String]("typePeriodcollections")

    //println("typePeriodcollections: " + typePeriodcollections)
            val typePeriodnoncollections = params.getAs[String]("typePeriodnoncollections")

    //println("typePeriodnoncollections: " + typePeriodnoncollections)
            val typePeriodcontent = params.getAs[String]("typePeriodcontent")

    //println("typePeriodcontent: " + typePeriodcontent)
  }

  

  val orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicOperation = (apiOperation[OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo]("orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("servicePeriodranking").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DirListingExportHandlerService", operation(orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val servicePeriodranking = params.getAs[Int]("servicePeriodranking")

    //println("servicePeriodranking: " + servicePeriodranking)
  }

  

  val orgApacheSlingJcrWebdavImplServletsSimpleWebDavServletOperation = (apiOperation[OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo]("orgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("davPeriodroot").description("").optional, queryParam[Boolean]("davPeriodcreateAbsoluteUri").description("").optional, queryParam[String]("davPeriodrealm").description("").optional, queryParam[List[String]]("collectionPeriodtypes").description("").optional, queryParam[List[String]]("filterPeriodprefixes").description("").optional, queryParam[String]("filterPeriodtypes").description("").optional, queryParam[String]("filterPerioduris").description("").optional, queryParam[String]("typePeriodcollections").description("").optional, queryParam[String]("typePeriodnoncollections").description("").optional, queryParam[String]("typePeriodcontent").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.jcr.webdav.impl.servlets.SimpleWebDavServlet", operation(orgApacheSlingJcrWebdavImplServletsSimpleWebDavServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val davPeriodroot = params.getAs[String]("davPeriodroot")

    //println("davPeriodroot: " + davPeriodroot)
            val davPeriodcreateAbsoluteUri = params.getAs[Boolean]("davPeriodcreateAbsoluteUri")

    //println("davPeriodcreateAbsoluteUri: " + davPeriodcreateAbsoluteUri)
            val davPeriodrealm = params.getAs[String]("davPeriodrealm")

    //println("davPeriodrealm: " + davPeriodrealm)
        val collectionPeriodtypesString = params.getAs[String]("collectionPeriodtypes")
    val collectionPeriodtypes = if("multi" == "default" || "multi" == "csv") {
      collectionPeriodtypesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("collectionPeriodtypes: " + collectionPeriodtypes)
        val filterPeriodprefixesString = params.getAs[String]("filterPeriodprefixes")
    val filterPeriodprefixes = if("multi" == "default" || "multi" == "csv") {
      filterPeriodprefixesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("filterPeriodprefixes: " + filterPeriodprefixes)
            val filterPeriodtypes = params.getAs[String]("filterPeriodtypes")

    //println("filterPeriodtypes: " + filterPeriodtypes)
            val filterPerioduris = params.getAs[String]("filterPerioduris")

    //println("filterPerioduris: " + filterPerioduris)
            val typePeriodcollections = params.getAs[String]("typePeriodcollections")

    //println("typePeriodcollections: " + typePeriodcollections)
            val typePeriodnoncollections = params.getAs[String]("typePeriodnoncollections")

    //println("typePeriodnoncollections: " + typePeriodnoncollections)
            val typePeriodcontent = params.getAs[String]("typePeriodcontent")

    //println("typePeriodcontent: " + typePeriodcontent)
  }

  

  val orgApacheSlingJmxProviderImplJMXResourceProviderOperation = (apiOperation[OrgApacheSlingJmxProviderImplJMXResourceProviderInfo]("orgApacheSlingJmxProviderImplJMXResourceProvider")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("providerPeriodroots").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.jmx.provider.impl.JMXResourceProvider", operation(orgApacheSlingJmxProviderImplJMXResourceProviderOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val providerPeriodroots = params.getAs[String]("providerPeriodroots")

    //println("providerPeriodroots: " + providerPeriodroots)
  }

  

  val orgApacheSlingModelsImplModelAdapterFactoryOperation = (apiOperation[OrgApacheSlingModelsImplModelAdapterFactoryInfo]("orgApacheSlingModelsImplModelAdapterFactory")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("osgiPeriodhttpPeriodwhiteboardPeriodlistener").description("").optional, queryParam[String]("osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect").description("").optional, queryParam[Int]("maxPeriodrecursionPerioddepth").description("").optional, queryParam[Int]("cleanupPeriodjobPeriodperiod").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.models.impl.ModelAdapterFactory", operation(orgApacheSlingModelsImplModelAdapterFactoryOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val osgiPeriodhttpPeriodwhiteboardPeriodlistener = params.getAs[String]("osgiPeriodhttpPeriodwhiteboardPeriodlistener")

    //println("osgiPeriodhttpPeriodwhiteboardPeriodlistener: " + osgiPeriodhttpPeriodwhiteboardPeriodlistener)
            val osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect = params.getAs[String]("osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect")

    //println("osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect: " + osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect)
            val maxPeriodrecursionPerioddepth = params.getAs[Int]("maxPeriodrecursionPerioddepth")

    //println("maxPeriodrecursionPerioddepth: " + maxPeriodrecursionPerioddepth)
            val cleanupPeriodjobPeriodperiod = params.getAs[Int]("cleanupPeriodjobPeriodperiod")

    //println("cleanupPeriodjobPeriodperiod: " + cleanupPeriodjobPeriodperiod)
  }

  

  val orgApacheSlingModelsJacksonexporterImplResourceModuleProviderOperation = (apiOperation[OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo]("orgApacheSlingModelsJacksonexporterImplResourceModuleProvider")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("maxPeriodrecursionPeriodlevels").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.models.jacksonexporter.impl.ResourceModuleProvider", operation(orgApacheSlingModelsJacksonexporterImplResourceModuleProviderOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val maxPeriodrecursionPeriodlevels = params.getAs[Int]("maxPeriodrecursionPeriodlevels")

    //println("maxPeriodrecursionPeriodlevels: " + maxPeriodrecursionPeriodlevels)
  }

  

  val orgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoOperation = (apiOperation[OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo]("orgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("felixPeriodinventoryPeriodprinterPeriodname").description("").optional, queryParam[String]("felixPeriodinventoryPeriodprinterPeriodtitle").description("").optional, queryParam[String]("path").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.resource.inventory.impl.ResourceInventoryPrinterFactory", operation(orgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val felixPeriodinventoryPeriodprinterPeriodname = params.getAs[String]("felixPeriodinventoryPeriodprinterPeriodname")

    //println("felixPeriodinventoryPeriodprinterPeriodname: " + felixPeriodinventoryPeriodprinterPeriodname)
            val felixPeriodinventoryPeriodprinterPeriodtitle = params.getAs[String]("felixPeriodinventoryPeriodprinterPeriodtitle")

    //println("felixPeriodinventoryPeriodprinterPeriodtitle: " + felixPeriodinventoryPeriodprinterPeriodtitle)
            val path = params.getAs[String]("path")

    //println("path: " + path)
  }

  

  val orgApacheSlingResourcemergerImplMergedResourceProviderFactoryOperation = (apiOperation[OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo]("orgApacheSlingResourcemergerImplMergedResourceProviderFactory")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("mergePeriodroot").description("").optional, queryParam[Boolean]("mergePeriodreadOnly").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.resourcemerger.impl.MergedResourceProviderFactory", operation(orgApacheSlingResourcemergerImplMergedResourceProviderFactoryOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val mergePeriodroot = params.getAs[String]("mergePeriodroot")

    //println("mergePeriodroot: " + mergePeriodroot)
            val mergePeriodreadOnly = params.getAs[Boolean]("mergePeriodreadOnly")

    //println("mergePeriodreadOnly: " + mergePeriodreadOnly)
  }

  

  val orgApacheSlingResourcemergerPickerOverridingOperation = (apiOperation[OrgApacheSlingResourcemergerPickerOverridingInfo]("orgApacheSlingResourcemergerPickerOverriding")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("mergePeriodroot").description("").optional, queryParam[Boolean]("mergePeriodreadOnly").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.resourcemerger.picker.overriding", operation(orgApacheSlingResourcemergerPickerOverridingOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val mergePeriodroot = params.getAs[String]("mergePeriodroot")

    //println("mergePeriodroot: " + mergePeriodroot)
            val mergePeriodreadOnly = params.getAs[Boolean]("mergePeriodreadOnly")

    //println("mergePeriodreadOnly: " + mergePeriodreadOnly)
  }

  

  val orgApacheSlingScriptingCoreImplScriptCacheImplOperation = (apiOperation[OrgApacheSlingScriptingCoreImplScriptCacheImplInfo]("orgApacheSlingScriptingCoreImplScriptCacheImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("orgPeriodapachePeriodslingPeriodscriptingPeriodcachePeriodsize").description("").optional, queryParam[List[String]]("orgPeriodapachePeriodslingPeriodscriptingPeriodcachePeriodadditionalExtensions").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.scripting.core.impl.ScriptCacheImpl", operation(orgApacheSlingScriptingCoreImplScriptCacheImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val orgPeriodapachePeriodslingPeriodscriptingPeriodcachePeriodsize = params.getAs[Int]("orgPeriodapachePeriodslingPeriodscriptingPeriodcachePeriodsize")

    //println("orgPeriodapachePeriodslingPeriodscriptingPeriodcachePeriodsize: " + orgPeriodapachePeriodslingPeriodscriptingPeriodcachePeriodsize)
        val orgPeriodapachePeriodslingPeriodscriptingPeriodcachePeriodadditionalExtensionsString = params.getAs[String]("orgPeriodapachePeriodslingPeriodscriptingPeriodcachePeriodadditionalExtensions")
    val orgPeriodapachePeriodslingPeriodscriptingPeriodcachePeriodadditionalExtensions = if("multi" == "default" || "multi" == "csv") {
      orgPeriodapachePeriodslingPeriodscriptingPeriodcachePeriodadditionalExtensionsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("orgPeriodapachePeriodslingPeriodscriptingPeriodcachePeriodadditionalExtensions: " + orgPeriodapachePeriodslingPeriodscriptingPeriodcachePeriodadditionalExtensions)
  }

  

  val orgApacheSlingScriptingCoreImplScriptingResourceResolverProviderOperation = (apiOperation[OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo]("orgApacheSlingScriptingCoreImplScriptingResourceResolverProvider")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("logPeriodstacktracePeriodonclose").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.scripting.core.impl.ScriptingResourceResolverProviderImpl", operation(orgApacheSlingScriptingCoreImplScriptingResourceResolverProviderOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val logPeriodstacktracePeriodonclose = params.getAs[Boolean]("logPeriodstacktracePeriodonclose")

    //println("logPeriodstacktracePeriodonclose: " + logPeriodstacktracePeriodonclose)
  }

  

  val orgApacheSlingScriptingJavaImplJavaScriptEngineFactoryOperation = (apiOperation[OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo]("orgApacheSlingScriptingJavaImplJavaScriptEngineFactory")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("javaPeriodclassdebuginfo").description("").optional, queryParam[String]("javaPeriodjavaEncoding").description("").optional, queryParam[String]("javaPeriodcompilerSourceVM").description("").optional, queryParam[String]("javaPeriodcompilerTargetVM").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.scripting.java.impl.JavaScriptEngineFactory", operation(orgApacheSlingScriptingJavaImplJavaScriptEngineFactoryOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val javaPeriodclassdebuginfo = params.getAs[Boolean]("javaPeriodclassdebuginfo")

    //println("javaPeriodclassdebuginfo: " + javaPeriodclassdebuginfo)
            val javaPeriodjavaEncoding = params.getAs[String]("javaPeriodjavaEncoding")

    //println("javaPeriodjavaEncoding: " + javaPeriodjavaEncoding)
            val javaPeriodcompilerSourceVM = params.getAs[String]("javaPeriodcompilerSourceVM")

    //println("javaPeriodcompilerSourceVM: " + javaPeriodcompilerSourceVM)
            val javaPeriodcompilerTargetVM = params.getAs[String]("javaPeriodcompilerTargetVM")

    //println("javaPeriodcompilerTargetVM: " + javaPeriodcompilerTargetVM)
  }

  

  val orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaOperation = (apiOperation[OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo]("orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("orgPeriodapachePeriodslingPeriodscriptingPeriodjavascriptPeriodrhinoPeriodoptLevel").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.scripting.javascript.internal.RhinoJavaScriptEngineFactory", operation(orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val orgPeriodapachePeriodslingPeriodscriptingPeriodjavascriptPeriodrhinoPeriodoptLevel = params.getAs[Int]("orgPeriodapachePeriodslingPeriodscriptingPeriodjavascriptPeriodrhinoPeriodoptLevel")

    //println("orgPeriodapachePeriodslingPeriodscriptingPeriodjavascriptPeriodrhinoPeriodoptLevel: " + orgPeriodapachePeriodslingPeriodscriptingPeriodjavascriptPeriodrhinoPeriodoptLevel)
  }

  

  val orgApacheSlingScriptingJspJspScriptEngineFactoryOperation = (apiOperation[OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo]("orgApacheSlingScriptingJspJspScriptEngineFactory")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("jasperPeriodcompilerTargetVM").description("").optional, queryParam[String]("jasperPeriodcompilerSourceVM").description("").optional, queryParam[Boolean]("jasperPeriodclassdebuginfo").description("").optional, queryParam[Boolean]("jasperPeriodenablePooling").description("").optional, queryParam[String]("jasperPeriodieClassId").description("").optional, queryParam[Boolean]("jasperPeriodgenStringAsCharArray").description("").optional, queryParam[Boolean]("jasperPeriodkeepgenerated").description("").optional, queryParam[Boolean]("jasperPeriodmappedfile").description("").optional, queryParam[Boolean]("jasperPeriodtrimSpaces").description("").optional, queryParam[Boolean]("jasperPerioddisplaySourceFragments").description("").optional, queryParam[Boolean]("defaultPeriodisPeriodsession").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.scripting.jsp.JspScriptEngineFactory", operation(orgApacheSlingScriptingJspJspScriptEngineFactoryOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val jasperPeriodcompilerTargetVM = params.getAs[String]("jasperPeriodcompilerTargetVM")

    //println("jasperPeriodcompilerTargetVM: " + jasperPeriodcompilerTargetVM)
            val jasperPeriodcompilerSourceVM = params.getAs[String]("jasperPeriodcompilerSourceVM")

    //println("jasperPeriodcompilerSourceVM: " + jasperPeriodcompilerSourceVM)
            val jasperPeriodclassdebuginfo = params.getAs[Boolean]("jasperPeriodclassdebuginfo")

    //println("jasperPeriodclassdebuginfo: " + jasperPeriodclassdebuginfo)
            val jasperPeriodenablePooling = params.getAs[Boolean]("jasperPeriodenablePooling")

    //println("jasperPeriodenablePooling: " + jasperPeriodenablePooling)
            val jasperPeriodieClassId = params.getAs[String]("jasperPeriodieClassId")

    //println("jasperPeriodieClassId: " + jasperPeriodieClassId)
            val jasperPeriodgenStringAsCharArray = params.getAs[Boolean]("jasperPeriodgenStringAsCharArray")

    //println("jasperPeriodgenStringAsCharArray: " + jasperPeriodgenStringAsCharArray)
            val jasperPeriodkeepgenerated = params.getAs[Boolean]("jasperPeriodkeepgenerated")

    //println("jasperPeriodkeepgenerated: " + jasperPeriodkeepgenerated)
            val jasperPeriodmappedfile = params.getAs[Boolean]("jasperPeriodmappedfile")

    //println("jasperPeriodmappedfile: " + jasperPeriodmappedfile)
            val jasperPeriodtrimSpaces = params.getAs[Boolean]("jasperPeriodtrimSpaces")

    //println("jasperPeriodtrimSpaces: " + jasperPeriodtrimSpaces)
            val jasperPerioddisplaySourceFragments = params.getAs[Boolean]("jasperPerioddisplaySourceFragments")

    //println("jasperPerioddisplaySourceFragments: " + jasperPerioddisplaySourceFragments)
            val defaultPeriodisPeriodsession = params.getAs[Boolean]("defaultPeriodisPeriodsession")

    //println("defaultPeriodisPeriodsession: " + defaultPeriodisPeriodsession)
  }

  

  val orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvOperation = (apiOperation[OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo]("orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodjsPeriodbindings").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.scripting.sightly.js.impl.jsapi.SlyBindingsValuesProvider", operation(orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodjsPeriodbindingsString = params.getAs[String]("orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodjsPeriodbindings")
    val orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodjsPeriodbindings = if("multi" == "default" || "multi" == "csv") {
      orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodjsPeriodbindingsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodjsPeriodbindings: " + orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodjsPeriodbindings)
  }

  

  val orgApacheSlingSecurityImplContentDispositionFilterOperation = (apiOperation[OrgApacheSlingSecurityImplContentDispositionFilterInfo]("orgApacheSlingSecurityImplContentDispositionFilter")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("slingPeriodcontentPerioddispositionPeriodpaths").description("").optional, queryParam[List[String]]("slingPeriodcontentPerioddispositionPeriodexcludedPeriodpaths").description("").optional, queryParam[Boolean]("slingPeriodcontentPerioddispositionPeriodallPeriodpaths").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.security.impl.ContentDispositionFilter", operation(orgApacheSlingSecurityImplContentDispositionFilterOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val slingPeriodcontentPerioddispositionPeriodpathsString = params.getAs[String]("slingPeriodcontentPerioddispositionPeriodpaths")
    val slingPeriodcontentPerioddispositionPeriodpaths = if("multi" == "default" || "multi" == "csv") {
      slingPeriodcontentPerioddispositionPeriodpathsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("slingPeriodcontentPerioddispositionPeriodpaths: " + slingPeriodcontentPerioddispositionPeriodpaths)
        val slingPeriodcontentPerioddispositionPeriodexcludedPeriodpathsString = params.getAs[String]("slingPeriodcontentPerioddispositionPeriodexcludedPeriodpaths")
    val slingPeriodcontentPerioddispositionPeriodexcludedPeriodpaths = if("multi" == "default" || "multi" == "csv") {
      slingPeriodcontentPerioddispositionPeriodexcludedPeriodpathsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("slingPeriodcontentPerioddispositionPeriodexcludedPeriodpaths: " + slingPeriodcontentPerioddispositionPeriodexcludedPeriodpaths)
            val slingPeriodcontentPerioddispositionPeriodallPeriodpaths = params.getAs[Boolean]("slingPeriodcontentPerioddispositionPeriodallPeriodpaths")

    //println("slingPeriodcontentPerioddispositionPeriodallPeriodpaths: " + slingPeriodcontentPerioddispositionPeriodallPeriodpaths)
  }

  

  val orgApacheSlingSecurityImplReferrerFilterOperation = (apiOperation[OrgApacheSlingSecurityImplReferrerFilterInfo]("orgApacheSlingSecurityImplReferrerFilter")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("allowPeriodempty").description("").optional, queryParam[List[String]]("allowPeriodhosts").description("").optional, queryParam[List[String]]("allowPeriodhostsPeriodregexp").description("").optional, queryParam[List[String]]("filterPeriodmethods").description("").optional, queryParam[List[String]]("excludePeriodagentsPeriodregexp").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.security.impl.ReferrerFilter", operation(orgApacheSlingSecurityImplReferrerFilterOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val allowPeriodempty = params.getAs[Boolean]("allowPeriodempty")

    //println("allowPeriodempty: " + allowPeriodempty)
        val allowPeriodhostsString = params.getAs[String]("allowPeriodhosts")
    val allowPeriodhosts = if("multi" == "default" || "multi" == "csv") {
      allowPeriodhostsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("allowPeriodhosts: " + allowPeriodhosts)
        val allowPeriodhostsPeriodregexpString = params.getAs[String]("allowPeriodhostsPeriodregexp")
    val allowPeriodhostsPeriodregexp = if("multi" == "default" || "multi" == "csv") {
      allowPeriodhostsPeriodregexpString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("allowPeriodhostsPeriodregexp: " + allowPeriodhostsPeriodregexp)
        val filterPeriodmethodsString = params.getAs[String]("filterPeriodmethods")
    val filterPeriodmethods = if("multi" == "default" || "multi" == "csv") {
      filterPeriodmethodsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("filterPeriodmethods: " + filterPeriodmethods)
        val excludePeriodagentsPeriodregexpString = params.getAs[String]("excludePeriodagentsPeriodregexp")
    val excludePeriodagentsPeriodregexp = if("multi" == "default" || "multi" == "csv") {
      excludePeriodagentsPeriodregexpString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("excludePeriodagentsPeriodregexp: " + excludePeriodagentsPeriodregexp)
  }

  

  val orgApacheSlingServiceusermappingImplServiceUserMapperImplOperation = (apiOperation[OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo]("orgApacheSlingServiceusermappingImplServiceUserMapperImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("userPeriodmapping").description("").optional, queryParam[String]("userPerioddefault").description("").optional, queryParam[Boolean]("userPeriodenablePerioddefaultPeriodmapping").description("").optional, queryParam[Boolean]("requirePeriodvalidation").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl", operation(orgApacheSlingServiceusermappingImplServiceUserMapperImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val userPeriodmappingString = params.getAs[String]("userPeriodmapping")
    val userPeriodmapping = if("multi" == "default" || "multi" == "csv") {
      userPeriodmappingString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("userPeriodmapping: " + userPeriodmapping)
            val userPerioddefault = params.getAs[String]("userPerioddefault")

    //println("userPerioddefault: " + userPerioddefault)
            val userPeriodenablePerioddefaultPeriodmapping = params.getAs[Boolean]("userPeriodenablePerioddefaultPeriodmapping")

    //println("userPeriodenablePerioddefaultPeriodmapping: " + userPeriodenablePerioddefaultPeriodmapping)
            val requirePeriodvalidation = params.getAs[Boolean]("requirePeriodvalidation")

    //println("requirePeriodvalidation: " + requirePeriodvalidation)
  }

  

  val orgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedOperation = (apiOperation[OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo]("orgApacheSlingServiceusermappingImplServiceUserMapperImplAmended")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Int]("servicePeriodranking").description("").optional, queryParam[List[String]]("userPeriodmapping").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl.amended", operation(orgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val servicePeriodranking = params.getAs[Int]("servicePeriodranking")

    //println("servicePeriodranking: " + servicePeriodranking)
        val userPeriodmappingString = params.getAs[String]("userPeriodmapping")
    val userPeriodmapping = if("multi" == "default" || "multi" == "csv") {
      userPeriodmappingString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("userPeriodmapping: " + userPeriodmapping)
  }

  

  val orgApacheSlingServletsGetDefaultGetServletOperation = (apiOperation[OrgApacheSlingServletsGetDefaultGetServletInfo]("orgApacheSlingServletsGetDefaultGetServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("aliases").description("").optional, queryParam[Boolean]("index").description("").optional, queryParam[List[String]]("indexPeriodfiles").description("").optional, queryParam[Boolean]("enablePeriodhtml").description("").optional, queryParam[Boolean]("enablePeriodjson").description("").optional, queryParam[Boolean]("enablePeriodtxt").description("").optional, queryParam[Boolean]("enablePeriodxml").description("").optional, queryParam[Int]("jsonPeriodmaximumresults").description("").optional, queryParam[Boolean]("ecmaSuport").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.servlets.get.DefaultGetServlet", operation(orgApacheSlingServletsGetDefaultGetServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val aliasesString = params.getAs[String]("aliases")
    val aliases = if("multi" == "default" || "multi" == "csv") {
      aliasesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("aliases: " + aliases)
            val index = params.getAs[Boolean]("index")

    //println("index: " + index)
        val indexPeriodfilesString = params.getAs[String]("indexPeriodfiles")
    val indexPeriodfiles = if("multi" == "default" || "multi" == "csv") {
      indexPeriodfilesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("indexPeriodfiles: " + indexPeriodfiles)
            val enablePeriodhtml = params.getAs[Boolean]("enablePeriodhtml")

    //println("enablePeriodhtml: " + enablePeriodhtml)
            val enablePeriodjson = params.getAs[Boolean]("enablePeriodjson")

    //println("enablePeriodjson: " + enablePeriodjson)
            val enablePeriodtxt = params.getAs[Boolean]("enablePeriodtxt")

    //println("enablePeriodtxt: " + enablePeriodtxt)
            val enablePeriodxml = params.getAs[Boolean]("enablePeriodxml")

    //println("enablePeriodxml: " + enablePeriodxml)
            val jsonPeriodmaximumresults = params.getAs[Int]("jsonPeriodmaximumresults")

    //println("jsonPeriodmaximumresults: " + jsonPeriodmaximumresults)
            val ecmaSuport = params.getAs[Boolean]("ecmaSuport")

    //println("ecmaSuport: " + ecmaSuport)
  }

  

  val orgApacheSlingServletsGetImplVersionVersionInfoServletOperation = (apiOperation[OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo]("orgApacheSlingServletsGetImplVersionVersionInfoServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("slingPeriodservletPeriodselectors").description("").optional, queryParam[Boolean]("ecmaSuport").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.servlets.get.impl.version.VersionInfoServlet", operation(orgApacheSlingServletsGetImplVersionVersionInfoServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val slingPeriodservletPeriodselectorsString = params.getAs[String]("slingPeriodservletPeriodselectors")
    val slingPeriodservletPeriodselectors = if("multi" == "default" || "multi" == "csv") {
      slingPeriodservletPeriodselectorsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("slingPeriodservletPeriodselectors: " + slingPeriodservletPeriodselectors)
            val ecmaSuport = params.getAs[Boolean]("ecmaSuport")

    //println("ecmaSuport: " + ecmaSuport)
  }

  

  val orgApacheSlingServletsPostImplHelperChunkCleanUpTaskOperation = (apiOperation[OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo]("orgApacheSlingServletsPostImplHelperChunkCleanUpTask")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("schedulerPeriodexpression").description("").optional, queryParam[Boolean]("schedulerPeriodconcurrent").description("").optional, queryParam[Int]("chunkPeriodcleanupPeriodage").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.servlets.post.impl.helper.ChunkCleanUpTask", operation(orgApacheSlingServletsPostImplHelperChunkCleanUpTaskOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val schedulerPeriodexpression = params.getAs[String]("schedulerPeriodexpression")

    //println("schedulerPeriodexpression: " + schedulerPeriodexpression)
            val schedulerPeriodconcurrent = params.getAs[Boolean]("schedulerPeriodconcurrent")

    //println("schedulerPeriodconcurrent: " + schedulerPeriodconcurrent)
            val chunkPeriodcleanupPeriodage = params.getAs[Int]("chunkPeriodcleanupPeriodage")

    //println("chunkPeriodcleanupPeriodage: " + chunkPeriodcleanupPeriodage)
  }

  

  val orgApacheSlingServletsPostImplSlingPostServletOperation = (apiOperation[OrgApacheSlingServletsPostImplSlingPostServletInfo]("orgApacheSlingServletsPostImplSlingPostServlet")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("servletPeriodpostPerioddateFormats").description("").optional, queryParam[List[String]]("servletPeriodpostPeriodnodeNameHints").description("").optional, queryParam[Int]("servletPeriodpostPeriodnodeNameMaxLength").description("").optional, queryParam[Boolean]("servletPeriodpostPeriodcheckinNewVersionableNodes").description("").optional, queryParam[Boolean]("servletPeriodpostPeriodautoCheckout").description("").optional, queryParam[Boolean]("servletPeriodpostPeriodautoCheckin").description("").optional, queryParam[String]("servletPeriodpostPeriodignorePattern").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.servlets.post.impl.SlingPostServlet", operation(orgApacheSlingServletsPostImplSlingPostServletOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val servletPeriodpostPerioddateFormatsString = params.getAs[String]("servletPeriodpostPerioddateFormats")
    val servletPeriodpostPerioddateFormats = if("multi" == "default" || "multi" == "csv") {
      servletPeriodpostPerioddateFormatsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("servletPeriodpostPerioddateFormats: " + servletPeriodpostPerioddateFormats)
        val servletPeriodpostPeriodnodeNameHintsString = params.getAs[String]("servletPeriodpostPeriodnodeNameHints")
    val servletPeriodpostPeriodnodeNameHints = if("multi" == "default" || "multi" == "csv") {
      servletPeriodpostPeriodnodeNameHintsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("servletPeriodpostPeriodnodeNameHints: " + servletPeriodpostPeriodnodeNameHints)
            val servletPeriodpostPeriodnodeNameMaxLength = params.getAs[Int]("servletPeriodpostPeriodnodeNameMaxLength")

    //println("servletPeriodpostPeriodnodeNameMaxLength: " + servletPeriodpostPeriodnodeNameMaxLength)
            val servletPeriodpostPeriodcheckinNewVersionableNodes = params.getAs[Boolean]("servletPeriodpostPeriodcheckinNewVersionableNodes")

    //println("servletPeriodpostPeriodcheckinNewVersionableNodes: " + servletPeriodpostPeriodcheckinNewVersionableNodes)
            val servletPeriodpostPeriodautoCheckout = params.getAs[Boolean]("servletPeriodpostPeriodautoCheckout")

    //println("servletPeriodpostPeriodautoCheckout: " + servletPeriodpostPeriodautoCheckout)
            val servletPeriodpostPeriodautoCheckin = params.getAs[Boolean]("servletPeriodpostPeriodautoCheckin")

    //println("servletPeriodpostPeriodautoCheckin: " + servletPeriodpostPeriodautoCheckin)
            val servletPeriodpostPeriodignorePattern = params.getAs[String]("servletPeriodpostPeriodignorePattern")

    //println("servletPeriodpostPeriodignorePattern: " + servletPeriodpostPeriodignorePattern)
  }

  

  val orgApacheSlingServletsResolverSlingServletResolverOperation = (apiOperation[OrgApacheSlingServletsResolverSlingServletResolverInfo]("orgApacheSlingServletsResolverSlingServletResolver")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("servletresolverPeriodservletRoot").description("").optional, queryParam[Int]("servletresolverPeriodcacheSize").description("").optional, queryParam[List[String]]("servletresolverPeriodpaths").description("").optional, queryParam[List[String]]("servletresolverPerioddefaultExtensions").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.servlets.resolver.SlingServletResolver", operation(orgApacheSlingServletsResolverSlingServletResolverOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val servletresolverPeriodservletRoot = params.getAs[String]("servletresolverPeriodservletRoot")

    //println("servletresolverPeriodservletRoot: " + servletresolverPeriodservletRoot)
            val servletresolverPeriodcacheSize = params.getAs[Int]("servletresolverPeriodcacheSize")

    //println("servletresolverPeriodcacheSize: " + servletresolverPeriodcacheSize)
        val servletresolverPeriodpathsString = params.getAs[String]("servletresolverPeriodpaths")
    val servletresolverPeriodpaths = if("multi" == "default" || "multi" == "csv") {
      servletresolverPeriodpathsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("servletresolverPeriodpaths: " + servletresolverPeriodpaths)
        val servletresolverPerioddefaultExtensionsString = params.getAs[String]("servletresolverPerioddefaultExtensions")
    val servletresolverPerioddefaultExtensions = if("multi" == "default" || "multi" == "csv") {
      servletresolverPerioddefaultExtensionsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("servletresolverPerioddefaultExtensions: " + servletresolverPerioddefaultExtensions)
  }

  

  val orgApacheSlingSettingsImplSlingSettingsServiceImplOperation = (apiOperation[OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo]("orgApacheSlingSettingsImplSlingSettingsServiceImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("slingPeriodname").description("").optional, queryParam[String]("slingPerioddescription").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.settings.impl.SlingSettingsServiceImpl", operation(orgApacheSlingSettingsImplSlingSettingsServiceImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val slingPeriodname = params.getAs[String]("slingPeriodname")

    //println("slingPeriodname: " + slingPeriodname)
            val slingPerioddescription = params.getAs[String]("slingPerioddescription")

    //println("slingPerioddescription: " + slingPerioddescription)
  }

  

  val orgApacheSlingStartupfilterImplStartupFilterImplOperation = (apiOperation[OrgApacheSlingStartupfilterImplStartupFilterImplInfo]("orgApacheSlingStartupfilterImplStartupFilterImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[Boolean]("activePeriodbyPerioddefault").description("").optional, queryParam[String]("defaultPeriodmessage").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.startupfilter.impl.StartupFilterImpl", operation(orgApacheSlingStartupfilterImplStartupFilterImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val activePeriodbyPerioddefault = params.getAs[Boolean]("activePeriodbyPerioddefault")

    //println("activePeriodbyPerioddefault: " + activePeriodbyPerioddefault)
            val defaultPeriodmessage = params.getAs[String]("defaultPeriodmessage")

    //println("defaultPeriodmessage: " + defaultPeriodmessage)
  }

  

  val orgApacheSlingTenantInternalTenantProviderImplOperation = (apiOperation[OrgApacheSlingTenantInternalTenantProviderImplInfo]("orgApacheSlingTenantInternalTenantProviderImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("tenantPeriodroot").description("").optional, queryParam[List[String]]("tenantPeriodpathPeriodmatcher").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.tenant.internal.TenantProviderImpl", operation(orgApacheSlingTenantInternalTenantProviderImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val tenantPeriodroot = params.getAs[String]("tenantPeriodroot")

    //println("tenantPeriodroot: " + tenantPeriodroot)
        val tenantPeriodpathPeriodmatcherString = params.getAs[String]("tenantPeriodpathPeriodmatcher")
    val tenantPeriodpathPeriodmatcher = if("multi" == "default" || "multi" == "csv") {
      tenantPeriodpathPeriodmatcherString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("tenantPeriodpathPeriodmatcher: " + tenantPeriodpathPeriodmatcher)
  }

  

  val orgApacheSlingTracerInternalLogTracerOperation = (apiOperation[OrgApacheSlingTracerInternalLogTracerInfo]("orgApacheSlingTracerInternalLogTracer")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[List[String]]("tracerSets").description("").optional, queryParam[Boolean]("enabled").description("").optional, queryParam[Boolean]("servletEnabled").description("").optional, queryParam[Int]("recordingCacheSizeInMB").description("").optional, queryParam[Int]("recordingCacheDurationInSecs").description("").optional, queryParam[Boolean]("recordingCompressionEnabled").description("").optional, queryParam[Boolean]("gzipResponse").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.tracer.internal.LogTracer", operation(orgApacheSlingTracerInternalLogTracerOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
        val tracerSetsString = params.getAs[String]("tracerSets")
    val tracerSets = if("multi" == "default" || "multi" == "csv") {
      tracerSetsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("tracerSets: " + tracerSets)
            val enabled = params.getAs[Boolean]("enabled")

    //println("enabled: " + enabled)
            val servletEnabled = params.getAs[Boolean]("servletEnabled")

    //println("servletEnabled: " + servletEnabled)
            val recordingCacheSizeInMB = params.getAs[Int]("recordingCacheSizeInMB")

    //println("recordingCacheSizeInMB: " + recordingCacheSizeInMB)
            val recordingCacheDurationInSecs = params.getAs[Int]("recordingCacheDurationInSecs")

    //println("recordingCacheDurationInSecs: " + recordingCacheDurationInSecs)
            val recordingCompressionEnabled = params.getAs[Boolean]("recordingCompressionEnabled")

    //println("recordingCompressionEnabled: " + recordingCompressionEnabled)
            val gzipResponse = params.getAs[Boolean]("gzipResponse")

    //println("gzipResponse: " + gzipResponse)
  }

  

  val orgApacheSlingXssImplXSSFilterImplOperation = (apiOperation[OrgApacheSlingXssImplXSSFilterImplInfo]("orgApacheSlingXssImplXSSFilterImpl")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("propertylist").description("").optional, queryParam[String]("policyPath").description("").optional)
  )

  post("/system/console/configMgr/org.apache.sling.xss.impl.XSSFilterImpl", operation(orgApacheSlingXssImplXSSFilterImplOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
            val policyPath = params.getAs[String]("policyPath")

    //println("policyPath: " + policyPath)
  }

}
