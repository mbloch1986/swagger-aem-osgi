/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComDayCqDamIdsImplIDSJobProcessorProperties.h
 *
 * 
 */

#ifndef ComDayCqDamIdsImplIDSJobProcessorProperties_H_
#define ComDayCqDamIdsImplIDSJobProcessorProperties_H_



#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyString.h"
#include <memory>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComDayCqDamIdsImplIDSJobProcessorProperties
{
public:
    ComDayCqDamIdsImplIDSJobProcessorProperties();
    virtual ~ComDayCqDamIdsImplIDSJobProcessorProperties();
    
    std::string toJsonString();
    void fromJsonString(std::string const& jsonString);

    /////////////////////////////////////////////
    /// ComDayCqDamIdsImplIDSJobProcessorProperties members
    
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getEnableMultisession() const;
    void setEnableMultisession(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getIdsCcEnable() const;
    void setIdsCcEnable(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getEnableRetry() const;
    void setEnableRetry(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getEnableRetryScripterror() const;
    void setEnableRetryScripterror(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getExternalizerDomainCqhost() const;
    void setExternalizerDomainCqhost(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getExternalizerDomainHttp() const;
    void setExternalizerDomainHttp(std::shared_ptr<ConfigNodePropertyString> value);

protected:
    std::shared_ptr<ConfigNodePropertyBoolean> m_Enable_multisession;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Ids_cc_enable;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Enable_retry;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Enable_retry_scripterror;
    std::shared_ptr<ConfigNodePropertyString> m_Externalizer_domain_cqhost;
    std::shared_ptr<ConfigNodePropertyString> m_Externalizer_domain_http;
};

}
}
}
}

#endif /* ComDayCqDamIdsImplIDSJobProcessorProperties_H_ */
