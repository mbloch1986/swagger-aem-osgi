/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties {
  #[serde(rename = "jaas.ranking")]
  jaas_ranking: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "jaas.controlFlag")]
  jaas_control_flag: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "jaas.realmName")]
  jaas_realm_name: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "idp.name")]
  idp_name: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "sync.handlerName")]
  sync_handler_name: Option<::models::ConfigNodePropertyString>
}

impl OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties {
  pub fn new() -> OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties {
    OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties {
      jaas_ranking: None,
      jaas_control_flag: None,
      jaas_realm_name: None,
      idp_name: None,
      sync_handler_name: None
    }
  }

  pub fn set_jaas_ranking(&mut self, jaas_ranking: ::models::ConfigNodePropertyInteger) {
    self.jaas_ranking = Some(jaas_ranking);
  }

  pub fn with_jaas_ranking(mut self, jaas_ranking: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties {
    self.jaas_ranking = Some(jaas_ranking);
    self
  }

  pub fn jaas_ranking(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.jaas_ranking.as_ref()
  }

  pub fn reset_jaas_ranking(&mut self) {
    self.jaas_ranking = None;
  }

  pub fn set_jaas_control_flag(&mut self, jaas_control_flag: ::models::ConfigNodePropertyString) {
    self.jaas_control_flag = Some(jaas_control_flag);
  }

  pub fn with_jaas_control_flag(mut self, jaas_control_flag: ::models::ConfigNodePropertyString) -> OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties {
    self.jaas_control_flag = Some(jaas_control_flag);
    self
  }

  pub fn jaas_control_flag(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.jaas_control_flag.as_ref()
  }

  pub fn reset_jaas_control_flag(&mut self) {
    self.jaas_control_flag = None;
  }

  pub fn set_jaas_realm_name(&mut self, jaas_realm_name: ::models::ConfigNodePropertyString) {
    self.jaas_realm_name = Some(jaas_realm_name);
  }

  pub fn with_jaas_realm_name(mut self, jaas_realm_name: ::models::ConfigNodePropertyString) -> OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties {
    self.jaas_realm_name = Some(jaas_realm_name);
    self
  }

  pub fn jaas_realm_name(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.jaas_realm_name.as_ref()
  }

  pub fn reset_jaas_realm_name(&mut self) {
    self.jaas_realm_name = None;
  }

  pub fn set_idp_name(&mut self, idp_name: ::models::ConfigNodePropertyString) {
    self.idp_name = Some(idp_name);
  }

  pub fn with_idp_name(mut self, idp_name: ::models::ConfigNodePropertyString) -> OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties {
    self.idp_name = Some(idp_name);
    self
  }

  pub fn idp_name(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.idp_name.as_ref()
  }

  pub fn reset_idp_name(&mut self) {
    self.idp_name = None;
  }

  pub fn set_sync_handler_name(&mut self, sync_handler_name: ::models::ConfigNodePropertyString) {
    self.sync_handler_name = Some(sync_handler_name);
  }

  pub fn with_sync_handler_name(mut self, sync_handler_name: ::models::ConfigNodePropertyString) -> OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties {
    self.sync_handler_name = Some(sync_handler_name);
    self
  }

  pub fn sync_handler_name(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.sync_handler_name.as_ref()
  }

  pub fn reset_sync_handler_name(&mut self) {
    self.sync_handler_name = None;
  }

}



