/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeGraniteAuthImsProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeGraniteAuthImsProperties::OAIComAdobeGraniteAuthImsProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeGraniteAuthImsProperties::OAIComAdobeGraniteAuthImsProperties() {
    init();
}

OAIComAdobeGraniteAuthImsProperties::~OAIComAdobeGraniteAuthImsProperties() {
    this->cleanup();
}

void
OAIComAdobeGraniteAuthImsProperties::init() {
    configid = new OAIConfigNodePropertyString();
    m_configid_isSet = false;
    scope = new OAIConfigNodePropertyString();
    m_scope_isSet = false;
}

void
OAIComAdobeGraniteAuthImsProperties::cleanup() {
    if(configid != nullptr) { 
        delete configid;
    }
    if(scope != nullptr) { 
        delete scope;
    }
}

OAIComAdobeGraniteAuthImsProperties*
OAIComAdobeGraniteAuthImsProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeGraniteAuthImsProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&configid, pJson["configid"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&scope, pJson["scope"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
}

QString
OAIComAdobeGraniteAuthImsProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeGraniteAuthImsProperties::asJsonObject() {
    QJsonObject obj;
    if((configid != nullptr) && (configid->isSet())){
        toJsonValue(QString("configid"), configid, obj, QString("OAIConfigNodePropertyString"));
    }
    if((scope != nullptr) && (scope->isSet())){
        toJsonValue(QString("scope"), scope, obj, QString("OAIConfigNodePropertyString"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteAuthImsProperties::getConfigid() {
    return configid;
}
void
OAIComAdobeGraniteAuthImsProperties::setConfigid(OAIConfigNodePropertyString* configid) {
    this->configid = configid;
    this->m_configid_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteAuthImsProperties::getScope() {
    return scope;
}
void
OAIComAdobeGraniteAuthImsProperties::setScope(OAIConfigNodePropertyString* scope) {
    this->scope = scope;
    this->m_scope_isSet = true;
}


bool
OAIComAdobeGraniteAuthImsProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(configid != nullptr && configid->isSet()){ isObjectUpdated = true; break;}
        if(scope != nullptr && scope->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

