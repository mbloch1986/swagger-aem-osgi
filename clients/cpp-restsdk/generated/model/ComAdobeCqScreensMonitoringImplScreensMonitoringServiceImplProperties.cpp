/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties::ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties()
{
    m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_projectPathIsSet = false;
    m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_scheduleFrequencyIsSet = false;
    m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_pingTimeoutIsSet = false;
    m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_recipientsIsSet = false;
    m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_smtpserverIsSet = false;
    m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_smtpportIsSet = false;
    m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_usetlsIsSet = false;
    m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_usernameIsSet = false;
    m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_passwordIsSet = false;
}

ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties::~ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties()
{
}

void ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_projectPathIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.projectPath")] = ModelBase::toJson(m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_projectPath);
    }
    if(m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_scheduleFrequencyIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.scheduleFrequency")] = ModelBase::toJson(m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_scheduleFrequency);
    }
    if(m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_pingTimeoutIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.pingTimeout")] = ModelBase::toJson(m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_pingTimeout);
    }
    if(m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_recipientsIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.recipients")] = ModelBase::toJson(m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_recipients);
    }
    if(m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_smtpserverIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpserver")] = ModelBase::toJson(m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_smtpserver);
    }
    if(m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_smtpportIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpport")] = ModelBase::toJson(m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_smtpport);
    }
    if(m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_usetlsIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.usetls")] = ModelBase::toJson(m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_usetls);
    }
    if(m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_usernameIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.username")] = ModelBase::toJson(m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_username);
    }
    if(m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_passwordIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.password")] = ModelBase::toJson(m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_password);
    }

    return val;
}

void ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.projectPath")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.projectPath")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.projectPath")]);
            setComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.scheduleFrequency")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.scheduleFrequency")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.scheduleFrequency")]);
            setComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.pingTimeout")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.pingTimeout")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.pingTimeout")]);
            setComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.recipients")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.recipients")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.recipients")]);
            setComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpserver")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpserver")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpserver")]);
            setComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpport")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpport")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpport")]);
            setComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.usetls")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.usetls")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.usetls")]);
            setComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.username")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.username")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.username")]);
            setComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.password")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.password")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.password")]);
            setComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword( newItem );
        }
    }
}

void ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_projectPathIsSet)
    {
        if (m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_projectPath.get())
        {
            m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_projectPath->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.projectPath."));
        }
    }
    if(m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_scheduleFrequencyIsSet)
    {
        if (m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_scheduleFrequency.get())
        {
            m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_scheduleFrequency->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.scheduleFrequency."));
        }
    }
    if(m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_pingTimeoutIsSet)
    {
        if (m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_pingTimeout.get())
        {
            m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_pingTimeout->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.pingTimeout."));
        }
    }
    if(m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_recipientsIsSet)
    {
        if (m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_recipients.get())
        {
            m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_recipients->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.recipients."));
        }
    }
    if(m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_smtpserverIsSet)
    {
        if (m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_smtpserver.get())
        {
            m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_smtpserver->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpserver."));
        }
    }
    if(m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_smtpportIsSet)
    {
        if (m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_smtpport.get())
        {
            m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_smtpport->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpport."));
        }
    }
    if(m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_usetlsIsSet)
    {
        if (m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_usetls.get())
        {
            m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_usetls->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.usetls."));
        }
    }
    if(m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_usernameIsSet)
    {
        if (m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_username.get())
        {
            m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_username->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.username."));
        }
    }
    if(m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_passwordIsSet)
    {
        if (m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_password.get())
        {
            m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_password->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.password."));
        }
    }
}

void ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.projectPath")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.projectPath")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.projectPath."));
            setComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.scheduleFrequency")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.scheduleFrequency")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.scheduleFrequency."));
            setComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.pingTimeout")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.pingTimeout")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.pingTimeout."));
            setComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.recipients")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.recipients")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.recipients."));
            setComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpserver")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpserver")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpserver."));
            setComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpport")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpport")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpport."));
            setComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.usetls")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.usetls")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.usetls."));
            setComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.username")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.username")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.username."));
            setComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.password")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.password")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.password."));
            setComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties::getComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath() const
{
    return m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_projectPath;
}


void ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties::setComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_projectPath = value;
    m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_projectPathIsSet = true;
}
bool ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties::comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPathIsSet() const
{
    return m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_projectPathIsSet;
}

void ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties::unsetCom_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_projectPath()
{
    m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_projectPathIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties::getComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency() const
{
    return m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_scheduleFrequency;
}


void ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties::setComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_scheduleFrequency = value;
    m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_scheduleFrequencyIsSet = true;
}
bool ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties::comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequencyIsSet() const
{
    return m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_scheduleFrequencyIsSet;
}

void ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties::unsetCom_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_scheduleFrequency()
{
    m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_scheduleFrequencyIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties::getComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout() const
{
    return m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_pingTimeout;
}


void ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties::setComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_pingTimeout = value;
    m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_pingTimeoutIsSet = true;
}
bool ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties::comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeoutIsSet() const
{
    return m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_pingTimeoutIsSet;
}

void ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties::unsetCom_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_pingTimeout()
{
    m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_pingTimeoutIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties::getComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients() const
{
    return m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_recipients;
}


void ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties::setComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_recipients = value;
    m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_recipientsIsSet = true;
}
bool ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties::comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipientsIsSet() const
{
    return m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_recipientsIsSet;
}

void ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties::unsetCom_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_recipients()
{
    m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_recipientsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties::getComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver() const
{
    return m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_smtpserver;
}


void ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties::setComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_smtpserver = value;
    m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_smtpserverIsSet = true;
}
bool ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties::comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserverIsSet() const
{
    return m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_smtpserverIsSet;
}

void ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties::unsetCom_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_smtpserver()
{
    m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_smtpserverIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties::getComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport() const
{
    return m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_smtpport;
}


void ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties::setComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_smtpport = value;
    m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_smtpportIsSet = true;
}
bool ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties::comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpportIsSet() const
{
    return m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_smtpportIsSet;
}

void ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties::unsetCom_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_smtpport()
{
    m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_smtpportIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties::getComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls() const
{
    return m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_usetls;
}


void ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties::setComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_usetls = value;
    m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_usetlsIsSet = true;
}
bool ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties::comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetlsIsSet() const
{
    return m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_usetlsIsSet;
}

void ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties::unsetCom_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_usetls()
{
    m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_usetlsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties::getComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername() const
{
    return m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_username;
}


void ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties::setComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_username = value;
    m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_usernameIsSet = true;
}
bool ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties::comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsernameIsSet() const
{
    return m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_usernameIsSet;
}

void ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties::unsetCom_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_username()
{
    m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_usernameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties::getComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword() const
{
    return m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_password;
}


void ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties::setComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_password = value;
    m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_passwordIsSet = true;
}
bool ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties::comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPasswordIsSet() const
{
    return m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_passwordIsSet;
}

void ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties::unsetCom_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_password()
{
    m_Com_adobe_cq_screens_monitoring_impl_ScreensMonitoringServiceImpl_passwordIsSet = false;
}

}
}
}
}

