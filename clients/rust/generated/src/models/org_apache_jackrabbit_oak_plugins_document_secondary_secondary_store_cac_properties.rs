/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties {
  #[serde(rename = "includedPaths")]
  included_paths: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "enableAsyncObserver")]
  enable_async_observer: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "observerQueueSize")]
  observer_queue_size: Option<::models::ConfigNodePropertyInteger>
}

impl OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties {
  pub fn new() -> OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties {
    OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties {
      included_paths: None,
      enable_async_observer: None,
      observer_queue_size: None
    }
  }

  pub fn set_included_paths(&mut self, included_paths: ::models::ConfigNodePropertyArray) {
    self.included_paths = Some(included_paths);
  }

  pub fn with_included_paths(mut self, included_paths: ::models::ConfigNodePropertyArray) -> OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties {
    self.included_paths = Some(included_paths);
    self
  }

  pub fn included_paths(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.included_paths.as_ref()
  }

  pub fn reset_included_paths(&mut self) {
    self.included_paths = None;
  }

  pub fn set_enable_async_observer(&mut self, enable_async_observer: ::models::ConfigNodePropertyBoolean) {
    self.enable_async_observer = Some(enable_async_observer);
  }

  pub fn with_enable_async_observer(mut self, enable_async_observer: ::models::ConfigNodePropertyBoolean) -> OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties {
    self.enable_async_observer = Some(enable_async_observer);
    self
  }

  pub fn enable_async_observer(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.enable_async_observer.as_ref()
  }

  pub fn reset_enable_async_observer(&mut self) {
    self.enable_async_observer = None;
  }

  pub fn set_observer_queue_size(&mut self, observer_queue_size: ::models::ConfigNodePropertyInteger) {
    self.observer_queue_size = Some(observer_queue_size);
  }

  pub fn with_observer_queue_size(mut self, observer_queue_size: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties {
    self.observer_queue_size = Some(observer_queue_size);
    self
  }

  pub fn observer_queue_size(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.observer_queue_size.as_ref()
  }

  pub fn reset_observer_queue_size(&mut self) {
    self.observer_queue_size = None;
  }

}



