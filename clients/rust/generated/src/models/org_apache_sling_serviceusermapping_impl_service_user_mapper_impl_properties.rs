/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties {
  #[serde(rename = "user.mapping")]
  user_mapping: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "user.default")]
  user_default: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "user.enable.default.mapping")]
  user_enable_default_mapping: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "require.validation")]
  require_validation: Option<::models::ConfigNodePropertyBoolean>
}

impl OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties {
  pub fn new() -> OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties {
    OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties {
      user_mapping: None,
      user_default: None,
      user_enable_default_mapping: None,
      require_validation: None
    }
  }

  pub fn set_user_mapping(&mut self, user_mapping: ::models::ConfigNodePropertyArray) {
    self.user_mapping = Some(user_mapping);
  }

  pub fn with_user_mapping(mut self, user_mapping: ::models::ConfigNodePropertyArray) -> OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties {
    self.user_mapping = Some(user_mapping);
    self
  }

  pub fn user_mapping(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.user_mapping.as_ref()
  }

  pub fn reset_user_mapping(&mut self) {
    self.user_mapping = None;
  }

  pub fn set_user_default(&mut self, user_default: ::models::ConfigNodePropertyString) {
    self.user_default = Some(user_default);
  }

  pub fn with_user_default(mut self, user_default: ::models::ConfigNodePropertyString) -> OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties {
    self.user_default = Some(user_default);
    self
  }

  pub fn user_default(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.user_default.as_ref()
  }

  pub fn reset_user_default(&mut self) {
    self.user_default = None;
  }

  pub fn set_user_enable_default_mapping(&mut self, user_enable_default_mapping: ::models::ConfigNodePropertyBoolean) {
    self.user_enable_default_mapping = Some(user_enable_default_mapping);
  }

  pub fn with_user_enable_default_mapping(mut self, user_enable_default_mapping: ::models::ConfigNodePropertyBoolean) -> OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties {
    self.user_enable_default_mapping = Some(user_enable_default_mapping);
    self
  }

  pub fn user_enable_default_mapping(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.user_enable_default_mapping.as_ref()
  }

  pub fn reset_user_enable_default_mapping(&mut self) {
    self.user_enable_default_mapping = None;
  }

  pub fn set_require_validation(&mut self, require_validation: ::models::ConfigNodePropertyBoolean) {
    self.require_validation = Some(require_validation);
  }

  pub fn with_require_validation(mut self, require_validation: ::models::ConfigNodePropertyBoolean) -> OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties {
    self.require_validation = Some(require_validation);
    self
  }

  pub fn require_validation(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.require_validation.as_ref()
  }

  pub fn reset_require_validation(&mut self) {
    self.require_validation = None;
  }

}



