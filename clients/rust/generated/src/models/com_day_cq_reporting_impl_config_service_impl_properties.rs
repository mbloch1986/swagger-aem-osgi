/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComDayCqReportingImplConfigServiceImplProperties {
  #[serde(rename = "repconf.timezone")]
  repconf_timezone: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "repconf.locale")]
  repconf_locale: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "repconf.snapshots")]
  repconf_snapshots: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "repconf.repdir")]
  repconf_repdir: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "repconf.hourofday")]
  repconf_hourofday: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "repconf.minofhour")]
  repconf_minofhour: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "repconf.maxrows")]
  repconf_maxrows: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "repconf.fakedata")]
  repconf_fakedata: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "repconf.snapshotuser")]
  repconf_snapshotuser: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "repconf.enforcesnapshotuser")]
  repconf_enforcesnapshotuser: Option<::models::ConfigNodePropertyBoolean>
}

impl ComDayCqReportingImplConfigServiceImplProperties {
  pub fn new() -> ComDayCqReportingImplConfigServiceImplProperties {
    ComDayCqReportingImplConfigServiceImplProperties {
      repconf_timezone: None,
      repconf_locale: None,
      repconf_snapshots: None,
      repconf_repdir: None,
      repconf_hourofday: None,
      repconf_minofhour: None,
      repconf_maxrows: None,
      repconf_fakedata: None,
      repconf_snapshotuser: None,
      repconf_enforcesnapshotuser: None
    }
  }

  pub fn set_repconf_timezone(&mut self, repconf_timezone: ::models::ConfigNodePropertyString) {
    self.repconf_timezone = Some(repconf_timezone);
  }

  pub fn with_repconf_timezone(mut self, repconf_timezone: ::models::ConfigNodePropertyString) -> ComDayCqReportingImplConfigServiceImplProperties {
    self.repconf_timezone = Some(repconf_timezone);
    self
  }

  pub fn repconf_timezone(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.repconf_timezone.as_ref()
  }

  pub fn reset_repconf_timezone(&mut self) {
    self.repconf_timezone = None;
  }

  pub fn set_repconf_locale(&mut self, repconf_locale: ::models::ConfigNodePropertyString) {
    self.repconf_locale = Some(repconf_locale);
  }

  pub fn with_repconf_locale(mut self, repconf_locale: ::models::ConfigNodePropertyString) -> ComDayCqReportingImplConfigServiceImplProperties {
    self.repconf_locale = Some(repconf_locale);
    self
  }

  pub fn repconf_locale(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.repconf_locale.as_ref()
  }

  pub fn reset_repconf_locale(&mut self) {
    self.repconf_locale = None;
  }

  pub fn set_repconf_snapshots(&mut self, repconf_snapshots: ::models::ConfigNodePropertyString) {
    self.repconf_snapshots = Some(repconf_snapshots);
  }

  pub fn with_repconf_snapshots(mut self, repconf_snapshots: ::models::ConfigNodePropertyString) -> ComDayCqReportingImplConfigServiceImplProperties {
    self.repconf_snapshots = Some(repconf_snapshots);
    self
  }

  pub fn repconf_snapshots(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.repconf_snapshots.as_ref()
  }

  pub fn reset_repconf_snapshots(&mut self) {
    self.repconf_snapshots = None;
  }

  pub fn set_repconf_repdir(&mut self, repconf_repdir: ::models::ConfigNodePropertyString) {
    self.repconf_repdir = Some(repconf_repdir);
  }

  pub fn with_repconf_repdir(mut self, repconf_repdir: ::models::ConfigNodePropertyString) -> ComDayCqReportingImplConfigServiceImplProperties {
    self.repconf_repdir = Some(repconf_repdir);
    self
  }

  pub fn repconf_repdir(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.repconf_repdir.as_ref()
  }

  pub fn reset_repconf_repdir(&mut self) {
    self.repconf_repdir = None;
  }

  pub fn set_repconf_hourofday(&mut self, repconf_hourofday: ::models::ConfigNodePropertyInteger) {
    self.repconf_hourofday = Some(repconf_hourofday);
  }

  pub fn with_repconf_hourofday(mut self, repconf_hourofday: ::models::ConfigNodePropertyInteger) -> ComDayCqReportingImplConfigServiceImplProperties {
    self.repconf_hourofday = Some(repconf_hourofday);
    self
  }

  pub fn repconf_hourofday(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.repconf_hourofday.as_ref()
  }

  pub fn reset_repconf_hourofday(&mut self) {
    self.repconf_hourofday = None;
  }

  pub fn set_repconf_minofhour(&mut self, repconf_minofhour: ::models::ConfigNodePropertyInteger) {
    self.repconf_minofhour = Some(repconf_minofhour);
  }

  pub fn with_repconf_minofhour(mut self, repconf_minofhour: ::models::ConfigNodePropertyInteger) -> ComDayCqReportingImplConfigServiceImplProperties {
    self.repconf_minofhour = Some(repconf_minofhour);
    self
  }

  pub fn repconf_minofhour(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.repconf_minofhour.as_ref()
  }

  pub fn reset_repconf_minofhour(&mut self) {
    self.repconf_minofhour = None;
  }

  pub fn set_repconf_maxrows(&mut self, repconf_maxrows: ::models::ConfigNodePropertyInteger) {
    self.repconf_maxrows = Some(repconf_maxrows);
  }

  pub fn with_repconf_maxrows(mut self, repconf_maxrows: ::models::ConfigNodePropertyInteger) -> ComDayCqReportingImplConfigServiceImplProperties {
    self.repconf_maxrows = Some(repconf_maxrows);
    self
  }

  pub fn repconf_maxrows(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.repconf_maxrows.as_ref()
  }

  pub fn reset_repconf_maxrows(&mut self) {
    self.repconf_maxrows = None;
  }

  pub fn set_repconf_fakedata(&mut self, repconf_fakedata: ::models::ConfigNodePropertyBoolean) {
    self.repconf_fakedata = Some(repconf_fakedata);
  }

  pub fn with_repconf_fakedata(mut self, repconf_fakedata: ::models::ConfigNodePropertyBoolean) -> ComDayCqReportingImplConfigServiceImplProperties {
    self.repconf_fakedata = Some(repconf_fakedata);
    self
  }

  pub fn repconf_fakedata(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.repconf_fakedata.as_ref()
  }

  pub fn reset_repconf_fakedata(&mut self) {
    self.repconf_fakedata = None;
  }

  pub fn set_repconf_snapshotuser(&mut self, repconf_snapshotuser: ::models::ConfigNodePropertyString) {
    self.repconf_snapshotuser = Some(repconf_snapshotuser);
  }

  pub fn with_repconf_snapshotuser(mut self, repconf_snapshotuser: ::models::ConfigNodePropertyString) -> ComDayCqReportingImplConfigServiceImplProperties {
    self.repconf_snapshotuser = Some(repconf_snapshotuser);
    self
  }

  pub fn repconf_snapshotuser(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.repconf_snapshotuser.as_ref()
  }

  pub fn reset_repconf_snapshotuser(&mut self) {
    self.repconf_snapshotuser = None;
  }

  pub fn set_repconf_enforcesnapshotuser(&mut self, repconf_enforcesnapshotuser: ::models::ConfigNodePropertyBoolean) {
    self.repconf_enforcesnapshotuser = Some(repconf_enforcesnapshotuser);
  }

  pub fn with_repconf_enforcesnapshotuser(mut self, repconf_enforcesnapshotuser: ::models::ConfigNodePropertyBoolean) -> ComDayCqReportingImplConfigServiceImplProperties {
    self.repconf_enforcesnapshotuser = Some(repconf_enforcesnapshotuser);
    self
  }

  pub fn repconf_enforcesnapshotuser(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.repconf_enforcesnapshotuser.as_ref()
  }

  pub fn reset_repconf_enforcesnapshotuser(&mut self) {
    self.repconf_enforcesnapshotuser = None;
  }

}



