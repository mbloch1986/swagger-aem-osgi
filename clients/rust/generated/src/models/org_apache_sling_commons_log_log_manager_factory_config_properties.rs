/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties {
  #[serde(rename = "org.apache.sling.commons.log.level")]
  org_apache_sling_commons_log_level: Option<::models::ConfigNodePropertyDropDown>,
  #[serde(rename = "org.apache.sling.commons.log.file")]
  org_apache_sling_commons_log_file: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "org.apache.sling.commons.log.pattern")]
  org_apache_sling_commons_log_pattern: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "org.apache.sling.commons.log.names")]
  org_apache_sling_commons_log_names: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "org.apache.sling.commons.log.additiv")]
  org_apache_sling_commons_log_additiv: Option<::models::ConfigNodePropertyBoolean>
}

impl OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties {
  pub fn new() -> OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties {
    OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties {
      org_apache_sling_commons_log_level: None,
      org_apache_sling_commons_log_file: None,
      org_apache_sling_commons_log_pattern: None,
      org_apache_sling_commons_log_names: None,
      org_apache_sling_commons_log_additiv: None
    }
  }

  pub fn set_org_apache_sling_commons_log_level(&mut self, org_apache_sling_commons_log_level: ::models::ConfigNodePropertyDropDown) {
    self.org_apache_sling_commons_log_level = Some(org_apache_sling_commons_log_level);
  }

  pub fn with_org_apache_sling_commons_log_level(mut self, org_apache_sling_commons_log_level: ::models::ConfigNodePropertyDropDown) -> OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties {
    self.org_apache_sling_commons_log_level = Some(org_apache_sling_commons_log_level);
    self
  }

  pub fn org_apache_sling_commons_log_level(&self) -> Option<&::models::ConfigNodePropertyDropDown> {
    self.org_apache_sling_commons_log_level.as_ref()
  }

  pub fn reset_org_apache_sling_commons_log_level(&mut self) {
    self.org_apache_sling_commons_log_level = None;
  }

  pub fn set_org_apache_sling_commons_log_file(&mut self, org_apache_sling_commons_log_file: ::models::ConfigNodePropertyString) {
    self.org_apache_sling_commons_log_file = Some(org_apache_sling_commons_log_file);
  }

  pub fn with_org_apache_sling_commons_log_file(mut self, org_apache_sling_commons_log_file: ::models::ConfigNodePropertyString) -> OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties {
    self.org_apache_sling_commons_log_file = Some(org_apache_sling_commons_log_file);
    self
  }

  pub fn org_apache_sling_commons_log_file(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.org_apache_sling_commons_log_file.as_ref()
  }

  pub fn reset_org_apache_sling_commons_log_file(&mut self) {
    self.org_apache_sling_commons_log_file = None;
  }

  pub fn set_org_apache_sling_commons_log_pattern(&mut self, org_apache_sling_commons_log_pattern: ::models::ConfigNodePropertyString) {
    self.org_apache_sling_commons_log_pattern = Some(org_apache_sling_commons_log_pattern);
  }

  pub fn with_org_apache_sling_commons_log_pattern(mut self, org_apache_sling_commons_log_pattern: ::models::ConfigNodePropertyString) -> OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties {
    self.org_apache_sling_commons_log_pattern = Some(org_apache_sling_commons_log_pattern);
    self
  }

  pub fn org_apache_sling_commons_log_pattern(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.org_apache_sling_commons_log_pattern.as_ref()
  }

  pub fn reset_org_apache_sling_commons_log_pattern(&mut self) {
    self.org_apache_sling_commons_log_pattern = None;
  }

  pub fn set_org_apache_sling_commons_log_names(&mut self, org_apache_sling_commons_log_names: ::models::ConfigNodePropertyArray) {
    self.org_apache_sling_commons_log_names = Some(org_apache_sling_commons_log_names);
  }

  pub fn with_org_apache_sling_commons_log_names(mut self, org_apache_sling_commons_log_names: ::models::ConfigNodePropertyArray) -> OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties {
    self.org_apache_sling_commons_log_names = Some(org_apache_sling_commons_log_names);
    self
  }

  pub fn org_apache_sling_commons_log_names(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.org_apache_sling_commons_log_names.as_ref()
  }

  pub fn reset_org_apache_sling_commons_log_names(&mut self) {
    self.org_apache_sling_commons_log_names = None;
  }

  pub fn set_org_apache_sling_commons_log_additiv(&mut self, org_apache_sling_commons_log_additiv: ::models::ConfigNodePropertyBoolean) {
    self.org_apache_sling_commons_log_additiv = Some(org_apache_sling_commons_log_additiv);
  }

  pub fn with_org_apache_sling_commons_log_additiv(mut self, org_apache_sling_commons_log_additiv: ::models::ConfigNodePropertyBoolean) -> OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties {
    self.org_apache_sling_commons_log_additiv = Some(org_apache_sling_commons_log_additiv);
    self
  }

  pub fn org_apache_sling_commons_log_additiv(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.org_apache_sling_commons_log_additiv.as_ref()
  }

  pub fn reset_org_apache_sling_commons_log_additiv(&mut self) {
    self.org_apache_sling_commons_log_additiv = None;
  }

}



