/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrgApacheFelixEventadminImplEventAdminProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheFelixEventadminImplEventAdminProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheFelixEventadminImplEventAdminProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyFloat.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  OrgApacheFelixEventadminImplEventAdminProperties
    : public ModelBase
{
public:
    OrgApacheFelixEventadminImplEventAdminProperties();
    virtual ~OrgApacheFelixEventadminImplEventAdminProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// OrgApacheFelixEventadminImplEventAdminProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getOrgApacheFelixEventadminThreadPoolSize() const;
    bool orgApacheFelixEventadminThreadPoolSizeIsSet() const;
    void unsetOrg_apache_felix_eventadmin_ThreadPoolSize();
    void setOrgApacheFelixEventadminThreadPoolSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyFloat> getOrgApacheFelixEventadminAsyncToSyncThreadRatio() const;
    bool orgApacheFelixEventadminAsyncToSyncThreadRatioIsSet() const;
    void unsetOrg_apache_felix_eventadmin_AsyncToSyncThreadRatio();
    void setOrgApacheFelixEventadminAsyncToSyncThreadRatio(std::shared_ptr<ConfigNodePropertyFloat> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getOrgApacheFelixEventadminTimeout() const;
    bool orgApacheFelixEventadminTimeoutIsSet() const;
    void unsetOrg_apache_felix_eventadmin_Timeout();
    void setOrgApacheFelixEventadminTimeout(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getOrgApacheFelixEventadminRequireTopic() const;
    bool orgApacheFelixEventadminRequireTopicIsSet() const;
    void unsetOrg_apache_felix_eventadmin_RequireTopic();
    void setOrgApacheFelixEventadminRequireTopic(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getOrgApacheFelixEventadminIgnoreTimeout() const;
    bool orgApacheFelixEventadminIgnoreTimeoutIsSet() const;
    void unsetOrg_apache_felix_eventadmin_IgnoreTimeout();
    void setOrgApacheFelixEventadminIgnoreTimeout(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getOrgApacheFelixEventadminIgnoreTopic() const;
    bool orgApacheFelixEventadminIgnoreTopicIsSet() const;
    void unsetOrg_apache_felix_eventadmin_IgnoreTopic();
    void setOrgApacheFelixEventadminIgnoreTopic(std::shared_ptr<ConfigNodePropertyArray> value);

protected:
    std::shared_ptr<ConfigNodePropertyInteger> m_Org_apache_felix_eventadmin_ThreadPoolSize;
    bool m_Org_apache_felix_eventadmin_ThreadPoolSizeIsSet;
    std::shared_ptr<ConfigNodePropertyFloat> m_Org_apache_felix_eventadmin_AsyncToSyncThreadRatio;
    bool m_Org_apache_felix_eventadmin_AsyncToSyncThreadRatioIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Org_apache_felix_eventadmin_Timeout;
    bool m_Org_apache_felix_eventadmin_TimeoutIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Org_apache_felix_eventadmin_RequireTopic;
    bool m_Org_apache_felix_eventadmin_RequireTopicIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_Org_apache_felix_eventadmin_IgnoreTimeout;
    bool m_Org_apache_felix_eventadmin_IgnoreTimeoutIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_Org_apache_felix_eventadmin_IgnoreTopic;
    bool m_Org_apache_felix_eventadmin_IgnoreTopicIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheFelixEventadminImplEventAdminProperties_H_ */
