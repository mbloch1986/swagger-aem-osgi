/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqDamCoreImplServletCollectionServletProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqDamCoreImplServletCollectionServletProperties::OAIComDayCqDamCoreImplServletCollectionServletProperties(QString json) {
    this->fromJson(json);
}

OAIComDayCqDamCoreImplServletCollectionServletProperties::OAIComDayCqDamCoreImplServletCollectionServletProperties() {
    this->init();
}

OAIComDayCqDamCoreImplServletCollectionServletProperties::~OAIComDayCqDamCoreImplServletCollectionServletProperties() {
    
}

void
OAIComDayCqDamCoreImplServletCollectionServletProperties::init() {
    m_cq_dam_batch_collection_properties_isSet = false;
    m_cq_dam_batch_collection_maxcollections_isSet = false;
}

void
OAIComDayCqDamCoreImplServletCollectionServletProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComDayCqDamCoreImplServletCollectionServletProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(cq_dam_batch_collection_properties, json[QString("cq.dam.batch.collection.properties")]);
    
    ::OpenAPI::fromJsonValue(cq_dam_batch_collection_maxcollections, json[QString("cq.dam.batch.collection.maxcollections")]);
    
}

QString
OAIComDayCqDamCoreImplServletCollectionServletProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqDamCoreImplServletCollectionServletProperties::asJsonObject() const {
    QJsonObject obj;
	if(cq_dam_batch_collection_properties.isSet()){
        obj.insert(QString("cq.dam.batch.collection.properties"), ::OpenAPI::toJsonValue(cq_dam_batch_collection_properties));
    }
	if(cq_dam_batch_collection_maxcollections.isSet()){
        obj.insert(QString("cq.dam.batch.collection.maxcollections"), ::OpenAPI::toJsonValue(cq_dam_batch_collection_maxcollections));
    }
    return obj;
}

OAIConfigNodePropertyArray
OAIComDayCqDamCoreImplServletCollectionServletProperties::getCqDamBatchCollectionProperties() const {
    return cq_dam_batch_collection_properties;
}
void
OAIComDayCqDamCoreImplServletCollectionServletProperties::setCqDamBatchCollectionProperties(const OAIConfigNodePropertyArray &cq_dam_batch_collection_properties) {
    this->cq_dam_batch_collection_properties = cq_dam_batch_collection_properties;
    this->m_cq_dam_batch_collection_properties_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComDayCqDamCoreImplServletCollectionServletProperties::getCqDamBatchCollectionMaxcollections() const {
    return cq_dam_batch_collection_maxcollections;
}
void
OAIComDayCqDamCoreImplServletCollectionServletProperties::setCqDamBatchCollectionMaxcollections(const OAIConfigNodePropertyInteger &cq_dam_batch_collection_maxcollections) {
    this->cq_dam_batch_collection_maxcollections = cq_dam_batch_collection_maxcollections;
    this->m_cq_dam_batch_collection_maxcollections_isSet = true;
}


bool
OAIComDayCqDamCoreImplServletCollectionServletProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(cq_dam_batch_collection_properties.isSet()){ isObjectUpdated = true; break;}
    
        if(cq_dam_batch_collection_maxcollections.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

