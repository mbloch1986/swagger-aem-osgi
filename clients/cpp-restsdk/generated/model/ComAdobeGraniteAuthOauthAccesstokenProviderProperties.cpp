/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeGraniteAuthOauthAccesstokenProviderProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeGraniteAuthOauthAccesstokenProviderProperties::ComAdobeGraniteAuthOauthAccesstokenProviderProperties()
{
    m_NameIsSet = false;
    m_Auth_token_provider_titleIsSet = false;
    m_Auth_token_provider_default_claimsIsSet = false;
    m_Auth_token_provider_endpointIsSet = false;
    m_Auth_access_token_requestIsSet = false;
    m_Auth_token_provider_keypair_aliasIsSet = false;
    m_Auth_token_provider_conn_timeoutIsSet = false;
    m_Auth_token_provider_so_timeoutIsSet = false;
    m_Auth_token_provider_client_idIsSet = false;
    m_Auth_token_provider_scopeIsSet = false;
    m_Auth_token_provider_reuse_access_tokenIsSet = false;
    m_Auth_token_provider_relaxed_sslIsSet = false;
    m_Token_request_customizer_typeIsSet = false;
    m_Auth_token_validator_typeIsSet = false;
}

ComAdobeGraniteAuthOauthAccesstokenProviderProperties::~ComAdobeGraniteAuthOauthAccesstokenProviderProperties()
{
}

void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeGraniteAuthOauthAccesstokenProviderProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_Auth_token_provider_titleIsSet)
    {
        val[utility::conversions::to_string_t("auth.token.provider.title")] = ModelBase::toJson(m_Auth_token_provider_title);
    }
    if(m_Auth_token_provider_default_claimsIsSet)
    {
        val[utility::conversions::to_string_t("auth.token.provider.default.claims")] = ModelBase::toJson(m_Auth_token_provider_default_claims);
    }
    if(m_Auth_token_provider_endpointIsSet)
    {
        val[utility::conversions::to_string_t("auth.token.provider.endpoint")] = ModelBase::toJson(m_Auth_token_provider_endpoint);
    }
    if(m_Auth_access_token_requestIsSet)
    {
        val[utility::conversions::to_string_t("auth.access.token.request")] = ModelBase::toJson(m_Auth_access_token_request);
    }
    if(m_Auth_token_provider_keypair_aliasIsSet)
    {
        val[utility::conversions::to_string_t("auth.token.provider.keypair.alias")] = ModelBase::toJson(m_Auth_token_provider_keypair_alias);
    }
    if(m_Auth_token_provider_conn_timeoutIsSet)
    {
        val[utility::conversions::to_string_t("auth.token.provider.conn.timeout")] = ModelBase::toJson(m_Auth_token_provider_conn_timeout);
    }
    if(m_Auth_token_provider_so_timeoutIsSet)
    {
        val[utility::conversions::to_string_t("auth.token.provider.so.timeout")] = ModelBase::toJson(m_Auth_token_provider_so_timeout);
    }
    if(m_Auth_token_provider_client_idIsSet)
    {
        val[utility::conversions::to_string_t("auth.token.provider.client.id")] = ModelBase::toJson(m_Auth_token_provider_client_id);
    }
    if(m_Auth_token_provider_scopeIsSet)
    {
        val[utility::conversions::to_string_t("auth.token.provider.scope")] = ModelBase::toJson(m_Auth_token_provider_scope);
    }
    if(m_Auth_token_provider_reuse_access_tokenIsSet)
    {
        val[utility::conversions::to_string_t("auth.token.provider.reuse.access.token")] = ModelBase::toJson(m_Auth_token_provider_reuse_access_token);
    }
    if(m_Auth_token_provider_relaxed_sslIsSet)
    {
        val[utility::conversions::to_string_t("auth.token.provider.relaxed.ssl")] = ModelBase::toJson(m_Auth_token_provider_relaxed_ssl);
    }
    if(m_Token_request_customizer_typeIsSet)
    {
        val[utility::conversions::to_string_t("token.request.customizer.type")] = ModelBase::toJson(m_Token_request_customizer_type);
    }
    if(m_Auth_token_validator_typeIsSet)
    {
        val[utility::conversions::to_string_t("auth.token.validator.type")] = ModelBase::toJson(m_Auth_token_validator_type);
    }

    return val;
}

void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        if(!val[utility::conversions::to_string_t("name")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("name")]);
            setName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("auth.token.provider.title")))
    {
        if(!val[utility::conversions::to_string_t("auth.token.provider.title")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("auth.token.provider.title")]);
            setAuthTokenProviderTitle( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("auth.token.provider.default.claims")))
    {
        if(!val[utility::conversions::to_string_t("auth.token.provider.default.claims")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("auth.token.provider.default.claims")]);
            setAuthTokenProviderDefaultClaims( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("auth.token.provider.endpoint")))
    {
        if(!val[utility::conversions::to_string_t("auth.token.provider.endpoint")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("auth.token.provider.endpoint")]);
            setAuthTokenProviderEndpoint( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("auth.access.token.request")))
    {
        if(!val[utility::conversions::to_string_t("auth.access.token.request")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("auth.access.token.request")]);
            setAuthAccessTokenRequest( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("auth.token.provider.keypair.alias")))
    {
        if(!val[utility::conversions::to_string_t("auth.token.provider.keypair.alias")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("auth.token.provider.keypair.alias")]);
            setAuthTokenProviderKeypairAlias( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("auth.token.provider.conn.timeout")))
    {
        if(!val[utility::conversions::to_string_t("auth.token.provider.conn.timeout")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("auth.token.provider.conn.timeout")]);
            setAuthTokenProviderConnTimeout( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("auth.token.provider.so.timeout")))
    {
        if(!val[utility::conversions::to_string_t("auth.token.provider.so.timeout")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("auth.token.provider.so.timeout")]);
            setAuthTokenProviderSoTimeout( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("auth.token.provider.client.id")))
    {
        if(!val[utility::conversions::to_string_t("auth.token.provider.client.id")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("auth.token.provider.client.id")]);
            setAuthTokenProviderClientId( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("auth.token.provider.scope")))
    {
        if(!val[utility::conversions::to_string_t("auth.token.provider.scope")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("auth.token.provider.scope")]);
            setAuthTokenProviderScope( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("auth.token.provider.reuse.access.token")))
    {
        if(!val[utility::conversions::to_string_t("auth.token.provider.reuse.access.token")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("auth.token.provider.reuse.access.token")]);
            setAuthTokenProviderReuseAccessToken( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("auth.token.provider.relaxed.ssl")))
    {
        if(!val[utility::conversions::to_string_t("auth.token.provider.relaxed.ssl")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("auth.token.provider.relaxed.ssl")]);
            setAuthTokenProviderRelaxedSsl( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("token.request.customizer.type")))
    {
        if(!val[utility::conversions::to_string_t("token.request.customizer.type")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("token.request.customizer.type")]);
            setTokenRequestCustomizerType( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("auth.token.validator.type")))
    {
        if(!val[utility::conversions::to_string_t("auth.token.validator.type")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("auth.token.validator.type")]);
            setAuthTokenValidatorType( newItem );
        }
    }
}

void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_NameIsSet)
    {
        if (m_Name.get())
        {
            m_Name->toMultipart(multipart, utility::conversions::to_string_t("name."));
        }
    }
    if(m_Auth_token_provider_titleIsSet)
    {
        if (m_Auth_token_provider_title.get())
        {
            m_Auth_token_provider_title->toMultipart(multipart, utility::conversions::to_string_t("auth.token.provider.title."));
        }
    }
    if(m_Auth_token_provider_default_claimsIsSet)
    {
        if (m_Auth_token_provider_default_claims.get())
        {
            m_Auth_token_provider_default_claims->toMultipart(multipart, utility::conversions::to_string_t("auth.token.provider.default.claims."));
        }
    }
    if(m_Auth_token_provider_endpointIsSet)
    {
        if (m_Auth_token_provider_endpoint.get())
        {
            m_Auth_token_provider_endpoint->toMultipart(multipart, utility::conversions::to_string_t("auth.token.provider.endpoint."));
        }
    }
    if(m_Auth_access_token_requestIsSet)
    {
        if (m_Auth_access_token_request.get())
        {
            m_Auth_access_token_request->toMultipart(multipart, utility::conversions::to_string_t("auth.access.token.request."));
        }
    }
    if(m_Auth_token_provider_keypair_aliasIsSet)
    {
        if (m_Auth_token_provider_keypair_alias.get())
        {
            m_Auth_token_provider_keypair_alias->toMultipart(multipart, utility::conversions::to_string_t("auth.token.provider.keypair.alias."));
        }
    }
    if(m_Auth_token_provider_conn_timeoutIsSet)
    {
        if (m_Auth_token_provider_conn_timeout.get())
        {
            m_Auth_token_provider_conn_timeout->toMultipart(multipart, utility::conversions::to_string_t("auth.token.provider.conn.timeout."));
        }
    }
    if(m_Auth_token_provider_so_timeoutIsSet)
    {
        if (m_Auth_token_provider_so_timeout.get())
        {
            m_Auth_token_provider_so_timeout->toMultipart(multipart, utility::conversions::to_string_t("auth.token.provider.so.timeout."));
        }
    }
    if(m_Auth_token_provider_client_idIsSet)
    {
        if (m_Auth_token_provider_client_id.get())
        {
            m_Auth_token_provider_client_id->toMultipart(multipart, utility::conversions::to_string_t("auth.token.provider.client.id."));
        }
    }
    if(m_Auth_token_provider_scopeIsSet)
    {
        if (m_Auth_token_provider_scope.get())
        {
            m_Auth_token_provider_scope->toMultipart(multipart, utility::conversions::to_string_t("auth.token.provider.scope."));
        }
    }
    if(m_Auth_token_provider_reuse_access_tokenIsSet)
    {
        if (m_Auth_token_provider_reuse_access_token.get())
        {
            m_Auth_token_provider_reuse_access_token->toMultipart(multipart, utility::conversions::to_string_t("auth.token.provider.reuse.access.token."));
        }
    }
    if(m_Auth_token_provider_relaxed_sslIsSet)
    {
        if (m_Auth_token_provider_relaxed_ssl.get())
        {
            m_Auth_token_provider_relaxed_ssl->toMultipart(multipart, utility::conversions::to_string_t("auth.token.provider.relaxed.ssl."));
        }
    }
    if(m_Token_request_customizer_typeIsSet)
    {
        if (m_Token_request_customizer_type.get())
        {
            m_Token_request_customizer_type->toMultipart(multipart, utility::conversions::to_string_t("token.request.customizer.type."));
        }
    }
    if(m_Auth_token_validator_typeIsSet)
    {
        if (m_Auth_token_validator_type.get())
        {
            m_Auth_token_validator_type->toMultipart(multipart, utility::conversions::to_string_t("auth.token.validator.type."));
        }
    }
}

void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("name")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("name."));
            setName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("auth.token.provider.title")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("auth.token.provider.title")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("auth.token.provider.title."));
            setAuthTokenProviderTitle( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("auth.token.provider.default.claims")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("auth.token.provider.default.claims")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("auth.token.provider.default.claims."));
            setAuthTokenProviderDefaultClaims( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("auth.token.provider.endpoint")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("auth.token.provider.endpoint")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("auth.token.provider.endpoint."));
            setAuthTokenProviderEndpoint( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("auth.access.token.request")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("auth.access.token.request")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("auth.access.token.request."));
            setAuthAccessTokenRequest( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("auth.token.provider.keypair.alias")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("auth.token.provider.keypair.alias")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("auth.token.provider.keypair.alias."));
            setAuthTokenProviderKeypairAlias( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("auth.token.provider.conn.timeout")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("auth.token.provider.conn.timeout")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("auth.token.provider.conn.timeout."));
            setAuthTokenProviderConnTimeout( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("auth.token.provider.so.timeout")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("auth.token.provider.so.timeout")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("auth.token.provider.so.timeout."));
            setAuthTokenProviderSoTimeout( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("auth.token.provider.client.id")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("auth.token.provider.client.id")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("auth.token.provider.client.id."));
            setAuthTokenProviderClientId( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("auth.token.provider.scope")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("auth.token.provider.scope")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("auth.token.provider.scope."));
            setAuthTokenProviderScope( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("auth.token.provider.reuse.access.token")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("auth.token.provider.reuse.access.token")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("auth.token.provider.reuse.access.token."));
            setAuthTokenProviderReuseAccessToken( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("auth.token.provider.relaxed.ssl")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("auth.token.provider.relaxed.ssl")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("auth.token.provider.relaxed.ssl."));
            setAuthTokenProviderRelaxedSsl( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("token.request.customizer.type")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("token.request.customizer.type")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("token.request.customizer.type."));
            setTokenRequestCustomizerType( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("auth.token.validator.type")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("auth.token.validator.type")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("auth.token.validator.type."));
            setAuthTokenValidatorType( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteAuthOauthAccesstokenProviderProperties::getName() const
{
    return m_Name;
}


void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::setName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool ComAdobeGraniteAuthOauthAccesstokenProviderProperties::nameIsSet() const
{
    return m_NameIsSet;
}

void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::unsetName()
{
    m_NameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteAuthOauthAccesstokenProviderProperties::getAuthTokenProviderTitle() const
{
    return m_Auth_token_provider_title;
}


void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::setAuthTokenProviderTitle(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Auth_token_provider_title = value;
    m_Auth_token_provider_titleIsSet = true;
}
bool ComAdobeGraniteAuthOauthAccesstokenProviderProperties::authTokenProviderTitleIsSet() const
{
    return m_Auth_token_provider_titleIsSet;
}

void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::unsetAuth_token_provider_title()
{
    m_Auth_token_provider_titleIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeGraniteAuthOauthAccesstokenProviderProperties::getAuthTokenProviderDefaultClaims() const
{
    return m_Auth_token_provider_default_claims;
}


void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::setAuthTokenProviderDefaultClaims(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Auth_token_provider_default_claims = value;
    m_Auth_token_provider_default_claimsIsSet = true;
}
bool ComAdobeGraniteAuthOauthAccesstokenProviderProperties::authTokenProviderDefaultClaimsIsSet() const
{
    return m_Auth_token_provider_default_claimsIsSet;
}

void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::unsetAuth_token_provider_default_claims()
{
    m_Auth_token_provider_default_claimsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteAuthOauthAccesstokenProviderProperties::getAuthTokenProviderEndpoint() const
{
    return m_Auth_token_provider_endpoint;
}


void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::setAuthTokenProviderEndpoint(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Auth_token_provider_endpoint = value;
    m_Auth_token_provider_endpointIsSet = true;
}
bool ComAdobeGraniteAuthOauthAccesstokenProviderProperties::authTokenProviderEndpointIsSet() const
{
    return m_Auth_token_provider_endpointIsSet;
}

void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::unsetAuth_token_provider_endpoint()
{
    m_Auth_token_provider_endpointIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteAuthOauthAccesstokenProviderProperties::getAuthAccessTokenRequest() const
{
    return m_Auth_access_token_request;
}


void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::setAuthAccessTokenRequest(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Auth_access_token_request = value;
    m_Auth_access_token_requestIsSet = true;
}
bool ComAdobeGraniteAuthOauthAccesstokenProviderProperties::authAccessTokenRequestIsSet() const
{
    return m_Auth_access_token_requestIsSet;
}

void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::unsetAuth_access_token_request()
{
    m_Auth_access_token_requestIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteAuthOauthAccesstokenProviderProperties::getAuthTokenProviderKeypairAlias() const
{
    return m_Auth_token_provider_keypair_alias;
}


void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::setAuthTokenProviderKeypairAlias(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Auth_token_provider_keypair_alias = value;
    m_Auth_token_provider_keypair_aliasIsSet = true;
}
bool ComAdobeGraniteAuthOauthAccesstokenProviderProperties::authTokenProviderKeypairAliasIsSet() const
{
    return m_Auth_token_provider_keypair_aliasIsSet;
}

void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::unsetAuth_token_provider_keypair_alias()
{
    m_Auth_token_provider_keypair_aliasIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeGraniteAuthOauthAccesstokenProviderProperties::getAuthTokenProviderConnTimeout() const
{
    return m_Auth_token_provider_conn_timeout;
}


void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::setAuthTokenProviderConnTimeout(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Auth_token_provider_conn_timeout = value;
    m_Auth_token_provider_conn_timeoutIsSet = true;
}
bool ComAdobeGraniteAuthOauthAccesstokenProviderProperties::authTokenProviderConnTimeoutIsSet() const
{
    return m_Auth_token_provider_conn_timeoutIsSet;
}

void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::unsetAuth_token_provider_conn_timeout()
{
    m_Auth_token_provider_conn_timeoutIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeGraniteAuthOauthAccesstokenProviderProperties::getAuthTokenProviderSoTimeout() const
{
    return m_Auth_token_provider_so_timeout;
}


void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::setAuthTokenProviderSoTimeout(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Auth_token_provider_so_timeout = value;
    m_Auth_token_provider_so_timeoutIsSet = true;
}
bool ComAdobeGraniteAuthOauthAccesstokenProviderProperties::authTokenProviderSoTimeoutIsSet() const
{
    return m_Auth_token_provider_so_timeoutIsSet;
}

void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::unsetAuth_token_provider_so_timeout()
{
    m_Auth_token_provider_so_timeoutIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteAuthOauthAccesstokenProviderProperties::getAuthTokenProviderClientId() const
{
    return m_Auth_token_provider_client_id;
}


void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::setAuthTokenProviderClientId(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Auth_token_provider_client_id = value;
    m_Auth_token_provider_client_idIsSet = true;
}
bool ComAdobeGraniteAuthOauthAccesstokenProviderProperties::authTokenProviderClientIdIsSet() const
{
    return m_Auth_token_provider_client_idIsSet;
}

void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::unsetAuth_token_provider_client_id()
{
    m_Auth_token_provider_client_idIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteAuthOauthAccesstokenProviderProperties::getAuthTokenProviderScope() const
{
    return m_Auth_token_provider_scope;
}


void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::setAuthTokenProviderScope(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Auth_token_provider_scope = value;
    m_Auth_token_provider_scopeIsSet = true;
}
bool ComAdobeGraniteAuthOauthAccesstokenProviderProperties::authTokenProviderScopeIsSet() const
{
    return m_Auth_token_provider_scopeIsSet;
}

void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::unsetAuth_token_provider_scope()
{
    m_Auth_token_provider_scopeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeGraniteAuthOauthAccesstokenProviderProperties::getAuthTokenProviderReuseAccessToken() const
{
    return m_Auth_token_provider_reuse_access_token;
}


void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::setAuthTokenProviderReuseAccessToken(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Auth_token_provider_reuse_access_token = value;
    m_Auth_token_provider_reuse_access_tokenIsSet = true;
}
bool ComAdobeGraniteAuthOauthAccesstokenProviderProperties::authTokenProviderReuseAccessTokenIsSet() const
{
    return m_Auth_token_provider_reuse_access_tokenIsSet;
}

void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::unsetAuth_token_provider_reuse_access_token()
{
    m_Auth_token_provider_reuse_access_tokenIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeGraniteAuthOauthAccesstokenProviderProperties::getAuthTokenProviderRelaxedSsl() const
{
    return m_Auth_token_provider_relaxed_ssl;
}


void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::setAuthTokenProviderRelaxedSsl(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Auth_token_provider_relaxed_ssl = value;
    m_Auth_token_provider_relaxed_sslIsSet = true;
}
bool ComAdobeGraniteAuthOauthAccesstokenProviderProperties::authTokenProviderRelaxedSslIsSet() const
{
    return m_Auth_token_provider_relaxed_sslIsSet;
}

void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::unsetAuth_token_provider_relaxed_ssl()
{
    m_Auth_token_provider_relaxed_sslIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteAuthOauthAccesstokenProviderProperties::getTokenRequestCustomizerType() const
{
    return m_Token_request_customizer_type;
}


void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::setTokenRequestCustomizerType(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Token_request_customizer_type = value;
    m_Token_request_customizer_typeIsSet = true;
}
bool ComAdobeGraniteAuthOauthAccesstokenProviderProperties::tokenRequestCustomizerTypeIsSet() const
{
    return m_Token_request_customizer_typeIsSet;
}

void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::unsetToken_request_customizer_type()
{
    m_Token_request_customizer_typeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteAuthOauthAccesstokenProviderProperties::getAuthTokenValidatorType() const
{
    return m_Auth_token_validator_type;
}


void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::setAuthTokenValidatorType(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Auth_token_validator_type = value;
    m_Auth_token_validator_typeIsSet = true;
}
bool ComAdobeGraniteAuthOauthAccesstokenProviderProperties::authTokenValidatorTypeIsSet() const
{
    return m_Auth_token_validator_typeIsSet;
}

void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::unsetAuth_token_validator_type()
{
    m_Auth_token_validator_typeIsSet = false;
}

}
}
}
}

