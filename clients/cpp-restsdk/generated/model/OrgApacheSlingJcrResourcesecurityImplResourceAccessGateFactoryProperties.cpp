/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryProperties::OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryProperties()
{
    m_PathIsSet = false;
    m_Checkpath_prefixIsSet = false;
    m_JcrPathIsSet = false;
}

OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryProperties::~OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryProperties()
{
}

void OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_PathIsSet)
    {
        val[utility::conversions::to_string_t("path")] = ModelBase::toJson(m_Path);
    }
    if(m_Checkpath_prefixIsSet)
    {
        val[utility::conversions::to_string_t("checkpath.prefix")] = ModelBase::toJson(m_Checkpath_prefix);
    }
    if(m_JcrPathIsSet)
    {
        val[utility::conversions::to_string_t("jcrPath")] = ModelBase::toJson(m_JcrPath);
    }

    return val;
}

void OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("path")))
    {
        if(!val[utility::conversions::to_string_t("path")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("path")]);
            setPath( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("checkpath.prefix")))
    {
        if(!val[utility::conversions::to_string_t("checkpath.prefix")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("checkpath.prefix")]);
            setCheckpathPrefix( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("jcrPath")))
    {
        if(!val[utility::conversions::to_string_t("jcrPath")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("jcrPath")]);
            setJcrPath( newItem );
        }
    }
}

void OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_PathIsSet)
    {
        if (m_Path.get())
        {
            m_Path->toMultipart(multipart, utility::conversions::to_string_t("path."));
        }
    }
    if(m_Checkpath_prefixIsSet)
    {
        if (m_Checkpath_prefix.get())
        {
            m_Checkpath_prefix->toMultipart(multipart, utility::conversions::to_string_t("checkpath.prefix."));
        }
    }
    if(m_JcrPathIsSet)
    {
        if (m_JcrPath.get())
        {
            m_JcrPath->toMultipart(multipart, utility::conversions::to_string_t("jcrPath."));
        }
    }
}

void OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("path")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("path")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("path."));
            setPath( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("checkpath.prefix")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("checkpath.prefix")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("checkpath.prefix."));
            setCheckpathPrefix( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("jcrPath")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("jcrPath")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("jcrPath."));
            setJcrPath( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryProperties::getPath() const
{
    return m_Path;
}


void OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryProperties::setPath(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Path = value;
    m_PathIsSet = true;
}
bool OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryProperties::pathIsSet() const
{
    return m_PathIsSet;
}

void OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryProperties::unsetPath()
{
    m_PathIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryProperties::getCheckpathPrefix() const
{
    return m_Checkpath_prefix;
}


void OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryProperties::setCheckpathPrefix(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Checkpath_prefix = value;
    m_Checkpath_prefixIsSet = true;
}
bool OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryProperties::checkpathPrefixIsSet() const
{
    return m_Checkpath_prefixIsSet;
}

void OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryProperties::unsetCheckpath_prefix()
{
    m_Checkpath_prefixIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryProperties::getJcrPath() const
{
    return m_JcrPath;
}


void OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryProperties::setJcrPath(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_JcrPath = value;
    m_JcrPathIsSet = true;
}
bool OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryProperties::jcrPathIsSet() const
{
    return m_JcrPathIsSet;
}

void OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryProperties::unsetJcrPath()
{
    m_JcrPathIsSet = false;
}

}
}
}
}

