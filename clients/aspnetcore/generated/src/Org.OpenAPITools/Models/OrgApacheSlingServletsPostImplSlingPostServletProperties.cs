/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OrgApacheSlingServletsPostImplSlingPostServletProperties : IEquatable<OrgApacheSlingServletsPostImplSlingPostServletProperties>
    { 
        /// <summary>
        /// Gets or Sets ServletPostDateFormats
        /// </summary>
        [DataMember(Name="servlet.post.dateFormats")]
        public ConfigNodePropertyArray ServletPostDateFormats { get; set; }

        /// <summary>
        /// Gets or Sets ServletPostNodeNameHints
        /// </summary>
        [DataMember(Name="servlet.post.nodeNameHints")]
        public ConfigNodePropertyArray ServletPostNodeNameHints { get; set; }

        /// <summary>
        /// Gets or Sets ServletPostNodeNameMaxLength
        /// </summary>
        [DataMember(Name="servlet.post.nodeNameMaxLength")]
        public ConfigNodePropertyInteger ServletPostNodeNameMaxLength { get; set; }

        /// <summary>
        /// Gets or Sets ServletPostCheckinNewVersionableNodes
        /// </summary>
        [DataMember(Name="servlet.post.checkinNewVersionableNodes")]
        public ConfigNodePropertyBoolean ServletPostCheckinNewVersionableNodes { get; set; }

        /// <summary>
        /// Gets or Sets ServletPostAutoCheckout
        /// </summary>
        [DataMember(Name="servlet.post.autoCheckout")]
        public ConfigNodePropertyBoolean ServletPostAutoCheckout { get; set; }

        /// <summary>
        /// Gets or Sets ServletPostAutoCheckin
        /// </summary>
        [DataMember(Name="servlet.post.autoCheckin")]
        public ConfigNodePropertyBoolean ServletPostAutoCheckin { get; set; }

        /// <summary>
        /// Gets or Sets ServletPostIgnorePattern
        /// </summary>
        [DataMember(Name="servlet.post.ignorePattern")]
        public ConfigNodePropertyString ServletPostIgnorePattern { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheSlingServletsPostImplSlingPostServletProperties {\n");
            sb.Append("  ServletPostDateFormats: ").Append(ServletPostDateFormats).Append("\n");
            sb.Append("  ServletPostNodeNameHints: ").Append(ServletPostNodeNameHints).Append("\n");
            sb.Append("  ServletPostNodeNameMaxLength: ").Append(ServletPostNodeNameMaxLength).Append("\n");
            sb.Append("  ServletPostCheckinNewVersionableNodes: ").Append(ServletPostCheckinNewVersionableNodes).Append("\n");
            sb.Append("  ServletPostAutoCheckout: ").Append(ServletPostAutoCheckout).Append("\n");
            sb.Append("  ServletPostAutoCheckin: ").Append(ServletPostAutoCheckin).Append("\n");
            sb.Append("  ServletPostIgnorePattern: ").Append(ServletPostIgnorePattern).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrgApacheSlingServletsPostImplSlingPostServletProperties)obj);
        }

        /// <summary>
        /// Returns true if OrgApacheSlingServletsPostImplSlingPostServletProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of OrgApacheSlingServletsPostImplSlingPostServletProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheSlingServletsPostImplSlingPostServletProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ServletPostDateFormats == other.ServletPostDateFormats ||
                    ServletPostDateFormats != null &&
                    ServletPostDateFormats.Equals(other.ServletPostDateFormats)
                ) && 
                (
                    ServletPostNodeNameHints == other.ServletPostNodeNameHints ||
                    ServletPostNodeNameHints != null &&
                    ServletPostNodeNameHints.Equals(other.ServletPostNodeNameHints)
                ) && 
                (
                    ServletPostNodeNameMaxLength == other.ServletPostNodeNameMaxLength ||
                    ServletPostNodeNameMaxLength != null &&
                    ServletPostNodeNameMaxLength.Equals(other.ServletPostNodeNameMaxLength)
                ) && 
                (
                    ServletPostCheckinNewVersionableNodes == other.ServletPostCheckinNewVersionableNodes ||
                    ServletPostCheckinNewVersionableNodes != null &&
                    ServletPostCheckinNewVersionableNodes.Equals(other.ServletPostCheckinNewVersionableNodes)
                ) && 
                (
                    ServletPostAutoCheckout == other.ServletPostAutoCheckout ||
                    ServletPostAutoCheckout != null &&
                    ServletPostAutoCheckout.Equals(other.ServletPostAutoCheckout)
                ) && 
                (
                    ServletPostAutoCheckin == other.ServletPostAutoCheckin ||
                    ServletPostAutoCheckin != null &&
                    ServletPostAutoCheckin.Equals(other.ServletPostAutoCheckin)
                ) && 
                (
                    ServletPostIgnorePattern == other.ServletPostIgnorePattern ||
                    ServletPostIgnorePattern != null &&
                    ServletPostIgnorePattern.Equals(other.ServletPostIgnorePattern)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ServletPostDateFormats != null)
                    hashCode = hashCode * 59 + ServletPostDateFormats.GetHashCode();
                    if (ServletPostNodeNameHints != null)
                    hashCode = hashCode * 59 + ServletPostNodeNameHints.GetHashCode();
                    if (ServletPostNodeNameMaxLength != null)
                    hashCode = hashCode * 59 + ServletPostNodeNameMaxLength.GetHashCode();
                    if (ServletPostCheckinNewVersionableNodes != null)
                    hashCode = hashCode * 59 + ServletPostCheckinNewVersionableNodes.GetHashCode();
                    if (ServletPostAutoCheckout != null)
                    hashCode = hashCode * 59 + ServletPostAutoCheckout.GetHashCode();
                    if (ServletPostAutoCheckin != null)
                    hashCode = hashCode * 59 + ServletPostAutoCheckin.GetHashCode();
                    if (ServletPostIgnorePattern != null)
                    hashCode = hashCode * 59 + ServletPostIgnorePattern.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrgApacheSlingServletsPostImplSlingPostServletProperties left, OrgApacheSlingServletsPostImplSlingPostServletProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrgApacheSlingServletsPostImplSlingPostServletProperties left, OrgApacheSlingServletsPostImplSlingPostServletProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
