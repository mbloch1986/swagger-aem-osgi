<?php
/**
 * ComAdobeGraniteCorsImplCORSPolicyImplProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ComAdobeGraniteCorsImplCORSPolicyImplProperties Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ComAdobeGraniteCorsImplCORSPolicyImplProperties implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'comAdobeGraniteCorsImplCORSPolicyImplProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'alloworigin' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'alloworiginregexp' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'allowedpaths' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'exposedheaders' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'maxage' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'supportedheaders' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'supportedmethods' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'supportscredentials' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'alloworigin' => null,
        'alloworiginregexp' => null,
        'allowedpaths' => null,
        'exposedheaders' => null,
        'maxage' => null,
        'supportedheaders' => null,
        'supportedmethods' => null,
        'supportscredentials' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'alloworigin' => 'alloworigin',
        'alloworiginregexp' => 'alloworiginregexp',
        'allowedpaths' => 'allowedpaths',
        'exposedheaders' => 'exposedheaders',
        'maxage' => 'maxage',
        'supportedheaders' => 'supportedheaders',
        'supportedmethods' => 'supportedmethods',
        'supportscredentials' => 'supportscredentials'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'alloworigin' => 'setAlloworigin',
        'alloworiginregexp' => 'setAlloworiginregexp',
        'allowedpaths' => 'setAllowedpaths',
        'exposedheaders' => 'setExposedheaders',
        'maxage' => 'setMaxage',
        'supportedheaders' => 'setSupportedheaders',
        'supportedmethods' => 'setSupportedmethods',
        'supportscredentials' => 'setSupportscredentials'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'alloworigin' => 'getAlloworigin',
        'alloworiginregexp' => 'getAlloworiginregexp',
        'allowedpaths' => 'getAllowedpaths',
        'exposedheaders' => 'getExposedheaders',
        'maxage' => 'getMaxage',
        'supportedheaders' => 'getSupportedheaders',
        'supportedmethods' => 'getSupportedmethods',
        'supportscredentials' => 'getSupportscredentials'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['alloworigin'] = isset($data['alloworigin']) ? $data['alloworigin'] : null;
        $this->container['alloworiginregexp'] = isset($data['alloworiginregexp']) ? $data['alloworiginregexp'] : null;
        $this->container['allowedpaths'] = isset($data['allowedpaths']) ? $data['allowedpaths'] : null;
        $this->container['exposedheaders'] = isset($data['exposedheaders']) ? $data['exposedheaders'] : null;
        $this->container['maxage'] = isset($data['maxage']) ? $data['maxage'] : null;
        $this->container['supportedheaders'] = isset($data['supportedheaders']) ? $data['supportedheaders'] : null;
        $this->container['supportedmethods'] = isset($data['supportedmethods']) ? $data['supportedmethods'] : null;
        $this->container['supportscredentials'] = isset($data['supportscredentials']) ? $data['supportscredentials'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets alloworigin
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getAlloworigin()
    {
        return $this->container['alloworigin'];
    }

    /**
     * Sets alloworigin
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $alloworigin alloworigin
     *
     * @return $this
     */
    public function setAlloworigin($alloworigin)
    {
        $this->container['alloworigin'] = $alloworigin;

        return $this;
    }

    /**
     * Gets alloworiginregexp
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getAlloworiginregexp()
    {
        return $this->container['alloworiginregexp'];
    }

    /**
     * Sets alloworiginregexp
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $alloworiginregexp alloworiginregexp
     *
     * @return $this
     */
    public function setAlloworiginregexp($alloworiginregexp)
    {
        $this->container['alloworiginregexp'] = $alloworiginregexp;

        return $this;
    }

    /**
     * Gets allowedpaths
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getAllowedpaths()
    {
        return $this->container['allowedpaths'];
    }

    /**
     * Sets allowedpaths
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $allowedpaths allowedpaths
     *
     * @return $this
     */
    public function setAllowedpaths($allowedpaths)
    {
        $this->container['allowedpaths'] = $allowedpaths;

        return $this;
    }

    /**
     * Gets exposedheaders
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getExposedheaders()
    {
        return $this->container['exposedheaders'];
    }

    /**
     * Sets exposedheaders
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $exposedheaders exposedheaders
     *
     * @return $this
     */
    public function setExposedheaders($exposedheaders)
    {
        $this->container['exposedheaders'] = $exposedheaders;

        return $this;
    }

    /**
     * Gets maxage
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getMaxage()
    {
        return $this->container['maxage'];
    }

    /**
     * Sets maxage
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $maxage maxage
     *
     * @return $this
     */
    public function setMaxage($maxage)
    {
        $this->container['maxage'] = $maxage;

        return $this;
    }

    /**
     * Gets supportedheaders
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getSupportedheaders()
    {
        return $this->container['supportedheaders'];
    }

    /**
     * Sets supportedheaders
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $supportedheaders supportedheaders
     *
     * @return $this
     */
    public function setSupportedheaders($supportedheaders)
    {
        $this->container['supportedheaders'] = $supportedheaders;

        return $this;
    }

    /**
     * Gets supportedmethods
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getSupportedmethods()
    {
        return $this->container['supportedmethods'];
    }

    /**
     * Sets supportedmethods
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $supportedmethods supportedmethods
     *
     * @return $this
     */
    public function setSupportedmethods($supportedmethods)
    {
        $this->container['supportedmethods'] = $supportedmethods;

        return $this;
    }

    /**
     * Gets supportscredentials
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getSupportscredentials()
    {
        return $this->container['supportscredentials'];
    }

    /**
     * Sets supportscredentials
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $supportscredentials supportscredentials
     *
     * @return $this
     */
    public function setSupportscredentials($supportscredentials)
    {
        $this->container['supportscredentials'] = $supportscredentials;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


