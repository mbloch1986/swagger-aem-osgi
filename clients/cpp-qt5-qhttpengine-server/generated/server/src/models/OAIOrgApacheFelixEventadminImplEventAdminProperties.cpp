/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheFelixEventadminImplEventAdminProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheFelixEventadminImplEventAdminProperties::OAIOrgApacheFelixEventadminImplEventAdminProperties(QString json) {
    this->fromJson(json);
}

OAIOrgApacheFelixEventadminImplEventAdminProperties::OAIOrgApacheFelixEventadminImplEventAdminProperties() {
    this->init();
}

OAIOrgApacheFelixEventadminImplEventAdminProperties::~OAIOrgApacheFelixEventadminImplEventAdminProperties() {
    
}

void
OAIOrgApacheFelixEventadminImplEventAdminProperties::init() {
    m_org_apache_felix_eventadmin_thread_pool_size_isSet = false;
    m_org_apache_felix_eventadmin_async_to_sync_thread_ratio_isSet = false;
    m_org_apache_felix_eventadmin_timeout_isSet = false;
    m_org_apache_felix_eventadmin_require_topic_isSet = false;
    m_org_apache_felix_eventadmin_ignore_timeout_isSet = false;
    m_org_apache_felix_eventadmin_ignore_topic_isSet = false;
}

void
OAIOrgApacheFelixEventadminImplEventAdminProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIOrgApacheFelixEventadminImplEventAdminProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(org_apache_felix_eventadmin_thread_pool_size, json[QString("org.apache.felix.eventadmin.ThreadPoolSize")]);
    
    ::OpenAPI::fromJsonValue(org_apache_felix_eventadmin_async_to_sync_thread_ratio, json[QString("org.apache.felix.eventadmin.AsyncToSyncThreadRatio")]);
    
    ::OpenAPI::fromJsonValue(org_apache_felix_eventadmin_timeout, json[QString("org.apache.felix.eventadmin.Timeout")]);
    
    ::OpenAPI::fromJsonValue(org_apache_felix_eventadmin_require_topic, json[QString("org.apache.felix.eventadmin.RequireTopic")]);
    
    ::OpenAPI::fromJsonValue(org_apache_felix_eventadmin_ignore_timeout, json[QString("org.apache.felix.eventadmin.IgnoreTimeout")]);
    
    ::OpenAPI::fromJsonValue(org_apache_felix_eventadmin_ignore_topic, json[QString("org.apache.felix.eventadmin.IgnoreTopic")]);
    
}

QString
OAIOrgApacheFelixEventadminImplEventAdminProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheFelixEventadminImplEventAdminProperties::asJsonObject() const {
    QJsonObject obj;
	if(org_apache_felix_eventadmin_thread_pool_size.isSet()){
        obj.insert(QString("org.apache.felix.eventadmin.ThreadPoolSize"), ::OpenAPI::toJsonValue(org_apache_felix_eventadmin_thread_pool_size));
    }
	if(org_apache_felix_eventadmin_async_to_sync_thread_ratio.isSet()){
        obj.insert(QString("org.apache.felix.eventadmin.AsyncToSyncThreadRatio"), ::OpenAPI::toJsonValue(org_apache_felix_eventadmin_async_to_sync_thread_ratio));
    }
	if(org_apache_felix_eventadmin_timeout.isSet()){
        obj.insert(QString("org.apache.felix.eventadmin.Timeout"), ::OpenAPI::toJsonValue(org_apache_felix_eventadmin_timeout));
    }
	if(org_apache_felix_eventadmin_require_topic.isSet()){
        obj.insert(QString("org.apache.felix.eventadmin.RequireTopic"), ::OpenAPI::toJsonValue(org_apache_felix_eventadmin_require_topic));
    }
	if(org_apache_felix_eventadmin_ignore_timeout.isSet()){
        obj.insert(QString("org.apache.felix.eventadmin.IgnoreTimeout"), ::OpenAPI::toJsonValue(org_apache_felix_eventadmin_ignore_timeout));
    }
	if(org_apache_felix_eventadmin_ignore_topic.isSet()){
        obj.insert(QString("org.apache.felix.eventadmin.IgnoreTopic"), ::OpenAPI::toJsonValue(org_apache_felix_eventadmin_ignore_topic));
    }
    return obj;
}

OAIConfigNodePropertyInteger
OAIOrgApacheFelixEventadminImplEventAdminProperties::getOrgApacheFelixEventadminThreadPoolSize() const {
    return org_apache_felix_eventadmin_thread_pool_size;
}
void
OAIOrgApacheFelixEventadminImplEventAdminProperties::setOrgApacheFelixEventadminThreadPoolSize(const OAIConfigNodePropertyInteger &org_apache_felix_eventadmin_thread_pool_size) {
    this->org_apache_felix_eventadmin_thread_pool_size = org_apache_felix_eventadmin_thread_pool_size;
    this->m_org_apache_felix_eventadmin_thread_pool_size_isSet = true;
}

OAIConfigNodePropertyFloat
OAIOrgApacheFelixEventadminImplEventAdminProperties::getOrgApacheFelixEventadminAsyncToSyncThreadRatio() const {
    return org_apache_felix_eventadmin_async_to_sync_thread_ratio;
}
void
OAIOrgApacheFelixEventadminImplEventAdminProperties::setOrgApacheFelixEventadminAsyncToSyncThreadRatio(const OAIConfigNodePropertyFloat &org_apache_felix_eventadmin_async_to_sync_thread_ratio) {
    this->org_apache_felix_eventadmin_async_to_sync_thread_ratio = org_apache_felix_eventadmin_async_to_sync_thread_ratio;
    this->m_org_apache_felix_eventadmin_async_to_sync_thread_ratio_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheFelixEventadminImplEventAdminProperties::getOrgApacheFelixEventadminTimeout() const {
    return org_apache_felix_eventadmin_timeout;
}
void
OAIOrgApacheFelixEventadminImplEventAdminProperties::setOrgApacheFelixEventadminTimeout(const OAIConfigNodePropertyInteger &org_apache_felix_eventadmin_timeout) {
    this->org_apache_felix_eventadmin_timeout = org_apache_felix_eventadmin_timeout;
    this->m_org_apache_felix_eventadmin_timeout_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheFelixEventadminImplEventAdminProperties::getOrgApacheFelixEventadminRequireTopic() const {
    return org_apache_felix_eventadmin_require_topic;
}
void
OAIOrgApacheFelixEventadminImplEventAdminProperties::setOrgApacheFelixEventadminRequireTopic(const OAIConfigNodePropertyBoolean &org_apache_felix_eventadmin_require_topic) {
    this->org_apache_felix_eventadmin_require_topic = org_apache_felix_eventadmin_require_topic;
    this->m_org_apache_felix_eventadmin_require_topic_isSet = true;
}

OAIConfigNodePropertyArray
OAIOrgApacheFelixEventadminImplEventAdminProperties::getOrgApacheFelixEventadminIgnoreTimeout() const {
    return org_apache_felix_eventadmin_ignore_timeout;
}
void
OAIOrgApacheFelixEventadminImplEventAdminProperties::setOrgApacheFelixEventadminIgnoreTimeout(const OAIConfigNodePropertyArray &org_apache_felix_eventadmin_ignore_timeout) {
    this->org_apache_felix_eventadmin_ignore_timeout = org_apache_felix_eventadmin_ignore_timeout;
    this->m_org_apache_felix_eventadmin_ignore_timeout_isSet = true;
}

OAIConfigNodePropertyArray
OAIOrgApacheFelixEventadminImplEventAdminProperties::getOrgApacheFelixEventadminIgnoreTopic() const {
    return org_apache_felix_eventadmin_ignore_topic;
}
void
OAIOrgApacheFelixEventadminImplEventAdminProperties::setOrgApacheFelixEventadminIgnoreTopic(const OAIConfigNodePropertyArray &org_apache_felix_eventadmin_ignore_topic) {
    this->org_apache_felix_eventadmin_ignore_topic = org_apache_felix_eventadmin_ignore_topic;
    this->m_org_apache_felix_eventadmin_ignore_topic_isSet = true;
}


bool
OAIOrgApacheFelixEventadminImplEventAdminProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(org_apache_felix_eventadmin_thread_pool_size.isSet()){ isObjectUpdated = true; break;}
    
        if(org_apache_felix_eventadmin_async_to_sync_thread_ratio.isSet()){ isObjectUpdated = true; break;}
    
        if(org_apache_felix_eventadmin_timeout.isSet()){ isObjectUpdated = true; break;}
    
        if(org_apache_felix_eventadmin_require_topic.isSet()){ isObjectUpdated = true; break;}
    
        if(org_apache_felix_eventadmin_ignore_timeout.isSet()){ isObjectUpdated = true; break;}
    
        if(org_apache_felix_eventadmin_ignore_topic.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

