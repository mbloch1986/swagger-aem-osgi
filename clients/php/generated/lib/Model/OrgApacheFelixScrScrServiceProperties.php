<?php
/**
 * OrgApacheFelixScrScrServiceProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OrgApacheFelixScrScrServiceProperties Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrgApacheFelixScrScrServiceProperties implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'orgApacheFelixScrScrServiceProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ds_loglevel' => '\OpenAPI\Client\Model\ConfigNodePropertyDropDown',
        'ds_factory_enabled' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'ds_delayed_keep_instances' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'ds_lock_timeout_milliseconds' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'ds_stop_timeout_milliseconds' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'ds_global_extender' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'ds_loglevel' => null,
        'ds_factory_enabled' => null,
        'ds_delayed_keep_instances' => null,
        'ds_lock_timeout_milliseconds' => null,
        'ds_stop_timeout_milliseconds' => null,
        'ds_global_extender' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ds_loglevel' => 'ds.loglevel',
        'ds_factory_enabled' => 'ds.factory.enabled',
        'ds_delayed_keep_instances' => 'ds.delayed.keepInstances',
        'ds_lock_timeout_milliseconds' => 'ds.lock.timeout.milliseconds',
        'ds_stop_timeout_milliseconds' => 'ds.stop.timeout.milliseconds',
        'ds_global_extender' => 'ds.global.extender'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ds_loglevel' => 'setDsLoglevel',
        'ds_factory_enabled' => 'setDsFactoryEnabled',
        'ds_delayed_keep_instances' => 'setDsDelayedKeepInstances',
        'ds_lock_timeout_milliseconds' => 'setDsLockTimeoutMilliseconds',
        'ds_stop_timeout_milliseconds' => 'setDsStopTimeoutMilliseconds',
        'ds_global_extender' => 'setDsGlobalExtender'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ds_loglevel' => 'getDsLoglevel',
        'ds_factory_enabled' => 'getDsFactoryEnabled',
        'ds_delayed_keep_instances' => 'getDsDelayedKeepInstances',
        'ds_lock_timeout_milliseconds' => 'getDsLockTimeoutMilliseconds',
        'ds_stop_timeout_milliseconds' => 'getDsStopTimeoutMilliseconds',
        'ds_global_extender' => 'getDsGlobalExtender'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ds_loglevel'] = isset($data['ds_loglevel']) ? $data['ds_loglevel'] : null;
        $this->container['ds_factory_enabled'] = isset($data['ds_factory_enabled']) ? $data['ds_factory_enabled'] : null;
        $this->container['ds_delayed_keep_instances'] = isset($data['ds_delayed_keep_instances']) ? $data['ds_delayed_keep_instances'] : null;
        $this->container['ds_lock_timeout_milliseconds'] = isset($data['ds_lock_timeout_milliseconds']) ? $data['ds_lock_timeout_milliseconds'] : null;
        $this->container['ds_stop_timeout_milliseconds'] = isset($data['ds_stop_timeout_milliseconds']) ? $data['ds_stop_timeout_milliseconds'] : null;
        $this->container['ds_global_extender'] = isset($data['ds_global_extender']) ? $data['ds_global_extender'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ds_loglevel
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyDropDown|null
     */
    public function getDsLoglevel()
    {
        return $this->container['ds_loglevel'];
    }

    /**
     * Sets ds_loglevel
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyDropDown|null $ds_loglevel ds_loglevel
     *
     * @return $this
     */
    public function setDsLoglevel($ds_loglevel)
    {
        $this->container['ds_loglevel'] = $ds_loglevel;

        return $this;
    }

    /**
     * Gets ds_factory_enabled
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getDsFactoryEnabled()
    {
        return $this->container['ds_factory_enabled'];
    }

    /**
     * Sets ds_factory_enabled
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $ds_factory_enabled ds_factory_enabled
     *
     * @return $this
     */
    public function setDsFactoryEnabled($ds_factory_enabled)
    {
        $this->container['ds_factory_enabled'] = $ds_factory_enabled;

        return $this;
    }

    /**
     * Gets ds_delayed_keep_instances
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getDsDelayedKeepInstances()
    {
        return $this->container['ds_delayed_keep_instances'];
    }

    /**
     * Sets ds_delayed_keep_instances
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $ds_delayed_keep_instances ds_delayed_keep_instances
     *
     * @return $this
     */
    public function setDsDelayedKeepInstances($ds_delayed_keep_instances)
    {
        $this->container['ds_delayed_keep_instances'] = $ds_delayed_keep_instances;

        return $this;
    }

    /**
     * Gets ds_lock_timeout_milliseconds
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getDsLockTimeoutMilliseconds()
    {
        return $this->container['ds_lock_timeout_milliseconds'];
    }

    /**
     * Sets ds_lock_timeout_milliseconds
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $ds_lock_timeout_milliseconds ds_lock_timeout_milliseconds
     *
     * @return $this
     */
    public function setDsLockTimeoutMilliseconds($ds_lock_timeout_milliseconds)
    {
        $this->container['ds_lock_timeout_milliseconds'] = $ds_lock_timeout_milliseconds;

        return $this;
    }

    /**
     * Gets ds_stop_timeout_milliseconds
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getDsStopTimeoutMilliseconds()
    {
        return $this->container['ds_stop_timeout_milliseconds'];
    }

    /**
     * Sets ds_stop_timeout_milliseconds
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $ds_stop_timeout_milliseconds ds_stop_timeout_milliseconds
     *
     * @return $this
     */
    public function setDsStopTimeoutMilliseconds($ds_stop_timeout_milliseconds)
    {
        $this->container['ds_stop_timeout_milliseconds'] = $ds_stop_timeout_milliseconds;

        return $this;
    }

    /**
     * Gets ds_global_extender
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getDsGlobalExtender()
    {
        return $this->container['ds_global_extender'];
    }

    /**
     * Sets ds_global_extender
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $ds_global_extender ds_global_extender
     *
     * @return $this
     */
    public function setDsGlobalExtender($ds_global_extender)
    {
        $this->container['ds_global_extender'] = $ds_global_extender;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


