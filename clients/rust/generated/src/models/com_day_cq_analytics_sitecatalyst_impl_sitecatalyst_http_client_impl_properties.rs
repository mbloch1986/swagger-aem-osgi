/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties {
  #[serde(rename = "cq.analytics.sitecatalyst.service.datacenter.url")]
  cq_analytics_sitecatalyst_service_datacenter_url: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "devhostnamepatterns")]
  devhostnamepatterns: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "connection.timeout")]
  connection_timeout: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "socket.timeout")]
  socket_timeout: Option<::models::ConfigNodePropertyInteger>
}

impl ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties {
  pub fn new() -> ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties {
    ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties {
      cq_analytics_sitecatalyst_service_datacenter_url: None,
      devhostnamepatterns: None,
      connection_timeout: None,
      socket_timeout: None
    }
  }

  pub fn set_cq_analytics_sitecatalyst_service_datacenter_url(&mut self, cq_analytics_sitecatalyst_service_datacenter_url: ::models::ConfigNodePropertyArray) {
    self.cq_analytics_sitecatalyst_service_datacenter_url = Some(cq_analytics_sitecatalyst_service_datacenter_url);
  }

  pub fn with_cq_analytics_sitecatalyst_service_datacenter_url(mut self, cq_analytics_sitecatalyst_service_datacenter_url: ::models::ConfigNodePropertyArray) -> ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties {
    self.cq_analytics_sitecatalyst_service_datacenter_url = Some(cq_analytics_sitecatalyst_service_datacenter_url);
    self
  }

  pub fn cq_analytics_sitecatalyst_service_datacenter_url(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.cq_analytics_sitecatalyst_service_datacenter_url.as_ref()
  }

  pub fn reset_cq_analytics_sitecatalyst_service_datacenter_url(&mut self) {
    self.cq_analytics_sitecatalyst_service_datacenter_url = None;
  }

  pub fn set_devhostnamepatterns(&mut self, devhostnamepatterns: ::models::ConfigNodePropertyArray) {
    self.devhostnamepatterns = Some(devhostnamepatterns);
  }

  pub fn with_devhostnamepatterns(mut self, devhostnamepatterns: ::models::ConfigNodePropertyArray) -> ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties {
    self.devhostnamepatterns = Some(devhostnamepatterns);
    self
  }

  pub fn devhostnamepatterns(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.devhostnamepatterns.as_ref()
  }

  pub fn reset_devhostnamepatterns(&mut self) {
    self.devhostnamepatterns = None;
  }

  pub fn set_connection_timeout(&mut self, connection_timeout: ::models::ConfigNodePropertyInteger) {
    self.connection_timeout = Some(connection_timeout);
  }

  pub fn with_connection_timeout(mut self, connection_timeout: ::models::ConfigNodePropertyInteger) -> ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties {
    self.connection_timeout = Some(connection_timeout);
    self
  }

  pub fn connection_timeout(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.connection_timeout.as_ref()
  }

  pub fn reset_connection_timeout(&mut self) {
    self.connection_timeout = None;
  }

  pub fn set_socket_timeout(&mut self, socket_timeout: ::models::ConfigNodePropertyInteger) {
    self.socket_timeout = Some(socket_timeout);
  }

  pub fn with_socket_timeout(mut self, socket_timeout: ::models::ConfigNodePropertyInteger) -> ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties {
    self.socket_timeout = Some(socket_timeout);
    self
  }

  pub fn socket_timeout(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.socket_timeout.as_ref()
  }

  pub fn reset_socket_timeout(&mut self) {
    self.socket_timeout = None;
  }

}



