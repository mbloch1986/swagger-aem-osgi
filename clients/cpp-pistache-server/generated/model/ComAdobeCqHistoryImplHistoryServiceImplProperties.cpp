/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeCqHistoryImplHistoryServiceImplProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeCqHistoryImplHistoryServiceImplProperties::ComAdobeCqHistoryImplHistoryServiceImplProperties()
{
    m_History_service_resourceTypesIsSet = false;
    m_History_service_pathFilterIsSet = false;
    
}

ComAdobeCqHistoryImplHistoryServiceImplProperties::~ComAdobeCqHistoryImplHistoryServiceImplProperties()
{
}

void ComAdobeCqHistoryImplHistoryServiceImplProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeCqHistoryImplHistoryServiceImplProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_History_service_resourceTypesIsSet)
    {
        val["history.service.resourceTypes"] = ModelBase::toJson(m_History_service_resourceTypes);
    }
    if(m_History_service_pathFilterIsSet)
    {
        val["history.service.pathFilter"] = ModelBase::toJson(m_History_service_pathFilter);
    }
    

    return val;
}

void ComAdobeCqHistoryImplHistoryServiceImplProperties::fromJson(nlohmann::json& val)
{
    if(val.find("history.service.resourceTypes") != val.end())
    {
        if(!val["history.service.resourceTypes"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["history.service.resourceTypes"]);
            setHistoryServiceResourceTypes( newItem );
        }
        
    }
    if(val.find("history.service.pathFilter") != val.end())
    {
        if(!val["history.service.pathFilter"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["history.service.pathFilter"]);
            setHistoryServicePathFilter( newItem );
        }
        
    }
    
}


ConfigNodePropertyArray ComAdobeCqHistoryImplHistoryServiceImplProperties::getHistoryServiceResourceTypes() const
{
    return m_History_service_resourceTypes;
}
void ComAdobeCqHistoryImplHistoryServiceImplProperties::setHistoryServiceResourceTypes(ConfigNodePropertyArray const& value)
{
    m_History_service_resourceTypes = value;
    m_History_service_resourceTypesIsSet = true;
}
bool ComAdobeCqHistoryImplHistoryServiceImplProperties::historyServiceResourceTypesIsSet() const
{
    return m_History_service_resourceTypesIsSet;
}
void ComAdobeCqHistoryImplHistoryServiceImplProperties::unsetHistory_service_resourceTypes()
{
    m_History_service_resourceTypesIsSet = false;
}
ConfigNodePropertyArray ComAdobeCqHistoryImplHistoryServiceImplProperties::getHistoryServicePathFilter() const
{
    return m_History_service_pathFilter;
}
void ComAdobeCqHistoryImplHistoryServiceImplProperties::setHistoryServicePathFilter(ConfigNodePropertyArray const& value)
{
    m_History_service_pathFilter = value;
    m_History_service_pathFilterIsSet = true;
}
bool ComAdobeCqHistoryImplHistoryServiceImplProperties::historyServicePathFilterIsSet() const
{
    return m_History_service_pathFilterIsSet;
}
void ComAdobeCqHistoryImplHistoryServiceImplProperties::unsetHistory_service_pathFilter()
{
    m_History_service_pathFilterIsSet = false;
}

}
}
}
}

