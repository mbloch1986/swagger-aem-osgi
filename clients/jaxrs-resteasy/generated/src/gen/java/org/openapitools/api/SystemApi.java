package org.openapitools.api;

import org.openapitools.model.*;
import org.openapitools.api.SystemApiService;

import io.swagger.annotations.ApiParam;
import io.swagger.jaxrs.*;

import org.openapitools.model.AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo;
import org.openapitools.model.AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo;
import org.openapitools.model.AnalyticsComponentQueryCacheServiceInfo;
import org.openapitools.model.ApacheSlingHealthCheckResultHTMLSerializerInfo;
import java.math.BigDecimal;
import org.openapitools.model.ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo;
import org.openapitools.model.ComAdobeAemTransactionCoreImplTransactionRecorderInfo;
import org.openapitools.model.ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo;
import org.openapitools.model.ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo;
import org.openapitools.model.ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo;
import org.openapitools.model.ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo;
import org.openapitools.model.ComAdobeCqAccountApiAccountManagementServiceInfo;
import org.openapitools.model.ComAdobeCqAccountImplAccountManagementServletInfo;
import org.openapitools.model.ComAdobeCqAddressImplLocationLocationListServletInfo;
import org.openapitools.model.ComAdobeCqAuditPurgeDamInfo;
import org.openapitools.model.ComAdobeCqAuditPurgePagesInfo;
import org.openapitools.model.ComAdobeCqAuditPurgeReplicationInfo;
import org.openapitools.model.ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo;
import org.openapitools.model.ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo;
import org.openapitools.model.ComAdobeCqCdnRewriterImplCDNRewriterInfo;
import org.openapitools.model.ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo;
import org.openapitools.model.ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo;
import org.openapitools.model.ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo;
import org.openapitools.model.ComAdobeCqCommerceImplAssetStaticImageHandlerInfo;
import org.openapitools.model.ComAdobeCqCommerceImplAssetVideoHandlerInfo;
import org.openapitools.model.ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo;
import org.openapitools.model.ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo;
import org.openapitools.model.ComAdobeCqCommercePimImplPageEventListenerInfo;
import org.openapitools.model.ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo;
import org.openapitools.model.ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo;
import org.openapitools.model.ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo;
import org.openapitools.model.ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo;
import org.openapitools.model.ComAdobeCqDamCfmImplComponentComponentConfigImplInfo;
import org.openapitools.model.ComAdobeCqDamCfmImplConfFeatureConfigImplInfo;
import org.openapitools.model.ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo;
import org.openapitools.model.ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo;
import org.openapitools.model.ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo;
import org.openapitools.model.ComAdobeCqDamDmProcessImagePTiffManagerImplInfo;
import org.openapitools.model.ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo;
import org.openapitools.model.ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo;
import org.openapitools.model.ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo;
import org.openapitools.model.ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo;
import org.openapitools.model.ComAdobeCqDamS7imagingImplIsImageServerComponentInfo;
import org.openapitools.model.ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo;
import org.openapitools.model.ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo;
import org.openapitools.model.ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo;
import org.openapitools.model.ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo;
import org.openapitools.model.ComAdobeCqDeserfwImplDeserializationFirewallImplInfo;
import org.openapitools.model.ComAdobeCqDtmImplServiceDTMWebServiceImplInfo;
import org.openapitools.model.ComAdobeCqDtmImplServletsDTMDeployHookServletInfo;
import org.openapitools.model.ComAdobeCqDtmReactorImplServiceWebServiceImplInfo;
import org.openapitools.model.ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo;
import org.openapitools.model.ComAdobeCqHcContentPackagesHealthCheckInfo;
import org.openapitools.model.ComAdobeCqHistoryImplHistoryRequestFilterInfo;
import org.openapitools.model.ComAdobeCqHistoryImplHistoryServiceImplInfo;
import org.openapitools.model.ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo;
import org.openapitools.model.ComAdobeCqProjectsImplServletProjectImageServletInfo;
import org.openapitools.model.ComAdobeCqProjectsPurgeSchedulerInfo;
import org.openapitools.model.ComAdobeCqScheduledExporterImplScheduledExporterImplInfo;
import org.openapitools.model.ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo;
import org.openapitools.model.ComAdobeCqScreensDeviceImplDeviceServiceInfo;
import org.openapitools.model.ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo;
import org.openapitools.model.ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo;
import org.openapitools.model.ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo;
import org.openapitools.model.ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo;
import org.openapitools.model.ComAdobeCqScreensImplScreensChannelPostProcessorInfo;
import org.openapitools.model.ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo;
import org.openapitools.model.ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo;
import org.openapitools.model.ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo;
import org.openapitools.model.ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo;
import org.openapitools.model.ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo;
import org.openapitools.model.ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo;
import org.openapitools.model.ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo;
import org.openapitools.model.ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo;
import org.openapitools.model.ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo;
import org.openapitools.model.ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo;
import org.openapitools.model.ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo;
import org.openapitools.model.ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo;
import org.openapitools.model.ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo;
import org.openapitools.model.ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo;
import org.openapitools.model.ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo;
import org.openapitools.model.ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo;
import org.openapitools.model.ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo;
import org.openapitools.model.ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo;
import org.openapitools.model.ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo;
import org.openapitools.model.ComAdobeCqSocialCalendarServletsTimeZoneServletInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo;
import org.openapitools.model.ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo;
import org.openapitools.model.ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo;
import org.openapitools.model.ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo;
import org.openapitools.model.ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo;
import org.openapitools.model.ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo;
import org.openapitools.model.ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo;
import org.openapitools.model.ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo;
import org.openapitools.model.ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo;
import org.openapitools.model.ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo;
import org.openapitools.model.ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo;
import org.openapitools.model.ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo;
import org.openapitools.model.ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo;
import org.openapitools.model.ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo;
import org.openapitools.model.ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo;
import org.openapitools.model.ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo;
import org.openapitools.model.ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo;
import org.openapitools.model.ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo;
import org.openapitools.model.ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo;
import org.openapitools.model.ComAdobeCqSocialGroupImplGroupServiceImplInfo;
import org.openapitools.model.ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo;
import org.openapitools.model.ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo;
import org.openapitools.model.ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo;
import org.openapitools.model.ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo;
import org.openapitools.model.ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo;
import org.openapitools.model.ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo;
import org.openapitools.model.ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo;
import org.openapitools.model.ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo;
import org.openapitools.model.ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo;
import org.openapitools.model.ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo;
import org.openapitools.model.ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo;
import org.openapitools.model.ComAdobeCqSocialNotificationsImplMentionsRouterInfo;
import org.openapitools.model.ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo;
import org.openapitools.model.ComAdobeCqSocialNotificationsImplNotificationsRouterInfo;
import org.openapitools.model.ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo;
import org.openapitools.model.ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo;
import org.openapitools.model.ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo;
import org.openapitools.model.ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo;
import org.openapitools.model.ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo;
import org.openapitools.model.ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo;
import org.openapitools.model.ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo;
import org.openapitools.model.ComAdobeCqSocialScoringImplScoringEventListenerInfo;
import org.openapitools.model.ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo;
import org.openapitools.model.ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo;
import org.openapitools.model.ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo;
import org.openapitools.model.ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo;
import org.openapitools.model.ComAdobeCqSocialSrpImplSocialSolrConnectorInfo;
import org.openapitools.model.ComAdobeCqSocialSyncImplDiffChangesObserverInfo;
import org.openapitools.model.ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo;
import org.openapitools.model.ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo;
import org.openapitools.model.ComAdobeCqSocialSyncImplUserSyncListenerImplInfo;
import org.openapitools.model.ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo;
import org.openapitools.model.ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo;
import org.openapitools.model.ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo;
import org.openapitools.model.ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo;
import org.openapitools.model.ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo;
import org.openapitools.model.ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo;
import org.openapitools.model.ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo;
import org.openapitools.model.ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo;
import org.openapitools.model.ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo;
import org.openapitools.model.ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo;
import org.openapitools.model.ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo;
import org.openapitools.model.ComAdobeCqSocialUserImplTransportHttpToPublisherInfo;
import org.openapitools.model.ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo;
import org.openapitools.model.ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo;
import org.openapitools.model.ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo;
import org.openapitools.model.ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo;
import org.openapitools.model.ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo;
import org.openapitools.model.ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo;
import org.openapitools.model.ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo;
import org.openapitools.model.ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo;
import org.openapitools.model.ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo;
import org.openapitools.model.ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo;
import org.openapitools.model.ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo;
import org.openapitools.model.ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo;
import org.openapitools.model.ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo;
import org.openapitools.model.ComAdobeFormsCommonServiceImplDefaultDataProviderInfo;
import org.openapitools.model.ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo;
import org.openapitools.model.ComAdobeFormsCommonServletTempCleanUpTaskInfo;
import org.openapitools.model.ComAdobeGraniteAcpPlatformPlatformServletInfo;
import org.openapitools.model.ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo;
import org.openapitools.model.ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo;
import org.openapitools.model.ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo;
import org.openapitools.model.ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo;
import org.openapitools.model.ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo;
import org.openapitools.model.ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo;
import org.openapitools.model.ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo;
import org.openapitools.model.ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo;
import org.openapitools.model.ComAdobeGraniteAuthImsImplIMSProviderImplInfo;
import org.openapitools.model.ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo;
import org.openapitools.model.ComAdobeGraniteAuthImsInfo;
import org.openapitools.model.ComAdobeGraniteAuthOauthAccesstokenProviderInfo;
import org.openapitools.model.ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo;
import org.openapitools.model.ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo;
import org.openapitools.model.ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo;
import org.openapitools.model.ComAdobeGraniteAuthOauthImplGithubProviderImplInfo;
import org.openapitools.model.ComAdobeGraniteAuthOauthImplGraniteProviderInfo;
import org.openapitools.model.ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo;
import org.openapitools.model.ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo;
import org.openapitools.model.ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo;
import org.openapitools.model.ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo;
import org.openapitools.model.ComAdobeGraniteAuthOauthProviderInfo;
import org.openapitools.model.ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo;
import org.openapitools.model.ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo;
import org.openapitools.model.ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo;
import org.openapitools.model.ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo;
import org.openapitools.model.ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo;
import org.openapitools.model.ComAdobeGraniteCompatrouterImplRoutingConfigInfo;
import org.openapitools.model.ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo;
import org.openapitools.model.ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo;
import org.openapitools.model.ComAdobeGraniteContexthubImplContextHubImplInfo;
import org.openapitools.model.ComAdobeGraniteCorsImplCORSPolicyImplInfo;
import org.openapitools.model.ComAdobeGraniteCsrfImplCSRFFilterInfo;
import org.openapitools.model.ComAdobeGraniteCsrfImplCSRFServletInfo;
import org.openapitools.model.ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo;
import org.openapitools.model.ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo;
import org.openapitools.model.ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo;
import org.openapitools.model.ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo;
import org.openapitools.model.ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo;
import org.openapitools.model.ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo;
import org.openapitools.model.ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo;
import org.openapitools.model.ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo;
import org.openapitools.model.ComAdobeGraniteFragsImplRandomFeatureInfo;
import org.openapitools.model.ComAdobeGraniteHttpcacheFileFileCacheStoreInfo;
import org.openapitools.model.ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo;
import org.openapitools.model.ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo;
import org.openapitools.model.ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo;
import org.openapitools.model.ComAdobeGraniteInfocollectorInfoCollectorInfo;
import org.openapitools.model.ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo;
import org.openapitools.model.ComAdobeGraniteLicenseImplLicenseCheckFilterInfo;
import org.openapitools.model.ComAdobeGraniteLoggingImplLogAnalyserImplInfo;
import org.openapitools.model.ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo;
import org.openapitools.model.ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo;
import org.openapitools.model.ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo;
import org.openapitools.model.ComAdobeGraniteMonitoringImplScriptConfigImplInfo;
import org.openapitools.model.ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo;
import org.openapitools.model.ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo;
import org.openapitools.model.ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo;
import org.openapitools.model.ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo;
import org.openapitools.model.ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo;
import org.openapitools.model.ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo;
import org.openapitools.model.ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo;
import org.openapitools.model.ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo;
import org.openapitools.model.ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo;
import org.openapitools.model.ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo;
import org.openapitools.model.ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo;
import org.openapitools.model.ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo;
import org.openapitools.model.ComAdobeGraniteOptoutImplOptOutServiceImplInfo;
import org.openapitools.model.ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo;
import org.openapitools.model.ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo;
import org.openapitools.model.ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo;
import org.openapitools.model.ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo;
import org.openapitools.model.ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteRepositoryImplCommitStatsConfigInfo;
import org.openapitools.model.ComAdobeGraniteRepositoryServiceUserConfigurationInfo;
import org.openapitools.model.ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo;
import org.openapitools.model.ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo;
import org.openapitools.model.ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo;
import org.openapitools.model.ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo;
import org.openapitools.model.ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo;
import org.openapitools.model.ComAdobeGraniteRestImplServletDefaultGETServletInfo;
import org.openapitools.model.ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo;
import org.openapitools.model.ComAdobeGraniteSecurityUserUserPropertiesServiceInfo;
import org.openapitools.model.ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo;
import org.openapitools.model.ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo;
import org.openapitools.model.ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo;
import org.openapitools.model.ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo;
import org.openapitools.model.ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo;
import org.openapitools.model.ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo;
import org.openapitools.model.ComAdobeGraniteThreaddumpThreadDumpCollectorInfo;
import org.openapitools.model.ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo;
import org.openapitools.model.ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo;
import org.openapitools.model.ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo;
import org.openapitools.model.ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo;
import org.openapitools.model.ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo;
import org.openapitools.model.ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo;
import org.openapitools.model.ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo;
import org.openapitools.model.ComAdobeGraniteWorkflowCoreJobJobHandlerInfo;
import org.openapitools.model.ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo;
import org.openapitools.model.ComAdobeGraniteWorkflowCorePayloadMapCacheInfo;
import org.openapitools.model.ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo;
import org.openapitools.model.ComAdobeGraniteWorkflowCoreWorkflowConfigInfo;
import org.openapitools.model.ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo;
import org.openapitools.model.ComAdobeGraniteWorkflowPurgeSchedulerInfo;
import org.openapitools.model.ComAdobeOctopusNcommBootstrapInfo;
import org.openapitools.model.ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo;
import org.openapitools.model.ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo;
import org.openapitools.model.ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo;
import org.openapitools.model.ComDayCommonsHttpclientInfo;
import org.openapitools.model.ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo;
import org.openapitools.model.ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo;
import org.openapitools.model.ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo;
import org.openapitools.model.ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo;
import org.openapitools.model.ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo;
import org.openapitools.model.ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo;
import org.openapitools.model.ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo;
import org.openapitools.model.ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo;
import org.openapitools.model.ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo;
import org.openapitools.model.ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo;
import org.openapitools.model.ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo;
import org.openapitools.model.ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo;
import org.openapitools.model.ComDayCqAuthImplCugCugSupportImplInfo;
import org.openapitools.model.ComDayCqAuthImplLoginSelectorHandlerInfo;
import org.openapitools.model.ComDayCqCommonsImplExternalizerImplInfo;
import org.openapitools.model.ComDayCqCommonsServletsRootMappingServletInfo;
import org.openapitools.model.ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo;
import org.openapitools.model.ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo;
import org.openapitools.model.ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo;
import org.openapitools.model.ComDayCqContentsyncImplContentSyncManagerImplInfo;
import org.openapitools.model.ComDayCqDamCommonsHandlerStandardImageHandlerInfo;
import org.openapitools.model.ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo;
import org.openapitools.model.ComDayCqDamCommonsUtilImplAssetCacheImplInfo;
import org.openapitools.model.ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo;
import org.openapitools.model.ComDayCqDamCoreImplAssetMoveListenerInfo;
import org.openapitools.model.ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo;
import org.openapitools.model.ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo;
import org.openapitools.model.ComDayCqDamCoreImplDamChangeEventListenerInfo;
import org.openapitools.model.ComDayCqDamCoreImplDamEventPurgeServiceInfo;
import org.openapitools.model.ComDayCqDamCoreImplDamEventRecorderImplInfo;
import org.openapitools.model.ComDayCqDamCoreImplEventDamEventAuditListenerInfo;
import org.openapitools.model.ComDayCqDamCoreImplExpiryNotificationJobImplInfo;
import org.openapitools.model.ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo;
import org.openapitools.model.ComDayCqDamCoreImplGfxCommonsGfxRendererInfo;
import org.openapitools.model.ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo;
import org.openapitools.model.ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo;
import org.openapitools.model.ComDayCqDamCoreImplHandlerJpegHandlerInfo;
import org.openapitools.model.ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo;
import org.openapitools.model.ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo;
import org.openapitools.model.ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo;
import org.openapitools.model.ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo;
import org.openapitools.model.ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo;
import org.openapitools.model.ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo;
import org.openapitools.model.ComDayCqDamCoreImplLightboxLightboxServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo;
import org.openapitools.model.ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo;
import org.openapitools.model.ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo;
import org.openapitools.model.ComDayCqDamCoreImplMissingMetadataNotificationJobInfo;
import org.openapitools.model.ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo;
import org.openapitools.model.ComDayCqDamCoreImplProcessTextExtractionProcessInfo;
import org.openapitools.model.ComDayCqDamCoreImplRenditionMakerImplInfo;
import org.openapitools.model.ComDayCqDamCoreImplReportsReportExportServiceInfo;
import org.openapitools.model.ComDayCqDamCoreImplReportsReportPurgeServiceInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletAssetDownloadServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletAssetStatusServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletAssetXMPSearchServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletBatchMetadataServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletBinaryProviderServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletCollectionServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletCollectionsServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletCompanionServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletCreateAssetServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletDamContentDispositionFilterInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletGuidLookupFilterInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletHealthCheckServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletMetadataGetServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletResourceCollectionServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo;
import org.openapitools.model.ComDayCqDamCoreImplUnzipUnzipConfigInfo;
import org.openapitools.model.ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo;
import org.openapitools.model.ComDayCqDamCoreProcessExtractMetadataProcessInfo;
import org.openapitools.model.ComDayCqDamCoreProcessMetadataProcessorProcessInfo;
import org.openapitools.model.ComDayCqDamHandlerFfmpegLocatorImplInfo;
import org.openapitools.model.ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo;
import org.openapitools.model.ComDayCqDamHandlerStandardPdfPdfHandlerInfo;
import org.openapitools.model.ComDayCqDamHandlerStandardPsPostScriptHandlerInfo;
import org.openapitools.model.ComDayCqDamHandlerStandardPsdPsdHandlerInfo;
import org.openapitools.model.ComDayCqDamIdsImplIDSJobProcessorInfo;
import org.openapitools.model.ComDayCqDamIdsImplIDSPoolManagerImplInfo;
import org.openapitools.model.ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo;
import org.openapitools.model.ComDayCqDamInddImplServletSnippetCreationServletInfo;
import org.openapitools.model.ComDayCqDamInddProcessINDDMediaExtractProcessInfo;
import org.openapitools.model.ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo;
import org.openapitools.model.ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo;
import org.openapitools.model.ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo;
import org.openapitools.model.ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo;
import org.openapitools.model.ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo;
import org.openapitools.model.ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo;
import org.openapitools.model.ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo;
import org.openapitools.model.ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo;
import org.openapitools.model.ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo;
import org.openapitools.model.ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo;
import org.openapitools.model.ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo;
import org.openapitools.model.ComDayCqDamScene7ImplScene7APIClientImplInfo;
import org.openapitools.model.ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo;
import org.openapitools.model.ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo;
import org.openapitools.model.ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo;
import org.openapitools.model.ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo;
import org.openapitools.model.ComDayCqDamScene7ImplScene7UploadServiceImplInfo;
import org.openapitools.model.ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo;
import org.openapitools.model.ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo;
import org.openapitools.model.ComDayCqDamVideoImplServletVideoTestServletInfo;
import org.openapitools.model.ComDayCqExtwidgetServletsImageSpriteServletInfo;
import org.openapitools.model.ComDayCqImageInternalFontFontHelperInfo;
import org.openapitools.model.ComDayCqJcrclustersupportClusterStartLevelControllerInfo;
import org.openapitools.model.ComDayCqMailerDefaultMailServiceInfo;
import org.openapitools.model.ComDayCqMailerImplCqMailingServiceInfo;
import org.openapitools.model.ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo;
import org.openapitools.model.ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo;
import org.openapitools.model.ComDayCqMcmCampaignImplIntegrationConfigImplInfo;
import org.openapitools.model.ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo;
import org.openapitools.model.ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo;
import org.openapitools.model.ComDayCqMcmImplMCMConfigurationInfo;
import org.openapitools.model.ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo;
import org.openapitools.model.ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo;
import org.openapitools.model.ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo;
import org.openapitools.model.ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo;
import org.openapitools.model.ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo;
import org.openapitools.model.ComDayCqNotificationImplNotificationServiceImplInfo;
import org.openapitools.model.ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo;
import org.openapitools.model.ComDayCqPollingImporterImplManagedPollConfigImplInfo;
import org.openapitools.model.ComDayCqPollingImporterImplManagedPollingImporterImplInfo;
import org.openapitools.model.ComDayCqPollingImporterImplPollingImporterImplInfo;
import org.openapitools.model.ComDayCqReplicationAuditReplicationEventListenerInfo;
import org.openapitools.model.ComDayCqReplicationContentStaticContentBuilderInfo;
import org.openapitools.model.ComDayCqReplicationImplAgentManagerImplInfo;
import org.openapitools.model.ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo;
import org.openapitools.model.ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo;
import org.openapitools.model.ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo;
import org.openapitools.model.ComDayCqReplicationImplReplicationReceiverImplInfo;
import org.openapitools.model.ComDayCqReplicationImplReplicatorImplInfo;
import org.openapitools.model.ComDayCqReplicationImplReverseReplicatorInfo;
import org.openapitools.model.ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo;
import org.openapitools.model.ComDayCqReplicationImplTransportHttpInfo;
import org.openapitools.model.ComDayCqReportingImplCacheCacheImplInfo;
import org.openapitools.model.ComDayCqReportingImplConfigServiceImplInfo;
import org.openapitools.model.ComDayCqReportingImplRLogAnalyzerInfo;
import org.openapitools.model.ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo;
import org.openapitools.model.ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo;
import org.openapitools.model.ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo;
import org.openapitools.model.ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo;
import org.openapitools.model.ComDayCqRewriterProcessorImplHtmlParserFactoryInfo;
import org.openapitools.model.ComDayCqSearchImplBuilderQueryBuilderImplInfo;
import org.openapitools.model.ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo;
import org.openapitools.model.ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo;
import org.openapitools.model.ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo;
import org.openapitools.model.ComDayCqSecurityACLSetupInfo;
import org.openapitools.model.ComDayCqStatisticsImplStatisticsServiceImplInfo;
import org.openapitools.model.ComDayCqTaggingImplJcrTagManagerFactoryImplInfo;
import org.openapitools.model.ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo;
import org.openapitools.model.ComDayCqTaggingImplTagGarbageCollectorInfo;
import org.openapitools.model.ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo;
import org.openapitools.model.ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo;
import org.openapitools.model.ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo;
import org.openapitools.model.ComDayCqWcmCoreImplCommandsWCMCommandServletInfo;
import org.openapitools.model.ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo;
import org.openapitools.model.ComDayCqWcmCoreImplEventPageEventAuditListenerInfo;
import org.openapitools.model.ComDayCqWcmCoreImplEventPagePostProcessorInfo;
import org.openapitools.model.ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo;
import org.openapitools.model.ComDayCqWcmCoreImplEventTemplatePostProcessorInfo;
import org.openapitools.model.ComDayCqWcmCoreImplLanguageManagerImplInfo;
import org.openapitools.model.ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo;
import org.openapitools.model.ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo;
import org.openapitools.model.ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo;
import org.openapitools.model.ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo;
import org.openapitools.model.ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo;
import org.openapitools.model.ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo;
import org.openapitools.model.ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo;
import org.openapitools.model.ComDayCqWcmCoreImplServletsFindReplaceServletInfo;
import org.openapitools.model.ComDayCqWcmCoreImplServletsReferenceSearchServletInfo;
import org.openapitools.model.ComDayCqWcmCoreImplServletsThumbnailServletInfo;
import org.openapitools.model.ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo;
import org.openapitools.model.ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo;
import org.openapitools.model.ComDayCqWcmCoreImplVersionManagerImplInfo;
import org.openapitools.model.ComDayCqWcmCoreImplVersionPurgeTaskInfo;
import org.openapitools.model.ComDayCqWcmCoreImplWCMDebugFilterInfo;
import org.openapitools.model.ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo;
import org.openapitools.model.ComDayCqWcmCoreImplWarpTimeWarpFilterInfo;
import org.openapitools.model.ComDayCqWcmCoreMvtMVTStatisticsImplInfo;
import org.openapitools.model.ComDayCqWcmCoreStatsPageViewStatisticsImplInfo;
import org.openapitools.model.ComDayCqWcmCoreWCMRequestFilterInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterDesignPackageImporterInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo;
import org.openapitools.model.ComDayCqWcmFoundationFormsImplFormChooserServletInfo;
import org.openapitools.model.ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo;
import org.openapitools.model.ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo;
import org.openapitools.model.ComDayCqWcmFoundationFormsImplMailServletInfo;
import org.openapitools.model.ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo;
import org.openapitools.model.ComDayCqWcmFoundationImplHTTPAuthHandlerInfo;
import org.openapitools.model.ComDayCqWcmFoundationImplPageImpressionsTrackerInfo;
import org.openapitools.model.ComDayCqWcmFoundationImplPageRedirectServletInfo;
import org.openapitools.model.ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo;
import org.openapitools.model.ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo;
import org.openapitools.model.ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo;
import org.openapitools.model.ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo;
import org.openapitools.model.ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo;
import org.openapitools.model.ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo;
import org.openapitools.model.ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo;
import org.openapitools.model.ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo;
import org.openapitools.model.ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo;
import org.openapitools.model.ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo;
import org.openapitools.model.ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo;
import org.openapitools.model.ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo;
import org.openapitools.model.ComDayCqWcmMsmImplRolloutManagerImplInfo;
import org.openapitools.model.ComDayCqWcmMsmImplServletsAuditLogServletInfo;
import org.openapitools.model.ComDayCqWcmNotificationEmailImplEmailChannelInfo;
import org.openapitools.model.ComDayCqWcmNotificationImplNotificationManagerImplInfo;
import org.openapitools.model.ComDayCqWcmScriptingImplBVPManagerInfo;
import org.openapitools.model.ComDayCqWcmUndoUndoConfigInfo;
import org.openapitools.model.ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo;
import org.openapitools.model.ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo;
import org.openapitools.model.ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo;
import org.openapitools.model.ComDayCqWidgetImplHtmlLibraryManagerImplInfo;
import org.openapitools.model.ComDayCqWidgetImplWidgetExtensionProviderImplInfo;
import org.openapitools.model.ComDayCqWorkflowImplEmailEMailNotificationServiceInfo;
import org.openapitools.model.ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo;
import org.openapitools.model.ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo;
import org.openapitools.model.ComDayCrxSecurityTokenImplTokenCleanupTaskInfo;
import org.openapitools.model.GuideLocalizationServiceInfo;
import org.openapitools.model.MessagingUserComponentFactoryInfo;
import org.openapitools.model.OrgApacheAriesJmxFrameworkStateConfigInfo;
import org.openapitools.model.OrgApacheFelixEventadminImplEventAdminInfo;
import org.openapitools.model.OrgApacheFelixHttpInfo;
import org.openapitools.model.OrgApacheFelixHttpSslfilterSslFilterInfo;
import org.openapitools.model.OrgApacheFelixJaasConfigurationFactoryInfo;
import org.openapitools.model.OrgApacheFelixJaasConfigurationSpiInfo;
import org.openapitools.model.OrgApacheFelixScrScrServiceInfo;
import org.openapitools.model.OrgApacheFelixSystemreadyImplComponentsCheckInfo;
import org.openapitools.model.OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo;
import org.openapitools.model.OrgApacheFelixSystemreadyImplServicesCheckInfo;
import org.openapitools.model.OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo;
import org.openapitools.model.OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo;
import org.openapitools.model.OrgApacheFelixSystemreadySystemReadyMonitorInfo;
import org.openapitools.model.OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo;
import org.openapitools.model.OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo;
import org.openapitools.model.OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo;
import org.openapitools.model.OrgApacheHttpProxyconfiguratorInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo;
import org.openapitools.model.OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo;
import org.openapitools.model.OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo;
import org.openapitools.model.OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo;
import org.openapitools.model.OrgApacheSlingAuthCoreImplLogoutServletInfo;
import org.openapitools.model.OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo;
import org.openapitools.model.OrgApacheSlingCaconfigImplConfigurationResolverImplInfo;
import org.openapitools.model.OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo;
import org.openapitools.model.OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo;
import org.openapitools.model.OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo;
import org.openapitools.model.OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo;
import org.openapitools.model.OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo;
import org.openapitools.model.OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo;
import org.openapitools.model.OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo;
import org.openapitools.model.OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo;
import org.openapitools.model.OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo;
import org.openapitools.model.OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo;
import org.openapitools.model.OrgApacheSlingCommonsLogLogManagerInfo;
import org.openapitools.model.OrgApacheSlingCommonsMetricsInternalLogReporterInfo;
import org.openapitools.model.OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo;
import org.openapitools.model.OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo;
import org.openapitools.model.OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo;
import org.openapitools.model.OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo;
import org.openapitools.model.OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo;
import org.openapitools.model.OrgApacheSlingDatasourceDataSourceFactoryInfo;
import org.openapitools.model.OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo;
import org.openapitools.model.OrgApacheSlingDiscoveryOakConfigInfo;
import org.openapitools.model.OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo;
import org.openapitools.model.OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo;
import org.openapitools.model.OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo;
import org.openapitools.model.OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo;
import org.openapitools.model.OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo;
import org.openapitools.model.OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo;
import org.openapitools.model.OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo;
import org.openapitools.model.OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo;
import org.openapitools.model.OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo;
import org.openapitools.model.OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo;
import org.openapitools.model.OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo;
import org.openapitools.model.OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo;
import org.openapitools.model.OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo;
import org.openapitools.model.OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo;
import org.openapitools.model.OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo;
import org.openapitools.model.OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo;
import org.openapitools.model.OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo;
import org.openapitools.model.OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo;
import org.openapitools.model.OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo;
import org.openapitools.model.OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo;
import org.openapitools.model.OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo;
import org.openapitools.model.OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo;
import org.openapitools.model.OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo;
import org.openapitools.model.OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo;
import org.openapitools.model.OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo;
import org.openapitools.model.OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo;
import org.openapitools.model.OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo;
import org.openapitools.model.OrgApacheSlingEngineImplLogRequestLoggerInfo;
import org.openapitools.model.OrgApacheSlingEngineImplLogRequestLoggerServiceInfo;
import org.openapitools.model.OrgApacheSlingEngineImplSlingMainServletInfo;
import org.openapitools.model.OrgApacheSlingEngineParametersInfo;
import org.openapitools.model.OrgApacheSlingEventImplEventingThreadPoolInfo;
import org.openapitools.model.OrgApacheSlingEventImplJobsDefaultJobManagerInfo;
import org.openapitools.model.OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo;
import org.openapitools.model.OrgApacheSlingEventImplJobsJobConsumerManagerInfo;
import org.openapitools.model.OrgApacheSlingEventJobsQueueConfigurationInfo;
import org.openapitools.model.OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo;
import org.openapitools.model.OrgApacheSlingFeatureflagsFeatureInfo;
import org.openapitools.model.OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo;
import org.openapitools.model.OrgApacheSlingHapiImplHApiUtilImplInfo;
import org.openapitools.model.OrgApacheSlingHcCoreImplCompositeHealthCheckInfo;
import org.openapitools.model.OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo;
import org.openapitools.model.OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo;
import org.openapitools.model.OrgApacheSlingHcCoreImplScriptableHealthCheckInfo;
import org.openapitools.model.OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo;
import org.openapitools.model.OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo;
import org.openapitools.model.OrgApacheSlingI18nImplI18NFilterInfo;
import org.openapitools.model.OrgApacheSlingI18nImplJcrResourceBundleProviderInfo;
import org.openapitools.model.OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo;
import org.openapitools.model.OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo;
import org.openapitools.model.OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo;
import org.openapitools.model.OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo;
import org.openapitools.model.OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo;
import org.openapitools.model.OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo;
import org.openapitools.model.OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo;
import org.openapitools.model.OrgApacheSlingJcrRepoinitRepositoryInitializerInfo;
import org.openapitools.model.OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo;
import org.openapitools.model.OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo;
import org.openapitools.model.OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo;
import org.openapitools.model.OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo;
import org.openapitools.model.OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo;
import org.openapitools.model.OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo;
import org.openapitools.model.OrgApacheSlingJmxProviderImplJMXResourceProviderInfo;
import org.openapitools.model.OrgApacheSlingModelsImplModelAdapterFactoryInfo;
import org.openapitools.model.OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo;
import org.openapitools.model.OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo;
import org.openapitools.model.OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo;
import org.openapitools.model.OrgApacheSlingResourcemergerPickerOverridingInfo;
import org.openapitools.model.OrgApacheSlingScriptingCoreImplScriptCacheImplInfo;
import org.openapitools.model.OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo;
import org.openapitools.model.OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo;
import org.openapitools.model.OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo;
import org.openapitools.model.OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo;
import org.openapitools.model.OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo;
import org.openapitools.model.OrgApacheSlingSecurityImplContentDispositionFilterInfo;
import org.openapitools.model.OrgApacheSlingSecurityImplReferrerFilterInfo;
import org.openapitools.model.OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo;
import org.openapitools.model.OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo;
import org.openapitools.model.OrgApacheSlingServletsGetDefaultGetServletInfo;
import org.openapitools.model.OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo;
import org.openapitools.model.OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo;
import org.openapitools.model.OrgApacheSlingServletsPostImplSlingPostServletInfo;
import org.openapitools.model.OrgApacheSlingServletsResolverSlingServletResolverInfo;
import org.openapitools.model.OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo;
import org.openapitools.model.OrgApacheSlingStartupfilterImplStartupFilterImplInfo;
import org.openapitools.model.OrgApacheSlingTenantInternalTenantProviderImplInfo;
import org.openapitools.model.OrgApacheSlingTracerInternalLogTracerInfo;
import org.openapitools.model.OrgApacheSlingXssImplXSSFilterImplInfo;

import java.util.Map;
import java.util.List;
import org.openapitools.api.NotFoundException;

import java.io.InputStream;

import javax.ws.rs.core.Context;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.SecurityContext;
import javax.ws.rs.*;
import javax.inject.Inject;

import javax.validation.constraints.*;

@Path("/system")


@io.swagger.annotations.Api(description = "the system API")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaResteasyServerCodegen", date = "2019-08-05T00:59:30.156Z[GMT]")
public class SystemApi  {

    @Inject SystemApiService service;

    @POST
    @Path("/console/configMgr/Adaptive Form and Interactive Communication Web Channel Configuration")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response adaptiveFormAndInteractiveCommunicationWebChannelConfiguration(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("showPlaceholder") Boolean showPlaceholder,  @QueryParam("maximumCacheEntries") Integer maximumCacheEntries,  @QueryParam("af.scripting.compatversion") String afScriptingCompatversion,  @QueryParam("makeFileNameUnique") Boolean makeFileNameUnique,  @QueryParam("generatingCompliantData") Boolean generatingCompliantData,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.adaptiveFormAndInteractiveCommunicationWebChannelConfiguration(post,apply,delete,action,$location,propertylist,showPlaceholder,maximumCacheEntries,afScriptingCompatversion,makeFileNameUnique,generatingCompliantData,securityContext);
    }
    @POST
    @Path("/console/configMgr/Adaptive Form and Interactive Communication Web Channel Theme Configuration")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("fontList") List<String> fontList,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur(post,apply,delete,action,$location,propertylist,fontList,securityContext);
    }
    @POST
    @Path("/console/configMgr/Analytics Component Query Cache Service")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = AnalyticsComponentQueryCacheServiceInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = AnalyticsComponentQueryCacheServiceInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response analyticsComponentQueryCacheService(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.analytics.component.query.cache.size") Integer cqAnalyticsComponentQueryCacheSize,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.analyticsComponentQueryCacheService(post,apply,delete,action,$location,propertylist,cqAnalyticsComponentQueryCacheSize,securityContext);
    }
    @POST
    @Path("/console/configMgr/Apache Sling Health Check Result HTML Serializer")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ApacheSlingHealthCheckResultHTMLSerializerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ApacheSlingHealthCheckResultHTMLSerializerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response apacheSlingHealthCheckResultHTMLSerializer(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("styleString") String styleString,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.apacheSlingHealthCheckResultHTMLSerializer(post,apply,delete,action,$location,propertylist,styleString,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.aem.formsndocuments.config.AEMFormsManagerConfiguration")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("formsManagerConfig.includeOOTBTemplates") Boolean formsManagerConfigIncludeOOTBTemplates,  @QueryParam("formsManagerConfig.includeDeprecatedTemplates") Boolean formsManagerConfigIncludeDeprecatedTemplates,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration(post,apply,delete,action,$location,propertylist,formsManagerConfigIncludeOOTBTemplates,formsManagerConfigIncludeDeprecatedTemplates,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.aem.transaction.core.impl.TransactionRecorder")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeAemTransactionCoreImplTransactionRecorderInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeAemTransactionCoreImplTransactionRecorderInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeAemTransactionCoreImplTransactionRecorder(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("isTransactionRecordingEnabled") Boolean isTransactionRecordingEnabled,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeAemTransactionCoreImplTransactionRecorder(post,apply,delete,action,$location,propertylist,isTransactionRecordingEnabled,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.DeprecateIndexesHC")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("hc.name") String hcName,  @QueryParam("hc.tags") List<String> hcTags,  @QueryParam("hc.mbean.name") String hcMbeanName,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC(post,apply,delete,action,$location,propertylist,hcName,hcTags,hcMbeanName,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.ReplicationAgentsDisabledHC")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("hc.name") String hcName,  @QueryParam("hc.tags") List<String> hcTags,  @QueryParam("hc.mbean.name") String hcMbeanName,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC(post,apply,delete,action,$location,propertylist,hcName,hcTags,hcMbeanName,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.aem.upgrade.prechecks.mbean.impl.PreUpgradeTasksMBeanImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("pre-upgrade.maintenance.tasks") List<String> preUpgradeMaintenanceTasks,  @QueryParam("pre-upgrade.hc.tags") List<String> preUpgradeHcTags,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl(post,apply,delete,action,$location,propertylist,preUpgradeMaintenanceTasks,preUpgradeHcTags,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.aem.upgrade.prechecks.tasks.impl.ConsistencyCheckTaskImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("root.path") String rootPath,  @QueryParam("fix.inconsistencies") Boolean fixInconsistencies,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl(post,apply,delete,action,$location,propertylist,rootPath,fixInconsistencies,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.account.api.AccountManagementService")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqAccountApiAccountManagementServiceInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqAccountApiAccountManagementServiceInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqAccountApiAccountManagementService(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.accountmanager.token.validity.period") Integer cqAccountmanagerTokenValidityPeriod,  @QueryParam("cq.accountmanager.config.requestnewaccount.mail") String cqAccountmanagerConfigRequestnewaccountMail,  @QueryParam("cq.accountmanager.config.requestnewpwd.mail") String cqAccountmanagerConfigRequestnewpwdMail,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqAccountApiAccountManagementService(post,apply,delete,action,$location,propertylist,cqAccountmanagerTokenValidityPeriod,cqAccountmanagerConfigRequestnewaccountMail,cqAccountmanagerConfigRequestnewpwdMail,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.account.impl.AccountManagementServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqAccountImplAccountManagementServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqAccountImplAccountManagementServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqAccountImplAccountManagementServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.accountmanager.config.informnewaccount.mail") String cqAccountmanagerConfigInformnewaccountMail,  @QueryParam("cq.accountmanager.config.informnewpwd.mail") String cqAccountmanagerConfigInformnewpwdMail,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqAccountImplAccountManagementServlet(post,apply,delete,action,$location,propertylist,cqAccountmanagerConfigInformnewaccountMail,cqAccountmanagerConfigInformnewpwdMail,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.address.impl.location.LocationListServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqAddressImplLocationLocationListServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqAddressImplLocationLocationListServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqAddressImplLocationLocationListServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.address.location.default.maxResults") Integer cqAddressLocationDefaultMaxResults,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqAddressImplLocationLocationListServlet(post,apply,delete,action,$location,propertylist,cqAddressLocationDefaultMaxResults,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.audit.purge.Dam")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqAuditPurgeDamInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqAuditPurgeDamInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqAuditPurgeDam(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("auditlog.rule.name") String auditlogRuleName,  @QueryParam("auditlog.rule.contentpath") String auditlogRuleContentpath,  @QueryParam("auditlog.rule.minimumage") Integer auditlogRuleMinimumage,  @QueryParam("auditlog.rule.types") String auditlogRuleTypes,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqAuditPurgeDam(post,apply,delete,action,$location,propertylist,auditlogRuleName,auditlogRuleContentpath,auditlogRuleMinimumage,auditlogRuleTypes,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.audit.purge.Pages")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqAuditPurgePagesInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqAuditPurgePagesInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqAuditPurgePages(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("auditlog.rule.name") String auditlogRuleName,  @QueryParam("auditlog.rule.contentpath") String auditlogRuleContentpath,  @QueryParam("auditlog.rule.minimumage") Integer auditlogRuleMinimumage,  @QueryParam("auditlog.rule.types") String auditlogRuleTypes,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqAuditPurgePages(post,apply,delete,action,$location,propertylist,auditlogRuleName,auditlogRuleContentpath,auditlogRuleMinimumage,auditlogRuleTypes,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.audit.purge.Replication")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqAuditPurgeReplicationInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqAuditPurgeReplicationInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqAuditPurgeReplication(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("auditlog.rule.name") String auditlogRuleName,  @QueryParam("auditlog.rule.contentpath") String auditlogRuleContentpath,  @QueryParam("auditlog.rule.minimumage") Integer auditlogRuleMinimumage,  @QueryParam("auditlog.rule.types") String auditlogRuleTypes,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqAuditPurgeReplication(post,apply,delete,action,$location,propertylist,auditlogRuleName,auditlogRuleContentpath,auditlogRuleMinimumage,auditlogRuleTypes,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.cdn.rewriter.impl.AWSCloudFrontRewriter")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqCdnRewriterImplAWSCloudFrontRewriter(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("service.ranking") Integer serviceRanking,  @QueryParam("keypair.id") String keypairId,  @QueryParam("keypair.alias") String keypairAlias,  @QueryParam("cdnrewriter.attributes") List<String> cdnrewriterAttributes,  @QueryParam("cdn.rewriter.distribution.domain") String cdnRewriterDistributionDomain,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqCdnRewriterImplAWSCloudFrontRewriter(post,apply,delete,action,$location,propertylist,serviceRanking,keypairId,keypairAlias,cdnrewriterAttributes,cdnRewriterDistributionDomain,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNConfigServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqCdnRewriterImplCDNConfigServiceImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cdn.config.distribution.domain") String cdnConfigDistributionDomain,  @QueryParam("cdn.config.enable.rewriting") Boolean cdnConfigEnableRewriting,  @QueryParam("cdn.config.path.prefixes") List<String> cdnConfigPathPrefixes,  @QueryParam("cdn.config.cdnttl") Integer cdnConfigCdnttl,  @QueryParam("cdn.config.application.protocol") String cdnConfigApplicationProtocol,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqCdnRewriterImplCDNConfigServiceImpl(post,apply,delete,action,$location,propertylist,cdnConfigDistributionDomain,cdnConfigEnableRewriting,cdnConfigPathPrefixes,cdnConfigCdnttl,cdnConfigApplicationProtocol,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNRewriter")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqCdnRewriterImplCDNRewriterInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqCdnRewriterImplCDNRewriterInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqCdnRewriterImplCDNRewriter(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("service.ranking") Integer serviceRanking,  @QueryParam("cdnrewriter.attributes") List<String> cdnrewriterAttributes,  @QueryParam("cdn.rewriter.distribution.domain") String cdnRewriterDistributionDomain,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqCdnRewriterImplCDNRewriter(post,apply,delete,action,$location,propertylist,serviceRanking,cdnrewriterAttributes,cdnRewriterDistributionDomain,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.cloudconfig.core.impl.ConfigurationReplicationEventHandler")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("flush.agents") List<String> flushAgents,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle(post,apply,delete,action,$location,propertylist,flushAgents,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.commerce.impl.asset.DynamicImageHandler")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqCommerceImplAssetDynamicImageHandler(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.commerce.asset.handler.active") Boolean cqCommerceAssetHandlerActive,  @QueryParam("cq.commerce.asset.handler.name") String cqCommerceAssetHandlerName,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqCommerceImplAssetDynamicImageHandler(post,apply,delete,action,$location,propertylist,cqCommerceAssetHandlerActive,cqCommerceAssetHandlerName,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.commerce.impl.asset.ProductAssetHandlerProviderImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.commerce.asset.handler.fallback") String cqCommerceAssetHandlerFallback,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl(post,apply,delete,action,$location,propertylist,cqCommerceAssetHandlerFallback,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.commerce.impl.asset.StaticImageHandler")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqCommerceImplAssetStaticImageHandlerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqCommerceImplAssetStaticImageHandlerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqCommerceImplAssetStaticImageHandler(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.commerce.asset.handler.active") Boolean cqCommerceAssetHandlerActive,  @QueryParam("cq.commerce.asset.handler.name") String cqCommerceAssetHandlerName,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqCommerceImplAssetStaticImageHandler(post,apply,delete,action,$location,propertylist,cqCommerceAssetHandlerActive,cqCommerceAssetHandlerName,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.commerce.impl.asset.VideoHandler")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqCommerceImplAssetVideoHandlerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqCommerceImplAssetVideoHandlerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqCommerceImplAssetVideoHandler(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.commerce.asset.handler.active") Boolean cqCommerceAssetHandlerActive,  @QueryParam("cq.commerce.asset.handler.name") String cqCommerceAssetHandlerName,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqCommerceImplAssetVideoHandler(post,apply,delete,action,$location,propertylist,cqCommerceAssetHandlerActive,cqCommerceAssetHandlerName,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.commerce.impl.promotion.PromotionManagerImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqCommerceImplPromotionPromotionManagerImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.commerce.promotion.root") String cqCommercePromotionRoot,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqCommerceImplPromotionPromotionManagerImpl(post,apply,delete,action,$location,propertylist,cqCommercePromotionRoot,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.commerce.pim.impl.cataloggenerator.CatalogGeneratorImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.commerce.cataloggenerator.bucketsize") Integer cqCommerceCataloggeneratorBucketsize,  @QueryParam("cq.commerce.cataloggenerator.bucketname") String cqCommerceCataloggeneratorBucketname,  @QueryParam("cq.commerce.cataloggenerator.excludedtemplateproperties") List<String> cqCommerceCataloggeneratorExcludedtemplateproperties,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl(post,apply,delete,action,$location,propertylist,cqCommerceCataloggeneratorBucketsize,cqCommerceCataloggeneratorBucketname,cqCommerceCataloggeneratorExcludedtemplateproperties,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.commerce.pim.impl.PageEventListener")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqCommercePimImplPageEventListenerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqCommercePimImplPageEventListenerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqCommercePimImplPageEventListener(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.commerce.pageeventlistener.enabled") Boolean cqCommercePageeventlistenerEnabled,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqCommercePimImplPageEventListener(post,apply,delete,action,$location,propertylist,cqCommercePageeventlistenerEnabled,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.commerce.pim.impl.productfeed.ProductFeedServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqCommercePimImplProductfeedProductFeedServiceImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("Feed generator algorithm") String feedGeneratorAlgorithm,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqCommercePimImplProductfeedProductFeedServiceImpl(post,apply,delete,action,$location,propertylist,feedGeneratorAlgorithm,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.contentinsight.impl.ReportingServicesSettingsProvider")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqContentinsightImplReportingServicesSettingsProvider(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("reportingservices.url") String reportingservicesUrl,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqContentinsightImplReportingServicesSettingsProvider(post,apply,delete,action,$location,propertylist,reportingservicesUrl,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.BrightEdgeProxyServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqContentinsightImplServletsBrightEdgeProxyServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("brightedge.url") String brightedgeUrl,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqContentinsightImplServletsBrightEdgeProxyServlet(post,apply,delete,action,$location,propertylist,brightedgeUrl,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.ReportingServicesProxyServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqContentinsightImplServletsReportingServicesProxyServle(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("reportingservices.proxy.whitelist") List<String> reportingservicesProxyWhitelist,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqContentinsightImplServletsReportingServicesProxyServle(post,apply,delete,action,$location,propertylist,reportingservicesProxyWhitelist,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.dam.cfm.impl.component.ComponentConfigImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqDamCfmImplComponentComponentConfigImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqDamCfmImplComponentComponentConfigImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqDamCfmImplComponentComponentConfigImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("dam.cfm.component.resourceType") String damCfmComponentResourceType,  @QueryParam("dam.cfm.component.fileReferenceProp") String damCfmComponentFileReferenceProp,  @QueryParam("dam.cfm.component.elementsProp") String damCfmComponentElementsProp,  @QueryParam("dam.cfm.component.variationProp") String damCfmComponentVariationProp,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqDamCfmImplComponentComponentConfigImpl(post,apply,delete,action,$location,propertylist,damCfmComponentResourceType,damCfmComponentFileReferenceProp,damCfmComponentElementsProp,damCfmComponentVariationProp,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.dam.cfm.impl.conf.FeatureConfigImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqDamCfmImplConfFeatureConfigImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqDamCfmImplConfFeatureConfigImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqDamCfmImplConfFeatureConfigImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("dam.cfm.resourceTypes") List<String> damCfmResourceTypes,  @QueryParam("dam.cfm.referenceProperties") List<String> damCfmReferenceProperties,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqDamCfmImplConfFeatureConfigImpl(post,apply,delete,action,$location,propertylist,damCfmResourceTypes,damCfmReferenceProperties,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.AssetProcessor")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqDamCfmImplContentRewriterAssetProcessor(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("pipeline.type") String pipelineType,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqDamCfmImplContentRewriterAssetProcessor(post,apply,delete,action,$location,propertylist,pipelineType,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.ParRangeFilter")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqDamCfmImplContentRewriterParRangeFilter(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("pipeline.type") String pipelineType,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqDamCfmImplContentRewriterParRangeFilter(post,apply,delete,action,$location,propertylist,pipelineType,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.PayloadFilter")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqDamCfmImplContentRewriterPayloadFilter(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("pipeline.type") String pipelineType,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqDamCfmImplContentRewriterPayloadFilter(post,apply,delete,action,$location,propertylist,pipelineType,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.dam.dm.process.image.PTiffManagerImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqDamDmProcessImagePTiffManagerImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqDamDmProcessImagePTiffManagerImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqDamDmProcessImagePTiffManagerImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("maxMemory") Integer maxMemory,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqDamDmProcessImagePTiffManagerImpl(post,apply,delete,action,$location,propertylist,maxMemory,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.dam.ips.impl.replication.trigger.ReplicateOnModifyWorker")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("dmreplicateonmodify.enabled") Boolean dmreplicateonmodifyEnabled,  @QueryParam("dmreplicateonmodify.forcesyncdeletes") Boolean dmreplicateonmodifyForcesyncdeletes,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker(post,apply,delete,action,$location,propertylist,dmreplicateonmodifyEnabled,dmreplicateonmodifyForcesyncdeletes,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.dam.mac.sync.helper.impl.MACSyncClientImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqDamMacSyncHelperImplMACSyncClientImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("com.adobe.dam.mac.sync.client.so.timeout") Integer comAdobeDamMacSyncClientSoTimeout,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqDamMacSyncHelperImplMACSyncClientImpl(post,apply,delete,action,$location,propertylist,comAdobeDamMacSyncClientSoTimeout,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.dam.mac.sync.impl.DAMSyncServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqDamMacSyncImplDAMSyncServiceImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("com.adobe.cq.dam.mac.sync.damsyncservice.registered_paths") List<String> comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths,  @QueryParam("com.adobe.cq.dam.mac.sync.damsyncservice.sync.renditions") Boolean comAdobeCqDamMacSyncDamsyncserviceSyncRenditions,  @QueryParam("com.adobe.cq.dam.mac.sync.damsyncservice.replicate.thread.wait.ms") Integer comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs,  @QueryParam("com.adobe.cq.dam.mac.sync.damsyncservice.platform") String comAdobeCqDamMacSyncDamsyncservicePlatform,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqDamMacSyncImplDAMSyncServiceImpl(post,apply,delete,action,$location,propertylist,comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths,comAdobeCqDamMacSyncDamsyncserviceSyncRenditions,comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs,comAdobeCqDamMacSyncDamsyncservicePlatform,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.dam.processor.nui.impl.NuiAssetProcessor")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqDamProcessorNuiImplNuiAssetProcessor(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("nuiEnabled") Boolean nuiEnabled,  @QueryParam("nuiServiceUrl") String nuiServiceUrl,  @QueryParam("nuiApiKey") String nuiApiKey,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqDamProcessorNuiImplNuiAssetProcessor(post,apply,delete,action,$location,propertylist,nuiEnabled,nuiServiceUrl,nuiApiKey,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.dam.s7imaging.impl.is.ImageServerComponent")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqDamS7imagingImplIsImageServerComponentInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqDamS7imagingImplIsImageServerComponentInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqDamS7imagingImplIsImageServerComponent(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("TcpPort") String tcpPort,  @QueryParam("AllowRemoteAccess") Boolean allowRemoteAccess,  @QueryParam("MaxRenderRgnPixels") String maxRenderRgnPixels,  @QueryParam("MaxMessageSize") String maxMessageSize,  @QueryParam("RandomAccessUrlTimeout") Integer randomAccessUrlTimeout,  @QueryParam("WorkerThreads") Integer workerThreads,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqDamS7imagingImplIsImageServerComponent(post,apply,delete,action,$location,propertylist,tcpPort,allowRemoteAccess,maxRenderRgnPixels,maxMessageSize,randomAccessUrlTimeout,workerThreads,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.dam.s7imaging.impl.ps.PlatformServerServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqDamS7imagingImplPsPlatformServerServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cache.enable") Boolean cacheEnable,  @QueryParam("cache.rootPaths") List<String> cacheRootPaths,  @QueryParam("cache.maxSize") Integer cacheMaxSize,  @QueryParam("cache.maxEntries") Integer cacheMaxEntries,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqDamS7imagingImplPsPlatformServerServlet(post,apply,delete,action,$location,propertylist,cacheEnable,cacheRootPaths,cacheMaxSize,cacheMaxEntries,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.dam.webdav.impl.io.AssetIOHandler")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqDamWebdavImplIoAssetIOHandler(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("service.ranking") Integer serviceRanking,  @QueryParam("pathPrefix") String pathPrefix,  @QueryParam("createVersion") Boolean createVersion,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqDamWebdavImplIoAssetIOHandler(post,apply,delete,action,$location,propertylist,serviceRanking,pathPrefix,createVersion,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.dam.webdav.impl.io.DamWebdavVersionLinkingJob")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.dam.webdav.version.linking.enable") Boolean cqDamWebdavVersionLinkingEnable,  @QueryParam("cq.dam.webdav.version.linking.scheduler.period") Integer cqDamWebdavVersionLinkingSchedulerPeriod,  @QueryParam("cq.dam.webdav.version.linking.staging.timeout") Integer cqDamWebdavVersionLinkingStagingTimeout,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob(post,apply,delete,action,$location,propertylist,cqDamWebdavVersionLinkingEnable,cqDamWebdavVersionLinkingSchedulerPeriod,cqDamWebdavVersionLinkingStagingTimeout,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.dam.webdav.impl.io.SpecialFilesHandler")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqDamWebdavImplIoSpecialFilesHandler(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("com.day.cq.dam.core.impl.io.SpecialFilesHandler.filepatters") List<String> comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqDamWebdavImplIoSpecialFilesHandler(post,apply,delete,action,$location,propertylist,comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.deserfw.impl.DeserializationFirewallImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqDeserfwImplDeserializationFirewallImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqDeserfwImplDeserializationFirewallImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqDeserfwImplDeserializationFirewallImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("firewall.deserialization.whitelist") List<String> firewallDeserializationWhitelist,  @QueryParam("firewall.deserialization.blacklist") List<String> firewallDeserializationBlacklist,  @QueryParam("firewall.deserialization.diagnostics") String firewallDeserializationDiagnostics,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqDeserfwImplDeserializationFirewallImpl(post,apply,delete,action,$location,propertylist,firewallDeserializationWhitelist,firewallDeserializationBlacklist,firewallDeserializationDiagnostics,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.dtm.impl.service.DTMWebServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqDtmImplServiceDTMWebServiceImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqDtmImplServiceDTMWebServiceImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqDtmImplServiceDTMWebServiceImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("connection.timeout") Integer connectionTimeout,  @QueryParam("socket.timeout") Integer socketTimeout,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqDtmImplServiceDTMWebServiceImpl(post,apply,delete,action,$location,propertylist,connectionTimeout,socketTimeout,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.dtm.impl.servlets.DTMDeployHookServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqDtmImplServletsDTMDeployHookServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqDtmImplServletsDTMDeployHookServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqDtmImplServletsDTMDeployHookServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("dtm.staging.ip.whitelist") List<String> dtmStagingIpWhitelist,  @QueryParam("dtm.production.ip.whitelist") List<String> dtmProductionIpWhitelist,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqDtmImplServletsDTMDeployHookServlet(post,apply,delete,action,$location,propertylist,dtmStagingIpWhitelist,dtmProductionIpWhitelist,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.dtm.reactor.impl.service.WebServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqDtmReactorImplServiceWebServiceImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqDtmReactorImplServiceWebServiceImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqDtmReactorImplServiceWebServiceImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("endpointUri") String endpointUri,  @QueryParam("connectionTimeout") Integer connectionTimeout,  @QueryParam("socketTimeout") Integer socketTimeout,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqDtmReactorImplServiceWebServiceImpl(post,apply,delete,action,$location,propertylist,endpointUri,connectionTimeout,socketTimeout,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.experiencelog.impl.ExperienceLogConfigServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqExperiencelogImplExperienceLogConfigServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("enabled") Boolean enabled,  @QueryParam("disabledForGroups") List<String> disabledForGroups,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqExperiencelogImplExperienceLogConfigServlet(post,apply,delete,action,$location,propertylist,enabled,disabledForGroups,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.hc.ContentPackagesHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqHcContentPackagesHealthCheckInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqHcContentPackagesHealthCheckInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqHcContentPackagesHealthCheck(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("hc.name") String hcName,  @QueryParam("hc.tags") List<String> hcTags,  @QueryParam("hc.mbean.name") String hcMbeanName,  @QueryParam("package.names") List<String> packageNames,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqHcContentPackagesHealthCheck(post,apply,delete,action,$location,propertylist,hcName,hcTags,hcMbeanName,packageNames,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.history.impl.HistoryRequestFilter")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqHistoryImplHistoryRequestFilterInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqHistoryImplHistoryRequestFilterInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqHistoryImplHistoryRequestFilter(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("history.requestFilter.excludedSelectors") List<String> historyRequestFilterExcludedSelectors,  @QueryParam("history.requestFilter.excludedExtensions") List<String> historyRequestFilterExcludedExtensions,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqHistoryImplHistoryRequestFilter(post,apply,delete,action,$location,propertylist,historyRequestFilterExcludedSelectors,historyRequestFilterExcludedExtensions,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.history.impl.HistoryServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqHistoryImplHistoryServiceImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqHistoryImplHistoryServiceImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqHistoryImplHistoryServiceImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("history.service.resourceTypes") List<String> historyServiceResourceTypes,  @QueryParam("history.service.pathFilter") List<String> historyServicePathFilter,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqHistoryImplHistoryServiceImpl(post,apply,delete,action,$location,propertylist,historyServiceResourceTypes,historyServicePathFilter,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.inbox.impl.typeprovider.ItemTypeProvider")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqInboxImplTypeproviderItemTypeProvider(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("inbox.impl.typeprovider.registrypaths") List<String> inboxImplTypeproviderRegistrypaths,  @QueryParam("inbox.impl.typeprovider.legacypaths") List<String> inboxImplTypeproviderLegacypaths,  @QueryParam("inbox.impl.typeprovider.defaulturl.failureitem") String inboxImplTypeproviderDefaulturlFailureitem,  @QueryParam("inbox.impl.typeprovider.defaulturl.workitem") String inboxImplTypeproviderDefaulturlWorkitem,  @QueryParam("inbox.impl.typeprovider.defaulturl.task") String inboxImplTypeproviderDefaulturlTask,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqInboxImplTypeproviderItemTypeProvider(post,apply,delete,action,$location,propertylist,inboxImplTypeproviderRegistrypaths,inboxImplTypeproviderLegacypaths,inboxImplTypeproviderDefaulturlFailureitem,inboxImplTypeproviderDefaulturlWorkitem,inboxImplTypeproviderDefaulturlTask,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.projects.impl.servlet.ProjectImageServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqProjectsImplServletProjectImageServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqProjectsImplServletProjectImageServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqProjectsImplServletProjectImageServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("image.quality") String imageQuality,  @QueryParam("image.supported.resolutions") String imageSupportedResolutions,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqProjectsImplServletProjectImageServlet(post,apply,delete,action,$location,propertylist,imageQuality,imageSupportedResolutions,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.projects.purge.Scheduler")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqProjectsPurgeSchedulerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqProjectsPurgeSchedulerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqProjectsPurgeScheduler(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("scheduledpurge.name") String scheduledpurgeName,  @QueryParam("scheduledpurge.purgeActive") Boolean scheduledpurgePurgeActive,  @QueryParam("scheduledpurge.templates") List<String> scheduledpurgeTemplates,  @QueryParam("scheduledpurge.purgeGroups") Boolean scheduledpurgePurgeGroups,  @QueryParam("scheduledpurge.purgeAssets") Boolean scheduledpurgePurgeAssets,  @QueryParam("scheduledpurge.terminateRunningWorkflows") Boolean scheduledpurgeTerminateRunningWorkflows,  @QueryParam("scheduledpurge.daysold") Integer scheduledpurgeDaysold,  @QueryParam("scheduledpurge.saveThreshold") Integer scheduledpurgeSaveThreshold,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqProjectsPurgeScheduler(post,apply,delete,action,$location,propertylist,scheduledpurgeName,scheduledpurgePurgeActive,scheduledpurgeTemplates,scheduledpurgePurgeGroups,scheduledpurgePurgeAssets,scheduledpurgeTerminateRunningWorkflows,scheduledpurgeDaysold,scheduledpurgeSaveThreshold,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.scheduled.exporter.impl.ScheduledExporterImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqScheduledExporterImplScheduledExporterImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqScheduledExporterImplScheduledExporterImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqScheduledExporterImplScheduledExporterImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("include.paths") List<String> includePaths,  @QueryParam("exporter.user") String exporterUser,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqScheduledExporterImplScheduledExporterImpl(post,apply,delete,action,$location,propertylist,includePaths,exporterUser,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.screens.analytics.impl.ScreensAnalyticsServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("com.adobe.cq.screens.analytics.impl.url") String comAdobeCqScreensAnalyticsImplUrl,  @QueryParam("com.adobe.cq.screens.analytics.impl.apikey") String comAdobeCqScreensAnalyticsImplApikey,  @QueryParam("com.adobe.cq.screens.analytics.impl.project") String comAdobeCqScreensAnalyticsImplProject,  @QueryParam("com.adobe.cq.screens.analytics.impl.environment") String comAdobeCqScreensAnalyticsImplEnvironment,  @QueryParam("com.adobe.cq.screens.analytics.impl.sendFrequency") Integer comAdobeCqScreensAnalyticsImplSendFrequency,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl(post,apply,delete,action,$location,propertylist,comAdobeCqScreensAnalyticsImplUrl,comAdobeCqScreensAnalyticsImplApikey,comAdobeCqScreensAnalyticsImplProject,comAdobeCqScreensAnalyticsImplEnvironment,comAdobeCqScreensAnalyticsImplSendFrequency,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.screens.device.impl.DeviceService")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqScreensDeviceImplDeviceServiceInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqScreensDeviceImplDeviceServiceInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqScreensDeviceImplDeviceService(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("com.adobe.aem.screens.player.pingfrequency") Integer comAdobeAemScreensPlayerPingfrequency,  @QueryParam("com.adobe.aem.screens.device.pasword.specialchars") String comAdobeAemScreensDevicePaswordSpecialchars,  @QueryParam("com.adobe.aem.screens.device.pasword.minlowercasechars") Integer comAdobeAemScreensDevicePaswordMinlowercasechars,  @QueryParam("com.adobe.aem.screens.device.pasword.minuppercasechars") Integer comAdobeAemScreensDevicePaswordMinuppercasechars,  @QueryParam("com.adobe.aem.screens.device.pasword.minnumberchars") Integer comAdobeAemScreensDevicePaswordMinnumberchars,  @QueryParam("com.adobe.aem.screens.device.pasword.minspecialchars") Integer comAdobeAemScreensDevicePaswordMinspecialchars,  @QueryParam("com.adobe.aem.screens.device.pasword.minlength") Integer comAdobeAemScreensDevicePaswordMinlength,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqScreensDeviceImplDeviceService(post,apply,delete,action,$location,propertylist,comAdobeAemScreensPlayerPingfrequency,comAdobeAemScreensDevicePaswordSpecialchars,comAdobeAemScreensDevicePaswordMinlowercasechars,comAdobeAemScreensDevicePaswordMinuppercasechars,comAdobeAemScreensDevicePaswordMinnumberchars,comAdobeAemScreensDevicePaswordMinspecialchars,comAdobeAemScreensDevicePaswordMinlength,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.screens.device.registration.impl.RegistrationServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("deviceRegistrationTimeout") Integer deviceRegistrationTimeout,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl(post,apply,delete,action,$location,propertylist,deviceRegistrationTimeout,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.screens.impl.handler.ChannelsUpdateHandler")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqScreensImplHandlerChannelsUpdateHandler(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.pagesupdatehandler.imageresourcetypes") List<String> cqPagesupdatehandlerImageresourcetypes,  @QueryParam("cq.pagesupdatehandler.productresourcetypes") List<String> cqPagesupdatehandlerProductresourcetypes,  @QueryParam("cq.pagesupdatehandler.videoresourcetypes") List<String> cqPagesupdatehandlerVideoresourcetypes,  @QueryParam("cq.pagesupdatehandler.dynamicsequenceresourcetypes") List<String> cqPagesupdatehandlerDynamicsequenceresourcetypes,  @QueryParam("cq.pagesupdatehandler.previewmodepaths") List<String> cqPagesupdatehandlerPreviewmodepaths,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqScreensImplHandlerChannelsUpdateHandler(post,apply,delete,action,$location,propertylist,cqPagesupdatehandlerImageresourcetypes,cqPagesupdatehandlerProductresourcetypes,cqPagesupdatehandlerVideoresourcetypes,cqPagesupdatehandlerDynamicsequenceresourcetypes,cqPagesupdatehandlerPreviewmodepaths,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.screens.impl.jobs.DistributedDevicesStatiUpdateJob")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("scheduler.expression") String schedulerExpression,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob(post,apply,delete,action,$location,propertylist,schedulerExpression,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.screens.impl.remote.impl.DistributedHttpClientImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqScreensImplRemoteImplDistributedHttpClientImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("com.adobe.aem.screens.impl.remote.request_timeout") Integer comAdobeAemScreensImplRemoteRequestTimeout,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqScreensImplRemoteImplDistributedHttpClientImpl(post,apply,delete,action,$location,propertylist,comAdobeAemScreensImplRemoteRequestTimeout,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.screens.impl.ScreensChannelPostProcessor")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqScreensImplScreensChannelPostProcessorInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqScreensImplScreensChannelPostProcessorInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqScreensImplScreensChannelPostProcessor(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("screens.channels.properties.to.remove") List<String> screensChannelsPropertiesToRemove,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqScreensImplScreensChannelPostProcessor(post,apply,delete,action,$location,propertylist,screensChannelsPropertiesToRemove,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.projectPath") List<String> comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath,  @QueryParam("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.scheduleFrequency") String comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency,  @QueryParam("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.pingTimeout") Integer comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout,  @QueryParam("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.recipients") String comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients,  @QueryParam("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpserver") String comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver,  @QueryParam("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpport") Integer comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport,  @QueryParam("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.usetls") Boolean comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls,  @QueryParam("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.username") String comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername,  @QueryParam("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.password") String comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl(post,apply,delete,action,$location,propertylist,comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath,comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency,comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout,comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients,comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver,comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport,comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls,comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername,comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.screens.mq.activemq.impl.ArtemisJMSProvider")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqScreensMqActivemqImplArtemisJMSProvider(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("service.ranking") Integer serviceRanking,  @QueryParam("global.size") Integer globalSize,  @QueryParam("max.disk.usage") Integer maxDiskUsage,  @QueryParam("persistence.enabled") Boolean persistenceEnabled,  @QueryParam("thread.pool.max.size") Integer threadPoolMaxSize,  @QueryParam("scheduled.thread.pool.max.size") Integer scheduledThreadPoolMaxSize,  @QueryParam("graceful.shutdown.timeout") Integer gracefulShutdownTimeout,  @QueryParam("queues") List<String> queues,  @QueryParam("topics") List<String> topics,  @QueryParam("addresses.max.delivery.attempts") Integer addressesMaxDeliveryAttempts,  @QueryParam("addresses.expiry.delay") Integer addressesExpiryDelay,  @QueryParam("addresses.address.full.message.policy") String addressesAddressFullMessagePolicy,  @QueryParam("addresses.max.size.bytes") Integer addressesMaxSizeBytes,  @QueryParam("addresses.page.size.bytes") Integer addressesPageSizeBytes,  @QueryParam("addresses.page.cache.max.size") Integer addressesPageCacheMaxSize,  @QueryParam("cluster.user") String clusterUser,  @QueryParam("cluster.password") String clusterPassword,  @QueryParam("cluster.call.timeout") Integer clusterCallTimeout,  @QueryParam("cluster.call.failover.timeout") Integer clusterCallFailoverTimeout,  @QueryParam("cluster.client.failure.check.period") Integer clusterClientFailureCheckPeriod,  @QueryParam("cluster.notification.attempts") Integer clusterNotificationAttempts,  @QueryParam("cluster.notification.interval") Integer clusterNotificationInterval,  @QueryParam("id.cache.size") Integer idCacheSize,  @QueryParam("cluster.confirmation.window.size") Integer clusterConfirmationWindowSize,  @QueryParam("cluster.connection.ttl") Integer clusterConnectionTtl,  @QueryParam("cluster.duplicate.detection") Boolean clusterDuplicateDetection,  @QueryParam("cluster.initial.connect.attempts") Integer clusterInitialConnectAttempts,  @QueryParam("cluster.max.retry.interval") Integer clusterMaxRetryInterval,  @QueryParam("cluster.min.large.message.size") Integer clusterMinLargeMessageSize,  @QueryParam("cluster.producer.window.size") Integer clusterProducerWindowSize,  @QueryParam("cluster.reconnect.attempts") Integer clusterReconnectAttempts,  @QueryParam("cluster.retry.interval") Integer clusterRetryInterval,  @QueryParam("cluster.retry.interval.multiplier") BigDecimal clusterRetryIntervalMultiplier,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqScreensMqActivemqImplArtemisJMSProvider(post,apply,delete,action,$location,propertylist,serviceRanking,globalSize,maxDiskUsage,persistenceEnabled,threadPoolMaxSize,scheduledThreadPoolMaxSize,gracefulShutdownTimeout,queues,topics,addressesMaxDeliveryAttempts,addressesExpiryDelay,addressesAddressFullMessagePolicy,addressesMaxSizeBytes,addressesPageSizeBytes,addressesPageCacheMaxSize,clusterUser,clusterPassword,clusterCallTimeout,clusterCallFailoverTimeout,clusterClientFailureCheckPeriod,clusterNotificationAttempts,clusterNotificationInterval,idCacheSize,clusterConfirmationWindowSize,clusterConnectionTtl,clusterDuplicateDetection,clusterInitialConnectAttempts,clusterMaxRetryInterval,clusterMinLargeMessageSize,clusterProducerWindowSize,clusterReconnectAttempts,clusterRetryInterval,clusterRetryIntervalMultiplier,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.projectPath") List<String> comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath,  @QueryParam("com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.scheduleFrequency") String comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl(post,apply,delete,action,$location,propertylist,comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath,comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.OfflineContentServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("disableSmartSync") Boolean disableSmartSync,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl(post,apply,delete,action,$location,propertylist,disableSmartSync,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.screens.segmentation.impl.SegmentationFeatureFlag")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqScreensSegmentationImplSegmentationFeatureFlag(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("enableDataTriggeredContent") Boolean enableDataTriggeredContent,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqScreensSegmentationImplSegmentationFeatureFlag(post,apply,delete,action,$location,propertylist,enableDataTriggeredContent,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.security.hc.bundles.impl.HtmlLibraryManagerConfigHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("hc.tags") List<String> hcTags,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh(post,apply,delete,action,$location,propertylist,hcTags,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.security.hc.bundles.impl.WcmFilterHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("hc.tags") List<String> hcTags,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck(post,apply,delete,action,$location,propertylist,hcTags,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.security.hc.dispatcher.impl.DispatcherAccessHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("hc.tags") List<String> hcTags,  @QueryParam("dispatcher.address") String dispatcherAddress,  @QueryParam("dispatcher.filter.allowed") List<String> dispatcherFilterAllowed,  @QueryParam("dispatcher.filter.blocked") List<String> dispatcherFilterBlocked,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck(post,apply,delete,action,$location,propertylist,hcTags,dispatcherAddress,dispatcherFilterAllowed,dispatcherFilterBlocked,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.security.hc.packages.impl.ExampleContentHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSecurityHcPackagesImplExampleContentHealthCheck(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("hc.tags") List<String> hcTags,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSecurityHcPackagesImplExampleContentHealthCheck(post,apply,delete,action,$location,propertylist,hcTags,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.security.hc.webserver.impl.ClickjackingHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSecurityHcWebserverImplClickjackingHealthCheck(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("hc.tags") List<String> hcTags,  @QueryParam("webserver.address") String webserverAddress,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSecurityHcWebserverImplClickjackingHealthCheck(post,apply,delete,action,$location,propertylist,hcTags,webserverAddress,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.accountverification.impl.AccountManagementConfigImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialAccountverificationImplAccountManagementConfigIm(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("enable") Boolean enable,  @QueryParam("ttl1") Integer ttl1,  @QueryParam("ttl2") Integer ttl2,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialAccountverificationImplAccountManagementConfigIm(post,apply,delete,action,$location,propertylist,enable,ttl1,ttl2,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityComponentFactoryImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialActivitystreamsClientImplSocialActivityComponen(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("priority") Integer priority,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialActivitystreamsClientImplSocialActivityComponen(post,apply,delete,action,$location,propertylist,priority,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityStreamComponentFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("priority") Integer priority,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo(post,apply,delete,action,$location,propertylist,priority,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.EventListenerHandler")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialActivitystreamsListenerImplEventListenerHandler(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("event.topics") String eventTopics,  @QueryParam("event.filter") String eventFilter,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialActivitystreamsListenerImplEventListenerHandler(post,apply,delete,action,$location,propertylist,eventTopics,eventFilter,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ModerationEventExtension")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialActivitystreamsListenerImplModerationEventExten(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("accepted") Boolean accepted,  @QueryParam("ranked") Integer ranked,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialActivitystreamsListenerImplModerationEventExten(post,apply,delete,action,$location,propertylist,accepted,ranked,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.RatingEventActivitySuppressor")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("ranking") Integer ranking,  @QueryParam("enable") Boolean enable,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS(post,apply,delete,action,$location,propertylist,ranking,enable,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ResourceActivityStreamProviderFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialActivitystreamsListenerImplResourceActivityStre(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("streamPath") String streamPath,  @QueryParam("streamName") String streamName,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialActivitystreamsListenerImplResourceActivityStre(post,apply,delete,action,$location,propertylist,streamPath,streamName,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.calendar.client.endpoints.impl.CalendarOperationsImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("MaxRetry") Integer maxRetry,  @QueryParam("fieldWhitelist") List<String> fieldWhitelist,  @QueryParam("attachmentTypeBlacklist") List<String> attachmentTypeBlacklist,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI(post,apply,delete,action,$location,propertylist,maxRetry,fieldWhitelist,attachmentTypeBlacklist,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.calendar.client.operationextensions.EventAttachment")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialCalendarClientOperationextensionsEventAttachmen(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("attachmentTypeBlacklist") String attachmentTypeBlacklist,  @QueryParam("extension.order") Integer extensionOrder,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialCalendarClientOperationextensionsEventAttachmen(post,apply,delete,action,$location,propertylist,attachmentTypeBlacklist,extensionOrder,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.calendar.servlets.TimeZoneServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialCalendarServletsTimeZoneServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCalendarServletsTimeZoneServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialCalendarServletsTimeZoneServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("timezones.expirytime") Integer timezonesExpirytime,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialCalendarServletsTimeZoneServlet(post,apply,delete,action,$location,propertylist,timezonesExpirytime,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentDeleteEventActivitySuppressor")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("ranking") Integer ranking,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent(post,apply,delete,action,$location,propertylist,ranking,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentOperationService")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("fieldWhitelist") List<String> fieldWhitelist,  @QueryParam("attachmentTypeBlacklist") List<String> attachmentTypeBlacklist,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe(post,apply,delete,action,$location,propertylist,fieldWhitelist,attachmentTypeBlacklist,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.TranslationOperationService")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("fieldWhitelist") List<String> fieldWhitelist,  @QueryParam("attachmentTypeBlacklist") List<String> attachmentTypeBlacklist,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati(post,apply,delete,action,$location,propertylist,fieldWhitelist,attachmentTypeBlacklist,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.commons.comments.listing.impl.SearchCommentSocialComponentListProvider")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("numUserLimit") Integer numUserLimit,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC(post,apply,delete,action,$location,propertylist,numUserLimit,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.commons.comments.scheduler.impl.SearchScheduledPosts")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("enableScheduledPostsSearch") Boolean enableScheduledPostsSearch,  @QueryParam("numberOfMinutes") Integer numberOfMinutes,  @QueryParam("maxSearchLimit") Integer maxSearchLimit,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos(post,apply,delete,action,$location,propertylist,enableScheduledPostsSearch,numberOfMinutes,maxSearchLimit,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.commons.cors.CORSAuthenticationFilter")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialCommonsCorsCORSAuthenticationFilter(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cors.enabling") Boolean corsEnabling,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialCommonsCorsCORSAuthenticationFilter(post,apply,delete,action,$location,propertylist,corsEnabling,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.AndroidEmailClientProvider")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("priorityOrder") Integer priorityOrder,  @QueryParam("replyEmailPatterns") List<String> replyEmailPatterns,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider(post,apply,delete,action,$location,propertylist,priorityOrder,replyEmailPatterns,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailBuilderImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("context.path") String contextPath,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl(post,apply,delete,action,$location,propertylist,contextPath,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailEventListener")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("event.topics") String eventTopics,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener(post,apply,delete,action,$location,propertylist,eventTopics,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CustomEmailClientProvider")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("priorityOrder") Integer priorityOrder,  @QueryParam("replyEmailPatterns") List<String> replyEmailPatterns,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider(post,apply,delete,action,$location,propertylist,priorityOrder,replyEmailPatterns,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailQuotedTextPatternsImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("pattern.time") String patternTime,  @QueryParam("pattern.newline") String patternNewline,  @QueryParam("pattern.dayOfMonth") String patternDayOfMonth,  @QueryParam("pattern.month") String patternMonth,  @QueryParam("pattern.year") String patternYear,  @QueryParam("pattern.date") String patternDate,  @QueryParam("pattern.dateTime") String patternDateTime,  @QueryParam("pattern.email") String patternEmail,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp(post,apply,delete,action,$location,propertylist,patternTime,patternNewline,patternDayOfMonth,patternMonth,patternYear,patternDate,patternDateTime,patternEmail,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyConfigurationImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("email.name") String emailName,  @QueryParam("email.createPostFromReply") Boolean emailCreatePostFromReply,  @QueryParam("email.addCommentIdTo") String emailAddCommentIdTo,  @QueryParam("email.subjectMaximumLength") Integer emailSubjectMaximumLength,  @QueryParam("email.replyToAddress") String emailReplyToAddress,  @QueryParam("email.replyToDelimiter") String emailReplyToDelimiter,  @QueryParam("email.trackerIdPrefixInSubject") String emailTrackerIdPrefixInSubject,  @QueryParam("email.trackerIdPrefixInBody") String emailTrackerIdPrefixInBody,  @QueryParam("email.asHTML") Boolean emailAsHTML,  @QueryParam("email.defaultUserName") String emailDefaultUserName,  @QueryParam("email.templates.rootPath") String emailTemplatesRootPath,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp(post,apply,delete,action,$location,propertylist,emailName,emailCreatePostFromReply,emailAddCommentIdTo,emailSubjectMaximumLength,emailReplyToAddress,emailReplyToDelimiter,emailTrackerIdPrefixInSubject,emailTrackerIdPrefixInBody,emailAsHTML,emailDefaultUserName,emailTemplatesRootPath,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyImporter")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("connectProtocol") String connectProtocol,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter(post,apply,delete,action,$location,propertylist,connectProtocol,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.GmailEmailClientProvider")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("priorityOrder") Integer priorityOrder,  @QueryParam("replyEmailPatterns") List<String> replyEmailPatterns,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider(post,apply,delete,action,$location,propertylist,priorityOrder,replyEmailPatterns,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.IOSEmailClientProvider")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("priorityOrder") Integer priorityOrder,  @QueryParam("replyEmailPatterns") List<String> replyEmailPatterns,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider(post,apply,delete,action,$location,propertylist,priorityOrder,replyEmailPatterns,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.MacmailEmailClientProvider")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("priorityOrder") Integer priorityOrder,  @QueryParam("replyEmailPatterns") List<String> replyEmailPatterns,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider(post,apply,delete,action,$location,propertylist,priorityOrder,replyEmailPatterns,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.OutLookEmailClientProvider")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("priorityOrder") Integer priorityOrder,  @QueryParam("replyEmailPatterns") List<String> replyEmailPatterns,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider(post,apply,delete,action,$location,propertylist,priorityOrder,replyEmailPatterns,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.UnknownEmailClientProvider")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("replyEmailPatterns") List<String> replyEmailPatterns,  @QueryParam("priorityOrder") Integer priorityOrder,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider(post,apply,delete,action,$location,propertylist,replyEmailPatterns,priorityOrder,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.YahooEmailClientProvider")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("priorityOrder") Integer priorityOrder,  @QueryParam("replyEmailPatterns") List<String> replyEmailPatterns,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider(post,apply,delete,action,$location,propertylist,priorityOrder,replyEmailPatterns,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.commons.maintainance.impl.DeleteTempUGCImageUploads")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("numberOfDays") Integer numberOfDays,  @QueryParam("ageOfFile") Integer ageOfFile,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload(post,apply,delete,action,$location,propertylist,numberOfDays,ageOfFile,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.commons.ugclimiter.impl.UGCLimiterServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("event.topics") String eventTopics,  @QueryParam("event.filter") String eventFilter,  @QueryParam("verbs") List<String> verbs,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl(post,apply,delete,action,$location,propertylist,eventTopics,eventFilter,verbs,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.commons.ugclimitsconfig.impl.CommunityUserUGCLimitsConfigImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("enable") Boolean enable,  @QueryParam("UGCLimit") Integer ugCLimit,  @QueryParam("ugcLimitDuration") Integer ugcLimitDuration,  @QueryParam("domains") List<String> domains,  @QueryParam("toList") List<String> toList,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit(post,apply,delete,action,$location,propertylist,enable,ugCLimit,ugcLimitDuration,domains,toList,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.connect.oauth.impl.FacebookProviderImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialConnectOauthImplFacebookProviderImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("oauth.provider.id") String oauthProviderId,  @QueryParam("oauth.cloud.config.root") String oauthCloudConfigRoot,  @QueryParam("provider.config.root") String providerConfigRoot,  @QueryParam("provider.config.create.tags.enabled") Boolean providerConfigCreateTagsEnabled,  @QueryParam("provider.config.user.folder") String providerConfigUserFolder,  @QueryParam("provider.config.facebook.fetch.fields") Boolean providerConfigFacebookFetchFields,  @QueryParam("provider.config.facebook.fields") List<String> providerConfigFacebookFields,  @QueryParam("provider.config.refresh.userdata.enabled") Boolean providerConfigRefreshUserdataEnabled,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialConnectOauthImplFacebookProviderImpl(post,apply,delete,action,$location,propertylist,oauthProviderId,oauthCloudConfigRoot,providerConfigRoot,providerConfigCreateTagsEnabled,providerConfigUserFolder,providerConfigFacebookFetchFields,providerConfigFacebookFields,providerConfigRefreshUserdataEnabled,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthAuthenticationHandler")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("path") List<String> path,  @QueryParam("service.ranking") Integer serviceRanking,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle(post,apply,delete,action,$location,propertylist,path,serviceRanking,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthUserProfileMapper")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("facebook") List<String> facebook,  @QueryParam("twitter") List<String> twitter,  @QueryParam("provider.config.user.folder") String providerConfigUserFolder,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper(post,apply,delete,action,$location,propertylist,facebook,twitter,providerConfigUserFolder,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.connect.oauth.impl.TwitterProviderImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialConnectOauthImplTwitterProviderImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("oauth.provider.id") String oauthProviderId,  @QueryParam("oauth.cloud.config.root") String oauthCloudConfigRoot,  @QueryParam("provider.config.root") String providerConfigRoot,  @QueryParam("provider.config.user.folder") String providerConfigUserFolder,  @QueryParam("provider.config.twitter.enable.params") Boolean providerConfigTwitterEnableParams,  @QueryParam("provider.config.twitter.params") List<String> providerConfigTwitterParams,  @QueryParam("provider.config.refresh.userdata.enabled") Boolean providerConfigRefreshUserdataEnabled,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialConnectOauthImplTwitterProviderImpl(post,apply,delete,action,$location,propertylist,oauthProviderId,oauthCloudConfigRoot,providerConfigRoot,providerConfigUserFolder,providerConfigTwitterEnableParams,providerConfigTwitterParams,providerConfigRefreshUserdataEnabled,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.content.fragments.services.impl.CommunitiesFragmentCreationServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.social.content.fragments.services.enabled") Boolean cqSocialContentFragmentsServicesEnabled,  @QueryParam("cq.social.content.fragments.services.waitTimeSeconds") Integer cqSocialContentFragmentsServicesWaitTimeSeconds,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen(post,apply,delete,action,$location,propertylist,cqSocialContentFragmentsServicesEnabled,cqSocialContentFragmentsServicesWaitTimeSeconds,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.datastore.as.impl.ASResourceProviderFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialDatastoreAsImplASResourceProviderFactory(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("version.id") String versionId,  @QueryParam("cache.on") Boolean cacheOn,  @QueryParam("concurrency.level") Integer concurrencyLevel,  @QueryParam("cache.start.size") Integer cacheStartSize,  @QueryParam("cache.ttl") Integer cacheTtl,  @QueryParam("cache.size") Integer cacheSize,  @QueryParam("time.limit") Integer timeLimit,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialDatastoreAsImplASResourceProviderFactory(post,apply,delete,action,$location,propertylist,versionId,cacheOn,concurrencyLevel,cacheStartSize,cacheTtl,cacheSize,timeLimit,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.datastore.op.impl.SocialMSResourceProviderFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("solr.zk.timeout") String solrZkTimeout,  @QueryParam("solr.commit") String solrCommit,  @QueryParam("cache.on") Boolean cacheOn,  @QueryParam("concurrency.level") Integer concurrencyLevel,  @QueryParam("cache.start.size") Integer cacheStartSize,  @QueryParam("cache.ttl") Integer cacheTtl,  @QueryParam("cache.size") Integer cacheSize,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory(post,apply,delete,action,$location,propertylist,solrZkTimeout,solrCommit,cacheOn,concurrencyLevel,cacheStartSize,cacheTtl,cacheSize,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.datastore.rdb.impl.SocialRDBResourceProviderFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("solr.zk.timeout") String solrZkTimeout,  @QueryParam("solr.commit") String solrCommit,  @QueryParam("cache.on") Boolean cacheOn,  @QueryParam("concurrency.level") Integer concurrencyLevel,  @QueryParam("cache.start.size") Integer cacheStartSize,  @QueryParam("cache.ttl") Integer cacheTtl,  @QueryParam("cache.size") Integer cacheSize,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor(post,apply,delete,action,$location,propertylist,solrZkTimeout,solrCommit,cacheOn,concurrencyLevel,cacheStartSize,cacheTtl,cacheSize,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementLearningPathAdaptorFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("isMemberCheck") Boolean isMemberCheck,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF(post,apply,delete,action,$location,propertylist,isMemberCheck,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementResourceAdaptorFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("isMemberCheck") Boolean isMemberCheck,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto(post,apply,delete,action,$location,propertylist,isMemberCheck,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.enablement.learningpath.endpoints.impl.EnablementLearningPathModelOperationService")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("fieldWhitelist") List<String> fieldWhitelist,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL(post,apply,delete,action,$location,propertylist,fieldWhitelist,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.enablement.resource.endpoints.impl.EnablementResourceModelOperationService")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialEnablementResourceEndpointsImplEnablementResou(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("fieldWhitelist") List<String> fieldWhitelist,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialEnablementResourceEndpointsImplEnablementResou(post,apply,delete,action,$location,propertylist,fieldWhitelist,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.enablement.services.impl.AuthorMarkerImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialEnablementServicesImplAuthorMarkerImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("service.ranking") Integer serviceRanking,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialEnablementServicesImplAuthorMarkerImpl(post,apply,delete,action,$location,propertylist,serviceRanking,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.FilelibraryDownloadGetServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("sling.servlet.selectors") String slingServletSelectors,  @QueryParam("sling.servlet.extensions") String slingServletExtensions,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe(post,apply,delete,action,$location,propertylist,slingServletSelectors,slingServletExtensions,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.impl.FileLibraryOperationsService")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("fieldWhitelist") List<String> fieldWhitelist,  @QueryParam("attachmentTypeBlacklist") List<String> attachmentTypeBlacklist,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera(post,apply,delete,action,$location,propertylist,fieldWhitelist,attachmentTypeBlacklist,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.forum.client.endpoints.impl.ForumOperationsService")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialForumClientEndpointsImplForumOperationsService(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("fieldWhitelist") List<String> fieldWhitelist,  @QueryParam("attachmentTypeBlacklist") List<String> attachmentTypeBlacklist,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialForumClientEndpointsImplForumOperationsService(post,apply,delete,action,$location,propertylist,fieldWhitelist,attachmentTypeBlacklist,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.forum.dispatcher.impl.FlushOperations")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialForumDispatcherImplFlushOperations(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("extension.order") Integer extensionOrder,  @QueryParam("flush.forumontopic") Boolean flushForumontopic,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialForumDispatcherImplFlushOperations(post,apply,delete,action,$location,propertylist,extensionOrder,flushForumontopic,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.group.client.impl.CommunityGroupCollectionComponentFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("group.listing.pagination.enable") Boolean groupListingPaginationEnable,  @QueryParam("group.listing.lazyloading.enable") Boolean groupListingLazyloadingEnable,  @QueryParam("page.size") Integer pageSize,  @QueryParam("priority") Integer priority,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen(post,apply,delete,action,$location,propertylist,groupListingPaginationEnable,groupListingLazyloadingEnable,pageSize,priority,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.group.impl.GroupServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialGroupImplGroupServiceImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialGroupImplGroupServiceImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialGroupImplGroupServiceImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("maxWaitTime") Integer maxWaitTime,  @QueryParam("minWaitBetweenRetries") Integer minWaitBetweenRetries,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialGroupImplGroupServiceImpl(post,apply,delete,action,$location,propertylist,maxWaitTime,minWaitBetweenRetries,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.handlebars.GuavaTemplateCacheImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialHandlebarsGuavaTemplateCacheImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("parameter.guava.cache.enabled") Boolean parameterGuavaCacheEnabled,  @QueryParam("parameter.guava.cache.params") String parameterGuavaCacheParams,  @QueryParam("parameter.guava.cache.reload") Boolean parameterGuavaCacheReload,  @QueryParam("service.ranking") Integer serviceRanking,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialHandlebarsGuavaTemplateCacheImpl(post,apply,delete,action,$location,propertylist,parameterGuavaCacheEnabled,parameterGuavaCacheParams,parameterGuavaCacheReload,serviceRanking,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.ideation.client.endpoints.impl.IdeationOperationsService")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("fieldWhitelist") List<String> fieldWhitelist,  @QueryParam("attachmentTypeBlacklist") List<String> attachmentTypeBlacklist,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS(post,apply,delete,action,$location,propertylist,fieldWhitelist,attachmentTypeBlacklist,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.journal.client.endpoints.impl.JournalOperationsService")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("fieldWhitelist") List<String> fieldWhitelist,  @QueryParam("attachmentTypeBlacklist") List<String> attachmentTypeBlacklist,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer(post,apply,delete,action,$location,propertylist,fieldWhitelist,attachmentTypeBlacklist,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberGroupProfileOperationService")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("fieldWhitelist") List<String> fieldWhitelist,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile(post,apply,delete,action,$location,propertylist,fieldWhitelist,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberUserProfileOperationService")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("fieldWhitelist") List<String> fieldWhitelist,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO(post,apply,delete,action,$location,propertylist,fieldWhitelist,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.members.impl.CommunityMemberGroupProfileComponentFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("everyoneLimit") Integer everyoneLimit,  @QueryParam("priority") Integer priority,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF(post,apply,delete,action,$location,propertylist,everyoneLimit,priority,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.messaging.client.endpoints.impl.MessagingOperationsServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialMessagingClientEndpointsImplMessagingOperation(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("message.properties") List<String> messageProperties,  @QueryParam("messageBoxSizeLimit") Integer messageBoxSizeLimit,  @QueryParam("messageCountLimit") Integer messageCountLimit,  @QueryParam("notifyFailure") Boolean notifyFailure,  @QueryParam("failureMessageFrom") String failureMessageFrom,  @QueryParam("failureTemplatePath") String failureTemplatePath,  @QueryParam("maxRetries") Integer maxRetries,  @QueryParam("minWaitBetweenRetries") Integer minWaitBetweenRetries,  @QueryParam("countUpdatePoolSize") Integer countUpdatePoolSize,  @QueryParam("inbox.path") String inboxPath,  @QueryParam("sentitems.path") String sentitemsPath,  @QueryParam("supportAttachments") Boolean supportAttachments,  @QueryParam("supportGroupMessaging") Boolean supportGroupMessaging,  @QueryParam("maxTotalRecipients") Integer maxTotalRecipients,  @QueryParam("batchSize") Integer batchSize,  @QueryParam("maxTotalAttachmentSize") Integer maxTotalAttachmentSize,  @QueryParam("attachmentTypeBlacklist") List<String> attachmentTypeBlacklist,  @QueryParam("allowedAttachmentTypes") List<String> allowedAttachmentTypes,  @QueryParam("serviceSelector") String serviceSelector,  @QueryParam("fieldWhitelist") List<String> fieldWhitelist,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialMessagingClientEndpointsImplMessagingOperation(post,apply,delete,action,$location,propertylist,messageProperties,messageBoxSizeLimit,messageCountLimit,notifyFailure,failureMessageFrom,failureTemplatePath,maxRetries,minWaitBetweenRetries,countUpdatePoolSize,inboxPath,sentitemsPath,supportAttachments,supportGroupMessaging,maxTotalRecipients,batchSize,maxTotalAttachmentSize,attachmentTypeBlacklist,allowedAttachmentTypes,serviceSelector,fieldWhitelist,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.FilterGroupSocialComponentFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("resourceType.filters") List<String> resourceTypeFilters,  @QueryParam("priority") Integer priority,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen(post,apply,delete,action,$location,propertylist,resourceTypeFilters,priority,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.ModerationDashboardSocialComponentFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialModerationDashboardApiModerationDashboardSocial(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("priority") Integer priority,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialModerationDashboardApiModerationDashboardSocial(post,apply,delete,action,$location,propertylist,priority,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.UserDetailsSocialComponentFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("priority") Integer priority,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen(post,apply,delete,action,$location,propertylist,priority,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.moderation.dashboard.internal.impl.FilterGroupSocialComponentFactoryV2")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("resourceType.filters") List<String> resourceTypeFilters,  @QueryParam("priority") Integer priority,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci(post,apply,delete,action,$location,propertylist,resourceTypeFilters,priority,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.notifications.impl.MentionsRouter")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialNotificationsImplMentionsRouterInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialNotificationsImplMentionsRouterInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialNotificationsImplMentionsRouter(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("event.topics") String eventTopics,  @QueryParam("event.filter") String eventFilter,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialNotificationsImplMentionsRouter(post,apply,delete,action,$location,propertylist,eventTopics,eventFilter,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationManagerImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialNotificationsImplNotificationManagerImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("max.unread.notification.count") Integer maxUnreadNotificationCount,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialNotificationsImplNotificationManagerImpl(post,apply,delete,action,$location,propertylist,maxUnreadNotificationCount,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationsRouter")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialNotificationsImplNotificationsRouterInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialNotificationsImplNotificationsRouterInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialNotificationsImplNotificationsRouter(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("event.topics") String eventTopics,  @QueryParam("event.filter") String eventFilter,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialNotificationsImplNotificationsRouter(post,apply,delete,action,$location,propertylist,eventTopics,eventFilter,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.qna.client.endpoints.impl.QnaForumOperationsService")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("fieldWhitelist") List<String> fieldWhitelist,  @QueryParam("attachmentTypeBlacklist") List<String> attachmentTypeBlacklist,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic(post,apply,delete,action,$location,propertylist,fieldWhitelist,attachmentTypeBlacklist,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportImporterServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.social.reporting.analytics.polling.importer.interval") Integer cqSocialReportingAnalyticsPollingImporterInterval,  @QueryParam("cq.social.reporting.analytics.polling.importer.pageSize") Integer cqSocialReportingAnalyticsPollingImporterPageSize,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI(post,apply,delete,action,$location,propertylist,cqSocialReportingAnalyticsPollingImporterInterval,cqSocialReportingAnalyticsPollingImporterPageSize,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportManagementServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("report.fetch.delay") Integer reportFetchDelay,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM(post,apply,delete,action,$location,propertylist,reportFetchDelay,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.SiteTrendReportSocialComponentFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.social.console.analytics.sites.mapping") List<String> cqSocialConsoleAnalyticsSitesMapping,  @QueryParam("priority") Integer priority,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS(post,apply,delete,action,$location,propertylist,cqSocialConsoleAnalyticsSitesMapping,priority,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.review.client.endpoints.impl.ReviewOperationsService")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("fieldWhitelist") List<String> fieldWhitelist,  @QueryParam("attachmentTypeBlacklist") List<String> attachmentTypeBlacklist,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi(post,apply,delete,action,$location,propertylist,fieldWhitelist,attachmentTypeBlacklist,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.scf.core.operations.impl.SocialOperationsServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("sling.servlet.selectors") String slingServletSelectors,  @QueryParam("sling.servlet.extensions") String slingServletExtensions,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet(post,apply,delete,action,$location,propertylist,slingServletSelectors,slingServletExtensions,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.scf.endpoints.impl.DefaultSocialGetServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("sling.servlet.selectors") List<String> slingServletSelectors,  @QueryParam("sling.servlet.extensions") String slingServletExtensions,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet(post,apply,delete,action,$location,propertylist,slingServletSelectors,slingServletExtensions,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.scoring.impl.ScoringEventListener")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialScoringImplScoringEventListenerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialScoringImplScoringEventListenerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialScoringImplScoringEventListener(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("event.topics") String eventTopics,  @QueryParam("event.filter") String eventFilter,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialScoringImplScoringEventListener(post,apply,delete,action,$location,propertylist,eventTopics,eventFilter,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.serviceusers.internal.impl.ServiceUserWrapperImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("enableFallback") Boolean enableFallback,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl(post,apply,delete,action,$location,propertylist,enableFallback,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.site.endpoints.impl.SiteOperationService")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialSiteEndpointsImplSiteOperationService(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("fieldWhitelist") List<String> fieldWhitelist,  @QueryParam("sitePathFilters") List<String> sitePathFilters,  @QueryParam("sitePackageGroup") String sitePackageGroup,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialSiteEndpointsImplSiteOperationService(post,apply,delete,action,$location,propertylist,fieldWhitelist,sitePathFilters,sitePackageGroup,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.site.impl.AnalyticsComponentConfigurationServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.social.console.analytics.components") List<String> cqSocialConsoleAnalyticsComponents,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm(post,apply,delete,action,$location,propertylist,cqSocialConsoleAnalyticsComponents,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.site.impl.SiteConfiguratorImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialSiteImplSiteConfiguratorImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("componentsUsingTags") List<String> componentsUsingTags,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialSiteImplSiteConfiguratorImpl(post,apply,delete,action,$location,propertylist,componentsUsingTags,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.srp.impl.SocialSolrConnector")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialSrpImplSocialSolrConnectorInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialSrpImplSocialSolrConnectorInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialSrpImplSocialSolrConnector(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("srp.type") String srpType,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialSrpImplSocialSolrConnector(post,apply,delete,action,$location,propertylist,srpType,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.sync.impl.DiffChangesObserver")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialSyncImplDiffChangesObserverInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialSyncImplDiffChangesObserverInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialSyncImplDiffChangesObserver(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("enabled") Boolean enabled,  @QueryParam("agentName") String agentName,  @QueryParam("diffPath") String diffPath,  @QueryParam("propertyNames") String propertyNames,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialSyncImplDiffChangesObserver(post,apply,delete,action,$location,propertylist,enabled,agentName,diffPath,propertyNames,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.sync.impl.GroupSyncListenerImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialSyncImplGroupSyncListenerImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("nodetypes") List<String> nodetypes,  @QueryParam("ignorableprops") List<String> ignorableprops,  @QueryParam("ignorablenodes") String ignorablenodes,  @QueryParam("enabled") Boolean enabled,  @QueryParam("distfolders") String distfolders,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialSyncImplGroupSyncListenerImpl(post,apply,delete,action,$location,propertylist,nodetypes,ignorableprops,ignorablenodes,enabled,distfolders,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.sync.impl.PublisherSyncServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialSyncImplPublisherSyncServiceImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("activeRunModes") List<String> activeRunModes,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialSyncImplPublisherSyncServiceImpl(post,apply,delete,action,$location,propertylist,activeRunModes,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.sync.impl.UserSyncListenerImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialSyncImplUserSyncListenerImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialSyncImplUserSyncListenerImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialSyncImplUserSyncListenerImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("nodetypes") List<String> nodetypes,  @QueryParam("ignorableprops") List<String> ignorableprops,  @QueryParam("ignorablenodes") List<String> ignorablenodes,  @QueryParam("enabled") Boolean enabled,  @QueryParam("distfolders") List<String> distfolders,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialSyncImplUserSyncListenerImpl(post,apply,delete,action,$location,propertylist,nodetypes,ignorableprops,ignorablenodes,enabled,distfolders,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.translation.impl.TranslationServiceConfigManager")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialTranslationImplTranslationServiceConfigManager(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("translate.language") String translateLanguage,  @QueryParam("translate.display") String translateDisplay,  @QueryParam("translate.attribution") Boolean translateAttribution,  @QueryParam("translate.caching") String translateCaching,  @QueryParam("translate.smart.rendering") String translateSmartRendering,  @QueryParam("translate.caching.duration") String translateCachingDuration,  @QueryParam("translate.session.save.interval") String translateSessionSaveInterval,  @QueryParam("translate.session.save.batchLimit") String translateSessionSaveBatchLimit,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialTranslationImplTranslationServiceConfigManager(post,apply,delete,action,$location,propertylist,translateLanguage,translateDisplay,translateAttribution,translateCaching,translateSmartRendering,translateCachingDuration,translateSessionSaveInterval,translateSessionSaveBatchLimit,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.translation.impl.UGCLanguageDetector")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialTranslationImplUGCLanguageDetector(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("event.topics") String eventTopics,  @QueryParam("event.filter") String eventFilter,  @QueryParam("translate.listener.type") List<String> translateListenerType,  @QueryParam("translate.property.list") List<String> translatePropertyList,  @QueryParam("poolSize") Integer poolSize,  @QueryParam("maxPoolSize") Integer maxPoolSize,  @QueryParam("queueSize") Integer queueSize,  @QueryParam("keepAliveTime") Integer keepAliveTime,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialTranslationImplUGCLanguageDetector(post,apply,delete,action,$location,propertylist,eventTopics,eventFilter,translateListenerType,translatePropertyList,poolSize,maxPoolSize,queueSize,keepAliveTime,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.ugcbase.dispatcher.impl.FlushServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("threadPoolSize") Integer threadPoolSize,  @QueryParam("delayTime") Integer delayTime,  @QueryParam("workerSleepTime") Integer workerSleepTime,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl(post,apply,delete,action,$location,propertylist,threadPoolSize,delayTime,workerSleepTime,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.ugcbase.impl.AysncReverseReplicatorImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("poolSize") Integer poolSize,  @QueryParam("maxPoolSize") Integer maxPoolSize,  @QueryParam("queueSize") Integer queueSize,  @QueryParam("keepAliveTime") Integer keepAliveTime,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl(post,apply,delete,action,$location,propertylist,poolSize,maxPoolSize,queueSize,keepAliveTime,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.ugcbase.impl.PublisherConfigurationImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialUgcbaseImplPublisherConfigurationImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("isPrimaryPublisher") Boolean isPrimaryPublisher,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialUgcbaseImplPublisherConfigurationImpl(post,apply,delete,action,$location,propertylist,isPrimaryPublisher,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.ugcbase.impl.SocialUtilsImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialUgcbaseImplSocialUtilsImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("legacyCloudUGCPathMapping") Boolean legacyCloudUGCPathMapping,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialUgcbaseImplSocialUtilsImpl(post,apply,delete,action,$location,propertylist,legacyCloudUGCPathMapping,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.AutoModerationImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialUgcbaseModerationImplAutoModerationImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("automoderation.sequence") List<String> automoderationSequence,  @QueryParam("automoderation.onfailurestop") Boolean automoderationOnfailurestop,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialUgcbaseModerationImplAutoModerationImpl(post,apply,delete,action,$location,propertylist,automoderationSequence,automoderationOnfailurestop,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.SentimentProcess")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialUgcbaseModerationImplSentimentProcess(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("watchwords.positive") List<String> watchwordsPositive,  @QueryParam("watchwords.negative") List<String> watchwordsNegative,  @QueryParam("watchwords.path") String watchwordsPath,  @QueryParam("sentiment.path") String sentimentPath,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialUgcbaseModerationImplSentimentProcess(post,apply,delete,action,$location,propertylist,watchwordsPositive,watchwordsNegative,watchwordsPath,sentimentPath,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.DefaultAttachmentTypeBlacklistService")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("default.attachment.type.blacklist") List<String> defaultAttachmentTypeBlacklist,  @QueryParam("baseline.attachment.type.blacklist") List<String> baselineAttachmentTypeBlacklist,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli(post,apply,delete,action,$location,propertylist,defaultAttachmentTypeBlacklist,baselineAttachmentTypeBlacklist,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.SaferSlingPostValidatorImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("parameter.whitelist") List<String> parameterWhitelist,  @QueryParam("parameter.whitelist.prefixes") List<String> parameterWhitelistPrefixes,  @QueryParam("binary.parameter.whitelist") List<String> binaryParameterWhitelist,  @QueryParam("modifier.whitelist") List<String> modifierWhitelist,  @QueryParam("operation.whitelist") List<String> operationWhitelist,  @QueryParam("operation.whitelist.prefixes") List<String> operationWhitelistPrefixes,  @QueryParam("typehint.whitelist") List<String> typehintWhitelist,  @QueryParam("resourcetype.whitelist") List<String> resourcetypeWhitelist,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl(post,apply,delete,action,$location,propertylist,parameterWhitelist,parameterWhitelistPrefixes,binaryParameterWhitelist,modifierWhitelist,operationWhitelist,operationWhitelistPrefixes,typehintWhitelist,resourcetypeWhitelist,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.user.endpoints.impl.UsersGroupFromPublishServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("sling.servlet.extensions") String slingServletExtensions,  @QueryParam("sling.servlet.paths") String slingServletPaths,  @QueryParam("sling.servlet.methods") String slingServletMethods,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet(post,apply,delete,action,$location,propertylist,slingServletExtensions,slingServletPaths,slingServletMethods,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.social.user.impl.transport.HttpToPublisher")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqSocialUserImplTransportHttpToPublisherInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialUserImplTransportHttpToPublisherInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqSocialUserImplTransportHttpToPublisher(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("enable") Boolean enable,  @QueryParam("agent.configuration") List<String> agentConfiguration,  @QueryParam("context.path") String contextPath,  @QueryParam("disabled.cipher.suites") List<String> disabledCipherSuites,  @QueryParam("enabled.cipher.suites") List<String> enabledCipherSuites,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqSocialUserImplTransportHttpToPublisher(post,apply,delete,action,$location,propertylist,enable,agentConfiguration,contextPath,disabledCipherSuites,enabledCipherSuites,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.ui.wcm.commons.internal.servlets.rte.RTEFilterServletFactory.amended")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("resource.types") List<String> resourceTypes,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact(post,apply,delete,action,$location,propertylist,resourceTypes,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeContentCleanup")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqUpgradesCleanupImplUpgradeContentCleanup(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("delete.path.regexps") List<String> deletePathRegexps,  @QueryParam("delete.sql2.query") String deleteSql2Query,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqUpgradesCleanupImplUpgradeContentCleanup(post,apply,delete,action,$location,propertylist,deletePathRegexps,deleteSql2Query,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeInstallFolderCleanup")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("delete.name.regexps") List<String> deleteNameRegexps,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup(post,apply,delete,action,$location,propertylist,deleteNameRegexps,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncDeleteConfigProviderService")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("threshold") Integer threshold,  @QueryParam("jobTopicName") String jobTopicName,  @QueryParam("emailEnabled") Boolean emailEnabled,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService(post,apply,delete,action,$location,propertylist,threshold,jobTopicName,emailEnabled,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncJobCleanUpTask")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("scheduler.expression") String schedulerExpression,  @QueryParam("job.purge.threshold") Integer jobPurgeThreshold,  @QueryParam("job.purge.max.jobs") Integer jobPurgeMaxJobs,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask(post,apply,delete,action,$location,propertylist,schedulerExpression,jobPurgeThreshold,jobPurgeMaxJobs,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncMoveConfigProviderService")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("threshold") Integer threshold,  @QueryParam("jobTopicName") String jobTopicName,  @QueryParam("emailEnabled") Boolean emailEnabled,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService(post,apply,delete,action,$location,propertylist,threshold,jobTopicName,emailEnabled,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncPageMoveConfigProviderService")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("threshold") Integer threshold,  @QueryParam("jobTopicName") String jobTopicName,  @QueryParam("emailEnabled") Boolean emailEnabled,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService(post,apply,delete,action,$location,propertylist,threshold,jobTopicName,emailEnabled,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.wcm.launches.impl.LaunchesEventHandler")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqWcmLaunchesImplLaunchesEventHandler(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("event.filter") String eventFilter,  @QueryParam("launches.eventhandler.threadpool.maxsize") Integer launchesEventhandlerThreadpoolMaxsize,  @QueryParam("launches.eventhandler.threadpool.priority") String launchesEventhandlerThreadpoolPriority,  @QueryParam("launches.eventhandler.updatelastmodification") Boolean launchesEventhandlerUpdatelastmodification,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqWcmLaunchesImplLaunchesEventHandler(post,apply,delete,action,$location,propertylist,eventFilter,launchesEventhandlerThreadpoolMaxsize,launchesEventhandlerThreadpoolPriority,launchesEventhandlerUpdatelastmodification,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.wcm.mobile.qrcode.servlet.QRCodeImageGenerator")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.wcm.qrcode.servlet.whitelist") List<String> cqWcmQrcodeServletWhitelist,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator(post,apply,delete,action,$location,propertylist,cqWcmQrcodeServletWhitelist,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.wcm.style.internal.ComponentStyleInfoCacheImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("size") Integer size,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl(post,apply,delete,action,$location,propertylist,size,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.cq.wcm.translation.impl.TranslationPlatformConfigurationImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("syncTranslationState.schedulingFormat") String syncTranslationStateSchedulingFormat,  @QueryParam("schedulingRepeatTranslation.schedulingFormat") String schedulingRepeatTranslationSchedulingFormat,  @QueryParam("syncTranslationState.lockTimeoutInMinutes") String syncTranslationStateLockTimeoutInMinutes,  @QueryParam("export.format") String exportFormat,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl(post,apply,delete,action,$location,propertylist,syncTranslationStateSchedulingFormat,schedulingRepeatTranslationSchedulingFormat,syncTranslationStateLockTimeoutInMinutes,exportFormat,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.fd.fp.config.FormsPortalDraftsandSubmissionConfigService")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("portal.outboxes") List<String> portalOutboxes,  @QueryParam("draft.data.service") String draftDataService,  @QueryParam("draft.metadata.service") String draftMetadataService,  @QueryParam("submit.data.service") String submitDataService,  @QueryParam("submit.metadata.service") String submitMetadataService,  @QueryParam("pendingSign.data.service") String pendingSignDataService,  @QueryParam("pendingSign.metadata.service") String pendingSignMetadataService,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService(post,apply,delete,action,$location,propertylist,portalOutboxes,draftDataService,draftMetadataService,submitDataService,submitMetadataService,pendingSignDataService,pendingSignMetadataService,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.fd.fp.config.FormsPortalSchedulerService")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeFdFpConfigFormsPortalSchedulerService(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("formportal.interval") String formportalInterval,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeFdFpConfigFormsPortalSchedulerService(post,apply,delete,action,$location,propertylist,formportalInterval,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.forms.common.service.impl.DefaultDataProvider")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeFormsCommonServiceImplDefaultDataProviderInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeFormsCommonServiceImplDefaultDataProviderInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeFormsCommonServiceImplDefaultDataProvider(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("alloweddataFileLocations") List<String> alloweddataFileLocations,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeFormsCommonServiceImplDefaultDataProvider(post,apply,delete,action,$location,propertylist,alloweddataFileLocations,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.forms.common.service.impl.FormsCommonConfigurationServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("tempStorageConfig") String tempStorageConfig,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp(post,apply,delete,action,$location,propertylist,tempStorageConfig,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.forms.common.servlet.TempCleanUpTask")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeFormsCommonServletTempCleanUpTaskInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeFormsCommonServletTempCleanUpTaskInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeFormsCommonServletTempCleanUpTask(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("scheduler.expression") String schedulerExpression,  @QueryParam("Duration for Temporary Storage") String durationForTemporaryStorage,  @QueryParam("Duration for Anonymous Storage") String durationForAnonymousStorage,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeFormsCommonServletTempCleanUpTask(post,apply,delete,action,$location,propertylist,schedulerExpression,durationForTemporaryStorage,durationForAnonymousStorage,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.acp.platform.PlatformServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteAcpPlatformPlatformServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAcpPlatformPlatformServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteAcpPlatformPlatformServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("query.limit") Integer queryLimit,  @QueryParam("file.type.extension.map") List<String> fileTypeExtensionMap,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteAcpPlatformPlatformServlet(post,apply,delete,action,$location,propertylist,queryLimit,fileTypeExtensionMap,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.activitystreams.impl.ActivityManagerImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteActivitystreamsImplActivityManagerImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("aggregate.relationships") List<String> aggregateRelationships,  @QueryParam("aggregate.descend.virtual") Boolean aggregateDescendVirtual,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteActivitystreamsImplActivityManagerImpl(post,apply,delete,action,$location,propertylist,aggregateRelationships,aggregateDescendVirtual,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.analyzer.base.SystemStatusServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteAnalyzerBaseSystemStatusServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("disabled") Boolean disabled,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteAnalyzerBaseSystemStatusServlet(post,apply,delete,action,$location,propertylist,disabled,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.analyzer.scripts.compile.AllScriptsCompilerServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("disabled") Boolean disabled,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet(post,apply,delete,action,$location,propertylist,disabled,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.apicontroller.FilterResolverHookFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteApicontrollerFilterResolverHookFactory(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("com.adobe.cq.cdn.cdn-rewriter") String comAdobeCqCdnCdnRewriter,  @QueryParam("com.adobe.cq.cloud-config.components") String comAdobeCqCloudConfigComponents,  @QueryParam("com.adobe.cq.cloud-config.core") String comAdobeCqCloudConfigCore,  @QueryParam("com.adobe.cq.cloud-config.ui") String comAdobeCqCloudConfigUi,  @QueryParam("com.adobe.cq.com.adobe.cq.editor") String comAdobeCqComAdobeCqEditor,  @QueryParam("com.adobe.cq.com.adobe.cq.projects.core") String comAdobeCqComAdobeCqProjectsCore,  @QueryParam("com.adobe.cq.com.adobe.cq.projects.wcm.core") String comAdobeCqComAdobeCqProjectsWcmCore,  @QueryParam("com.adobe.cq.com.adobe.cq.ui.commons") String comAdobeCqComAdobeCqUiCommons,  @QueryParam("com.adobe.cq.com.adobe.cq.wcm.style") String comAdobeCqComAdobeCqWcmStyle,  @QueryParam("com.adobe.cq.cq-activitymap-integration") String comAdobeCqCqActivitymapIntegration,  @QueryParam("com.adobe.cq.cq-contexthub-commons") String comAdobeCqCqContexthubCommons,  @QueryParam("com.adobe.cq.cq-dtm") String comAdobeCqCqDtm,  @QueryParam("com.adobe.cq.cq-healthcheck") String comAdobeCqCqHealthcheck,  @QueryParam("com.adobe.cq.cq-multisite-targeting") String comAdobeCqCqMultisiteTargeting,  @QueryParam("com.adobe.cq.cq-pre-upgrade-cleanup") String comAdobeCqCqPreUpgradeCleanup,  @QueryParam("com.adobe.cq.cq-product-info-provider") String comAdobeCqCqProductInfoProvider,  @QueryParam("com.adobe.cq.cq-rest-sites") String comAdobeCqCqRestSites,  @QueryParam("com.adobe.cq.cq-security-hc") String comAdobeCqCqSecurityHc,  @QueryParam("com.adobe.cq.dam.cq-dam-svg-handler") String comAdobeCqDamCqDamSvgHandler,  @QueryParam("com.adobe.cq.dam.cq-scene7-imaging") String comAdobeCqDamCqScene7Imaging,  @QueryParam("com.adobe.cq.dtm-reactor.core") String comAdobeCqDtmReactorCore,  @QueryParam("com.adobe.cq.dtm-reactor.ui") String comAdobeCqDtmReactorUi,  @QueryParam("com.adobe.cq.exp-jspel-resolver") String comAdobeCqExpJspelResolver,  @QueryParam("com.adobe.cq.inbox.cq-inbox") String comAdobeCqInboxCqInbox,  @QueryParam("com.adobe.cq.json-schema-parser") String comAdobeCqJsonSchemaParser,  @QueryParam("com.adobe.cq.media.cq-media-publishing-dps-fp-core") String comAdobeCqMediaCqMediaPublishingDpsFpCore,  @QueryParam("com.adobe.cq.mobile.cq-mobile-caas") String comAdobeCqMobileCqMobileCaas,  @QueryParam("com.adobe.cq.mobile.cq-mobile-index-builder") String comAdobeCqMobileCqMobileIndexBuilder,  @QueryParam("com.adobe.cq.mobile.cq-mobile-phonegap-build") String comAdobeCqMobileCqMobilePhonegapBuild,  @QueryParam("com.adobe.cq.myspell") String comAdobeCqMyspell,  @QueryParam("com.adobe.cq.sample.we.retail.core") String comAdobeCqSampleWeRetailCore,  @QueryParam("com.adobe.cq.screens.com.adobe.cq.screens.dcc") String comAdobeCqScreensComAdobeCqScreensDcc,  @QueryParam("com.adobe.cq.screens.com.adobe.cq.screens.mq.core") String comAdobeCqScreensComAdobeCqScreensMqCore,  @QueryParam("com.adobe.cq.social.cq-social-as-provider") String comAdobeCqSocialCqSocialAsProvider,  @QueryParam("com.adobe.cq.social.cq-social-badging-basic-impl") String comAdobeCqSocialCqSocialBadgingBasicImpl,  @QueryParam("com.adobe.cq.social.cq-social-badging-impl") String comAdobeCqSocialCqSocialBadgingImpl,  @QueryParam("com.adobe.cq.social.cq-social-calendar-impl") String comAdobeCqSocialCqSocialCalendarImpl,  @QueryParam("com.adobe.cq.social.cq-social-content-fragments-impl") String comAdobeCqSocialCqSocialContentFragmentsImpl,  @QueryParam("com.adobe.cq.social.cq-social-enablement-impl") String comAdobeCqSocialCqSocialEnablementImpl,  @QueryParam("com.adobe.cq.social.cq-social-graph-impl") String comAdobeCqSocialCqSocialGraphImpl,  @QueryParam("com.adobe.cq.social.cq-social-ideation-impl") String comAdobeCqSocialCqSocialIdeationImpl,  @QueryParam("com.adobe.cq.social.cq-social-jcr-provider") String comAdobeCqSocialCqSocialJcrProvider,  @QueryParam("com.adobe.cq.social.cq-social-members-impl") String comAdobeCqSocialCqSocialMembersImpl,  @QueryParam("com.adobe.cq.social.cq-social-ms-provider") String comAdobeCqSocialCqSocialMsProvider,  @QueryParam("com.adobe.cq.social.cq-social-notifications-channels-web") String comAdobeCqSocialCqSocialNotificationsChannelsWeb,  @QueryParam("com.adobe.cq.social.cq-social-notifications-impl") String comAdobeCqSocialCqSocialNotificationsImpl,  @QueryParam("com.adobe.cq.social.cq-social-rdb-provider") String comAdobeCqSocialCqSocialRdbProvider,  @QueryParam("com.adobe.cq.social.cq-social-scf-impl") String comAdobeCqSocialCqSocialScfImpl,  @QueryParam("com.adobe.cq.social.cq-social-scoring-basic-impl") String comAdobeCqSocialCqSocialScoringBasicImpl,  @QueryParam("com.adobe.cq.social.cq-social-scoring-impl") String comAdobeCqSocialCqSocialScoringImpl,  @QueryParam("com.adobe.cq.social.cq-social-serviceusers-impl") String comAdobeCqSocialCqSocialServiceusersImpl,  @QueryParam("com.adobe.cq.social.cq-social-srp-impl") String comAdobeCqSocialCqSocialSrpImpl,  @QueryParam("com.adobe.cq.social.cq-social-ugcbase-impl") String comAdobeCqSocialCqSocialUgcbaseImpl,  @QueryParam("com.adobe.dam.cq-dam-cfm-impl") String comAdobeDamCqDamCfmImpl,  @QueryParam("com.adobe.forms.foundation-forms-foundation-base") String comAdobeFormsFoundationFormsFoundationBase,  @QueryParam("com.adobe.granite.apicontroller") String comAdobeGraniteApicontroller,  @QueryParam("com.adobe.granite.asset.core") String comAdobeGraniteAssetCore,  @QueryParam("com.adobe.granite.auth.sso") String comAdobeGraniteAuthSso,  @QueryParam("com.adobe.granite.bundles.hc.impl") String comAdobeGraniteBundlesHcImpl,  @QueryParam("com.adobe.granite.compat-router") String comAdobeGraniteCompatRouter,  @QueryParam("com.adobe.granite.conf") String comAdobeGraniteConf,  @QueryParam("com.adobe.granite.conf.ui.core") String comAdobeGraniteConfUiCore,  @QueryParam("com.adobe.granite.cors") String comAdobeGraniteCors,  @QueryParam("com.adobe.granite.crx-explorer") String comAdobeGraniteCrxExplorer,  @QueryParam("com.adobe.granite.crxde-lite") String comAdobeGraniteCrxdeLite,  @QueryParam("com.adobe.granite.crypto.config") String comAdobeGraniteCryptoConfig,  @QueryParam("com.adobe.granite.crypto.extension") String comAdobeGraniteCryptoExtension,  @QueryParam("com.adobe.granite.crypto.file") String comAdobeGraniteCryptoFile,  @QueryParam("com.adobe.granite.crypto.jcr") String comAdobeGraniteCryptoJcr,  @QueryParam("com.adobe.granite.csrf") String comAdobeGraniteCsrf,  @QueryParam("com.adobe.granite.distribution.core") String comAdobeGraniteDistributionCore,  @QueryParam("com.adobe.granite.dropwizard.metrics") String comAdobeGraniteDropwizardMetrics,  @QueryParam("com.adobe.granite.frags.impl") String comAdobeGraniteFragsImpl,  @QueryParam("com.adobe.granite.gibson") String comAdobeGraniteGibson,  @QueryParam("com.adobe.granite.infocollector") String comAdobeGraniteInfocollector,  @QueryParam("com.adobe.granite.installer.factory.packages") String comAdobeGraniteInstallerFactoryPackages,  @QueryParam("com.adobe.granite.jetty.ssl") String comAdobeGraniteJettySsl,  @QueryParam("com.adobe.granite.jobs.async") String comAdobeGraniteJobsAsync,  @QueryParam("com.adobe.granite.maintenance.oak") String comAdobeGraniteMaintenanceOak,  @QueryParam("com.adobe.granite.monitoring.core") String comAdobeGraniteMonitoringCore,  @QueryParam("com.adobe.granite.queries") String comAdobeGraniteQueries,  @QueryParam("com.adobe.granite.replication.hc.impl") String comAdobeGraniteReplicationHcImpl,  @QueryParam("com.adobe.granite.repository.checker") String comAdobeGraniteRepositoryChecker,  @QueryParam("com.adobe.granite.repository.hc.impl") String comAdobeGraniteRepositoryHcImpl,  @QueryParam("com.adobe.granite.rest.assets") String comAdobeGraniteRestAssets,  @QueryParam("com.adobe.granite.security.ui") String comAdobeGraniteSecurityUi,  @QueryParam("com.adobe.granite.startup") String comAdobeGraniteStartup,  @QueryParam("com.adobe.granite.tagsoup") String comAdobeGraniteTagsoup,  @QueryParam("com.adobe.granite.taskmanagement.core") String comAdobeGraniteTaskmanagementCore,  @QueryParam("com.adobe.granite.taskmanagement.workflow") String comAdobeGraniteTaskmanagementWorkflow,  @QueryParam("com.adobe.granite.ui.clientlibs.compiler.less") String comAdobeGraniteUiClientlibsCompilerLess,  @QueryParam("com.adobe.granite.ui.clientlibs.processor.gcc") String comAdobeGraniteUiClientlibsProcessorGcc,  @QueryParam("com.adobe.granite.webconsole.plugins") String comAdobeGraniteWebconsolePlugins,  @QueryParam("com.adobe.granite.workflow.console") String comAdobeGraniteWorkflowConsole,  @QueryParam("com.adobe.xmp.worker.files.native.fragment.linux") String comAdobeXmpWorkerFilesNativeFragmentLinux,  @QueryParam("com.adobe.xmp.worker.files.native.fragment.macosx") String comAdobeXmpWorkerFilesNativeFragmentMacosx,  @QueryParam("com.adobe.xmp.worker.files.native.fragment.win") String comAdobeXmpWorkerFilesNativeFragmentWin,  @QueryParam("com.day.commons.osgi.wrapper.simple-jndi") String comDayCommonsOsgiWrapperSimpleJndi,  @QueryParam("com.day.cq.cq-authhandler") String comDayCqCqAuthhandler,  @QueryParam("com.day.cq.cq-compat-configupdate") String comDayCqCqCompatConfigupdate,  @QueryParam("com.day.cq.cq-licensebranding") String comDayCqCqLicensebranding,  @QueryParam("com.day.cq.cq-notifcation-impl") String comDayCqCqNotifcationImpl,  @QueryParam("com.day.cq.cq-replication-audit") String comDayCqCqReplicationAudit,  @QueryParam("com.day.cq.cq-search-ext") String comDayCqCqSearchExt,  @QueryParam("com.day.cq.dam.cq-dam-annotation-print") String comDayCqDamCqDamAnnotationPrint,  @QueryParam("com.day.cq.dam.cq-dam-asset-usage") String comDayCqDamCqDamAssetUsage,  @QueryParam("com.day.cq.dam.cq-dam-s7dam") String comDayCqDamCqDamS7dam,  @QueryParam("com.day.cq.dam.cq-dam-similaritysearch") String comDayCqDamCqDamSimilaritysearch,  @QueryParam("com.day.cq.dam.dam-webdav-support") String comDayCqDamDamWebdavSupport,  @QueryParam("com.day.cq.pre-upgrade-tasks") String comDayCqPreUpgradeTasks,  @QueryParam("com.day.cq.replication.extensions") String comDayCqReplicationExtensions,  @QueryParam("com.day.cq.wcm.cq-msm-core") String comDayCqWcmCqMsmCore,  @QueryParam("com.day.cq.wcm.cq-wcm-translation") String comDayCqWcmCqWcmTranslation,  @QueryParam("day-commons-jrawio") String dayCommonsJrawio,  @QueryParam("org.apache.aries.jmx.whiteboard") String orgApacheAriesJmxWhiteboard,  @QueryParam("org.apache.felix.http.sslfilter") String orgApacheFelixHttpSslfilter,  @QueryParam("org.apache.felix.org.apache.felix.threaddump") String orgApacheFelixOrgApacheFelixThreaddump,  @QueryParam("org.apache.felix.webconsole.plugins.ds") String orgApacheFelixWebconsolePluginsDs,  @QueryParam("org.apache.felix.webconsole.plugins.event") String orgApacheFelixWebconsolePluginsEvent,  @QueryParam("org.apache.felix.webconsole.plugins.memoryusage") String orgApacheFelixWebconsolePluginsMemoryusage,  @QueryParam("org.apache.felix.webconsole.plugins.packageadmin") String orgApacheFelixWebconsolePluginsPackageadmin,  @QueryParam("org.apache.jackrabbit.oak-auth-ldap") String orgApacheJackrabbitOakAuthLdap,  @QueryParam("org.apache.jackrabbit.oak-segment-tar") String orgApacheJackrabbitOakSegmentTar,  @QueryParam("org.apache.jackrabbit.oak-solr-osgi") String orgApacheJackrabbitOakSolrOsgi,  @QueryParam("org.apache.sling.bundleresource.impl") String orgApacheSlingBundleresourceImpl,  @QueryParam("org.apache.sling.commons.fsclassloader") String orgApacheSlingCommonsFsclassloader,  @QueryParam("org.apache.sling.commons.log.webconsole") String orgApacheSlingCommonsLogWebconsole,  @QueryParam("org.apache.sling.datasource") String orgApacheSlingDatasource,  @QueryParam("org.apache.sling.discovery.base") String orgApacheSlingDiscoveryBase,  @QueryParam("org.apache.sling.discovery.oak") String orgApacheSlingDiscoveryOak,  @QueryParam("org.apache.sling.discovery.support") String orgApacheSlingDiscoverySupport,  @QueryParam("org.apache.sling.distribution.api") String orgApacheSlingDistributionApi,  @QueryParam("org.apache.sling.distribution.core") String orgApacheSlingDistributionCore,  @QueryParam("org.apache.sling.extensions.webconsolesecurityprovider") String orgApacheSlingExtensionsWebconsolesecurityprovider,  @QueryParam("org.apache.sling.hc.webconsole") String orgApacheSlingHcWebconsole,  @QueryParam("org.apache.sling.installer.console") String orgApacheSlingInstallerConsole,  @QueryParam("org.apache.sling.installer.provider.file") String orgApacheSlingInstallerProviderFile,  @QueryParam("org.apache.sling.installer.provider.jcr") String orgApacheSlingInstallerProviderJcr,  @QueryParam("org.apache.sling.jcr.davex") String orgApacheSlingJcrDavex,  @QueryParam("org.apache.sling.jcr.resourcesecurity") String orgApacheSlingJcrResourcesecurity,  @QueryParam("org.apache.sling.jmx.provider") String orgApacheSlingJmxProvider,  @QueryParam("org.apache.sling.launchpad.installer") String orgApacheSlingLaunchpadInstaller,  @QueryParam("org.apache.sling.models.impl") String orgApacheSlingModelsImpl,  @QueryParam("org.apache.sling.repoinit.parser") String orgApacheSlingRepoinitParser,  @QueryParam("org.apache.sling.resource.inventory") String orgApacheSlingResourceInventory,  @QueryParam("org.apache.sling.resourceresolver") String orgApacheSlingResourceresolver,  @QueryParam("org.apache.sling.scripting.javascript") String orgApacheSlingScriptingJavascript,  @QueryParam("org.apache.sling.scripting.jst") String orgApacheSlingScriptingJst,  @QueryParam("org.apache.sling.scripting.sightly.js.provider") String orgApacheSlingScriptingSightlyJsProvider,  @QueryParam("org.apache.sling.scripting.sightly.models.provider") String orgApacheSlingScriptingSightlyModelsProvider,  @QueryParam("org.apache.sling.security") String orgApacheSlingSecurity,  @QueryParam("org.apache.sling.servlets.compat") String orgApacheSlingServletsCompat,  @QueryParam("org.apache.sling.servlets.get") String orgApacheSlingServletsGet,  @QueryParam("org.apache.sling.startupfilter.disabler") String orgApacheSlingStartupfilterDisabler,  @QueryParam("org.apache.sling.tracer") String orgApacheSlingTracer,  @QueryParam("we.retail.client.app.core") String weRetailClientAppCore,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteApicontrollerFilterResolverHookFactory(post,apply,delete,action,$location,propertylist,comAdobeCqCdnCdnRewriter,comAdobeCqCloudConfigComponents,comAdobeCqCloudConfigCore,comAdobeCqCloudConfigUi,comAdobeCqComAdobeCqEditor,comAdobeCqComAdobeCqProjectsCore,comAdobeCqComAdobeCqProjectsWcmCore,comAdobeCqComAdobeCqUiCommons,comAdobeCqComAdobeCqWcmStyle,comAdobeCqCqActivitymapIntegration,comAdobeCqCqContexthubCommons,comAdobeCqCqDtm,comAdobeCqCqHealthcheck,comAdobeCqCqMultisiteTargeting,comAdobeCqCqPreUpgradeCleanup,comAdobeCqCqProductInfoProvider,comAdobeCqCqRestSites,comAdobeCqCqSecurityHc,comAdobeCqDamCqDamSvgHandler,comAdobeCqDamCqScene7Imaging,comAdobeCqDtmReactorCore,comAdobeCqDtmReactorUi,comAdobeCqExpJspelResolver,comAdobeCqInboxCqInbox,comAdobeCqJsonSchemaParser,comAdobeCqMediaCqMediaPublishingDpsFpCore,comAdobeCqMobileCqMobileCaas,comAdobeCqMobileCqMobileIndexBuilder,comAdobeCqMobileCqMobilePhonegapBuild,comAdobeCqMyspell,comAdobeCqSampleWeRetailCore,comAdobeCqScreensComAdobeCqScreensDcc,comAdobeCqScreensComAdobeCqScreensMqCore,comAdobeCqSocialCqSocialAsProvider,comAdobeCqSocialCqSocialBadgingBasicImpl,comAdobeCqSocialCqSocialBadgingImpl,comAdobeCqSocialCqSocialCalendarImpl,comAdobeCqSocialCqSocialContentFragmentsImpl,comAdobeCqSocialCqSocialEnablementImpl,comAdobeCqSocialCqSocialGraphImpl,comAdobeCqSocialCqSocialIdeationImpl,comAdobeCqSocialCqSocialJcrProvider,comAdobeCqSocialCqSocialMembersImpl,comAdobeCqSocialCqSocialMsProvider,comAdobeCqSocialCqSocialNotificationsChannelsWeb,comAdobeCqSocialCqSocialNotificationsImpl,comAdobeCqSocialCqSocialRdbProvider,comAdobeCqSocialCqSocialScfImpl,comAdobeCqSocialCqSocialScoringBasicImpl,comAdobeCqSocialCqSocialScoringImpl,comAdobeCqSocialCqSocialServiceusersImpl,comAdobeCqSocialCqSocialSrpImpl,comAdobeCqSocialCqSocialUgcbaseImpl,comAdobeDamCqDamCfmImpl,comAdobeFormsFoundationFormsFoundationBase,comAdobeGraniteApicontroller,comAdobeGraniteAssetCore,comAdobeGraniteAuthSso,comAdobeGraniteBundlesHcImpl,comAdobeGraniteCompatRouter,comAdobeGraniteConf,comAdobeGraniteConfUiCore,comAdobeGraniteCors,comAdobeGraniteCrxExplorer,comAdobeGraniteCrxdeLite,comAdobeGraniteCryptoConfig,comAdobeGraniteCryptoExtension,comAdobeGraniteCryptoFile,comAdobeGraniteCryptoJcr,comAdobeGraniteCsrf,comAdobeGraniteDistributionCore,comAdobeGraniteDropwizardMetrics,comAdobeGraniteFragsImpl,comAdobeGraniteGibson,comAdobeGraniteInfocollector,comAdobeGraniteInstallerFactoryPackages,comAdobeGraniteJettySsl,comAdobeGraniteJobsAsync,comAdobeGraniteMaintenanceOak,comAdobeGraniteMonitoringCore,comAdobeGraniteQueries,comAdobeGraniteReplicationHcImpl,comAdobeGraniteRepositoryChecker,comAdobeGraniteRepositoryHcImpl,comAdobeGraniteRestAssets,comAdobeGraniteSecurityUi,comAdobeGraniteStartup,comAdobeGraniteTagsoup,comAdobeGraniteTaskmanagementCore,comAdobeGraniteTaskmanagementWorkflow,comAdobeGraniteUiClientlibsCompilerLess,comAdobeGraniteUiClientlibsProcessorGcc,comAdobeGraniteWebconsolePlugins,comAdobeGraniteWorkflowConsole,comAdobeXmpWorkerFilesNativeFragmentLinux,comAdobeXmpWorkerFilesNativeFragmentMacosx,comAdobeXmpWorkerFilesNativeFragmentWin,comDayCommonsOsgiWrapperSimpleJndi,comDayCqCqAuthhandler,comDayCqCqCompatConfigupdate,comDayCqCqLicensebranding,comDayCqCqNotifcationImpl,comDayCqCqReplicationAudit,comDayCqCqSearchExt,comDayCqDamCqDamAnnotationPrint,comDayCqDamCqDamAssetUsage,comDayCqDamCqDamS7dam,comDayCqDamCqDamSimilaritysearch,comDayCqDamDamWebdavSupport,comDayCqPreUpgradeTasks,comDayCqReplicationExtensions,comDayCqWcmCqMsmCore,comDayCqWcmCqWcmTranslation,dayCommonsJrawio,orgApacheAriesJmxWhiteboard,orgApacheFelixHttpSslfilter,orgApacheFelixOrgApacheFelixThreaddump,orgApacheFelixWebconsolePluginsDs,orgApacheFelixWebconsolePluginsEvent,orgApacheFelixWebconsolePluginsMemoryusage,orgApacheFelixWebconsolePluginsPackageadmin,orgApacheJackrabbitOakAuthLdap,orgApacheJackrabbitOakSegmentTar,orgApacheJackrabbitOakSolrOsgi,orgApacheSlingBundleresourceImpl,orgApacheSlingCommonsFsclassloader,orgApacheSlingCommonsLogWebconsole,orgApacheSlingDatasource,orgApacheSlingDiscoveryBase,orgApacheSlingDiscoveryOak,orgApacheSlingDiscoverySupport,orgApacheSlingDistributionApi,orgApacheSlingDistributionCore,orgApacheSlingExtensionsWebconsolesecurityprovider,orgApacheSlingHcWebconsole,orgApacheSlingInstallerConsole,orgApacheSlingInstallerProviderFile,orgApacheSlingInstallerProviderJcr,orgApacheSlingJcrDavex,orgApacheSlingJcrResourcesecurity,orgApacheSlingJmxProvider,orgApacheSlingLaunchpadInstaller,orgApacheSlingModelsImpl,orgApacheSlingRepoinitParser,orgApacheSlingResourceInventory,orgApacheSlingResourceresolver,orgApacheSlingScriptingJavascript,orgApacheSlingScriptingJst,orgApacheSlingScriptingSightlyJsProvider,orgApacheSlingScriptingSightlyModelsProvider,orgApacheSlingSecurity,orgApacheSlingServletsCompat,orgApacheSlingServletsGet,orgApacheSlingStartupfilterDisabler,orgApacheSlingTracer,weRetailClientAppCore,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.auth.cert.impl.ClientCertAuthHandler")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteAuthCertImplClientCertAuthHandler(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("path") String path,  @QueryParam("service.ranking") Integer serviceRanking,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteAuthCertImplClientCertAuthHandler(post,apply,delete,action,$location,propertylist,path,serviceRanking,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.auth.ims")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteAuthImsInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthImsInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteAuthIms(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("configid") String configid,  @QueryParam("scope") String scope,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteAuthIms(post,apply,delete,action,$location,propertylist,configid,scope,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.auth.ims.impl.ExternalUserIdMappingProviderExtension")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("oauth.provider.id") String oauthProviderId,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension(post,apply,delete,action,$location,propertylist,oauthProviderId,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.auth.ims.impl.IMSAccessTokenRequestCustomizerImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("auth.ims.client.secret") String authImsClientSecret,  @QueryParam("customizer.type") String customizerType,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl(post,apply,delete,action,$location,propertylist,authImsClientSecret,customizerType,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.auth.ims.impl.IMSInstanceCredentialsValidator")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("oauth.provider.id") String oauthProviderId,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator(post,apply,delete,action,$location,propertylist,oauthProviderId,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.auth.ims.impl.IMSProviderImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteAuthImsImplIMSProviderImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthImsImplIMSProviderImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteAuthImsImplIMSProviderImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("oauth.provider.id") String oauthProviderId,  @QueryParam("oauth.provider.ims.authorization.url") String oauthProviderImsAuthorizationUrl,  @QueryParam("oauth.provider.ims.token.url") String oauthProviderImsTokenUrl,  @QueryParam("oauth.provider.ims.profile.url") String oauthProviderImsProfileUrl,  @QueryParam("oauth.provider.ims.extended.details.urls") List<String> oauthProviderImsExtendedDetailsUrls,  @QueryParam("oauth.provider.ims.validate.token.url") String oauthProviderImsValidateTokenUrl,  @QueryParam("oauth.provider.ims.session.property") String oauthProviderImsSessionProperty,  @QueryParam("oauth.provider.ims.service.token.client.id") String oauthProviderImsServiceTokenClientId,  @QueryParam("oauth.provider.ims.service.token.client.secret") String oauthProviderImsServiceTokenClientSecret,  @QueryParam("oauth.provider.ims.service.token") String oauthProviderImsServiceToken,  @QueryParam("ims.org.ref") String imsOrgRef,  @QueryParam("ims.group.mapping") List<String> imsGroupMapping,  @QueryParam("oauth.provider.ims.only.license.group") Boolean oauthProviderImsOnlyLicenseGroup,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteAuthImsImplIMSProviderImpl(post,apply,delete,action,$location,propertylist,oauthProviderId,oauthProviderImsAuthorizationUrl,oauthProviderImsTokenUrl,oauthProviderImsProfileUrl,oauthProviderImsExtendedDetailsUrls,oauthProviderImsValidateTokenUrl,oauthProviderImsSessionProperty,oauthProviderImsServiceTokenClientId,oauthProviderImsServiceTokenClientSecret,oauthProviderImsServiceToken,imsOrgRef,imsGroupMapping,oauthProviderImsOnlyLicenseGroup,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.auth.ims.impl.ImsConfigProviderImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteAuthImsImplImsConfigProviderImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("oauth.configmanager.ims.configid") String oauthConfigmanagerImsConfigid,  @QueryParam("ims.owningEntity") String imsOwningEntity,  @QueryParam("aem.instanceId") String aemInstanceId,  @QueryParam("ims.serviceCode") String imsServiceCode,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteAuthImsImplImsConfigProviderImpl(post,apply,delete,action,$location,propertylist,oauthConfigmanagerImsConfigid,imsOwningEntity,aemInstanceId,imsServiceCode,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.auth.oauth.accesstoken.provider")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteAuthOauthAccesstokenProviderInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthOauthAccesstokenProviderInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteAuthOauthAccesstokenProvider(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("name") String name,  @QueryParam("auth.token.provider.title") String authTokenProviderTitle,  @QueryParam("auth.token.provider.default.claims") List<String> authTokenProviderDefaultClaims,  @QueryParam("auth.token.provider.endpoint") String authTokenProviderEndpoint,  @QueryParam("auth.access.token.request") String authAccessTokenRequest,  @QueryParam("auth.token.provider.keypair.alias") String authTokenProviderKeypairAlias,  @QueryParam("auth.token.provider.conn.timeout") Integer authTokenProviderConnTimeout,  @QueryParam("auth.token.provider.so.timeout") Integer authTokenProviderSoTimeout,  @QueryParam("auth.token.provider.client.id") String authTokenProviderClientId,  @QueryParam("auth.token.provider.scope") String authTokenProviderScope,  @QueryParam("auth.token.provider.reuse.access.token") Boolean authTokenProviderReuseAccessToken,  @QueryParam("auth.token.provider.relaxed.ssl") Boolean authTokenProviderRelaxedSsl,  @QueryParam("token.request.customizer.type") String tokenRequestCustomizerType,  @QueryParam("auth.token.validator.type") String authTokenValidatorType,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteAuthOauthAccesstokenProvider(post,apply,delete,action,$location,propertylist,name,authTokenProviderTitle,authTokenProviderDefaultClaims,authTokenProviderEndpoint,authAccessTokenRequest,authTokenProviderKeypairAlias,authTokenProviderConnTimeout,authTokenProviderSoTimeout,authTokenProviderClientId,authTokenProviderScope,authTokenProviderReuseAccessToken,authTokenProviderRelaxedSsl,tokenRequestCustomizerType,authTokenValidatorType,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.auth.oauth.impl.BearerAuthenticationHandler")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteAuthOauthImplBearerAuthenticationHandler(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("path") String path,  @QueryParam("oauth.clientIds.allowed") List<String> oauthClientIdsAllowed,  @QueryParam("auth.bearer.sync.ims") Boolean authBearerSyncIms,  @QueryParam("auth.tokenRequestParameter") String authTokenRequestParameter,  @QueryParam("oauth.bearer.configid") String oauthBearerConfigid,  @QueryParam("oauth.jwt.support") Boolean oauthJwtSupport,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteAuthOauthImplBearerAuthenticationHandler(post,apply,delete,action,$location,propertylist,path,oauthClientIdsAllowed,authBearerSyncIms,authTokenRequestParameter,oauthBearerConfigid,oauthJwtSupport,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.auth.oauth.impl.DefaultTokenValidatorImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("auth.token.validator.type") String authTokenValidatorType,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl(post,apply,delete,action,$location,propertylist,authTokenValidatorType,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.auth.oauth.impl.FacebookProviderImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteAuthOauthImplFacebookProviderImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("oauth.provider.id") String oauthProviderId,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteAuthOauthImplFacebookProviderImpl(post,apply,delete,action,$location,propertylist,oauthProviderId,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.auth.oauth.impl.GithubProviderImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteAuthOauthImplGithubProviderImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthOauthImplGithubProviderImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteAuthOauthImplGithubProviderImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("oauth.provider.id") String oauthProviderId,  @QueryParam("oauth.provider.github.authorization.url") String oauthProviderGithubAuthorizationUrl,  @QueryParam("oauth.provider.github.token.url") String oauthProviderGithubTokenUrl,  @QueryParam("oauth.provider.github.profile.url") String oauthProviderGithubProfileUrl,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteAuthOauthImplGithubProviderImpl(post,apply,delete,action,$location,propertylist,oauthProviderId,oauthProviderGithubAuthorizationUrl,oauthProviderGithubTokenUrl,oauthProviderGithubProfileUrl,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.auth.oauth.impl.GraniteProvider")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteAuthOauthImplGraniteProviderInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthOauthImplGraniteProviderInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteAuthOauthImplGraniteProvider(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("oauth.provider.id") String oauthProviderId,  @QueryParam("oauth.provider.granite.authorization.url") String oauthProviderGraniteAuthorizationUrl,  @QueryParam("oauth.provider.granite.token.url") String oauthProviderGraniteTokenUrl,  @QueryParam("oauth.provider.granite.profile.url") String oauthProviderGraniteProfileUrl,  @QueryParam("oauth.provider.granite.extended.details.urls") String oauthProviderGraniteExtendedDetailsUrls,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteAuthOauthImplGraniteProvider(post,apply,delete,action,$location,propertylist,oauthProviderId,oauthProviderGraniteAuthorizationUrl,oauthProviderGraniteTokenUrl,oauthProviderGraniteProfileUrl,oauthProviderGraniteExtendedDetailsUrls,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManager")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteAuthOauthImplHelperProviderConfigManager(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("oauth.cookie.login.timeout") String oauthCookieLoginTimeout,  @QueryParam("oauth.cookie.max.age") String oauthCookieMaxAge,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteAuthOauthImplHelperProviderConfigManager(post,apply,delete,action,$location,propertylist,oauthCookieLoginTimeout,oauthCookieMaxAge,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManagerInternal")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("oauth.cookie.login.timeout") String oauthCookieLoginTimeout,  @QueryParam("oauth.cookie.max.age") String oauthCookieMaxAge,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal(post,apply,delete,action,$location,propertylist,oauthCookieLoginTimeout,oauthCookieMaxAge,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.auth.oauth.impl.OAuthAuthenticationHandler")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteAuthOauthImplOAuthAuthenticationHandler(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("path") String path,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteAuthOauthImplOAuthAuthenticationHandler(post,apply,delete,action,$location,propertylist,path,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.auth.oauth.impl.TwitterProviderImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteAuthOauthImplTwitterProviderImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("oauth.provider.id") String oauthProviderId,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteAuthOauthImplTwitterProviderImpl(post,apply,delete,action,$location,propertylist,oauthProviderId,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.auth.oauth.provider")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteAuthOauthProviderInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthOauthProviderInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteAuthOauthProvider(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("oauth.config.id") String oauthConfigId,  @QueryParam("oauth.client.id") String oauthClientId,  @QueryParam("oauth.client.secret") String oauthClientSecret,  @QueryParam("oauth.scope") List<String> oauthScope,  @QueryParam("oauth.config.provider.id") String oauthConfigProviderId,  @QueryParam("oauth.create.users") Boolean oauthCreateUsers,  @QueryParam("oauth.userid.property") String oauthUseridProperty,  @QueryParam("force.strict.username.matching") Boolean forceStrictUsernameMatching,  @QueryParam("oauth.encode.userids") Boolean oauthEncodeUserids,  @QueryParam("oauth.hash.userids") Boolean oauthHashUserids,  @QueryParam("oauth.callBackUrl") String oauthCallBackUrl,  @QueryParam("oauth.access.token.persist") Boolean oauthAccessTokenPersist,  @QueryParam("oauth.access.token.persist.cookie") Boolean oauthAccessTokenPersistCookie,  @QueryParam("oauth.csrf.state.protection") Boolean oauthCsrfStateProtection,  @QueryParam("oauth.redirect.request.params") Boolean oauthRedirectRequestParams,  @QueryParam("oauth.config.siblings.allow") Boolean oauthConfigSiblingsAllow,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteAuthOauthProvider(post,apply,delete,action,$location,propertylist,oauthConfigId,oauthClientId,oauthClientSecret,oauthScope,oauthConfigProviderId,oauthCreateUsers,oauthUseridProperty,forceStrictUsernameMatching,oauthEncodeUserids,oauthHashUserids,oauthCallBackUrl,oauthAccessTokenPersist,oauthAccessTokenPersistCookie,oauthCsrfStateProtection,oauthRedirectRequestParams,oauthConfigSiblingsAllow,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.auth.requirement.impl.DefaultRequirementHandler")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteAuthRequirementImplDefaultRequirementHandler(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("supportedPaths") List<String> supportedPaths,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteAuthRequirementImplDefaultRequirementHandler(post,apply,delete,action,$location,propertylist,supportedPaths,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteAuthSamlSamlAuthenticationHandler(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("path") List<String> path,  @QueryParam("service.ranking") Integer serviceRanking,  @QueryParam("idpUrl") String idpUrl,  @QueryParam("idpCertAlias") String idpCertAlias,  @QueryParam("idpHttpRedirect") Boolean idpHttpRedirect,  @QueryParam("serviceProviderEntityId") String serviceProviderEntityId,  @QueryParam("assertionConsumerServiceURL") String assertionConsumerServiceURL,  @QueryParam("spPrivateKeyAlias") String spPrivateKeyAlias,  @QueryParam("keyStorePassword") String keyStorePassword,  @QueryParam("defaultRedirectUrl") String defaultRedirectUrl,  @QueryParam("userIDAttribute") String userIDAttribute,  @QueryParam("useEncryption") Boolean useEncryption,  @QueryParam("createUser") Boolean createUser,  @QueryParam("userIntermediatePath") String userIntermediatePath,  @QueryParam("addGroupMemberships") Boolean addGroupMemberships,  @QueryParam("groupMembershipAttribute") String groupMembershipAttribute,  @QueryParam("defaultGroups") List<String> defaultGroups,  @QueryParam("nameIdFormat") String nameIdFormat,  @QueryParam("synchronizeAttributes") List<String> synchronizeAttributes,  @QueryParam("handleLogout") Boolean handleLogout,  @QueryParam("logoutUrl") String logoutUrl,  @QueryParam("clockTolerance") Integer clockTolerance,  @QueryParam("digestMethod") String digestMethod,  @QueryParam("signatureMethod") String signatureMethod,  @QueryParam("identitySyncType") String identitySyncType,  @QueryParam("idpIdentifier") String idpIdentifier,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteAuthSamlSamlAuthenticationHandler(post,apply,delete,action,$location,propertylist,path,serviceRanking,idpUrl,idpCertAlias,idpHttpRedirect,serviceProviderEntityId,assertionConsumerServiceURL,spPrivateKeyAlias,keyStorePassword,defaultRedirectUrl,userIDAttribute,useEncryption,createUser,userIntermediatePath,addGroupMemberships,groupMembershipAttribute,defaultGroups,nameIdFormat,synchronizeAttributes,handleLogout,logoutUrl,clockTolerance,digestMethod,signatureMethod,identitySyncType,idpIdentifier,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.auth.sso.impl.SsoAuthenticationHandler")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteAuthSsoImplSsoAuthenticationHandler(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("path") String path,  @QueryParam("service.ranking") Integer serviceRanking,  @QueryParam("jaas.controlFlag") String jaasControlFlag,  @QueryParam("jaas.realmName") String jaasRealmName,  @QueryParam("jaas.ranking") Integer jaasRanking,  @QueryParam("headers") List<String> headers,  @QueryParam("cookies") List<String> cookies,  @QueryParam("parameters") List<String> parameters,  @QueryParam("usermap") List<String> usermap,  @QueryParam("format") String format,  @QueryParam("trustedCredentialsAttribute") String trustedCredentialsAttribute,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteAuthSsoImplSsoAuthenticationHandler(post,apply,delete,action,$location,propertylist,path,serviceRanking,jaasControlFlag,jaasRealmName,jaasRanking,headers,cookies,parameters,usermap,format,trustedCredentialsAttribute,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.bundles.hc.impl.CodeCacheHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteBundlesHcImplCodeCacheHealthCheck(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("hc.tags") List<String> hcTags,  @QueryParam("minimum.code.cache.size") Integer minimumCodeCacheSize,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteBundlesHcImplCodeCacheHealthCheck(post,apply,delete,action,$location,propertylist,hcTags,minimumCodeCacheSize,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.bundles.hc.impl.CrxdeSupportBundleHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("hc.tags") List<String> hcTags,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck(post,apply,delete,action,$location,propertylist,hcTags,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.bundles.hc.impl.DavExBundleHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteBundlesHcImplDavExBundleHealthCheck(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("hc.tags") List<String> hcTags,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteBundlesHcImplDavExBundleHealthCheck(post,apply,delete,action,$location,propertylist,hcTags,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.bundles.hc.impl.InactiveBundlesHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("hc.tags") List<String> hcTags,  @QueryParam("ignored.bundles") List<String> ignoredBundles,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck(post,apply,delete,action,$location,propertylist,hcTags,ignoredBundles,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.bundles.hc.impl.JobsHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteBundlesHcImplJobsHealthCheck(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("hc.tags") List<String> hcTags,  @QueryParam("max.queued.jobs") Integer maxQueuedJobs,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteBundlesHcImplJobsHealthCheck(post,apply,delete,action,$location,propertylist,hcTags,maxQueuedJobs,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingGetServletHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteBundlesHcImplSlingGetServletHealthCheck(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("hc.tags") List<String> hcTags,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteBundlesHcImplSlingGetServletHealthCheck(post,apply,delete,action,$location,propertylist,hcTags,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJavaScriptHandlerHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("hc.tags") List<String> hcTags,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck(post,apply,delete,action,$location,propertylist,hcTags,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJspScriptHandlerHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("hc.tags") List<String> hcTags,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck(post,apply,delete,action,$location,propertylist,hcTags,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingReferrerFilterHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("hc.tags") List<String> hcTags,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck(post,apply,delete,action,$location,propertylist,hcTags,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.bundles.hc.impl.WebDavBundleHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteBundlesHcImplWebDavBundleHealthCheck(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("hc.tags") List<String> hcTags,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteBundlesHcImplWebDavBundleHealthCheck(post,apply,delete,action,$location,propertylist,hcTags,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.comments.internal.CommentReplicationContentFilterFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteCommentsInternalCommentReplicationContentFilterFac(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("replicate.comment.resourceTypes") List<String> replicateCommentResourceTypes,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteCommentsInternalCommentReplicationContentFilterFac(post,apply,delete,action,$location,propertylist,replicateCommentResourceTypes,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.compatrouter.impl.CompatSwitchingServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("compatgroups") List<String> compatgroups,  @QueryParam("enabled") Boolean enabled,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl(post,apply,delete,action,$location,propertylist,compatgroups,enabled,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.compatrouter.impl.RoutingConfig")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteCompatrouterImplRoutingConfigInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteCompatrouterImplRoutingConfigInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteCompatrouterImplRoutingConfig(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("id") String id,  @QueryParam("compatPath") String compatPath,  @QueryParam("newPath") String newPath,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteCompatrouterImplRoutingConfig(post,apply,delete,action,$location,propertylist,id,compatPath,newPath,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.compatrouter.impl.SwitchMappingConfig")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteCompatrouterImplSwitchMappingConfig(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("group") String group,  @QueryParam("ids") List<String> ids,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteCompatrouterImplSwitchMappingConfig(post,apply,delete,action,$location,propertylist,group,ids,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.conf.impl.RuntimeAwareConfigurationResourceResolvingStrategy")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("enabled") Boolean enabled,  @QueryParam("fallbackPaths") List<String> fallbackPaths,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving(post,apply,delete,action,$location,propertylist,enabled,fallbackPaths,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.contexthub.impl.ContextHubImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteContexthubImplContextHubImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteContexthubImplContextHubImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteContexthubImplContextHubImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("com.adobe.granite.contexthub.silent_mode") Boolean comAdobeGraniteContexthubSilentMode,  @QueryParam("com.adobe.granite.contexthub.show_ui") Boolean comAdobeGraniteContexthubShowUi,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteContexthubImplContextHubImpl(post,apply,delete,action,$location,propertylist,comAdobeGraniteContexthubSilentMode,comAdobeGraniteContexthubShowUi,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.cors.impl.CORSPolicyImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteCorsImplCORSPolicyImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteCorsImplCORSPolicyImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteCorsImplCORSPolicyImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("alloworigin") List<String> alloworigin,  @QueryParam("alloworiginregexp") List<String> alloworiginregexp,  @QueryParam("allowedpaths") List<String> allowedpaths,  @QueryParam("exposedheaders") List<String> exposedheaders,  @QueryParam("maxage") Integer maxage,  @QueryParam("supportedheaders") List<String> supportedheaders,  @QueryParam("supportedmethods") List<String> supportedmethods,  @QueryParam("supportscredentials") Boolean supportscredentials,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteCorsImplCORSPolicyImpl(post,apply,delete,action,$location,propertylist,alloworigin,alloworiginregexp,allowedpaths,exposedheaders,maxage,supportedheaders,supportedmethods,supportscredentials,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.csrf.impl.CSRFFilter")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteCsrfImplCSRFFilterInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteCsrfImplCSRFFilterInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteCsrfImplCSRFFilter(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("filter.methods") List<String> filterMethods,  @QueryParam("filter.enable.safe.user.agents") Boolean filterEnableSafeUserAgents,  @QueryParam("filter.safe.user.agents") List<String> filterSafeUserAgents,  @QueryParam("filter.excluded.paths") List<String> filterExcludedPaths,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteCsrfImplCSRFFilter(post,apply,delete,action,$location,propertylist,filterMethods,filterEnableSafeUserAgents,filterSafeUserAgents,filterExcludedPaths,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.csrf.impl.CSRFServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteCsrfImplCSRFServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteCsrfImplCSRFServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteCsrfImplCSRFServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("csrf.token.expires.in") Integer csrfTokenExpiresIn,  @QueryParam("sling.auth.requirements") String slingAuthRequirements,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteCsrfImplCSRFServlet(post,apply,delete,action,$location,propertylist,csrfTokenExpiresIn,slingAuthRequirements,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.distribution.core.impl.CryptoDistributionTransportSecretProvider")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("name") String name,  @QueryParam("username") String username,  @QueryParam("encryptedPassword") String encryptedPassword,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe(post,apply,delete,action,$location,propertylist,name,username,encryptedPassword,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffChangesObserver")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteDistributionCoreImplDiffDiffChangesObserver(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("enabled") Boolean enabled,  @QueryParam("agentName") String agentName,  @QueryParam("diffPath") String diffPath,  @QueryParam("observedPath") String observedPath,  @QueryParam("serviceName") String serviceName,  @QueryParam("propertyNames") String propertyNames,  @QueryParam("distributionDelay") Integer distributionDelay,  @QueryParam("serviceUser.target") String serviceUserTarget,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteDistributionCoreImplDiffDiffChangesObserver(post,apply,delete,action,$location,propertylist,enabled,agentName,diffPath,observedPath,serviceName,propertyNames,distributionDelay,serviceUserTarget,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffEventListener")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteDistributionCoreImplDiffDiffEventListener(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("diffPath") String diffPath,  @QueryParam("serviceName") String serviceName,  @QueryParam("serviceUser.target") String serviceUserTarget,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteDistributionCoreImplDiffDiffEventListener(post,apply,delete,action,$location,propertylist,diffPath,serviceName,serviceUserTarget,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.distribution.core.impl.DistributionToReplicationEventTransformer")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteDistributionCoreImplDistributionToReplicationEven(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("importer.name") List<String> importerName,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteDistributionCoreImplDistributionToReplicationEven(post,apply,delete,action,$location,propertylist,importerName,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.distribution.core.impl.replication.adapters.ReplicationAgentProvider")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("providerName") String providerName,  @QueryParam("forward.requests") Boolean forwardRequests,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat(post,apply,delete,action,$location,propertylist,providerName,forwardRequests,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.distribution.core.impl.replication.DistributionTransportHandler")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteDistributionCoreImplReplicationDistributionTrans(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("forward.requests") Boolean forwardRequests,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteDistributionCoreImplReplicationDistributionTrans(post,apply,delete,action,$location,propertylist,forwardRequests,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.distribution.core.impl.transport.AccessTokenDistributionTransportSecretProvider")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("name") String name,  @QueryParam("serviceName") String serviceName,  @QueryParam("userId") String userId,  @QueryParam("accessTokenProvider.target") String accessTokenProviderTarget,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu(post,apply,delete,action,$location,propertylist,name,serviceName,userId,accessTokenProviderTarget,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.frags.impl.CheckHttpHeaderFlag")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteFragsImplCheckHttpHeaderFlag(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("feature.name") String featureName,  @QueryParam("feature.description") String featureDescription,  @QueryParam("http.header.name") String httpHeaderName,  @QueryParam("http.header.valuepattern") String httpHeaderValuepattern,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteFragsImplCheckHttpHeaderFlag(post,apply,delete,action,$location,propertylist,featureName,featureDescription,httpHeaderName,httpHeaderValuepattern,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.frags.impl.RandomFeature")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteFragsImplRandomFeatureInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteFragsImplRandomFeatureInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteFragsImplRandomFeature(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("feature.name") String featureName,  @QueryParam("feature.description") String featureDescription,  @QueryParam("active.percentage") String activePercentage,  @QueryParam("cookie.name") String cookieName,  @QueryParam("cookie.maxAge") Integer cookieMaxAge,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteFragsImplRandomFeature(post,apply,delete,action,$location,propertylist,featureName,featureDescription,activePercentage,cookieName,cookieMaxAge,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.httpcache.file.FileCacheStore")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteHttpcacheFileFileCacheStoreInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteHttpcacheFileFileCacheStoreInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteHttpcacheFileFileCacheStore(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("com.adobe.granite.httpcache.file.documentRoot") String comAdobeGraniteHttpcacheFileDocumentRoot,  @QueryParam("com.adobe.granite.httpcache.file.includeHost") String comAdobeGraniteHttpcacheFileIncludeHost,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteHttpcacheFileFileCacheStore(post,apply,delete,action,$location,propertylist,comAdobeGraniteHttpcacheFileDocumentRoot,comAdobeGraniteHttpcacheFileIncludeHost,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.httpcache.impl.OuterCacheFilter")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteHttpcacheImplOuterCacheFilter(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("com.adobe.granite.httpcache.url.paths") List<String> comAdobeGraniteHttpcacheUrlPaths,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteHttpcacheImplOuterCacheFilter(post,apply,delete,action,$location,propertylist,comAdobeGraniteHttpcacheUrlPaths,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.i18n.impl.bundle.PseudoTranslations")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteI18nImplBundlePseudoTranslations(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("pseudo.patterns") List<String> pseudoPatterns,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteI18nImplBundlePseudoTranslations(post,apply,delete,action,$location,propertylist,pseudoPatterns,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.i18n.impl.PreferencesLocaleResolverService")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteI18nImplPreferencesLocaleResolverService(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("security.preferences.name") String securityPreferencesName,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteI18nImplPreferencesLocaleResolverService(post,apply,delete,action,$location,propertylist,securityPreferencesName,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.infocollector.InfoCollector")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteInfocollectorInfoCollectorInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteInfocollectorInfoCollectorInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteInfocollectorInfoCollector(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("granite.infocollector.includeThreadDumps") Boolean graniteInfocollectorIncludeThreadDumps,  @QueryParam("granite.infocollector.includeHeapDump") Boolean graniteInfocollectorIncludeHeapDump,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteInfocollectorInfoCollector(post,apply,delete,action,$location,propertylist,graniteInfocollectorIncludeThreadDumps,graniteInfocollectorIncludeHeapDump,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.jetty.ssl.internal.GraniteSslConnectorFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteJettySslInternalGraniteSslConnectorFactory(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("com.adobe.granite.jetty.ssl.port") Integer comAdobeGraniteJettySslPort,  @QueryParam("com.adobe.granite.jetty.ssl.keystore.user") String comAdobeGraniteJettySslKeystoreUser,  @QueryParam("com.adobe.granite.jetty.ssl.keystore.password") String comAdobeGraniteJettySslKeystorePassword,  @QueryParam("com.adobe.granite.jetty.ssl.ciphersuites.excluded") List<String> comAdobeGraniteJettySslCiphersuitesExcluded,  @QueryParam("com.adobe.granite.jetty.ssl.ciphersuites.included") List<String> comAdobeGraniteJettySslCiphersuitesIncluded,  @QueryParam("com.adobe.granite.jetty.ssl.client.certificate") String comAdobeGraniteJettySslClientCertificate,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteJettySslInternalGraniteSslConnectorFactory(post,apply,delete,action,$location,propertylist,comAdobeGraniteJettySslPort,comAdobeGraniteJettySslKeystoreUser,comAdobeGraniteJettySslKeystorePassword,comAdobeGraniteJettySslCiphersuitesExcluded,comAdobeGraniteJettySslCiphersuitesIncluded,comAdobeGraniteJettySslClientCertificate,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.license.impl.LicenseCheckFilter")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteLicenseImplLicenseCheckFilterInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteLicenseImplLicenseCheckFilterInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteLicenseImplLicenseCheckFilter(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("checkInternval") Integer checkInternval,  @QueryParam("excludeIds") List<String> excludeIds,  @QueryParam("encryptPing") Boolean encryptPing,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteLicenseImplLicenseCheckFilter(post,apply,delete,action,$location,propertylist,checkInternval,excludeIds,encryptPing,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.logging.impl.LogAnalyserImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteLoggingImplLogAnalyserImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteLoggingImplLogAnalyserImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteLoggingImplLogAnalyserImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("messages.queue.size") Integer messagesQueueSize,  @QueryParam("logger.config") List<String> loggerConfig,  @QueryParam("messages.size") Integer messagesSize,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteLoggingImplLogAnalyserImpl(post,apply,delete,action,$location,propertylist,messagesQueueSize,loggerConfig,messagesSize,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.logging.impl.LogErrorHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteLoggingImplLogErrorHealthCheck(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("hc.tags") List<String> hcTags,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteLoggingImplLogErrorHealthCheck(post,apply,delete,action,$location,propertylist,hcTags,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.maintenance.crx.impl.DataStoreGarbageCollectionTask")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("granite.maintenance.mandatory") Boolean graniteMaintenanceMandatory,  @QueryParam("job.topics") String jobTopics,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask(post,apply,delete,action,$location,propertylist,graniteMaintenanceMandatory,jobTopics,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.maintenance.crx.impl.LuceneBinariesCleanupTask")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("job.topics") String jobTopics,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask(post,apply,delete,action,$location,propertylist,jobTopics,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.maintenance.crx.impl.RevisionCleanupTask")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteMaintenanceCrxImplRevisionCleanupTask(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("full.gc.days") List<String> fullGcDays,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteMaintenanceCrxImplRevisionCleanupTask(post,apply,delete,action,$location,propertylist,fullGcDays,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.monitoring.impl.ScriptConfigImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteMonitoringImplScriptConfigImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteMonitoringImplScriptConfigImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteMonitoringImplScriptConfigImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("script.filename") String scriptFilename,  @QueryParam("script.display") String scriptDisplay,  @QueryParam("script.path") String scriptPath,  @QueryParam("script.platform") List<String> scriptPlatform,  @QueryParam("interval") Integer interval,  @QueryParam("jmxdomain") String jmxdomain,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteMonitoringImplScriptConfigImpl(post,apply,delete,action,$location,propertylist,scriptFilename,scriptDisplay,scriptPath,scriptPlatform,interval,jmxdomain,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.oauth.server.auth.impl.OAuth2ServerAuthenticationHandler")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("path") String path,  @QueryParam("jaas.controlFlag") String jaasControlFlag,  @QueryParam("jaas.realmName") String jaasRealmName,  @QueryParam("jaas.ranking") Integer jaasRanking,  @QueryParam("oauth.offline.validation") Boolean oauthOfflineValidation,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan(post,apply,delete,action,$location,propertylist,path,jaasControlFlag,jaasRealmName,jaasRanking,oauthOfflineValidation,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.oauth.server.impl.AccessTokenCleanupTask")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteOauthServerImplAccessTokenCleanupTask(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("scheduler.expression") String schedulerExpression,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteOauthServerImplAccessTokenCleanupTask(post,apply,delete,action,$location,propertylist,schedulerExpression,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2ClientRevocationServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("oauth.client.revocation.active") Boolean oauthClientRevocationActive,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet(post,apply,delete,action,$location,propertylist,oauthClientRevocationActive,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2RevocationEndpointServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("sling.servlet.paths") String slingServletPaths,  @QueryParam("oauth.revocation.active") Boolean oauthRevocationActive,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet(post,apply,delete,action,$location,propertylist,slingServletPaths,oauthRevocationActive,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenEndpointServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("oauth.issuer") String oauthIssuer,  @QueryParam("oauth.access.token.expires.in") String oauthAccessTokenExpiresIn,  @QueryParam("osgi.http.whiteboard.servlet.pattern") String osgiHttpWhiteboardServletPattern,  @QueryParam("osgi.http.whiteboard.context.select") String osgiHttpWhiteboardContextSelect,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet(post,apply,delete,action,$location,propertylist,oauthIssuer,oauthAccessTokenExpiresIn,osgiHttpWhiteboardServletPattern,osgiHttpWhiteboardContextSelect,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenRevocationServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("oauth.token.revocation.active") Boolean oauthTokenRevocationActive,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet(post,apply,delete,action,$location,propertylist,oauthTokenRevocationActive,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.offloading.impl.OffloadingConfigurator")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteOffloadingImplOffloadingConfigurator(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("offloading.transporter") String offloadingTransporter,  @QueryParam("offloading.cleanup.payload") Boolean offloadingCleanupPayload,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteOffloadingImplOffloadingConfigurator(post,apply,delete,action,$location,propertylist,offloadingTransporter,offloadingCleanupPayload,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobCloner")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteOffloadingImplOffloadingJobCloner(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("offloading.jobcloner.enabled") Boolean offloadingJobclonerEnabled,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteOffloadingImplOffloadingJobCloner(post,apply,delete,action,$location,propertylist,offloadingJobclonerEnabled,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobOffloader")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteOffloadingImplOffloadingJobOffloader(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("offloading.offloader.enabled") Boolean offloadingOffloaderEnabled,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteOffloadingImplOffloadingJobOffloader(post,apply,delete,action,$location,propertylist,offloadingOffloaderEnabled,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingAgentManager")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteOffloadingImplTransporterOffloadingAgentManager(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("offloading.agentmanager.enabled") Boolean offloadingAgentmanagerEnabled,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteOffloadingImplTransporterOffloadingAgentManager(post,apply,delete,action,$location,propertylist,offloadingAgentmanagerEnabled,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingDefaultTransporter")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("default.transport.agent-to-worker.prefix") String defaultTransportAgentToWorkerPrefix,  @QueryParam("default.transport.agent-to-master.prefix") String defaultTransportAgentToMasterPrefix,  @QueryParam("default.transport.input.package") String defaultTransportInputPackage,  @QueryParam("default.transport.output.package") String defaultTransportOutputPackage,  @QueryParam("default.transport.replication.synchronous") Boolean defaultTransportReplicationSynchronous,  @QueryParam("default.transport.contentpackage") Boolean defaultTransportContentpackage,  @QueryParam("offloading.transporter.default.enabled") Boolean offloadingTransporterDefaultEnabled,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo(post,apply,delete,action,$location,propertylist,defaultTransportAgentToWorkerPrefix,defaultTransportAgentToMasterPrefix,defaultTransportInputPackage,defaultTransportOutputPackage,defaultTransportReplicationSynchronous,defaultTransportContentpackage,offloadingTransporterDefaultEnabled,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.omnisearch.impl.core.OmniSearchServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("omnisearch.suggestion.requiretext.min") Integer omnisearchSuggestionRequiretextMin,  @QueryParam("omnisearch.suggestion.spellcheck.require") Boolean omnisearchSuggestionSpellcheckRequire,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl(post,apply,delete,action,$location,propertylist,omnisearchSuggestionRequiretextMin,omnisearchSuggestionSpellcheckRequire,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.optout.impl.OptOutServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteOptoutImplOptOutServiceImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteOptoutImplOptOutServiceImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteOptoutImplOptOutServiceImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("optout.cookies") List<String> optoutCookies,  @QueryParam("optout.headers") List<String> optoutHeaders,  @QueryParam("optout.whitelist.cookies") List<String> optoutWhitelistCookies,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteOptoutImplOptOutServiceImpl(post,apply,delete,action,$location,propertylist,optoutCookies,optoutHeaders,optoutWhitelistCookies,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.queries.impl.hc.AsyncIndexHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteQueriesImplHcAsyncIndexHealthCheck(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("indexing.critical.threshold") Integer indexingCriticalThreshold,  @QueryParam("indexing.warn.threshold") Integer indexingWarnThreshold,  @QueryParam("hc.tags") List<String> hcTags,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteQueriesImplHcAsyncIndexHealthCheck(post,apply,delete,action,$location,propertylist,indexingCriticalThreshold,indexingWarnThreshold,hcTags,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.queries.impl.hc.LargeIndexHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteQueriesImplHcLargeIndexHealthCheck(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("large.index.critical.threshold") Integer largeIndexCriticalThreshold,  @QueryParam("large.index.warn.threshold") Integer largeIndexWarnThreshold,  @QueryParam("hc.tags") List<String> hcTags,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteQueriesImplHcLargeIndexHealthCheck(post,apply,delete,action,$location,propertylist,largeIndexCriticalThreshold,largeIndexWarnThreshold,hcTags,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.queries.impl.hc.QueriesStatusHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteQueriesImplHcQueriesStatusHealthCheck(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("hc.tags") List<String> hcTags,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteQueriesImplHcQueriesStatusHealthCheck(post,apply,delete,action,$location,propertylist,hcTags,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.queries.impl.hc.QueryHealthCheckMetrics")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteQueriesImplHcQueryHealthCheckMetrics(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("getPeriod") Integer getPeriod,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteQueriesImplHcQueryHealthCheckMetrics(post,apply,delete,action,$location,propertylist,getPeriod,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.queries.impl.hc.QueryLimitsHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteQueriesImplHcQueryLimitsHealthCheck(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("hc.tags") List<String> hcTags,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteQueriesImplHcQueryLimitsHealthCheck(post,apply,delete,action,$location,propertylist,hcTags,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationQueueHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteReplicationHcImplReplicationQueueHealthCheck(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("number.of.retries.allowed") Integer numberOfRetriesAllowed,  @QueryParam("hc.tags") List<String> hcTags,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteReplicationHcImplReplicationQueueHealthCheck(post,apply,delete,action,$location,propertylist,numberOfRetriesAllowed,hcTags,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationTransportUsersHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("hc.tags") List<String> hcTags,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC(post,apply,delete,action,$location,propertylist,hcTags,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.repository.hc.impl.AuthorizableNodeNameHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("hc.tags") List<String> hcTags,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck(post,apply,delete,action,$location,propertylist,hcTags,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.repository.hc.impl.content.sling.SlingContentHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("hc.tags") List<String> hcTags,  @QueryParam("exclude.search.path") List<String> excludeSearchPath,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC(post,apply,delete,action,$location,propertylist,hcTags,excludeSearchPath,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.repository.hc.impl.ContinuousRGCHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("hc.tags") List<String> hcTags,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck(post,apply,delete,action,$location,propertylist,hcTags,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultAccessUserProfileHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("hc.tags") List<String> hcTags,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe(post,apply,delete,action,$location,propertylist,hcTags,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultLoginsHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("hc.tags") List<String> hcTags,  @QueryParam("account.logins") List<String> accountLogins,  @QueryParam("console.logins") List<String> consoleLogins,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck(post,apply,delete,action,$location,propertylist,hcTags,accountLogins,consoleLogins,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.repository.hc.impl.DiskSpaceHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("hc.tags") List<String> hcTags,  @QueryParam("disk.space.warn.threshold") Integer diskSpaceWarnThreshold,  @QueryParam("disk.space.error.threshold") Integer diskSpaceErrorThreshold,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck(post,apply,delete,action,$location,propertylist,hcTags,diskSpaceWarnThreshold,diskSpaceErrorThreshold,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.repository.hc.impl.ObservationQueueLengthHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("hc.tags") List<String> hcTags,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck(post,apply,delete,action,$location,propertylist,hcTags,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.repository.impl.CommitStatsConfig")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteRepositoryImplCommitStatsConfigInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteRepositoryImplCommitStatsConfigInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteRepositoryImplCommitStatsConfig(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("enabled") Boolean enabled,  @QueryParam("intervalSeconds") Integer intervalSeconds,  @QueryParam("commitsPerIntervalThreshold") Integer commitsPerIntervalThreshold,  @QueryParam("maxLocationLength") Integer maxLocationLength,  @QueryParam("maxDetailsShown") Integer maxDetailsShown,  @QueryParam("minDetailsPercentage") Integer minDetailsPercentage,  @QueryParam("threadMatchers") List<String> threadMatchers,  @QueryParam("maxGreedyDepth") Integer maxGreedyDepth,  @QueryParam("greedyStackMatchers") String greedyStackMatchers,  @QueryParam("stackFilters") List<String> stackFilters,  @QueryParam("stackMatchers") List<String> stackMatchers,  @QueryParam("stackCategorizers") List<String> stackCategorizers,  @QueryParam("stackShorteners") List<String> stackShorteners,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteRepositoryImplCommitStatsConfig(post,apply,delete,action,$location,propertylist,enabled,intervalSeconds,commitsPerIntervalThreshold,maxLocationLength,maxDetailsShown,minDetailsPercentage,threadMatchers,maxGreedyDepth,greedyStackMatchers,stackFilters,stackMatchers,stackCategorizers,stackShorteners,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.repository.ServiceUserConfiguration")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteRepositoryServiceUserConfigurationInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteRepositoryServiceUserConfigurationInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteRepositoryServiceUserConfiguration(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("service.ranking") Integer serviceRanking,  @QueryParam("serviceusers.simpleSubjectPopulation") Boolean serviceusersSimpleSubjectPopulation,  @QueryParam("serviceusers.list") List<String> serviceusersList,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteRepositoryServiceUserConfiguration(post,apply,delete,action,$location,propertylist,serviceRanking,serviceusersSimpleSubjectPopulation,serviceusersList,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.requests.logging.impl.hc.RequestsStatusHealthCheckImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("hc.tags") List<String> hcTags,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm(post,apply,delete,action,$location,propertylist,hcTags,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.resourcestatus.impl.CompositeStatusType")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteResourcestatusImplCompositeStatusType(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("name") String name,  @QueryParam("types") List<String> types,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteResourcestatusImplCompositeStatusType(post,apply,delete,action,$location,propertylist,name,types,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.resourcestatus.impl.StatusResourceProviderImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteResourcestatusImplStatusResourceProviderImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("provider.root") String providerRoot,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteResourcestatusImplStatusResourceProviderImpl(post,apply,delete,action,$location,propertylist,providerRoot,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.rest.assets.impl.AssetContentDispositionFilter")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteRestAssetsImplAssetContentDispositionFilter(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("mime.allowEmpty") Boolean mimeAllowEmpty,  @QueryParam("mime.allowed") List<String> mimeAllowed,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteRestAssetsImplAssetContentDispositionFilter(post,apply,delete,action,$location,propertylist,mimeAllowEmpty,mimeAllowed,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.rest.impl.ApiEndpointResourceProviderFactoryImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("provider.roots") String providerRoots,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl(post,apply,delete,action,$location,propertylist,providerRoots,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.rest.impl.servlet.DefaultGETServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteRestImplServletDefaultGETServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteRestImplServletDefaultGETServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteRestImplServletDefaultGETServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("default.limit") Integer defaultLimit,  @QueryParam("use.absolute.uri") Boolean useAbsoluteUri,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteRestImplServletDefaultGETServlet(post,apply,delete,action,$location,propertylist,defaultLimit,useAbsoluteUri,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.security.user.ui.internal.servlets.SSLConfigurationServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("hc.tags") List<String> hcTags,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS(post,apply,delete,action,$location,propertylist,hcTags,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.security.user.UserPropertiesService")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteSecurityUserUserPropertiesServiceInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteSecurityUserUserPropertiesServiceInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteSecurityUserUserPropertiesService(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("adapter.condition") String adapterCondition,  @QueryParam("granite.userproperties.nodetypes") List<String> graniteUserpropertiesNodetypes,  @QueryParam("granite.userproperties.resourcetypes") List<String> graniteUserpropertiesResourcetypes,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteSecurityUserUserPropertiesService(post,apply,delete,action,$location,propertylist,adapterCondition,graniteUserpropertiesNodetypes,graniteUserpropertiesResourcetypes,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.socialgraph.impl.SocialGraphFactoryImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteSocialgraphImplSocialGraphFactoryImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("group2member.relationship.outgoing") String group2memberRelationshipOutgoing,  @QueryParam("group2member.excluded.outgoing") List<String> group2memberExcludedOutgoing,  @QueryParam("group2member.relationship.incoming") String group2memberRelationshipIncoming,  @QueryParam("group2member.excluded.incoming") List<String> group2memberExcludedIncoming,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteSocialgraphImplSocialGraphFactoryImpl(post,apply,delete,action,$location,propertylist,group2memberRelationshipOutgoing,group2memberExcludedOutgoing,group2memberRelationshipIncoming,group2memberExcludedIncoming,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.system.monitoring.impl.SystemStatsMBeanImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("scheduler.expression") String schedulerExpression,  @QueryParam("jmx.objectname") String jmxObjectname,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl(post,apply,delete,action,$location,propertylist,schedulerExpression,jmxObjectname,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskAdapterFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("adapter.condition") String adapterCondition,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory(post,apply,delete,action,$location,propertylist,adapterCondition,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskArchiveService")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteTaskmanagementImplJcrTaskArchiveService(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("archiving.enabled") Boolean archivingEnabled,  @QueryParam("scheduler.expression") String schedulerExpression,  @QueryParam("archive.since.days.completed") Integer archiveSinceDaysCompleted,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteTaskmanagementImplJcrTaskArchiveService(post,apply,delete,action,$location,propertylist,archivingEnabled,schedulerExpression,archiveSinceDaysCompleted,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.taskmanagement.impl.purge.TaskPurgeMaintenanceTask")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("purgeCompleted") Boolean purgeCompleted,  @QueryParam("completedAge") Integer completedAge,  @QueryParam("purgeActive") Boolean purgeActive,  @QueryParam("activeAge") Integer activeAge,  @QueryParam("saveThreshold") Integer saveThreshold,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask(post,apply,delete,action,$location,propertylist,purgeCompleted,completedAge,purgeActive,activeAge,saveThreshold,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.taskmanagement.impl.service.TaskManagerAdapterFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("adapter.condition") String adapterCondition,  @QueryParam("taskmanager.admingroups") List<String> taskmanagerAdmingroups,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor(post,apply,delete,action,$location,propertylist,adapterCondition,taskmanagerAdmingroups,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.threaddump.ThreadDumpCollector")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteThreaddumpThreadDumpCollectorInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteThreaddumpThreadDumpCollectorInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteThreaddumpThreadDumpCollector(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("scheduler.period") Integer schedulerPeriod,  @QueryParam("scheduler.runOn") String schedulerRunOn,  @QueryParam("granite.threaddump.enabled") Boolean graniteThreaddumpEnabled,  @QueryParam("granite.threaddump.dumpsPerFile") Integer graniteThreaddumpDumpsPerFile,  @QueryParam("granite.threaddump.enableGzipCompression") Boolean graniteThreaddumpEnableGzipCompression,  @QueryParam("granite.threaddump.enableDirectoriesCompression") Boolean graniteThreaddumpEnableDirectoriesCompression,  @QueryParam("granite.threaddump.enableJStack") Boolean graniteThreaddumpEnableJStack,  @QueryParam("granite.threaddump.maxBackupDays") Integer graniteThreaddumpMaxBackupDays,  @QueryParam("granite.threaddump.backupCleanTrigger") String graniteThreaddumpBackupCleanTrigger,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteThreaddumpThreadDumpCollector(post,apply,delete,action,$location,propertylist,schedulerPeriod,schedulerRunOn,graniteThreaddumpEnabled,graniteThreaddumpDumpsPerFile,graniteThreaddumpEnableGzipCompression,graniteThreaddumpEnableDirectoriesCompression,graniteThreaddumpEnableJStack,graniteThreaddumpMaxBackupDays,graniteThreaddumpBackupCleanTrigger,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.translation.connector.msft.core.impl.MicrosoftTranslationServiceFactoryImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("translationFactory") String translationFactory,  @QueryParam("defaultConnectorLabel") String defaultConnectorLabel,  @QueryParam("defaultConnectorAttribution") String defaultConnectorAttribution,  @QueryParam("defaultConnectorWorkspaceId") String defaultConnectorWorkspaceId,  @QueryParam("defaultConnectorSubscriptionKey") String defaultConnectorSubscriptionKey,  @QueryParam("languageMapLocation") String languageMapLocation,  @QueryParam("categoryMapLocation") String categoryMapLocation,  @QueryParam("retryAttempts") Integer retryAttempts,  @QueryParam("timeoutCount") Integer timeoutCount,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl(post,apply,delete,action,$location,propertylist,translationFactory,defaultConnectorLabel,defaultConnectorAttribution,defaultConnectorWorkspaceId,defaultConnectorSubscriptionKey,languageMapLocation,categoryMapLocation,retryAttempts,timeoutCount,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.translation.core.impl.TranslationManagerImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteTranslationCoreImplTranslationManagerImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("defaultConnectorName") String defaultConnectorName,  @QueryParam("defaultCategory") String defaultCategory,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteTranslationCoreImplTranslationManagerImpl(post,apply,delete,action,$location,propertylist,defaultConnectorName,defaultCategory,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.ui.clientlibs.impl.HtmlLibraryManagerImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("htmllibmanager.timing") Boolean htmllibmanagerTiming,  @QueryParam("htmllibmanager.debug.init.js") String htmllibmanagerDebugInitJs,  @QueryParam("htmllibmanager.minify") Boolean htmllibmanagerMinify,  @QueryParam("htmllibmanager.debug") Boolean htmllibmanagerDebug,  @QueryParam("htmllibmanager.gzip") Boolean htmllibmanagerGzip,  @QueryParam("htmllibmanager.maxDataUriSize") Integer htmllibmanagerMaxDataUriSize,  @QueryParam("htmllibmanager.maxage") Integer htmllibmanagerMaxage,  @QueryParam("htmllibmanager.forceCQUrlInfo") Boolean htmllibmanagerForceCQUrlInfo,  @QueryParam("htmllibmanager.defaultthemename") String htmllibmanagerDefaultthemename,  @QueryParam("htmllibmanager.defaultuserthemename") String htmllibmanagerDefaultuserthemename,  @QueryParam("htmllibmanager.clientmanager") String htmllibmanagerClientmanager,  @QueryParam("htmllibmanager.path.list") List<String> htmllibmanagerPathList,  @QueryParam("htmllibmanager.excluded.path.list") List<String> htmllibmanagerExcludedPathList,  @QueryParam("htmllibmanager.processor.js") List<String> htmllibmanagerProcessorJs,  @QueryParam("htmllibmanager.processor.css") List<String> htmllibmanagerProcessorCss,  @QueryParam("htmllibmanager.longcache.patterns") List<String> htmllibmanagerLongcachePatterns,  @QueryParam("htmllibmanager.longcache.format") String htmllibmanagerLongcacheFormat,  @QueryParam("htmllibmanager.useFileSystemOutputCache") Boolean htmllibmanagerUseFileSystemOutputCache,  @QueryParam("htmllibmanager.fileSystemOutputCacheLocation") String htmllibmanagerFileSystemOutputCacheLocation,  @QueryParam("htmllibmanager.disable.replacement") List<String> htmllibmanagerDisableReplacement,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl(post,apply,delete,action,$location,propertylist,htmllibmanagerTiming,htmllibmanagerDebugInitJs,htmllibmanagerMinify,htmllibmanagerDebug,htmllibmanagerGzip,htmllibmanagerMaxDataUriSize,htmllibmanagerMaxage,htmllibmanagerForceCQUrlInfo,htmllibmanagerDefaultthemename,htmllibmanagerDefaultuserthemename,htmllibmanagerClientmanager,htmllibmanagerPathList,htmllibmanagerExcludedPathList,htmllibmanagerProcessorJs,htmllibmanagerProcessorCss,htmllibmanagerLongcachePatterns,htmllibmanagerLongcacheFormat,htmllibmanagerUseFileSystemOutputCache,htmllibmanagerFileSystemOutputCacheLocation,htmllibmanagerDisableReplacement,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.workflow.console.frags.WorkflowWithdrawFeature")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("enabled") Boolean enabled,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature(post,apply,delete,action,$location,propertylist,enabled,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.workflow.console.publish.WorkflowPublishEventService")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("granite.workflow.WorkflowPublishEventService.enabled") Boolean graniteWorkflowWorkflowPublishEventServiceEnabled,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService(post,apply,delete,action,$location,propertylist,graniteWorkflowWorkflowPublishEventServiceEnabled,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.workflow.core.jcr.WorkflowBucketManager")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteWorkflowCoreJcrWorkflowBucketManager(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("bucketSize") Integer bucketSize,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteWorkflowCoreJcrWorkflowBucketManager(post,apply,delete,action,$location,propertylist,bucketSize,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.workflow.core.job.ExternalProcessJobHandler")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteWorkflowCoreJobExternalProcessJobHandler(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("default.timeout") Integer defaultTimeout,  @QueryParam("max.timeout") Integer maxTimeout,  @QueryParam("default.period") Integer defaultPeriod,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteWorkflowCoreJobExternalProcessJobHandler(post,apply,delete,action,$location,propertylist,defaultTimeout,maxTimeout,defaultPeriod,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.workflow.core.job.JobHandler")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteWorkflowCoreJobJobHandlerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteWorkflowCoreJobJobHandlerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteWorkflowCoreJobJobHandler(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("job.topics") List<String> jobTopics,  @QueryParam("allow.self.process.termination") Boolean allowSelfProcessTermination,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteWorkflowCoreJobJobHandler(post,apply,delete,action,$location,propertylist,jobTopics,allowSelfProcessTermination,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.workflow.core.offloading.WorkflowOffloadingJobConsumer")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("job.topics") String jobTopics,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum(post,apply,delete,action,$location,propertylist,jobTopics,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.workflow.core.PayloadMapCache")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteWorkflowCorePayloadMapCacheInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteWorkflowCorePayloadMapCacheInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteWorkflowCorePayloadMapCache(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("getSystemWorkflowModels") List<String> getSystemWorkflowModels,  @QueryParam("getPackageRootPath") String getPackageRootPath,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteWorkflowCorePayloadMapCache(post,apply,delete,action,$location,propertylist,getSystemWorkflowModels,getPackageRootPath,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.workflow.core.payloadmap.PayloadMoveListener")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("payload.move.white.list") List<String> payloadMoveWhiteList,  @QueryParam("payload.move.handle.from.workflow.process") Boolean payloadMoveHandleFromWorkflowProcess,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener(post,apply,delete,action,$location,propertylist,payloadMoveWhiteList,payloadMoveHandleFromWorkflowProcess,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.workflow.core.WorkflowConfig")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteWorkflowCoreWorkflowConfigInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteWorkflowCoreWorkflowConfigInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteWorkflowCoreWorkflowConfig(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.workflow.config.workflow.packages.root.path") List<String> cqWorkflowConfigWorkflowPackagesRootPath,  @QueryParam("cq.workflow.config.workflow.process.legacy.mode") Boolean cqWorkflowConfigWorkflowProcessLegacyMode,  @QueryParam("cq.workflow.config.allow.locking") Boolean cqWorkflowConfigAllowLocking,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteWorkflowCoreWorkflowConfig(post,apply,delete,action,$location,propertylist,cqWorkflowConfigWorkflowPackagesRootPath,cqWorkflowConfigWorkflowProcessLegacyMode,cqWorkflowConfigAllowLocking,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.workflow.core.WorkflowSessionFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteWorkflowCoreWorkflowSessionFactory(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("granite.workflowinbox.sort.propertyName") String graniteWorkflowinboxSortPropertyName,  @QueryParam("granite.workflowinbox.sort.order") String graniteWorkflowinboxSortOrder,  @QueryParam("cq.workflow.job.retry") Integer cqWorkflowJobRetry,  @QueryParam("cq.workflow.superuser") List<String> cqWorkflowSuperuser,  @QueryParam("granite.workflow.inboxQuerySize") Integer graniteWorkflowInboxQuerySize,  @QueryParam("granite.workflow.adminUserGroupFilter") Boolean graniteWorkflowAdminUserGroupFilter,  @QueryParam("granite.workflow.enforceWorkitemAssigneePermissions") Boolean graniteWorkflowEnforceWorkitemAssigneePermissions,  @QueryParam("granite.workflow.enforceWorkflowInitiatorPermissions") Boolean graniteWorkflowEnforceWorkflowInitiatorPermissions,  @QueryParam("granite.workflow.injectTenantIdInJobTopics") Boolean graniteWorkflowInjectTenantIdInJobTopics,  @QueryParam("granite.workflow.maxPurgeSaveThreshold") Integer graniteWorkflowMaxPurgeSaveThreshold,  @QueryParam("granite.workflow.maxPurgeQueryCount") Integer graniteWorkflowMaxPurgeQueryCount,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteWorkflowCoreWorkflowSessionFactory(post,apply,delete,action,$location,propertylist,graniteWorkflowinboxSortPropertyName,graniteWorkflowinboxSortOrder,cqWorkflowJobRetry,cqWorkflowSuperuser,graniteWorkflowInboxQuerySize,graniteWorkflowAdminUserGroupFilter,graniteWorkflowEnforceWorkitemAssigneePermissions,graniteWorkflowEnforceWorkflowInitiatorPermissions,graniteWorkflowInjectTenantIdInJobTopics,graniteWorkflowMaxPurgeSaveThreshold,graniteWorkflowMaxPurgeQueryCount,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.granite.workflow.purge.Scheduler")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeGraniteWorkflowPurgeSchedulerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteWorkflowPurgeSchedulerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeGraniteWorkflowPurgeScheduler(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("scheduledpurge.name") String scheduledpurgeName,  @QueryParam("scheduledpurge.workflowStatus") String scheduledpurgeWorkflowStatus,  @QueryParam("scheduledpurge.modelIds") List<String> scheduledpurgeModelIds,  @QueryParam("scheduledpurge.daysold") Integer scheduledpurgeDaysold,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeGraniteWorkflowPurgeScheduler(post,apply,delete,action,$location,propertylist,scheduledpurgeName,scheduledpurgeWorkflowStatus,scheduledpurgeModelIds,scheduledpurgeDaysold,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.octopus.ncomm.bootstrap")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeOctopusNcommBootstrapInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeOctopusNcommBootstrapInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeOctopusNcommBootstrap(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("maxConnections") Integer maxConnections,  @QueryParam("maxRequests") Integer maxRequests,  @QueryParam("requestTimeout") Integer requestTimeout,  @QueryParam("requestRetries") Integer requestRetries,  @QueryParam("launchTimeout") Integer launchTimeout,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeOctopusNcommBootstrap(post,apply,delete,action,$location,propertylist,maxConnections,maxRequests,requestTimeout,requestRetries,launchTimeout,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.social.integrations.livefyre.user.pingforpull.impl.PingPullServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("communities.integration.livefyre.sling.event.filter") String communitiesIntegrationLivefyreSlingEventFilter,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS(post,apply,delete,action,$location,propertylist,communitiesIntegrationLivefyreSlingEventFilter,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.adobe.xmp.worker.files.ncomm.XMPFilesNComm")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comAdobeXmpWorkerFilesNcommXMPFilesNComm(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("maxConnections") String maxConnections,  @QueryParam("maxRequests") String maxRequests,  @QueryParam("requestTimeout") String requestTimeout,  @QueryParam("logDir") String logDir,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comAdobeXmpWorkerFilesNcommXMPFilesNComm(post,apply,delete,action,$location,propertylist,maxConnections,maxRequests,requestTimeout,logDir,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.commons.datasource.jdbcpool.JdbcPoolService")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCommonsDatasourceJdbcpoolJdbcPoolService(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("jdbc.driver.class") String jdbcDriverClass,  @QueryParam("jdbc.connection.uri") String jdbcConnectionUri,  @QueryParam("jdbc.username") String jdbcUsername,  @QueryParam("jdbc.password") String jdbcPassword,  @QueryParam("jdbc.validation.query") String jdbcValidationQuery,  @QueryParam("default.readonly") Boolean defaultReadonly,  @QueryParam("default.autocommit") Boolean defaultAutocommit,  @QueryParam("pool.size") Integer poolSize,  @QueryParam("pool.max.wait.msec") Integer poolMaxWaitMsec,  @QueryParam("datasource.name") String datasourceName,  @QueryParam("datasource.svc.properties") List<String> datasourceSvcProperties,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCommonsDatasourceJdbcpoolJdbcPoolService(post,apply,delete,action,$location,propertylist,jdbcDriverClass,jdbcConnectionUri,jdbcUsername,jdbcPassword,jdbcValidationQuery,defaultReadonly,defaultAutocommit,poolSize,poolMaxWaitMsec,datasourceName,datasourceSvcProperties,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.commons.httpclient")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCommonsHttpclientInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCommonsHttpclientInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCommonsHttpclient(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("proxy.enabled") Boolean proxyEnabled,  @QueryParam("proxy.host") String proxyHost,  @QueryParam("proxy.user") String proxyUser,  @QueryParam("proxy.password") String proxyPassword,  @QueryParam("proxy.ntlm.host") String proxyNtlmHost,  @QueryParam("proxy.ntlm.domain") String proxyNtlmDomain,  @QueryParam("proxy.exceptions") List<String> proxyExceptions,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCommonsHttpclient(post,apply,delete,action,$location,propertylist,proxyEnabled,proxyHost,proxyUser,proxyPassword,proxyNtlmHost,proxyNtlmDomain,proxyExceptions,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.analytics.impl.StorePropertiesChangeListener")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqAnalyticsImplStorePropertiesChangeListener(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.store.listener.additionalStorePaths") List<String> cqStoreListenerAdditionalStorePaths,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqAnalyticsImplStorePropertiesChangeListener(post,apply,delete,action,$location,propertylist,cqStoreListenerAdditionalStorePaths,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.exporter.ClassificationsExporter")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqAnalyticsSitecatalystImplExporterClassificationsExporte(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("allowed.paths") List<String> allowedPaths,  @QueryParam("cq.analytics.saint.exporter.pagesize") Integer cqAnalyticsSaintExporterPagesize,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqAnalyticsSitecatalystImplExporterClassificationsExporte(post,apply,delete,action,$location,propertylist,allowedPaths,cqAnalyticsSaintExporterPagesize,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.importer.ReportImporter")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqAnalyticsSitecatalystImplImporterReportImporter(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("report.fetch.attempts") Integer reportFetchAttempts,  @QueryParam("report.fetch.delay") Integer reportFetchDelay,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqAnalyticsSitecatalystImplImporterReportImporter(post,apply,delete,action,$location,propertylist,reportFetchAttempts,reportFetchDelay,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystAdapterFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.analytics.adapterfactory.contextstores") List<String> cqAnalyticsAdapterfactoryContextstores,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory(post,apply,delete,action,$location,propertylist,cqAnalyticsAdapterfactoryContextstores,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystHttpClientImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.analytics.sitecatalyst.service.datacenter.url") List<String> cqAnalyticsSitecatalystServiceDatacenterUrl,  @QueryParam("devhostnamepatterns") List<String> devhostnamepatterns,  @QueryParam("connection.timeout") Integer connectionTimeout,  @QueryParam("socket.timeout") Integer socketTimeout,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl(post,apply,delete,action,$location,propertylist,cqAnalyticsSitecatalystServiceDatacenterUrl,devhostnamepatterns,connectionTimeout,socketTimeout,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.analytics.testandtarget.impl.AccountOptionsUpdater")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqAnalyticsTestandtargetImplAccountOptionsUpdater(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.analytics.testandtarget.accountoptionsupdater.enabled") Boolean cqAnalyticsTestandtargetAccountoptionsupdaterEnabled,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqAnalyticsTestandtargetImplAccountOptionsUpdater(post,apply,delete,action,$location,propertylist,cqAnalyticsTestandtargetAccountoptionsupdaterEnabled,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.analytics.testandtarget.impl.DeleteAuthorActivityListener")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.analytics.testandtarget.deleteauthoractivitylistener.enabled") Boolean cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener(post,apply,delete,action,$location,propertylist,cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.analytics.testandtarget.impl.PushAuthorCampaignPageListener")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.analytics.testandtarget.pushauthorcampaignpagelistener.enabled") Boolean cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener(post,apply,delete,action,$location,propertylist,cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.analytics.testandtarget.impl.SegmentImporter")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqAnalyticsTestandtargetImplSegmentImporter(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.analytics.testandtarget.segmentimporter.enabled") Boolean cqAnalyticsTestandtargetSegmentimporterEnabled,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqAnalyticsTestandtargetImplSegmentImporter(post,apply,delete,action,$location,propertylist,cqAnalyticsTestandtargetSegmentimporterEnabled,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.analytics.testandtarget.impl.service.WebServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqAnalyticsTestandtargetImplServiceWebServiceImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("endpointUri") String endpointUri,  @QueryParam("connectionTimeout") Integer connectionTimeout,  @QueryParam("socketTimeout") Integer socketTimeout,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqAnalyticsTestandtargetImplServiceWebServiceImpl(post,apply,delete,action,$location,propertylist,endpointUri,connectionTimeout,socketTimeout,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.analytics.testandtarget.impl.servlets.AdminServerServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqAnalyticsTestandtargetImplServletsAdminServerServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("testandtarget.endpoint.url") String testandtargetEndpointUrl,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqAnalyticsTestandtargetImplServletsAdminServerServlet(post,apply,delete,action,$location,propertylist,testandtargetEndpointUrl,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.analytics.testandtarget.impl.TestandtargetHttpClientImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.analytics.testandtarget.api.url") String cqAnalyticsTestandtargetApiUrl,  @QueryParam("cq.analytics.testandtarget.timeout") Integer cqAnalyticsTestandtargetTimeout,  @QueryParam("cq.analytics.testandtarget.sockettimeout") Integer cqAnalyticsTestandtargetSockettimeout,  @QueryParam("cq.analytics.testandtarget.recommendations.url.replace") String cqAnalyticsTestandtargetRecommendationsUrlReplace,  @QueryParam("cq.analytics.testandtarget.recommendations.url.replacewith") String cqAnalyticsTestandtargetRecommendationsUrlReplacewith,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl(post,apply,delete,action,$location,propertylist,cqAnalyticsTestandtargetApiUrl,cqAnalyticsTestandtargetTimeout,cqAnalyticsTestandtargetSockettimeout,cqAnalyticsTestandtargetRecommendationsUrlReplace,cqAnalyticsTestandtargetRecommendationsUrlReplacewith,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.auth.impl.cug.CugSupportImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqAuthImplCugCugSupportImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqAuthImplCugCugSupportImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqAuthImplCugCugSupportImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cug.exempted.principals") List<String> cugExemptedPrincipals,  @QueryParam("cug.enabled") Boolean cugEnabled,  @QueryParam("cug.principals.regex") String cugPrincipalsRegex,  @QueryParam("cug.principals.replacement") String cugPrincipalsReplacement,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqAuthImplCugCugSupportImpl(post,apply,delete,action,$location,propertylist,cugExemptedPrincipals,cugEnabled,cugPrincipalsRegex,cugPrincipalsReplacement,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.auth.impl.LoginSelectorHandler")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqAuthImplLoginSelectorHandlerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqAuthImplLoginSelectorHandlerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqAuthImplLoginSelectorHandler(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("path") String path,  @QueryParam("service.ranking") Integer serviceRanking,  @QueryParam("auth.loginselector.mappings") List<String> authLoginselectorMappings,  @QueryParam("auth.loginselector.changepw.mappings") List<String> authLoginselectorChangepwMappings,  @QueryParam("auth.loginselector.defaultloginpage") String authLoginselectorDefaultloginpage,  @QueryParam("auth.loginselector.defaultchangepwpage") String authLoginselectorDefaultchangepwpage,  @QueryParam("auth.loginselector.handle") List<String> authLoginselectorHandle,  @QueryParam("auth.loginselector.handle.all.extensions") Boolean authLoginselectorHandleAllExtensions,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqAuthImplLoginSelectorHandler(post,apply,delete,action,$location,propertylist,path,serviceRanking,authLoginselectorMappings,authLoginselectorChangepwMappings,authLoginselectorDefaultloginpage,authLoginselectorDefaultchangepwpage,authLoginselectorHandle,authLoginselectorHandleAllExtensions,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.commons.impl.ExternalizerImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqCommonsImplExternalizerImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqCommonsImplExternalizerImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqCommonsImplExternalizerImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("externalizer.domains") List<String> externalizerDomains,  @QueryParam("externalizer.host") String externalizerHost,  @QueryParam("externalizer.contextpath") String externalizerContextpath,  @QueryParam("externalizer.encodedpath") Boolean externalizerEncodedpath,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqCommonsImplExternalizerImpl(post,apply,delete,action,$location,propertylist,externalizerDomains,externalizerHost,externalizerContextpath,externalizerEncodedpath,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.commons.servlets.RootMappingServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqCommonsServletsRootMappingServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqCommonsServletsRootMappingServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqCommonsServletsRootMappingServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("rootmapping.target") String rootmappingTarget,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqCommonsServletsRootMappingServlet(post,apply,delete,action,$location,propertylist,rootmappingTarget,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.compat.codeupgrade.impl.CodeUpgradeExecutionConditionChecker")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("codeupgradetasks") List<String> codeupgradetasks,  @QueryParam("codeupgradetaskfilters") List<String> codeupgradetaskfilters,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke(post,apply,delete,action,$location,propertylist,codeupgradetasks,codeupgradetaskfilters,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.compat.codeupgrade.impl.UpgradeTaskIgnoreList")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("upgradeTaskIgnoreList") List<String> upgradeTaskIgnoreList,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList(post,apply,delete,action,$location,propertylist,upgradeTaskIgnoreList,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.compat.codeupgrade.impl.VersionRangeTaskIgnorelist")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("effectiveBundleListPath") String effectiveBundleListPath,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist(post,apply,delete,action,$location,propertylist,effectiveBundleListPath,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.contentsync.impl.ContentSyncManagerImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqContentsyncImplContentSyncManagerImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqContentsyncImplContentSyncManagerImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqContentsyncImplContentSyncManagerImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("contentsync.fallback.authorizable") String contentsyncFallbackAuthorizable,  @QueryParam("contentsync.fallback.updateuser") String contentsyncFallbackUpdateuser,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqContentsyncImplContentSyncManagerImpl(post,apply,delete,action,$location,propertylist,contentsyncFallbackAuthorizable,contentsyncFallbackUpdateuser,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.commons.handler.StandardImageHandler")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamCommonsHandlerStandardImageHandlerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCommonsHandlerStandardImageHandlerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCommonsHandlerStandardImageHandler(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("large_file_threshold") Integer largeFileThreshold,  @QueryParam("large_comment_threshold") Integer largeCommentThreshold,  @QueryParam("cq.dam.enable.ext.meta.extraction") Boolean cqDamEnableExtMetaExtraction,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamCommonsHandlerStandardImageHandler(post,apply,delete,action,$location,propertylist,largeFileThreshold,largeCommentThreshold,cqDamEnableExtMetaExtraction,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.commons.metadata.XmpFilterBlackWhite")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCommonsMetadataXmpFilterBlackWhite(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("xmp.filter.apply_whitelist") Boolean xmpFilterApplyWhitelist,  @QueryParam("xmp.filter.whitelist") List<String> xmpFilterWhitelist,  @QueryParam("xmp.filter.apply_blacklist") Boolean xmpFilterApplyBlacklist,  @QueryParam("xmp.filter.blacklist") List<String> xmpFilterBlacklist,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamCommonsMetadataXmpFilterBlackWhite(post,apply,delete,action,$location,propertylist,xmpFilterApplyWhitelist,xmpFilterWhitelist,xmpFilterApplyBlacklist,xmpFilterBlacklist,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.commons.util.impl.AssetCacheImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamCommonsUtilImplAssetCacheImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCommonsUtilImplAssetCacheImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCommonsUtilImplAssetCacheImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("large.file.min") Integer largeFileMin,  @QueryParam("cache.apply") Boolean cacheApply,  @QueryParam("mime.types") List<String> mimeTypes,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamCommonsUtilImplAssetCacheImpl(post,apply,delete,action,$location,propertylist,largeFileMin,cacheApply,mimeTypes,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.annotation.pdf.AnnotationPdfConfig")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.dam.config.annotation.pdf.document.width") Integer cqDamConfigAnnotationPdfDocumentWidth,  @QueryParam("cq.dam.config.annotation.pdf.document.height") Integer cqDamConfigAnnotationPdfDocumentHeight,  @QueryParam("cq.dam.config.annotation.pdf.document.padding.horizontal") Integer cqDamConfigAnnotationPdfDocumentPaddingHorizontal,  @QueryParam("cq.dam.config.annotation.pdf.document.padding.vertical") Integer cqDamConfigAnnotationPdfDocumentPaddingVertical,  @QueryParam("cq.dam.config.annotation.pdf.font.size") Integer cqDamConfigAnnotationPdfFontSize,  @QueryParam("cq.dam.config.annotation.pdf.font.color") String cqDamConfigAnnotationPdfFontColor,  @QueryParam("cq.dam.config.annotation.pdf.font.family") String cqDamConfigAnnotationPdfFontFamily,  @QueryParam("cq.dam.config.annotation.pdf.font.light") String cqDamConfigAnnotationPdfFontLight,  @QueryParam("cq.dam.config.annotation.pdf.marginTextImage") Integer cqDamConfigAnnotationPdfMarginTextImage,  @QueryParam("cq.dam.config.annotation.pdf.minImageHeight") Integer cqDamConfigAnnotationPdfMinImageHeight,  @QueryParam("cq.dam.config.annotation.pdf.reviewStatus.width") Integer cqDamConfigAnnotationPdfReviewStatusWidth,  @QueryParam("cq.dam.config.annotation.pdf.reviewStatus.color.approved") String cqDamConfigAnnotationPdfReviewStatusColorApproved,  @QueryParam("cq.dam.config.annotation.pdf.reviewStatus.color.rejected") String cqDamConfigAnnotationPdfReviewStatusColorRejected,  @QueryParam("cq.dam.config.annotation.pdf.reviewStatus.color.changesRequested") String cqDamConfigAnnotationPdfReviewStatusColorChangesRequested,  @QueryParam("cq.dam.config.annotation.pdf.annotationMarker.width") Integer cqDamConfigAnnotationPdfAnnotationMarkerWidth,  @QueryParam("cq.dam.config.annotation.pdf.asset.minheight") Integer cqDamConfigAnnotationPdfAssetMinheight,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig(post,apply,delete,action,$location,propertylist,cqDamConfigAnnotationPdfDocumentWidth,cqDamConfigAnnotationPdfDocumentHeight,cqDamConfigAnnotationPdfDocumentPaddingHorizontal,cqDamConfigAnnotationPdfDocumentPaddingVertical,cqDamConfigAnnotationPdfFontSize,cqDamConfigAnnotationPdfFontColor,cqDamConfigAnnotationPdfFontFamily,cqDamConfigAnnotationPdfFontLight,cqDamConfigAnnotationPdfMarginTextImage,cqDamConfigAnnotationPdfMinImageHeight,cqDamConfigAnnotationPdfReviewStatusWidth,cqDamConfigAnnotationPdfReviewStatusColorApproved,cqDamConfigAnnotationPdfReviewStatusColorRejected,cqDamConfigAnnotationPdfReviewStatusColorChangesRequested,cqDamConfigAnnotationPdfAnnotationMarkerWidth,cqDamConfigAnnotationPdfAssetMinheight,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.AssetMoveListener")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplAssetMoveListenerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplAssetMoveListenerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplAssetMoveListener(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("enabled") Boolean enabled,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamCoreImplAssetMoveListener(post,apply,delete,action,$location,propertylist,enabled,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.assethome.AssetHomePageConfiguration")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplAssethomeAssetHomePageConfiguration(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("isEnabled") Boolean isEnabled,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamCoreImplAssethomeAssetHomePageConfiguration(post,apply,delete,action,$location,propertylist,isEnabled,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.assetlinkshare.AdhocAssetShareProxyServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.dam.adhoc.asset.share.prezip.maxcontentsize") Integer cqDamAdhocAssetSharePrezipMaxcontentsize,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet(post,apply,delete,action,$location,propertylist,cqDamAdhocAssetSharePrezipMaxcontentsize,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.cache.CQBufferedImageCache")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplCacheCQBufferedImageCache(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.dam.image.cache.max.memory") Integer cqDamImageCacheMaxMemory,  @QueryParam("cq.dam.image.cache.max.age") Integer cqDamImageCacheMaxAge,  @QueryParam("cq.dam.image.cache.max.dimension") String cqDamImageCacheMaxDimension,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamCoreImplCacheCQBufferedImageCache(post,apply,delete,action,$location,propertylist,cqDamImageCacheMaxMemory,cqDamImageCacheMaxAge,cqDamImageCacheMaxDimension,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.DamChangeEventListener")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplDamChangeEventListenerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplDamChangeEventListenerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplDamChangeEventListener(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("changeeventlistener.observed.paths") List<String> changeeventlistenerObservedPaths,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamCoreImplDamChangeEventListener(post,apply,delete,action,$location,propertylist,changeeventlistenerObservedPaths,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.DamEventPurgeService")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplDamEventPurgeServiceInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplDamEventPurgeServiceInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplDamEventPurgeService(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("scheduler.expression") String schedulerExpression,  @QueryParam("maxSavedActivities") Integer maxSavedActivities,  @QueryParam("saveInterval") Integer saveInterval,  @QueryParam("enableActivityPurge") Boolean enableActivityPurge,  @QueryParam("eventTypes") String eventTypes,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamCoreImplDamEventPurgeService(post,apply,delete,action,$location,propertylist,schedulerExpression,maxSavedActivities,saveInterval,enableActivityPurge,eventTypes,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.DamEventRecorderImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplDamEventRecorderImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplDamEventRecorderImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplDamEventRecorderImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("event.filter") String eventFilter,  @QueryParam("event.queue.length") Integer eventQueueLength,  @QueryParam("eventrecorder.enabled") Boolean eventrecorderEnabled,  @QueryParam("eventrecorder.blacklist") List<String> eventrecorderBlacklist,  @QueryParam("eventrecorder.eventtypes") String eventrecorderEventtypes,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamCoreImplDamEventRecorderImpl(post,apply,delete,action,$location,propertylist,eventFilter,eventQueueLength,eventrecorderEnabled,eventrecorderBlacklist,eventrecorderEventtypes,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.event.DamEventAuditListener")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplEventDamEventAuditListenerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplEventDamEventAuditListenerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplEventDamEventAuditListener(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("event.filter") String eventFilter,  @QueryParam("enabled") Boolean enabled,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamCoreImplEventDamEventAuditListener(post,apply,delete,action,$location,propertylist,eventFilter,enabled,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.ExpiryNotificationJobImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplExpiryNotificationJobImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplExpiryNotificationJobImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplExpiryNotificationJobImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.dam.expiry.notification.scheduler.istimebased") Boolean cqDamExpiryNotificationSchedulerIstimebased,  @QueryParam("cq.dam.expiry.notification.scheduler.timebased.rule") String cqDamExpiryNotificationSchedulerTimebasedRule,  @QueryParam("cq.dam.expiry.notification.scheduler.period.rule") Integer cqDamExpiryNotificationSchedulerPeriodRule,  @QueryParam("send_email") Boolean sendEmail,  @QueryParam("asset_expired_limit") Integer assetExpiredLimit,  @QueryParam("prior_notification_seconds") Integer priorNotificationSeconds,  @QueryParam("cq.dam.expiry.notification.url.protocol") String cqDamExpiryNotificationUrlProtocol,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamCoreImplExpiryNotificationJobImpl(post,apply,delete,action,$location,propertylist,cqDamExpiryNotificationSchedulerIstimebased,cqDamExpiryNotificationSchedulerTimebasedRule,cqDamExpiryNotificationSchedulerPeriodRule,sendEmail,assetExpiredLimit,priorNotificationSeconds,cqDamExpiryNotificationUrlProtocol,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.foldermetadataschema.FolderMetadataSchemaFeatureFlag")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("isEnabled") Boolean isEnabled,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat(post,apply,delete,action,$location,propertylist,isEnabled,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.gfx.CommonsGfxRenderer")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplGfxCommonsGfxRendererInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplGfxCommonsGfxRendererInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplGfxCommonsGfxRenderer(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("skip.bufferedcache") Boolean skipBufferedcache,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamCoreImplGfxCommonsGfxRenderer(post,apply,delete,action,$location,propertylist,skipBufferedcache,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.handler.EPSFormatHandler")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplHandlerEPSFormatHandler(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("mimetype") String mimetype,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamCoreImplHandlerEPSFormatHandler(post,apply,delete,action,$location,propertylist,mimetype,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.handler.IndesignFormatHandler")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplHandlerIndesignFormatHandler(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("mimetype") List<String> mimetype,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamCoreImplHandlerIndesignFormatHandler(post,apply,delete,action,$location,propertylist,mimetype,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.handler.JpegHandler")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplHandlerJpegHandlerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplHandlerJpegHandlerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplHandlerJpegHandler(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.dam.enable.ext.meta.extraction") Boolean cqDamEnableExtMetaExtraction,  @QueryParam("large_file_threshold") Integer largeFileThreshold,  @QueryParam("large_comment_threshold") Integer largeCommentThreshold,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamCoreImplHandlerJpegHandler(post,apply,delete,action,$location,propertylist,cqDamEnableExtMetaExtraction,largeFileThreshold,largeCommentThreshold,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.handler.xmp.NCommXMPHandler")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplHandlerXmpNCommXMPHandler(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("xmphandler.cq.formats") List<String> xmphandlerCqFormats,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamCoreImplHandlerXmpNCommXMPHandler(post,apply,delete,action,$location,propertylist,xmphandlerCqFormats,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetIndexUpdateMonitor")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplJmxAssetIndexUpdateMonitor(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("jmx.objectname") String jmxObjectname,  @QueryParam("property.measure.enabled") Boolean propertyMeasureEnabled,  @QueryParam("property.name") String propertyName,  @QueryParam("property.max.wait.ms") Integer propertyMaxWaitMs,  @QueryParam("property.max.rate") BigDecimal propertyMaxRate,  @QueryParam("fulltext.measure.enabled") Boolean fulltextMeasureEnabled,  @QueryParam("fulltext.name") String fulltextName,  @QueryParam("fulltext.max.wait.ms") Integer fulltextMaxWaitMs,  @QueryParam("fulltext.max.rate") BigDecimal fulltextMaxRate,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamCoreImplJmxAssetIndexUpdateMonitor(post,apply,delete,action,$location,propertylist,jmxObjectname,propertyMeasureEnabled,propertyName,propertyMaxWaitMs,propertyMaxRate,fulltextMeasureEnabled,fulltextName,fulltextMaxWaitMs,fulltextMaxRate,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetMigrationMBeanImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplJmxAssetMigrationMBeanImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("jmx.objectname") String jmxObjectname,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamCoreImplJmxAssetMigrationMBeanImpl(post,apply,delete,action,$location,propertylist,jmxObjectname,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetUpdateMonitorImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplJmxAssetUpdateMonitorImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("jmx.objectname") String jmxObjectname,  @QueryParam("active") Boolean active,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamCoreImplJmxAssetUpdateMonitorImpl(post,apply,delete,action,$location,propertylist,jmxObjectname,active,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataexport.AsyncMetadataExportConfigProviderService")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("operation") String operation,  @QueryParam("emailEnabled") Boolean emailEnabled,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig(post,apply,delete,action,$location,propertylist,operation,emailEnabled,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataimport.AsyncMetadataImportConfigProviderService")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("operation") String operation,  @QueryParam("operationIcon") String operationIcon,  @QueryParam("topicName") String topicName,  @QueryParam("emailEnabled") Boolean emailEnabled,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig(post,apply,delete,action,$location,propertylist,operation,operationIcon,topicName,emailEnabled,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.lightbox.LightboxServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplLightboxLightboxServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplLightboxLightboxServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplLightboxLightboxServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("sling.servlet.paths") String slingServletPaths,  @QueryParam("sling.servlet.methods") List<String> slingServletMethods,  @QueryParam("cq.dam.enable.anonymous") Boolean cqDamEnableAnonymous,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamCoreImplLightboxLightboxServlet(post,apply,delete,action,$location,propertylist,slingServletPaths,slingServletMethods,cqDamEnableAnonymous,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.metadata.editor.SelectComponentHandler")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplMetadataEditorSelectComponentHandler(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("granite:data") List<String> graniteColonData,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamCoreImplMetadataEditorSelectComponentHandler(post,apply,delete,action,$location,propertylist,graniteColonData,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.mimeType.AssetUploadRestrictionHelper")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.dam.allow.all.mime") Boolean cqDamAllowAllMime,  @QueryParam("cq.dam.allowed.asset.mimes") List<String> cqDamAllowedAssetMimes,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper(post,apply,delete,action,$location,propertylist,cqDamAllowAllMime,cqDamAllowedAssetMimes,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.mimeType.DamMimeTypeServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.dam.detect.asset.mime.from.content") Boolean cqDamDetectAssetMimeFromContent,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl(post,apply,delete,action,$location,propertylist,cqDamDetectAssetMimeFromContent,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.MissingMetadataNotificationJob")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplMissingMetadataNotificationJobInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplMissingMetadataNotificationJobInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplMissingMetadataNotificationJob(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.dam.missingmetadata.notification.scheduler.istimebased") Boolean cqDamMissingmetadataNotificationSchedulerIstimebased,  @QueryParam("cq.dam.missingmetadata.notification.scheduler.timebased.rule") String cqDamMissingmetadataNotificationSchedulerTimebasedRule,  @QueryParam("cq.dam.missingmetadata.notification.scheduler.period.rule") Integer cqDamMissingmetadataNotificationSchedulerPeriodRule,  @QueryParam("cq.dam.missingmetadata.notification.recipient") String cqDamMissingmetadataNotificationRecipient,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamCoreImplMissingMetadataNotificationJob(post,apply,delete,action,$location,propertylist,cqDamMissingmetadataNotificationSchedulerIstimebased,cqDamMissingmetadataNotificationSchedulerTimebasedRule,cqDamMissingmetadataNotificationSchedulerPeriodRule,cqDamMissingmetadataNotificationRecipient,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.process.SendTransientWorkflowCompletedEmailProcess")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("process.label") String processLabel,  @QueryParam("Notify on Complete") Boolean notifyOnComplete,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr(post,apply,delete,action,$location,propertylist,processLabel,notifyOnComplete,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.process.TextExtractionProcess")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplProcessTextExtractionProcessInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplProcessTextExtractionProcessInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplProcessTextExtractionProcess(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("mimeTypes") List<String> mimeTypes,  @QueryParam("maxExtract") Integer maxExtract,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamCoreImplProcessTextExtractionProcess(post,apply,delete,action,$location,propertylist,mimeTypes,maxExtract,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.RenditionMakerImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplRenditionMakerImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplRenditionMakerImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplRenditionMakerImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("xmp.propagate") Boolean xmpPropagate,  @QueryParam("xmp.excludes") List<String> xmpExcludes,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamCoreImplRenditionMakerImpl(post,apply,delete,action,$location,propertylist,xmpPropagate,xmpExcludes,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.reports.ReportExportService")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplReportsReportExportServiceInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplReportsReportExportServiceInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplReportsReportExportService(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("queryBatchSize") Integer queryBatchSize,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamCoreImplReportsReportExportService(post,apply,delete,action,$location,propertylist,queryBatchSize,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.reports.ReportPurgeService")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplReportsReportPurgeServiceInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplReportsReportPurgeServiceInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplReportsReportPurgeService(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("scheduler.expression") String schedulerExpression,  @QueryParam("maxSavedReports") Integer maxSavedReports,  @QueryParam("timeDuration") Integer timeDuration,  @QueryParam("enableReportPurge") Boolean enableReportPurge,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamCoreImplReportsReportPurgeService(post,apply,delete,action,$location,propertylist,schedulerExpression,maxSavedReports,timeDuration,enableReportPurge,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetDownloadServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplServletAssetDownloadServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplServletAssetDownloadServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplServletAssetDownloadServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("enabled") Boolean enabled,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamCoreImplServletAssetDownloadServlet(post,apply,delete,action,$location,propertylist,enabled,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetStatusServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplServletAssetStatusServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplServletAssetStatusServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplServletAssetStatusServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.dam.batch.status.maxassets") Integer cqDamBatchStatusMaxassets,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamCoreImplServletAssetStatusServlet(post,apply,delete,action,$location,propertylist,cqDamBatchStatusMaxassets,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetXMPSearchServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplServletAssetXMPSearchServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplServletAssetXMPSearchServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplServletAssetXMPSearchServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.dam.batch.indesign.maxassets") Integer cqDamBatchIndesignMaxassets,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamCoreImplServletAssetXMPSearchServlet(post,apply,delete,action,$location,propertylist,cqDamBatchIndesignMaxassets,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.servlet.BatchMetadataServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplServletBatchMetadataServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplServletBatchMetadataServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplServletBatchMetadataServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.dam.batch.metadata.asset.default") List<String> cqDamBatchMetadataAssetDefault,  @QueryParam("cq.dam.batch.metadata.collection.default") List<String> cqDamBatchMetadataCollectionDefault,  @QueryParam("cq.dam.batch.metadata.maxresources") Integer cqDamBatchMetadataMaxresources,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamCoreImplServletBatchMetadataServlet(post,apply,delete,action,$location,propertylist,cqDamBatchMetadataAssetDefault,cqDamBatchMetadataCollectionDefault,cqDamBatchMetadataMaxresources,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.servlet.BinaryProviderServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplServletBinaryProviderServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplServletBinaryProviderServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplServletBinaryProviderServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("sling.servlet.resourceTypes") List<String> slingServletResourceTypes,  @QueryParam("sling.servlet.methods") List<String> slingServletMethods,  @QueryParam("cq.dam.drm.enable") Boolean cqDamDrmEnable,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamCoreImplServletBinaryProviderServlet(post,apply,delete,action,$location,propertylist,slingServletResourceTypes,slingServletMethods,cqDamDrmEnable,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplServletCollectionServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplServletCollectionServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplServletCollectionServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.dam.batch.collection.properties") List<String> cqDamBatchCollectionProperties,  @QueryParam("cq.dam.batch.collection.maxcollections") Integer cqDamBatchCollectionMaxcollections,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamCoreImplServletCollectionServlet(post,apply,delete,action,$location,propertylist,cqDamBatchCollectionProperties,cqDamBatchCollectionMaxcollections,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionsServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplServletCollectionsServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplServletCollectionsServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplServletCollectionsServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.dam.batch.collections.properties") List<String> cqDamBatchCollectionsProperties,  @QueryParam("cq.dam.batch.collections.limit") Integer cqDamBatchCollectionsLimit,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamCoreImplServletCollectionsServlet(post,apply,delete,action,$location,propertylist,cqDamBatchCollectionsProperties,cqDamBatchCollectionsLimit,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.servlet.CompanionServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplServletCompanionServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplServletCompanionServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplServletCompanionServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("More Info") String moreInfo,  @QueryParam("/mnt/overlay/dam/gui/content/assets/moreinfo.html/${path}") String slashMntSlashOverlaySlashDamSlashGuiSlashContentSlashAssetsSlashMoreinfoHtmlSlash$LeftCurlyBracketPathRightCurlyBracket,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamCoreImplServletCompanionServlet(post,apply,delete,action,$location,propertylist,moreInfo,slashMntSlashOverlaySlashDamSlashGuiSlashContentSlashAssetsSlashMoreinfoHtmlSlash$LeftCurlyBracketPathRightCurlyBracket,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.servlet.CreateAssetServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplServletCreateAssetServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplServletCreateAssetServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplServletCreateAssetServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("detect_duplicate") Boolean detectDuplicate,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamCoreImplServletCreateAssetServlet(post,apply,delete,action,$location,propertylist,detectDuplicate,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.servlet.DamContentDispositionFilter")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplServletDamContentDispositionFilterInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplServletDamContentDispositionFilterInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplServletDamContentDispositionFilter(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.mime.type.blacklist") List<String> cqMimeTypeBlacklist,  @QueryParam("cq.dam.empty.mime") Boolean cqDamEmptyMime,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamCoreImplServletDamContentDispositionFilter(post,apply,delete,action,$location,propertylist,cqMimeTypeBlacklist,cqDamEmptyMime,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.servlet.GuidLookupFilter")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplServletGuidLookupFilterInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplServletGuidLookupFilterInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplServletGuidLookupFilter(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.dam.core.guidlookupfilter.enabled") Boolean cqDamCoreGuidlookupfilterEnabled,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamCoreImplServletGuidLookupFilter(post,apply,delete,action,$location,propertylist,cqDamCoreGuidlookupfilterEnabled,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.servlet.HealthCheckServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplServletHealthCheckServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplServletHealthCheckServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplServletHealthCheckServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.dam.sync.workflow.id") String cqDamSyncWorkflowId,  @QueryParam("cq.dam.sync.folder.types") List<String> cqDamSyncFolderTypes,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamCoreImplServletHealthCheckServlet(post,apply,delete,action,$location,propertylist,cqDamSyncWorkflowId,cqDamSyncFolderTypes,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.servlet.MetadataGetServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplServletMetadataGetServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplServletMetadataGetServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplServletMetadataGetServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("sling.servlet.resourceTypes") String slingServletResourceTypes,  @QueryParam("sling.servlet.methods") String slingServletMethods,  @QueryParam("sling.servlet.extensions") String slingServletExtensions,  @QueryParam("sling.servlet.selectors") String slingServletSelectors,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamCoreImplServletMetadataGetServlet(post,apply,delete,action,$location,propertylist,slingServletResourceTypes,slingServletMethods,slingServletExtensions,slingServletSelectors,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.servlet.MultipleLicenseAcceptServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplServletMultipleLicenseAcceptServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.dam.drm.enable") Boolean cqDamDrmEnable,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamCoreImplServletMultipleLicenseAcceptServlet(post,apply,delete,action,$location,propertylist,cqDamDrmEnable,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.servlet.ResourceCollectionServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplServletResourceCollectionServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplServletResourceCollectionServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplServletResourceCollectionServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("sling.servlet.resourceTypes") List<String> slingServletResourceTypes,  @QueryParam("sling.servlet.methods") String slingServletMethods,  @QueryParam("sling.servlet.selectors") String slingServletSelectors,  @QueryParam("download.config") String downloadConfig,  @QueryParam("view.selector") String viewSelector,  @QueryParam("send_email") Boolean sendEmail,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamCoreImplServletResourceCollectionServlet(post,apply,delete,action,$location,propertylist,slingServletResourceTypes,slingServletMethods,slingServletSelectors,downloadConfig,viewSelector,sendEmail,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.ui.preview.FolderPreviewUpdaterImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("createPreviewEnabled") Boolean createPreviewEnabled,  @QueryParam("updatePreviewEnabled") Boolean updatePreviewEnabled,  @QueryParam("queueSize") Integer queueSize,  @QueryParam("folderPreviewRenditionRegex") String folderPreviewRenditionRegex,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl(post,apply,delete,action,$location,propertylist,createPreviewEnabled,updatePreviewEnabled,queueSize,folderPreviewRenditionRegex,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.impl.unzip.UnzipConfig")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamCoreImplUnzipUnzipConfigInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplUnzipUnzipConfigInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreImplUnzipUnzipConfig(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.dam.config.unzip.maxuncompressedsize") Integer cqDamConfigUnzipMaxuncompressedsize,  @QueryParam("cq.dam.config.unzip.encoding") String cqDamConfigUnzipEncoding,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamCoreImplUnzipUnzipConfig(post,apply,delete,action,$location,propertylist,cqDamConfigUnzipMaxuncompressedsize,cqDamConfigUnzipEncoding,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.process.ExifToolExtractMetadataProcess")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreProcessExifToolExtractMetadataProcess(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("process.label") String processLabel,  @QueryParam("cq.dam.enable.sha1") Boolean cqDamEnableSha1,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamCoreProcessExifToolExtractMetadataProcess(post,apply,delete,action,$location,propertylist,processLabel,cqDamEnableSha1,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.process.ExtractMetadataProcess")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamCoreProcessExtractMetadataProcessInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreProcessExtractMetadataProcessInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreProcessExtractMetadataProcess(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("process.label") String processLabel,  @QueryParam("cq.dam.enable.sha1") Boolean cqDamEnableSha1,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamCoreProcessExtractMetadataProcess(post,apply,delete,action,$location,propertylist,processLabel,cqDamEnableSha1,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.core.process.MetadataProcessorProcess")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamCoreProcessMetadataProcessorProcessInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreProcessMetadataProcessorProcessInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamCoreProcessMetadataProcessorProcess(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("process.label") String processLabel,  @QueryParam("cq.dam.enable.sha1") Boolean cqDamEnableSha1,  @QueryParam("cq.dam.metadata.xssprotected.properties") List<String> cqDamMetadataXssprotectedProperties,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamCoreProcessMetadataProcessorProcess(post,apply,delete,action,$location,propertylist,processLabel,cqDamEnableSha1,cqDamMetadataXssprotectedProperties,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.handler.ffmpeg.LocatorImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamHandlerFfmpegLocatorImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamHandlerFfmpegLocatorImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamHandlerFfmpegLocatorImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("executable.searchpath") List<String> executableSearchpath,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamHandlerFfmpegLocatorImpl(post,apply,delete,action,$location,propertylist,executableSearchpath,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.handler.gibson.fontmanager.impl.FontManagerServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("event.filter") String eventFilter,  @QueryParam("fontmgr.system.font.dir") List<String> fontmgrSystemFontDir,  @QueryParam("fontmgr.adobe.font.dir") String fontmgrAdobeFontDir,  @QueryParam("fontmgr.customer.font.dir") String fontmgrCustomerFontDir,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl(post,apply,delete,action,$location,propertylist,eventFilter,fontmgrSystemFontDir,fontmgrAdobeFontDir,fontmgrCustomerFontDir,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.handler.standard.pdf.PdfHandler")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamHandlerStandardPdfPdfHandlerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamHandlerStandardPdfPdfHandlerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamHandlerStandardPdfPdfHandler(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("raster.annotation") Boolean rasterAnnotation,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamHandlerStandardPdfPdfHandler(post,apply,delete,action,$location,propertylist,rasterAnnotation,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.handler.standard.ps.PostScriptHandler")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamHandlerStandardPsPostScriptHandlerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamHandlerStandardPsPostScriptHandlerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamHandlerStandardPsPostScriptHandler(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("raster.annotation") Boolean rasterAnnotation,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamHandlerStandardPsPostScriptHandler(post,apply,delete,action,$location,propertylist,rasterAnnotation,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.handler.standard.psd.PsdHandler")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamHandlerStandardPsdPsdHandlerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamHandlerStandardPsdPsdHandlerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamHandlerStandardPsdPsdHandler(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("large_file_threshold") Integer largeFileThreshold,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamHandlerStandardPsdPsdHandler(post,apply,delete,action,$location,propertylist,largeFileThreshold,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.ids.impl.IDSJobProcessor")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamIdsImplIDSJobProcessorInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamIdsImplIDSJobProcessorInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamIdsImplIDSJobProcessor(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("enable.multisession") Boolean enableMultisession,  @QueryParam("ids.cc.enable") Boolean idsCcEnable,  @QueryParam("enable.retry") Boolean enableRetry,  @QueryParam("enable.retry.scripterror") Boolean enableRetryScripterror,  @QueryParam("externalizer.domain.cqhost") String externalizerDomainCqhost,  @QueryParam("externalizer.domain.http") String externalizerDomainHttp,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamIdsImplIDSJobProcessor(post,apply,delete,action,$location,propertylist,enableMultisession,idsCcEnable,enableRetry,enableRetryScripterror,externalizerDomainCqhost,externalizerDomainHttp,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.ids.impl.IDSPoolManagerImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamIdsImplIDSPoolManagerImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamIdsImplIDSPoolManagerImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamIdsImplIDSPoolManagerImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("max.errors.to.blacklist") Integer maxErrorsToBlacklist,  @QueryParam("retry.interval.to.whitelist") Integer retryIntervalToWhitelist,  @QueryParam("connect.timeout") Integer connectTimeout,  @QueryParam("socket.timeout") Integer socketTimeout,  @QueryParam("process.label") String processLabel,  @QueryParam("connection.use.max") Integer connectionUseMax,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamIdsImplIDSPoolManagerImpl(post,apply,delete,action,$location,propertylist,maxErrorsToBlacklist,retryIntervalToWhitelist,connectTimeout,socketTimeout,processLabel,connectionUseMax,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.indd.impl.handler.IndesignXMPHandler")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamInddImplHandlerIndesignXMPHandler(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("process.label") String processLabel,  @QueryParam("extract.pages") Boolean extractPages,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamInddImplHandlerIndesignXMPHandler(post,apply,delete,action,$location,propertylist,processLabel,extractPages,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.indd.impl.servlet.SnippetCreationServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamInddImplServletSnippetCreationServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamInddImplServletSnippetCreationServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamInddImplServletSnippetCreationServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("snippetcreation.maxcollections") Integer snippetcreationMaxcollections,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamInddImplServletSnippetCreationServlet(post,apply,delete,action,$location,propertylist,snippetcreationMaxcollections,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.indd.process.INDDMediaExtractProcess")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamInddProcessINDDMediaExtractProcessInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamInddProcessINDDMediaExtractProcessInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamInddProcessINDDMediaExtractProcess(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("process.label") String processLabel,  @QueryParam("cq.dam.indd.pages.regex") String cqDamInddPagesRegex,  @QueryParam("ids.job.decoupled") Boolean idsJobDecoupled,  @QueryParam("ids.job.workflow.model") String idsJobWorkflowModel,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamInddProcessINDDMediaExtractProcess(post,apply,delete,action,$location,propertylist,processLabel,cqDamInddPagesRegex,idsJobDecoupled,idsJobWorkflowModel,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceDataHandlerImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("batch.commit.size") Integer batchCommitSize,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl(post,apply,delete,action,$location,propertylist,batchCommitSize,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceReportSyncJob")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamPerformanceInternalAssetPerformanceReportSyncJob(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("scheduler.expression") String schedulerExpression,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamPerformanceInternalAssetPerformanceReportSyncJob(post,apply,delete,action,$location,propertylist,schedulerExpression,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.pim.impl.sourcing.upload.process.ProductAssetsUploadProcess")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("delete.zip.file") Boolean deleteZipFile,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro(post,apply,delete,action,$location,propertylist,deleteZipFile,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.S7damDynamicMediaConfigEventListener")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.dam.s7dam.dynamicmediaconfigeventlistener.enabled") Boolean cqDamS7damDynamicmediaconfigeventlistenerEnabled,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven(post,apply,delete,action,$location,propertylist,cqDamS7damDynamicmediaconfigeventlistenerEnabled,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.SiteCatalystReportRunner")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("scheduler.expression") String schedulerExpression,  @QueryParam("scheduler.concurrent") Boolean schedulerConcurrent,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner(post,apply,delete,action,$location,propertylist,schedulerExpression,schedulerConcurrent,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetCreateHandler")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamS7damCommonPostServletsSetCreateHandler(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("sling.post.operation") String slingPostOperation,  @QueryParam("sling.servlet.methods") String slingServletMethods,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamS7damCommonPostServletsSetCreateHandler(post,apply,delete,action,$location,propertylist,slingPostOperation,slingServletMethods,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetModifyHandler")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamS7damCommonPostServletsSetModifyHandler(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("sling.post.operation") String slingPostOperation,  @QueryParam("sling.servlet.methods") String slingServletMethods,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamS7damCommonPostServletsSetModifyHandler(post,apply,delete,action,$location,propertylist,slingPostOperation,slingServletMethods,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.s7dam.common.process.VideoThumbnailDownloadProcess")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("process.label") String processLabel,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess(post,apply,delete,action,$location,propertylist,processLabel,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.s7dam.common.S7damDamChangeEventListener")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamS7damCommonS7damDamChangeEventListener(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.dam.s7dam.damchangeeventlistener.enabled") Boolean cqDamS7damDamchangeeventlistenerEnabled,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamS7damCommonS7damDamChangeEventListener(post,apply,delete,action,$location,propertylist,cqDamS7damDamchangeeventlistenerEnabled,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.s7dam.common.servlets.S7damProductInfoServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamS7damCommonServletsS7damProductInfoServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("sling.servlet.paths") String slingServletPaths,  @QueryParam("sling.servlet.methods") String slingServletMethods,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamS7damCommonServletsS7damProductInfoServlet(post,apply,delete,action,$location,propertylist,slingServletPaths,slingServletMethods,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.s7dam.common.video.impl.VideoProxyClientServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.dam.s7dam.videoproxyclientservice.multipartupload.minsize.name") Integer cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName,  @QueryParam("cq.dam.s7dam.videoproxyclientservice.multipartupload.partsize.name") Integer cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName,  @QueryParam("cq.dam.s7dam.videoproxyclientservice.multipartupload.numthread.name") Integer cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName,  @QueryParam("cq.dam.s7dam.videoproxyclientservice.http.readtimeout.name") Integer cqDamS7damVideoproxyclientserviceHttpReadtimeoutName,  @QueryParam("cq.dam.s7dam.videoproxyclientservice.http.connectiontimeout.name") Integer cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName,  @QueryParam("cq.dam.s7dam.videoproxyclientservice.http.maxretrycount.name") Integer cqDamS7damVideoproxyclientserviceHttpMaxretrycountName,  @QueryParam("cq.dam.s7dam.videoproxyclientservice.uploadprogress.interval.name") Integer cqDamS7damVideoproxyclientserviceUploadprogressIntervalName,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl(post,apply,delete,action,$location,propertylist,cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName,cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName,cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName,cqDamS7damVideoproxyclientserviceHttpReadtimeoutName,cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName,cqDamS7damVideoproxyclientserviceHttpMaxretrycountName,cqDamS7damVideoproxyclientserviceUploadprogressIntervalName,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.scene7.impl.Scene7APIClientImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamScene7ImplScene7APIClientImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamScene7ImplScene7APIClientImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamScene7ImplScene7APIClientImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.dam.scene7.apiclient.recordsperpage.nofilter.name") Integer cqDamScene7ApiclientRecordsperpageNofilterName,  @QueryParam("cq.dam.scene7.apiclient.recordsperpage.withfilter.name") Integer cqDamScene7ApiclientRecordsperpageWithfilterName,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamScene7ImplScene7APIClientImpl(post,apply,delete,action,$location,propertylist,cqDamScene7ApiclientRecordsperpageNofilterName,cqDamScene7ApiclientRecordsperpageWithfilterName,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.scene7.impl.Scene7AssetMimeTypeServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.dam.scene7.assetmimetypeservice.mapping") List<String> cqDamScene7AssetmimetypeserviceMapping,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl(post,apply,delete,action,$location,propertylist,cqDamScene7AssetmimetypeserviceMapping,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.scene7.impl.Scene7ConfigurationEventListener")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamScene7ImplScene7ConfigurationEventListener(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.dam.scene7.configurationeventlistener.enabled") Boolean cqDamScene7ConfigurationeventlistenerEnabled,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamScene7ImplScene7ConfigurationEventListener(post,apply,delete,action,$location,propertylist,cqDamScene7ConfigurationeventlistenerEnabled,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.scene7.impl.Scene7DamChangeEventListener")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamScene7ImplScene7DamChangeEventListener(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.dam.scene7.damchangeeventlistener.enabled") Boolean cqDamScene7DamchangeeventlistenerEnabled,  @QueryParam("cq.dam.scene7.damchangeeventlistener.observed.paths") List<String> cqDamScene7DamchangeeventlistenerObservedPaths,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamScene7ImplScene7DamChangeEventListener(post,apply,delete,action,$location,propertylist,cqDamScene7DamchangeeventlistenerEnabled,cqDamScene7DamchangeeventlistenerObservedPaths,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.scene7.impl.Scene7FlashTemplatesServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamScene7ImplScene7FlashTemplatesServiceImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("scene7FlashTemplates.rti") String scene7FlashTemplatesRti,  @QueryParam("scene7FlashTemplates.rsi") String scene7FlashTemplatesRsi,  @QueryParam("scene7FlashTemplates.rb") String scene7FlashTemplatesRb,  @QueryParam("scene7FlashTemplates.rurl") String scene7FlashTemplatesRurl,  @QueryParam("scene7FlashTemplate.urlFormatParameter") String scene7FlashTemplateUrlFormatParameter,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamScene7ImplScene7FlashTemplatesServiceImpl(post,apply,delete,action,$location,propertylist,scene7FlashTemplatesRti,scene7FlashTemplatesRsi,scene7FlashTemplatesRb,scene7FlashTemplatesRurl,scene7FlashTemplateUrlFormatParameter,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.scene7.impl.Scene7UploadServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamScene7ImplScene7UploadServiceImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamScene7ImplScene7UploadServiceImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamScene7ImplScene7UploadServiceImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.dam.scene7.uploadservice.activejobtimeout.label") Integer cqDamScene7UploadserviceActivejobtimeoutLabel,  @QueryParam("cq.dam.scene7.uploadservice.connectionmaxperroute.label") Integer cqDamScene7UploadserviceConnectionmaxperrouteLabel,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamScene7ImplScene7UploadServiceImpl(post,apply,delete,action,$location,propertylist,cqDamScene7UploadserviceActivejobtimeoutLabel,cqDamScene7UploadserviceConnectionmaxperrouteLabel,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.stock.integration.impl.cache.StockCacheConfigurationServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("getCacheExpirationUnit") String getCacheExpirationUnit,  @QueryParam("getCacheExpirationValue") Integer getCacheExpirationValue,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer(post,apply,delete,action,$location,propertylist,getCacheExpirationUnit,getCacheExpirationValue,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.stock.integration.impl.configuration.StockConfigurationImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamStockIntegrationImplConfigurationStockConfiguration(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("name") String name,  @QueryParam("locale") String locale,  @QueryParam("imsConfig") String imsConfig,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamStockIntegrationImplConfigurationStockConfiguration(post,apply,delete,action,$location,propertylist,name,locale,imsConfig,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.dam.video.impl.servlet.VideoTestServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqDamVideoImplServletVideoTestServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamVideoImplServletVideoTestServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqDamVideoImplServletVideoTestServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("enabled") Boolean enabled,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqDamVideoImplServletVideoTestServlet(post,apply,delete,action,$location,propertylist,enabled,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.extwidget.servlets.ImageSpriteServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqExtwidgetServletsImageSpriteServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqExtwidgetServletsImageSpriteServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqExtwidgetServletsImageSpriteServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("maxWidth") Integer maxWidth,  @QueryParam("maxHeight") Integer maxHeight,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqExtwidgetServletsImageSpriteServlet(post,apply,delete,action,$location,propertylist,maxWidth,maxHeight,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.image.internal.font.FontHelper")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqImageInternalFontFontHelperInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqImageInternalFontFontHelperInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqImageInternalFontFontHelper(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("fontpath") List<String> fontpath,  @QueryParam("oversamplingFactor") Integer oversamplingFactor,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqImageInternalFontFontHelper(post,apply,delete,action,$location,propertylist,fontpath,oversamplingFactor,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.jcrclustersupport.ClusterStartLevelController")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqJcrclustersupportClusterStartLevelControllerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqJcrclustersupportClusterStartLevelControllerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqJcrclustersupportClusterStartLevelController(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cluster.level.enable") Boolean clusterLevelEnable,  @QueryParam("cluster.master.level") Integer clusterMasterLevel,  @QueryParam("cluster.slave.level") Integer clusterSlaveLevel,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqJcrclustersupportClusterStartLevelController(post,apply,delete,action,$location,propertylist,clusterLevelEnable,clusterMasterLevel,clusterSlaveLevel,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.mailer.DefaultMailService")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqMailerDefaultMailServiceInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqMailerDefaultMailServiceInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqMailerDefaultMailService(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("smtp.host") String smtpHost,  @QueryParam("smtp.port") Integer smtpPort,  @QueryParam("smtp.user") String smtpUser,  @QueryParam("smtp.password") String smtpPassword,  @QueryParam("from.address") String fromAddress,  @QueryParam("smtp.ssl") Boolean smtpSsl,  @QueryParam("smtp.starttls") Boolean smtpStarttls,  @QueryParam("debug.email") Boolean debugEmail,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqMailerDefaultMailService(post,apply,delete,action,$location,propertylist,smtpHost,smtpPort,smtpUser,smtpPassword,fromAddress,smtpSsl,smtpStarttls,debugEmail,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.mailer.impl.CqMailingService")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqMailerImplCqMailingServiceInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqMailerImplCqMailingServiceInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqMailerImplCqMailingService(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("max.recipient.count") String maxRecipientCount,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqMailerImplCqMailingService(post,apply,delete,action,$location,propertylist,maxRecipientCount,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.mailer.impl.email.CqEmailTemplateFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqMailerImplEmailCqEmailTemplateFactory(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("mailer.email.charset") String mailerEmailCharset,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqMailerImplEmailCqEmailTemplateFactory(post,apply,delete,action,$location,propertylist,mailerEmailCharset,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.mailer.impl.email.CqRetrieverTemplateFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqMailerImplEmailCqRetrieverTemplateFactory(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("mailer.email.embed") Boolean mailerEmailEmbed,  @QueryParam("mailer.email.charset") String mailerEmailCharset,  @QueryParam("mailer.email.retrieverUserID") String mailerEmailRetrieverUserID,  @QueryParam("mailer.email.retrieverUserPWD") String mailerEmailRetrieverUserPWD,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqMailerImplEmailCqRetrieverTemplateFactory(post,apply,delete,action,$location,propertylist,mailerEmailEmbed,mailerEmailCharset,mailerEmailRetrieverUserID,mailerEmailRetrieverUserPWD,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.mcm.campaign.impl.IntegrationConfigImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqMcmCampaignImplIntegrationConfigImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqMcmCampaignImplIntegrationConfigImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqMcmCampaignImplIntegrationConfigImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("aem.mcm.campaign.formConstraints") List<String> aemMcmCampaignFormConstraints,  @QueryParam("aem.mcm.campaign.publicUrl") String aemMcmCampaignPublicUrl,  @QueryParam("aem.mcm.campaign.relaxedSSL") Boolean aemMcmCampaignRelaxedSSL,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqMcmCampaignImplIntegrationConfigImpl(post,apply,delete,action,$location,propertylist,aemMcmCampaignFormConstraints,aemMcmCampaignPublicUrl,aemMcmCampaignRelaxedSSL,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.mcm.campaign.importer.PersonalizedTextHandlerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqMcmCampaignImporterPersonalizedTextHandlerFactory(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("service.ranking") Integer serviceRanking,  @QueryParam("tagpattern") String tagpattern,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqMcmCampaignImporterPersonalizedTextHandlerFactory(post,apply,delete,action,$location,propertylist,serviceRanking,tagpattern,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.mcm.core.newsletter.NewsletterEmailServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqMcmCoreNewsletterNewsletterEmailServiceImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("from.address") String fromAddress,  @QueryParam("sender.host") String senderHost,  @QueryParam("max.bounce.count") String maxBounceCount,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqMcmCoreNewsletterNewsletterEmailServiceImpl(post,apply,delete,action,$location,propertylist,fromAddress,senderHost,maxBounceCount,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.mcm.impl.MCMConfiguration")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqMcmImplMCMConfigurationInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqMcmImplMCMConfigurationInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqMcmImplMCMConfiguration(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("experience.indirection") List<String> experienceIndirection,  @QueryParam("touchpoint.indirection") List<String> touchpointIndirection,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqMcmImplMCMConfiguration(post,apply,delete,action,$location,propertylist,experienceIndirection,touchpointIndirection,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.ClickThroughComponentTagHandlerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("service.ranking") Integer serviceRanking,  @QueryParam("tagpattern") String tagpattern,  @QueryParam("component.resourceType") String componentResourceType,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen(post,apply,delete,action,$location,propertylist,serviceRanking,tagpattern,componentResourceType,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.GraphicalClickThroughComponentTagHandlerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("service.ranking") Integer serviceRanking,  @QueryParam("tagpattern") String tagpattern,  @QueryParam("component.resourceType") String componentResourceType,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug(post,apply,delete,action,$location,propertylist,serviceRanking,tagpattern,componentResourceType,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.LeadFormCTAComponentTagHandlerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("service.ranking") Integer serviceRanking,  @QueryParam("tagpattern") String tagpattern,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent(post,apply,delete,action,$location,propertylist,serviceRanking,tagpattern,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.MBoxExperienceTagHandlerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("service.ranking") Integer serviceRanking,  @QueryParam("tagpattern") String tagpattern,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa(post,apply,delete,action,$location,propertylist,serviceRanking,tagpattern,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.TargetComponentTagHandlerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("service.ranking") Integer serviceRanking,  @QueryParam("tagpattern") String tagpattern,  @QueryParam("component.resourceType") String componentResourceType,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH(post,apply,delete,action,$location,propertylist,serviceRanking,tagpattern,componentResourceType,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.notification.impl.NotificationServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqNotificationImplNotificationServiceImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqNotificationImplNotificationServiceImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqNotificationImplNotificationServiceImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("event.filter") String eventFilter,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqNotificationImplNotificationServiceImpl(post,apply,delete,action,$location,propertylist,eventFilter,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.personalization.impl.servlets.TargetingConfigurationServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqPersonalizationImplServletsTargetingConfigurationServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("forcelocation") Boolean forcelocation,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqPersonalizationImplServletsTargetingConfigurationServlet(post,apply,delete,action,$location,propertylist,forcelocation,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollConfigImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqPollingImporterImplManagedPollConfigImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqPollingImporterImplManagedPollConfigImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqPollingImporterImplManagedPollConfigImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("id") String id,  @QueryParam("enabled") Boolean enabled,  @QueryParam("reference") Boolean reference,  @QueryParam("interval") Integer interval,  @QueryParam("expression") String expression,  @QueryParam("source") String source,  @QueryParam("target") String target,  @QueryParam("login") String login,  @QueryParam("password") String password,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqPollingImporterImplManagedPollConfigImpl(post,apply,delete,action,$location,propertylist,id,enabled,reference,interval,expression,source,target,login,password,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollingImporterImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqPollingImporterImplManagedPollingImporterImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqPollingImporterImplManagedPollingImporterImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqPollingImporterImplManagedPollingImporterImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("importer.user") String importerUser,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqPollingImporterImplManagedPollingImporterImpl(post,apply,delete,action,$location,propertylist,importerUser,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.polling.importer.impl.PollingImporterImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqPollingImporterImplPollingImporterImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqPollingImporterImplPollingImporterImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqPollingImporterImplPollingImporterImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("importer.min.interval") Integer importerMinInterval,  @QueryParam("importer.user") String importerUser,  @QueryParam("exclude.paths") List<String> excludePaths,  @QueryParam("include.paths") List<String> includePaths,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqPollingImporterImplPollingImporterImpl(post,apply,delete,action,$location,propertylist,importerMinInterval,importerUser,excludePaths,includePaths,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.replication.audit.ReplicationEventListener")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqReplicationAuditReplicationEventListenerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqReplicationAuditReplicationEventListenerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqReplicationAuditReplicationEventListener(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("service.ranking") Integer serviceRanking,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqReplicationAuditReplicationEventListener(post,apply,delete,action,$location,propertylist,serviceRanking,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.replication.content.StaticContentBuilder")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqReplicationContentStaticContentBuilderInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqReplicationContentStaticContentBuilderInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqReplicationContentStaticContentBuilder(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("host") String host,  @QueryParam("port") Integer port,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqReplicationContentStaticContentBuilder(post,apply,delete,action,$location,propertylist,host,port,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.replication.impl.AgentManagerImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqReplicationImplAgentManagerImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqReplicationImplAgentManagerImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqReplicationImplAgentManagerImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("job.topics") String jobTopics,  @QueryParam("serviceUser.target") String serviceUserTarget,  @QueryParam("agentProvider.target") String agentProviderTarget,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqReplicationImplAgentManagerImpl(post,apply,delete,action,$location,propertylist,jobTopics,serviceUserTarget,agentProviderTarget,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.replication.impl.content.durbo.BinaryLessContentBuilder")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqReplicationImplContentDurboBinaryLessContentBuilder(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("binary.threshold") Integer binaryThreshold,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqReplicationImplContentDurboBinaryLessContentBuilder(post,apply,delete,action,$location,propertylist,binaryThreshold,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.replication.impl.content.durbo.DurboImportConfigurationProviderService")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqReplicationImplContentDurboDurboImportConfigurationProv(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("preserve.hierarchy.nodes") Boolean preserveHierarchyNodes,  @QueryParam("ignore.versioning") Boolean ignoreVersioning,  @QueryParam("import.acl") Boolean importAcl,  @QueryParam("save.threshold") Integer saveThreshold,  @QueryParam("preserve.user.paths") Boolean preserveUserPaths,  @QueryParam("preserve.uuid") Boolean preserveUuid,  @QueryParam("preserve.uuid.nodetypes") List<String> preserveUuidNodetypes,  @QueryParam("preserve.uuid.subtrees") List<String> preserveUuidSubtrees,  @QueryParam("auto.commit") Boolean autoCommit,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqReplicationImplContentDurboDurboImportConfigurationProv(post,apply,delete,action,$location,propertylist,preserveHierarchyNodes,ignoreVersioning,importAcl,saveThreshold,preserveUserPaths,preserveUuid,preserveUuidNodetypes,preserveUuidSubtrees,autoCommit,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.replication.impl.ReplicationContentFactoryProviderImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqReplicationImplReplicationContentFactoryProviderImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("replication.content.useFileStorage") Boolean replicationContentUseFileStorage,  @QueryParam("replication.content.maxCommitAttempts") Integer replicationContentMaxCommitAttempts,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqReplicationImplReplicationContentFactoryProviderImpl(post,apply,delete,action,$location,propertylist,replicationContentUseFileStorage,replicationContentMaxCommitAttempts,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.replication.impl.ReplicationReceiverImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqReplicationImplReplicationReceiverImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqReplicationImplReplicationReceiverImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqReplicationImplReplicationReceiverImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("receiver.tmpfile.threshold") Integer receiverTmpfileThreshold,  @QueryParam("receiver.packages.use.install") Boolean receiverPackagesUseInstall,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqReplicationImplReplicationReceiverImpl(post,apply,delete,action,$location,propertylist,receiverTmpfileThreshold,receiverPackagesUseInstall,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.replication.impl.ReplicatorImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqReplicationImplReplicatorImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqReplicationImplReplicatorImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqReplicationImplReplicatorImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("distribute_events") Boolean distributeEvents,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqReplicationImplReplicatorImpl(post,apply,delete,action,$location,propertylist,distributeEvents,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.replication.impl.ReverseReplicator")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqReplicationImplReverseReplicatorInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqReplicationImplReverseReplicatorInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqReplicationImplReverseReplicator(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("scheduler.period") Integer schedulerPeriod,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqReplicationImplReverseReplicator(post,apply,delete,action,$location,propertylist,schedulerPeriod,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.replication.impl.transport.BinaryLessTransportHandler")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqReplicationImplTransportBinaryLessTransportHandler(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("disabled.cipher.suites") List<String> disabledCipherSuites,  @QueryParam("enabled.cipher.suites") List<String> enabledCipherSuites,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqReplicationImplTransportBinaryLessTransportHandler(post,apply,delete,action,$location,propertylist,disabledCipherSuites,enabledCipherSuites,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.replication.impl.transport.Http")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqReplicationImplTransportHttpInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqReplicationImplTransportHttpInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqReplicationImplTransportHttp(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("disabled.cipher.suites") List<String> disabledCipherSuites,  @QueryParam("enabled.cipher.suites") List<String> enabledCipherSuites,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqReplicationImplTransportHttp(post,apply,delete,action,$location,propertylist,disabledCipherSuites,enabledCipherSuites,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.reporting.impl.cache.CacheImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqReportingImplCacheCacheImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqReportingImplCacheCacheImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqReportingImplCacheCacheImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("repcache.enable") Boolean repcacheEnable,  @QueryParam("repcache.ttl") Integer repcacheTtl,  @QueryParam("repcache.max") Integer repcacheMax,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqReportingImplCacheCacheImpl(post,apply,delete,action,$location,propertylist,repcacheEnable,repcacheTtl,repcacheMax,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.reporting.impl.ConfigServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqReportingImplConfigServiceImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqReportingImplConfigServiceImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqReportingImplConfigServiceImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("repconf.timezone") String repconfTimezone,  @QueryParam("repconf.locale") String repconfLocale,  @QueryParam("repconf.snapshots") String repconfSnapshots,  @QueryParam("repconf.repdir") String repconfRepdir,  @QueryParam("repconf.hourofday") Integer repconfHourofday,  @QueryParam("repconf.minofhour") Integer repconfMinofhour,  @QueryParam("repconf.maxrows") Integer repconfMaxrows,  @QueryParam("repconf.fakedata") Boolean repconfFakedata,  @QueryParam("repconf.snapshotuser") String repconfSnapshotuser,  @QueryParam("repconf.enforcesnapshotuser") Boolean repconfEnforcesnapshotuser,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqReportingImplConfigServiceImpl(post,apply,delete,action,$location,propertylist,repconfTimezone,repconfLocale,repconfSnapshots,repconfRepdir,repconfHourofday,repconfMinofhour,repconfMaxrows,repconfFakedata,repconfSnapshotuser,repconfEnforcesnapshotuser,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.reporting.impl.RLogAnalyzer")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqReportingImplRLogAnalyzerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqReportingImplRLogAnalyzerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqReportingImplRLogAnalyzer(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("request.log.output") String requestLogOutput,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqReportingImplRLogAnalyzer(post,apply,delete,action,$location,propertylist,requestLogOutput,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqRewriterLinkcheckerImplLinkCheckerImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("scheduler.period") Integer schedulerPeriod,  @QueryParam("scheduler.concurrent") Boolean schedulerConcurrent,  @QueryParam("service.bad_link_tolerance_interval") Integer serviceBadLinkToleranceInterval,  @QueryParam("service.check_override_patterns") List<String> serviceCheckOverridePatterns,  @QueryParam("service.cache_broken_internal_links") Boolean serviceCacheBrokenInternalLinks,  @QueryParam("service.special_link_prefix") List<String> serviceSpecialLinkPrefix,  @QueryParam("service.special_link_patterns") List<String> serviceSpecialLinkPatterns,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqRewriterLinkcheckerImplLinkCheckerImpl(post,apply,delete,action,$location,propertylist,schedulerPeriod,schedulerConcurrent,serviceBadLinkToleranceInterval,serviceCheckOverridePatterns,serviceCacheBrokenInternalLinks,serviceSpecialLinkPrefix,serviceSpecialLinkPatterns,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTask")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqRewriterLinkcheckerImplLinkCheckerTask(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("scheduler.period") Integer schedulerPeriod,  @QueryParam("scheduler.concurrent") Boolean schedulerConcurrent,  @QueryParam("good_link_test_interval") Integer goodLinkTestInterval,  @QueryParam("bad_link_test_interval") Integer badLinkTestInterval,  @QueryParam("link_unused_interval") Integer linkUnusedInterval,  @QueryParam("connection.timeout") Integer connectionTimeout,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqRewriterLinkcheckerImplLinkCheckerTask(post,apply,delete,action,$location,propertylist,schedulerPeriod,schedulerConcurrent,goodLinkTestInterval,badLinkTestInterval,linkUnusedInterval,connectionTimeout,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTransformerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("linkcheckertransformer.disableRewriting") Boolean linkcheckertransformerDisableRewriting,  @QueryParam("linkcheckertransformer.disableChecking") Boolean linkcheckertransformerDisableChecking,  @QueryParam("linkcheckertransformer.mapCacheSize") Integer linkcheckertransformerMapCacheSize,  @QueryParam("linkcheckertransformer.strictExtensionCheck") Boolean linkcheckertransformerStrictExtensionCheck,  @QueryParam("linkcheckertransformer.stripHtmltExtension") Boolean linkcheckertransformerStripHtmltExtension,  @QueryParam("linkcheckertransformer.rewriteElements") List<String> linkcheckertransformerRewriteElements,  @QueryParam("linkcheckertransformer.stripExtensionPathBlacklist") List<String> linkcheckertransformerStripExtensionPathBlacklist,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory(post,apply,delete,action,$location,propertylist,linkcheckertransformerDisableRewriting,linkcheckertransformerDisableChecking,linkcheckertransformerMapCacheSize,linkcheckertransformerStrictExtensionCheck,linkcheckertransformerStripHtmltExtension,linkcheckertransformerRewriteElements,linkcheckertransformerStripExtensionPathBlacklist,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkInfoStorageImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqRewriterLinkcheckerImplLinkInfoStorageImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("service.max_links_per_host") Integer serviceMaxLinksPerHost,  @QueryParam("service.save_external_link_references") Boolean serviceSaveExternalLinkReferences,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqRewriterLinkcheckerImplLinkInfoStorageImpl(post,apply,delete,action,$location,propertylist,serviceMaxLinksPerHost,serviceSaveExternalLinkReferences,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.rewriter.processor.impl.HtmlParserFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqRewriterProcessorImplHtmlParserFactoryInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqRewriterProcessorImplHtmlParserFactoryInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqRewriterProcessorImplHtmlParserFactory(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("htmlparser.processTags") List<String> htmlparserProcessTags,  @QueryParam("htmlparser.preserveCamelCase") Boolean htmlparserPreserveCamelCase,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqRewriterProcessorImplHtmlParserFactory(post,apply,delete,action,$location,propertylist,htmlparserProcessTags,htmlparserPreserveCamelCase,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.search.impl.builder.QueryBuilderImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqSearchImplBuilderQueryBuilderImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqSearchImplBuilderQueryBuilderImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqSearchImplBuilderQueryBuilderImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("excerpt.properties") List<String> excerptProperties,  @QueryParam("cache.max.entries") Integer cacheMaxEntries,  @QueryParam("cache.entry.lifetime") Integer cacheEntryLifetime,  @QueryParam("xpath.union") Boolean xpathUnion,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqSearchImplBuilderQueryBuilderImpl(post,apply,delete,action,$location,propertylist,excerptProperties,cacheMaxEntries,cacheEntryLifetime,xpathUnion,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.search.suggest.impl.SuggestionIndexManagerImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqSearchSuggestImplSuggestionIndexManagerImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("pathBuilder.target") String pathBuilderTarget,  @QueryParam("suggest.basepath") String suggestBasepath,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqSearchSuggestImplSuggestionIndexManagerImpl(post,apply,delete,action,$location,propertylist,pathBuilderTarget,suggestBasepath,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.searchpromote.impl.PublishSearchPromoteConfigHandler")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqSearchpromoteImplPublishSearchPromoteConfigHandler(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.searchpromote.confighandler.enabled") Boolean cqSearchpromoteConfighandlerEnabled,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqSearchpromoteImplPublishSearchPromoteConfigHandler(post,apply,delete,action,$location,propertylist,cqSearchpromoteConfighandlerEnabled,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.searchpromote.impl.SearchPromoteServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqSearchpromoteImplSearchPromoteServiceImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.searchpromote.configuration.server.uri") String cqSearchpromoteConfigurationServerUri,  @QueryParam("cq.searchpromote.configuration.environment") String cqSearchpromoteConfigurationEnvironment,  @QueryParam("connection.timeout") Integer connectionTimeout,  @QueryParam("socket.timeout") Integer socketTimeout,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqSearchpromoteImplSearchPromoteServiceImpl(post,apply,delete,action,$location,propertylist,cqSearchpromoteConfigurationServerUri,cqSearchpromoteConfigurationEnvironment,connectionTimeout,socketTimeout,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.security.ACLSetup")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqSecurityACLSetupInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqSecurityACLSetupInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqSecurityACLSetup(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.aclsetup.rules") List<String> cqAclsetupRules,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqSecurityACLSetup(post,apply,delete,action,$location,propertylist,cqAclsetupRules,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.statistics.impl.StatisticsServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqStatisticsImplStatisticsServiceImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqStatisticsImplStatisticsServiceImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqStatisticsImplStatisticsServiceImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("scheduler.period") Integer schedulerPeriod,  @QueryParam("scheduler.concurrent") Boolean schedulerConcurrent,  @QueryParam("path") String path,  @QueryParam("workspace") String workspace,  @QueryParam("keywordsPath") String keywordsPath,  @QueryParam("asyncEntries") Boolean asyncEntries,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqStatisticsImplStatisticsServiceImpl(post,apply,delete,action,$location,propertylist,schedulerPeriod,schedulerConcurrent,path,workspace,keywordsPath,asyncEntries,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.tagging.impl.JcrTagManagerFactoryImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqTaggingImplJcrTagManagerFactoryImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqTaggingImplJcrTagManagerFactoryImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqTaggingImplJcrTagManagerFactoryImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("validation.enabled") Boolean validationEnabled,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqTaggingImplJcrTagManagerFactoryImpl(post,apply,delete,action,$location,propertylist,validationEnabled,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.tagging.impl.search.TagPredicateEvaluator")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqTaggingImplSearchTagPredicateEvaluator(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("ignore_path") Boolean ignorePath,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqTaggingImplSearchTagPredicateEvaluator(post,apply,delete,action,$location,propertylist,ignorePath,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.tagging.impl.TagGarbageCollector")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqTaggingImplTagGarbageCollectorInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqTaggingImplTagGarbageCollectorInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqTaggingImplTagGarbageCollector(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("scheduler.expression") String schedulerExpression,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqTaggingImplTagGarbageCollector(post,apply,delete,action,$location,propertylist,schedulerExpression,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.contentsync.impl.handler.PagesUpdateHandler")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmContentsyncImplHandlerPagesUpdateHandler(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.pagesupdatehandler.imageresourcetypes") List<String> cqPagesupdatehandlerImageresourcetypes,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmContentsyncImplHandlerPagesUpdateHandler(post,apply,delete,action,$location,propertylist,cqPagesupdatehandlerImageresourcetypes,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.contentsync.impl.rewriter.PathRewriterTransformerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.contentsync.pathrewritertransformer.mapping.links") List<String> cqContentsyncPathrewritertransformerMappingLinks,  @QueryParam("cq.contentsync.pathrewritertransformer.mapping.clientlibs") List<String> cqContentsyncPathrewritertransformerMappingClientlibs,  @QueryParam("cq.contentsync.pathrewritertransformer.mapping.images") List<String> cqContentsyncPathrewritertransformerMappingImages,  @QueryParam("cq.contentsync.pathrewritertransformer.attribute.pattern") String cqContentsyncPathrewritertransformerAttributePattern,  @QueryParam("cq.contentsync.pathrewritertransformer.clientlibrary.pattern") String cqContentsyncPathrewritertransformerClientlibraryPattern,  @QueryParam("cq.contentsync.pathrewritertransformer.clientlibrary.replace") String cqContentsyncPathrewritertransformerClientlibraryReplace,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor(post,apply,delete,action,$location,propertylist,cqContentsyncPathrewritertransformerMappingLinks,cqContentsyncPathrewritertransformerMappingClientlibs,cqContentsyncPathrewritertransformerMappingImages,cqContentsyncPathrewritertransformerAttributePattern,cqContentsyncPathrewritertransformerClientlibraryPattern,cqContentsyncPathrewritertransformerClientlibraryReplace,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.core.impl.AuthoringUIModeServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmCoreImplAuthoringUIModeServiceImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("authoringUIModeService.default") String authoringUIModeServiceDefault,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmCoreImplAuthoringUIModeServiceImpl(post,apply,delete,action,$location,propertylist,authoringUIModeServiceDefault,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.core.impl.commands.WCMCommandServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmCoreImplCommandsWCMCommandServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplCommandsWCMCommandServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmCoreImplCommandsWCMCommandServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("wcmcommandservlet.delete_whitelist") List<String> wcmcommandservletDeleteWhitelist,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmCoreImplCommandsWCMCommandServlet(post,apply,delete,action,$location,propertylist,wcmcommandservletDeleteWhitelist,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.core.impl.devicedetection.DeviceIdentificationModeImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("dim.default.mode") String dimDefaultMode,  @QueryParam("dim.appcache.enabled") Boolean dimAppcacheEnabled,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl(post,apply,delete,action,$location,propertylist,dimDefaultMode,dimAppcacheEnabled,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.core.impl.event.PageEventAuditListener")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmCoreImplEventPageEventAuditListenerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplEventPageEventAuditListenerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmCoreImplEventPageEventAuditListener(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("configured") String configured,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmCoreImplEventPageEventAuditListener(post,apply,delete,action,$location,propertylist,configured,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.core.impl.event.PagePostProcessor")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmCoreImplEventPagePostProcessorInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplEventPagePostProcessorInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmCoreImplEventPagePostProcessor(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("paths") List<String> paths,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmCoreImplEventPagePostProcessor(post,apply,delete,action,$location,propertylist,paths,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.core.impl.event.RepositoryChangeEventListener")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmCoreImplEventRepositoryChangeEventListener(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("paths") List<String> paths,  @QueryParam("excludedPaths") List<String> excludedPaths,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmCoreImplEventRepositoryChangeEventListener(post,apply,delete,action,$location,propertylist,paths,excludedPaths,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.core.impl.event.TemplatePostProcessor")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmCoreImplEventTemplatePostProcessorInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplEventTemplatePostProcessorInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmCoreImplEventTemplatePostProcessor(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("paths") String paths,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmCoreImplEventTemplatePostProcessor(post,apply,delete,action,$location,propertylist,paths,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.core.impl.LanguageManagerImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmCoreImplLanguageManagerImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplLanguageManagerImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmCoreImplLanguageManagerImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("langmgr.list.path") String langmgrListPath,  @QueryParam("langmgr.country.default") List<String> langmgrCountryDefault,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmCoreImplLanguageManagerImpl(post,apply,delete,action,$location,propertylist,langmgrListPath,langmgrCountryDefault,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.core.impl.LinkCheckerConfigurationFactoryImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("link.expired.prefix") String linkExpiredPrefix,  @QueryParam("link.expired.remove") Boolean linkExpiredRemove,  @QueryParam("link.expired.suffix") String linkExpiredSuffix,  @QueryParam("link.invalid.prefix") String linkInvalidPrefix,  @QueryParam("link.invalid.remove") Boolean linkInvalidRemove,  @QueryParam("link.invalid.suffix") String linkInvalidSuffix,  @QueryParam("link.predated.prefix") String linkPredatedPrefix,  @QueryParam("link.predated.remove") Boolean linkPredatedRemove,  @QueryParam("link.predated.suffix") String linkPredatedSuffix,  @QueryParam("link.wcmmodes") List<String> linkWcmmodes,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl(post,apply,delete,action,$location,propertylist,linkExpiredPrefix,linkExpiredRemove,linkExpiredSuffix,linkInvalidPrefix,linkInvalidRemove,linkInvalidSuffix,linkPredatedPrefix,linkPredatedRemove,linkPredatedSuffix,linkWcmmodes,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.core.impl.page.PageInfoAggregatorImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmCoreImplPagePageInfoAggregatorImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("page.info.provider.property.regex.default") String pageInfoProviderPropertyRegexDefault,  @QueryParam("page.info.provider.property.name") String pageInfoProviderPropertyName,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmCoreImplPagePageInfoAggregatorImpl(post,apply,delete,action,$location,propertylist,pageInfoProviderPropertyRegexDefault,pageInfoProviderPropertyName,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.core.impl.page.PageManagerFactoryImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmCoreImplPagePageManagerFactoryImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("illegalCharMapping") String illegalCharMapping,  @QueryParam("pageSubTreeActivationCheck") Boolean pageSubTreeActivationCheck,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmCoreImplPagePageManagerFactoryImpl(post,apply,delete,action,$location,propertylist,illegalCharMapping,pageSubTreeActivationCheck,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.core.impl.references.content.ContentReferenceConfig")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmCoreImplReferencesContentContentReferenceConfig(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("contentReferenceConfig.resourceTypes") List<String> contentReferenceConfigResourceTypes,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmCoreImplReferencesContentContentReferenceConfig(post,apply,delete,action,$location,propertylist,contentReferenceConfigResourceTypes,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.AssetViewHandler")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmCoreImplServletsContentfinderAssetViewHandler(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("dam.showexpired") Boolean damShowexpired,  @QueryParam("dam.showhidden") Boolean damShowhidden,  @QueryParam("tagTitleSearch") Boolean tagTitleSearch,  @QueryParam("guessTotal") String guessTotal,  @QueryParam("dam.expiryProperty") String damExpiryProperty,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmCoreImplServletsContentfinderAssetViewHandler(post,apply,delete,action,$location,propertylist,damShowexpired,damShowhidden,tagTitleSearch,guessTotal,damExpiryProperty,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.connector.ConnectorViewHandler")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("item.resource.types") List<String> itemResourceTypes,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie(post,apply,delete,action,$location,propertylist,itemResourceTypes,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.PageViewHandler")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmCoreImplServletsContentfinderPageViewHandler(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("guessTotal") String guessTotal,  @QueryParam("tagTitleSearch") Boolean tagTitleSearch,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmCoreImplServletsContentfinderPageViewHandler(post,apply,delete,action,$location,propertylist,guessTotal,tagTitleSearch,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.core.impl.servlets.FindReplaceServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmCoreImplServletsFindReplaceServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplServletsFindReplaceServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmCoreImplServletsFindReplaceServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("scope") List<String> scope,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmCoreImplServletsFindReplaceServlet(post,apply,delete,action,$location,propertylist,scope,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.core.impl.servlets.ReferenceSearchServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmCoreImplServletsReferenceSearchServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplServletsReferenceSearchServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmCoreImplServletsReferenceSearchServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("referencesearchservlet.maxReferencesPerPage") Integer referencesearchservletMaxReferencesPerPage,  @QueryParam("referencesearchservlet.maxPages") Integer referencesearchservletMaxPages,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmCoreImplServletsReferenceSearchServlet(post,apply,delete,action,$location,propertylist,referencesearchservletMaxReferencesPerPage,referencesearchservletMaxPages,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.core.impl.servlets.ThumbnailServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmCoreImplServletsThumbnailServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplServletsThumbnailServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmCoreImplServletsThumbnailServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("workspace") String workspace,  @QueryParam("dimensions") List<String> dimensions,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmCoreImplServletsThumbnailServlet(post,apply,delete,action,$location,propertylist,workspace,dimensions,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.core.impl.utils.DefaultPageNameValidator")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmCoreImplUtilsDefaultPageNameValidator(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("nonValidChars") String nonValidChars,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmCoreImplUtilsDefaultPageNameValidator(post,apply,delete,action,$location,propertylist,nonValidChars,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.core.impl.variants.PageVariantsProviderImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmCoreImplVariantsPageVariantsProviderImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("default.externalizer.domain") String defaultExternalizerDomain,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmCoreImplVariantsPageVariantsProviderImpl(post,apply,delete,action,$location,propertylist,defaultExternalizerDomain,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.core.impl.VersionManagerImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmCoreImplVersionManagerImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplVersionManagerImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmCoreImplVersionManagerImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("versionmanager.createVersionOnActivation") Boolean versionmanagerCreateVersionOnActivation,  @QueryParam("versionmanager.purgingEnabled") Boolean versionmanagerPurgingEnabled,  @QueryParam("versionmanager.purgePaths") List<String> versionmanagerPurgePaths,  @QueryParam("versionmanager.ivPaths") List<String> versionmanagerIvPaths,  @QueryParam("versionmanager.maxAgeDays") Integer versionmanagerMaxAgeDays,  @QueryParam("versionmanager.maxNumberVersions") Integer versionmanagerMaxNumberVersions,  @QueryParam("versionmanager.minNumberVersions") Integer versionmanagerMinNumberVersions,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmCoreImplVersionManagerImpl(post,apply,delete,action,$location,propertylist,versionmanagerCreateVersionOnActivation,versionmanagerPurgingEnabled,versionmanagerPurgePaths,versionmanagerIvPaths,versionmanagerMaxAgeDays,versionmanagerMaxNumberVersions,versionmanagerMinNumberVersions,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.core.impl.VersionPurgeTask")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmCoreImplVersionPurgeTaskInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplVersionPurgeTaskInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmCoreImplVersionPurgeTask(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("versionpurge.paths") List<String> versionpurgePaths,  @QueryParam("versionpurge.recursive") Boolean versionpurgeRecursive,  @QueryParam("versionpurge.maxVersions") Integer versionpurgeMaxVersions,  @QueryParam("versionpurge.minVersions") Integer versionpurgeMinVersions,  @QueryParam("versionpurge.maxAgeDays") Integer versionpurgeMaxAgeDays,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmCoreImplVersionPurgeTask(post,apply,delete,action,$location,propertylist,versionpurgePaths,versionpurgeRecursive,versionpurgeMaxVersions,versionpurgeMinVersions,versionpurgeMaxAgeDays,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.core.impl.WCMDebugFilter")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmCoreImplWCMDebugFilterInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplWCMDebugFilterInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmCoreImplWCMDebugFilter(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("wcmdbgfilter.enabled") Boolean wcmdbgfilterEnabled,  @QueryParam("wcmdbgfilter.jspDebug") Boolean wcmdbgfilterJspDebug,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmCoreImplWCMDebugFilter(post,apply,delete,action,$location,propertylist,wcmdbgfilterEnabled,wcmdbgfilterJspDebug,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.core.impl.WCMDeveloperModeFilter")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmCoreImplWCMDeveloperModeFilter(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("wcmdevmodefilter.enabled") Boolean wcmdevmodefilterEnabled,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmCoreImplWCMDeveloperModeFilter(post,apply,delete,action,$location,propertylist,wcmdevmodefilterEnabled,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.core.impl.warp.TimeWarpFilter")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmCoreImplWarpTimeWarpFilterInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplWarpTimeWarpFilterInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmCoreImplWarpTimeWarpFilter(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("filter.order") String filterOrder,  @QueryParam("filter.scope") String filterScope,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmCoreImplWarpTimeWarpFilter(post,apply,delete,action,$location,propertylist,filterOrder,filterScope,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.core.mvt.MVTStatisticsImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmCoreMvtMVTStatisticsImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreMvtMVTStatisticsImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmCoreMvtMVTStatisticsImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("mvtstatistics.trackingurl") String mvtstatisticsTrackingurl,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmCoreMvtMVTStatisticsImpl(post,apply,delete,action,$location,propertylist,mvtstatisticsTrackingurl,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.core.stats.PageViewStatisticsImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmCoreStatsPageViewStatisticsImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreStatsPageViewStatisticsImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmCoreStatsPageViewStatisticsImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("pageviewstatistics.trackingurl") String pageviewstatisticsTrackingurl,  @QueryParam("pageviewstatistics.trackingscript.enabled") String pageviewstatisticsTrackingscriptEnabled,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmCoreStatsPageViewStatisticsImpl(post,apply,delete,action,$location,propertylist,pageviewstatisticsTrackingurl,pageviewstatisticsTrackingscriptEnabled,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.core.WCMRequestFilter")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmCoreWCMRequestFilterInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreWCMRequestFilterInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmCoreWCMRequestFilter(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("wcmfilter.mode") String wcmfilterMode,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmCoreWCMRequestFilter(post,apply,delete,action,$location,propertylist,wcmfilterMode,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.designimporter.DesignPackageImporter")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmDesignimporterDesignPackageImporterInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterDesignPackageImporterInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmDesignimporterDesignPackageImporter(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("extract.filter") List<String> extractFilter,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmDesignimporterDesignPackageImporter(post,apply,delete,action,$location,propertylist,extractFilter,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasBuilderImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmDesignimporterImplCanvasBuilderImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("filepattern") String filepattern,  @QueryParam("build.page.nodes") Boolean buildPageNodes,  @QueryParam("build.client.libs") Boolean buildClientLibs,  @QueryParam("build.canvas.component") Boolean buildCanvasComponent,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmDesignimporterImplCanvasBuilderImpl(post,apply,delete,action,$location,propertylist,filepattern,buildPageNodes,buildClientLibs,buildCanvasComponent,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasPageDeleteHandler")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmDesignimporterImplCanvasPageDeleteHandler(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("minThreadPoolSize") Integer minThreadPoolSize,  @QueryParam("maxThreadPoolSize") Integer maxThreadPoolSize,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmDesignimporterImplCanvasPageDeleteHandler(post,apply,delete,action,$location,propertylist,minThreadPoolSize,maxThreadPoolSize,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.designimporter.impl.EntryPreprocessorImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmDesignimporterImplEntryPreprocessorImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("search.pattern") String searchPattern,  @QueryParam("replace.pattern") String replacePattern,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmDesignimporterImplEntryPreprocessorImpl(post,apply,delete,action,$location,propertylist,searchPattern,replacePattern,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.designimporter.impl.MobileCanvasBuilderImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmDesignimporterImplMobileCanvasBuilderImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("filepattern") String filepattern,  @QueryParam("device.groups") List<String> deviceGroups,  @QueryParam("build.page.nodes") Boolean buildPageNodes,  @QueryParam("build.client.libs") Boolean buildClientLibs,  @QueryParam("build.canvas.component") Boolean buildCanvasComponent,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmDesignimporterImplMobileCanvasBuilderImpl(post,apply,delete,action,$location,propertylist,filepattern,deviceGroups,buildPageNodes,buildClientLibs,buildCanvasComponent,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.CanvasComponentTagHandlerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("service.ranking") Integer serviceRanking,  @QueryParam("tagpattern") String tagpattern,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone(post,apply,delete,action,$location,propertylist,serviceRanking,tagpattern,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultComponentTagHandlerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("service.ranking") Integer serviceRanking,  @QueryParam("tagpattern") String tagpattern,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon(post,apply,delete,action,$location,propertylist,serviceRanking,tagpattern,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultTagHandlerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("service.ranking") Integer serviceRanking,  @QueryParam("tagpattern") String tagpattern,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan(post,apply,delete,action,$location,propertylist,serviceRanking,tagpattern,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.HeadTagHandlerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("service.ranking") Integer serviceRanking,  @QueryParam("tagpattern") String tagpattern,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle(post,apply,delete,action,$location,propertylist,serviceRanking,tagpattern,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.IFrameTagHandlerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("service.ranking") Integer serviceRanking,  @QueryParam("tagpattern") String tagpattern,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand(post,apply,delete,action,$location,propertylist,serviceRanking,tagpattern,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImageComponentTagHandlerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("service.ranking") Integer serviceRanking,  @QueryParam("tagpattern") String tagpattern,  @QueryParam("component.resourceType") String componentResourceType,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen(post,apply,delete,action,$location,propertylist,serviceRanking,tagpattern,componentResourceType,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImgTagHandlerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("service.ranking") Integer serviceRanking,  @QueryParam("tagpattern") String tagpattern,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler(post,apply,delete,action,$location,propertylist,serviceRanking,tagpattern,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.InlineScriptTagHandlerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("service.ranking") Integer serviceRanking,  @QueryParam("tagpattern") String tagpattern,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT(post,apply,delete,action,$location,propertylist,serviceRanking,tagpattern,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.LinkTagHandlerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("service.ranking") Integer serviceRanking,  @QueryParam("tagpattern") String tagpattern,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle(post,apply,delete,action,$location,propertylist,serviceRanking,tagpattern,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.MetaTagHandlerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("service.ranking") Integer serviceRanking,  @QueryParam("tagpattern") String tagpattern,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle(post,apply,delete,action,$location,propertylist,serviceRanking,tagpattern,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.NonScriptTagHandlerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("service.ranking") Integer serviceRanking,  @QueryParam("tagpattern") String tagpattern,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH(post,apply,delete,action,$location,propertylist,serviceRanking,tagpattern,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ParsysComponentTagHandlerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("service.ranking") Integer serviceRanking,  @QueryParam("tagpattern") String tagpattern,  @QueryParam("component.resourceType") String componentResourceType,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone(post,apply,delete,action,$location,propertylist,serviceRanking,tagpattern,componentResourceType,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ScriptTagHandlerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("service.ranking") Integer serviceRanking,  @QueryParam("tagpattern") String tagpattern,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand(post,apply,delete,action,$location,propertylist,serviceRanking,tagpattern,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.StyleTagHandlerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("service.ranking") Integer serviceRanking,  @QueryParam("tagpattern") String tagpattern,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl(post,apply,delete,action,$location,propertylist,serviceRanking,tagpattern,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TextComponentTagHandlerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("service.ranking") Integer serviceRanking,  @QueryParam("tagpattern") String tagpattern,  @QueryParam("component.resourceType") String componentResourceType,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent(post,apply,delete,action,$location,propertylist,serviceRanking,tagpattern,componentResourceType,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleComponentTagHandlerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("service.ranking") Integer serviceRanking,  @QueryParam("tagpattern") String tagpattern,  @QueryParam("component.resourceType") String componentResourceType,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen(post,apply,delete,action,$location,propertylist,serviceRanking,tagpattern,componentResourceType,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleTagHandlerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("service.ranking") Integer serviceRanking,  @QueryParam("tagpattern") String tagpattern,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl(post,apply,delete,action,$location,propertylist,serviceRanking,tagpattern,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormChooserServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmFoundationFormsImplFormChooserServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmFoundationFormsImplFormChooserServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmFoundationFormsImplFormChooserServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("service.name") String serviceName,  @QueryParam("sling.servlet.resourceTypes") String slingServletResourceTypes,  @QueryParam("sling.servlet.selectors") String slingServletSelectors,  @QueryParam("sling.servlet.methods") List<String> slingServletMethods,  @QueryParam("forms.formchooserservlet.advansesearch.require") Boolean formsFormchooserservletAdvansesearchRequire,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmFoundationFormsImplFormChooserServlet(post,apply,delete,action,$location,propertylist,serviceName,slingServletResourceTypes,slingServletSelectors,slingServletMethods,formsFormchooserservletAdvansesearchRequire,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormParagraphPostProcessor")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmFoundationFormsImplFormParagraphPostProcessor(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("forms.formparagraphpostprocessor.enabled") Boolean formsFormparagraphpostprocessorEnabled,  @QueryParam("forms.formparagraphpostprocessor.formresourcetypes") List<String> formsFormparagraphpostprocessorFormresourcetypes,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmFoundationFormsImplFormParagraphPostProcessor(post,apply,delete,action,$location,propertylist,formsFormparagraphpostprocessorEnabled,formsFormparagraphpostprocessorFormresourcetypes,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormsHandlingServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmFoundationFormsImplFormsHandlingServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("name.whitelist") String nameWhitelist,  @QueryParam("allow.expressions") Boolean allowExpressions,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmFoundationFormsImplFormsHandlingServlet(post,apply,delete,action,$location,propertylist,nameWhitelist,allowExpressions,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.foundation.forms.impl.MailServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmFoundationFormsImplMailServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmFoundationFormsImplMailServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmFoundationFormsImplMailServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("sling.servlet.resourceTypes") String slingServletResourceTypes,  @QueryParam("sling.servlet.selectors") String slingServletSelectors,  @QueryParam("resource.whitelist") List<String> resourceWhitelist,  @QueryParam("resource.blacklist") String resourceBlacklist,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmFoundationFormsImplMailServlet(post,apply,delete,action,$location,propertylist,slingServletResourceTypes,slingServletSelectors,resourceWhitelist,resourceBlacklist,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.foundation.impl.AdaptiveImageComponentServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmFoundationImplAdaptiveImageComponentServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("adapt.supported.widths") List<String> adaptSupportedWidths,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmFoundationImplAdaptiveImageComponentServlet(post,apply,delete,action,$location,propertylist,adaptSupportedWidths,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.foundation.impl.HTTPAuthHandler")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmFoundationImplHTTPAuthHandlerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmFoundationImplHTTPAuthHandlerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmFoundationImplHTTPAuthHandler(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("path") String path,  @QueryParam("auth.http.nologin") Boolean authHttpNologin,  @QueryParam("auth.http.realm") String authHttpRealm,  @QueryParam("auth.default.loginpage") String authDefaultLoginpage,  @QueryParam("auth.cred.form") List<String> authCredForm,  @QueryParam("auth.cred.utf8") List<String> authCredUtf8,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmFoundationImplHTTPAuthHandler(post,apply,delete,action,$location,propertylist,path,authHttpNologin,authHttpRealm,authDefaultLoginpage,authCredForm,authCredUtf8,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.foundation.impl.PageImpressionsTracker")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmFoundationImplPageImpressionsTrackerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmFoundationImplPageImpressionsTrackerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmFoundationImplPageImpressionsTracker(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("sling.auth.requirements") String slingAuthRequirements,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmFoundationImplPageImpressionsTracker(post,apply,delete,action,$location,propertylist,slingAuthRequirements,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.foundation.impl.PageRedirectServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmFoundationImplPageRedirectServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmFoundationImplPageRedirectServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmFoundationImplPageRedirectServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("excluded.resource.types") List<String> excludedResourceTypes,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmFoundationImplPageRedirectServlet(post,apply,delete,action,$location,propertylist,excludedResourceTypes,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.foundation.security.impl.DefaultAttachmentTypeBlacklistService")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("default.attachment.type.blacklist") List<String> defaultAttachmentTypeBlacklist,  @QueryParam("baseline.attachment.type.blacklist") List<String> baselineAttachmentTypeBlacklist,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist(post,apply,delete,action,$location,propertylist,defaultAttachmentTypeBlacklist,baselineAttachmentTypeBlacklist,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.foundation.security.impl.SaferSlingPostValidatorImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("parameter.whitelist") List<String> parameterWhitelist,  @QueryParam("parameter.whitelist.prefixes") List<String> parameterWhitelistPrefixes,  @QueryParam("binary.parameter.whitelist") List<String> binaryParameterWhitelist,  @QueryParam("modifier.whitelist") List<String> modifierWhitelist,  @QueryParam("operation.whitelist") List<String> operationWhitelist,  @QueryParam("operation.whitelist.prefixes") List<String> operationWhitelistPrefixes,  @QueryParam("typehint.whitelist") List<String> typehintWhitelist,  @QueryParam("resourcetype.whitelist") List<String> resourcetypeWhitelist,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl(post,apply,delete,action,$location,propertylist,parameterWhitelist,parameterWhitelistPrefixes,binaryParameterWhitelist,modifierWhitelist,operationWhitelist,operationWhitelistPrefixes,typehintWhitelist,resourcetypeWhitelist,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.mobile.core.impl.device.DeviceInfoTransformerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("device.info.transformer.enabled") Boolean deviceInfoTransformerEnabled,  @QueryParam("device.info.transformer.css.style") String deviceInfoTransformerCssStyle,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory(post,apply,delete,action,$location,propertylist,deviceInfoTransformerEnabled,deviceInfoTransformerCssStyle,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.mobile.core.impl.redirect.RedirectFilter")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmMobileCoreImplRedirectRedirectFilter(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("redirect.enabled") Boolean redirectEnabled,  @QueryParam("redirect.stats.enabled") Boolean redirectStatsEnabled,  @QueryParam("redirect.extensions") List<String> redirectExtensions,  @QueryParam("redirect.paths") List<String> redirectPaths,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmMobileCoreImplRedirectRedirectFilter(post,apply,delete,action,$location,propertylist,redirectEnabled,redirectStatsEnabled,redirectExtensions,redirectPaths,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentCopyActionFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmMsmImplActionsContentCopyActionFactory(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.wcm.msm.action.excludednodetypes") List<String> cqWcmMsmActionExcludednodetypes,  @QueryParam("cq.wcm.msm.action.excludedparagraphitems") List<String> cqWcmMsmActionExcludedparagraphitems,  @QueryParam("cq.wcm.msm.action.excludedprops") List<String> cqWcmMsmActionExcludedprops,  @QueryParam("contentcopyaction.order.style") String contentcopyactionOrderStyle,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmMsmImplActionsContentCopyActionFactory(post,apply,delete,action,$location,propertylist,cqWcmMsmActionExcludednodetypes,cqWcmMsmActionExcludedparagraphitems,cqWcmMsmActionExcludedprops,contentcopyactionOrderStyle,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentDeleteActionFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmMsmImplActionsContentDeleteActionFactory(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.wcm.msm.action.excludednodetypes") List<String> cqWcmMsmActionExcludednodetypes,  @QueryParam("cq.wcm.msm.action.excludedparagraphitems") List<String> cqWcmMsmActionExcludedparagraphitems,  @QueryParam("cq.wcm.msm.action.excludedprops") List<String> cqWcmMsmActionExcludedprops,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmMsmImplActionsContentDeleteActionFactory(post,apply,delete,action,$location,propertylist,cqWcmMsmActionExcludednodetypes,cqWcmMsmActionExcludedparagraphitems,cqWcmMsmActionExcludedprops,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentUpdateActionFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmMsmImplActionsContentUpdateActionFactory(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.wcm.msm.action.excludednodetypes") List<String> cqWcmMsmActionExcludednodetypes,  @QueryParam("cq.wcm.msm.action.excludedparagraphitems") List<String> cqWcmMsmActionExcludedparagraphitems,  @QueryParam("cq.wcm.msm.action.excludedprops") List<String> cqWcmMsmActionExcludedprops,  @QueryParam("cq.wcm.msm.action.ignoredMixin") List<String> cqWcmMsmActionIgnoredMixin,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmMsmImplActionsContentUpdateActionFactory(post,apply,delete,action,$location,propertylist,cqWcmMsmActionExcludednodetypes,cqWcmMsmActionExcludedparagraphitems,cqWcmMsmActionExcludedprops,cqWcmMsmActionIgnoredMixin,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.msm.impl.actions.OrderChildrenActionFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmMsmImplActionsOrderChildrenActionFactory(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.wcm.msm.action.excludednodetypes") List<String> cqWcmMsmActionExcludednodetypes,  @QueryParam("cq.wcm.msm.action.excludedparagraphitems") List<String> cqWcmMsmActionExcludedparagraphitems,  @QueryParam("cq.wcm.msm.action.excludedprops") List<String> cqWcmMsmActionExcludedprops,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmMsmImplActionsOrderChildrenActionFactory(post,apply,delete,action,$location,propertylist,cqWcmMsmActionExcludednodetypes,cqWcmMsmActionExcludedparagraphitems,cqWcmMsmActionExcludedprops,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.msm.impl.actions.PageMoveActionFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmMsmImplActionsPageMoveActionFactory(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.wcm.msm.action.excludednodetypes") List<String> cqWcmMsmActionExcludednodetypes,  @QueryParam("cq.wcm.msm.action.excludedparagraphitems") List<String> cqWcmMsmActionExcludedparagraphitems,  @QueryParam("cq.wcm.msm.action.excludedprops") List<String> cqWcmMsmActionExcludedprops,  @QueryParam("cq.wcm.msm.impl.actions.pagemove.prop_referenceUpdate") Boolean cqWcmMsmImplActionsPagemovePropReferenceUpdate,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmMsmImplActionsPageMoveActionFactory(post,apply,delete,action,$location,propertylist,cqWcmMsmActionExcludednodetypes,cqWcmMsmActionExcludedparagraphitems,cqWcmMsmActionExcludedprops,cqWcmMsmImplActionsPagemovePropReferenceUpdate,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.msm.impl.actions.ReferencesUpdateActionFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmMsmImplActionsReferencesUpdateActionFactory(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.wcm.msm.action.excludednodetypes") List<String> cqWcmMsmActionExcludednodetypes,  @QueryParam("cq.wcm.msm.action.excludedparagraphitems") List<String> cqWcmMsmActionExcludedparagraphitems,  @QueryParam("cq.wcm.msm.action.excludedprops") List<String> cqWcmMsmActionExcludedprops,  @QueryParam("cq.wcm.msm.impl.action.referencesupdate.prop_updateNested") Boolean cqWcmMsmImplActionReferencesupdatePropUpdateNested,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmMsmImplActionsReferencesUpdateActionFactory(post,apply,delete,action,$location,propertylist,cqWcmMsmActionExcludednodetypes,cqWcmMsmActionExcludedparagraphitems,cqWcmMsmActionExcludedprops,cqWcmMsmImplActionReferencesupdatePropUpdateNested,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.msm.impl.actions.VersionCopyActionFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmMsmImplActionsVersionCopyActionFactory(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.wcm.msm.action.excludednodetypes") List<String> cqWcmMsmActionExcludednodetypes,  @QueryParam("cq.wcm.msm.action.excludedparagraphitems") List<String> cqWcmMsmActionExcludedparagraphitems,  @QueryParam("cq.wcm.msm.action.excludedprops") List<String> cqWcmMsmActionExcludedprops,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmMsmImplActionsVersionCopyActionFactory(post,apply,delete,action,$location,propertylist,cqWcmMsmActionExcludednodetypes,cqWcmMsmActionExcludedparagraphitems,cqWcmMsmActionExcludedprops,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.msm.impl.LiveRelationshipManagerImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmMsmImplLiveRelationshipManagerImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("liverelationshipmgr.relationsconfig.default") String liverelationshipmgrRelationsconfigDefault,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmMsmImplLiveRelationshipManagerImpl(post,apply,delete,action,$location,propertylist,liverelationshipmgrRelationsconfigDefault,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.msm.impl.RolloutManagerImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmMsmImplRolloutManagerImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmMsmImplRolloutManagerImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmMsmImplRolloutManagerImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("event.filter") String eventFilter,  @QueryParam("rolloutmgr.excludedprops.default") List<String> rolloutmgrExcludedpropsDefault,  @QueryParam("rolloutmgr.excludedparagraphprops.default") List<String> rolloutmgrExcludedparagraphpropsDefault,  @QueryParam("rolloutmgr.excludednodetypes.default") List<String> rolloutmgrExcludednodetypesDefault,  @QueryParam("rolloutmgr.threadpool.maxsize") Integer rolloutmgrThreadpoolMaxsize,  @QueryParam("rolloutmgr.threadpool.maxshutdowntime") Integer rolloutmgrThreadpoolMaxshutdowntime,  @QueryParam("rolloutmgr.threadpool.priority") String rolloutmgrThreadpoolPriority,  @QueryParam("rolloutmgr.commit.size") Integer rolloutmgrCommitSize,  @QueryParam("rolloutmgr.conflicthandling.enabled") Boolean rolloutmgrConflicthandlingEnabled,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmMsmImplRolloutManagerImpl(post,apply,delete,action,$location,propertylist,eventFilter,rolloutmgrExcludedpropsDefault,rolloutmgrExcludedparagraphpropsDefault,rolloutmgrExcludednodetypesDefault,rolloutmgrThreadpoolMaxsize,rolloutmgrThreadpoolMaxshutdowntime,rolloutmgrThreadpoolPriority,rolloutmgrCommitSize,rolloutmgrConflicthandlingEnabled,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.msm.impl.servlets.AuditLogServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmMsmImplServletsAuditLogServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmMsmImplServletsAuditLogServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmMsmImplServletsAuditLogServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("auditlogservlet.default.events.count") Integer auditlogservletDefaultEventsCount,  @QueryParam("auditlogservlet.default.path") String auditlogservletDefaultPath,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmMsmImplServletsAuditLogServlet(post,apply,delete,action,$location,propertylist,auditlogservletDefaultEventsCount,auditlogservletDefaultPath,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.notification.email.impl.EmailChannel")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmNotificationEmailImplEmailChannelInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmNotificationEmailImplEmailChannelInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmNotificationEmailImplEmailChannel(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("email.from") String emailFrom,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmNotificationEmailImplEmailChannel(post,apply,delete,action,$location,propertylist,emailFrom,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.notification.impl.NotificationManagerImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmNotificationImplNotificationManagerImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmNotificationImplNotificationManagerImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmNotificationImplNotificationManagerImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("event.topics") List<String> eventTopics,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmNotificationImplNotificationManagerImpl(post,apply,delete,action,$location,propertylist,eventTopics,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.scripting.impl.BVPManager")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmScriptingImplBVPManagerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmScriptingImplBVPManagerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmScriptingImplBVPManager(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("com.day.cq.wcm.scripting.bvp.script.engines") List<String> comDayCqWcmScriptingBvpScriptEngines,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmScriptingImplBVPManager(post,apply,delete,action,$location,propertylist,comDayCqWcmScriptingBvpScriptEngines,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.undo.UndoConfig")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmUndoUndoConfigInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmUndoUndoConfigInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmUndoUndoConfig(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cq.wcm.undo.enabled") Boolean cqWcmUndoEnabled,  @QueryParam("cq.wcm.undo.path") String cqWcmUndoPath,  @QueryParam("cq.wcm.undo.validity") Integer cqWcmUndoValidity,  @QueryParam("cq.wcm.undo.steps") Integer cqWcmUndoSteps,  @QueryParam("cq.wcm.undo.persistence") String cqWcmUndoPersistence,  @QueryParam("cq.wcm.undo.persistence.mode") Boolean cqWcmUndoPersistenceMode,  @QueryParam("cq.wcm.undo.markermode") String cqWcmUndoMarkermode,  @QueryParam("cq.wcm.undo.whitelist") List<String> cqWcmUndoWhitelist,  @QueryParam("cq.wcm.undo.blacklist") List<String> cqWcmUndoBlacklist,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmUndoUndoConfig(post,apply,delete,action,$location,propertylist,cqWcmUndoEnabled,cqWcmUndoPath,cqWcmUndoValidity,cqWcmUndoSteps,cqWcmUndoPersistence,cqWcmUndoPersistenceMode,cqWcmUndoMarkermode,cqWcmUndoWhitelist,cqWcmUndoBlacklist,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.webservicesupport.impl.ReplicationEventListener")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmWebservicesupportImplReplicationEventListener(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("Flush agents") List<String> flushAgents,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmWebservicesupportImplReplicationEventListener(post,apply,delete,action,$location,propertylist,flushAgents,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.workflow.impl.WcmWorkflowServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmWorkflowImplWcmWorkflowServiceImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("event.filter") String eventFilter,  @QueryParam("minThreadPoolSize") Integer minThreadPoolSize,  @QueryParam("maxThreadPoolSize") Integer maxThreadPoolSize,  @QueryParam("cq.wcm.workflow.terminate.on.activate") Boolean cqWcmWorkflowTerminateOnActivate,  @QueryParam("cq.wcm.worklfow.terminate.exclusion.list") List<String> cqWcmWorklfowTerminateExclusionList,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmWorkflowImplWcmWorkflowServiceImpl(post,apply,delete,action,$location,propertylist,eventFilter,minThreadPoolSize,maxThreadPoolSize,cqWcmWorkflowTerminateOnActivate,cqWcmWorklfowTerminateExclusionList,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.wcm.workflow.impl.WorkflowPackageInfoProvider")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWcmWorkflowImplWorkflowPackageInfoProvider(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("workflowpackageinfoprovider.filter") List<String> workflowpackageinfoproviderFilter,  @QueryParam("workflowpackageinfoprovider.filter.rootpath") String workflowpackageinfoproviderFilterRootpath,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWcmWorkflowImplWorkflowPackageInfoProvider(post,apply,delete,action,$location,propertylist,workflowpackageinfoproviderFilter,workflowpackageinfoproviderFilterRootpath,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.widget.impl.HtmlLibraryManagerImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWidgetImplHtmlLibraryManagerImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWidgetImplHtmlLibraryManagerImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWidgetImplHtmlLibraryManagerImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("htmllibmanager.clientmanager") String htmllibmanagerClientmanager,  @QueryParam("htmllibmanager.debug") Boolean htmllibmanagerDebug,  @QueryParam("htmllibmanager.debug.console") Boolean htmllibmanagerDebugConsole,  @QueryParam("htmllibmanager.debug.init.js") String htmllibmanagerDebugInitJs,  @QueryParam("htmllibmanager.defaultthemename") String htmllibmanagerDefaultthemename,  @QueryParam("htmllibmanager.defaultuserthemename") String htmllibmanagerDefaultuserthemename,  @QueryParam("htmllibmanager.firebuglite.path") String htmllibmanagerFirebuglitePath,  @QueryParam("htmllibmanager.forceCQUrlInfo") Boolean htmllibmanagerForceCQUrlInfo,  @QueryParam("htmllibmanager.gzip") Boolean htmllibmanagerGzip,  @QueryParam("htmllibmanager.maxage") Integer htmllibmanagerMaxage,  @QueryParam("htmllibmanager.maxDataUriSize") Integer htmllibmanagerMaxDataUriSize,  @QueryParam("htmllibmanager.minify") Boolean htmllibmanagerMinify,  @QueryParam("htmllibmanager.path.list") List<String> htmllibmanagerPathList,  @QueryParam("htmllibmanager.timing") Boolean htmllibmanagerTiming,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWidgetImplHtmlLibraryManagerImpl(post,apply,delete,action,$location,propertylist,htmllibmanagerClientmanager,htmllibmanagerDebug,htmllibmanagerDebugConsole,htmllibmanagerDebugInitJs,htmllibmanagerDefaultthemename,htmllibmanagerDefaultuserthemename,htmllibmanagerFirebuglitePath,htmllibmanagerForceCQUrlInfo,htmllibmanagerGzip,htmllibmanagerMaxage,htmllibmanagerMaxDataUriSize,htmllibmanagerMinify,htmllibmanagerPathList,htmllibmanagerTiming,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.widget.impl.WidgetExtensionProviderImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWidgetImplWidgetExtensionProviderImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWidgetImplWidgetExtensionProviderImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWidgetImplWidgetExtensionProviderImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("extendable.widgets") List<String> extendableWidgets,  @QueryParam("widgetextensionprovider.debug") Boolean widgetextensionproviderDebug,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWidgetImplWidgetExtensionProviderImpl(post,apply,delete,action,$location,propertylist,extendableWidgets,widgetextensionproviderDebug,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.workflow.impl.email.EMailNotificationService")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWorkflowImplEmailEMailNotificationServiceInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWorkflowImplEmailEMailNotificationServiceInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWorkflowImplEmailEMailNotificationService(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("from.address") String fromAddress,  @QueryParam("host.prefix") String hostPrefix,  @QueryParam("notify.onabort") Boolean notifyOnabort,  @QueryParam("notify.oncomplete") Boolean notifyOncomplete,  @QueryParam("notify.oncontainercomplete") Boolean notifyOncontainercomplete,  @QueryParam("notify.useronly") Boolean notifyUseronly,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWorkflowImplEmailEMailNotificationService(post,apply,delete,action,$location,propertylist,fromAddress,hostPrefix,notifyOnabort,notifyOncomplete,notifyOncontainercomplete,notifyUseronly,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.cq.workflow.impl.email.TaskEMailNotificationService")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCqWorkflowImplEmailTaskEMailNotificationService(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("notify.onupdate") Boolean notifyOnupdate,  @QueryParam("notify.oncomplete") Boolean notifyOncomplete,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCqWorkflowImplEmailTaskEMailNotificationService(post,apply,delete,action,$location,propertylist,notifyOnupdate,notifyOncomplete,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.crx.security.token.impl.impl.TokenAuthenticationHandler")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCrxSecurityTokenImplImplTokenAuthenticationHandler(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("path") String path,  @QueryParam("token.required.attr") String tokenRequiredAttr,  @QueryParam("token.alternate.url") String tokenAlternateUrl,  @QueryParam("token.encapsulated") Boolean tokenEncapsulated,  @QueryParam("skip.token.refresh") List<String> skipTokenRefresh,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCrxSecurityTokenImplImplTokenAuthenticationHandler(post,apply,delete,action,$location,propertylist,path,tokenRequiredAttr,tokenAlternateUrl,tokenEncapsulated,skipTokenRefresh,securityContext);
    }
    @POST
    @Path("/console/configMgr/com.day.crx.security.token.impl.TokenCleanupTask")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = ComDayCrxSecurityTokenImplTokenCleanupTaskInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCrxSecurityTokenImplTokenCleanupTaskInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response comDayCrxSecurityTokenImplTokenCleanupTask(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("enable.token.cleanup.task") Boolean enableTokenCleanupTask,  @QueryParam("scheduler.expression") String schedulerExpression,  @QueryParam("batch.size") Integer batchSize,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.comDayCrxSecurityTokenImplTokenCleanupTask(post,apply,delete,action,$location,propertylist,enableTokenCleanupTask,schedulerExpression,batchSize,securityContext);
    }
    @POST
    @Path("/console/configMgr/Guide Localization Service")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = GuideLocalizationServiceInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = GuideLocalizationServiceInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response guideLocalizationService(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("supportedLocales") List<String> supportedLocales,  @QueryParam("Localizable Properties") List<String> localizableProperties,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.guideLocalizationService(post,apply,delete,action,$location,propertylist,supportedLocales,localizableProperties,securityContext);
    }
    @POST
    @Path("/console/configMgr/MessagingUserComponentFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = MessagingUserComponentFactoryInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = MessagingUserComponentFactoryInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response messagingUserComponentFactory(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("priority") Integer priority,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.messagingUserComponentFactory(post,apply,delete,action,$location,propertylist,priority,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.aries.jmx.framework.StateConfig")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheAriesJmxFrameworkStateConfigInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheAriesJmxFrameworkStateConfigInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheAriesJmxFrameworkStateConfig(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("attributeChangeNotificationEnabled") Boolean attributeChangeNotificationEnabled,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheAriesJmxFrameworkStateConfig(post,apply,delete,action,$location,propertylist,attributeChangeNotificationEnabled,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.felix.eventadmin.impl.EventAdmin")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheFelixEventadminImplEventAdminInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheFelixEventadminImplEventAdminInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheFelixEventadminImplEventAdmin(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("org.apache.felix.eventadmin.ThreadPoolSize") Integer orgApacheFelixEventadminThreadPoolSize,  @QueryParam("org.apache.felix.eventadmin.AsyncToSyncThreadRatio") BigDecimal orgApacheFelixEventadminAsyncToSyncThreadRatio,  @QueryParam("org.apache.felix.eventadmin.Timeout") Integer orgApacheFelixEventadminTimeout,  @QueryParam("org.apache.felix.eventadmin.RequireTopic") Boolean orgApacheFelixEventadminRequireTopic,  @QueryParam("org.apache.felix.eventadmin.IgnoreTimeout") List<String> orgApacheFelixEventadminIgnoreTimeout,  @QueryParam("org.apache.felix.eventadmin.IgnoreTopic") List<String> orgApacheFelixEventadminIgnoreTopic,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheFelixEventadminImplEventAdmin(post,apply,delete,action,$location,propertylist,orgApacheFelixEventadminThreadPoolSize,orgApacheFelixEventadminAsyncToSyncThreadRatio,orgApacheFelixEventadminTimeout,orgApacheFelixEventadminRequireTopic,orgApacheFelixEventadminIgnoreTimeout,orgApacheFelixEventadminIgnoreTopic,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.felix.http")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheFelixHttpInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheFelixHttpInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheFelixHttp(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("org.apache.felix.http.host") String orgApacheFelixHttpHost,  @QueryParam("org.apache.felix.http.enable") Boolean orgApacheFelixHttpEnable,  @QueryParam("org.osgi.service.http.port") Integer orgOsgiServiceHttpPort,  @QueryParam("org.apache.felix.http.timeout") Integer orgApacheFelixHttpTimeout,  @QueryParam("org.apache.felix.https.enable") Boolean orgApacheFelixHttpsEnable,  @QueryParam("org.osgi.service.http.port.secure") Integer orgOsgiServiceHttpPortSecure,  @QueryParam("org.apache.felix.https.keystore") String orgApacheFelixHttpsKeystore,  @QueryParam("org.apache.felix.https.keystore.password") String orgApacheFelixHttpsKeystorePassword,  @QueryParam("org.apache.felix.https.keystore.key.password") String orgApacheFelixHttpsKeystoreKeyPassword,  @QueryParam("org.apache.felix.https.truststore") String orgApacheFelixHttpsTruststore,  @QueryParam("org.apache.felix.https.truststore.password") String orgApacheFelixHttpsTruststorePassword,  @QueryParam("org.apache.felix.https.clientcertificate") String orgApacheFelixHttpsClientcertificate,  @QueryParam("org.apache.felix.http.context_path") String orgApacheFelixHttpContextPath,  @QueryParam("org.apache.felix.http.mbeans") Boolean orgApacheFelixHttpMbeans,  @QueryParam("org.apache.felix.http.session.timeout") Integer orgApacheFelixHttpSessionTimeout,  @QueryParam("org.apache.felix.http.jetty.threadpool.max") Integer orgApacheFelixHttpJettyThreadpoolMax,  @QueryParam("org.apache.felix.http.jetty.acceptors") Integer orgApacheFelixHttpJettyAcceptors,  @QueryParam("org.apache.felix.http.jetty.selectors") Integer orgApacheFelixHttpJettySelectors,  @QueryParam("org.apache.felix.http.jetty.headerBufferSize") Integer orgApacheFelixHttpJettyHeaderBufferSize,  @QueryParam("org.apache.felix.http.jetty.requestBufferSize") Integer orgApacheFelixHttpJettyRequestBufferSize,  @QueryParam("org.apache.felix.http.jetty.responseBufferSize") Integer orgApacheFelixHttpJettyResponseBufferSize,  @QueryParam("org.apache.felix.http.jetty.maxFormSize") Integer orgApacheFelixHttpJettyMaxFormSize,  @QueryParam("org.apache.felix.http.path_exclusions") List<String> orgApacheFelixHttpPathExclusions,  @QueryParam("org.apache.felix.https.jetty.ciphersuites.excluded") List<String> orgApacheFelixHttpsJettyCiphersuitesExcluded,  @QueryParam("org.apache.felix.https.jetty.ciphersuites.included") List<String> orgApacheFelixHttpsJettyCiphersuitesIncluded,  @QueryParam("org.apache.felix.http.jetty.sendServerHeader") Boolean orgApacheFelixHttpJettySendServerHeader,  @QueryParam("org.apache.felix.https.jetty.protocols.included") List<String> orgApacheFelixHttpsJettyProtocolsIncluded,  @QueryParam("org.apache.felix.https.jetty.protocols.excluded") List<String> orgApacheFelixHttpsJettyProtocolsExcluded,  @QueryParam("org.apache.felix.proxy.load.balancer.connection.enable") Boolean orgApacheFelixProxyLoadBalancerConnectionEnable,  @QueryParam("org.apache.felix.https.jetty.renegotiateAllowed") Boolean orgApacheFelixHttpsJettyRenegotiateAllowed,  @QueryParam("org.apache.felix.https.jetty.session.cookie.httpOnly") Boolean orgApacheFelixHttpsJettySessionCookieHttpOnly,  @QueryParam("org.apache.felix.https.jetty.session.cookie.secure") Boolean orgApacheFelixHttpsJettySessionCookieSecure,  @QueryParam("org.eclipse.jetty.servlet.SessionIdPathParameterName") String orgEclipseJettyServletSessionIdPathParameterName,  @QueryParam("org.eclipse.jetty.servlet.CheckingRemoteSessionIdEncoding") Boolean orgEclipseJettyServletCheckingRemoteSessionIdEncoding,  @QueryParam("org.eclipse.jetty.servlet.SessionCookie") String orgEclipseJettyServletSessionCookie,  @QueryParam("org.eclipse.jetty.servlet.SessionDomain") String orgEclipseJettyServletSessionDomain,  @QueryParam("org.eclipse.jetty.servlet.SessionPath") String orgEclipseJettyServletSessionPath,  @QueryParam("org.eclipse.jetty.servlet.MaxAge") Integer orgEclipseJettyServletMaxAge,  @QueryParam("org.apache.felix.http.name") String orgApacheFelixHttpName,  @QueryParam("org.apache.felix.jetty.gziphandler.enable") Boolean orgApacheFelixJettyGziphandlerEnable,  @QueryParam("org.apache.felix.jetty.gzip.minGzipSize") Integer orgApacheFelixJettyGzipMinGzipSize,  @QueryParam("org.apache.felix.jetty.gzip.compressionLevel") Integer orgApacheFelixJettyGzipCompressionLevel,  @QueryParam("org.apache.felix.jetty.gzip.inflateBufferSize") Integer orgApacheFelixJettyGzipInflateBufferSize,  @QueryParam("org.apache.felix.jetty.gzip.syncFlush") Boolean orgApacheFelixJettyGzipSyncFlush,  @QueryParam("org.apache.felix.jetty.gzip.excludedUserAgents") List<String> orgApacheFelixJettyGzipExcludedUserAgents,  @QueryParam("org.apache.felix.jetty.gzip.includedMethods") List<String> orgApacheFelixJettyGzipIncludedMethods,  @QueryParam("org.apache.felix.jetty.gzip.excludedMethods") List<String> orgApacheFelixJettyGzipExcludedMethods,  @QueryParam("org.apache.felix.jetty.gzip.includedPaths") List<String> orgApacheFelixJettyGzipIncludedPaths,  @QueryParam("org.apache.felix.jetty.gzip.excludedPaths") List<String> orgApacheFelixJettyGzipExcludedPaths,  @QueryParam("org.apache.felix.jetty.gzip.includedMimeTypes") List<String> orgApacheFelixJettyGzipIncludedMimeTypes,  @QueryParam("org.apache.felix.jetty.gzip.excludedMimeTypes") List<String> orgApacheFelixJettyGzipExcludedMimeTypes,  @QueryParam("org.apache.felix.http.session.invalidate") Boolean orgApacheFelixHttpSessionInvalidate,  @QueryParam("org.apache.felix.http.session.uniqueid") Boolean orgApacheFelixHttpSessionUniqueid,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheFelixHttp(post,apply,delete,action,$location,propertylist,orgApacheFelixHttpHost,orgApacheFelixHttpEnable,orgOsgiServiceHttpPort,orgApacheFelixHttpTimeout,orgApacheFelixHttpsEnable,orgOsgiServiceHttpPortSecure,orgApacheFelixHttpsKeystore,orgApacheFelixHttpsKeystorePassword,orgApacheFelixHttpsKeystoreKeyPassword,orgApacheFelixHttpsTruststore,orgApacheFelixHttpsTruststorePassword,orgApacheFelixHttpsClientcertificate,orgApacheFelixHttpContextPath,orgApacheFelixHttpMbeans,orgApacheFelixHttpSessionTimeout,orgApacheFelixHttpJettyThreadpoolMax,orgApacheFelixHttpJettyAcceptors,orgApacheFelixHttpJettySelectors,orgApacheFelixHttpJettyHeaderBufferSize,orgApacheFelixHttpJettyRequestBufferSize,orgApacheFelixHttpJettyResponseBufferSize,orgApacheFelixHttpJettyMaxFormSize,orgApacheFelixHttpPathExclusions,orgApacheFelixHttpsJettyCiphersuitesExcluded,orgApacheFelixHttpsJettyCiphersuitesIncluded,orgApacheFelixHttpJettySendServerHeader,orgApacheFelixHttpsJettyProtocolsIncluded,orgApacheFelixHttpsJettyProtocolsExcluded,orgApacheFelixProxyLoadBalancerConnectionEnable,orgApacheFelixHttpsJettyRenegotiateAllowed,orgApacheFelixHttpsJettySessionCookieHttpOnly,orgApacheFelixHttpsJettySessionCookieSecure,orgEclipseJettyServletSessionIdPathParameterName,orgEclipseJettyServletCheckingRemoteSessionIdEncoding,orgEclipseJettyServletSessionCookie,orgEclipseJettyServletSessionDomain,orgEclipseJettyServletSessionPath,orgEclipseJettyServletMaxAge,orgApacheFelixHttpName,orgApacheFelixJettyGziphandlerEnable,orgApacheFelixJettyGzipMinGzipSize,orgApacheFelixJettyGzipCompressionLevel,orgApacheFelixJettyGzipInflateBufferSize,orgApacheFelixJettyGzipSyncFlush,orgApacheFelixJettyGzipExcludedUserAgents,orgApacheFelixJettyGzipIncludedMethods,orgApacheFelixJettyGzipExcludedMethods,orgApacheFelixJettyGzipIncludedPaths,orgApacheFelixJettyGzipExcludedPaths,orgApacheFelixJettyGzipIncludedMimeTypes,orgApacheFelixJettyGzipExcludedMimeTypes,orgApacheFelixHttpSessionInvalidate,orgApacheFelixHttpSessionUniqueid,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.felix.http.sslfilter.SslFilter")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheFelixHttpSslfilterSslFilterInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheFelixHttpSslfilterSslFilterInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheFelixHttpSslfilterSslFilter(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("ssl-forward.header") String sslForwardHeader,  @QueryParam("ssl-forward.value") String sslForwardValue,  @QueryParam("ssl-forward-cert.header") String sslForwardCertHeader,  @QueryParam("rewrite.absolute.urls") Boolean rewriteAbsoluteUrls,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheFelixHttpSslfilterSslFilter(post,apply,delete,action,$location,propertylist,sslForwardHeader,sslForwardValue,sslForwardCertHeader,rewriteAbsoluteUrls,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.felix.jaas.Configuration.factory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheFelixJaasConfigurationFactoryInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheFelixJaasConfigurationFactoryInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheFelixJaasConfigurationFactory(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("jaas.controlFlag") String jaasControlFlag,  @QueryParam("jaas.ranking") Integer jaasRanking,  @QueryParam("jaas.realmName") String jaasRealmName,  @QueryParam("jaas.classname") String jaasClassname,  @QueryParam("jaas.options") List<String> jaasOptions,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheFelixJaasConfigurationFactory(post,apply,delete,action,$location,propertylist,jaasControlFlag,jaasRanking,jaasRealmName,jaasClassname,jaasOptions,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.felix.jaas.ConfigurationSpi")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheFelixJaasConfigurationSpiInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheFelixJaasConfigurationSpiInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheFelixJaasConfigurationSpi(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("jaas.defaultRealmName") String jaasDefaultRealmName,  @QueryParam("jaas.configProviderName") String jaasConfigProviderName,  @QueryParam("jaas.globalConfigPolicy") String jaasGlobalConfigPolicy,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheFelixJaasConfigurationSpi(post,apply,delete,action,$location,propertylist,jaasDefaultRealmName,jaasConfigProviderName,jaasGlobalConfigPolicy,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.felix.scr.ScrService")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheFelixScrScrServiceInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheFelixScrScrServiceInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheFelixScrScrService(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("ds.loglevel") Integer dsLoglevel,  @QueryParam("ds.factory.enabled") Boolean dsFactoryEnabled,  @QueryParam("ds.delayed.keepInstances") Boolean dsDelayedKeepInstances,  @QueryParam("ds.lock.timeout.milliseconds") Integer dsLockTimeoutMilliseconds,  @QueryParam("ds.stop.timeout.milliseconds") Integer dsStopTimeoutMilliseconds,  @QueryParam("ds.global.extender") Boolean dsGlobalExtender,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheFelixScrScrService(post,apply,delete,action,$location,propertylist,dsLoglevel,dsFactoryEnabled,dsDelayedKeepInstances,dsLockTimeoutMilliseconds,dsStopTimeoutMilliseconds,dsGlobalExtender,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.felix.systemready.impl.ComponentsCheck")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheFelixSystemreadyImplComponentsCheckInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheFelixSystemreadyImplComponentsCheckInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheFelixSystemreadyImplComponentsCheck(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("components.list") List<String> componentsList,  @QueryParam("type") String type,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheFelixSystemreadyImplComponentsCheck(post,apply,delete,action,$location,propertylist,componentsList,type,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.felix.systemready.impl.FrameworkStartCheck")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheFelixSystemreadyImplFrameworkStartCheck(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("timeout") Integer timeout,  @QueryParam("target.start.level") Integer targetStartLevel,  @QueryParam("target.start.level.prop.name") String targetStartLevelPropName,  @QueryParam("type") String type,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheFelixSystemreadyImplFrameworkStartCheck(post,apply,delete,action,$location,propertylist,timeout,targetStartLevel,targetStartLevelPropName,type,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.felix.systemready.impl.ServicesCheck")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheFelixSystemreadyImplServicesCheckInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheFelixSystemreadyImplServicesCheckInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheFelixSystemreadyImplServicesCheck(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("services.list") List<String> servicesList,  @QueryParam("type") String type,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheFelixSystemreadyImplServicesCheck(post,apply,delete,action,$location,propertylist,servicesList,type,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemAliveServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheFelixSystemreadyImplServletSystemAliveServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("osgi.http.whiteboard.servlet.pattern") String osgiHttpWhiteboardServletPattern,  @QueryParam("osgi.http.whiteboard.context.select") String osgiHttpWhiteboardContextSelect,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheFelixSystemreadyImplServletSystemAliveServlet(post,apply,delete,action,$location,propertylist,osgiHttpWhiteboardServletPattern,osgiHttpWhiteboardContextSelect,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemReadyServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheFelixSystemreadyImplServletSystemReadyServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("osgi.http.whiteboard.servlet.pattern") String osgiHttpWhiteboardServletPattern,  @QueryParam("osgi.http.whiteboard.context.select") String osgiHttpWhiteboardContextSelect,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheFelixSystemreadyImplServletSystemReadyServlet(post,apply,delete,action,$location,propertylist,osgiHttpWhiteboardServletPattern,osgiHttpWhiteboardContextSelect,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.felix.systemready.SystemReadyMonitor")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheFelixSystemreadySystemReadyMonitorInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheFelixSystemreadySystemReadyMonitorInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheFelixSystemreadySystemReadyMonitor(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("poll.interval") Integer pollInterval,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheFelixSystemreadySystemReadyMonitor(post,apply,delete,action,$location,propertylist,pollInterval,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.felix.webconsole.internal.servlet.OsgiManager")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheFelixWebconsoleInternalServletOsgiManager(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("manager.root") String managerRoot,  @QueryParam("http.service.filter") String httpServiceFilter,  @QueryParam("default.render") String defaultRender,  @QueryParam("realm") String realm,  @QueryParam("username") String username,  @QueryParam("password") String password,  @QueryParam("category") String category,  @QueryParam("locale") String locale,  @QueryParam("loglevel") Integer loglevel,  @QueryParam("plugins") String plugins,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheFelixWebconsoleInternalServletOsgiManager(post,apply,delete,action,$location,propertylist,managerRoot,httpServiceFilter,defaultRender,realm,username,password,category,locale,loglevel,plugins,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.felix.webconsole.plugins.event.internal.PluginServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheFelixWebconsolePluginsEventInternalPluginServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("max.size") Integer maxSize,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheFelixWebconsolePluginsEventInternalPluginServlet(post,apply,delete,action,$location,propertylist,maxSize,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.felix.webconsole.plugins.memoryusage.internal.MemoryUsageConfigurator")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("felix.memoryusage.dump.threshold") Integer felixMemoryusageDumpThreshold,  @QueryParam("felix.memoryusage.dump.interval") Integer felixMemoryusageDumpInterval,  @QueryParam("felix.memoryusage.dump.location") String felixMemoryusageDumpLocation,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo(post,apply,delete,action,$location,propertylist,felixMemoryusageDumpThreshold,felixMemoryusageDumpInterval,felixMemoryusageDumpLocation,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.http.proxyconfigurator")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheHttpProxyconfiguratorInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheHttpProxyconfiguratorInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheHttpProxyconfigurator(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("proxy.enabled") Boolean proxyEnabled,  @QueryParam("proxy.host") String proxyHost,  @QueryParam("proxy.port") Integer proxyPort,  @QueryParam("proxy.user") String proxyUser,  @QueryParam("proxy.password") String proxyPassword,  @QueryParam("proxy.exceptions") List<String> proxyExceptions,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheHttpProxyconfigurator(post,apply,delete,action,$location,propertylist,proxyEnabled,proxyHost,proxyPort,proxyUser,proxyPassword,proxyExceptions,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreTextProviderService")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("dir") String dir,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider(post,apply,delete,action,$location,propertylist,dir,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.FileDataStore")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("path") String path,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore(post,apply,delete,action,$location,propertylist,path,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreService")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("mongouri") String mongouri,  @QueryParam("db") String db,  @QueryParam("socketKeepAlive") Boolean socketKeepAlive,  @QueryParam("cache") Integer cache,  @QueryParam("nodeCachePercentage") Integer nodeCachePercentage,  @QueryParam("prevDocCachePercentage") Integer prevDocCachePercentage,  @QueryParam("childrenCachePercentage") Integer childrenCachePercentage,  @QueryParam("diffCachePercentage") Integer diffCachePercentage,  @QueryParam("cacheSegmentCount") Integer cacheSegmentCount,  @QueryParam("cacheStackMoveDistance") Integer cacheStackMoveDistance,  @QueryParam("blobCacheSize") Integer blobCacheSize,  @QueryParam("persistentCache") String persistentCache,  @QueryParam("journalCache") String journalCache,  @QueryParam("customBlobStore") Boolean customBlobStore,  @QueryParam("journalGCInterval") Integer journalGCInterval,  @QueryParam("journalGCMaxAge") Integer journalGCMaxAge,  @QueryParam("prefetchExternalChanges") Boolean prefetchExternalChanges,  @QueryParam("role") String role,  @QueryParam("versionGcMaxAgeInSecs") Integer versionGcMaxAgeInSecs,  @QueryParam("versionGCExpression") String versionGCExpression,  @QueryParam("versionGCTimeLimitInSecs") Integer versionGCTimeLimitInSecs,  @QueryParam("blobGcMaxAgeInSecs") Integer blobGcMaxAgeInSecs,  @QueryParam("blobTrackSnapshotIntervalInSecs") Integer blobTrackSnapshotIntervalInSecs,  @QueryParam("repository.home") String repositoryHome,  @QueryParam("maxReplicationLagInSecs") Integer maxReplicationLagInSecs,  @QueryParam("documentStoreType") String documentStoreType,  @QueryParam("bundlingDisabled") Boolean bundlingDisabled,  @QueryParam("updateLimit") Integer updateLimit,  @QueryParam("persistentCacheIncludes") List<String> persistentCacheIncludes,  @QueryParam("leaseCheckMode") String leaseCheckMode,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService(post,apply,delete,action,$location,propertylist,mongouri,db,socketKeepAlive,cache,nodeCachePercentage,prevDocCachePercentage,childrenCachePercentage,diffCachePercentage,cacheSegmentCount,cacheStackMoveDistance,blobCacheSize,persistentCache,journalCache,customBlobStore,journalGCInterval,journalGCMaxAge,prefetchExternalChanges,role,versionGcMaxAgeInSecs,versionGCExpression,versionGCTimeLimitInSecs,blobGcMaxAgeInSecs,blobTrackSnapshotIntervalInSecs,repositoryHome,maxReplicationLagInSecs,documentStoreType,bundlingDisabled,updateLimit,persistentCacheIncludes,leaseCheckMode,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreServicePreset")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("persistentCacheIncludes") List<String> persistentCacheIncludes,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre(post,apply,delete,action,$location,propertylist,persistentCacheIncludes,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.plugins.document.secondary.SecondaryStoreCacheService")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("includedPaths") List<String> includedPaths,  @QueryParam("enableAsyncObserver") Boolean enableAsyncObserver,  @QueryParam("observerQueueSize") Integer observerQueueSize,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac(post,apply,delete,action,$location,propertylist,includedPaths,enableAsyncObserver,observerQueueSize,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.plugins.index.AsyncIndexerService")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakPluginsIndexAsyncIndexerService(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("asyncConfigs") List<String> asyncConfigs,  @QueryParam("leaseTimeOutMinutes") Integer leaseTimeOutMinutes,  @QueryParam("failingIndexTimeoutSeconds") Integer failingIndexTimeoutSeconds,  @QueryParam("errorWarnIntervalSeconds") Integer errorWarnIntervalSeconds,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheJackrabbitOakPluginsIndexAsyncIndexerService(post,apply,delete,action,$location,propertylist,asyncConfigs,leaseTimeOutMinutes,failingIndexTimeoutSeconds,errorWarnIntervalSeconds,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexProviderService")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("disabled") Boolean disabled,  @QueryParam("debug") Boolean debug,  @QueryParam("localIndexDir") String localIndexDir,  @QueryParam("enableOpenIndexAsync") Boolean enableOpenIndexAsync,  @QueryParam("threadPoolSize") Integer threadPoolSize,  @QueryParam("prefetchIndexFiles") Boolean prefetchIndexFiles,  @QueryParam("extractedTextCacheSizeInMB") Integer extractedTextCacheSizeInMB,  @QueryParam("extractedTextCacheExpiryInSecs") Integer extractedTextCacheExpiryInSecs,  @QueryParam("alwaysUsePreExtractedCache") Boolean alwaysUsePreExtractedCache,  @QueryParam("booleanClauseLimit") Integer booleanClauseLimit,  @QueryParam("enableHybridIndexing") Boolean enableHybridIndexing,  @QueryParam("hybridQueueSize") Integer hybridQueueSize,  @QueryParam("disableStoredIndexDefinition") Boolean disableStoredIndexDefinition,  @QueryParam("deletedBlobsCollectionEnabled") Boolean deletedBlobsCollectionEnabled,  @QueryParam("propIndexCleanerIntervalInSecs") Integer propIndexCleanerIntervalInSecs,  @QueryParam("enableSingleBlobIndexFiles") Boolean enableSingleBlobIndexFiles,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ(post,apply,delete,action,$location,propertylist,disabled,debug,localIndexDir,enableOpenIndexAsync,threadPoolSize,prefetchIndexFiles,extractedTextCacheSizeInMB,extractedTextCacheExpiryInSecs,alwaysUsePreExtractedCache,booleanClauseLimit,enableHybridIndexing,hybridQueueSize,disableStoredIndexDefinition,deletedBlobsCollectionEnabled,propIndexCleanerIntervalInSecs,enableSingleBlobIndexFiles,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.EmbeddedSolrServerConfigurationProvider")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("solr.home.path") String solrHomePath,  @QueryParam("solr.core.name") String solrCoreName,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo(post,apply,delete,action,$location,propertylist,solrHomePath,solrCoreName,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.NodeStateSolrServersObserverService")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("enabled") Boolean enabled,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers(post,apply,delete,action,$location,propertylist,enabled,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.OakSolrConfigurationProviderService")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("path.desc.field") String pathDescField,  @QueryParam("path.child.field") String pathChildField,  @QueryParam("path.parent.field") String pathParentField,  @QueryParam("path.exact.field") String pathExactField,  @QueryParam("catch.all.field") String catchAllField,  @QueryParam("collapsed.path.field") String collapsedPathField,  @QueryParam("path.depth.field") String pathDepthField,  @QueryParam("commit.policy") String commitPolicy,  @QueryParam("rows") Integer rows,  @QueryParam("path.restrictions") Boolean pathRestrictions,  @QueryParam("property.restrictions") Boolean propertyRestrictions,  @QueryParam("primarytypes.restrictions") Boolean primarytypesRestrictions,  @QueryParam("ignored.properties") List<String> ignoredProperties,  @QueryParam("used.properties") List<String> usedProperties,  @QueryParam("type.mappings") List<String> typeMappings,  @QueryParam("property.mappings") List<String> propertyMappings,  @QueryParam("collapse.jcrcontent.nodes") Boolean collapseJcrcontentNodes,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration(post,apply,delete,action,$location,propertylist,pathDescField,pathChildField,pathParentField,pathExactField,catchAllField,collapsedPathField,pathDepthField,commitPolicy,rows,pathRestrictions,propertyRestrictions,primarytypesRestrictions,ignoredProperties,usedProperties,typeMappings,propertyMappings,collapseJcrcontentNodes,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.RemoteSolrServerConfigurationProvider")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("solr.http.url") String solrHttpUrl,  @QueryParam("solr.zk.host") String solrZkHost,  @QueryParam("solr.collection") String solrCollection,  @QueryParam("solr.socket.timeout") Integer solrSocketTimeout,  @QueryParam("solr.connection.timeout") Integer solrConnectionTimeout,  @QueryParam("solr.shards.no") Integer solrShardsNo,  @QueryParam("solr.replication.factor") Integer solrReplicationFactor,  @QueryParam("solr.conf.dir") String solrConfDir,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf(post,apply,delete,action,$location,propertylist,solrHttpUrl,solrZkHost,solrCollection,solrSocketTimeout,solrConnectionTimeout,solrShardsNo,solrReplicationFactor,solrConfDir,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrQueryIndexProviderService")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("query.aggregation") Boolean queryAggregation,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid(post,apply,delete,action,$location,propertylist,queryAggregation,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrServerProviderService")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("server.type") String serverType,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe(post,apply,delete,action,$location,propertylist,serverType,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.plugins.metric.StatisticsProviderFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("providerType") String providerType,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory(post,apply,delete,action,$location,propertylist,providerType,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.plugins.observation.ChangeCollectorProvider")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakPluginsObservationChangeCollectorProvider(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("maxItems") Integer maxItems,  @QueryParam("maxPathDepth") Integer maxPathDepth,  @QueryParam("enabled") Boolean enabled,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheJackrabbitOakPluginsObservationChangeCollectorProvider(post,apply,delete,action,$location,propertylist,maxItems,maxPathDepth,enabled,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.query.QueryEngineSettingsService")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakQueryQueryEngineSettingsService(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("queryLimitInMemory") Integer queryLimitInMemory,  @QueryParam("queryLimitReads") Integer queryLimitReads,  @QueryParam("queryFailTraversal") Boolean queryFailTraversal,  @QueryParam("fastQuerySize") Boolean fastQuerySize,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheJackrabbitOakQueryQueryEngineSettingsService(post,apply,delete,action,$location,propertylist,queryLimitInMemory,queryLimitReads,queryFailTraversal,fastQuerySize,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.security.authentication.AuthenticationConfigurationImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("org.apache.jackrabbit.oak.authentication.appName") String orgApacheJackrabbitOakAuthenticationAppName,  @QueryParam("org.apache.jackrabbit.oak.authentication.configSpiName") String orgApacheJackrabbitOakAuthenticationConfigSpiName,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig(post,apply,delete,action,$location,propertylist,orgApacheJackrabbitOakAuthenticationAppName,orgApacheJackrabbitOakAuthenticationConfigSpiName,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.security.authentication.ldap.impl.LdapIdentityProvider")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("provider.name") String providerName,  @QueryParam("host.name") String hostName,  @QueryParam("host.port") Integer hostPort,  @QueryParam("host.ssl") Boolean hostSsl,  @QueryParam("host.tls") Boolean hostTls,  @QueryParam("host.noCertCheck") Boolean hostNoCertCheck,  @QueryParam("bind.dn") String bindDn,  @QueryParam("bind.password") String bindPassword,  @QueryParam("searchTimeout") String searchTimeout,  @QueryParam("adminPool.maxActive") Integer adminPoolMaxActive,  @QueryParam("adminPool.lookupOnValidate") Boolean adminPoolLookupOnValidate,  @QueryParam("userPool.maxActive") Integer userPoolMaxActive,  @QueryParam("userPool.lookupOnValidate") Boolean userPoolLookupOnValidate,  @QueryParam("user.baseDN") String userBaseDN,  @QueryParam("user.objectclass") List<String> userObjectclass,  @QueryParam("user.idAttribute") String userIdAttribute,  @QueryParam("user.extraFilter") String userExtraFilter,  @QueryParam("user.makeDnPath") Boolean userMakeDnPath,  @QueryParam("group.baseDN") String groupBaseDN,  @QueryParam("group.objectclass") List<String> groupObjectclass,  @QueryParam("group.nameAttribute") String groupNameAttribute,  @QueryParam("group.extraFilter") String groupExtraFilter,  @QueryParam("group.makeDnPath") Boolean groupMakeDnPath,  @QueryParam("group.memberAttribute") String groupMemberAttribute,  @QueryParam("useUidForExtId") Boolean useUidForExtId,  @QueryParam("customattributes") List<String> customattributes,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti(post,apply,delete,action,$location,propertylist,providerName,hostName,hostPort,hostSsl,hostTls,hostNoCertCheck,bindDn,bindPassword,searchTimeout,adminPoolMaxActive,adminPoolLookupOnValidate,userPoolMaxActive,userPoolLookupOnValidate,userBaseDN,userObjectclass,userIdAttribute,userExtraFilter,userMakeDnPath,groupBaseDN,groupObjectclass,groupNameAttribute,groupExtraFilter,groupMakeDnPath,groupMemberAttribute,useUidForExtId,customattributes,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.security.authentication.token.TokenConfigurationImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("tokenExpiration") String tokenExpiration,  @QueryParam("tokenLength") String tokenLength,  @QueryParam("tokenRefresh") Boolean tokenRefresh,  @QueryParam("tokenCleanupThreshold") Integer tokenCleanupThreshold,  @QueryParam("passwordHashAlgorithm") String passwordHashAlgorithm,  @QueryParam("passwordHashIterations") Integer passwordHashIterations,  @QueryParam("passwordSaltSize") Integer passwordSaltSize,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura(post,apply,delete,action,$location,propertylist,tokenExpiration,tokenLength,tokenRefresh,tokenCleanupThreshold,passwordHashAlgorithm,passwordHashIterations,passwordSaltSize,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.security.authorization.AuthorizationConfigurationImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("permissionsJr2") String permissionsJr2,  @QueryParam("importBehavior") String importBehavior,  @QueryParam("readPaths") List<String> readPaths,  @QueryParam("administrativePrincipals") List<String> administrativePrincipals,  @QueryParam("configurationRanking") Integer configurationRanking,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur(post,apply,delete,action,$location,propertylist,permissionsJr2,importBehavior,readPaths,administrativePrincipals,configurationRanking,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.security.internal.SecurityProviderRegistration")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("requiredServicePids") List<String> requiredServicePids,  @QueryParam("authorizationCompositionType") String authorizationCompositionType,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati(post,apply,delete,action,$location,propertylist,requiredServicePids,authorizationCompositionType,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.security.user.RandomAuthorizableNodeName")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("length") Integer length,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName(post,apply,delete,action,$location,propertylist,length,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.security.user.UserConfigurationImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakSecurityUserUserConfigurationImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("usersPath") String usersPath,  @QueryParam("groupsPath") String groupsPath,  @QueryParam("systemRelativePath") String systemRelativePath,  @QueryParam("defaultDepth") Integer defaultDepth,  @QueryParam("importBehavior") String importBehavior,  @QueryParam("passwordHashAlgorithm") String passwordHashAlgorithm,  @QueryParam("passwordHashIterations") Integer passwordHashIterations,  @QueryParam("passwordSaltSize") Integer passwordSaltSize,  @QueryParam("omitAdminPw") Boolean omitAdminPw,  @QueryParam("supportAutoSave") Boolean supportAutoSave,  @QueryParam("passwordMaxAge") Integer passwordMaxAge,  @QueryParam("initialPasswordChange") Boolean initialPasswordChange,  @QueryParam("passwordHistorySize") Integer passwordHistorySize,  @QueryParam("passwordExpiryForAdmin") Boolean passwordExpiryForAdmin,  @QueryParam("cacheExpiration") Integer cacheExpiration,  @QueryParam("enableRFC7613UsercaseMappedProfile") Boolean enableRFC7613UsercaseMappedProfile,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheJackrabbitOakSecurityUserUserConfigurationImpl(post,apply,delete,action,$location,propertylist,usersPath,groupsPath,systemRelativePath,defaultDepth,importBehavior,passwordHashAlgorithm,passwordHashIterations,passwordSaltSize,omitAdminPw,supportAutoSave,passwordMaxAge,initialPasswordChange,passwordHistorySize,passwordExpiryForAdmin,cacheExpiration,enableRFC7613UsercaseMappedProfile,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.segment.azure.AzureSegmentStoreService")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("accountName") String accountName,  @QueryParam("containerName") String containerName,  @QueryParam("accessKey") String accessKey,  @QueryParam("rootPath") String rootPath,  @QueryParam("connectionURL") String connectionURL,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService(post,apply,delete,action,$location,propertylist,accountName,containerName,accessKey,rootPath,connectionURL,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakSegmentSegmentNodeStoreFactory(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("repository.home") String repositoryHome,  @QueryParam("tarmk.mode") String tarmkMode,  @QueryParam("tarmk.size") Integer tarmkSize,  @QueryParam("segmentCache.size") Integer segmentCacheSize,  @QueryParam("stringCache.size") Integer stringCacheSize,  @QueryParam("templateCache.size") Integer templateCacheSize,  @QueryParam("stringDeduplicationCache.size") Integer stringDeduplicationCacheSize,  @QueryParam("templateDeduplicationCache.size") Integer templateDeduplicationCacheSize,  @QueryParam("nodeDeduplicationCache.size") Integer nodeDeduplicationCacheSize,  @QueryParam("pauseCompaction") Boolean pauseCompaction,  @QueryParam("compaction.retryCount") Integer compactionRetryCount,  @QueryParam("compaction.force.timeout") Integer compactionForceTimeout,  @QueryParam("compaction.sizeDeltaEstimation") Integer compactionSizeDeltaEstimation,  @QueryParam("compaction.disableEstimation") Boolean compactionDisableEstimation,  @QueryParam("compaction.retainedGenerations") Integer compactionRetainedGenerations,  @QueryParam("compaction.memoryThreshold") Integer compactionMemoryThreshold,  @QueryParam("compaction.progressLog") Integer compactionProgressLog,  @QueryParam("standby") Boolean standby,  @QueryParam("customBlobStore") Boolean customBlobStore,  @QueryParam("customSegmentStore") Boolean customSegmentStore,  @QueryParam("splitPersistence") Boolean splitPersistence,  @QueryParam("repository.backup.dir") String repositoryBackupDir,  @QueryParam("blobGcMaxAgeInSecs") Integer blobGcMaxAgeInSecs,  @QueryParam("blobTrackSnapshotIntervalInSecs") Integer blobTrackSnapshotIntervalInSecs,  @QueryParam("role") String role,  @QueryParam("registerDescriptors") Boolean registerDescriptors,  @QueryParam("dispatchChanges") Boolean dispatchChanges,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheJackrabbitOakSegmentSegmentNodeStoreFactory(post,apply,delete,action,$location,propertylist,repositoryHome,tarmkMode,tarmkSize,segmentCacheSize,stringCacheSize,templateCacheSize,stringDeduplicationCacheSize,templateDeduplicationCacheSize,nodeDeduplicationCacheSize,pauseCompaction,compactionRetryCount,compactionForceTimeout,compactionSizeDeltaEstimation,compactionDisableEstimation,compactionRetainedGenerations,compactionMemoryThreshold,compactionProgressLog,standby,customBlobStore,customSegmentStore,splitPersistence,repositoryBackupDir,blobGcMaxAgeInSecs,blobTrackSnapshotIntervalInSecs,role,registerDescriptors,dispatchChanges,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreMonitorService")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("commitsTrackerWriterGroups") List<String> commitsTrackerWriterGroups,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService(post,apply,delete,action,$location,propertylist,commitsTrackerWriterGroups,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreService")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakSegmentSegmentNodeStoreService(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("repository.home") String repositoryHome,  @QueryParam("tarmk.mode") String tarmkMode,  @QueryParam("tarmk.size") Integer tarmkSize,  @QueryParam("segmentCache.size") Integer segmentCacheSize,  @QueryParam("stringCache.size") Integer stringCacheSize,  @QueryParam("templateCache.size") Integer templateCacheSize,  @QueryParam("stringDeduplicationCache.size") Integer stringDeduplicationCacheSize,  @QueryParam("templateDeduplicationCache.size") Integer templateDeduplicationCacheSize,  @QueryParam("nodeDeduplicationCache.size") Integer nodeDeduplicationCacheSize,  @QueryParam("pauseCompaction") Boolean pauseCompaction,  @QueryParam("compaction.retryCount") Integer compactionRetryCount,  @QueryParam("compaction.force.timeout") Integer compactionForceTimeout,  @QueryParam("compaction.sizeDeltaEstimation") Integer compactionSizeDeltaEstimation,  @QueryParam("compaction.disableEstimation") Boolean compactionDisableEstimation,  @QueryParam("compaction.retainedGenerations") Integer compactionRetainedGenerations,  @QueryParam("compaction.memoryThreshold") Integer compactionMemoryThreshold,  @QueryParam("compaction.progressLog") Integer compactionProgressLog,  @QueryParam("standby") Boolean standby,  @QueryParam("customBlobStore") Boolean customBlobStore,  @QueryParam("customSegmentStore") Boolean customSegmentStore,  @QueryParam("splitPersistence") Boolean splitPersistence,  @QueryParam("repository.backup.dir") String repositoryBackupDir,  @QueryParam("blobGcMaxAgeInSecs") Integer blobGcMaxAgeInSecs,  @QueryParam("blobTrackSnapshotIntervalInSecs") Integer blobTrackSnapshotIntervalInSecs,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheJackrabbitOakSegmentSegmentNodeStoreService(post,apply,delete,action,$location,propertylist,repositoryHome,tarmkMode,tarmkSize,segmentCacheSize,stringCacheSize,templateCacheSize,stringDeduplicationCacheSize,templateDeduplicationCacheSize,nodeDeduplicationCacheSize,pauseCompaction,compactionRetryCount,compactionForceTimeout,compactionSizeDeltaEstimation,compactionDisableEstimation,compactionRetainedGenerations,compactionMemoryThreshold,compactionProgressLog,standby,customBlobStore,customSegmentStore,splitPersistence,repositoryBackupDir,blobGcMaxAgeInSecs,blobTrackSnapshotIntervalInSecs,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.segment.standby.store.StandbyStoreService")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("org.apache.sling.installer.configuration.persist") Boolean orgApacheSlingInstallerConfigurationPersist,  @QueryParam("mode") String mode,  @QueryParam("port") Integer port,  @QueryParam("primary.host") String primaryHost,  @QueryParam("interval") Integer interval,  @QueryParam("primary.allowed-client-ip-ranges") List<String> primaryAllowedClientIpRanges,  @QueryParam("secure") Boolean secure,  @QueryParam("standby.readtimeout") Integer standbyReadtimeout,  @QueryParam("standby.autoclean") Boolean standbyAutoclean,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService(post,apply,delete,action,$location,propertylist,orgApacheSlingInstallerConfigurationPersist,mode,port,primaryHost,interval,primaryAllowedClientIpRanges,secure,standbyReadtimeout,standbyAutoclean,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.DefaultSyncHandler")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("handler.name") String handlerName,  @QueryParam("user.expirationTime") String userExpirationTime,  @QueryParam("user.autoMembership") List<String> userAutoMembership,  @QueryParam("user.propertyMapping") List<String> userPropertyMapping,  @QueryParam("user.pathPrefix") String userPathPrefix,  @QueryParam("user.membershipExpTime") String userMembershipExpTime,  @QueryParam("user.membershipNestingDepth") Integer userMembershipNestingDepth,  @QueryParam("user.dynamicMembership") Boolean userDynamicMembership,  @QueryParam("user.disableMissing") Boolean userDisableMissing,  @QueryParam("group.expirationTime") String groupExpirationTime,  @QueryParam("group.autoMembership") List<String> groupAutoMembership,  @QueryParam("group.propertyMapping") List<String> groupPropertyMapping,  @QueryParam("group.pathPrefix") String groupPathPrefix,  @QueryParam("enableRFC7613UsercaseMappedProfile") Boolean enableRFC7613UsercaseMappedProfile,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe(post,apply,delete,action,$location,propertylist,handlerName,userExpirationTime,userAutoMembership,userPropertyMapping,userPathPrefix,userMembershipExpTime,userMembershipNestingDepth,userDynamicMembership,userDisableMissing,groupExpirationTime,groupAutoMembership,groupPropertyMapping,groupPathPrefix,enableRFC7613UsercaseMappedProfile,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.ExternalLoginModuleFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("jaas.ranking") Integer jaasRanking,  @QueryParam("jaas.controlFlag") String jaasControlFlag,  @QueryParam("jaas.realmName") String jaasRealmName,  @QueryParam("idp.name") String idpName,  @QueryParam("sync.handlerName") String syncHandlerName,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx(post,apply,delete,action,$location,propertylist,jaasRanking,jaasControlFlag,jaasRealmName,idpName,syncHandlerName,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.principal.ExternalPrincipalConfiguration")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("protectExternalId") Boolean protectExternalId,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr(post,apply,delete,action,$location,propertylist,protectExternalId,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugConfiguration")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("cugSupportedPaths") List<String> cugSupportedPaths,  @QueryParam("cugEnabled") Boolean cugEnabled,  @QueryParam("configurationRanking") Integer configurationRanking,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi(post,apply,delete,action,$location,propertylist,cugSupportedPaths,cugEnabled,configurationRanking,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugExcludeImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("principalNames") List<String> principalNames,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu(post,apply,delete,action,$location,propertylist,principalNames,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.oak.spi.security.user.action.DefaultAuthorizableActionProvider")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("enabledActions") String enabledActions,  @QueryParam("userPrivilegeNames") List<String> userPrivilegeNames,  @QueryParam("groupPrivilegeNames") List<String> groupPrivilegeNames,  @QueryParam("constraint") String constraint,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable(post,apply,delete,action,$location,propertylist,enabledActions,userPrivilegeNames,groupPrivilegeNames,constraint,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.vault.packaging.impl.PackagingImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitVaultPackagingImplPackagingImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("packageRoots") List<String> packageRoots,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheJackrabbitVaultPackagingImplPackagingImpl(post,apply,delete,action,$location,propertylist,packageRoots,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.jackrabbit.vault.packaging.registry.impl.FSPackageRegistry")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("homePath") String homePath,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry(post,apply,delete,action,$location,propertylist,homePath,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.auth.core.impl.LogoutServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingAuthCoreImplLogoutServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingAuthCoreImplLogoutServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingAuthCoreImplLogoutServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("sling.servlet.methods") List<String> slingServletMethods,  @QueryParam("sling.servlet.paths") String slingServletPaths,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingAuthCoreImplLogoutServlet(post,apply,delete,action,$location,propertylist,slingServletMethods,slingServletPaths,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationBindingsValueProvider")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingCaconfigImplConfigurationBindingsValueProvider(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("enabled") Boolean enabled,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingCaconfigImplConfigurationBindingsValueProvider(post,apply,delete,action,$location,propertylist,enabled,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationResolverImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingCaconfigImplConfigurationResolverImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingCaconfigImplConfigurationResolverImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingCaconfigImplConfigurationResolverImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("configBucketNames") List<String> configBucketNames,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingCaconfigImplConfigurationResolverImpl(post,apply,delete,action,$location,propertylist,configBucketNames,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationInheritanceStrategy")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("enabled") Boolean enabled,  @QueryParam("configPropertyInheritancePropertyNames") List<String> configPropertyInheritancePropertyNames,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra(post,apply,delete,action,$location,propertylist,enabled,configPropertyInheritancePropertyNames,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationPersistenceStrategy")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("enabled") Boolean enabled,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra(post,apply,delete,action,$location,propertylist,enabled,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.caconfig.impl.override.OsgiConfigurationOverrideProvider")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("description") String description,  @QueryParam("overrides") List<String> overrides,  @QueryParam("enabled") Boolean enabled,  @QueryParam("service.ranking") Integer serviceRanking,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi(post,apply,delete,action,$location,propertylist,description,overrides,enabled,serviceRanking,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.caconfig.impl.override.SystemPropertyConfigurationOverrideProvider")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("enabled") Boolean enabled,  @QueryParam("service.ranking") Integer serviceRanking,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve(post,apply,delete,action,$location,propertylist,enabled,serviceRanking,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.caconfig.management.impl.ConfigurationManagementSettingsImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingCaconfigManagementImplConfigurationManagementSetti(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("ignorePropertyNameRegex") List<String> ignorePropertyNameRegex,  @QueryParam("configCollectionPropertiesResourceNames") List<String> configCollectionPropertiesResourceNames,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingCaconfigManagementImplConfigurationManagementSetti(post,apply,delete,action,$location,propertylist,ignorePropertyNameRegex,configCollectionPropertiesResourceNames,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultConfigurationResourceResolvingStrategy")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("enabled") Boolean enabled,  @QueryParam("configPath") String configPath,  @QueryParam("fallbackPaths") List<String> fallbackPaths,  @QueryParam("configCollectionInheritancePropertyNames") List<String> configCollectionInheritancePropertyNames,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour(post,apply,delete,action,$location,propertylist,enabled,configPath,fallbackPaths,configCollectionInheritancePropertyNames,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultContextPathStrategy")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("enabled") Boolean enabled,  @QueryParam("configRefResourceNames") List<String> configRefResourceNames,  @QueryParam("configRefPropertyNames") List<String> configRefPropertyNames,  @QueryParam("service.ranking") Integer serviceRanking,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy(post,apply,delete,action,$location,propertylist,enabled,configRefResourceNames,configRefPropertyNames,serviceRanking,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.commons.html.internal.TagsoupHtmlParser")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingCommonsHtmlInternalTagsoupHtmlParser(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("parser.features") List<String> parserFeatures,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingCommonsHtmlInternalTagsoupHtmlParser(post,apply,delete,action,$location,propertylist,parserFeatures,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.commons.log.LogManager")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingCommonsLogLogManagerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingCommonsLogLogManagerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingCommonsLogLogManager(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("org.apache.sling.commons.log.level") String orgApacheSlingCommonsLogLevel,  @QueryParam("org.apache.sling.commons.log.file") String orgApacheSlingCommonsLogFile,  @QueryParam("org.apache.sling.commons.log.file.number") Integer orgApacheSlingCommonsLogFileNumber,  @QueryParam("org.apache.sling.commons.log.file.size") String orgApacheSlingCommonsLogFileSize,  @QueryParam("org.apache.sling.commons.log.pattern") String orgApacheSlingCommonsLogPattern,  @QueryParam("org.apache.sling.commons.log.configurationFile") String orgApacheSlingCommonsLogConfigurationFile,  @QueryParam("org.apache.sling.commons.log.packagingDataEnabled") Boolean orgApacheSlingCommonsLogPackagingDataEnabled,  @QueryParam("org.apache.sling.commons.log.maxCallerDataDepth") Integer orgApacheSlingCommonsLogMaxCallerDataDepth,  @QueryParam("org.apache.sling.commons.log.maxOldFileCountInDump") Integer orgApacheSlingCommonsLogMaxOldFileCountInDump,  @QueryParam("org.apache.sling.commons.log.numOfLines") Integer orgApacheSlingCommonsLogNumOfLines,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingCommonsLogLogManager(post,apply,delete,action,$location,propertylist,orgApacheSlingCommonsLogLevel,orgApacheSlingCommonsLogFile,orgApacheSlingCommonsLogFileNumber,orgApacheSlingCommonsLogFileSize,orgApacheSlingCommonsLogPattern,orgApacheSlingCommonsLogConfigurationFile,orgApacheSlingCommonsLogPackagingDataEnabled,orgApacheSlingCommonsLogMaxCallerDataDepth,orgApacheSlingCommonsLogMaxOldFileCountInDump,orgApacheSlingCommonsLogNumOfLines,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.commons.log.LogManager.factory.config")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingCommonsLogLogManagerFactoryConfig(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("org.apache.sling.commons.log.level") String orgApacheSlingCommonsLogLevel,  @QueryParam("org.apache.sling.commons.log.file") String orgApacheSlingCommonsLogFile,  @QueryParam("org.apache.sling.commons.log.pattern") String orgApacheSlingCommonsLogPattern,  @QueryParam("org.apache.sling.commons.log.names") List<String> orgApacheSlingCommonsLogNames,  @QueryParam("org.apache.sling.commons.log.additiv") Boolean orgApacheSlingCommonsLogAdditiv,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingCommonsLogLogManagerFactoryConfig(post,apply,delete,action,$location,propertylist,orgApacheSlingCommonsLogLevel,orgApacheSlingCommonsLogFile,orgApacheSlingCommonsLogPattern,orgApacheSlingCommonsLogNames,orgApacheSlingCommonsLogAdditiv,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.commons.log.LogManager.factory.writer")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingCommonsLogLogManagerFactoryWriter(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("org.apache.sling.commons.log.file") String orgApacheSlingCommonsLogFile,  @QueryParam("org.apache.sling.commons.log.file.number") Integer orgApacheSlingCommonsLogFileNumber,  @QueryParam("org.apache.sling.commons.log.file.size") String orgApacheSlingCommonsLogFileSize,  @QueryParam("org.apache.sling.commons.log.file.buffered") Boolean orgApacheSlingCommonsLogFileBuffered,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingCommonsLogLogManagerFactoryWriter(post,apply,delete,action,$location,propertylist,orgApacheSlingCommonsLogFile,orgApacheSlingCommonsLogFileNumber,orgApacheSlingCommonsLogFileSize,orgApacheSlingCommonsLogFileBuffered,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.commons.metrics.internal.LogReporter")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingCommonsMetricsInternalLogReporterInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingCommonsMetricsInternalLogReporterInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingCommonsMetricsInternalLogReporter(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("period") Integer period,  @QueryParam("timeUnit") String timeUnit,  @QueryParam("level") String level,  @QueryParam("loggerName") String loggerName,  @QueryParam("prefix") String prefix,  @QueryParam("pattern") String pattern,  @QueryParam("registryName") String registryName,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingCommonsMetricsInternalLogReporter(post,apply,delete,action,$location,propertylist,period,timeUnit,level,loggerName,prefix,pattern,registryName,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.commons.metrics.rrd4j.impl.CodahaleMetricsReporter")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("datasources") List<String> datasources,  @QueryParam("step") Integer step,  @QueryParam("archives") List<String> archives,  @QueryParam("path") String path,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter(post,apply,delete,action,$location,propertylist,datasources,step,archives,path,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.commons.mime.internal.MimeTypeServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingCommonsMimeInternalMimeTypeServiceImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("mime.types") List<String> mimeTypes,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingCommonsMimeInternalMimeTypeServiceImpl(post,apply,delete,action,$location,propertylist,mimeTypes,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.commons.scheduler.impl.QuartzScheduler")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingCommonsSchedulerImplQuartzScheduler(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("poolName") String poolName,  @QueryParam("allowedPoolNames") List<String> allowedPoolNames,  @QueryParam("scheduler.useleaderforsingle") Boolean schedulerUseleaderforsingle,  @QueryParam("metrics.filters") List<String> metricsFilters,  @QueryParam("slowThresholdMillis") Integer slowThresholdMillis,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingCommonsSchedulerImplQuartzScheduler(post,apply,delete,action,$location,propertylist,poolName,allowedPoolNames,schedulerUseleaderforsingle,metricsFilters,slowThresholdMillis,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.commons.scheduler.impl.SchedulerHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingCommonsSchedulerImplSchedulerHealthCheck(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("max.quartzJob.duration.acceptable") Integer maxQuartzJobDurationAcceptable,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingCommonsSchedulerImplSchedulerHealthCheck(post,apply,delete,action,$location,propertylist,maxQuartzJobDurationAcceptable,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.commons.threads.impl.DefaultThreadPool.factory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("name") String name,  @QueryParam("minPoolSize") Integer minPoolSize,  @QueryParam("maxPoolSize") Integer maxPoolSize,  @QueryParam("queueSize") Integer queueSize,  @QueryParam("maxThreadAge") Integer maxThreadAge,  @QueryParam("keepAliveTime") Integer keepAliveTime,  @QueryParam("blockPolicy") String blockPolicy,  @QueryParam("shutdownGraceful") Boolean shutdownGraceful,  @QueryParam("daemon") Boolean daemon,  @QueryParam("shutdownWaitTime") Integer shutdownWaitTime,  @QueryParam("priority") String priority,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory(post,apply,delete,action,$location,propertylist,name,minPoolSize,maxPoolSize,queueSize,maxThreadAge,keepAliveTime,blockPolicy,shutdownGraceful,daemon,shutdownWaitTime,priority,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.datasource.DataSourceFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingDatasourceDataSourceFactoryInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDatasourceDataSourceFactoryInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingDatasourceDataSourceFactory(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("datasource.name") String datasourceName,  @QueryParam("datasource.svc.prop.name") String datasourceSvcPropName,  @QueryParam("driverClassName") String driverClassName,  @QueryParam("url") String url,  @QueryParam("username") String username,  @QueryParam("password") String password,  @QueryParam("defaultAutoCommit") String defaultAutoCommit,  @QueryParam("defaultReadOnly") String defaultReadOnly,  @QueryParam("defaultTransactionIsolation") String defaultTransactionIsolation,  @QueryParam("defaultCatalog") String defaultCatalog,  @QueryParam("maxActive") Integer maxActive,  @QueryParam("maxIdle") Integer maxIdle,  @QueryParam("minIdle") Integer minIdle,  @QueryParam("initialSize") Integer initialSize,  @QueryParam("maxWait") Integer maxWait,  @QueryParam("maxAge") Integer maxAge,  @QueryParam("testOnBorrow") Boolean testOnBorrow,  @QueryParam("testOnReturn") Boolean testOnReturn,  @QueryParam("testWhileIdle") Boolean testWhileIdle,  @QueryParam("validationQuery") String validationQuery,  @QueryParam("validationQueryTimeout") Integer validationQueryTimeout,  @QueryParam("timeBetweenEvictionRunsMillis") Integer timeBetweenEvictionRunsMillis,  @QueryParam("minEvictableIdleTimeMillis") Integer minEvictableIdleTimeMillis,  @QueryParam("connectionProperties") String connectionProperties,  @QueryParam("initSQL") String initSQL,  @QueryParam("jdbcInterceptors") String jdbcInterceptors,  @QueryParam("validationInterval") Integer validationInterval,  @QueryParam("logValidationErrors") Boolean logValidationErrors,  @QueryParam("datasource.svc.properties") List<String> datasourceSvcProperties,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingDatasourceDataSourceFactory(post,apply,delete,action,$location,propertylist,datasourceName,datasourceSvcPropName,driverClassName,url,username,password,defaultAutoCommit,defaultReadOnly,defaultTransactionIsolation,defaultCatalog,maxActive,maxIdle,minIdle,initialSize,maxWait,maxAge,testOnBorrow,testOnReturn,testWhileIdle,validationQuery,validationQueryTimeout,timeBetweenEvictionRunsMillis,minEvictableIdleTimeMillis,connectionProperties,initSQL,jdbcInterceptors,validationInterval,logValidationErrors,datasourceSvcProperties,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.datasource.JNDIDataSourceFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingDatasourceJNDIDataSourceFactory(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("datasource.name") String datasourceName,  @QueryParam("datasource.svc.prop.name") String datasourceSvcPropName,  @QueryParam("datasource.jndi.name") String datasourceJndiName,  @QueryParam("jndi.properties") List<String> jndiProperties,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingDatasourceJNDIDataSourceFactory(post,apply,delete,action,$location,propertylist,datasourceName,datasourceSvcPropName,datasourceJndiName,jndiProperties,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.discovery.oak.Config")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingDiscoveryOakConfigInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDiscoveryOakConfigInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingDiscoveryOakConfig(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("connectorPingTimeout") Integer connectorPingTimeout,  @QueryParam("connectorPingInterval") Integer connectorPingInterval,  @QueryParam("discoveryLiteCheckInterval") Integer discoveryLiteCheckInterval,  @QueryParam("clusterSyncServiceTimeout") Integer clusterSyncServiceTimeout,  @QueryParam("clusterSyncServiceInterval") Integer clusterSyncServiceInterval,  @QueryParam("enableSyncToken") Boolean enableSyncToken,  @QueryParam("minEventDelay") Integer minEventDelay,  @QueryParam("socketConnectTimeout") Integer socketConnectTimeout,  @QueryParam("soTimeout") Integer soTimeout,  @QueryParam("topologyConnectorUrls") List<String> topologyConnectorUrls,  @QueryParam("topologyConnectorWhitelist") List<String> topologyConnectorWhitelist,  @QueryParam("autoStopLocalLoopEnabled") Boolean autoStopLocalLoopEnabled,  @QueryParam("gzipConnectorRequestsEnabled") Boolean gzipConnectorRequestsEnabled,  @QueryParam("hmacEnabled") Boolean hmacEnabled,  @QueryParam("enableEncryption") Boolean enableEncryption,  @QueryParam("sharedKey") String sharedKey,  @QueryParam("hmacSharedKeyTTL") Integer hmacSharedKeyTTL,  @QueryParam("backoffStandbyFactor") String backoffStandbyFactor,  @QueryParam("backoffStableFactor") String backoffStableFactor,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingDiscoveryOakConfig(post,apply,delete,action,$location,propertylist,connectorPingTimeout,connectorPingInterval,discoveryLiteCheckInterval,clusterSyncServiceTimeout,clusterSyncServiceInterval,enableSyncToken,minEventDelay,socketConnectTimeout,soTimeout,topologyConnectorUrls,topologyConnectorWhitelist,autoStopLocalLoopEnabled,gzipConnectorRequestsEnabled,hmacEnabled,enableEncryption,sharedKey,hmacSharedKeyTTL,backoffStandbyFactor,backoffStableFactor,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.discovery.oak.SynchronizedClocksHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("hc.name") String hcName,  @QueryParam("hc.tags") List<String> hcTags,  @QueryParam("hc.mbean.name") String hcMbeanName,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck(post,apply,delete,action,$location,propertylist,hcName,hcTags,hcMbeanName,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.distribution.agent.impl.ForwardDistributionAgentFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingDistributionAgentImplForwardDistributionAgentFacto(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("name") String name,  @QueryParam("title") String title,  @QueryParam("details") String details,  @QueryParam("enabled") Boolean enabled,  @QueryParam("serviceName") String serviceName,  @QueryParam("log.level") String logLevel,  @QueryParam("allowed.roots") List<String> allowedRoots,  @QueryParam("queue.processing.enabled") Boolean queueProcessingEnabled,  @QueryParam("packageImporter.endpoints") List<String> packageImporterEndpoints,  @QueryParam("passiveQueues") List<String> passiveQueues,  @QueryParam("priorityQueues") List<String> priorityQueues,  @QueryParam("retry.strategy") String retryStrategy,  @QueryParam("retry.attempts") Integer retryAttempts,  @QueryParam("requestAuthorizationStrategy.target") String requestAuthorizationStrategyTarget,  @QueryParam("transportSecretProvider.target") String transportSecretProviderTarget,  @QueryParam("packageBuilder.target") String packageBuilderTarget,  @QueryParam("triggers.target") String triggersTarget,  @QueryParam("queue.provider") String queueProvider,  @QueryParam("async.delivery") Boolean asyncDelivery,  @QueryParam("http.conn.timeout") Integer httpConnTimeout,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingDistributionAgentImplForwardDistributionAgentFacto(post,apply,delete,action,$location,propertylist,name,title,details,enabled,serviceName,logLevel,allowedRoots,queueProcessingEnabled,packageImporterEndpoints,passiveQueues,priorityQueues,retryStrategy,retryAttempts,requestAuthorizationStrategyTarget,transportSecretProviderTarget,packageBuilderTarget,triggersTarget,queueProvider,asyncDelivery,httpConnTimeout,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.distribution.agent.impl.PrivilegeDistributionRequestAuthorizationStrategyFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("name") String name,  @QueryParam("jcrPrivilege") String jcrPrivilege,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA(post,apply,delete,action,$location,propertylist,name,jcrPrivilege,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.distribution.agent.impl.QueueDistributionAgentFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingDistributionAgentImplQueueDistributionAgentFactory(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("name") String name,  @QueryParam("title") String title,  @QueryParam("details") String details,  @QueryParam("enabled") Boolean enabled,  @QueryParam("serviceName") String serviceName,  @QueryParam("log.level") String logLevel,  @QueryParam("allowed.roots") List<String> allowedRoots,  @QueryParam("requestAuthorizationStrategy.target") String requestAuthorizationStrategyTarget,  @QueryParam("queueProviderFactory.target") String queueProviderFactoryTarget,  @QueryParam("packageBuilder.target") String packageBuilderTarget,  @QueryParam("triggers.target") String triggersTarget,  @QueryParam("priorityQueues") List<String> priorityQueues,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingDistributionAgentImplQueueDistributionAgentFactory(post,apply,delete,action,$location,propertylist,name,title,details,enabled,serviceName,logLevel,allowedRoots,requestAuthorizationStrategyTarget,queueProviderFactoryTarget,packageBuilderTarget,triggersTarget,priorityQueues,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.distribution.agent.impl.ReverseDistributionAgentFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingDistributionAgentImplReverseDistributionAgentFacto(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("name") String name,  @QueryParam("title") String title,  @QueryParam("details") String details,  @QueryParam("enabled") Boolean enabled,  @QueryParam("serviceName") String serviceName,  @QueryParam("log.level") String logLevel,  @QueryParam("queue.processing.enabled") Boolean queueProcessingEnabled,  @QueryParam("packageExporter.endpoints") List<String> packageExporterEndpoints,  @QueryParam("pull.items") Integer pullItems,  @QueryParam("http.conn.timeout") Integer httpConnTimeout,  @QueryParam("requestAuthorizationStrategy.target") String requestAuthorizationStrategyTarget,  @QueryParam("transportSecretProvider.target") String transportSecretProviderTarget,  @QueryParam("packageBuilder.target") String packageBuilderTarget,  @QueryParam("triggers.target") String triggersTarget,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingDistributionAgentImplReverseDistributionAgentFacto(post,apply,delete,action,$location,propertylist,name,title,details,enabled,serviceName,logLevel,queueProcessingEnabled,packageExporterEndpoints,pullItems,httpConnTimeout,requestAuthorizationStrategyTarget,transportSecretProviderTarget,packageBuilderTarget,triggersTarget,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.distribution.agent.impl.SimpleDistributionAgentFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("name") String name,  @QueryParam("title") String title,  @QueryParam("details") String details,  @QueryParam("enabled") Boolean enabled,  @QueryParam("serviceName") String serviceName,  @QueryParam("log.level") String logLevel,  @QueryParam("queue.processing.enabled") Boolean queueProcessingEnabled,  @QueryParam("packageExporter.target") String packageExporterTarget,  @QueryParam("packageImporter.target") String packageImporterTarget,  @QueryParam("requestAuthorizationStrategy.target") String requestAuthorizationStrategyTarget,  @QueryParam("triggers.target") String triggersTarget,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor(post,apply,delete,action,$location,propertylist,name,title,details,enabled,serviceName,logLevel,queueProcessingEnabled,packageExporterTarget,packageImporterTarget,requestAuthorizationStrategyTarget,triggersTarget,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.distribution.agent.impl.SyncDistributionAgentFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingDistributionAgentImplSyncDistributionAgentFactory(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("name") String name,  @QueryParam("title") String title,  @QueryParam("details") String details,  @QueryParam("enabled") Boolean enabled,  @QueryParam("serviceName") String serviceName,  @QueryParam("log.level") String logLevel,  @QueryParam("queue.processing.enabled") Boolean queueProcessingEnabled,  @QueryParam("passiveQueues") List<String> passiveQueues,  @QueryParam("packageExporter.endpoints") List<String> packageExporterEndpoints,  @QueryParam("packageImporter.endpoints") List<String> packageImporterEndpoints,  @QueryParam("retry.strategy") String retryStrategy,  @QueryParam("retry.attempts") Integer retryAttempts,  @QueryParam("pull.items") Integer pullItems,  @QueryParam("http.conn.timeout") Integer httpConnTimeout,  @QueryParam("requestAuthorizationStrategy.target") String requestAuthorizationStrategyTarget,  @QueryParam("transportSecretProvider.target") String transportSecretProviderTarget,  @QueryParam("packageBuilder.target") String packageBuilderTarget,  @QueryParam("triggers.target") String triggersTarget,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingDistributionAgentImplSyncDistributionAgentFactory(post,apply,delete,action,$location,propertylist,name,title,details,enabled,serviceName,logLevel,queueProcessingEnabled,passiveQueues,packageExporterEndpoints,packageImporterEndpoints,retryStrategy,retryAttempts,pullItems,httpConnTimeout,requestAuthorizationStrategyTarget,transportSecretProviderTarget,packageBuilderTarget,triggersTarget,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.distribution.monitor.DistributionQueueHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingDistributionMonitorDistributionQueueHealthCheck(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("hc.name") String hcName,  @QueryParam("hc.tags") List<String> hcTags,  @QueryParam("hc.mbean.name") String hcMbeanName,  @QueryParam("numberOfRetriesAllowed") Integer numberOfRetriesAllowed,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingDistributionMonitorDistributionQueueHealthCheck(post,apply,delete,action,$location,propertylist,hcName,hcTags,hcMbeanName,numberOfRetriesAllowed,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.AgentDistributionPackageExporterFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingDistributionPackagingImplExporterAgentDistributio(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("name") String name,  @QueryParam("queue") String queue,  @QueryParam("drop.invalid.items") Boolean dropInvalidItems,  @QueryParam("agent.target") String agentTarget,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingDistributionPackagingImplExporterAgentDistributio(post,apply,delete,action,$location,propertylist,name,queue,dropInvalidItems,agentTarget,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.LocalDistributionPackageExporterFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingDistributionPackagingImplExporterLocalDistributio(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("name") String name,  @QueryParam("packageBuilder.target") String packageBuilderTarget,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingDistributionPackagingImplExporterLocalDistributio(post,apply,delete,action,$location,propertylist,name,packageBuilderTarget,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.RemoteDistributionPackageExporterFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingDistributionPackagingImplExporterRemoteDistributi(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("name") String name,  @QueryParam("endpoints") List<String> endpoints,  @QueryParam("pull.items") Integer pullItems,  @QueryParam("packageBuilder.target") String packageBuilderTarget,  @QueryParam("transportSecretProvider.target") String transportSecretProviderTarget,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingDistributionPackagingImplExporterRemoteDistributi(post,apply,delete,action,$location,propertylist,name,endpoints,pullItems,packageBuilderTarget,transportSecretProviderTarget,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.LocalDistributionPackageImporterFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingDistributionPackagingImplImporterLocalDistributio(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("name") String name,  @QueryParam("packageBuilder.target") String packageBuilderTarget,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingDistributionPackagingImplImporterLocalDistributio(post,apply,delete,action,$location,propertylist,name,packageBuilderTarget,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RemoteDistributionPackageImporterFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingDistributionPackagingImplImporterRemoteDistributi(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("name") String name,  @QueryParam("endpoints") List<String> endpoints,  @QueryParam("transportSecretProvider.target") String transportSecretProviderTarget,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingDistributionPackagingImplImporterRemoteDistributi(post,apply,delete,action,$location,propertylist,name,endpoints,transportSecretProviderTarget,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RepositoryDistributionPackageImporterFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingDistributionPackagingImplImporterRepositoryDistri(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("name") String name,  @QueryParam("service.name") String serviceName,  @QueryParam("path") String path,  @QueryParam("privilege.name") String privilegeName,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingDistributionPackagingImplImporterRepositoryDistri(post,apply,delete,action,$location,propertylist,name,serviceName,path,privilegeName,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionConfigurationResourceProviderFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingDistributionResourcesImplDistributionConfiguration(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("provider.roots") String providerRoots,  @QueryParam("kind") String kind,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingDistributionResourcesImplDistributionConfiguration(post,apply,delete,action,$location,propertylist,providerRoots,kind,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionServiceResourceProviderFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingDistributionResourcesImplDistributionServiceResour(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("provider.roots") String providerRoots,  @QueryParam("kind") String kind,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingDistributionResourcesImplDistributionServiceResour(post,apply,delete,action,$location,propertylist,providerRoots,kind,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.distribution.serialization.impl.DistributionPackageBuilderFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingDistributionSerializationImplDistributionPackageBu(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("name") String name,  @QueryParam("type") String type,  @QueryParam("format.target") String formatTarget,  @QueryParam("tempFsFolder") String tempFsFolder,  @QueryParam("fileThreshold") Integer fileThreshold,  @QueryParam("memoryUnit") String memoryUnit,  @QueryParam("useOffHeapMemory") Boolean useOffHeapMemory,  @QueryParam("digestAlgorithm") String digestAlgorithm,  @QueryParam("monitoringQueueSize") Integer monitoringQueueSize,  @QueryParam("cleanupDelay") Integer cleanupDelay,  @QueryParam("package.filters") List<String> packageFilters,  @QueryParam("property.filters") List<String> propertyFilters,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingDistributionSerializationImplDistributionPackageBu(post,apply,delete,action,$location,propertylist,name,type,formatTarget,tempFsFolder,fileThreshold,memoryUnit,useOffHeapMemory,digestAlgorithm,monitoringQueueSize,cleanupDelay,packageFilters,propertyFilters,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.distribution.serialization.impl.vlt.VaultDistributionPackageBuilderFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingDistributionSerializationImplVltVaultDistribution(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("name") String name,  @QueryParam("type") String type,  @QueryParam("importMode") String importMode,  @QueryParam("aclHandling") String aclHandling,  @QueryParam("package.roots") String packageRoots,  @QueryParam("package.filters") List<String> packageFilters,  @QueryParam("property.filters") List<String> propertyFilters,  @QueryParam("tempFsFolder") String tempFsFolder,  @QueryParam("useBinaryReferences") Boolean useBinaryReferences,  @QueryParam("autoSaveThreshold") Integer autoSaveThreshold,  @QueryParam("cleanupDelay") Integer cleanupDelay,  @QueryParam("fileThreshold") Integer fileThreshold,  @QueryParam("MEGA_BYTES") String MEGA_BYTES,  @QueryParam("useOffHeapMemory") Boolean useOffHeapMemory,  @QueryParam("digestAlgorithm") String digestAlgorithm,  @QueryParam("monitoringQueueSize") Integer monitoringQueueSize,  @QueryParam("pathsMapping") List<String> pathsMapping,  @QueryParam("strictImport") Boolean strictImport,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingDistributionSerializationImplVltVaultDistribution(post,apply,delete,action,$location,propertylist,name,type,importMode,aclHandling,packageRoots,packageFilters,propertyFilters,tempFsFolder,useBinaryReferences,autoSaveThreshold,cleanupDelay,fileThreshold,MEGA_BYTES,useOffHeapMemory,digestAlgorithm,monitoringQueueSize,pathsMapping,strictImport,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.distribution.transport.impl.UserCredentialsDistributionTransportSecretProvider")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingDistributionTransportImplUserCredentialsDistributi(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("name") String name,  @QueryParam("username") String username,  @QueryParam("password") String password,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingDistributionTransportImplUserCredentialsDistributi(post,apply,delete,action,$location,propertylist,name,username,password,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.distribution.trigger.impl.DistributionEventDistributeDistributionTriggerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingDistributionTriggerImplDistributionEventDistribute(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("name") String name,  @QueryParam("path") String path,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingDistributionTriggerImplDistributionEventDistribute(post,apply,delete,action,$location,propertylist,name,path,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.distribution.trigger.impl.JcrEventDistributionTriggerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("name") String name,  @QueryParam("path") String path,  @QueryParam("ignoredPathsPatterns") List<String> ignoredPathsPatterns,  @QueryParam("serviceName") String serviceName,  @QueryParam("deep") Boolean deep,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger(post,apply,delete,action,$location,propertylist,name,path,ignoredPathsPatterns,serviceName,deep,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.distribution.trigger.impl.PersistedJcrEventDistributionTriggerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("name") String name,  @QueryParam("path") String path,  @QueryParam("serviceName") String serviceName,  @QueryParam("nuggetsPath") String nuggetsPath,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi(post,apply,delete,action,$location,propertylist,name,path,serviceName,nuggetsPath,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.distribution.trigger.impl.RemoteEventDistributionTriggerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("name") String name,  @QueryParam("endpoint") String endpoint,  @QueryParam("transportSecretProvider.target") String transportSecretProviderTarget,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig(post,apply,delete,action,$location,propertylist,name,endpoint,transportSecretProviderTarget,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.distribution.trigger.impl.ResourceEventDistributionTriggerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingDistributionTriggerImplResourceEventDistributionTr(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("name") String name,  @QueryParam("path") String path,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingDistributionTriggerImplResourceEventDistributionTr(post,apply,delete,action,$location,propertylist,name,path,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.distribution.trigger.impl.ScheduledDistributionTriggerFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingDistributionTriggerImplScheduledDistributionTrigge(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("name") String name,  @QueryParam("path") String path,  @QueryParam("seconds") String seconds,  @QueryParam("serviceName") String serviceName,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingDistributionTriggerImplScheduledDistributionTrigge(post,apply,delete,action,$location,propertylist,name,path,seconds,serviceName,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.engine.impl.auth.SlingAuthenticator")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingEngineImplAuthSlingAuthenticator(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("osgi.http.whiteboard.context.select") String osgiHttpWhiteboardContextSelect,  @QueryParam("osgi.http.whiteboard.listener") String osgiHttpWhiteboardListener,  @QueryParam("auth.sudo.cookie") String authSudoCookie,  @QueryParam("auth.sudo.parameter") String authSudoParameter,  @QueryParam("auth.annonymous") Boolean authAnnonymous,  @QueryParam("sling.auth.requirements") List<String> slingAuthRequirements,  @QueryParam("sling.auth.anonymous.user") String slingAuthAnonymousUser,  @QueryParam("sling.auth.anonymous.password") String slingAuthAnonymousPassword,  @QueryParam("auth.http") String authHttp,  @QueryParam("auth.http.realm") String authHttpRealm,  @QueryParam("auth.uri.suffix") List<String> authUriSuffix,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingEngineImplAuthSlingAuthenticator(post,apply,delete,action,$location,propertylist,osgiHttpWhiteboardContextSelect,osgiHttpWhiteboardListener,authSudoCookie,authSudoParameter,authAnnonymous,slingAuthRequirements,slingAuthAnonymousUser,slingAuthAnonymousPassword,authHttp,authHttpRealm,authUriSuffix,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.engine.impl.debug.RequestProgressTrackerLogFilter")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("extensions") List<String> extensions,  @QueryParam("minDurationMs") Integer minDurationMs,  @QueryParam("maxDurationMs") Integer maxDurationMs,  @QueryParam("compactLogFormat") Boolean compactLogFormat,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter(post,apply,delete,action,$location,propertylist,extensions,minDurationMs,maxDurationMs,compactLogFormat,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.engine.impl.log.RequestLogger")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingEngineImplLogRequestLoggerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingEngineImplLogRequestLoggerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingEngineImplLogRequestLogger(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("request.log.output") String requestLogOutput,  @QueryParam("request.log.outputtype") Integer requestLogOutputtype,  @QueryParam("request.log.enabled") Boolean requestLogEnabled,  @QueryParam("access.log.output") String accessLogOutput,  @QueryParam("access.log.outputtype") Integer accessLogOutputtype,  @QueryParam("access.log.enabled") Boolean accessLogEnabled,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingEngineImplLogRequestLogger(post,apply,delete,action,$location,propertylist,requestLogOutput,requestLogOutputtype,requestLogEnabled,accessLogOutput,accessLogOutputtype,accessLogEnabled,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.engine.impl.log.RequestLoggerService")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingEngineImplLogRequestLoggerServiceInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingEngineImplLogRequestLoggerServiceInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingEngineImplLogRequestLoggerService(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("request.log.service.format") String requestLogServiceFormat,  @QueryParam("request.log.service.output") String requestLogServiceOutput,  @QueryParam("request.log.service.outputtype") Integer requestLogServiceOutputtype,  @QueryParam("request.log.service.onentry") Boolean requestLogServiceOnentry,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingEngineImplLogRequestLoggerService(post,apply,delete,action,$location,propertylist,requestLogServiceFormat,requestLogServiceOutput,requestLogServiceOutputtype,requestLogServiceOnentry,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.engine.impl.SlingMainServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingEngineImplSlingMainServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingEngineImplSlingMainServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingEngineImplSlingMainServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("sling.max.calls") Integer slingMaxCalls,  @QueryParam("sling.max.inclusions") Integer slingMaxInclusions,  @QueryParam("sling.trace.allow") Boolean slingTraceAllow,  @QueryParam("sling.max.record.requests") Integer slingMaxRecordRequests,  @QueryParam("sling.store.pattern.requests") List<String> slingStorePatternRequests,  @QueryParam("sling.serverinfo") String slingServerinfo,  @QueryParam("sling.additional.response.headers") List<String> slingAdditionalResponseHeaders,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingEngineImplSlingMainServlet(post,apply,delete,action,$location,propertylist,slingMaxCalls,slingMaxInclusions,slingTraceAllow,slingMaxRecordRequests,slingStorePatternRequests,slingServerinfo,slingAdditionalResponseHeaders,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.engine.parameters")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingEngineParametersInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingEngineParametersInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingEngineParameters(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("sling.default.parameter.encoding") String slingDefaultParameterEncoding,  @QueryParam("sling.default.max.parameters") Integer slingDefaultMaxParameters,  @QueryParam("file.location") String fileLocation,  @QueryParam("file.threshold") Integer fileThreshold,  @QueryParam("file.max") Integer fileMax,  @QueryParam("request.max") Integer requestMax,  @QueryParam("sling.default.parameter.checkForAdditionalContainerParameters") Boolean slingDefaultParameterCheckForAdditionalContainerParameters,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingEngineParameters(post,apply,delete,action,$location,propertylist,slingDefaultParameterEncoding,slingDefaultMaxParameters,fileLocation,fileThreshold,fileMax,requestMax,slingDefaultParameterCheckForAdditionalContainerParameters,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.event.impl.EventingThreadPool")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingEventImplEventingThreadPoolInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingEventImplEventingThreadPoolInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingEventImplEventingThreadPool(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("minPoolSize") Integer minPoolSize,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingEventImplEventingThreadPool(post,apply,delete,action,$location,propertylist,minPoolSize,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.event.impl.jobs.DefaultJobManager")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingEventImplJobsDefaultJobManagerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingEventImplJobsDefaultJobManagerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingEventImplJobsDefaultJobManager(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("queue.priority") String queuePriority,  @QueryParam("queue.retries") Integer queueRetries,  @QueryParam("queue.retrydelay") Integer queueRetrydelay,  @QueryParam("queue.maxparallel") Integer queueMaxparallel,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingEventImplJobsDefaultJobManager(post,apply,delete,action,$location,propertylist,queuePriority,queueRetries,queueRetrydelay,queueMaxparallel,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.event.impl.jobs.jcr.PersistenceHandler")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingEventImplJobsJcrPersistenceHandler(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("job.consumermanager.disableDistribution") Boolean jobConsumermanagerDisableDistribution,  @QueryParam("startup.delay") Integer startupDelay,  @QueryParam("cleanup.period") Integer cleanupPeriod,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingEventImplJobsJcrPersistenceHandler(post,apply,delete,action,$location,propertylist,jobConsumermanagerDisableDistribution,startupDelay,cleanupPeriod,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.event.impl.jobs.JobConsumerManager")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingEventImplJobsJobConsumerManagerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingEventImplJobsJobConsumerManagerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingEventImplJobsJobConsumerManager(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("org.apache.sling.installer.configuration.persist") Boolean orgApacheSlingInstallerConfigurationPersist,  @QueryParam("job.consumermanager.whitelist") List<String> jobConsumermanagerWhitelist,  @QueryParam("job.consumermanager.blacklist") List<String> jobConsumermanagerBlacklist,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingEventImplJobsJobConsumerManager(post,apply,delete,action,$location,propertylist,orgApacheSlingInstallerConfigurationPersist,jobConsumermanagerWhitelist,jobConsumermanagerBlacklist,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.event.jobs.QueueConfiguration")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingEventJobsQueueConfigurationInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingEventJobsQueueConfigurationInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingEventJobsQueueConfiguration(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("queue.name") String queueName,  @QueryParam("queue.topics") List<String> queueTopics,  @QueryParam("queue.type") String queueType,  @QueryParam("queue.priority") String queuePriority,  @QueryParam("queue.retries") Integer queueRetries,  @QueryParam("queue.retrydelay") Integer queueRetrydelay,  @QueryParam("queue.maxparallel") BigDecimal queueMaxparallel,  @QueryParam("queue.keepJobs") Boolean queueKeepJobs,  @QueryParam("queue.preferRunOnCreationInstance") Boolean queuePreferRunOnCreationInstance,  @QueryParam("queue.threadPoolSize") Integer queueThreadPoolSize,  @QueryParam("service.ranking") Integer serviceRanking,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingEventJobsQueueConfiguration(post,apply,delete,action,$location,propertylist,queueName,queueTopics,queueType,queuePriority,queueRetries,queueRetrydelay,queueMaxparallel,queueKeepJobs,queuePreferRunOnCreationInstance,queueThreadPoolSize,serviceRanking,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.extensions.webconsolesecurityprovider.internal.SlingWebConsoleSecurityProvider")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("users") List<String> users,  @QueryParam("groups") List<String> groups,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW(post,apply,delete,action,$location,propertylist,users,groups,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.featureflags.Feature")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingFeatureflagsFeatureInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingFeatureflagsFeatureInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingFeatureflagsFeature(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("name") String name,  @QueryParam("description") String description,  @QueryParam("enabled") Boolean enabled,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingFeatureflagsFeature(post,apply,delete,action,$location,propertylist,name,description,enabled,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.featureflags.impl.ConfiguredFeature")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingFeatureflagsImplConfiguredFeature(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("name") String name,  @QueryParam("description") String description,  @QueryParam("enabled") Boolean enabled,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingFeatureflagsImplConfiguredFeature(post,apply,delete,action,$location,propertylist,name,description,enabled,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.hapi.impl.HApiUtilImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingHapiImplHApiUtilImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingHapiImplHApiUtilImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingHapiImplHApiUtilImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("org.apache.sling.hapi.tools.resourcetype") String orgApacheSlingHapiToolsResourcetype,  @QueryParam("org.apache.sling.hapi.tools.collectionresourcetype") String orgApacheSlingHapiToolsCollectionresourcetype,  @QueryParam("org.apache.sling.hapi.tools.searchpaths") List<String> orgApacheSlingHapiToolsSearchpaths,  @QueryParam("org.apache.sling.hapi.tools.externalurl") String orgApacheSlingHapiToolsExternalurl,  @QueryParam("org.apache.sling.hapi.tools.enabled") Boolean orgApacheSlingHapiToolsEnabled,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingHapiImplHApiUtilImpl(post,apply,delete,action,$location,propertylist,orgApacheSlingHapiToolsResourcetype,orgApacheSlingHapiToolsCollectionresourcetype,orgApacheSlingHapiToolsSearchpaths,orgApacheSlingHapiToolsExternalurl,orgApacheSlingHapiToolsEnabled,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.hc.core.impl.CompositeHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingHcCoreImplCompositeHealthCheckInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingHcCoreImplCompositeHealthCheckInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingHcCoreImplCompositeHealthCheck(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("hc.name") String hcName,  @QueryParam("hc.tags") List<String> hcTags,  @QueryParam("hc.mbean.name") String hcMbeanName,  @QueryParam("filter.tags") List<String> filterTags,  @QueryParam("filter.combineTagsWithOr") Boolean filterCombineTagsWithOr,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingHcCoreImplCompositeHealthCheck(post,apply,delete,action,$location,propertylist,hcName,hcTags,hcMbeanName,filterTags,filterCombineTagsWithOr,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.hc.core.impl.executor.HealthCheckExecutorImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("timeoutInMs") Integer timeoutInMs,  @QueryParam("longRunningFutureThresholdForCriticalMs") Integer longRunningFutureThresholdForCriticalMs,  @QueryParam("resultCacheTtlInMs") Integer resultCacheTtlInMs,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl(post,apply,delete,action,$location,propertylist,timeoutInMs,longRunningFutureThresholdForCriticalMs,resultCacheTtlInMs,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.hc.core.impl.JmxAttributeHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingHcCoreImplJmxAttributeHealthCheck(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("hc.name") String hcName,  @QueryParam("hc.tags") List<String> hcTags,  @QueryParam("hc.mbean.name") String hcMbeanName,  @QueryParam("mbean.name") String mbeanName,  @QueryParam("attribute.name") String attributeName,  @QueryParam("attribute.value.constraint") String attributeValueConstraint,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingHcCoreImplJmxAttributeHealthCheck(post,apply,delete,action,$location,propertylist,hcName,hcTags,hcMbeanName,mbeanName,attributeName,attributeValueConstraint,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.hc.core.impl.ScriptableHealthCheck")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingHcCoreImplScriptableHealthCheckInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingHcCoreImplScriptableHealthCheckInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingHcCoreImplScriptableHealthCheck(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("hc.name") String hcName,  @QueryParam("hc.tags") List<String> hcTags,  @QueryParam("hc.mbean.name") String hcMbeanName,  @QueryParam("expression") String expression,  @QueryParam("language.extension") String languageExtension,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingHcCoreImplScriptableHealthCheck(post,apply,delete,action,$location,propertylist,hcName,hcTags,hcMbeanName,expression,languageExtension,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.hc.core.impl.servlet.HealthCheckExecutorServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingHcCoreImplServletHealthCheckExecutorServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("servletPath") String servletPath,  @QueryParam("disabled") Boolean disabled,  @QueryParam("cors.accessControlAllowOrigin") String corsAccessControlAllowOrigin,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingHcCoreImplServletHealthCheckExecutorServlet(post,apply,delete,action,$location,propertylist,servletPath,disabled,corsAccessControlAllowOrigin,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.hc.core.impl.servlet.ResultTxtVerboseSerializer")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingHcCoreImplServletResultTxtVerboseSerializer(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("totalWidth") Integer totalWidth,  @QueryParam("colWidthName") Integer colWidthName,  @QueryParam("colWidthResult") Integer colWidthResult,  @QueryParam("colWidthTiming") Integer colWidthTiming,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingHcCoreImplServletResultTxtVerboseSerializer(post,apply,delete,action,$location,propertylist,totalWidth,colWidthName,colWidthResult,colWidthTiming,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.i18n.impl.I18NFilter")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingI18nImplI18NFilterInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingI18nImplI18NFilterInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingI18nImplI18NFilter(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("service.ranking") Integer serviceRanking,  @QueryParam("sling.filter.scope") List<String> slingFilterScope,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingI18nImplI18NFilter(post,apply,delete,action,$location,propertylist,serviceRanking,slingFilterScope,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.i18n.impl.JcrResourceBundleProvider")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingI18nImplJcrResourceBundleProviderInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingI18nImplJcrResourceBundleProviderInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingI18nImplJcrResourceBundleProvider(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("locale.default") String localeDefault,  @QueryParam("preload.bundles") Boolean preloadBundles,  @QueryParam("invalidation.delay") Integer invalidationDelay,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingI18nImplJcrResourceBundleProvider(post,apply,delete,action,$location,propertylist,localeDefault,preloadBundles,invalidationDelay,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.installer.provider.jcr.impl.JcrInstaller")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingInstallerProviderJcrImplJcrInstaller(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("handler.schemes") List<String> handlerSchemes,  @QueryParam("sling.jcrinstall.folder.name.regexp") String slingJcrinstallFolderNameRegexp,  @QueryParam("sling.jcrinstall.folder.max.depth") Integer slingJcrinstallFolderMaxDepth,  @QueryParam("sling.jcrinstall.search.path") List<String> slingJcrinstallSearchPath,  @QueryParam("sling.jcrinstall.new.config.path") String slingJcrinstallNewConfigPath,  @QueryParam("sling.jcrinstall.signal.path") String slingJcrinstallSignalPath,  @QueryParam("sling.jcrinstall.enable.writeback") Boolean slingJcrinstallEnableWriteback,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingInstallerProviderJcrImplJcrInstaller(post,apply,delete,action,$location,propertylist,handlerSchemes,slingJcrinstallFolderNameRegexp,slingJcrinstallFolderMaxDepth,slingJcrinstallSearchPath,slingJcrinstallNewConfigPath,slingJcrinstallSignalPath,slingJcrinstallEnableWriteback,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingJcrBaseInternalLoginAdminWhitelist(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("whitelist.bypass") Boolean whitelistBypass,  @QueryParam("whitelist.bundles.regexp") String whitelistBundlesRegexp,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingJcrBaseInternalLoginAdminWhitelist(post,apply,delete,action,$location,propertylist,whitelistBypass,whitelistBundlesRegexp,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist.fragment")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("whitelist.name") String whitelistName,  @QueryParam("whitelist.bundles") List<String> whitelistBundles,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment(post,apply,delete,action,$location,propertylist,whitelistName,whitelistBundles,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingJcrDavexImplServletsSlingDavExServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("alias") String alias,  @QueryParam("dav.create-absolute-uri") Boolean davCreateAbsoluteUri,  @QueryParam("dav.protectedhandlers") String davProtectedhandlers,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingJcrDavexImplServletsSlingDavExServlet(post,apply,delete,action,$location,propertylist,alias,davCreateAbsoluteUri,davProtectedhandlers,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.jcr.jackrabbit.server.JndiRegistrationSupport")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingJcrJackrabbitServerJndiRegistrationSupport(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("java.naming.factory.initial") String javaNamingFactoryInitial,  @QueryParam("java.naming.provider.url") String javaNamingProviderUrl,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingJcrJackrabbitServerJndiRegistrationSupport(post,apply,delete,action,$location,propertylist,javaNamingFactoryInitial,javaNamingProviderUrl,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.jcr.jackrabbit.server.RmiRegistrationSupport")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingJcrJackrabbitServerRmiRegistrationSupport(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("port") Integer port,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingJcrJackrabbitServerRmiRegistrationSupport(post,apply,delete,action,$location,propertylist,port,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.jcr.repoinit.impl.RepositoryInitializer")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingJcrRepoinitImplRepositoryInitializer(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("references") List<String> references,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingJcrRepoinitImplRepositoryInitializer(post,apply,delete,action,$location,propertylist,references,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.jcr.repoinit.RepositoryInitializer")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingJcrRepoinitRepositoryInitializerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingJcrRepoinitRepositoryInitializerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingJcrRepoinitRepositoryInitializer(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("references") List<String> references,  @QueryParam("scripts") List<String> scripts,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingJcrRepoinitRepositoryInitializer(post,apply,delete,action,$location,propertylist,references,scripts,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.jcr.resource.internal.JcrResourceResolverFactoryImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("resource.resolver.searchpath") List<String> resourceResolverSearchpath,  @QueryParam("resource.resolver.manglenamespaces") Boolean resourceResolverManglenamespaces,  @QueryParam("resource.resolver.allowDirect") Boolean resourceResolverAllowDirect,  @QueryParam("resource.resolver.required.providers") List<String> resourceResolverRequiredProviders,  @QueryParam("resource.resolver.required.providernames") List<String> resourceResolverRequiredProvidernames,  @QueryParam("resource.resolver.virtual") List<String> resourceResolverVirtual,  @QueryParam("resource.resolver.mapping") List<String> resourceResolverMapping,  @QueryParam("resource.resolver.map.location") String resourceResolverMapLocation,  @QueryParam("resource.resolver.map.observation") List<String> resourceResolverMapObservation,  @QueryParam("resource.resolver.default.vanity.redirect.status") Integer resourceResolverDefaultVanityRedirectStatus,  @QueryParam("resource.resolver.enable.vanitypath") Boolean resourceResolverEnableVanitypath,  @QueryParam("resource.resolver.vanitypath.maxEntries") Integer resourceResolverVanitypathMaxEntries,  @QueryParam("resource.resolver.vanitypath.maxEntries.startup") Boolean resourceResolverVanitypathMaxEntriesStartup,  @QueryParam("resource.resolver.vanitypath.bloomfilter.maxBytes") Integer resourceResolverVanitypathBloomfilterMaxBytes,  @QueryParam("resource.resolver.optimize.alias.resolution") Boolean resourceResolverOptimizeAliasResolution,  @QueryParam("resource.resolver.vanitypath.whitelist") List<String> resourceResolverVanitypathWhitelist,  @QueryParam("resource.resolver.vanitypath.blacklist") List<String> resourceResolverVanitypathBlacklist,  @QueryParam("resource.resolver.vanity.precedence") Boolean resourceResolverVanityPrecedence,  @QueryParam("resource.resolver.providerhandling.paranoid") Boolean resourceResolverProviderhandlingParanoid,  @QueryParam("resource.resolver.log.closing") Boolean resourceResolverLogClosing,  @QueryParam("resource.resolver.log.unclosed") Boolean resourceResolverLogUnclosed,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl(post,apply,delete,action,$location,propertylist,resourceResolverSearchpath,resourceResolverManglenamespaces,resourceResolverAllowDirect,resourceResolverRequiredProviders,resourceResolverRequiredProvidernames,resourceResolverVirtual,resourceResolverMapping,resourceResolverMapLocation,resourceResolverMapObservation,resourceResolverDefaultVanityRedirectStatus,resourceResolverEnableVanitypath,resourceResolverVanitypathMaxEntries,resourceResolverVanitypathMaxEntriesStartup,resourceResolverVanitypathBloomfilterMaxBytes,resourceResolverOptimizeAliasResolution,resourceResolverVanitypathWhitelist,resourceResolverVanitypathBlacklist,resourceResolverVanityPrecedence,resourceResolverProviderhandlingParanoid,resourceResolverLogClosing,resourceResolverLogUnclosed,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.jcr.resource.internal.JcrSystemUserValidator")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingJcrResourceInternalJcrSystemUserValidator(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("allow.only.system.user") Boolean allowOnlySystemUser,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingJcrResourceInternalJcrSystemUserValidator(post,apply,delete,action,$location,propertylist,allowOnlySystemUser,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.jcr.resourcesecurity.impl.ResourceAccessGateFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("path") String path,  @QueryParam("checkpath.prefix") String checkpathPrefix,  @QueryParam("jcrPath") String jcrPath,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory(post,apply,delete,action,$location,propertylist,path,checkpathPrefix,jcrPath,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DefaultHandlerService")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingJcrWebdavImplHandlerDefaultHandlerService(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("service.ranking") Integer serviceRanking,  @QueryParam("type.collections") String typeCollections,  @QueryParam("type.noncollections") String typeNoncollections,  @QueryParam("type.content") String typeContent,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingJcrWebdavImplHandlerDefaultHandlerService(post,apply,delete,action,$location,propertylist,serviceRanking,typeCollections,typeNoncollections,typeContent,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DirListingExportHandlerService")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("service.ranking") Integer serviceRanking,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic(post,apply,delete,action,$location,propertylist,serviceRanking,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.jcr.webdav.impl.servlets.SimpleWebDavServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("dav.root") String davRoot,  @QueryParam("dav.create-absolute-uri") Boolean davCreateAbsoluteUri,  @QueryParam("dav.realm") String davRealm,  @QueryParam("collection.types") List<String> collectionTypes,  @QueryParam("filter.prefixes") List<String> filterPrefixes,  @QueryParam("filter.types") String filterTypes,  @QueryParam("filter.uris") String filterUris,  @QueryParam("type.collections") String typeCollections,  @QueryParam("type.noncollections") String typeNoncollections,  @QueryParam("type.content") String typeContent,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet(post,apply,delete,action,$location,propertylist,davRoot,davCreateAbsoluteUri,davRealm,collectionTypes,filterPrefixes,filterTypes,filterUris,typeCollections,typeNoncollections,typeContent,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.jmx.provider.impl.JMXResourceProvider")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingJmxProviderImplJMXResourceProviderInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingJmxProviderImplJMXResourceProviderInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingJmxProviderImplJMXResourceProvider(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("provider.roots") String providerRoots,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingJmxProviderImplJMXResourceProvider(post,apply,delete,action,$location,propertylist,providerRoots,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.models.impl.ModelAdapterFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingModelsImplModelAdapterFactoryInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingModelsImplModelAdapterFactoryInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingModelsImplModelAdapterFactory(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("osgi.http.whiteboard.listener") String osgiHttpWhiteboardListener,  @QueryParam("osgi.http.whiteboard.context.select") String osgiHttpWhiteboardContextSelect,  @QueryParam("max.recursion.depth") Integer maxRecursionDepth,  @QueryParam("cleanup.job.period") Integer cleanupJobPeriod,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingModelsImplModelAdapterFactory(post,apply,delete,action,$location,propertylist,osgiHttpWhiteboardListener,osgiHttpWhiteboardContextSelect,maxRecursionDepth,cleanupJobPeriod,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.models.jacksonexporter.impl.ResourceModuleProvider")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingModelsJacksonexporterImplResourceModuleProvider(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("max.recursion.levels") Integer maxRecursionLevels,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingModelsJacksonexporterImplResourceModuleProvider(post,apply,delete,action,$location,propertylist,maxRecursionLevels,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.resource.inventory.impl.ResourceInventoryPrinterFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("felix.inventory.printer.name") String felixInventoryPrinterName,  @QueryParam("felix.inventory.printer.title") String felixInventoryPrinterTitle,  @QueryParam("path") String path,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto(post,apply,delete,action,$location,propertylist,felixInventoryPrinterName,felixInventoryPrinterTitle,path,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.resourcemerger.impl.MergedResourceProviderFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingResourcemergerImplMergedResourceProviderFactory(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("merge.root") String mergeRoot,  @QueryParam("merge.readOnly") Boolean mergeReadOnly,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingResourcemergerImplMergedResourceProviderFactory(post,apply,delete,action,$location,propertylist,mergeRoot,mergeReadOnly,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.resourcemerger.picker.overriding")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingResourcemergerPickerOverridingInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingResourcemergerPickerOverridingInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingResourcemergerPickerOverriding(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("merge.root") String mergeRoot,  @QueryParam("merge.readOnly") Boolean mergeReadOnly,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingResourcemergerPickerOverriding(post,apply,delete,action,$location,propertylist,mergeRoot,mergeReadOnly,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.scripting.core.impl.ScriptCacheImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingScriptingCoreImplScriptCacheImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingScriptingCoreImplScriptCacheImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingScriptingCoreImplScriptCacheImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("org.apache.sling.scripting.cache.size") Integer orgApacheSlingScriptingCacheSize,  @QueryParam("org.apache.sling.scripting.cache.additional_extensions") List<String> orgApacheSlingScriptingCacheAdditionalExtensions,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingScriptingCoreImplScriptCacheImpl(post,apply,delete,action,$location,propertylist,orgApacheSlingScriptingCacheSize,orgApacheSlingScriptingCacheAdditionalExtensions,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.scripting.core.impl.ScriptingResourceResolverProviderImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingScriptingCoreImplScriptingResourceResolverProvider(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("log.stacktrace.onclose") Boolean logStacktraceOnclose,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingScriptingCoreImplScriptingResourceResolverProvider(post,apply,delete,action,$location,propertylist,logStacktraceOnclose,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.scripting.java.impl.JavaScriptEngineFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingScriptingJavaImplJavaScriptEngineFactory(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("java.classdebuginfo") Boolean javaClassdebuginfo,  @QueryParam("java.javaEncoding") String javaJavaEncoding,  @QueryParam("java.compilerSourceVM") String javaCompilerSourceVM,  @QueryParam("java.compilerTargetVM") String javaCompilerTargetVM,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingScriptingJavaImplJavaScriptEngineFactory(post,apply,delete,action,$location,propertylist,javaClassdebuginfo,javaJavaEncoding,javaCompilerSourceVM,javaCompilerTargetVM,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.scripting.javascript.internal.RhinoJavaScriptEngineFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("org.apache.sling.scripting.javascript.rhino.optLevel") Integer orgApacheSlingScriptingJavascriptRhinoOptLevel,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa(post,apply,delete,action,$location,propertylist,orgApacheSlingScriptingJavascriptRhinoOptLevel,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.scripting.jsp.JspScriptEngineFactory")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingScriptingJspJspScriptEngineFactory(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("jasper.compilerTargetVM") String jasperCompilerTargetVM,  @QueryParam("jasper.compilerSourceVM") String jasperCompilerSourceVM,  @QueryParam("jasper.classdebuginfo") Boolean jasperClassdebuginfo,  @QueryParam("jasper.enablePooling") Boolean jasperEnablePooling,  @QueryParam("jasper.ieClassId") String jasperIeClassId,  @QueryParam("jasper.genStringAsCharArray") Boolean jasperGenStringAsCharArray,  @QueryParam("jasper.keepgenerated") Boolean jasperKeepgenerated,  @QueryParam("jasper.mappedfile") Boolean jasperMappedfile,  @QueryParam("jasper.trimSpaces") Boolean jasperTrimSpaces,  @QueryParam("jasper.displaySourceFragments") Boolean jasperDisplaySourceFragments,  @QueryParam("default.is.session") Boolean defaultIsSession,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingScriptingJspJspScriptEngineFactory(post,apply,delete,action,$location,propertylist,jasperCompilerTargetVM,jasperCompilerSourceVM,jasperClassdebuginfo,jasperEnablePooling,jasperIeClassId,jasperGenStringAsCharArray,jasperKeepgenerated,jasperMappedfile,jasperTrimSpaces,jasperDisplaySourceFragments,defaultIsSession,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.scripting.sightly.js.impl.jsapi.SlyBindingsValuesProvider")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("org.apache.sling.scripting.sightly.js.bindings") List<String> orgApacheSlingScriptingSightlyJsBindings,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv(post,apply,delete,action,$location,propertylist,orgApacheSlingScriptingSightlyJsBindings,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.security.impl.ContentDispositionFilter")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingSecurityImplContentDispositionFilterInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingSecurityImplContentDispositionFilterInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingSecurityImplContentDispositionFilter(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("sling.content.disposition.paths") List<String> slingContentDispositionPaths,  @QueryParam("sling.content.disposition.excluded.paths") List<String> slingContentDispositionExcludedPaths,  @QueryParam("sling.content.disposition.all.paths") Boolean slingContentDispositionAllPaths,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingSecurityImplContentDispositionFilter(post,apply,delete,action,$location,propertylist,slingContentDispositionPaths,slingContentDispositionExcludedPaths,slingContentDispositionAllPaths,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.security.impl.ReferrerFilter")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingSecurityImplReferrerFilterInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingSecurityImplReferrerFilterInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingSecurityImplReferrerFilter(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("allow.empty") Boolean allowEmpty,  @QueryParam("allow.hosts") List<String> allowHosts,  @QueryParam("allow.hosts.regexp") List<String> allowHostsRegexp,  @QueryParam("filter.methods") List<String> filterMethods,  @QueryParam("exclude.agents.regexp") List<String> excludeAgentsRegexp,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingSecurityImplReferrerFilter(post,apply,delete,action,$location,propertylist,allowEmpty,allowHosts,allowHostsRegexp,filterMethods,excludeAgentsRegexp,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingServiceusermappingImplServiceUserMapperImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("user.mapping") List<String> userMapping,  @QueryParam("user.default") String userDefault,  @QueryParam("user.enable.default.mapping") Boolean userEnableDefaultMapping,  @QueryParam("require.validation") Boolean requireValidation,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingServiceusermappingImplServiceUserMapperImpl(post,apply,delete,action,$location,propertylist,userMapping,userDefault,userEnableDefaultMapping,requireValidation,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl.amended")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingServiceusermappingImplServiceUserMapperImplAmended(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("service.ranking") Integer serviceRanking,  @QueryParam("user.mapping") List<String> userMapping,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingServiceusermappingImplServiceUserMapperImplAmended(post,apply,delete,action,$location,propertylist,serviceRanking,userMapping,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.servlets.get.DefaultGetServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingServletsGetDefaultGetServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingServletsGetDefaultGetServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingServletsGetDefaultGetServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("aliases") List<String> aliases,  @QueryParam("index") Boolean index,  @QueryParam("index.files") List<String> indexFiles,  @QueryParam("enable.html") Boolean enableHtml,  @QueryParam("enable.json") Boolean enableJson,  @QueryParam("enable.txt") Boolean enableTxt,  @QueryParam("enable.xml") Boolean enableXml,  @QueryParam("json.maximumresults") Integer jsonMaximumresults,  @QueryParam("ecmaSuport") Boolean ecmaSuport,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingServletsGetDefaultGetServlet(post,apply,delete,action,$location,propertylist,aliases,index,indexFiles,enableHtml,enableJson,enableTxt,enableXml,jsonMaximumresults,ecmaSuport,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.servlets.get.impl.version.VersionInfoServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingServletsGetImplVersionVersionInfoServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("sling.servlet.selectors") List<String> slingServletSelectors,  @QueryParam("ecmaSuport") Boolean ecmaSuport,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingServletsGetImplVersionVersionInfoServlet(post,apply,delete,action,$location,propertylist,slingServletSelectors,ecmaSuport,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.servlets.post.impl.helper.ChunkCleanUpTask")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingServletsPostImplHelperChunkCleanUpTask(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("scheduler.expression") String schedulerExpression,  @QueryParam("scheduler.concurrent") Boolean schedulerConcurrent,  @QueryParam("chunk.cleanup.age") Integer chunkCleanupAge,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingServletsPostImplHelperChunkCleanUpTask(post,apply,delete,action,$location,propertylist,schedulerExpression,schedulerConcurrent,chunkCleanupAge,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.servlets.post.impl.SlingPostServlet")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingServletsPostImplSlingPostServletInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingServletsPostImplSlingPostServletInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingServletsPostImplSlingPostServlet(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("servlet.post.dateFormats") List<String> servletPostDateFormats,  @QueryParam("servlet.post.nodeNameHints") List<String> servletPostNodeNameHints,  @QueryParam("servlet.post.nodeNameMaxLength") Integer servletPostNodeNameMaxLength,  @QueryParam("servlet.post.checkinNewVersionableNodes") Boolean servletPostCheckinNewVersionableNodes,  @QueryParam("servlet.post.autoCheckout") Boolean servletPostAutoCheckout,  @QueryParam("servlet.post.autoCheckin") Boolean servletPostAutoCheckin,  @QueryParam("servlet.post.ignorePattern") String servletPostIgnorePattern,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingServletsPostImplSlingPostServlet(post,apply,delete,action,$location,propertylist,servletPostDateFormats,servletPostNodeNameHints,servletPostNodeNameMaxLength,servletPostCheckinNewVersionableNodes,servletPostAutoCheckout,servletPostAutoCheckin,servletPostIgnorePattern,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.servlets.resolver.SlingServletResolver")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingServletsResolverSlingServletResolverInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingServletsResolverSlingServletResolverInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingServletsResolverSlingServletResolver(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("servletresolver.servletRoot") String servletresolverServletRoot,  @QueryParam("servletresolver.cacheSize") Integer servletresolverCacheSize,  @QueryParam("servletresolver.paths") List<String> servletresolverPaths,  @QueryParam("servletresolver.defaultExtensions") List<String> servletresolverDefaultExtensions,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingServletsResolverSlingServletResolver(post,apply,delete,action,$location,propertylist,servletresolverServletRoot,servletresolverCacheSize,servletresolverPaths,servletresolverDefaultExtensions,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.settings.impl.SlingSettingsServiceImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingSettingsImplSlingSettingsServiceImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("sling.name") String slingName,  @QueryParam("sling.description") String slingDescription,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingSettingsImplSlingSettingsServiceImpl(post,apply,delete,action,$location,propertylist,slingName,slingDescription,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.startupfilter.impl.StartupFilterImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingStartupfilterImplStartupFilterImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingStartupfilterImplStartupFilterImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingStartupfilterImplStartupFilterImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("active.by.default") Boolean activeByDefault,  @QueryParam("default.message") String defaultMessage,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingStartupfilterImplStartupFilterImpl(post,apply,delete,action,$location,propertylist,activeByDefault,defaultMessage,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.tenant.internal.TenantProviderImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingTenantInternalTenantProviderImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingTenantInternalTenantProviderImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingTenantInternalTenantProviderImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("tenant.root") String tenantRoot,  @QueryParam("tenant.path.matcher") List<String> tenantPathMatcher,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingTenantInternalTenantProviderImpl(post,apply,delete,action,$location,propertylist,tenantRoot,tenantPathMatcher,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.tracer.internal.LogTracer")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingTracerInternalLogTracerInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingTracerInternalLogTracerInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingTracerInternalLogTracer(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("tracerSets") List<String> tracerSets,  @QueryParam("enabled") Boolean enabled,  @QueryParam("servletEnabled") Boolean servletEnabled,  @QueryParam("recordingCacheSizeInMB") Integer recordingCacheSizeInMB,  @QueryParam("recordingCacheDurationInSecs") Integer recordingCacheDurationInSecs,  @QueryParam("recordingCompressionEnabled") Boolean recordingCompressionEnabled,  @QueryParam("gzipResponse") Boolean gzipResponse,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingTracerInternalLogTracer(post,apply,delete,action,$location,propertylist,tracerSets,enabled,servletEnabled,recordingCacheSizeInMB,recordingCacheDurationInSecs,recordingCompressionEnabled,gzipResponse,securityContext);
    }
    @POST
    @Path("/console/configMgr/org.apache.sling.xss.impl.XSSFilterImpl")
    
    @Produces({ "application/json", "text/plain" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "", response = OrgApacheSlingXssImplXSSFilterImplInfo.class, authorizations = {
        @io.swagger.annotations.Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingXssImplXSSFilterImplInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 302, message = "Default response", response = String.class),
        
        @io.swagger.annotations.ApiResponse(code = 200, message = "Default response", response = String.class) })
    public Response orgApacheSlingXssImplXSSFilterImpl(  @QueryParam("post") Boolean post,  @QueryParam("apply") Boolean apply,  @QueryParam("delete") Boolean delete,  @QueryParam("action") String action,  @QueryParam("$location") String $location,  @QueryParam("propertylist") List<String> propertylist,  @QueryParam("policyPath") String policyPath,@Context SecurityContext securityContext)
    throws NotFoundException {
        return service.orgApacheSlingXssImplXSSFilterImpl(post,apply,delete,action,$location,propertylist,policyPath,securityContext);
    }
}
