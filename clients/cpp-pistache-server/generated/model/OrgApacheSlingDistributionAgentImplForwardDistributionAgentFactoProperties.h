/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties.h
 *
 * 
 */

#ifndef OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties_H_
#define OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties_H_


#include "ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyDropDown.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties
    : public ModelBase
{
public:
    OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties();
    virtual ~OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties members

    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getName() const;
    void setName(ConfigNodePropertyString const& value);
    bool nameIsSet() const;
    void unsetName();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getTitle() const;
    void setTitle(ConfigNodePropertyString const& value);
    bool titleIsSet() const;
    void unsetTitle();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getDetails() const;
    void setDetails(ConfigNodePropertyString const& value);
    bool detailsIsSet() const;
    void unsetDetails();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getEnabled() const;
    void setEnabled(ConfigNodePropertyBoolean const& value);
    bool enabledIsSet() const;
    void unsetEnabled();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getServiceName() const;
    void setServiceName(ConfigNodePropertyString const& value);
    bool serviceNameIsSet() const;
    void unsetServiceName();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyDropDown getLogLevel() const;
    void setLogLevel(ConfigNodePropertyDropDown const& value);
    bool logLevelIsSet() const;
    void unsetLog_level();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyArray getAllowedRoots() const;
    void setAllowedRoots(ConfigNodePropertyArray const& value);
    bool allowedRootsIsSet() const;
    void unsetAllowed_roots();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getQueueProcessingEnabled() const;
    void setQueueProcessingEnabled(ConfigNodePropertyBoolean const& value);
    bool queueProcessingEnabledIsSet() const;
    void unsetQueue_processing_enabled();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyArray getPackageImporterEndpoints() const;
    void setPackageImporterEndpoints(ConfigNodePropertyArray const& value);
    bool packageImporterEndpointsIsSet() const;
    void unsetPackageImporter_endpoints();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyArray getPassiveQueues() const;
    void setPassiveQueues(ConfigNodePropertyArray const& value);
    bool passiveQueuesIsSet() const;
    void unsetPassiveQueues();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyArray getPriorityQueues() const;
    void setPriorityQueues(ConfigNodePropertyArray const& value);
    bool priorityQueuesIsSet() const;
    void unsetPriorityQueues();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyDropDown getRetryStrategy() const;
    void setRetryStrategy(ConfigNodePropertyDropDown const& value);
    bool retryStrategyIsSet() const;
    void unsetRetry_strategy();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getRetryAttempts() const;
    void setRetryAttempts(ConfigNodePropertyInteger const& value);
    bool retryAttemptsIsSet() const;
    void unsetRetry_attempts();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getRequestAuthorizationStrategyTarget() const;
    void setRequestAuthorizationStrategyTarget(ConfigNodePropertyString const& value);
    bool requestAuthorizationStrategyTargetIsSet() const;
    void unsetRequestAuthorizationStrategy_target();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getTransportSecretProviderTarget() const;
    void setTransportSecretProviderTarget(ConfigNodePropertyString const& value);
    bool transportSecretProviderTargetIsSet() const;
    void unsetTransportSecretProvider_target();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getPackageBuilderTarget() const;
    void setPackageBuilderTarget(ConfigNodePropertyString const& value);
    bool packageBuilderTargetIsSet() const;
    void unsetPackageBuilder_target();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getTriggersTarget() const;
    void setTriggersTarget(ConfigNodePropertyString const& value);
    bool triggersTargetIsSet() const;
    void unsetTriggers_target();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyDropDown getQueueProvider() const;
    void setQueueProvider(ConfigNodePropertyDropDown const& value);
    bool queueProviderIsSet() const;
    void unsetQueue_provider();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getAsyncDelivery() const;
    void setAsyncDelivery(ConfigNodePropertyBoolean const& value);
    bool asyncDeliveryIsSet() const;
    void unsetAsync_delivery();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getHttpConnTimeout() const;
    void setHttpConnTimeout(ConfigNodePropertyInteger const& value);
    bool httpConnTimeoutIsSet() const;
    void unsetHttp_conn_timeout();

protected:
    ConfigNodePropertyString m_Name;
    bool m_NameIsSet;
    ConfigNodePropertyString m_Title;
    bool m_TitleIsSet;
    ConfigNodePropertyString m_Details;
    bool m_DetailsIsSet;
    ConfigNodePropertyBoolean m_Enabled;
    bool m_EnabledIsSet;
    ConfigNodePropertyString m_ServiceName;
    bool m_ServiceNameIsSet;
    ConfigNodePropertyDropDown m_Log_level;
    bool m_Log_levelIsSet;
    ConfigNodePropertyArray m_Allowed_roots;
    bool m_Allowed_rootsIsSet;
    ConfigNodePropertyBoolean m_Queue_processing_enabled;
    bool m_Queue_processing_enabledIsSet;
    ConfigNodePropertyArray m_PackageImporter_endpoints;
    bool m_PackageImporter_endpointsIsSet;
    ConfigNodePropertyArray m_PassiveQueues;
    bool m_PassiveQueuesIsSet;
    ConfigNodePropertyArray m_PriorityQueues;
    bool m_PriorityQueuesIsSet;
    ConfigNodePropertyDropDown m_Retry_strategy;
    bool m_Retry_strategyIsSet;
    ConfigNodePropertyInteger m_Retry_attempts;
    bool m_Retry_attemptsIsSet;
    ConfigNodePropertyString m_RequestAuthorizationStrategy_target;
    bool m_RequestAuthorizationStrategy_targetIsSet;
    ConfigNodePropertyString m_TransportSecretProvider_target;
    bool m_TransportSecretProvider_targetIsSet;
    ConfigNodePropertyString m_PackageBuilder_target;
    bool m_PackageBuilder_targetIsSet;
    ConfigNodePropertyString m_Triggers_target;
    bool m_Triggers_targetIsSet;
    ConfigNodePropertyDropDown m_Queue_provider;
    bool m_Queue_providerIsSet;
    ConfigNodePropertyBoolean m_Async_delivery;
    bool m_Async_deliveryIsSet;
    ConfigNodePropertyInteger m_Http_conn_timeout;
    bool m_Http_conn_timeoutIsSet;
};

}
}
}
}

#endif /* OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties_H_ */
