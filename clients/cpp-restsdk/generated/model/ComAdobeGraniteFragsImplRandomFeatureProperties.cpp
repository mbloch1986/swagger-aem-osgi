/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeGraniteFragsImplRandomFeatureProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeGraniteFragsImplRandomFeatureProperties::ComAdobeGraniteFragsImplRandomFeatureProperties()
{
    m_Feature_nameIsSet = false;
    m_Feature_descriptionIsSet = false;
    m_Active_percentageIsSet = false;
    m_Cookie_nameIsSet = false;
    m_Cookie_maxAgeIsSet = false;
}

ComAdobeGraniteFragsImplRandomFeatureProperties::~ComAdobeGraniteFragsImplRandomFeatureProperties()
{
}

void ComAdobeGraniteFragsImplRandomFeatureProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeGraniteFragsImplRandomFeatureProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Feature_nameIsSet)
    {
        val[utility::conversions::to_string_t("feature.name")] = ModelBase::toJson(m_Feature_name);
    }
    if(m_Feature_descriptionIsSet)
    {
        val[utility::conversions::to_string_t("feature.description")] = ModelBase::toJson(m_Feature_description);
    }
    if(m_Active_percentageIsSet)
    {
        val[utility::conversions::to_string_t("active.percentage")] = ModelBase::toJson(m_Active_percentage);
    }
    if(m_Cookie_nameIsSet)
    {
        val[utility::conversions::to_string_t("cookie.name")] = ModelBase::toJson(m_Cookie_name);
    }
    if(m_Cookie_maxAgeIsSet)
    {
        val[utility::conversions::to_string_t("cookie.maxAge")] = ModelBase::toJson(m_Cookie_maxAge);
    }

    return val;
}

void ComAdobeGraniteFragsImplRandomFeatureProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("feature.name")))
    {
        if(!val[utility::conversions::to_string_t("feature.name")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("feature.name")]);
            setFeatureName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("feature.description")))
    {
        if(!val[utility::conversions::to_string_t("feature.description")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("feature.description")]);
            setFeatureDescription( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("active.percentage")))
    {
        if(!val[utility::conversions::to_string_t("active.percentage")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("active.percentage")]);
            setActivePercentage( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cookie.name")))
    {
        if(!val[utility::conversions::to_string_t("cookie.name")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("cookie.name")]);
            setCookieName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cookie.maxAge")))
    {
        if(!val[utility::conversions::to_string_t("cookie.maxAge")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cookie.maxAge")]);
            setCookieMaxAge( newItem );
        }
    }
}

void ComAdobeGraniteFragsImplRandomFeatureProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Feature_nameIsSet)
    {
        if (m_Feature_name.get())
        {
            m_Feature_name->toMultipart(multipart, utility::conversions::to_string_t("feature.name."));
        }
    }
    if(m_Feature_descriptionIsSet)
    {
        if (m_Feature_description.get())
        {
            m_Feature_description->toMultipart(multipart, utility::conversions::to_string_t("feature.description."));
        }
    }
    if(m_Active_percentageIsSet)
    {
        if (m_Active_percentage.get())
        {
            m_Active_percentage->toMultipart(multipart, utility::conversions::to_string_t("active.percentage."));
        }
    }
    if(m_Cookie_nameIsSet)
    {
        if (m_Cookie_name.get())
        {
            m_Cookie_name->toMultipart(multipart, utility::conversions::to_string_t("cookie.name."));
        }
    }
    if(m_Cookie_maxAgeIsSet)
    {
        if (m_Cookie_maxAge.get())
        {
            m_Cookie_maxAge->toMultipart(multipart, utility::conversions::to_string_t("cookie.maxAge."));
        }
    }
}

void ComAdobeGraniteFragsImplRandomFeatureProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("feature.name")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("feature.name")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("feature.name."));
            setFeatureName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("feature.description")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("feature.description")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("feature.description."));
            setFeatureDescription( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("active.percentage")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("active.percentage")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("active.percentage."));
            setActivePercentage( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cookie.name")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cookie.name")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cookie.name."));
            setCookieName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cookie.maxAge")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cookie.maxAge")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cookie.maxAge."));
            setCookieMaxAge( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteFragsImplRandomFeatureProperties::getFeatureName() const
{
    return m_Feature_name;
}


void ComAdobeGraniteFragsImplRandomFeatureProperties::setFeatureName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Feature_name = value;
    m_Feature_nameIsSet = true;
}
bool ComAdobeGraniteFragsImplRandomFeatureProperties::featureNameIsSet() const
{
    return m_Feature_nameIsSet;
}

void ComAdobeGraniteFragsImplRandomFeatureProperties::unsetFeature_name()
{
    m_Feature_nameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteFragsImplRandomFeatureProperties::getFeatureDescription() const
{
    return m_Feature_description;
}


void ComAdobeGraniteFragsImplRandomFeatureProperties::setFeatureDescription(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Feature_description = value;
    m_Feature_descriptionIsSet = true;
}
bool ComAdobeGraniteFragsImplRandomFeatureProperties::featureDescriptionIsSet() const
{
    return m_Feature_descriptionIsSet;
}

void ComAdobeGraniteFragsImplRandomFeatureProperties::unsetFeature_description()
{
    m_Feature_descriptionIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteFragsImplRandomFeatureProperties::getActivePercentage() const
{
    return m_Active_percentage;
}


void ComAdobeGraniteFragsImplRandomFeatureProperties::setActivePercentage(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Active_percentage = value;
    m_Active_percentageIsSet = true;
}
bool ComAdobeGraniteFragsImplRandomFeatureProperties::activePercentageIsSet() const
{
    return m_Active_percentageIsSet;
}

void ComAdobeGraniteFragsImplRandomFeatureProperties::unsetActive_percentage()
{
    m_Active_percentageIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteFragsImplRandomFeatureProperties::getCookieName() const
{
    return m_Cookie_name;
}


void ComAdobeGraniteFragsImplRandomFeatureProperties::setCookieName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Cookie_name = value;
    m_Cookie_nameIsSet = true;
}
bool ComAdobeGraniteFragsImplRandomFeatureProperties::cookieNameIsSet() const
{
    return m_Cookie_nameIsSet;
}

void ComAdobeGraniteFragsImplRandomFeatureProperties::unsetCookie_name()
{
    m_Cookie_nameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeGraniteFragsImplRandomFeatureProperties::getCookieMaxAge() const
{
    return m_Cookie_maxAge;
}


void ComAdobeGraniteFragsImplRandomFeatureProperties::setCookieMaxAge(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cookie_maxAge = value;
    m_Cookie_maxAgeIsSet = true;
}
bool ComAdobeGraniteFragsImplRandomFeatureProperties::cookieMaxAgeIsSet() const
{
    return m_Cookie_maxAgeIsSet;
}

void ComAdobeGraniteFragsImplRandomFeatureProperties::unsetCookie_maxAge()
{
    m_Cookie_maxAgeIsSet = false;
}

}
}
}
}

