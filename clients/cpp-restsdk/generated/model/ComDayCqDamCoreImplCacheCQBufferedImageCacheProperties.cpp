/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqDamCoreImplCacheCQBufferedImageCacheProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqDamCoreImplCacheCQBufferedImageCacheProperties::ComDayCqDamCoreImplCacheCQBufferedImageCacheProperties()
{
    m_Cq_dam_image_cache_max_memoryIsSet = false;
    m_Cq_dam_image_cache_max_ageIsSet = false;
    m_Cq_dam_image_cache_max_dimensionIsSet = false;
}

ComDayCqDamCoreImplCacheCQBufferedImageCacheProperties::~ComDayCqDamCoreImplCacheCQBufferedImageCacheProperties()
{
}

void ComDayCqDamCoreImplCacheCQBufferedImageCacheProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqDamCoreImplCacheCQBufferedImageCacheProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Cq_dam_image_cache_max_memoryIsSet)
    {
        val[utility::conversions::to_string_t("cq.dam.image.cache.max.memory")] = ModelBase::toJson(m_Cq_dam_image_cache_max_memory);
    }
    if(m_Cq_dam_image_cache_max_ageIsSet)
    {
        val[utility::conversions::to_string_t("cq.dam.image.cache.max.age")] = ModelBase::toJson(m_Cq_dam_image_cache_max_age);
    }
    if(m_Cq_dam_image_cache_max_dimensionIsSet)
    {
        val[utility::conversions::to_string_t("cq.dam.image.cache.max.dimension")] = ModelBase::toJson(m_Cq_dam_image_cache_max_dimension);
    }

    return val;
}

void ComDayCqDamCoreImplCacheCQBufferedImageCacheProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("cq.dam.image.cache.max.memory")))
    {
        if(!val[utility::conversions::to_string_t("cq.dam.image.cache.max.memory")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.dam.image.cache.max.memory")]);
            setCqDamImageCacheMaxMemory( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.dam.image.cache.max.age")))
    {
        if(!val[utility::conversions::to_string_t("cq.dam.image.cache.max.age")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.dam.image.cache.max.age")]);
            setCqDamImageCacheMaxAge( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.dam.image.cache.max.dimension")))
    {
        if(!val[utility::conversions::to_string_t("cq.dam.image.cache.max.dimension")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.dam.image.cache.max.dimension")]);
            setCqDamImageCacheMaxDimension( newItem );
        }
    }
}

void ComDayCqDamCoreImplCacheCQBufferedImageCacheProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Cq_dam_image_cache_max_memoryIsSet)
    {
        if (m_Cq_dam_image_cache_max_memory.get())
        {
            m_Cq_dam_image_cache_max_memory->toMultipart(multipart, utility::conversions::to_string_t("cq.dam.image.cache.max.memory."));
        }
    }
    if(m_Cq_dam_image_cache_max_ageIsSet)
    {
        if (m_Cq_dam_image_cache_max_age.get())
        {
            m_Cq_dam_image_cache_max_age->toMultipart(multipart, utility::conversions::to_string_t("cq.dam.image.cache.max.age."));
        }
    }
    if(m_Cq_dam_image_cache_max_dimensionIsSet)
    {
        if (m_Cq_dam_image_cache_max_dimension.get())
        {
            m_Cq_dam_image_cache_max_dimension->toMultipart(multipart, utility::conversions::to_string_t("cq.dam.image.cache.max.dimension."));
        }
    }
}

void ComDayCqDamCoreImplCacheCQBufferedImageCacheProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.image.cache.max.memory")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.image.cache.max.memory")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.dam.image.cache.max.memory."));
            setCqDamImageCacheMaxMemory( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.image.cache.max.age")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.image.cache.max.age")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.dam.image.cache.max.age."));
            setCqDamImageCacheMaxAge( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.image.cache.max.dimension")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.image.cache.max.dimension")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.dam.image.cache.max.dimension."));
            setCqDamImageCacheMaxDimension( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqDamCoreImplCacheCQBufferedImageCacheProperties::getCqDamImageCacheMaxMemory() const
{
    return m_Cq_dam_image_cache_max_memory;
}


void ComDayCqDamCoreImplCacheCQBufferedImageCacheProperties::setCqDamImageCacheMaxMemory(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cq_dam_image_cache_max_memory = value;
    m_Cq_dam_image_cache_max_memoryIsSet = true;
}
bool ComDayCqDamCoreImplCacheCQBufferedImageCacheProperties::cqDamImageCacheMaxMemoryIsSet() const
{
    return m_Cq_dam_image_cache_max_memoryIsSet;
}

void ComDayCqDamCoreImplCacheCQBufferedImageCacheProperties::unsetCq_dam_image_cache_max_memory()
{
    m_Cq_dam_image_cache_max_memoryIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqDamCoreImplCacheCQBufferedImageCacheProperties::getCqDamImageCacheMaxAge() const
{
    return m_Cq_dam_image_cache_max_age;
}


void ComDayCqDamCoreImplCacheCQBufferedImageCacheProperties::setCqDamImageCacheMaxAge(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cq_dam_image_cache_max_age = value;
    m_Cq_dam_image_cache_max_ageIsSet = true;
}
bool ComDayCqDamCoreImplCacheCQBufferedImageCacheProperties::cqDamImageCacheMaxAgeIsSet() const
{
    return m_Cq_dam_image_cache_max_ageIsSet;
}

void ComDayCqDamCoreImplCacheCQBufferedImageCacheProperties::unsetCq_dam_image_cache_max_age()
{
    m_Cq_dam_image_cache_max_ageIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqDamCoreImplCacheCQBufferedImageCacheProperties::getCqDamImageCacheMaxDimension() const
{
    return m_Cq_dam_image_cache_max_dimension;
}


void ComDayCqDamCoreImplCacheCQBufferedImageCacheProperties::setCqDamImageCacheMaxDimension(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Cq_dam_image_cache_max_dimension = value;
    m_Cq_dam_image_cache_max_dimensionIsSet = true;
}
bool ComDayCqDamCoreImplCacheCQBufferedImageCacheProperties::cqDamImageCacheMaxDimensionIsSet() const
{
    return m_Cq_dam_image_cache_max_dimensionIsSet;
}

void ComDayCqDamCoreImplCacheCQBufferedImageCacheProperties::unsetCq_dam_image_cache_max_dimension()
{
    m_Cq_dam_image_cache_max_dimensionIsSet = false;
}

}
}
}
}

