/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties::ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties()
{
    m_Jmx_objectnameIsSet = false;
    m_Property_measure_enabledIsSet = false;
    m_Property_nameIsSet = false;
    m_Property_max_wait_msIsSet = false;
    m_Property_max_rateIsSet = false;
    m_Fulltext_measure_enabledIsSet = false;
    m_Fulltext_nameIsSet = false;
    m_Fulltext_max_wait_msIsSet = false;
    m_Fulltext_max_rateIsSet = false;
}

ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties::~ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties()
{
}

void ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Jmx_objectnameIsSet)
    {
        val[utility::conversions::to_string_t("jmx.objectname")] = ModelBase::toJson(m_Jmx_objectname);
    }
    if(m_Property_measure_enabledIsSet)
    {
        val[utility::conversions::to_string_t("property.measure.enabled")] = ModelBase::toJson(m_Property_measure_enabled);
    }
    if(m_Property_nameIsSet)
    {
        val[utility::conversions::to_string_t("property.name")] = ModelBase::toJson(m_Property_name);
    }
    if(m_Property_max_wait_msIsSet)
    {
        val[utility::conversions::to_string_t("property.max.wait.ms")] = ModelBase::toJson(m_Property_max_wait_ms);
    }
    if(m_Property_max_rateIsSet)
    {
        val[utility::conversions::to_string_t("property.max.rate")] = ModelBase::toJson(m_Property_max_rate);
    }
    if(m_Fulltext_measure_enabledIsSet)
    {
        val[utility::conversions::to_string_t("fulltext.measure.enabled")] = ModelBase::toJson(m_Fulltext_measure_enabled);
    }
    if(m_Fulltext_nameIsSet)
    {
        val[utility::conversions::to_string_t("fulltext.name")] = ModelBase::toJson(m_Fulltext_name);
    }
    if(m_Fulltext_max_wait_msIsSet)
    {
        val[utility::conversions::to_string_t("fulltext.max.wait.ms")] = ModelBase::toJson(m_Fulltext_max_wait_ms);
    }
    if(m_Fulltext_max_rateIsSet)
    {
        val[utility::conversions::to_string_t("fulltext.max.rate")] = ModelBase::toJson(m_Fulltext_max_rate);
    }

    return val;
}

void ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("jmx.objectname")))
    {
        if(!val[utility::conversions::to_string_t("jmx.objectname")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("jmx.objectname")]);
            setJmxObjectname( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("property.measure.enabled")))
    {
        if(!val[utility::conversions::to_string_t("property.measure.enabled")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("property.measure.enabled")]);
            setPropertyMeasureEnabled( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("property.name")))
    {
        if(!val[utility::conversions::to_string_t("property.name")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("property.name")]);
            setPropertyName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("property.max.wait.ms")))
    {
        if(!val[utility::conversions::to_string_t("property.max.wait.ms")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("property.max.wait.ms")]);
            setPropertyMaxWaitMs( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("property.max.rate")))
    {
        if(!val[utility::conversions::to_string_t("property.max.rate")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyFloat> newItem(new ConfigNodePropertyFloat());
            newItem->fromJson(val[utility::conversions::to_string_t("property.max.rate")]);
            setPropertyMaxRate( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("fulltext.measure.enabled")))
    {
        if(!val[utility::conversions::to_string_t("fulltext.measure.enabled")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("fulltext.measure.enabled")]);
            setFulltextMeasureEnabled( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("fulltext.name")))
    {
        if(!val[utility::conversions::to_string_t("fulltext.name")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("fulltext.name")]);
            setFulltextName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("fulltext.max.wait.ms")))
    {
        if(!val[utility::conversions::to_string_t("fulltext.max.wait.ms")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("fulltext.max.wait.ms")]);
            setFulltextMaxWaitMs( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("fulltext.max.rate")))
    {
        if(!val[utility::conversions::to_string_t("fulltext.max.rate")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyFloat> newItem(new ConfigNodePropertyFloat());
            newItem->fromJson(val[utility::conversions::to_string_t("fulltext.max.rate")]);
            setFulltextMaxRate( newItem );
        }
    }
}

void ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Jmx_objectnameIsSet)
    {
        if (m_Jmx_objectname.get())
        {
            m_Jmx_objectname->toMultipart(multipart, utility::conversions::to_string_t("jmx.objectname."));
        }
    }
    if(m_Property_measure_enabledIsSet)
    {
        if (m_Property_measure_enabled.get())
        {
            m_Property_measure_enabled->toMultipart(multipart, utility::conversions::to_string_t("property.measure.enabled."));
        }
    }
    if(m_Property_nameIsSet)
    {
        if (m_Property_name.get())
        {
            m_Property_name->toMultipart(multipart, utility::conversions::to_string_t("property.name."));
        }
    }
    if(m_Property_max_wait_msIsSet)
    {
        if (m_Property_max_wait_ms.get())
        {
            m_Property_max_wait_ms->toMultipart(multipart, utility::conversions::to_string_t("property.max.wait.ms."));
        }
    }
    if(m_Property_max_rateIsSet)
    {
        if (m_Property_max_rate.get())
        {
            m_Property_max_rate->toMultipart(multipart, utility::conversions::to_string_t("property.max.rate."));
        }
    }
    if(m_Fulltext_measure_enabledIsSet)
    {
        if (m_Fulltext_measure_enabled.get())
        {
            m_Fulltext_measure_enabled->toMultipart(multipart, utility::conversions::to_string_t("fulltext.measure.enabled."));
        }
    }
    if(m_Fulltext_nameIsSet)
    {
        if (m_Fulltext_name.get())
        {
            m_Fulltext_name->toMultipart(multipart, utility::conversions::to_string_t("fulltext.name."));
        }
    }
    if(m_Fulltext_max_wait_msIsSet)
    {
        if (m_Fulltext_max_wait_ms.get())
        {
            m_Fulltext_max_wait_ms->toMultipart(multipart, utility::conversions::to_string_t("fulltext.max.wait.ms."));
        }
    }
    if(m_Fulltext_max_rateIsSet)
    {
        if (m_Fulltext_max_rate.get())
        {
            m_Fulltext_max_rate->toMultipart(multipart, utility::conversions::to_string_t("fulltext.max.rate."));
        }
    }
}

void ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("jmx.objectname")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("jmx.objectname")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("jmx.objectname."));
            setJmxObjectname( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("property.measure.enabled")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("property.measure.enabled")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("property.measure.enabled."));
            setPropertyMeasureEnabled( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("property.name")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("property.name")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("property.name."));
            setPropertyName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("property.max.wait.ms")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("property.max.wait.ms")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("property.max.wait.ms."));
            setPropertyMaxWaitMs( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("property.max.rate")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("property.max.rate")))
        {
            std::shared_ptr<ConfigNodePropertyFloat> newItem(new ConfigNodePropertyFloat());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("property.max.rate."));
            setPropertyMaxRate( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fulltext.measure.enabled")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("fulltext.measure.enabled")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("fulltext.measure.enabled."));
            setFulltextMeasureEnabled( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fulltext.name")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("fulltext.name")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("fulltext.name."));
            setFulltextName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fulltext.max.wait.ms")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("fulltext.max.wait.ms")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("fulltext.max.wait.ms."));
            setFulltextMaxWaitMs( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fulltext.max.rate")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("fulltext.max.rate")))
        {
            std::shared_ptr<ConfigNodePropertyFloat> newItem(new ConfigNodePropertyFloat());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("fulltext.max.rate."));
            setFulltextMaxRate( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties::getJmxObjectname() const
{
    return m_Jmx_objectname;
}


void ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties::setJmxObjectname(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Jmx_objectname = value;
    m_Jmx_objectnameIsSet = true;
}
bool ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties::jmxObjectnameIsSet() const
{
    return m_Jmx_objectnameIsSet;
}

void ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties::unsetJmx_objectname()
{
    m_Jmx_objectnameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties::getPropertyMeasureEnabled() const
{
    return m_Property_measure_enabled;
}


void ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties::setPropertyMeasureEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Property_measure_enabled = value;
    m_Property_measure_enabledIsSet = true;
}
bool ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties::propertyMeasureEnabledIsSet() const
{
    return m_Property_measure_enabledIsSet;
}

void ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties::unsetProperty_measure_enabled()
{
    m_Property_measure_enabledIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties::getPropertyName() const
{
    return m_Property_name;
}


void ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties::setPropertyName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Property_name = value;
    m_Property_nameIsSet = true;
}
bool ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties::propertyNameIsSet() const
{
    return m_Property_nameIsSet;
}

void ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties::unsetProperty_name()
{
    m_Property_nameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties::getPropertyMaxWaitMs() const
{
    return m_Property_max_wait_ms;
}


void ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties::setPropertyMaxWaitMs(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Property_max_wait_ms = value;
    m_Property_max_wait_msIsSet = true;
}
bool ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties::propertyMaxWaitMsIsSet() const
{
    return m_Property_max_wait_msIsSet;
}

void ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties::unsetProperty_max_wait_ms()
{
    m_Property_max_wait_msIsSet = false;
}

std::shared_ptr<ConfigNodePropertyFloat> ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties::getPropertyMaxRate() const
{
    return m_Property_max_rate;
}


void ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties::setPropertyMaxRate(std::shared_ptr<ConfigNodePropertyFloat> value)
{
    m_Property_max_rate = value;
    m_Property_max_rateIsSet = true;
}
bool ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties::propertyMaxRateIsSet() const
{
    return m_Property_max_rateIsSet;
}

void ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties::unsetProperty_max_rate()
{
    m_Property_max_rateIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties::getFulltextMeasureEnabled() const
{
    return m_Fulltext_measure_enabled;
}


void ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties::setFulltextMeasureEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Fulltext_measure_enabled = value;
    m_Fulltext_measure_enabledIsSet = true;
}
bool ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties::fulltextMeasureEnabledIsSet() const
{
    return m_Fulltext_measure_enabledIsSet;
}

void ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties::unsetFulltext_measure_enabled()
{
    m_Fulltext_measure_enabledIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties::getFulltextName() const
{
    return m_Fulltext_name;
}


void ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties::setFulltextName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Fulltext_name = value;
    m_Fulltext_nameIsSet = true;
}
bool ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties::fulltextNameIsSet() const
{
    return m_Fulltext_nameIsSet;
}

void ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties::unsetFulltext_name()
{
    m_Fulltext_nameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties::getFulltextMaxWaitMs() const
{
    return m_Fulltext_max_wait_ms;
}


void ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties::setFulltextMaxWaitMs(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Fulltext_max_wait_ms = value;
    m_Fulltext_max_wait_msIsSet = true;
}
bool ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties::fulltextMaxWaitMsIsSet() const
{
    return m_Fulltext_max_wait_msIsSet;
}

void ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties::unsetFulltext_max_wait_ms()
{
    m_Fulltext_max_wait_msIsSet = false;
}

std::shared_ptr<ConfigNodePropertyFloat> ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties::getFulltextMaxRate() const
{
    return m_Fulltext_max_rate;
}


void ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties::setFulltextMaxRate(std::shared_ptr<ConfigNodePropertyFloat> value)
{
    m_Fulltext_max_rate = value;
    m_Fulltext_max_rateIsSet = true;
}
bool ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties::fulltextMaxRateIsSet() const
{
    return m_Fulltext_max_rateIsSet;
}

void ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties::unsetFulltext_max_rate()
{
    m_Fulltext_max_rateIsSet = false;
}

}
}
}
}

