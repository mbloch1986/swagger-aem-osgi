/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::OAIComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::OAIComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties() {
    this->init();
}

OAIComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::~OAIComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties() {
    
}

void
OAIComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::init() {
    m_enable_isSet = false;
    m_ugc_limit_isSet = false;
    m_ugc_limit_duration_isSet = false;
    m_domains_isSet = false;
    m_to_list_isSet = false;
}

void
OAIComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(enable, json[QString("enable")]);
    
    ::OpenAPI::fromJsonValue(ugc_limit, json[QString("UGCLimit")]);
    
    ::OpenAPI::fromJsonValue(ugc_limit_duration, json[QString("ugcLimitDuration")]);
    
    ::OpenAPI::fromJsonValue(domains, json[QString("domains")]);
    
    ::OpenAPI::fromJsonValue(to_list, json[QString("toList")]);
    
}

QString
OAIComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::asJsonObject() const {
    QJsonObject obj;
	if(enable.isSet()){
        obj.insert(QString("enable"), ::OpenAPI::toJsonValue(enable));
    }
	if(ugc_limit.isSet()){
        obj.insert(QString("UGCLimit"), ::OpenAPI::toJsonValue(ugc_limit));
    }
	if(ugc_limit_duration.isSet()){
        obj.insert(QString("ugcLimitDuration"), ::OpenAPI::toJsonValue(ugc_limit_duration));
    }
	if(domains.isSet()){
        obj.insert(QString("domains"), ::OpenAPI::toJsonValue(domains));
    }
	if(to_list.isSet()){
        obj.insert(QString("toList"), ::OpenAPI::toJsonValue(to_list));
    }
    return obj;
}

OAIConfigNodePropertyBoolean
OAIComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::getEnable() const {
    return enable;
}
void
OAIComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::setEnable(const OAIConfigNodePropertyBoolean &enable) {
    this->enable = enable;
    this->m_enable_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::getUgcLimit() const {
    return ugc_limit;
}
void
OAIComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::setUgcLimit(const OAIConfigNodePropertyInteger &ugc_limit) {
    this->ugc_limit = ugc_limit;
    this->m_ugc_limit_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::getUgcLimitDuration() const {
    return ugc_limit_duration;
}
void
OAIComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::setUgcLimitDuration(const OAIConfigNodePropertyInteger &ugc_limit_duration) {
    this->ugc_limit_duration = ugc_limit_duration;
    this->m_ugc_limit_duration_isSet = true;
}

OAIConfigNodePropertyArray
OAIComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::getDomains() const {
    return domains;
}
void
OAIComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::setDomains(const OAIConfigNodePropertyArray &domains) {
    this->domains = domains;
    this->m_domains_isSet = true;
}

OAIConfigNodePropertyArray
OAIComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::getToList() const {
    return to_list;
}
void
OAIComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::setToList(const OAIConfigNodePropertyArray &to_list) {
    this->to_list = to_list;
    this->m_to_list_isSet = true;
}


bool
OAIComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(enable.isSet()){ isObjectUpdated = true; break;}
    
        if(ugc_limit.isSet()){ isObjectUpdated = true; break;}
    
        if(ugc_limit_duration.isSet()){ isObjectUpdated = true; break;}
    
        if(domains.isSet()){ isObjectUpdated = true; break;}
    
        if(to_list.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

