/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties()
{
    m_NameIsSet = false;
    m_TitleIsSet = false;
    m_DetailsIsSet = false;
    m_EnabledIsSet = false;
    m_ServiceNameIsSet = false;
    m_Log_levelIsSet = false;
    m_Queue_processing_enabledIsSet = false;
    m_PassiveQueuesIsSet = false;
    m_PackageExporter_endpointsIsSet = false;
    m_PackageImporter_endpointsIsSet = false;
    m_Retry_strategyIsSet = false;
    m_Retry_attemptsIsSet = false;
    m_Pull_itemsIsSet = false;
    m_Http_conn_timeoutIsSet = false;
    m_RequestAuthorizationStrategy_targetIsSet = false;
    m_TransportSecretProvider_targetIsSet = false;
    m_PackageBuilder_targetIsSet = false;
    m_Triggers_targetIsSet = false;
    
}

OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::~OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties()
{
}

void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_NameIsSet)
    {
        val["name"] = ModelBase::toJson(m_Name);
    }
    if(m_TitleIsSet)
    {
        val["title"] = ModelBase::toJson(m_Title);
    }
    if(m_DetailsIsSet)
    {
        val["details"] = ModelBase::toJson(m_Details);
    }
    if(m_EnabledIsSet)
    {
        val["enabled"] = ModelBase::toJson(m_Enabled);
    }
    if(m_ServiceNameIsSet)
    {
        val["serviceName"] = ModelBase::toJson(m_ServiceName);
    }
    if(m_Log_levelIsSet)
    {
        val["log.level"] = ModelBase::toJson(m_Log_level);
    }
    if(m_Queue_processing_enabledIsSet)
    {
        val["queue.processing.enabled"] = ModelBase::toJson(m_Queue_processing_enabled);
    }
    if(m_PassiveQueuesIsSet)
    {
        val["passiveQueues"] = ModelBase::toJson(m_PassiveQueues);
    }
    if(m_PackageExporter_endpointsIsSet)
    {
        val["packageExporter.endpoints"] = ModelBase::toJson(m_PackageExporter_endpoints);
    }
    if(m_PackageImporter_endpointsIsSet)
    {
        val["packageImporter.endpoints"] = ModelBase::toJson(m_PackageImporter_endpoints);
    }
    if(m_Retry_strategyIsSet)
    {
        val["retry.strategy"] = ModelBase::toJson(m_Retry_strategy);
    }
    if(m_Retry_attemptsIsSet)
    {
        val["retry.attempts"] = ModelBase::toJson(m_Retry_attempts);
    }
    if(m_Pull_itemsIsSet)
    {
        val["pull.items"] = ModelBase::toJson(m_Pull_items);
    }
    if(m_Http_conn_timeoutIsSet)
    {
        val["http.conn.timeout"] = ModelBase::toJson(m_Http_conn_timeout);
    }
    if(m_RequestAuthorizationStrategy_targetIsSet)
    {
        val["requestAuthorizationStrategy.target"] = ModelBase::toJson(m_RequestAuthorizationStrategy_target);
    }
    if(m_TransportSecretProvider_targetIsSet)
    {
        val["transportSecretProvider.target"] = ModelBase::toJson(m_TransportSecretProvider_target);
    }
    if(m_PackageBuilder_targetIsSet)
    {
        val["packageBuilder.target"] = ModelBase::toJson(m_PackageBuilder_target);
    }
    if(m_Triggers_targetIsSet)
    {
        val["triggers.target"] = ModelBase::toJson(m_Triggers_target);
    }
    

    return val;
}

void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::fromJson(nlohmann::json& val)
{
    if(val.find("name") != val.end())
    {
        if(!val["name"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["name"]);
            setName( newItem );
        }
        
    }
    if(val.find("title") != val.end())
    {
        if(!val["title"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["title"]);
            setTitle( newItem );
        }
        
    }
    if(val.find("details") != val.end())
    {
        if(!val["details"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["details"]);
            setDetails( newItem );
        }
        
    }
    if(val.find("enabled") != val.end())
    {
        if(!val["enabled"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["enabled"]);
            setEnabled( newItem );
        }
        
    }
    if(val.find("serviceName") != val.end())
    {
        if(!val["serviceName"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["serviceName"]);
            setServiceName( newItem );
        }
        
    }
    if(val.find("log.level") != val.end())
    {
        if(!val["log.level"].is_null())
        {
            ConfigNodePropertyDropDown newItem;
            newItem.fromJson(val["log.level"]);
            setLogLevel( newItem );
        }
        
    }
    if(val.find("queue.processing.enabled") != val.end())
    {
        if(!val["queue.processing.enabled"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["queue.processing.enabled"]);
            setQueueProcessingEnabled( newItem );
        }
        
    }
    if(val.find("passiveQueues") != val.end())
    {
        if(!val["passiveQueues"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["passiveQueues"]);
            setPassiveQueues( newItem );
        }
        
    }
    if(val.find("packageExporter.endpoints") != val.end())
    {
        if(!val["packageExporter.endpoints"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["packageExporter.endpoints"]);
            setPackageExporterEndpoints( newItem );
        }
        
    }
    if(val.find("packageImporter.endpoints") != val.end())
    {
        if(!val["packageImporter.endpoints"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["packageImporter.endpoints"]);
            setPackageImporterEndpoints( newItem );
        }
        
    }
    if(val.find("retry.strategy") != val.end())
    {
        if(!val["retry.strategy"].is_null())
        {
            ConfigNodePropertyDropDown newItem;
            newItem.fromJson(val["retry.strategy"]);
            setRetryStrategy( newItem );
        }
        
    }
    if(val.find("retry.attempts") != val.end())
    {
        if(!val["retry.attempts"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["retry.attempts"]);
            setRetryAttempts( newItem );
        }
        
    }
    if(val.find("pull.items") != val.end())
    {
        if(!val["pull.items"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["pull.items"]);
            setPullItems( newItem );
        }
        
    }
    if(val.find("http.conn.timeout") != val.end())
    {
        if(!val["http.conn.timeout"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["http.conn.timeout"]);
            setHttpConnTimeout( newItem );
        }
        
    }
    if(val.find("requestAuthorizationStrategy.target") != val.end())
    {
        if(!val["requestAuthorizationStrategy.target"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["requestAuthorizationStrategy.target"]);
            setRequestAuthorizationStrategyTarget( newItem );
        }
        
    }
    if(val.find("transportSecretProvider.target") != val.end())
    {
        if(!val["transportSecretProvider.target"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["transportSecretProvider.target"]);
            setTransportSecretProviderTarget( newItem );
        }
        
    }
    if(val.find("packageBuilder.target") != val.end())
    {
        if(!val["packageBuilder.target"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["packageBuilder.target"]);
            setPackageBuilderTarget( newItem );
        }
        
    }
    if(val.find("triggers.target") != val.end())
    {
        if(!val["triggers.target"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["triggers.target"]);
            setTriggersTarget( newItem );
        }
        
    }
    
}


ConfigNodePropertyString OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::getName() const
{
    return m_Name;
}
void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::setName(ConfigNodePropertyString const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::nameIsSet() const
{
    return m_NameIsSet;
}
void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::unsetName()
{
    m_NameIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::getTitle() const
{
    return m_Title;
}
void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::setTitle(ConfigNodePropertyString const& value)
{
    m_Title = value;
    m_TitleIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::titleIsSet() const
{
    return m_TitleIsSet;
}
void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::unsetTitle()
{
    m_TitleIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::getDetails() const
{
    return m_Details;
}
void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::setDetails(ConfigNodePropertyString const& value)
{
    m_Details = value;
    m_DetailsIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::detailsIsSet() const
{
    return m_DetailsIsSet;
}
void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::unsetDetails()
{
    m_DetailsIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::getEnabled() const
{
    return m_Enabled;
}
void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::setEnabled(ConfigNodePropertyBoolean const& value)
{
    m_Enabled = value;
    m_EnabledIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::enabledIsSet() const
{
    return m_EnabledIsSet;
}
void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::unsetEnabled()
{
    m_EnabledIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::getServiceName() const
{
    return m_ServiceName;
}
void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::setServiceName(ConfigNodePropertyString const& value)
{
    m_ServiceName = value;
    m_ServiceNameIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::serviceNameIsSet() const
{
    return m_ServiceNameIsSet;
}
void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::unsetServiceName()
{
    m_ServiceNameIsSet = false;
}
ConfigNodePropertyDropDown OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::getLogLevel() const
{
    return m_Log_level;
}
void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::setLogLevel(ConfigNodePropertyDropDown const& value)
{
    m_Log_level = value;
    m_Log_levelIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::logLevelIsSet() const
{
    return m_Log_levelIsSet;
}
void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::unsetLog_level()
{
    m_Log_levelIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::getQueueProcessingEnabled() const
{
    return m_Queue_processing_enabled;
}
void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::setQueueProcessingEnabled(ConfigNodePropertyBoolean const& value)
{
    m_Queue_processing_enabled = value;
    m_Queue_processing_enabledIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::queueProcessingEnabledIsSet() const
{
    return m_Queue_processing_enabledIsSet;
}
void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::unsetQueue_processing_enabled()
{
    m_Queue_processing_enabledIsSet = false;
}
ConfigNodePropertyArray OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::getPassiveQueues() const
{
    return m_PassiveQueues;
}
void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::setPassiveQueues(ConfigNodePropertyArray const& value)
{
    m_PassiveQueues = value;
    m_PassiveQueuesIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::passiveQueuesIsSet() const
{
    return m_PassiveQueuesIsSet;
}
void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::unsetPassiveQueues()
{
    m_PassiveQueuesIsSet = false;
}
ConfigNodePropertyArray OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::getPackageExporterEndpoints() const
{
    return m_PackageExporter_endpoints;
}
void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::setPackageExporterEndpoints(ConfigNodePropertyArray const& value)
{
    m_PackageExporter_endpoints = value;
    m_PackageExporter_endpointsIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::packageExporterEndpointsIsSet() const
{
    return m_PackageExporter_endpointsIsSet;
}
void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::unsetPackageExporter_endpoints()
{
    m_PackageExporter_endpointsIsSet = false;
}
ConfigNodePropertyArray OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::getPackageImporterEndpoints() const
{
    return m_PackageImporter_endpoints;
}
void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::setPackageImporterEndpoints(ConfigNodePropertyArray const& value)
{
    m_PackageImporter_endpoints = value;
    m_PackageImporter_endpointsIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::packageImporterEndpointsIsSet() const
{
    return m_PackageImporter_endpointsIsSet;
}
void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::unsetPackageImporter_endpoints()
{
    m_PackageImporter_endpointsIsSet = false;
}
ConfigNodePropertyDropDown OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::getRetryStrategy() const
{
    return m_Retry_strategy;
}
void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::setRetryStrategy(ConfigNodePropertyDropDown const& value)
{
    m_Retry_strategy = value;
    m_Retry_strategyIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::retryStrategyIsSet() const
{
    return m_Retry_strategyIsSet;
}
void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::unsetRetry_strategy()
{
    m_Retry_strategyIsSet = false;
}
ConfigNodePropertyInteger OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::getRetryAttempts() const
{
    return m_Retry_attempts;
}
void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::setRetryAttempts(ConfigNodePropertyInteger const& value)
{
    m_Retry_attempts = value;
    m_Retry_attemptsIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::retryAttemptsIsSet() const
{
    return m_Retry_attemptsIsSet;
}
void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::unsetRetry_attempts()
{
    m_Retry_attemptsIsSet = false;
}
ConfigNodePropertyInteger OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::getPullItems() const
{
    return m_Pull_items;
}
void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::setPullItems(ConfigNodePropertyInteger const& value)
{
    m_Pull_items = value;
    m_Pull_itemsIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::pullItemsIsSet() const
{
    return m_Pull_itemsIsSet;
}
void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::unsetPull_items()
{
    m_Pull_itemsIsSet = false;
}
ConfigNodePropertyInteger OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::getHttpConnTimeout() const
{
    return m_Http_conn_timeout;
}
void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::setHttpConnTimeout(ConfigNodePropertyInteger const& value)
{
    m_Http_conn_timeout = value;
    m_Http_conn_timeoutIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::httpConnTimeoutIsSet() const
{
    return m_Http_conn_timeoutIsSet;
}
void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::unsetHttp_conn_timeout()
{
    m_Http_conn_timeoutIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::getRequestAuthorizationStrategyTarget() const
{
    return m_RequestAuthorizationStrategy_target;
}
void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::setRequestAuthorizationStrategyTarget(ConfigNodePropertyString const& value)
{
    m_RequestAuthorizationStrategy_target = value;
    m_RequestAuthorizationStrategy_targetIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::requestAuthorizationStrategyTargetIsSet() const
{
    return m_RequestAuthorizationStrategy_targetIsSet;
}
void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::unsetRequestAuthorizationStrategy_target()
{
    m_RequestAuthorizationStrategy_targetIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::getTransportSecretProviderTarget() const
{
    return m_TransportSecretProvider_target;
}
void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::setTransportSecretProviderTarget(ConfigNodePropertyString const& value)
{
    m_TransportSecretProvider_target = value;
    m_TransportSecretProvider_targetIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::transportSecretProviderTargetIsSet() const
{
    return m_TransportSecretProvider_targetIsSet;
}
void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::unsetTransportSecretProvider_target()
{
    m_TransportSecretProvider_targetIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::getPackageBuilderTarget() const
{
    return m_PackageBuilder_target;
}
void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::setPackageBuilderTarget(ConfigNodePropertyString const& value)
{
    m_PackageBuilder_target = value;
    m_PackageBuilder_targetIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::packageBuilderTargetIsSet() const
{
    return m_PackageBuilder_targetIsSet;
}
void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::unsetPackageBuilder_target()
{
    m_PackageBuilder_targetIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::getTriggersTarget() const
{
    return m_Triggers_target;
}
void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::setTriggersTarget(ConfigNodePropertyString const& value)
{
    m_Triggers_target = value;
    m_Triggers_targetIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::triggersTargetIsSet() const
{
    return m_Triggers_targetIsSet;
}
void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::unsetTriggers_target()
{
    m_Triggers_targetIsSet = false;
}

}
}
}
}

