/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqDamCoreImplReportsReportPurgeServiceProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqDamCoreImplReportsReportPurgeServiceProperties::OAIComDayCqDamCoreImplReportsReportPurgeServiceProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComDayCqDamCoreImplReportsReportPurgeServiceProperties::OAIComDayCqDamCoreImplReportsReportPurgeServiceProperties() {
    init();
}

OAIComDayCqDamCoreImplReportsReportPurgeServiceProperties::~OAIComDayCqDamCoreImplReportsReportPurgeServiceProperties() {
    this->cleanup();
}

void
OAIComDayCqDamCoreImplReportsReportPurgeServiceProperties::init() {
    scheduler_expression = new OAIConfigNodePropertyString();
    m_scheduler_expression_isSet = false;
    max_saved_reports = new OAIConfigNodePropertyInteger();
    m_max_saved_reports_isSet = false;
    time_duration = new OAIConfigNodePropertyInteger();
    m_time_duration_isSet = false;
    enable_report_purge = new OAIConfigNodePropertyBoolean();
    m_enable_report_purge_isSet = false;
}

void
OAIComDayCqDamCoreImplReportsReportPurgeServiceProperties::cleanup() {
    if(scheduler_expression != nullptr) { 
        delete scheduler_expression;
    }
    if(max_saved_reports != nullptr) { 
        delete max_saved_reports;
    }
    if(time_duration != nullptr) { 
        delete time_duration;
    }
    if(enable_report_purge != nullptr) { 
        delete enable_report_purge;
    }
}

OAIComDayCqDamCoreImplReportsReportPurgeServiceProperties*
OAIComDayCqDamCoreImplReportsReportPurgeServiceProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComDayCqDamCoreImplReportsReportPurgeServiceProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&scheduler_expression, pJson["scheduler.expression"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&max_saved_reports, pJson["maxSavedReports"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&time_duration, pJson["timeDuration"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&enable_report_purge, pJson["enableReportPurge"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
}

QString
OAIComDayCqDamCoreImplReportsReportPurgeServiceProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqDamCoreImplReportsReportPurgeServiceProperties::asJsonObject() {
    QJsonObject obj;
    if((scheduler_expression != nullptr) && (scheduler_expression->isSet())){
        toJsonValue(QString("scheduler.expression"), scheduler_expression, obj, QString("OAIConfigNodePropertyString"));
    }
    if((max_saved_reports != nullptr) && (max_saved_reports->isSet())){
        toJsonValue(QString("maxSavedReports"), max_saved_reports, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((time_duration != nullptr) && (time_duration->isSet())){
        toJsonValue(QString("timeDuration"), time_duration, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((enable_report_purge != nullptr) && (enable_report_purge->isSet())){
        toJsonValue(QString("enableReportPurge"), enable_report_purge, obj, QString("OAIConfigNodePropertyBoolean"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIComDayCqDamCoreImplReportsReportPurgeServiceProperties::getSchedulerExpression() {
    return scheduler_expression;
}
void
OAIComDayCqDamCoreImplReportsReportPurgeServiceProperties::setSchedulerExpression(OAIConfigNodePropertyString* scheduler_expression) {
    this->scheduler_expression = scheduler_expression;
    this->m_scheduler_expression_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComDayCqDamCoreImplReportsReportPurgeServiceProperties::getMaxSavedReports() {
    return max_saved_reports;
}
void
OAIComDayCqDamCoreImplReportsReportPurgeServiceProperties::setMaxSavedReports(OAIConfigNodePropertyInteger* max_saved_reports) {
    this->max_saved_reports = max_saved_reports;
    this->m_max_saved_reports_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComDayCqDamCoreImplReportsReportPurgeServiceProperties::getTimeDuration() {
    return time_duration;
}
void
OAIComDayCqDamCoreImplReportsReportPurgeServiceProperties::setTimeDuration(OAIConfigNodePropertyInteger* time_duration) {
    this->time_duration = time_duration;
    this->m_time_duration_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComDayCqDamCoreImplReportsReportPurgeServiceProperties::getEnableReportPurge() {
    return enable_report_purge;
}
void
OAIComDayCqDamCoreImplReportsReportPurgeServiceProperties::setEnableReportPurge(OAIConfigNodePropertyBoolean* enable_report_purge) {
    this->enable_report_purge = enable_report_purge;
    this->m_enable_report_purge_isSet = true;
}


bool
OAIComDayCqDamCoreImplReportsReportPurgeServiceProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(scheduler_expression != nullptr && scheduler_expression->isSet()){ isObjectUpdated = true; break;}
        if(max_saved_reports != nullptr && max_saved_reports->isSet()){ isObjectUpdated = true; break;}
        if(time_duration != nullptr && time_duration->isSet()){ isObjectUpdated = true; break;}
        if(enable_report_purge != nullptr && enable_report_purge->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

