/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties.h
 *
 * 
 */

#ifndef ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties_H_
#define ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties_H_



#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"
#include <memory>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties
{
public:
    ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties();
    virtual ~ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties();
    
    std::string toJsonString();
    void fromJsonString(std::string const& jsonString);

    /////////////////////////////////////////////
    /// ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties members
    
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getCqContentsyncPathrewritertransformerMappingLinks() const;
    void setCqContentsyncPathrewritertransformerMappingLinks(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getCqContentsyncPathrewritertransformerMappingClientlibs() const;
    void setCqContentsyncPathrewritertransformerMappingClientlibs(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getCqContentsyncPathrewritertransformerMappingImages() const;
    void setCqContentsyncPathrewritertransformerMappingImages(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getCqContentsyncPathrewritertransformerAttributePattern() const;
    void setCqContentsyncPathrewritertransformerAttributePattern(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getCqContentsyncPathrewritertransformerClientlibraryPattern() const;
    void setCqContentsyncPathrewritertransformerClientlibraryPattern(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getCqContentsyncPathrewritertransformerClientlibraryReplace() const;
    void setCqContentsyncPathrewritertransformerClientlibraryReplace(std::shared_ptr<ConfigNodePropertyString> value);

protected:
    std::shared_ptr<ConfigNodePropertyArray> m_Cq_contentsync_pathrewritertransformer_mapping_links;
    std::shared_ptr<ConfigNodePropertyArray> m_Cq_contentsync_pathrewritertransformer_mapping_clientlibs;
    std::shared_ptr<ConfigNodePropertyArray> m_Cq_contentsync_pathrewritertransformer_mapping_images;
    std::shared_ptr<ConfigNodePropertyString> m_Cq_contentsync_pathrewritertransformer_attribute_pattern;
    std::shared_ptr<ConfigNodePropertyString> m_Cq_contentsync_pathrewritertransformer_clientlibrary_pattern;
    std::shared_ptr<ConfigNodePropertyString> m_Cq_contentsync_pathrewritertransformer_clientlibrary_replace;
};

}
}
}
}

#endif /* ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties_H_ */
