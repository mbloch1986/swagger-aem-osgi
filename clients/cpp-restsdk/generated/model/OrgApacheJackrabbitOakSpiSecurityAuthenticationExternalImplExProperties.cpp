/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties::OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties()
{
    m_Jaas_rankingIsSet = false;
    m_Jaas_controlFlagIsSet = false;
    m_Jaas_realmNameIsSet = false;
    m_Idp_nameIsSet = false;
    m_Sync_handlerNameIsSet = false;
}

OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties::~OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties()
{
}

void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Jaas_rankingIsSet)
    {
        val[utility::conversions::to_string_t("jaas.ranking")] = ModelBase::toJson(m_Jaas_ranking);
    }
    if(m_Jaas_controlFlagIsSet)
    {
        val[utility::conversions::to_string_t("jaas.controlFlag")] = ModelBase::toJson(m_Jaas_controlFlag);
    }
    if(m_Jaas_realmNameIsSet)
    {
        val[utility::conversions::to_string_t("jaas.realmName")] = ModelBase::toJson(m_Jaas_realmName);
    }
    if(m_Idp_nameIsSet)
    {
        val[utility::conversions::to_string_t("idp.name")] = ModelBase::toJson(m_Idp_name);
    }
    if(m_Sync_handlerNameIsSet)
    {
        val[utility::conversions::to_string_t("sync.handlerName")] = ModelBase::toJson(m_Sync_handlerName);
    }

    return val;
}

void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("jaas.ranking")))
    {
        if(!val[utility::conversions::to_string_t("jaas.ranking")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("jaas.ranking")]);
            setJaasRanking( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("jaas.controlFlag")))
    {
        if(!val[utility::conversions::to_string_t("jaas.controlFlag")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("jaas.controlFlag")]);
            setJaasControlFlag( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("jaas.realmName")))
    {
        if(!val[utility::conversions::to_string_t("jaas.realmName")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("jaas.realmName")]);
            setJaasRealmName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("idp.name")))
    {
        if(!val[utility::conversions::to_string_t("idp.name")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("idp.name")]);
            setIdpName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sync.handlerName")))
    {
        if(!val[utility::conversions::to_string_t("sync.handlerName")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("sync.handlerName")]);
            setSyncHandlerName( newItem );
        }
    }
}

void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Jaas_rankingIsSet)
    {
        if (m_Jaas_ranking.get())
        {
            m_Jaas_ranking->toMultipart(multipart, utility::conversions::to_string_t("jaas.ranking."));
        }
    }
    if(m_Jaas_controlFlagIsSet)
    {
        if (m_Jaas_controlFlag.get())
        {
            m_Jaas_controlFlag->toMultipart(multipart, utility::conversions::to_string_t("jaas.controlFlag."));
        }
    }
    if(m_Jaas_realmNameIsSet)
    {
        if (m_Jaas_realmName.get())
        {
            m_Jaas_realmName->toMultipart(multipart, utility::conversions::to_string_t("jaas.realmName."));
        }
    }
    if(m_Idp_nameIsSet)
    {
        if (m_Idp_name.get())
        {
            m_Idp_name->toMultipart(multipart, utility::conversions::to_string_t("idp.name."));
        }
    }
    if(m_Sync_handlerNameIsSet)
    {
        if (m_Sync_handlerName.get())
        {
            m_Sync_handlerName->toMultipart(multipart, utility::conversions::to_string_t("sync.handlerName."));
        }
    }
}

void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("jaas.ranking")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("jaas.ranking")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("jaas.ranking."));
            setJaasRanking( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("jaas.controlFlag")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("jaas.controlFlag")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("jaas.controlFlag."));
            setJaasControlFlag( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("jaas.realmName")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("jaas.realmName")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("jaas.realmName."));
            setJaasRealmName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("idp.name")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("idp.name")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("idp.name."));
            setIdpName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sync.handlerName")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("sync.handlerName")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("sync.handlerName."));
            setSyncHandlerName( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties::getJaasRanking() const
{
    return m_Jaas_ranking;
}


void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties::setJaasRanking(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Jaas_ranking = value;
    m_Jaas_rankingIsSet = true;
}
bool OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties::jaasRankingIsSet() const
{
    return m_Jaas_rankingIsSet;
}

void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties::unsetJaas_ranking()
{
    m_Jaas_rankingIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties::getJaasControlFlag() const
{
    return m_Jaas_controlFlag;
}


void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties::setJaasControlFlag(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Jaas_controlFlag = value;
    m_Jaas_controlFlagIsSet = true;
}
bool OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties::jaasControlFlagIsSet() const
{
    return m_Jaas_controlFlagIsSet;
}

void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties::unsetJaas_controlFlag()
{
    m_Jaas_controlFlagIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties::getJaasRealmName() const
{
    return m_Jaas_realmName;
}


void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties::setJaasRealmName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Jaas_realmName = value;
    m_Jaas_realmNameIsSet = true;
}
bool OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties::jaasRealmNameIsSet() const
{
    return m_Jaas_realmNameIsSet;
}

void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties::unsetJaas_realmName()
{
    m_Jaas_realmNameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties::getIdpName() const
{
    return m_Idp_name;
}


void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties::setIdpName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Idp_name = value;
    m_Idp_nameIsSet = true;
}
bool OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties::idpNameIsSet() const
{
    return m_Idp_nameIsSet;
}

void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties::unsetIdp_name()
{
    m_Idp_nameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties::getSyncHandlerName() const
{
    return m_Sync_handlerName;
}


void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties::setSyncHandlerName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Sync_handlerName = value;
    m_Sync_handlerNameIsSet = true;
}
bool OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties::syncHandlerNameIsSet() const
{
    return m_Sync_handlerNameIsSet;
}

void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties::unsetSync_handlerName()
{
    m_Sync_handlerNameIsSet = false;
}

}
}
}
}

