/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties() {
    init();
}

OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::~OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties() {
    this->cleanup();
}

void
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::init() {
    service_ranking = new OAIConfigNodePropertyInteger();
    m_service_ranking_isSet = false;
    global_size = new OAIConfigNodePropertyInteger();
    m_global_size_isSet = false;
    max_disk_usage = new OAIConfigNodePropertyInteger();
    m_max_disk_usage_isSet = false;
    persistence_enabled = new OAIConfigNodePropertyBoolean();
    m_persistence_enabled_isSet = false;
    thread_pool_max_size = new OAIConfigNodePropertyInteger();
    m_thread_pool_max_size_isSet = false;
    scheduled_thread_pool_max_size = new OAIConfigNodePropertyInteger();
    m_scheduled_thread_pool_max_size_isSet = false;
    graceful_shutdown_timeout = new OAIConfigNodePropertyInteger();
    m_graceful_shutdown_timeout_isSet = false;
    queues = new OAIConfigNodePropertyArray();
    m_queues_isSet = false;
    topics = new OAIConfigNodePropertyArray();
    m_topics_isSet = false;
    addresses_max_delivery_attempts = new OAIConfigNodePropertyInteger();
    m_addresses_max_delivery_attempts_isSet = false;
    addresses_expiry_delay = new OAIConfigNodePropertyInteger();
    m_addresses_expiry_delay_isSet = false;
    addresses_address_full_message_policy = new OAIConfigNodePropertyDropDown();
    m_addresses_address_full_message_policy_isSet = false;
    addresses_max_size_bytes = new OAIConfigNodePropertyInteger();
    m_addresses_max_size_bytes_isSet = false;
    addresses_page_size_bytes = new OAIConfigNodePropertyInteger();
    m_addresses_page_size_bytes_isSet = false;
    addresses_page_cache_max_size = new OAIConfigNodePropertyInteger();
    m_addresses_page_cache_max_size_isSet = false;
    cluster_user = new OAIConfigNodePropertyString();
    m_cluster_user_isSet = false;
    cluster_password = new OAIConfigNodePropertyString();
    m_cluster_password_isSet = false;
    cluster_call_timeout = new OAIConfigNodePropertyInteger();
    m_cluster_call_timeout_isSet = false;
    cluster_call_failover_timeout = new OAIConfigNodePropertyInteger();
    m_cluster_call_failover_timeout_isSet = false;
    cluster_client_failure_check_period = new OAIConfigNodePropertyInteger();
    m_cluster_client_failure_check_period_isSet = false;
    cluster_notification_attempts = new OAIConfigNodePropertyInteger();
    m_cluster_notification_attempts_isSet = false;
    cluster_notification_interval = new OAIConfigNodePropertyInteger();
    m_cluster_notification_interval_isSet = false;
    id_cache_size = new OAIConfigNodePropertyInteger();
    m_id_cache_size_isSet = false;
    cluster_confirmation_window_size = new OAIConfigNodePropertyInteger();
    m_cluster_confirmation_window_size_isSet = false;
    cluster_connection_ttl = new OAIConfigNodePropertyInteger();
    m_cluster_connection_ttl_isSet = false;
    cluster_duplicate_detection = new OAIConfigNodePropertyBoolean();
    m_cluster_duplicate_detection_isSet = false;
    cluster_initial_connect_attempts = new OAIConfigNodePropertyInteger();
    m_cluster_initial_connect_attempts_isSet = false;
    cluster_max_retry_interval = new OAIConfigNodePropertyInteger();
    m_cluster_max_retry_interval_isSet = false;
    cluster_min_large_message_size = new OAIConfigNodePropertyInteger();
    m_cluster_min_large_message_size_isSet = false;
    cluster_producer_window_size = new OAIConfigNodePropertyInteger();
    m_cluster_producer_window_size_isSet = false;
    cluster_reconnect_attempts = new OAIConfigNodePropertyInteger();
    m_cluster_reconnect_attempts_isSet = false;
    cluster_retry_interval = new OAIConfigNodePropertyInteger();
    m_cluster_retry_interval_isSet = false;
    cluster_retry_interval_multiplier = new OAIConfigNodePropertyFloat();
    m_cluster_retry_interval_multiplier_isSet = false;
}

void
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::cleanup() {
    if(service_ranking != nullptr) { 
        delete service_ranking;
    }
    if(global_size != nullptr) { 
        delete global_size;
    }
    if(max_disk_usage != nullptr) { 
        delete max_disk_usage;
    }
    if(persistence_enabled != nullptr) { 
        delete persistence_enabled;
    }
    if(thread_pool_max_size != nullptr) { 
        delete thread_pool_max_size;
    }
    if(scheduled_thread_pool_max_size != nullptr) { 
        delete scheduled_thread_pool_max_size;
    }
    if(graceful_shutdown_timeout != nullptr) { 
        delete graceful_shutdown_timeout;
    }
    if(queues != nullptr) { 
        delete queues;
    }
    if(topics != nullptr) { 
        delete topics;
    }
    if(addresses_max_delivery_attempts != nullptr) { 
        delete addresses_max_delivery_attempts;
    }
    if(addresses_expiry_delay != nullptr) { 
        delete addresses_expiry_delay;
    }
    if(addresses_address_full_message_policy != nullptr) { 
        delete addresses_address_full_message_policy;
    }
    if(addresses_max_size_bytes != nullptr) { 
        delete addresses_max_size_bytes;
    }
    if(addresses_page_size_bytes != nullptr) { 
        delete addresses_page_size_bytes;
    }
    if(addresses_page_cache_max_size != nullptr) { 
        delete addresses_page_cache_max_size;
    }
    if(cluster_user != nullptr) { 
        delete cluster_user;
    }
    if(cluster_password != nullptr) { 
        delete cluster_password;
    }
    if(cluster_call_timeout != nullptr) { 
        delete cluster_call_timeout;
    }
    if(cluster_call_failover_timeout != nullptr) { 
        delete cluster_call_failover_timeout;
    }
    if(cluster_client_failure_check_period != nullptr) { 
        delete cluster_client_failure_check_period;
    }
    if(cluster_notification_attempts != nullptr) { 
        delete cluster_notification_attempts;
    }
    if(cluster_notification_interval != nullptr) { 
        delete cluster_notification_interval;
    }
    if(id_cache_size != nullptr) { 
        delete id_cache_size;
    }
    if(cluster_confirmation_window_size != nullptr) { 
        delete cluster_confirmation_window_size;
    }
    if(cluster_connection_ttl != nullptr) { 
        delete cluster_connection_ttl;
    }
    if(cluster_duplicate_detection != nullptr) { 
        delete cluster_duplicate_detection;
    }
    if(cluster_initial_connect_attempts != nullptr) { 
        delete cluster_initial_connect_attempts;
    }
    if(cluster_max_retry_interval != nullptr) { 
        delete cluster_max_retry_interval;
    }
    if(cluster_min_large_message_size != nullptr) { 
        delete cluster_min_large_message_size;
    }
    if(cluster_producer_window_size != nullptr) { 
        delete cluster_producer_window_size;
    }
    if(cluster_reconnect_attempts != nullptr) { 
        delete cluster_reconnect_attempts;
    }
    if(cluster_retry_interval != nullptr) { 
        delete cluster_retry_interval;
    }
    if(cluster_retry_interval_multiplier != nullptr) { 
        delete cluster_retry_interval_multiplier;
    }
}

OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties*
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&service_ranking, pJson["service.ranking"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&global_size, pJson["global.size"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&max_disk_usage, pJson["max.disk.usage"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&persistence_enabled, pJson["persistence.enabled"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&thread_pool_max_size, pJson["thread.pool.max.size"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&scheduled_thread_pool_max_size, pJson["scheduled.thread.pool.max.size"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&graceful_shutdown_timeout, pJson["graceful.shutdown.timeout"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&queues, pJson["queues"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&topics, pJson["topics"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&addresses_max_delivery_attempts, pJson["addresses.max.delivery.attempts"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&addresses_expiry_delay, pJson["addresses.expiry.delay"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&addresses_address_full_message_policy, pJson["addresses.address.full.message.policy"], "OAIConfigNodePropertyDropDown", "OAIConfigNodePropertyDropDown");
    
    ::OpenAPI::setValue(&addresses_max_size_bytes, pJson["addresses.max.size.bytes"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&addresses_page_size_bytes, pJson["addresses.page.size.bytes"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&addresses_page_cache_max_size, pJson["addresses.page.cache.max.size"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&cluster_user, pJson["cluster.user"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&cluster_password, pJson["cluster.password"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&cluster_call_timeout, pJson["cluster.call.timeout"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&cluster_call_failover_timeout, pJson["cluster.call.failover.timeout"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&cluster_client_failure_check_period, pJson["cluster.client.failure.check.period"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&cluster_notification_attempts, pJson["cluster.notification.attempts"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&cluster_notification_interval, pJson["cluster.notification.interval"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&id_cache_size, pJson["id.cache.size"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&cluster_confirmation_window_size, pJson["cluster.confirmation.window.size"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&cluster_connection_ttl, pJson["cluster.connection.ttl"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&cluster_duplicate_detection, pJson["cluster.duplicate.detection"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&cluster_initial_connect_attempts, pJson["cluster.initial.connect.attempts"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&cluster_max_retry_interval, pJson["cluster.max.retry.interval"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&cluster_min_large_message_size, pJson["cluster.min.large.message.size"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&cluster_producer_window_size, pJson["cluster.producer.window.size"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&cluster_reconnect_attempts, pJson["cluster.reconnect.attempts"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&cluster_retry_interval, pJson["cluster.retry.interval"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&cluster_retry_interval_multiplier, pJson["cluster.retry.interval.multiplier"], "OAIConfigNodePropertyFloat", "OAIConfigNodePropertyFloat");
    
}

QString
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::asJsonObject() {
    QJsonObject obj;
    if((service_ranking != nullptr) && (service_ranking->isSet())){
        toJsonValue(QString("service.ranking"), service_ranking, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((global_size != nullptr) && (global_size->isSet())){
        toJsonValue(QString("global.size"), global_size, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((max_disk_usage != nullptr) && (max_disk_usage->isSet())){
        toJsonValue(QString("max.disk.usage"), max_disk_usage, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((persistence_enabled != nullptr) && (persistence_enabled->isSet())){
        toJsonValue(QString("persistence.enabled"), persistence_enabled, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((thread_pool_max_size != nullptr) && (thread_pool_max_size->isSet())){
        toJsonValue(QString("thread.pool.max.size"), thread_pool_max_size, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((scheduled_thread_pool_max_size != nullptr) && (scheduled_thread_pool_max_size->isSet())){
        toJsonValue(QString("scheduled.thread.pool.max.size"), scheduled_thread_pool_max_size, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((graceful_shutdown_timeout != nullptr) && (graceful_shutdown_timeout->isSet())){
        toJsonValue(QString("graceful.shutdown.timeout"), graceful_shutdown_timeout, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((queues != nullptr) && (queues->isSet())){
        toJsonValue(QString("queues"), queues, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((topics != nullptr) && (topics->isSet())){
        toJsonValue(QString("topics"), topics, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((addresses_max_delivery_attempts != nullptr) && (addresses_max_delivery_attempts->isSet())){
        toJsonValue(QString("addresses.max.delivery.attempts"), addresses_max_delivery_attempts, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((addresses_expiry_delay != nullptr) && (addresses_expiry_delay->isSet())){
        toJsonValue(QString("addresses.expiry.delay"), addresses_expiry_delay, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((addresses_address_full_message_policy != nullptr) && (addresses_address_full_message_policy->isSet())){
        toJsonValue(QString("addresses.address.full.message.policy"), addresses_address_full_message_policy, obj, QString("OAIConfigNodePropertyDropDown"));
    }
    if((addresses_max_size_bytes != nullptr) && (addresses_max_size_bytes->isSet())){
        toJsonValue(QString("addresses.max.size.bytes"), addresses_max_size_bytes, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((addresses_page_size_bytes != nullptr) && (addresses_page_size_bytes->isSet())){
        toJsonValue(QString("addresses.page.size.bytes"), addresses_page_size_bytes, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((addresses_page_cache_max_size != nullptr) && (addresses_page_cache_max_size->isSet())){
        toJsonValue(QString("addresses.page.cache.max.size"), addresses_page_cache_max_size, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((cluster_user != nullptr) && (cluster_user->isSet())){
        toJsonValue(QString("cluster.user"), cluster_user, obj, QString("OAIConfigNodePropertyString"));
    }
    if((cluster_password != nullptr) && (cluster_password->isSet())){
        toJsonValue(QString("cluster.password"), cluster_password, obj, QString("OAIConfigNodePropertyString"));
    }
    if((cluster_call_timeout != nullptr) && (cluster_call_timeout->isSet())){
        toJsonValue(QString("cluster.call.timeout"), cluster_call_timeout, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((cluster_call_failover_timeout != nullptr) && (cluster_call_failover_timeout->isSet())){
        toJsonValue(QString("cluster.call.failover.timeout"), cluster_call_failover_timeout, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((cluster_client_failure_check_period != nullptr) && (cluster_client_failure_check_period->isSet())){
        toJsonValue(QString("cluster.client.failure.check.period"), cluster_client_failure_check_period, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((cluster_notification_attempts != nullptr) && (cluster_notification_attempts->isSet())){
        toJsonValue(QString("cluster.notification.attempts"), cluster_notification_attempts, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((cluster_notification_interval != nullptr) && (cluster_notification_interval->isSet())){
        toJsonValue(QString("cluster.notification.interval"), cluster_notification_interval, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((id_cache_size != nullptr) && (id_cache_size->isSet())){
        toJsonValue(QString("id.cache.size"), id_cache_size, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((cluster_confirmation_window_size != nullptr) && (cluster_confirmation_window_size->isSet())){
        toJsonValue(QString("cluster.confirmation.window.size"), cluster_confirmation_window_size, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((cluster_connection_ttl != nullptr) && (cluster_connection_ttl->isSet())){
        toJsonValue(QString("cluster.connection.ttl"), cluster_connection_ttl, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((cluster_duplicate_detection != nullptr) && (cluster_duplicate_detection->isSet())){
        toJsonValue(QString("cluster.duplicate.detection"), cluster_duplicate_detection, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((cluster_initial_connect_attempts != nullptr) && (cluster_initial_connect_attempts->isSet())){
        toJsonValue(QString("cluster.initial.connect.attempts"), cluster_initial_connect_attempts, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((cluster_max_retry_interval != nullptr) && (cluster_max_retry_interval->isSet())){
        toJsonValue(QString("cluster.max.retry.interval"), cluster_max_retry_interval, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((cluster_min_large_message_size != nullptr) && (cluster_min_large_message_size->isSet())){
        toJsonValue(QString("cluster.min.large.message.size"), cluster_min_large_message_size, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((cluster_producer_window_size != nullptr) && (cluster_producer_window_size->isSet())){
        toJsonValue(QString("cluster.producer.window.size"), cluster_producer_window_size, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((cluster_reconnect_attempts != nullptr) && (cluster_reconnect_attempts->isSet())){
        toJsonValue(QString("cluster.reconnect.attempts"), cluster_reconnect_attempts, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((cluster_retry_interval != nullptr) && (cluster_retry_interval->isSet())){
        toJsonValue(QString("cluster.retry.interval"), cluster_retry_interval, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((cluster_retry_interval_multiplier != nullptr) && (cluster_retry_interval_multiplier->isSet())){
        toJsonValue(QString("cluster.retry.interval.multiplier"), cluster_retry_interval_multiplier, obj, QString("OAIConfigNodePropertyFloat"));
    }

    return obj;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getServiceRanking() {
    return service_ranking;
}
void
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setServiceRanking(OAIConfigNodePropertyInteger* service_ranking) {
    this->service_ranking = service_ranking;
    this->m_service_ranking_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getGlobalSize() {
    return global_size;
}
void
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setGlobalSize(OAIConfigNodePropertyInteger* global_size) {
    this->global_size = global_size;
    this->m_global_size_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getMaxDiskUsage() {
    return max_disk_usage;
}
void
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setMaxDiskUsage(OAIConfigNodePropertyInteger* max_disk_usage) {
    this->max_disk_usage = max_disk_usage;
    this->m_max_disk_usage_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getPersistenceEnabled() {
    return persistence_enabled;
}
void
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setPersistenceEnabled(OAIConfigNodePropertyBoolean* persistence_enabled) {
    this->persistence_enabled = persistence_enabled;
    this->m_persistence_enabled_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getThreadPoolMaxSize() {
    return thread_pool_max_size;
}
void
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setThreadPoolMaxSize(OAIConfigNodePropertyInteger* thread_pool_max_size) {
    this->thread_pool_max_size = thread_pool_max_size;
    this->m_thread_pool_max_size_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getScheduledThreadPoolMaxSize() {
    return scheduled_thread_pool_max_size;
}
void
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setScheduledThreadPoolMaxSize(OAIConfigNodePropertyInteger* scheduled_thread_pool_max_size) {
    this->scheduled_thread_pool_max_size = scheduled_thread_pool_max_size;
    this->m_scheduled_thread_pool_max_size_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getGracefulShutdownTimeout() {
    return graceful_shutdown_timeout;
}
void
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setGracefulShutdownTimeout(OAIConfigNodePropertyInteger* graceful_shutdown_timeout) {
    this->graceful_shutdown_timeout = graceful_shutdown_timeout;
    this->m_graceful_shutdown_timeout_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getQueues() {
    return queues;
}
void
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setQueues(OAIConfigNodePropertyArray* queues) {
    this->queues = queues;
    this->m_queues_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getTopics() {
    return topics;
}
void
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setTopics(OAIConfigNodePropertyArray* topics) {
    this->topics = topics;
    this->m_topics_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getAddressesMaxDeliveryAttempts() {
    return addresses_max_delivery_attempts;
}
void
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setAddressesMaxDeliveryAttempts(OAIConfigNodePropertyInteger* addresses_max_delivery_attempts) {
    this->addresses_max_delivery_attempts = addresses_max_delivery_attempts;
    this->m_addresses_max_delivery_attempts_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getAddressesExpiryDelay() {
    return addresses_expiry_delay;
}
void
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setAddressesExpiryDelay(OAIConfigNodePropertyInteger* addresses_expiry_delay) {
    this->addresses_expiry_delay = addresses_expiry_delay;
    this->m_addresses_expiry_delay_isSet = true;
}

OAIConfigNodePropertyDropDown*
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getAddressesAddressFullMessagePolicy() {
    return addresses_address_full_message_policy;
}
void
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setAddressesAddressFullMessagePolicy(OAIConfigNodePropertyDropDown* addresses_address_full_message_policy) {
    this->addresses_address_full_message_policy = addresses_address_full_message_policy;
    this->m_addresses_address_full_message_policy_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getAddressesMaxSizeBytes() {
    return addresses_max_size_bytes;
}
void
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setAddressesMaxSizeBytes(OAIConfigNodePropertyInteger* addresses_max_size_bytes) {
    this->addresses_max_size_bytes = addresses_max_size_bytes;
    this->m_addresses_max_size_bytes_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getAddressesPageSizeBytes() {
    return addresses_page_size_bytes;
}
void
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setAddressesPageSizeBytes(OAIConfigNodePropertyInteger* addresses_page_size_bytes) {
    this->addresses_page_size_bytes = addresses_page_size_bytes;
    this->m_addresses_page_size_bytes_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getAddressesPageCacheMaxSize() {
    return addresses_page_cache_max_size;
}
void
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setAddressesPageCacheMaxSize(OAIConfigNodePropertyInteger* addresses_page_cache_max_size) {
    this->addresses_page_cache_max_size = addresses_page_cache_max_size;
    this->m_addresses_page_cache_max_size_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getClusterUser() {
    return cluster_user;
}
void
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setClusterUser(OAIConfigNodePropertyString* cluster_user) {
    this->cluster_user = cluster_user;
    this->m_cluster_user_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getClusterPassword() {
    return cluster_password;
}
void
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setClusterPassword(OAIConfigNodePropertyString* cluster_password) {
    this->cluster_password = cluster_password;
    this->m_cluster_password_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getClusterCallTimeout() {
    return cluster_call_timeout;
}
void
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setClusterCallTimeout(OAIConfigNodePropertyInteger* cluster_call_timeout) {
    this->cluster_call_timeout = cluster_call_timeout;
    this->m_cluster_call_timeout_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getClusterCallFailoverTimeout() {
    return cluster_call_failover_timeout;
}
void
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setClusterCallFailoverTimeout(OAIConfigNodePropertyInteger* cluster_call_failover_timeout) {
    this->cluster_call_failover_timeout = cluster_call_failover_timeout;
    this->m_cluster_call_failover_timeout_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getClusterClientFailureCheckPeriod() {
    return cluster_client_failure_check_period;
}
void
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setClusterClientFailureCheckPeriod(OAIConfigNodePropertyInteger* cluster_client_failure_check_period) {
    this->cluster_client_failure_check_period = cluster_client_failure_check_period;
    this->m_cluster_client_failure_check_period_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getClusterNotificationAttempts() {
    return cluster_notification_attempts;
}
void
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setClusterNotificationAttempts(OAIConfigNodePropertyInteger* cluster_notification_attempts) {
    this->cluster_notification_attempts = cluster_notification_attempts;
    this->m_cluster_notification_attempts_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getClusterNotificationInterval() {
    return cluster_notification_interval;
}
void
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setClusterNotificationInterval(OAIConfigNodePropertyInteger* cluster_notification_interval) {
    this->cluster_notification_interval = cluster_notification_interval;
    this->m_cluster_notification_interval_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getIdCacheSize() {
    return id_cache_size;
}
void
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setIdCacheSize(OAIConfigNodePropertyInteger* id_cache_size) {
    this->id_cache_size = id_cache_size;
    this->m_id_cache_size_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getClusterConfirmationWindowSize() {
    return cluster_confirmation_window_size;
}
void
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setClusterConfirmationWindowSize(OAIConfigNodePropertyInteger* cluster_confirmation_window_size) {
    this->cluster_confirmation_window_size = cluster_confirmation_window_size;
    this->m_cluster_confirmation_window_size_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getClusterConnectionTtl() {
    return cluster_connection_ttl;
}
void
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setClusterConnectionTtl(OAIConfigNodePropertyInteger* cluster_connection_ttl) {
    this->cluster_connection_ttl = cluster_connection_ttl;
    this->m_cluster_connection_ttl_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getClusterDuplicateDetection() {
    return cluster_duplicate_detection;
}
void
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setClusterDuplicateDetection(OAIConfigNodePropertyBoolean* cluster_duplicate_detection) {
    this->cluster_duplicate_detection = cluster_duplicate_detection;
    this->m_cluster_duplicate_detection_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getClusterInitialConnectAttempts() {
    return cluster_initial_connect_attempts;
}
void
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setClusterInitialConnectAttempts(OAIConfigNodePropertyInteger* cluster_initial_connect_attempts) {
    this->cluster_initial_connect_attempts = cluster_initial_connect_attempts;
    this->m_cluster_initial_connect_attempts_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getClusterMaxRetryInterval() {
    return cluster_max_retry_interval;
}
void
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setClusterMaxRetryInterval(OAIConfigNodePropertyInteger* cluster_max_retry_interval) {
    this->cluster_max_retry_interval = cluster_max_retry_interval;
    this->m_cluster_max_retry_interval_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getClusterMinLargeMessageSize() {
    return cluster_min_large_message_size;
}
void
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setClusterMinLargeMessageSize(OAIConfigNodePropertyInteger* cluster_min_large_message_size) {
    this->cluster_min_large_message_size = cluster_min_large_message_size;
    this->m_cluster_min_large_message_size_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getClusterProducerWindowSize() {
    return cluster_producer_window_size;
}
void
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setClusterProducerWindowSize(OAIConfigNodePropertyInteger* cluster_producer_window_size) {
    this->cluster_producer_window_size = cluster_producer_window_size;
    this->m_cluster_producer_window_size_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getClusterReconnectAttempts() {
    return cluster_reconnect_attempts;
}
void
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setClusterReconnectAttempts(OAIConfigNodePropertyInteger* cluster_reconnect_attempts) {
    this->cluster_reconnect_attempts = cluster_reconnect_attempts;
    this->m_cluster_reconnect_attempts_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getClusterRetryInterval() {
    return cluster_retry_interval;
}
void
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setClusterRetryInterval(OAIConfigNodePropertyInteger* cluster_retry_interval) {
    this->cluster_retry_interval = cluster_retry_interval;
    this->m_cluster_retry_interval_isSet = true;
}

OAIConfigNodePropertyFloat*
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getClusterRetryIntervalMultiplier() {
    return cluster_retry_interval_multiplier;
}
void
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setClusterRetryIntervalMultiplier(OAIConfigNodePropertyFloat* cluster_retry_interval_multiplier) {
    this->cluster_retry_interval_multiplier = cluster_retry_interval_multiplier;
    this->m_cluster_retry_interval_multiplier_isSet = true;
}


bool
OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(service_ranking != nullptr && service_ranking->isSet()){ isObjectUpdated = true; break;}
        if(global_size != nullptr && global_size->isSet()){ isObjectUpdated = true; break;}
        if(max_disk_usage != nullptr && max_disk_usage->isSet()){ isObjectUpdated = true; break;}
        if(persistence_enabled != nullptr && persistence_enabled->isSet()){ isObjectUpdated = true; break;}
        if(thread_pool_max_size != nullptr && thread_pool_max_size->isSet()){ isObjectUpdated = true; break;}
        if(scheduled_thread_pool_max_size != nullptr && scheduled_thread_pool_max_size->isSet()){ isObjectUpdated = true; break;}
        if(graceful_shutdown_timeout != nullptr && graceful_shutdown_timeout->isSet()){ isObjectUpdated = true; break;}
        if(queues != nullptr && queues->isSet()){ isObjectUpdated = true; break;}
        if(topics != nullptr && topics->isSet()){ isObjectUpdated = true; break;}
        if(addresses_max_delivery_attempts != nullptr && addresses_max_delivery_attempts->isSet()){ isObjectUpdated = true; break;}
        if(addresses_expiry_delay != nullptr && addresses_expiry_delay->isSet()){ isObjectUpdated = true; break;}
        if(addresses_address_full_message_policy != nullptr && addresses_address_full_message_policy->isSet()){ isObjectUpdated = true; break;}
        if(addresses_max_size_bytes != nullptr && addresses_max_size_bytes->isSet()){ isObjectUpdated = true; break;}
        if(addresses_page_size_bytes != nullptr && addresses_page_size_bytes->isSet()){ isObjectUpdated = true; break;}
        if(addresses_page_cache_max_size != nullptr && addresses_page_cache_max_size->isSet()){ isObjectUpdated = true; break;}
        if(cluster_user != nullptr && cluster_user->isSet()){ isObjectUpdated = true; break;}
        if(cluster_password != nullptr && cluster_password->isSet()){ isObjectUpdated = true; break;}
        if(cluster_call_timeout != nullptr && cluster_call_timeout->isSet()){ isObjectUpdated = true; break;}
        if(cluster_call_failover_timeout != nullptr && cluster_call_failover_timeout->isSet()){ isObjectUpdated = true; break;}
        if(cluster_client_failure_check_period != nullptr && cluster_client_failure_check_period->isSet()){ isObjectUpdated = true; break;}
        if(cluster_notification_attempts != nullptr && cluster_notification_attempts->isSet()){ isObjectUpdated = true; break;}
        if(cluster_notification_interval != nullptr && cluster_notification_interval->isSet()){ isObjectUpdated = true; break;}
        if(id_cache_size != nullptr && id_cache_size->isSet()){ isObjectUpdated = true; break;}
        if(cluster_confirmation_window_size != nullptr && cluster_confirmation_window_size->isSet()){ isObjectUpdated = true; break;}
        if(cluster_connection_ttl != nullptr && cluster_connection_ttl->isSet()){ isObjectUpdated = true; break;}
        if(cluster_duplicate_detection != nullptr && cluster_duplicate_detection->isSet()){ isObjectUpdated = true; break;}
        if(cluster_initial_connect_attempts != nullptr && cluster_initial_connect_attempts->isSet()){ isObjectUpdated = true; break;}
        if(cluster_max_retry_interval != nullptr && cluster_max_retry_interval->isSet()){ isObjectUpdated = true; break;}
        if(cluster_min_large_message_size != nullptr && cluster_min_large_message_size->isSet()){ isObjectUpdated = true; break;}
        if(cluster_producer_window_size != nullptr && cluster_producer_window_size->isSet()){ isObjectUpdated = true; break;}
        if(cluster_reconnect_attempts != nullptr && cluster_reconnect_attempts->isSet()){ isObjectUpdated = true; break;}
        if(cluster_retry_interval != nullptr && cluster_retry_interval->isSet()){ isObjectUpdated = true; break;}
        if(cluster_retry_interval_multiplier != nullptr && cluster_retry_interval_multiplier->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

