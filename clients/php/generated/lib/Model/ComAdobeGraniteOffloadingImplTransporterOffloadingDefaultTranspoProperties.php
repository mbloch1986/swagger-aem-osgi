<?php
/**
 * ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'default_transport_agent_to_worker_prefix' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'default_transport_agent_to_master_prefix' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'default_transport_input_package' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'default_transport_output_package' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'default_transport_replication_synchronous' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'default_transport_contentpackage' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'offloading_transporter_default_enabled' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'default_transport_agent_to_worker_prefix' => null,
        'default_transport_agent_to_master_prefix' => null,
        'default_transport_input_package' => null,
        'default_transport_output_package' => null,
        'default_transport_replication_synchronous' => null,
        'default_transport_contentpackage' => null,
        'offloading_transporter_default_enabled' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'default_transport_agent_to_worker_prefix' => 'default.transport.agent-to-worker.prefix',
        'default_transport_agent_to_master_prefix' => 'default.transport.agent-to-master.prefix',
        'default_transport_input_package' => 'default.transport.input.package',
        'default_transport_output_package' => 'default.transport.output.package',
        'default_transport_replication_synchronous' => 'default.transport.replication.synchronous',
        'default_transport_contentpackage' => 'default.transport.contentpackage',
        'offloading_transporter_default_enabled' => 'offloading.transporter.default.enabled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'default_transport_agent_to_worker_prefix' => 'setDefaultTransportAgentToWorkerPrefix',
        'default_transport_agent_to_master_prefix' => 'setDefaultTransportAgentToMasterPrefix',
        'default_transport_input_package' => 'setDefaultTransportInputPackage',
        'default_transport_output_package' => 'setDefaultTransportOutputPackage',
        'default_transport_replication_synchronous' => 'setDefaultTransportReplicationSynchronous',
        'default_transport_contentpackage' => 'setDefaultTransportContentpackage',
        'offloading_transporter_default_enabled' => 'setOffloadingTransporterDefaultEnabled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'default_transport_agent_to_worker_prefix' => 'getDefaultTransportAgentToWorkerPrefix',
        'default_transport_agent_to_master_prefix' => 'getDefaultTransportAgentToMasterPrefix',
        'default_transport_input_package' => 'getDefaultTransportInputPackage',
        'default_transport_output_package' => 'getDefaultTransportOutputPackage',
        'default_transport_replication_synchronous' => 'getDefaultTransportReplicationSynchronous',
        'default_transport_contentpackage' => 'getDefaultTransportContentpackage',
        'offloading_transporter_default_enabled' => 'getOffloadingTransporterDefaultEnabled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['default_transport_agent_to_worker_prefix'] = isset($data['default_transport_agent_to_worker_prefix']) ? $data['default_transport_agent_to_worker_prefix'] : null;
        $this->container['default_transport_agent_to_master_prefix'] = isset($data['default_transport_agent_to_master_prefix']) ? $data['default_transport_agent_to_master_prefix'] : null;
        $this->container['default_transport_input_package'] = isset($data['default_transport_input_package']) ? $data['default_transport_input_package'] : null;
        $this->container['default_transport_output_package'] = isset($data['default_transport_output_package']) ? $data['default_transport_output_package'] : null;
        $this->container['default_transport_replication_synchronous'] = isset($data['default_transport_replication_synchronous']) ? $data['default_transport_replication_synchronous'] : null;
        $this->container['default_transport_contentpackage'] = isset($data['default_transport_contentpackage']) ? $data['default_transport_contentpackage'] : null;
        $this->container['offloading_transporter_default_enabled'] = isset($data['offloading_transporter_default_enabled']) ? $data['offloading_transporter_default_enabled'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets default_transport_agent_to_worker_prefix
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getDefaultTransportAgentToWorkerPrefix()
    {
        return $this->container['default_transport_agent_to_worker_prefix'];
    }

    /**
     * Sets default_transport_agent_to_worker_prefix
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $default_transport_agent_to_worker_prefix default_transport_agent_to_worker_prefix
     *
     * @return $this
     */
    public function setDefaultTransportAgentToWorkerPrefix($default_transport_agent_to_worker_prefix)
    {
        $this->container['default_transport_agent_to_worker_prefix'] = $default_transport_agent_to_worker_prefix;

        return $this;
    }

    /**
     * Gets default_transport_agent_to_master_prefix
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getDefaultTransportAgentToMasterPrefix()
    {
        return $this->container['default_transport_agent_to_master_prefix'];
    }

    /**
     * Sets default_transport_agent_to_master_prefix
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $default_transport_agent_to_master_prefix default_transport_agent_to_master_prefix
     *
     * @return $this
     */
    public function setDefaultTransportAgentToMasterPrefix($default_transport_agent_to_master_prefix)
    {
        $this->container['default_transport_agent_to_master_prefix'] = $default_transport_agent_to_master_prefix;

        return $this;
    }

    /**
     * Gets default_transport_input_package
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getDefaultTransportInputPackage()
    {
        return $this->container['default_transport_input_package'];
    }

    /**
     * Sets default_transport_input_package
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $default_transport_input_package default_transport_input_package
     *
     * @return $this
     */
    public function setDefaultTransportInputPackage($default_transport_input_package)
    {
        $this->container['default_transport_input_package'] = $default_transport_input_package;

        return $this;
    }

    /**
     * Gets default_transport_output_package
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getDefaultTransportOutputPackage()
    {
        return $this->container['default_transport_output_package'];
    }

    /**
     * Sets default_transport_output_package
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $default_transport_output_package default_transport_output_package
     *
     * @return $this
     */
    public function setDefaultTransportOutputPackage($default_transport_output_package)
    {
        $this->container['default_transport_output_package'] = $default_transport_output_package;

        return $this;
    }

    /**
     * Gets default_transport_replication_synchronous
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getDefaultTransportReplicationSynchronous()
    {
        return $this->container['default_transport_replication_synchronous'];
    }

    /**
     * Sets default_transport_replication_synchronous
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $default_transport_replication_synchronous default_transport_replication_synchronous
     *
     * @return $this
     */
    public function setDefaultTransportReplicationSynchronous($default_transport_replication_synchronous)
    {
        $this->container['default_transport_replication_synchronous'] = $default_transport_replication_synchronous;

        return $this;
    }

    /**
     * Gets default_transport_contentpackage
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getDefaultTransportContentpackage()
    {
        return $this->container['default_transport_contentpackage'];
    }

    /**
     * Sets default_transport_contentpackage
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $default_transport_contentpackage default_transport_contentpackage
     *
     * @return $this
     */
    public function setDefaultTransportContentpackage($default_transport_contentpackage)
    {
        $this->container['default_transport_contentpackage'] = $default_transport_contentpackage;

        return $this;
    }

    /**
     * Gets offloading_transporter_default_enabled
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getOffloadingTransporterDefaultEnabled()
    {
        return $this->container['offloading_transporter_default_enabled'];
    }

    /**
     * Sets offloading_transporter_default_enabled
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $offloading_transporter_default_enabled offloading_transporter_default_enabled
     *
     * @return $this
     */
    public function setOffloadingTransporterDefaultEnabled($offloading_transporter_default_enabled)
    {
        $this->container['offloading_transporter_default_enabled'] = $offloading_transporter_default_enabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


