/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties {
  #[serde(rename = "path.desc.field")]
  path_desc_field: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "path.child.field")]
  path_child_field: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "path.parent.field")]
  path_parent_field: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "path.exact.field")]
  path_exact_field: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "catch.all.field")]
  catch_all_field: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "collapsed.path.field")]
  collapsed_path_field: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "path.depth.field")]
  path_depth_field: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "commit.policy")]
  commit_policy: Option<::models::ConfigNodePropertyDropDown>,
  #[serde(rename = "rows")]
  rows: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "path.restrictions")]
  path_restrictions: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "property.restrictions")]
  property_restrictions: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "primarytypes.restrictions")]
  primarytypes_restrictions: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "ignored.properties")]
  ignored_properties: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "used.properties")]
  used_properties: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "type.mappings")]
  type_mappings: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "property.mappings")]
  property_mappings: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "collapse.jcrcontent.nodes")]
  collapse_jcrcontent_nodes: Option<::models::ConfigNodePropertyBoolean>
}

impl OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties {
  pub fn new() -> OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties {
    OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties {
      path_desc_field: None,
      path_child_field: None,
      path_parent_field: None,
      path_exact_field: None,
      catch_all_field: None,
      collapsed_path_field: None,
      path_depth_field: None,
      commit_policy: None,
      rows: None,
      path_restrictions: None,
      property_restrictions: None,
      primarytypes_restrictions: None,
      ignored_properties: None,
      used_properties: None,
      type_mappings: None,
      property_mappings: None,
      collapse_jcrcontent_nodes: None
    }
  }

  pub fn set_path_desc_field(&mut self, path_desc_field: ::models::ConfigNodePropertyString) {
    self.path_desc_field = Some(path_desc_field);
  }

  pub fn with_path_desc_field(mut self, path_desc_field: ::models::ConfigNodePropertyString) -> OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties {
    self.path_desc_field = Some(path_desc_field);
    self
  }

  pub fn path_desc_field(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.path_desc_field.as_ref()
  }

  pub fn reset_path_desc_field(&mut self) {
    self.path_desc_field = None;
  }

  pub fn set_path_child_field(&mut self, path_child_field: ::models::ConfigNodePropertyString) {
    self.path_child_field = Some(path_child_field);
  }

  pub fn with_path_child_field(mut self, path_child_field: ::models::ConfigNodePropertyString) -> OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties {
    self.path_child_field = Some(path_child_field);
    self
  }

  pub fn path_child_field(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.path_child_field.as_ref()
  }

  pub fn reset_path_child_field(&mut self) {
    self.path_child_field = None;
  }

  pub fn set_path_parent_field(&mut self, path_parent_field: ::models::ConfigNodePropertyString) {
    self.path_parent_field = Some(path_parent_field);
  }

  pub fn with_path_parent_field(mut self, path_parent_field: ::models::ConfigNodePropertyString) -> OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties {
    self.path_parent_field = Some(path_parent_field);
    self
  }

  pub fn path_parent_field(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.path_parent_field.as_ref()
  }

  pub fn reset_path_parent_field(&mut self) {
    self.path_parent_field = None;
  }

  pub fn set_path_exact_field(&mut self, path_exact_field: ::models::ConfigNodePropertyString) {
    self.path_exact_field = Some(path_exact_field);
  }

  pub fn with_path_exact_field(mut self, path_exact_field: ::models::ConfigNodePropertyString) -> OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties {
    self.path_exact_field = Some(path_exact_field);
    self
  }

  pub fn path_exact_field(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.path_exact_field.as_ref()
  }

  pub fn reset_path_exact_field(&mut self) {
    self.path_exact_field = None;
  }

  pub fn set_catch_all_field(&mut self, catch_all_field: ::models::ConfigNodePropertyString) {
    self.catch_all_field = Some(catch_all_field);
  }

  pub fn with_catch_all_field(mut self, catch_all_field: ::models::ConfigNodePropertyString) -> OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties {
    self.catch_all_field = Some(catch_all_field);
    self
  }

  pub fn catch_all_field(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.catch_all_field.as_ref()
  }

  pub fn reset_catch_all_field(&mut self) {
    self.catch_all_field = None;
  }

  pub fn set_collapsed_path_field(&mut self, collapsed_path_field: ::models::ConfigNodePropertyString) {
    self.collapsed_path_field = Some(collapsed_path_field);
  }

  pub fn with_collapsed_path_field(mut self, collapsed_path_field: ::models::ConfigNodePropertyString) -> OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties {
    self.collapsed_path_field = Some(collapsed_path_field);
    self
  }

  pub fn collapsed_path_field(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.collapsed_path_field.as_ref()
  }

  pub fn reset_collapsed_path_field(&mut self) {
    self.collapsed_path_field = None;
  }

  pub fn set_path_depth_field(&mut self, path_depth_field: ::models::ConfigNodePropertyString) {
    self.path_depth_field = Some(path_depth_field);
  }

  pub fn with_path_depth_field(mut self, path_depth_field: ::models::ConfigNodePropertyString) -> OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties {
    self.path_depth_field = Some(path_depth_field);
    self
  }

  pub fn path_depth_field(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.path_depth_field.as_ref()
  }

  pub fn reset_path_depth_field(&mut self) {
    self.path_depth_field = None;
  }

  pub fn set_commit_policy(&mut self, commit_policy: ::models::ConfigNodePropertyDropDown) {
    self.commit_policy = Some(commit_policy);
  }

  pub fn with_commit_policy(mut self, commit_policy: ::models::ConfigNodePropertyDropDown) -> OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties {
    self.commit_policy = Some(commit_policy);
    self
  }

  pub fn commit_policy(&self) -> Option<&::models::ConfigNodePropertyDropDown> {
    self.commit_policy.as_ref()
  }

  pub fn reset_commit_policy(&mut self) {
    self.commit_policy = None;
  }

  pub fn set_rows(&mut self, rows: ::models::ConfigNodePropertyInteger) {
    self.rows = Some(rows);
  }

  pub fn with_rows(mut self, rows: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties {
    self.rows = Some(rows);
    self
  }

  pub fn rows(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.rows.as_ref()
  }

  pub fn reset_rows(&mut self) {
    self.rows = None;
  }

  pub fn set_path_restrictions(&mut self, path_restrictions: ::models::ConfigNodePropertyBoolean) {
    self.path_restrictions = Some(path_restrictions);
  }

  pub fn with_path_restrictions(mut self, path_restrictions: ::models::ConfigNodePropertyBoolean) -> OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties {
    self.path_restrictions = Some(path_restrictions);
    self
  }

  pub fn path_restrictions(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.path_restrictions.as_ref()
  }

  pub fn reset_path_restrictions(&mut self) {
    self.path_restrictions = None;
  }

  pub fn set_property_restrictions(&mut self, property_restrictions: ::models::ConfigNodePropertyBoolean) {
    self.property_restrictions = Some(property_restrictions);
  }

  pub fn with_property_restrictions(mut self, property_restrictions: ::models::ConfigNodePropertyBoolean) -> OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties {
    self.property_restrictions = Some(property_restrictions);
    self
  }

  pub fn property_restrictions(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.property_restrictions.as_ref()
  }

  pub fn reset_property_restrictions(&mut self) {
    self.property_restrictions = None;
  }

  pub fn set_primarytypes_restrictions(&mut self, primarytypes_restrictions: ::models::ConfigNodePropertyBoolean) {
    self.primarytypes_restrictions = Some(primarytypes_restrictions);
  }

  pub fn with_primarytypes_restrictions(mut self, primarytypes_restrictions: ::models::ConfigNodePropertyBoolean) -> OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties {
    self.primarytypes_restrictions = Some(primarytypes_restrictions);
    self
  }

  pub fn primarytypes_restrictions(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.primarytypes_restrictions.as_ref()
  }

  pub fn reset_primarytypes_restrictions(&mut self) {
    self.primarytypes_restrictions = None;
  }

  pub fn set_ignored_properties(&mut self, ignored_properties: ::models::ConfigNodePropertyArray) {
    self.ignored_properties = Some(ignored_properties);
  }

  pub fn with_ignored_properties(mut self, ignored_properties: ::models::ConfigNodePropertyArray) -> OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties {
    self.ignored_properties = Some(ignored_properties);
    self
  }

  pub fn ignored_properties(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.ignored_properties.as_ref()
  }

  pub fn reset_ignored_properties(&mut self) {
    self.ignored_properties = None;
  }

  pub fn set_used_properties(&mut self, used_properties: ::models::ConfigNodePropertyArray) {
    self.used_properties = Some(used_properties);
  }

  pub fn with_used_properties(mut self, used_properties: ::models::ConfigNodePropertyArray) -> OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties {
    self.used_properties = Some(used_properties);
    self
  }

  pub fn used_properties(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.used_properties.as_ref()
  }

  pub fn reset_used_properties(&mut self) {
    self.used_properties = None;
  }

  pub fn set_type_mappings(&mut self, type_mappings: ::models::ConfigNodePropertyArray) {
    self.type_mappings = Some(type_mappings);
  }

  pub fn with_type_mappings(mut self, type_mappings: ::models::ConfigNodePropertyArray) -> OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties {
    self.type_mappings = Some(type_mappings);
    self
  }

  pub fn type_mappings(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.type_mappings.as_ref()
  }

  pub fn reset_type_mappings(&mut self) {
    self.type_mappings = None;
  }

  pub fn set_property_mappings(&mut self, property_mappings: ::models::ConfigNodePropertyArray) {
    self.property_mappings = Some(property_mappings);
  }

  pub fn with_property_mappings(mut self, property_mappings: ::models::ConfigNodePropertyArray) -> OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties {
    self.property_mappings = Some(property_mappings);
    self
  }

  pub fn property_mappings(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.property_mappings.as_ref()
  }

  pub fn reset_property_mappings(&mut self) {
    self.property_mappings = None;
  }

  pub fn set_collapse_jcrcontent_nodes(&mut self, collapse_jcrcontent_nodes: ::models::ConfigNodePropertyBoolean) {
    self.collapse_jcrcontent_nodes = Some(collapse_jcrcontent_nodes);
  }

  pub fn with_collapse_jcrcontent_nodes(mut self, collapse_jcrcontent_nodes: ::models::ConfigNodePropertyBoolean) -> OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties {
    self.collapse_jcrcontent_nodes = Some(collapse_jcrcontent_nodes);
    self
  }

  pub fn collapse_jcrcontent_nodes(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.collapse_jcrcontent_nodes.as_ref()
  }

  pub fn reset_collapse_jcrcontent_nodes(&mut self) {
    self.collapse_jcrcontent_nodes = None;
  }

}



