/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
  #[serde(rename = "com.adobe.cq.cdn.cdn-rewriter")]
  com_adobe_cq_cdn_cdn_rewriter: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.cloud-config.components")]
  com_adobe_cq_cloud_config_components: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.cloud-config.core")]
  com_adobe_cq_cloud_config_core: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.cloud-config.ui")]
  com_adobe_cq_cloud_config_ui: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.com.adobe.cq.editor")]
  com_adobe_cq_com_adobe_cq_editor: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.com.adobe.cq.projects.core")]
  com_adobe_cq_com_adobe_cq_projects_core: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.com.adobe.cq.projects.wcm.core")]
  com_adobe_cq_com_adobe_cq_projects_wcm_core: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.com.adobe.cq.ui.commons")]
  com_adobe_cq_com_adobe_cq_ui_commons: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.com.adobe.cq.wcm.style")]
  com_adobe_cq_com_adobe_cq_wcm_style: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.cq-activitymap-integration")]
  com_adobe_cq_cq_activitymap_integration: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.cq-contexthub-commons")]
  com_adobe_cq_cq_contexthub_commons: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.cq-dtm")]
  com_adobe_cq_cq_dtm: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.cq-healthcheck")]
  com_adobe_cq_cq_healthcheck: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.cq-multisite-targeting")]
  com_adobe_cq_cq_multisite_targeting: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.cq-pre-upgrade-cleanup")]
  com_adobe_cq_cq_pre_upgrade_cleanup: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.cq-product-info-provider")]
  com_adobe_cq_cq_product_info_provider: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.cq-rest-sites")]
  com_adobe_cq_cq_rest_sites: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.cq-security-hc")]
  com_adobe_cq_cq_security_hc: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.dam.cq-dam-svg-handler")]
  com_adobe_cq_dam_cq_dam_svg_handler: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.dam.cq-scene7-imaging")]
  com_adobe_cq_dam_cq_scene7_imaging: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.dtm-reactor.core")]
  com_adobe_cq_dtm_reactor_core: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.dtm-reactor.ui")]
  com_adobe_cq_dtm_reactor_ui: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.exp-jspel-resolver")]
  com_adobe_cq_exp_jspel_resolver: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.inbox.cq-inbox")]
  com_adobe_cq_inbox_cq_inbox: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.json-schema-parser")]
  com_adobe_cq_json_schema_parser: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.media.cq-media-publishing-dps-fp-core")]
  com_adobe_cq_media_cq_media_publishing_dps_fp_core: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.mobile.cq-mobile-caas")]
  com_adobe_cq_mobile_cq_mobile_caas: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.mobile.cq-mobile-index-builder")]
  com_adobe_cq_mobile_cq_mobile_index_builder: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.mobile.cq-mobile-phonegap-build")]
  com_adobe_cq_mobile_cq_mobile_phonegap_build: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.myspell")]
  com_adobe_cq_myspell: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.sample.we.retail.core")]
  com_adobe_cq_sample_we_retail_core: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.screens.com.adobe.cq.screens.dcc")]
  com_adobe_cq_screens_com_adobe_cq_screens_dcc: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.screens.com.adobe.cq.screens.mq.core")]
  com_adobe_cq_screens_com_adobe_cq_screens_mq_core: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.social.cq-social-as-provider")]
  com_adobe_cq_social_cq_social_as_provider: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.social.cq-social-badging-basic-impl")]
  com_adobe_cq_social_cq_social_badging_basic_impl: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.social.cq-social-badging-impl")]
  com_adobe_cq_social_cq_social_badging_impl: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.social.cq-social-calendar-impl")]
  com_adobe_cq_social_cq_social_calendar_impl: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.social.cq-social-content-fragments-impl")]
  com_adobe_cq_social_cq_social_content_fragments_impl: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.social.cq-social-enablement-impl")]
  com_adobe_cq_social_cq_social_enablement_impl: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.social.cq-social-graph-impl")]
  com_adobe_cq_social_cq_social_graph_impl: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.social.cq-social-ideation-impl")]
  com_adobe_cq_social_cq_social_ideation_impl: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.social.cq-social-jcr-provider")]
  com_adobe_cq_social_cq_social_jcr_provider: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.social.cq-social-members-impl")]
  com_adobe_cq_social_cq_social_members_impl: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.social.cq-social-ms-provider")]
  com_adobe_cq_social_cq_social_ms_provider: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.social.cq-social-notifications-channels-web")]
  com_adobe_cq_social_cq_social_notifications_channels_web: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.social.cq-social-notifications-impl")]
  com_adobe_cq_social_cq_social_notifications_impl: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.social.cq-social-rdb-provider")]
  com_adobe_cq_social_cq_social_rdb_provider: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.social.cq-social-scf-impl")]
  com_adobe_cq_social_cq_social_scf_impl: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.social.cq-social-scoring-basic-impl")]
  com_adobe_cq_social_cq_social_scoring_basic_impl: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.social.cq-social-scoring-impl")]
  com_adobe_cq_social_cq_social_scoring_impl: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.social.cq-social-serviceusers-impl")]
  com_adobe_cq_social_cq_social_serviceusers_impl: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.social.cq-social-srp-impl")]
  com_adobe_cq_social_cq_social_srp_impl: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.social.cq-social-ugcbase-impl")]
  com_adobe_cq_social_cq_social_ugcbase_impl: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.dam.cq-dam-cfm-impl")]
  com_adobe_dam_cq_dam_cfm_impl: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.forms.foundation-forms-foundation-base")]
  com_adobe_forms_foundation_forms_foundation_base: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.granite.apicontroller")]
  com_adobe_granite_apicontroller: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.granite.asset.core")]
  com_adobe_granite_asset_core: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.granite.auth.sso")]
  com_adobe_granite_auth_sso: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.granite.bundles.hc.impl")]
  com_adobe_granite_bundles_hc_impl: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.granite.compat-router")]
  com_adobe_granite_compat_router: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.granite.conf")]
  com_adobe_granite_conf: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.granite.conf.ui.core")]
  com_adobe_granite_conf_ui_core: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.granite.cors")]
  com_adobe_granite_cors: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.granite.crx-explorer")]
  com_adobe_granite_crx_explorer: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.granite.crxde-lite")]
  com_adobe_granite_crxde_lite: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.granite.crypto.config")]
  com_adobe_granite_crypto_config: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.granite.crypto.extension")]
  com_adobe_granite_crypto_extension: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.granite.crypto.file")]
  com_adobe_granite_crypto_file: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.granite.crypto.jcr")]
  com_adobe_granite_crypto_jcr: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.granite.csrf")]
  com_adobe_granite_csrf: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.granite.distribution.core")]
  com_adobe_granite_distribution_core: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.granite.dropwizard.metrics")]
  com_adobe_granite_dropwizard_metrics: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.granite.frags.impl")]
  com_adobe_granite_frags_impl: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.granite.gibson")]
  com_adobe_granite_gibson: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.granite.infocollector")]
  com_adobe_granite_infocollector: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.granite.installer.factory.packages")]
  com_adobe_granite_installer_factory_packages: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.granite.jetty.ssl")]
  com_adobe_granite_jetty_ssl: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.granite.jobs.async")]
  com_adobe_granite_jobs_async: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.granite.maintenance.oak")]
  com_adobe_granite_maintenance_oak: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.granite.monitoring.core")]
  com_adobe_granite_monitoring_core: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.granite.queries")]
  com_adobe_granite_queries: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.granite.replication.hc.impl")]
  com_adobe_granite_replication_hc_impl: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.granite.repository.checker")]
  com_adobe_granite_repository_checker: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.granite.repository.hc.impl")]
  com_adobe_granite_repository_hc_impl: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.granite.rest.assets")]
  com_adobe_granite_rest_assets: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.granite.security.ui")]
  com_adobe_granite_security_ui: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.granite.startup")]
  com_adobe_granite_startup: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.granite.tagsoup")]
  com_adobe_granite_tagsoup: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.granite.taskmanagement.core")]
  com_adobe_granite_taskmanagement_core: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.granite.taskmanagement.workflow")]
  com_adobe_granite_taskmanagement_workflow: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.granite.ui.clientlibs.compiler.less")]
  com_adobe_granite_ui_clientlibs_compiler_less: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.granite.ui.clientlibs.processor.gcc")]
  com_adobe_granite_ui_clientlibs_processor_gcc: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.granite.webconsole.plugins")]
  com_adobe_granite_webconsole_plugins: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.granite.workflow.console")]
  com_adobe_granite_workflow_console: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.xmp.worker.files.native.fragment.linux")]
  com_adobe_xmp_worker_files_native_fragment_linux: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.xmp.worker.files.native.fragment.macosx")]
  com_adobe_xmp_worker_files_native_fragment_macosx: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.xmp.worker.files.native.fragment.win")]
  com_adobe_xmp_worker_files_native_fragment_win: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.day.commons.osgi.wrapper.simple-jndi")]
  com_day_commons_osgi_wrapper_simple_jndi: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.day.cq.cq-authhandler")]
  com_day_cq_cq_authhandler: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.day.cq.cq-compat-configupdate")]
  com_day_cq_cq_compat_configupdate: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.day.cq.cq-licensebranding")]
  com_day_cq_cq_licensebranding: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.day.cq.cq-notifcation-impl")]
  com_day_cq_cq_notifcation_impl: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.day.cq.cq-replication-audit")]
  com_day_cq_cq_replication_audit: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.day.cq.cq-search-ext")]
  com_day_cq_cq_search_ext: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.day.cq.dam.cq-dam-annotation-print")]
  com_day_cq_dam_cq_dam_annotation_print: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.day.cq.dam.cq-dam-asset-usage")]
  com_day_cq_dam_cq_dam_asset_usage: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.day.cq.dam.cq-dam-s7dam")]
  com_day_cq_dam_cq_dam_s7dam: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.day.cq.dam.cq-dam-similaritysearch")]
  com_day_cq_dam_cq_dam_similaritysearch: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.day.cq.dam.dam-webdav-support")]
  com_day_cq_dam_dam_webdav_support: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.day.cq.pre-upgrade-tasks")]
  com_day_cq_pre_upgrade_tasks: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.day.cq.replication.extensions")]
  com_day_cq_replication_extensions: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.day.cq.wcm.cq-msm-core")]
  com_day_cq_wcm_cq_msm_core: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.day.cq.wcm.cq-wcm-translation")]
  com_day_cq_wcm_cq_wcm_translation: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "day-commons-jrawio")]
  day_commons_jrawio: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "org.apache.aries.jmx.whiteboard")]
  org_apache_aries_jmx_whiteboard: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "org.apache.felix.http.sslfilter")]
  org_apache_felix_http_sslfilter: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "org.apache.felix.org.apache.felix.threaddump")]
  org_apache_felix_org_apache_felix_threaddump: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "org.apache.felix.webconsole.plugins.ds")]
  org_apache_felix_webconsole_plugins_ds: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "org.apache.felix.webconsole.plugins.event")]
  org_apache_felix_webconsole_plugins_event: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "org.apache.felix.webconsole.plugins.memoryusage")]
  org_apache_felix_webconsole_plugins_memoryusage: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "org.apache.felix.webconsole.plugins.packageadmin")]
  org_apache_felix_webconsole_plugins_packageadmin: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "org.apache.jackrabbit.oak-auth-ldap")]
  org_apache_jackrabbit_oak_auth_ldap: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "org.apache.jackrabbit.oak-segment-tar")]
  org_apache_jackrabbit_oak_segment_tar: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "org.apache.jackrabbit.oak-solr-osgi")]
  org_apache_jackrabbit_oak_solr_osgi: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "org.apache.sling.bundleresource.impl")]
  org_apache_sling_bundleresource_impl: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "org.apache.sling.commons.fsclassloader")]
  org_apache_sling_commons_fsclassloader: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "org.apache.sling.commons.log.webconsole")]
  org_apache_sling_commons_log_webconsole: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "org.apache.sling.datasource")]
  org_apache_sling_datasource: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "org.apache.sling.discovery.base")]
  org_apache_sling_discovery_base: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "org.apache.sling.discovery.oak")]
  org_apache_sling_discovery_oak: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "org.apache.sling.discovery.support")]
  org_apache_sling_discovery_support: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "org.apache.sling.distribution.api")]
  org_apache_sling_distribution_api: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "org.apache.sling.distribution.core")]
  org_apache_sling_distribution_core: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "org.apache.sling.extensions.webconsolesecurityprovider")]
  org_apache_sling_extensions_webconsolesecurityprovider: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "org.apache.sling.hc.webconsole")]
  org_apache_sling_hc_webconsole: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "org.apache.sling.installer.console")]
  org_apache_sling_installer_console: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "org.apache.sling.installer.provider.file")]
  org_apache_sling_installer_provider_file: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "org.apache.sling.installer.provider.jcr")]
  org_apache_sling_installer_provider_jcr: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "org.apache.sling.jcr.davex")]
  org_apache_sling_jcr_davex: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "org.apache.sling.jcr.resourcesecurity")]
  org_apache_sling_jcr_resourcesecurity: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "org.apache.sling.jmx.provider")]
  org_apache_sling_jmx_provider: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "org.apache.sling.launchpad.installer")]
  org_apache_sling_launchpad_installer: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "org.apache.sling.models.impl")]
  org_apache_sling_models_impl: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "org.apache.sling.repoinit.parser")]
  org_apache_sling_repoinit_parser: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "org.apache.sling.resource.inventory")]
  org_apache_sling_resource_inventory: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "org.apache.sling.resourceresolver")]
  org_apache_sling_resourceresolver: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "org.apache.sling.scripting.javascript")]
  org_apache_sling_scripting_javascript: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "org.apache.sling.scripting.jst")]
  org_apache_sling_scripting_jst: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "org.apache.sling.scripting.sightly.js.provider")]
  org_apache_sling_scripting_sightly_js_provider: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "org.apache.sling.scripting.sightly.models.provider")]
  org_apache_sling_scripting_sightly_models_provider: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "org.apache.sling.security")]
  org_apache_sling_security: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "org.apache.sling.servlets.compat")]
  org_apache_sling_servlets_compat: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "org.apache.sling.servlets.get")]
  org_apache_sling_servlets_get: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "org.apache.sling.startupfilter.disabler")]
  org_apache_sling_startupfilter_disabler: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "org.apache.sling.tracer")]
  org_apache_sling_tracer: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "we.retail.client.app.core")]
  we_retail_client_app_core: Option<::models::ConfigNodePropertyString>
}

impl ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
  pub fn new() -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
      com_adobe_cq_cdn_cdn_rewriter: None,
      com_adobe_cq_cloud_config_components: None,
      com_adobe_cq_cloud_config_core: None,
      com_adobe_cq_cloud_config_ui: None,
      com_adobe_cq_com_adobe_cq_editor: None,
      com_adobe_cq_com_adobe_cq_projects_core: None,
      com_adobe_cq_com_adobe_cq_projects_wcm_core: None,
      com_adobe_cq_com_adobe_cq_ui_commons: None,
      com_adobe_cq_com_adobe_cq_wcm_style: None,
      com_adobe_cq_cq_activitymap_integration: None,
      com_adobe_cq_cq_contexthub_commons: None,
      com_adobe_cq_cq_dtm: None,
      com_adobe_cq_cq_healthcheck: None,
      com_adobe_cq_cq_multisite_targeting: None,
      com_adobe_cq_cq_pre_upgrade_cleanup: None,
      com_adobe_cq_cq_product_info_provider: None,
      com_adobe_cq_cq_rest_sites: None,
      com_adobe_cq_cq_security_hc: None,
      com_adobe_cq_dam_cq_dam_svg_handler: None,
      com_adobe_cq_dam_cq_scene7_imaging: None,
      com_adobe_cq_dtm_reactor_core: None,
      com_adobe_cq_dtm_reactor_ui: None,
      com_adobe_cq_exp_jspel_resolver: None,
      com_adobe_cq_inbox_cq_inbox: None,
      com_adobe_cq_json_schema_parser: None,
      com_adobe_cq_media_cq_media_publishing_dps_fp_core: None,
      com_adobe_cq_mobile_cq_mobile_caas: None,
      com_adobe_cq_mobile_cq_mobile_index_builder: None,
      com_adobe_cq_mobile_cq_mobile_phonegap_build: None,
      com_adobe_cq_myspell: None,
      com_adobe_cq_sample_we_retail_core: None,
      com_adobe_cq_screens_com_adobe_cq_screens_dcc: None,
      com_adobe_cq_screens_com_adobe_cq_screens_mq_core: None,
      com_adobe_cq_social_cq_social_as_provider: None,
      com_adobe_cq_social_cq_social_badging_basic_impl: None,
      com_adobe_cq_social_cq_social_badging_impl: None,
      com_adobe_cq_social_cq_social_calendar_impl: None,
      com_adobe_cq_social_cq_social_content_fragments_impl: None,
      com_adobe_cq_social_cq_social_enablement_impl: None,
      com_adobe_cq_social_cq_social_graph_impl: None,
      com_adobe_cq_social_cq_social_ideation_impl: None,
      com_adobe_cq_social_cq_social_jcr_provider: None,
      com_adobe_cq_social_cq_social_members_impl: None,
      com_adobe_cq_social_cq_social_ms_provider: None,
      com_adobe_cq_social_cq_social_notifications_channels_web: None,
      com_adobe_cq_social_cq_social_notifications_impl: None,
      com_adobe_cq_social_cq_social_rdb_provider: None,
      com_adobe_cq_social_cq_social_scf_impl: None,
      com_adobe_cq_social_cq_social_scoring_basic_impl: None,
      com_adobe_cq_social_cq_social_scoring_impl: None,
      com_adobe_cq_social_cq_social_serviceusers_impl: None,
      com_adobe_cq_social_cq_social_srp_impl: None,
      com_adobe_cq_social_cq_social_ugcbase_impl: None,
      com_adobe_dam_cq_dam_cfm_impl: None,
      com_adobe_forms_foundation_forms_foundation_base: None,
      com_adobe_granite_apicontroller: None,
      com_adobe_granite_asset_core: None,
      com_adobe_granite_auth_sso: None,
      com_adobe_granite_bundles_hc_impl: None,
      com_adobe_granite_compat_router: None,
      com_adobe_granite_conf: None,
      com_adobe_granite_conf_ui_core: None,
      com_adobe_granite_cors: None,
      com_adobe_granite_crx_explorer: None,
      com_adobe_granite_crxde_lite: None,
      com_adobe_granite_crypto_config: None,
      com_adobe_granite_crypto_extension: None,
      com_adobe_granite_crypto_file: None,
      com_adobe_granite_crypto_jcr: None,
      com_adobe_granite_csrf: None,
      com_adobe_granite_distribution_core: None,
      com_adobe_granite_dropwizard_metrics: None,
      com_adobe_granite_frags_impl: None,
      com_adobe_granite_gibson: None,
      com_adobe_granite_infocollector: None,
      com_adobe_granite_installer_factory_packages: None,
      com_adobe_granite_jetty_ssl: None,
      com_adobe_granite_jobs_async: None,
      com_adobe_granite_maintenance_oak: None,
      com_adobe_granite_monitoring_core: None,
      com_adobe_granite_queries: None,
      com_adobe_granite_replication_hc_impl: None,
      com_adobe_granite_repository_checker: None,
      com_adobe_granite_repository_hc_impl: None,
      com_adobe_granite_rest_assets: None,
      com_adobe_granite_security_ui: None,
      com_adobe_granite_startup: None,
      com_adobe_granite_tagsoup: None,
      com_adobe_granite_taskmanagement_core: None,
      com_adobe_granite_taskmanagement_workflow: None,
      com_adobe_granite_ui_clientlibs_compiler_less: None,
      com_adobe_granite_ui_clientlibs_processor_gcc: None,
      com_adobe_granite_webconsole_plugins: None,
      com_adobe_granite_workflow_console: None,
      com_adobe_xmp_worker_files_native_fragment_linux: None,
      com_adobe_xmp_worker_files_native_fragment_macosx: None,
      com_adobe_xmp_worker_files_native_fragment_win: None,
      com_day_commons_osgi_wrapper_simple_jndi: None,
      com_day_cq_cq_authhandler: None,
      com_day_cq_cq_compat_configupdate: None,
      com_day_cq_cq_licensebranding: None,
      com_day_cq_cq_notifcation_impl: None,
      com_day_cq_cq_replication_audit: None,
      com_day_cq_cq_search_ext: None,
      com_day_cq_dam_cq_dam_annotation_print: None,
      com_day_cq_dam_cq_dam_asset_usage: None,
      com_day_cq_dam_cq_dam_s7dam: None,
      com_day_cq_dam_cq_dam_similaritysearch: None,
      com_day_cq_dam_dam_webdav_support: None,
      com_day_cq_pre_upgrade_tasks: None,
      com_day_cq_replication_extensions: None,
      com_day_cq_wcm_cq_msm_core: None,
      com_day_cq_wcm_cq_wcm_translation: None,
      day_commons_jrawio: None,
      org_apache_aries_jmx_whiteboard: None,
      org_apache_felix_http_sslfilter: None,
      org_apache_felix_org_apache_felix_threaddump: None,
      org_apache_felix_webconsole_plugins_ds: None,
      org_apache_felix_webconsole_plugins_event: None,
      org_apache_felix_webconsole_plugins_memoryusage: None,
      org_apache_felix_webconsole_plugins_packageadmin: None,
      org_apache_jackrabbit_oak_auth_ldap: None,
      org_apache_jackrabbit_oak_segment_tar: None,
      org_apache_jackrabbit_oak_solr_osgi: None,
      org_apache_sling_bundleresource_impl: None,
      org_apache_sling_commons_fsclassloader: None,
      org_apache_sling_commons_log_webconsole: None,
      org_apache_sling_datasource: None,
      org_apache_sling_discovery_base: None,
      org_apache_sling_discovery_oak: None,
      org_apache_sling_discovery_support: None,
      org_apache_sling_distribution_api: None,
      org_apache_sling_distribution_core: None,
      org_apache_sling_extensions_webconsolesecurityprovider: None,
      org_apache_sling_hc_webconsole: None,
      org_apache_sling_installer_console: None,
      org_apache_sling_installer_provider_file: None,
      org_apache_sling_installer_provider_jcr: None,
      org_apache_sling_jcr_davex: None,
      org_apache_sling_jcr_resourcesecurity: None,
      org_apache_sling_jmx_provider: None,
      org_apache_sling_launchpad_installer: None,
      org_apache_sling_models_impl: None,
      org_apache_sling_repoinit_parser: None,
      org_apache_sling_resource_inventory: None,
      org_apache_sling_resourceresolver: None,
      org_apache_sling_scripting_javascript: None,
      org_apache_sling_scripting_jst: None,
      org_apache_sling_scripting_sightly_js_provider: None,
      org_apache_sling_scripting_sightly_models_provider: None,
      org_apache_sling_security: None,
      org_apache_sling_servlets_compat: None,
      org_apache_sling_servlets_get: None,
      org_apache_sling_startupfilter_disabler: None,
      org_apache_sling_tracer: None,
      we_retail_client_app_core: None
    }
  }

  pub fn set_com_adobe_cq_cdn_cdn_rewriter(&mut self, com_adobe_cq_cdn_cdn_rewriter: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_cdn_cdn_rewriter = Some(com_adobe_cq_cdn_cdn_rewriter);
  }

  pub fn with_com_adobe_cq_cdn_cdn_rewriter(mut self, com_adobe_cq_cdn_cdn_rewriter: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_cq_cdn_cdn_rewriter = Some(com_adobe_cq_cdn_cdn_rewriter);
    self
  }

  pub fn com_adobe_cq_cdn_cdn_rewriter(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_cdn_cdn_rewriter.as_ref()
  }

  pub fn reset_com_adobe_cq_cdn_cdn_rewriter(&mut self) {
    self.com_adobe_cq_cdn_cdn_rewriter = None;
  }

  pub fn set_com_adobe_cq_cloud_config_components(&mut self, com_adobe_cq_cloud_config_components: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_cloud_config_components = Some(com_adobe_cq_cloud_config_components);
  }

  pub fn with_com_adobe_cq_cloud_config_components(mut self, com_adobe_cq_cloud_config_components: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_cq_cloud_config_components = Some(com_adobe_cq_cloud_config_components);
    self
  }

  pub fn com_adobe_cq_cloud_config_components(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_cloud_config_components.as_ref()
  }

  pub fn reset_com_adobe_cq_cloud_config_components(&mut self) {
    self.com_adobe_cq_cloud_config_components = None;
  }

  pub fn set_com_adobe_cq_cloud_config_core(&mut self, com_adobe_cq_cloud_config_core: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_cloud_config_core = Some(com_adobe_cq_cloud_config_core);
  }

  pub fn with_com_adobe_cq_cloud_config_core(mut self, com_adobe_cq_cloud_config_core: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_cq_cloud_config_core = Some(com_adobe_cq_cloud_config_core);
    self
  }

  pub fn com_adobe_cq_cloud_config_core(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_cloud_config_core.as_ref()
  }

  pub fn reset_com_adobe_cq_cloud_config_core(&mut self) {
    self.com_adobe_cq_cloud_config_core = None;
  }

  pub fn set_com_adobe_cq_cloud_config_ui(&mut self, com_adobe_cq_cloud_config_ui: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_cloud_config_ui = Some(com_adobe_cq_cloud_config_ui);
  }

  pub fn with_com_adobe_cq_cloud_config_ui(mut self, com_adobe_cq_cloud_config_ui: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_cq_cloud_config_ui = Some(com_adobe_cq_cloud_config_ui);
    self
  }

  pub fn com_adobe_cq_cloud_config_ui(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_cloud_config_ui.as_ref()
  }

  pub fn reset_com_adobe_cq_cloud_config_ui(&mut self) {
    self.com_adobe_cq_cloud_config_ui = None;
  }

  pub fn set_com_adobe_cq_com_adobe_cq_editor(&mut self, com_adobe_cq_com_adobe_cq_editor: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_com_adobe_cq_editor = Some(com_adobe_cq_com_adobe_cq_editor);
  }

  pub fn with_com_adobe_cq_com_adobe_cq_editor(mut self, com_adobe_cq_com_adobe_cq_editor: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_cq_com_adobe_cq_editor = Some(com_adobe_cq_com_adobe_cq_editor);
    self
  }

  pub fn com_adobe_cq_com_adobe_cq_editor(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_com_adobe_cq_editor.as_ref()
  }

  pub fn reset_com_adobe_cq_com_adobe_cq_editor(&mut self) {
    self.com_adobe_cq_com_adobe_cq_editor = None;
  }

  pub fn set_com_adobe_cq_com_adobe_cq_projects_core(&mut self, com_adobe_cq_com_adobe_cq_projects_core: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_com_adobe_cq_projects_core = Some(com_adobe_cq_com_adobe_cq_projects_core);
  }

  pub fn with_com_adobe_cq_com_adobe_cq_projects_core(mut self, com_adobe_cq_com_adobe_cq_projects_core: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_cq_com_adobe_cq_projects_core = Some(com_adobe_cq_com_adobe_cq_projects_core);
    self
  }

  pub fn com_adobe_cq_com_adobe_cq_projects_core(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_com_adobe_cq_projects_core.as_ref()
  }

  pub fn reset_com_adobe_cq_com_adobe_cq_projects_core(&mut self) {
    self.com_adobe_cq_com_adobe_cq_projects_core = None;
  }

  pub fn set_com_adobe_cq_com_adobe_cq_projects_wcm_core(&mut self, com_adobe_cq_com_adobe_cq_projects_wcm_core: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_com_adobe_cq_projects_wcm_core = Some(com_adobe_cq_com_adobe_cq_projects_wcm_core);
  }

  pub fn with_com_adobe_cq_com_adobe_cq_projects_wcm_core(mut self, com_adobe_cq_com_adobe_cq_projects_wcm_core: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_cq_com_adobe_cq_projects_wcm_core = Some(com_adobe_cq_com_adobe_cq_projects_wcm_core);
    self
  }

  pub fn com_adobe_cq_com_adobe_cq_projects_wcm_core(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_com_adobe_cq_projects_wcm_core.as_ref()
  }

  pub fn reset_com_adobe_cq_com_adobe_cq_projects_wcm_core(&mut self) {
    self.com_adobe_cq_com_adobe_cq_projects_wcm_core = None;
  }

  pub fn set_com_adobe_cq_com_adobe_cq_ui_commons(&mut self, com_adobe_cq_com_adobe_cq_ui_commons: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_com_adobe_cq_ui_commons = Some(com_adobe_cq_com_adobe_cq_ui_commons);
  }

  pub fn with_com_adobe_cq_com_adobe_cq_ui_commons(mut self, com_adobe_cq_com_adobe_cq_ui_commons: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_cq_com_adobe_cq_ui_commons = Some(com_adobe_cq_com_adobe_cq_ui_commons);
    self
  }

  pub fn com_adobe_cq_com_adobe_cq_ui_commons(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_com_adobe_cq_ui_commons.as_ref()
  }

  pub fn reset_com_adobe_cq_com_adobe_cq_ui_commons(&mut self) {
    self.com_adobe_cq_com_adobe_cq_ui_commons = None;
  }

  pub fn set_com_adobe_cq_com_adobe_cq_wcm_style(&mut self, com_adobe_cq_com_adobe_cq_wcm_style: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_com_adobe_cq_wcm_style = Some(com_adobe_cq_com_adobe_cq_wcm_style);
  }

  pub fn with_com_adobe_cq_com_adobe_cq_wcm_style(mut self, com_adobe_cq_com_adobe_cq_wcm_style: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_cq_com_adobe_cq_wcm_style = Some(com_adobe_cq_com_adobe_cq_wcm_style);
    self
  }

  pub fn com_adobe_cq_com_adobe_cq_wcm_style(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_com_adobe_cq_wcm_style.as_ref()
  }

  pub fn reset_com_adobe_cq_com_adobe_cq_wcm_style(&mut self) {
    self.com_adobe_cq_com_adobe_cq_wcm_style = None;
  }

  pub fn set_com_adobe_cq_cq_activitymap_integration(&mut self, com_adobe_cq_cq_activitymap_integration: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_cq_activitymap_integration = Some(com_adobe_cq_cq_activitymap_integration);
  }

  pub fn with_com_adobe_cq_cq_activitymap_integration(mut self, com_adobe_cq_cq_activitymap_integration: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_cq_cq_activitymap_integration = Some(com_adobe_cq_cq_activitymap_integration);
    self
  }

  pub fn com_adobe_cq_cq_activitymap_integration(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_cq_activitymap_integration.as_ref()
  }

  pub fn reset_com_adobe_cq_cq_activitymap_integration(&mut self) {
    self.com_adobe_cq_cq_activitymap_integration = None;
  }

  pub fn set_com_adobe_cq_cq_contexthub_commons(&mut self, com_adobe_cq_cq_contexthub_commons: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_cq_contexthub_commons = Some(com_adobe_cq_cq_contexthub_commons);
  }

  pub fn with_com_adobe_cq_cq_contexthub_commons(mut self, com_adobe_cq_cq_contexthub_commons: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_cq_cq_contexthub_commons = Some(com_adobe_cq_cq_contexthub_commons);
    self
  }

  pub fn com_adobe_cq_cq_contexthub_commons(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_cq_contexthub_commons.as_ref()
  }

  pub fn reset_com_adobe_cq_cq_contexthub_commons(&mut self) {
    self.com_adobe_cq_cq_contexthub_commons = None;
  }

  pub fn set_com_adobe_cq_cq_dtm(&mut self, com_adobe_cq_cq_dtm: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_cq_dtm = Some(com_adobe_cq_cq_dtm);
  }

  pub fn with_com_adobe_cq_cq_dtm(mut self, com_adobe_cq_cq_dtm: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_cq_cq_dtm = Some(com_adobe_cq_cq_dtm);
    self
  }

  pub fn com_adobe_cq_cq_dtm(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_cq_dtm.as_ref()
  }

  pub fn reset_com_adobe_cq_cq_dtm(&mut self) {
    self.com_adobe_cq_cq_dtm = None;
  }

  pub fn set_com_adobe_cq_cq_healthcheck(&mut self, com_adobe_cq_cq_healthcheck: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_cq_healthcheck = Some(com_adobe_cq_cq_healthcheck);
  }

  pub fn with_com_adobe_cq_cq_healthcheck(mut self, com_adobe_cq_cq_healthcheck: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_cq_cq_healthcheck = Some(com_adobe_cq_cq_healthcheck);
    self
  }

  pub fn com_adobe_cq_cq_healthcheck(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_cq_healthcheck.as_ref()
  }

  pub fn reset_com_adobe_cq_cq_healthcheck(&mut self) {
    self.com_adobe_cq_cq_healthcheck = None;
  }

  pub fn set_com_adobe_cq_cq_multisite_targeting(&mut self, com_adobe_cq_cq_multisite_targeting: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_cq_multisite_targeting = Some(com_adobe_cq_cq_multisite_targeting);
  }

  pub fn with_com_adobe_cq_cq_multisite_targeting(mut self, com_adobe_cq_cq_multisite_targeting: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_cq_cq_multisite_targeting = Some(com_adobe_cq_cq_multisite_targeting);
    self
  }

  pub fn com_adobe_cq_cq_multisite_targeting(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_cq_multisite_targeting.as_ref()
  }

  pub fn reset_com_adobe_cq_cq_multisite_targeting(&mut self) {
    self.com_adobe_cq_cq_multisite_targeting = None;
  }

  pub fn set_com_adobe_cq_cq_pre_upgrade_cleanup(&mut self, com_adobe_cq_cq_pre_upgrade_cleanup: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_cq_pre_upgrade_cleanup = Some(com_adobe_cq_cq_pre_upgrade_cleanup);
  }

  pub fn with_com_adobe_cq_cq_pre_upgrade_cleanup(mut self, com_adobe_cq_cq_pre_upgrade_cleanup: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_cq_cq_pre_upgrade_cleanup = Some(com_adobe_cq_cq_pre_upgrade_cleanup);
    self
  }

  pub fn com_adobe_cq_cq_pre_upgrade_cleanup(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_cq_pre_upgrade_cleanup.as_ref()
  }

  pub fn reset_com_adobe_cq_cq_pre_upgrade_cleanup(&mut self) {
    self.com_adobe_cq_cq_pre_upgrade_cleanup = None;
  }

  pub fn set_com_adobe_cq_cq_product_info_provider(&mut self, com_adobe_cq_cq_product_info_provider: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_cq_product_info_provider = Some(com_adobe_cq_cq_product_info_provider);
  }

  pub fn with_com_adobe_cq_cq_product_info_provider(mut self, com_adobe_cq_cq_product_info_provider: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_cq_cq_product_info_provider = Some(com_adobe_cq_cq_product_info_provider);
    self
  }

  pub fn com_adobe_cq_cq_product_info_provider(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_cq_product_info_provider.as_ref()
  }

  pub fn reset_com_adobe_cq_cq_product_info_provider(&mut self) {
    self.com_adobe_cq_cq_product_info_provider = None;
  }

  pub fn set_com_adobe_cq_cq_rest_sites(&mut self, com_adobe_cq_cq_rest_sites: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_cq_rest_sites = Some(com_adobe_cq_cq_rest_sites);
  }

  pub fn with_com_adobe_cq_cq_rest_sites(mut self, com_adobe_cq_cq_rest_sites: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_cq_cq_rest_sites = Some(com_adobe_cq_cq_rest_sites);
    self
  }

  pub fn com_adobe_cq_cq_rest_sites(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_cq_rest_sites.as_ref()
  }

  pub fn reset_com_adobe_cq_cq_rest_sites(&mut self) {
    self.com_adobe_cq_cq_rest_sites = None;
  }

  pub fn set_com_adobe_cq_cq_security_hc(&mut self, com_adobe_cq_cq_security_hc: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_cq_security_hc = Some(com_adobe_cq_cq_security_hc);
  }

  pub fn with_com_adobe_cq_cq_security_hc(mut self, com_adobe_cq_cq_security_hc: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_cq_cq_security_hc = Some(com_adobe_cq_cq_security_hc);
    self
  }

  pub fn com_adobe_cq_cq_security_hc(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_cq_security_hc.as_ref()
  }

  pub fn reset_com_adobe_cq_cq_security_hc(&mut self) {
    self.com_adobe_cq_cq_security_hc = None;
  }

  pub fn set_com_adobe_cq_dam_cq_dam_svg_handler(&mut self, com_adobe_cq_dam_cq_dam_svg_handler: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_dam_cq_dam_svg_handler = Some(com_adobe_cq_dam_cq_dam_svg_handler);
  }

  pub fn with_com_adobe_cq_dam_cq_dam_svg_handler(mut self, com_adobe_cq_dam_cq_dam_svg_handler: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_cq_dam_cq_dam_svg_handler = Some(com_adobe_cq_dam_cq_dam_svg_handler);
    self
  }

  pub fn com_adobe_cq_dam_cq_dam_svg_handler(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_dam_cq_dam_svg_handler.as_ref()
  }

  pub fn reset_com_adobe_cq_dam_cq_dam_svg_handler(&mut self) {
    self.com_adobe_cq_dam_cq_dam_svg_handler = None;
  }

  pub fn set_com_adobe_cq_dam_cq_scene7_imaging(&mut self, com_adobe_cq_dam_cq_scene7_imaging: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_dam_cq_scene7_imaging = Some(com_adobe_cq_dam_cq_scene7_imaging);
  }

  pub fn with_com_adobe_cq_dam_cq_scene7_imaging(mut self, com_adobe_cq_dam_cq_scene7_imaging: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_cq_dam_cq_scene7_imaging = Some(com_adobe_cq_dam_cq_scene7_imaging);
    self
  }

  pub fn com_adobe_cq_dam_cq_scene7_imaging(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_dam_cq_scene7_imaging.as_ref()
  }

  pub fn reset_com_adobe_cq_dam_cq_scene7_imaging(&mut self) {
    self.com_adobe_cq_dam_cq_scene7_imaging = None;
  }

  pub fn set_com_adobe_cq_dtm_reactor_core(&mut self, com_adobe_cq_dtm_reactor_core: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_dtm_reactor_core = Some(com_adobe_cq_dtm_reactor_core);
  }

  pub fn with_com_adobe_cq_dtm_reactor_core(mut self, com_adobe_cq_dtm_reactor_core: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_cq_dtm_reactor_core = Some(com_adobe_cq_dtm_reactor_core);
    self
  }

  pub fn com_adobe_cq_dtm_reactor_core(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_dtm_reactor_core.as_ref()
  }

  pub fn reset_com_adobe_cq_dtm_reactor_core(&mut self) {
    self.com_adobe_cq_dtm_reactor_core = None;
  }

  pub fn set_com_adobe_cq_dtm_reactor_ui(&mut self, com_adobe_cq_dtm_reactor_ui: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_dtm_reactor_ui = Some(com_adobe_cq_dtm_reactor_ui);
  }

  pub fn with_com_adobe_cq_dtm_reactor_ui(mut self, com_adobe_cq_dtm_reactor_ui: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_cq_dtm_reactor_ui = Some(com_adobe_cq_dtm_reactor_ui);
    self
  }

  pub fn com_adobe_cq_dtm_reactor_ui(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_dtm_reactor_ui.as_ref()
  }

  pub fn reset_com_adobe_cq_dtm_reactor_ui(&mut self) {
    self.com_adobe_cq_dtm_reactor_ui = None;
  }

  pub fn set_com_adobe_cq_exp_jspel_resolver(&mut self, com_adobe_cq_exp_jspel_resolver: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_exp_jspel_resolver = Some(com_adobe_cq_exp_jspel_resolver);
  }

  pub fn with_com_adobe_cq_exp_jspel_resolver(mut self, com_adobe_cq_exp_jspel_resolver: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_cq_exp_jspel_resolver = Some(com_adobe_cq_exp_jspel_resolver);
    self
  }

  pub fn com_adobe_cq_exp_jspel_resolver(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_exp_jspel_resolver.as_ref()
  }

  pub fn reset_com_adobe_cq_exp_jspel_resolver(&mut self) {
    self.com_adobe_cq_exp_jspel_resolver = None;
  }

  pub fn set_com_adobe_cq_inbox_cq_inbox(&mut self, com_adobe_cq_inbox_cq_inbox: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_inbox_cq_inbox = Some(com_adobe_cq_inbox_cq_inbox);
  }

  pub fn with_com_adobe_cq_inbox_cq_inbox(mut self, com_adobe_cq_inbox_cq_inbox: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_cq_inbox_cq_inbox = Some(com_adobe_cq_inbox_cq_inbox);
    self
  }

  pub fn com_adobe_cq_inbox_cq_inbox(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_inbox_cq_inbox.as_ref()
  }

  pub fn reset_com_adobe_cq_inbox_cq_inbox(&mut self) {
    self.com_adobe_cq_inbox_cq_inbox = None;
  }

  pub fn set_com_adobe_cq_json_schema_parser(&mut self, com_adobe_cq_json_schema_parser: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_json_schema_parser = Some(com_adobe_cq_json_schema_parser);
  }

  pub fn with_com_adobe_cq_json_schema_parser(mut self, com_adobe_cq_json_schema_parser: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_cq_json_schema_parser = Some(com_adobe_cq_json_schema_parser);
    self
  }

  pub fn com_adobe_cq_json_schema_parser(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_json_schema_parser.as_ref()
  }

  pub fn reset_com_adobe_cq_json_schema_parser(&mut self) {
    self.com_adobe_cq_json_schema_parser = None;
  }

  pub fn set_com_adobe_cq_media_cq_media_publishing_dps_fp_core(&mut self, com_adobe_cq_media_cq_media_publishing_dps_fp_core: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_media_cq_media_publishing_dps_fp_core = Some(com_adobe_cq_media_cq_media_publishing_dps_fp_core);
  }

  pub fn with_com_adobe_cq_media_cq_media_publishing_dps_fp_core(mut self, com_adobe_cq_media_cq_media_publishing_dps_fp_core: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_cq_media_cq_media_publishing_dps_fp_core = Some(com_adobe_cq_media_cq_media_publishing_dps_fp_core);
    self
  }

  pub fn com_adobe_cq_media_cq_media_publishing_dps_fp_core(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_media_cq_media_publishing_dps_fp_core.as_ref()
  }

  pub fn reset_com_adobe_cq_media_cq_media_publishing_dps_fp_core(&mut self) {
    self.com_adobe_cq_media_cq_media_publishing_dps_fp_core = None;
  }

  pub fn set_com_adobe_cq_mobile_cq_mobile_caas(&mut self, com_adobe_cq_mobile_cq_mobile_caas: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_mobile_cq_mobile_caas = Some(com_adobe_cq_mobile_cq_mobile_caas);
  }

  pub fn with_com_adobe_cq_mobile_cq_mobile_caas(mut self, com_adobe_cq_mobile_cq_mobile_caas: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_cq_mobile_cq_mobile_caas = Some(com_adobe_cq_mobile_cq_mobile_caas);
    self
  }

  pub fn com_adobe_cq_mobile_cq_mobile_caas(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_mobile_cq_mobile_caas.as_ref()
  }

  pub fn reset_com_adobe_cq_mobile_cq_mobile_caas(&mut self) {
    self.com_adobe_cq_mobile_cq_mobile_caas = None;
  }

  pub fn set_com_adobe_cq_mobile_cq_mobile_index_builder(&mut self, com_adobe_cq_mobile_cq_mobile_index_builder: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_mobile_cq_mobile_index_builder = Some(com_adobe_cq_mobile_cq_mobile_index_builder);
  }

  pub fn with_com_adobe_cq_mobile_cq_mobile_index_builder(mut self, com_adobe_cq_mobile_cq_mobile_index_builder: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_cq_mobile_cq_mobile_index_builder = Some(com_adobe_cq_mobile_cq_mobile_index_builder);
    self
  }

  pub fn com_adobe_cq_mobile_cq_mobile_index_builder(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_mobile_cq_mobile_index_builder.as_ref()
  }

  pub fn reset_com_adobe_cq_mobile_cq_mobile_index_builder(&mut self) {
    self.com_adobe_cq_mobile_cq_mobile_index_builder = None;
  }

  pub fn set_com_adobe_cq_mobile_cq_mobile_phonegap_build(&mut self, com_adobe_cq_mobile_cq_mobile_phonegap_build: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_mobile_cq_mobile_phonegap_build = Some(com_adobe_cq_mobile_cq_mobile_phonegap_build);
  }

  pub fn with_com_adobe_cq_mobile_cq_mobile_phonegap_build(mut self, com_adobe_cq_mobile_cq_mobile_phonegap_build: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_cq_mobile_cq_mobile_phonegap_build = Some(com_adobe_cq_mobile_cq_mobile_phonegap_build);
    self
  }

  pub fn com_adobe_cq_mobile_cq_mobile_phonegap_build(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_mobile_cq_mobile_phonegap_build.as_ref()
  }

  pub fn reset_com_adobe_cq_mobile_cq_mobile_phonegap_build(&mut self) {
    self.com_adobe_cq_mobile_cq_mobile_phonegap_build = None;
  }

  pub fn set_com_adobe_cq_myspell(&mut self, com_adobe_cq_myspell: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_myspell = Some(com_adobe_cq_myspell);
  }

  pub fn with_com_adobe_cq_myspell(mut self, com_adobe_cq_myspell: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_cq_myspell = Some(com_adobe_cq_myspell);
    self
  }

  pub fn com_adobe_cq_myspell(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_myspell.as_ref()
  }

  pub fn reset_com_adobe_cq_myspell(&mut self) {
    self.com_adobe_cq_myspell = None;
  }

  pub fn set_com_adobe_cq_sample_we_retail_core(&mut self, com_adobe_cq_sample_we_retail_core: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_sample_we_retail_core = Some(com_adobe_cq_sample_we_retail_core);
  }

  pub fn with_com_adobe_cq_sample_we_retail_core(mut self, com_adobe_cq_sample_we_retail_core: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_cq_sample_we_retail_core = Some(com_adobe_cq_sample_we_retail_core);
    self
  }

  pub fn com_adobe_cq_sample_we_retail_core(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_sample_we_retail_core.as_ref()
  }

  pub fn reset_com_adobe_cq_sample_we_retail_core(&mut self) {
    self.com_adobe_cq_sample_we_retail_core = None;
  }

  pub fn set_com_adobe_cq_screens_com_adobe_cq_screens_dcc(&mut self, com_adobe_cq_screens_com_adobe_cq_screens_dcc: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_screens_com_adobe_cq_screens_dcc = Some(com_adobe_cq_screens_com_adobe_cq_screens_dcc);
  }

  pub fn with_com_adobe_cq_screens_com_adobe_cq_screens_dcc(mut self, com_adobe_cq_screens_com_adobe_cq_screens_dcc: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_cq_screens_com_adobe_cq_screens_dcc = Some(com_adobe_cq_screens_com_adobe_cq_screens_dcc);
    self
  }

  pub fn com_adobe_cq_screens_com_adobe_cq_screens_dcc(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_screens_com_adobe_cq_screens_dcc.as_ref()
  }

  pub fn reset_com_adobe_cq_screens_com_adobe_cq_screens_dcc(&mut self) {
    self.com_adobe_cq_screens_com_adobe_cq_screens_dcc = None;
  }

  pub fn set_com_adobe_cq_screens_com_adobe_cq_screens_mq_core(&mut self, com_adobe_cq_screens_com_adobe_cq_screens_mq_core: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_screens_com_adobe_cq_screens_mq_core = Some(com_adobe_cq_screens_com_adobe_cq_screens_mq_core);
  }

  pub fn with_com_adobe_cq_screens_com_adobe_cq_screens_mq_core(mut self, com_adobe_cq_screens_com_adobe_cq_screens_mq_core: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_cq_screens_com_adobe_cq_screens_mq_core = Some(com_adobe_cq_screens_com_adobe_cq_screens_mq_core);
    self
  }

  pub fn com_adobe_cq_screens_com_adobe_cq_screens_mq_core(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_screens_com_adobe_cq_screens_mq_core.as_ref()
  }

  pub fn reset_com_adobe_cq_screens_com_adobe_cq_screens_mq_core(&mut self) {
    self.com_adobe_cq_screens_com_adobe_cq_screens_mq_core = None;
  }

  pub fn set_com_adobe_cq_social_cq_social_as_provider(&mut self, com_adobe_cq_social_cq_social_as_provider: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_social_cq_social_as_provider = Some(com_adobe_cq_social_cq_social_as_provider);
  }

  pub fn with_com_adobe_cq_social_cq_social_as_provider(mut self, com_adobe_cq_social_cq_social_as_provider: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_cq_social_cq_social_as_provider = Some(com_adobe_cq_social_cq_social_as_provider);
    self
  }

  pub fn com_adobe_cq_social_cq_social_as_provider(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_social_cq_social_as_provider.as_ref()
  }

  pub fn reset_com_adobe_cq_social_cq_social_as_provider(&mut self) {
    self.com_adobe_cq_social_cq_social_as_provider = None;
  }

  pub fn set_com_adobe_cq_social_cq_social_badging_basic_impl(&mut self, com_adobe_cq_social_cq_social_badging_basic_impl: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_social_cq_social_badging_basic_impl = Some(com_adobe_cq_social_cq_social_badging_basic_impl);
  }

  pub fn with_com_adobe_cq_social_cq_social_badging_basic_impl(mut self, com_adobe_cq_social_cq_social_badging_basic_impl: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_cq_social_cq_social_badging_basic_impl = Some(com_adobe_cq_social_cq_social_badging_basic_impl);
    self
  }

  pub fn com_adobe_cq_social_cq_social_badging_basic_impl(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_social_cq_social_badging_basic_impl.as_ref()
  }

  pub fn reset_com_adobe_cq_social_cq_social_badging_basic_impl(&mut self) {
    self.com_adobe_cq_social_cq_social_badging_basic_impl = None;
  }

  pub fn set_com_adobe_cq_social_cq_social_badging_impl(&mut self, com_adobe_cq_social_cq_social_badging_impl: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_social_cq_social_badging_impl = Some(com_adobe_cq_social_cq_social_badging_impl);
  }

  pub fn with_com_adobe_cq_social_cq_social_badging_impl(mut self, com_adobe_cq_social_cq_social_badging_impl: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_cq_social_cq_social_badging_impl = Some(com_adobe_cq_social_cq_social_badging_impl);
    self
  }

  pub fn com_adobe_cq_social_cq_social_badging_impl(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_social_cq_social_badging_impl.as_ref()
  }

  pub fn reset_com_adobe_cq_social_cq_social_badging_impl(&mut self) {
    self.com_adobe_cq_social_cq_social_badging_impl = None;
  }

  pub fn set_com_adobe_cq_social_cq_social_calendar_impl(&mut self, com_adobe_cq_social_cq_social_calendar_impl: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_social_cq_social_calendar_impl = Some(com_adobe_cq_social_cq_social_calendar_impl);
  }

  pub fn with_com_adobe_cq_social_cq_social_calendar_impl(mut self, com_adobe_cq_social_cq_social_calendar_impl: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_cq_social_cq_social_calendar_impl = Some(com_adobe_cq_social_cq_social_calendar_impl);
    self
  }

  pub fn com_adobe_cq_social_cq_social_calendar_impl(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_social_cq_social_calendar_impl.as_ref()
  }

  pub fn reset_com_adobe_cq_social_cq_social_calendar_impl(&mut self) {
    self.com_adobe_cq_social_cq_social_calendar_impl = None;
  }

  pub fn set_com_adobe_cq_social_cq_social_content_fragments_impl(&mut self, com_adobe_cq_social_cq_social_content_fragments_impl: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_social_cq_social_content_fragments_impl = Some(com_adobe_cq_social_cq_social_content_fragments_impl);
  }

  pub fn with_com_adobe_cq_social_cq_social_content_fragments_impl(mut self, com_adobe_cq_social_cq_social_content_fragments_impl: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_cq_social_cq_social_content_fragments_impl = Some(com_adobe_cq_social_cq_social_content_fragments_impl);
    self
  }

  pub fn com_adobe_cq_social_cq_social_content_fragments_impl(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_social_cq_social_content_fragments_impl.as_ref()
  }

  pub fn reset_com_adobe_cq_social_cq_social_content_fragments_impl(&mut self) {
    self.com_adobe_cq_social_cq_social_content_fragments_impl = None;
  }

  pub fn set_com_adobe_cq_social_cq_social_enablement_impl(&mut self, com_adobe_cq_social_cq_social_enablement_impl: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_social_cq_social_enablement_impl = Some(com_adobe_cq_social_cq_social_enablement_impl);
  }

  pub fn with_com_adobe_cq_social_cq_social_enablement_impl(mut self, com_adobe_cq_social_cq_social_enablement_impl: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_cq_social_cq_social_enablement_impl = Some(com_adobe_cq_social_cq_social_enablement_impl);
    self
  }

  pub fn com_adobe_cq_social_cq_social_enablement_impl(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_social_cq_social_enablement_impl.as_ref()
  }

  pub fn reset_com_adobe_cq_social_cq_social_enablement_impl(&mut self) {
    self.com_adobe_cq_social_cq_social_enablement_impl = None;
  }

  pub fn set_com_adobe_cq_social_cq_social_graph_impl(&mut self, com_adobe_cq_social_cq_social_graph_impl: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_social_cq_social_graph_impl = Some(com_adobe_cq_social_cq_social_graph_impl);
  }

  pub fn with_com_adobe_cq_social_cq_social_graph_impl(mut self, com_adobe_cq_social_cq_social_graph_impl: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_cq_social_cq_social_graph_impl = Some(com_adobe_cq_social_cq_social_graph_impl);
    self
  }

  pub fn com_adobe_cq_social_cq_social_graph_impl(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_social_cq_social_graph_impl.as_ref()
  }

  pub fn reset_com_adobe_cq_social_cq_social_graph_impl(&mut self) {
    self.com_adobe_cq_social_cq_social_graph_impl = None;
  }

  pub fn set_com_adobe_cq_social_cq_social_ideation_impl(&mut self, com_adobe_cq_social_cq_social_ideation_impl: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_social_cq_social_ideation_impl = Some(com_adobe_cq_social_cq_social_ideation_impl);
  }

  pub fn with_com_adobe_cq_social_cq_social_ideation_impl(mut self, com_adobe_cq_social_cq_social_ideation_impl: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_cq_social_cq_social_ideation_impl = Some(com_adobe_cq_social_cq_social_ideation_impl);
    self
  }

  pub fn com_adobe_cq_social_cq_social_ideation_impl(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_social_cq_social_ideation_impl.as_ref()
  }

  pub fn reset_com_adobe_cq_social_cq_social_ideation_impl(&mut self) {
    self.com_adobe_cq_social_cq_social_ideation_impl = None;
  }

  pub fn set_com_adobe_cq_social_cq_social_jcr_provider(&mut self, com_adobe_cq_social_cq_social_jcr_provider: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_social_cq_social_jcr_provider = Some(com_adobe_cq_social_cq_social_jcr_provider);
  }

  pub fn with_com_adobe_cq_social_cq_social_jcr_provider(mut self, com_adobe_cq_social_cq_social_jcr_provider: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_cq_social_cq_social_jcr_provider = Some(com_adobe_cq_social_cq_social_jcr_provider);
    self
  }

  pub fn com_adobe_cq_social_cq_social_jcr_provider(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_social_cq_social_jcr_provider.as_ref()
  }

  pub fn reset_com_adobe_cq_social_cq_social_jcr_provider(&mut self) {
    self.com_adobe_cq_social_cq_social_jcr_provider = None;
  }

  pub fn set_com_adobe_cq_social_cq_social_members_impl(&mut self, com_adobe_cq_social_cq_social_members_impl: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_social_cq_social_members_impl = Some(com_adobe_cq_social_cq_social_members_impl);
  }

  pub fn with_com_adobe_cq_social_cq_social_members_impl(mut self, com_adobe_cq_social_cq_social_members_impl: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_cq_social_cq_social_members_impl = Some(com_adobe_cq_social_cq_social_members_impl);
    self
  }

  pub fn com_adobe_cq_social_cq_social_members_impl(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_social_cq_social_members_impl.as_ref()
  }

  pub fn reset_com_adobe_cq_social_cq_social_members_impl(&mut self) {
    self.com_adobe_cq_social_cq_social_members_impl = None;
  }

  pub fn set_com_adobe_cq_social_cq_social_ms_provider(&mut self, com_adobe_cq_social_cq_social_ms_provider: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_social_cq_social_ms_provider = Some(com_adobe_cq_social_cq_social_ms_provider);
  }

  pub fn with_com_adobe_cq_social_cq_social_ms_provider(mut self, com_adobe_cq_social_cq_social_ms_provider: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_cq_social_cq_social_ms_provider = Some(com_adobe_cq_social_cq_social_ms_provider);
    self
  }

  pub fn com_adobe_cq_social_cq_social_ms_provider(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_social_cq_social_ms_provider.as_ref()
  }

  pub fn reset_com_adobe_cq_social_cq_social_ms_provider(&mut self) {
    self.com_adobe_cq_social_cq_social_ms_provider = None;
  }

  pub fn set_com_adobe_cq_social_cq_social_notifications_channels_web(&mut self, com_adobe_cq_social_cq_social_notifications_channels_web: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_social_cq_social_notifications_channels_web = Some(com_adobe_cq_social_cq_social_notifications_channels_web);
  }

  pub fn with_com_adobe_cq_social_cq_social_notifications_channels_web(mut self, com_adobe_cq_social_cq_social_notifications_channels_web: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_cq_social_cq_social_notifications_channels_web = Some(com_adobe_cq_social_cq_social_notifications_channels_web);
    self
  }

  pub fn com_adobe_cq_social_cq_social_notifications_channels_web(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_social_cq_social_notifications_channels_web.as_ref()
  }

  pub fn reset_com_adobe_cq_social_cq_social_notifications_channels_web(&mut self) {
    self.com_adobe_cq_social_cq_social_notifications_channels_web = None;
  }

  pub fn set_com_adobe_cq_social_cq_social_notifications_impl(&mut self, com_adobe_cq_social_cq_social_notifications_impl: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_social_cq_social_notifications_impl = Some(com_adobe_cq_social_cq_social_notifications_impl);
  }

  pub fn with_com_adobe_cq_social_cq_social_notifications_impl(mut self, com_adobe_cq_social_cq_social_notifications_impl: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_cq_social_cq_social_notifications_impl = Some(com_adobe_cq_social_cq_social_notifications_impl);
    self
  }

  pub fn com_adobe_cq_social_cq_social_notifications_impl(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_social_cq_social_notifications_impl.as_ref()
  }

  pub fn reset_com_adobe_cq_social_cq_social_notifications_impl(&mut self) {
    self.com_adobe_cq_social_cq_social_notifications_impl = None;
  }

  pub fn set_com_adobe_cq_social_cq_social_rdb_provider(&mut self, com_adobe_cq_social_cq_social_rdb_provider: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_social_cq_social_rdb_provider = Some(com_adobe_cq_social_cq_social_rdb_provider);
  }

  pub fn with_com_adobe_cq_social_cq_social_rdb_provider(mut self, com_adobe_cq_social_cq_social_rdb_provider: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_cq_social_cq_social_rdb_provider = Some(com_adobe_cq_social_cq_social_rdb_provider);
    self
  }

  pub fn com_adobe_cq_social_cq_social_rdb_provider(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_social_cq_social_rdb_provider.as_ref()
  }

  pub fn reset_com_adobe_cq_social_cq_social_rdb_provider(&mut self) {
    self.com_adobe_cq_social_cq_social_rdb_provider = None;
  }

  pub fn set_com_adobe_cq_social_cq_social_scf_impl(&mut self, com_adobe_cq_social_cq_social_scf_impl: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_social_cq_social_scf_impl = Some(com_adobe_cq_social_cq_social_scf_impl);
  }

  pub fn with_com_adobe_cq_social_cq_social_scf_impl(mut self, com_adobe_cq_social_cq_social_scf_impl: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_cq_social_cq_social_scf_impl = Some(com_adobe_cq_social_cq_social_scf_impl);
    self
  }

  pub fn com_adobe_cq_social_cq_social_scf_impl(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_social_cq_social_scf_impl.as_ref()
  }

  pub fn reset_com_adobe_cq_social_cq_social_scf_impl(&mut self) {
    self.com_adobe_cq_social_cq_social_scf_impl = None;
  }

  pub fn set_com_adobe_cq_social_cq_social_scoring_basic_impl(&mut self, com_adobe_cq_social_cq_social_scoring_basic_impl: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_social_cq_social_scoring_basic_impl = Some(com_adobe_cq_social_cq_social_scoring_basic_impl);
  }

  pub fn with_com_adobe_cq_social_cq_social_scoring_basic_impl(mut self, com_adobe_cq_social_cq_social_scoring_basic_impl: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_cq_social_cq_social_scoring_basic_impl = Some(com_adobe_cq_social_cq_social_scoring_basic_impl);
    self
  }

  pub fn com_adobe_cq_social_cq_social_scoring_basic_impl(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_social_cq_social_scoring_basic_impl.as_ref()
  }

  pub fn reset_com_adobe_cq_social_cq_social_scoring_basic_impl(&mut self) {
    self.com_adobe_cq_social_cq_social_scoring_basic_impl = None;
  }

  pub fn set_com_adobe_cq_social_cq_social_scoring_impl(&mut self, com_adobe_cq_social_cq_social_scoring_impl: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_social_cq_social_scoring_impl = Some(com_adobe_cq_social_cq_social_scoring_impl);
  }

  pub fn with_com_adobe_cq_social_cq_social_scoring_impl(mut self, com_adobe_cq_social_cq_social_scoring_impl: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_cq_social_cq_social_scoring_impl = Some(com_adobe_cq_social_cq_social_scoring_impl);
    self
  }

  pub fn com_adobe_cq_social_cq_social_scoring_impl(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_social_cq_social_scoring_impl.as_ref()
  }

  pub fn reset_com_adobe_cq_social_cq_social_scoring_impl(&mut self) {
    self.com_adobe_cq_social_cq_social_scoring_impl = None;
  }

  pub fn set_com_adobe_cq_social_cq_social_serviceusers_impl(&mut self, com_adobe_cq_social_cq_social_serviceusers_impl: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_social_cq_social_serviceusers_impl = Some(com_adobe_cq_social_cq_social_serviceusers_impl);
  }

  pub fn with_com_adobe_cq_social_cq_social_serviceusers_impl(mut self, com_adobe_cq_social_cq_social_serviceusers_impl: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_cq_social_cq_social_serviceusers_impl = Some(com_adobe_cq_social_cq_social_serviceusers_impl);
    self
  }

  pub fn com_adobe_cq_social_cq_social_serviceusers_impl(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_social_cq_social_serviceusers_impl.as_ref()
  }

  pub fn reset_com_adobe_cq_social_cq_social_serviceusers_impl(&mut self) {
    self.com_adobe_cq_social_cq_social_serviceusers_impl = None;
  }

  pub fn set_com_adobe_cq_social_cq_social_srp_impl(&mut self, com_adobe_cq_social_cq_social_srp_impl: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_social_cq_social_srp_impl = Some(com_adobe_cq_social_cq_social_srp_impl);
  }

  pub fn with_com_adobe_cq_social_cq_social_srp_impl(mut self, com_adobe_cq_social_cq_social_srp_impl: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_cq_social_cq_social_srp_impl = Some(com_adobe_cq_social_cq_social_srp_impl);
    self
  }

  pub fn com_adobe_cq_social_cq_social_srp_impl(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_social_cq_social_srp_impl.as_ref()
  }

  pub fn reset_com_adobe_cq_social_cq_social_srp_impl(&mut self) {
    self.com_adobe_cq_social_cq_social_srp_impl = None;
  }

  pub fn set_com_adobe_cq_social_cq_social_ugcbase_impl(&mut self, com_adobe_cq_social_cq_social_ugcbase_impl: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_social_cq_social_ugcbase_impl = Some(com_adobe_cq_social_cq_social_ugcbase_impl);
  }

  pub fn with_com_adobe_cq_social_cq_social_ugcbase_impl(mut self, com_adobe_cq_social_cq_social_ugcbase_impl: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_cq_social_cq_social_ugcbase_impl = Some(com_adobe_cq_social_cq_social_ugcbase_impl);
    self
  }

  pub fn com_adobe_cq_social_cq_social_ugcbase_impl(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_social_cq_social_ugcbase_impl.as_ref()
  }

  pub fn reset_com_adobe_cq_social_cq_social_ugcbase_impl(&mut self) {
    self.com_adobe_cq_social_cq_social_ugcbase_impl = None;
  }

  pub fn set_com_adobe_dam_cq_dam_cfm_impl(&mut self, com_adobe_dam_cq_dam_cfm_impl: ::models::ConfigNodePropertyString) {
    self.com_adobe_dam_cq_dam_cfm_impl = Some(com_adobe_dam_cq_dam_cfm_impl);
  }

  pub fn with_com_adobe_dam_cq_dam_cfm_impl(mut self, com_adobe_dam_cq_dam_cfm_impl: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_dam_cq_dam_cfm_impl = Some(com_adobe_dam_cq_dam_cfm_impl);
    self
  }

  pub fn com_adobe_dam_cq_dam_cfm_impl(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_dam_cq_dam_cfm_impl.as_ref()
  }

  pub fn reset_com_adobe_dam_cq_dam_cfm_impl(&mut self) {
    self.com_adobe_dam_cq_dam_cfm_impl = None;
  }

  pub fn set_com_adobe_forms_foundation_forms_foundation_base(&mut self, com_adobe_forms_foundation_forms_foundation_base: ::models::ConfigNodePropertyString) {
    self.com_adobe_forms_foundation_forms_foundation_base = Some(com_adobe_forms_foundation_forms_foundation_base);
  }

  pub fn with_com_adobe_forms_foundation_forms_foundation_base(mut self, com_adobe_forms_foundation_forms_foundation_base: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_forms_foundation_forms_foundation_base = Some(com_adobe_forms_foundation_forms_foundation_base);
    self
  }

  pub fn com_adobe_forms_foundation_forms_foundation_base(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_forms_foundation_forms_foundation_base.as_ref()
  }

  pub fn reset_com_adobe_forms_foundation_forms_foundation_base(&mut self) {
    self.com_adobe_forms_foundation_forms_foundation_base = None;
  }

  pub fn set_com_adobe_granite_apicontroller(&mut self, com_adobe_granite_apicontroller: ::models::ConfigNodePropertyString) {
    self.com_adobe_granite_apicontroller = Some(com_adobe_granite_apicontroller);
  }

  pub fn with_com_adobe_granite_apicontroller(mut self, com_adobe_granite_apicontroller: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_granite_apicontroller = Some(com_adobe_granite_apicontroller);
    self
  }

  pub fn com_adobe_granite_apicontroller(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_granite_apicontroller.as_ref()
  }

  pub fn reset_com_adobe_granite_apicontroller(&mut self) {
    self.com_adobe_granite_apicontroller = None;
  }

  pub fn set_com_adobe_granite_asset_core(&mut self, com_adobe_granite_asset_core: ::models::ConfigNodePropertyString) {
    self.com_adobe_granite_asset_core = Some(com_adobe_granite_asset_core);
  }

  pub fn with_com_adobe_granite_asset_core(mut self, com_adobe_granite_asset_core: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_granite_asset_core = Some(com_adobe_granite_asset_core);
    self
  }

  pub fn com_adobe_granite_asset_core(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_granite_asset_core.as_ref()
  }

  pub fn reset_com_adobe_granite_asset_core(&mut self) {
    self.com_adobe_granite_asset_core = None;
  }

  pub fn set_com_adobe_granite_auth_sso(&mut self, com_adobe_granite_auth_sso: ::models::ConfigNodePropertyString) {
    self.com_adobe_granite_auth_sso = Some(com_adobe_granite_auth_sso);
  }

  pub fn with_com_adobe_granite_auth_sso(mut self, com_adobe_granite_auth_sso: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_granite_auth_sso = Some(com_adobe_granite_auth_sso);
    self
  }

  pub fn com_adobe_granite_auth_sso(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_granite_auth_sso.as_ref()
  }

  pub fn reset_com_adobe_granite_auth_sso(&mut self) {
    self.com_adobe_granite_auth_sso = None;
  }

  pub fn set_com_adobe_granite_bundles_hc_impl(&mut self, com_adobe_granite_bundles_hc_impl: ::models::ConfigNodePropertyString) {
    self.com_adobe_granite_bundles_hc_impl = Some(com_adobe_granite_bundles_hc_impl);
  }

  pub fn with_com_adobe_granite_bundles_hc_impl(mut self, com_adobe_granite_bundles_hc_impl: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_granite_bundles_hc_impl = Some(com_adobe_granite_bundles_hc_impl);
    self
  }

  pub fn com_adobe_granite_bundles_hc_impl(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_granite_bundles_hc_impl.as_ref()
  }

  pub fn reset_com_adobe_granite_bundles_hc_impl(&mut self) {
    self.com_adobe_granite_bundles_hc_impl = None;
  }

  pub fn set_com_adobe_granite_compat_router(&mut self, com_adobe_granite_compat_router: ::models::ConfigNodePropertyString) {
    self.com_adobe_granite_compat_router = Some(com_adobe_granite_compat_router);
  }

  pub fn with_com_adobe_granite_compat_router(mut self, com_adobe_granite_compat_router: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_granite_compat_router = Some(com_adobe_granite_compat_router);
    self
  }

  pub fn com_adobe_granite_compat_router(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_granite_compat_router.as_ref()
  }

  pub fn reset_com_adobe_granite_compat_router(&mut self) {
    self.com_adobe_granite_compat_router = None;
  }

  pub fn set_com_adobe_granite_conf(&mut self, com_adobe_granite_conf: ::models::ConfigNodePropertyString) {
    self.com_adobe_granite_conf = Some(com_adobe_granite_conf);
  }

  pub fn with_com_adobe_granite_conf(mut self, com_adobe_granite_conf: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_granite_conf = Some(com_adobe_granite_conf);
    self
  }

  pub fn com_adobe_granite_conf(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_granite_conf.as_ref()
  }

  pub fn reset_com_adobe_granite_conf(&mut self) {
    self.com_adobe_granite_conf = None;
  }

  pub fn set_com_adobe_granite_conf_ui_core(&mut self, com_adobe_granite_conf_ui_core: ::models::ConfigNodePropertyString) {
    self.com_adobe_granite_conf_ui_core = Some(com_adobe_granite_conf_ui_core);
  }

  pub fn with_com_adobe_granite_conf_ui_core(mut self, com_adobe_granite_conf_ui_core: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_granite_conf_ui_core = Some(com_adobe_granite_conf_ui_core);
    self
  }

  pub fn com_adobe_granite_conf_ui_core(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_granite_conf_ui_core.as_ref()
  }

  pub fn reset_com_adobe_granite_conf_ui_core(&mut self) {
    self.com_adobe_granite_conf_ui_core = None;
  }

  pub fn set_com_adobe_granite_cors(&mut self, com_adobe_granite_cors: ::models::ConfigNodePropertyString) {
    self.com_adobe_granite_cors = Some(com_adobe_granite_cors);
  }

  pub fn with_com_adobe_granite_cors(mut self, com_adobe_granite_cors: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_granite_cors = Some(com_adobe_granite_cors);
    self
  }

  pub fn com_adobe_granite_cors(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_granite_cors.as_ref()
  }

  pub fn reset_com_adobe_granite_cors(&mut self) {
    self.com_adobe_granite_cors = None;
  }

  pub fn set_com_adobe_granite_crx_explorer(&mut self, com_adobe_granite_crx_explorer: ::models::ConfigNodePropertyString) {
    self.com_adobe_granite_crx_explorer = Some(com_adobe_granite_crx_explorer);
  }

  pub fn with_com_adobe_granite_crx_explorer(mut self, com_adobe_granite_crx_explorer: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_granite_crx_explorer = Some(com_adobe_granite_crx_explorer);
    self
  }

  pub fn com_adobe_granite_crx_explorer(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_granite_crx_explorer.as_ref()
  }

  pub fn reset_com_adobe_granite_crx_explorer(&mut self) {
    self.com_adobe_granite_crx_explorer = None;
  }

  pub fn set_com_adobe_granite_crxde_lite(&mut self, com_adobe_granite_crxde_lite: ::models::ConfigNodePropertyString) {
    self.com_adobe_granite_crxde_lite = Some(com_adobe_granite_crxde_lite);
  }

  pub fn with_com_adobe_granite_crxde_lite(mut self, com_adobe_granite_crxde_lite: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_granite_crxde_lite = Some(com_adobe_granite_crxde_lite);
    self
  }

  pub fn com_adobe_granite_crxde_lite(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_granite_crxde_lite.as_ref()
  }

  pub fn reset_com_adobe_granite_crxde_lite(&mut self) {
    self.com_adobe_granite_crxde_lite = None;
  }

  pub fn set_com_adobe_granite_crypto_config(&mut self, com_adobe_granite_crypto_config: ::models::ConfigNodePropertyString) {
    self.com_adobe_granite_crypto_config = Some(com_adobe_granite_crypto_config);
  }

  pub fn with_com_adobe_granite_crypto_config(mut self, com_adobe_granite_crypto_config: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_granite_crypto_config = Some(com_adobe_granite_crypto_config);
    self
  }

  pub fn com_adobe_granite_crypto_config(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_granite_crypto_config.as_ref()
  }

  pub fn reset_com_adobe_granite_crypto_config(&mut self) {
    self.com_adobe_granite_crypto_config = None;
  }

  pub fn set_com_adobe_granite_crypto_extension(&mut self, com_adobe_granite_crypto_extension: ::models::ConfigNodePropertyString) {
    self.com_adobe_granite_crypto_extension = Some(com_adobe_granite_crypto_extension);
  }

  pub fn with_com_adobe_granite_crypto_extension(mut self, com_adobe_granite_crypto_extension: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_granite_crypto_extension = Some(com_adobe_granite_crypto_extension);
    self
  }

  pub fn com_adobe_granite_crypto_extension(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_granite_crypto_extension.as_ref()
  }

  pub fn reset_com_adobe_granite_crypto_extension(&mut self) {
    self.com_adobe_granite_crypto_extension = None;
  }

  pub fn set_com_adobe_granite_crypto_file(&mut self, com_adobe_granite_crypto_file: ::models::ConfigNodePropertyString) {
    self.com_adobe_granite_crypto_file = Some(com_adobe_granite_crypto_file);
  }

  pub fn with_com_adobe_granite_crypto_file(mut self, com_adobe_granite_crypto_file: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_granite_crypto_file = Some(com_adobe_granite_crypto_file);
    self
  }

  pub fn com_adobe_granite_crypto_file(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_granite_crypto_file.as_ref()
  }

  pub fn reset_com_adobe_granite_crypto_file(&mut self) {
    self.com_adobe_granite_crypto_file = None;
  }

  pub fn set_com_adobe_granite_crypto_jcr(&mut self, com_adobe_granite_crypto_jcr: ::models::ConfigNodePropertyString) {
    self.com_adobe_granite_crypto_jcr = Some(com_adobe_granite_crypto_jcr);
  }

  pub fn with_com_adobe_granite_crypto_jcr(mut self, com_adobe_granite_crypto_jcr: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_granite_crypto_jcr = Some(com_adobe_granite_crypto_jcr);
    self
  }

  pub fn com_adobe_granite_crypto_jcr(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_granite_crypto_jcr.as_ref()
  }

  pub fn reset_com_adobe_granite_crypto_jcr(&mut self) {
    self.com_adobe_granite_crypto_jcr = None;
  }

  pub fn set_com_adobe_granite_csrf(&mut self, com_adobe_granite_csrf: ::models::ConfigNodePropertyString) {
    self.com_adobe_granite_csrf = Some(com_adobe_granite_csrf);
  }

  pub fn with_com_adobe_granite_csrf(mut self, com_adobe_granite_csrf: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_granite_csrf = Some(com_adobe_granite_csrf);
    self
  }

  pub fn com_adobe_granite_csrf(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_granite_csrf.as_ref()
  }

  pub fn reset_com_adobe_granite_csrf(&mut self) {
    self.com_adobe_granite_csrf = None;
  }

  pub fn set_com_adobe_granite_distribution_core(&mut self, com_adobe_granite_distribution_core: ::models::ConfigNodePropertyString) {
    self.com_adobe_granite_distribution_core = Some(com_adobe_granite_distribution_core);
  }

  pub fn with_com_adobe_granite_distribution_core(mut self, com_adobe_granite_distribution_core: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_granite_distribution_core = Some(com_adobe_granite_distribution_core);
    self
  }

  pub fn com_adobe_granite_distribution_core(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_granite_distribution_core.as_ref()
  }

  pub fn reset_com_adobe_granite_distribution_core(&mut self) {
    self.com_adobe_granite_distribution_core = None;
  }

  pub fn set_com_adobe_granite_dropwizard_metrics(&mut self, com_adobe_granite_dropwizard_metrics: ::models::ConfigNodePropertyString) {
    self.com_adobe_granite_dropwizard_metrics = Some(com_adobe_granite_dropwizard_metrics);
  }

  pub fn with_com_adobe_granite_dropwizard_metrics(mut self, com_adobe_granite_dropwizard_metrics: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_granite_dropwizard_metrics = Some(com_adobe_granite_dropwizard_metrics);
    self
  }

  pub fn com_adobe_granite_dropwizard_metrics(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_granite_dropwizard_metrics.as_ref()
  }

  pub fn reset_com_adobe_granite_dropwizard_metrics(&mut self) {
    self.com_adobe_granite_dropwizard_metrics = None;
  }

  pub fn set_com_adobe_granite_frags_impl(&mut self, com_adobe_granite_frags_impl: ::models::ConfigNodePropertyString) {
    self.com_adobe_granite_frags_impl = Some(com_adobe_granite_frags_impl);
  }

  pub fn with_com_adobe_granite_frags_impl(mut self, com_adobe_granite_frags_impl: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_granite_frags_impl = Some(com_adobe_granite_frags_impl);
    self
  }

  pub fn com_adobe_granite_frags_impl(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_granite_frags_impl.as_ref()
  }

  pub fn reset_com_adobe_granite_frags_impl(&mut self) {
    self.com_adobe_granite_frags_impl = None;
  }

  pub fn set_com_adobe_granite_gibson(&mut self, com_adobe_granite_gibson: ::models::ConfigNodePropertyString) {
    self.com_adobe_granite_gibson = Some(com_adobe_granite_gibson);
  }

  pub fn with_com_adobe_granite_gibson(mut self, com_adobe_granite_gibson: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_granite_gibson = Some(com_adobe_granite_gibson);
    self
  }

  pub fn com_adobe_granite_gibson(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_granite_gibson.as_ref()
  }

  pub fn reset_com_adobe_granite_gibson(&mut self) {
    self.com_adobe_granite_gibson = None;
  }

  pub fn set_com_adobe_granite_infocollector(&mut self, com_adobe_granite_infocollector: ::models::ConfigNodePropertyString) {
    self.com_adobe_granite_infocollector = Some(com_adobe_granite_infocollector);
  }

  pub fn with_com_adobe_granite_infocollector(mut self, com_adobe_granite_infocollector: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_granite_infocollector = Some(com_adobe_granite_infocollector);
    self
  }

  pub fn com_adobe_granite_infocollector(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_granite_infocollector.as_ref()
  }

  pub fn reset_com_adobe_granite_infocollector(&mut self) {
    self.com_adobe_granite_infocollector = None;
  }

  pub fn set_com_adobe_granite_installer_factory_packages(&mut self, com_adobe_granite_installer_factory_packages: ::models::ConfigNodePropertyString) {
    self.com_adobe_granite_installer_factory_packages = Some(com_adobe_granite_installer_factory_packages);
  }

  pub fn with_com_adobe_granite_installer_factory_packages(mut self, com_adobe_granite_installer_factory_packages: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_granite_installer_factory_packages = Some(com_adobe_granite_installer_factory_packages);
    self
  }

  pub fn com_adobe_granite_installer_factory_packages(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_granite_installer_factory_packages.as_ref()
  }

  pub fn reset_com_adobe_granite_installer_factory_packages(&mut self) {
    self.com_adobe_granite_installer_factory_packages = None;
  }

  pub fn set_com_adobe_granite_jetty_ssl(&mut self, com_adobe_granite_jetty_ssl: ::models::ConfigNodePropertyString) {
    self.com_adobe_granite_jetty_ssl = Some(com_adobe_granite_jetty_ssl);
  }

  pub fn with_com_adobe_granite_jetty_ssl(mut self, com_adobe_granite_jetty_ssl: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_granite_jetty_ssl = Some(com_adobe_granite_jetty_ssl);
    self
  }

  pub fn com_adobe_granite_jetty_ssl(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_granite_jetty_ssl.as_ref()
  }

  pub fn reset_com_adobe_granite_jetty_ssl(&mut self) {
    self.com_adobe_granite_jetty_ssl = None;
  }

  pub fn set_com_adobe_granite_jobs_async(&mut self, com_adobe_granite_jobs_async: ::models::ConfigNodePropertyString) {
    self.com_adobe_granite_jobs_async = Some(com_adobe_granite_jobs_async);
  }

  pub fn with_com_adobe_granite_jobs_async(mut self, com_adobe_granite_jobs_async: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_granite_jobs_async = Some(com_adobe_granite_jobs_async);
    self
  }

  pub fn com_adobe_granite_jobs_async(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_granite_jobs_async.as_ref()
  }

  pub fn reset_com_adobe_granite_jobs_async(&mut self) {
    self.com_adobe_granite_jobs_async = None;
  }

  pub fn set_com_adobe_granite_maintenance_oak(&mut self, com_adobe_granite_maintenance_oak: ::models::ConfigNodePropertyString) {
    self.com_adobe_granite_maintenance_oak = Some(com_adobe_granite_maintenance_oak);
  }

  pub fn with_com_adobe_granite_maintenance_oak(mut self, com_adobe_granite_maintenance_oak: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_granite_maintenance_oak = Some(com_adobe_granite_maintenance_oak);
    self
  }

  pub fn com_adobe_granite_maintenance_oak(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_granite_maintenance_oak.as_ref()
  }

  pub fn reset_com_adobe_granite_maintenance_oak(&mut self) {
    self.com_adobe_granite_maintenance_oak = None;
  }

  pub fn set_com_adobe_granite_monitoring_core(&mut self, com_adobe_granite_monitoring_core: ::models::ConfigNodePropertyString) {
    self.com_adobe_granite_monitoring_core = Some(com_adobe_granite_monitoring_core);
  }

  pub fn with_com_adobe_granite_monitoring_core(mut self, com_adobe_granite_monitoring_core: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_granite_monitoring_core = Some(com_adobe_granite_monitoring_core);
    self
  }

  pub fn com_adobe_granite_monitoring_core(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_granite_monitoring_core.as_ref()
  }

  pub fn reset_com_adobe_granite_monitoring_core(&mut self) {
    self.com_adobe_granite_monitoring_core = None;
  }

  pub fn set_com_adobe_granite_queries(&mut self, com_adobe_granite_queries: ::models::ConfigNodePropertyString) {
    self.com_adobe_granite_queries = Some(com_adobe_granite_queries);
  }

  pub fn with_com_adobe_granite_queries(mut self, com_adobe_granite_queries: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_granite_queries = Some(com_adobe_granite_queries);
    self
  }

  pub fn com_adobe_granite_queries(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_granite_queries.as_ref()
  }

  pub fn reset_com_adobe_granite_queries(&mut self) {
    self.com_adobe_granite_queries = None;
  }

  pub fn set_com_adobe_granite_replication_hc_impl(&mut self, com_adobe_granite_replication_hc_impl: ::models::ConfigNodePropertyString) {
    self.com_adobe_granite_replication_hc_impl = Some(com_adobe_granite_replication_hc_impl);
  }

  pub fn with_com_adobe_granite_replication_hc_impl(mut self, com_adobe_granite_replication_hc_impl: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_granite_replication_hc_impl = Some(com_adobe_granite_replication_hc_impl);
    self
  }

  pub fn com_adobe_granite_replication_hc_impl(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_granite_replication_hc_impl.as_ref()
  }

  pub fn reset_com_adobe_granite_replication_hc_impl(&mut self) {
    self.com_adobe_granite_replication_hc_impl = None;
  }

  pub fn set_com_adobe_granite_repository_checker(&mut self, com_adobe_granite_repository_checker: ::models::ConfigNodePropertyString) {
    self.com_adobe_granite_repository_checker = Some(com_adobe_granite_repository_checker);
  }

  pub fn with_com_adobe_granite_repository_checker(mut self, com_adobe_granite_repository_checker: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_granite_repository_checker = Some(com_adobe_granite_repository_checker);
    self
  }

  pub fn com_adobe_granite_repository_checker(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_granite_repository_checker.as_ref()
  }

  pub fn reset_com_adobe_granite_repository_checker(&mut self) {
    self.com_adobe_granite_repository_checker = None;
  }

  pub fn set_com_adobe_granite_repository_hc_impl(&mut self, com_adobe_granite_repository_hc_impl: ::models::ConfigNodePropertyString) {
    self.com_adobe_granite_repository_hc_impl = Some(com_adobe_granite_repository_hc_impl);
  }

  pub fn with_com_adobe_granite_repository_hc_impl(mut self, com_adobe_granite_repository_hc_impl: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_granite_repository_hc_impl = Some(com_adobe_granite_repository_hc_impl);
    self
  }

  pub fn com_adobe_granite_repository_hc_impl(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_granite_repository_hc_impl.as_ref()
  }

  pub fn reset_com_adobe_granite_repository_hc_impl(&mut self) {
    self.com_adobe_granite_repository_hc_impl = None;
  }

  pub fn set_com_adobe_granite_rest_assets(&mut self, com_adobe_granite_rest_assets: ::models::ConfigNodePropertyString) {
    self.com_adobe_granite_rest_assets = Some(com_adobe_granite_rest_assets);
  }

  pub fn with_com_adobe_granite_rest_assets(mut self, com_adobe_granite_rest_assets: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_granite_rest_assets = Some(com_adobe_granite_rest_assets);
    self
  }

  pub fn com_adobe_granite_rest_assets(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_granite_rest_assets.as_ref()
  }

  pub fn reset_com_adobe_granite_rest_assets(&mut self) {
    self.com_adobe_granite_rest_assets = None;
  }

  pub fn set_com_adobe_granite_security_ui(&mut self, com_adobe_granite_security_ui: ::models::ConfigNodePropertyString) {
    self.com_adobe_granite_security_ui = Some(com_adobe_granite_security_ui);
  }

  pub fn with_com_adobe_granite_security_ui(mut self, com_adobe_granite_security_ui: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_granite_security_ui = Some(com_adobe_granite_security_ui);
    self
  }

  pub fn com_adobe_granite_security_ui(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_granite_security_ui.as_ref()
  }

  pub fn reset_com_adobe_granite_security_ui(&mut self) {
    self.com_adobe_granite_security_ui = None;
  }

  pub fn set_com_adobe_granite_startup(&mut self, com_adobe_granite_startup: ::models::ConfigNodePropertyString) {
    self.com_adobe_granite_startup = Some(com_adobe_granite_startup);
  }

  pub fn with_com_adobe_granite_startup(mut self, com_adobe_granite_startup: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_granite_startup = Some(com_adobe_granite_startup);
    self
  }

  pub fn com_adobe_granite_startup(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_granite_startup.as_ref()
  }

  pub fn reset_com_adobe_granite_startup(&mut self) {
    self.com_adobe_granite_startup = None;
  }

  pub fn set_com_adobe_granite_tagsoup(&mut self, com_adobe_granite_tagsoup: ::models::ConfigNodePropertyString) {
    self.com_adobe_granite_tagsoup = Some(com_adobe_granite_tagsoup);
  }

  pub fn with_com_adobe_granite_tagsoup(mut self, com_adobe_granite_tagsoup: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_granite_tagsoup = Some(com_adobe_granite_tagsoup);
    self
  }

  pub fn com_adobe_granite_tagsoup(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_granite_tagsoup.as_ref()
  }

  pub fn reset_com_adobe_granite_tagsoup(&mut self) {
    self.com_adobe_granite_tagsoup = None;
  }

  pub fn set_com_adobe_granite_taskmanagement_core(&mut self, com_adobe_granite_taskmanagement_core: ::models::ConfigNodePropertyString) {
    self.com_adobe_granite_taskmanagement_core = Some(com_adobe_granite_taskmanagement_core);
  }

  pub fn with_com_adobe_granite_taskmanagement_core(mut self, com_adobe_granite_taskmanagement_core: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_granite_taskmanagement_core = Some(com_adobe_granite_taskmanagement_core);
    self
  }

  pub fn com_adobe_granite_taskmanagement_core(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_granite_taskmanagement_core.as_ref()
  }

  pub fn reset_com_adobe_granite_taskmanagement_core(&mut self) {
    self.com_adobe_granite_taskmanagement_core = None;
  }

  pub fn set_com_adobe_granite_taskmanagement_workflow(&mut self, com_adobe_granite_taskmanagement_workflow: ::models::ConfigNodePropertyString) {
    self.com_adobe_granite_taskmanagement_workflow = Some(com_adobe_granite_taskmanagement_workflow);
  }

  pub fn with_com_adobe_granite_taskmanagement_workflow(mut self, com_adobe_granite_taskmanagement_workflow: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_granite_taskmanagement_workflow = Some(com_adobe_granite_taskmanagement_workflow);
    self
  }

  pub fn com_adobe_granite_taskmanagement_workflow(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_granite_taskmanagement_workflow.as_ref()
  }

  pub fn reset_com_adobe_granite_taskmanagement_workflow(&mut self) {
    self.com_adobe_granite_taskmanagement_workflow = None;
  }

  pub fn set_com_adobe_granite_ui_clientlibs_compiler_less(&mut self, com_adobe_granite_ui_clientlibs_compiler_less: ::models::ConfigNodePropertyString) {
    self.com_adobe_granite_ui_clientlibs_compiler_less = Some(com_adobe_granite_ui_clientlibs_compiler_less);
  }

  pub fn with_com_adobe_granite_ui_clientlibs_compiler_less(mut self, com_adobe_granite_ui_clientlibs_compiler_less: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_granite_ui_clientlibs_compiler_less = Some(com_adobe_granite_ui_clientlibs_compiler_less);
    self
  }

  pub fn com_adobe_granite_ui_clientlibs_compiler_less(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_granite_ui_clientlibs_compiler_less.as_ref()
  }

  pub fn reset_com_adobe_granite_ui_clientlibs_compiler_less(&mut self) {
    self.com_adobe_granite_ui_clientlibs_compiler_less = None;
  }

  pub fn set_com_adobe_granite_ui_clientlibs_processor_gcc(&mut self, com_adobe_granite_ui_clientlibs_processor_gcc: ::models::ConfigNodePropertyString) {
    self.com_adobe_granite_ui_clientlibs_processor_gcc = Some(com_adobe_granite_ui_clientlibs_processor_gcc);
  }

  pub fn with_com_adobe_granite_ui_clientlibs_processor_gcc(mut self, com_adobe_granite_ui_clientlibs_processor_gcc: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_granite_ui_clientlibs_processor_gcc = Some(com_adobe_granite_ui_clientlibs_processor_gcc);
    self
  }

  pub fn com_adobe_granite_ui_clientlibs_processor_gcc(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_granite_ui_clientlibs_processor_gcc.as_ref()
  }

  pub fn reset_com_adobe_granite_ui_clientlibs_processor_gcc(&mut self) {
    self.com_adobe_granite_ui_clientlibs_processor_gcc = None;
  }

  pub fn set_com_adobe_granite_webconsole_plugins(&mut self, com_adobe_granite_webconsole_plugins: ::models::ConfigNodePropertyString) {
    self.com_adobe_granite_webconsole_plugins = Some(com_adobe_granite_webconsole_plugins);
  }

  pub fn with_com_adobe_granite_webconsole_plugins(mut self, com_adobe_granite_webconsole_plugins: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_granite_webconsole_plugins = Some(com_adobe_granite_webconsole_plugins);
    self
  }

  pub fn com_adobe_granite_webconsole_plugins(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_granite_webconsole_plugins.as_ref()
  }

  pub fn reset_com_adobe_granite_webconsole_plugins(&mut self) {
    self.com_adobe_granite_webconsole_plugins = None;
  }

  pub fn set_com_adobe_granite_workflow_console(&mut self, com_adobe_granite_workflow_console: ::models::ConfigNodePropertyString) {
    self.com_adobe_granite_workflow_console = Some(com_adobe_granite_workflow_console);
  }

  pub fn with_com_adobe_granite_workflow_console(mut self, com_adobe_granite_workflow_console: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_granite_workflow_console = Some(com_adobe_granite_workflow_console);
    self
  }

  pub fn com_adobe_granite_workflow_console(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_granite_workflow_console.as_ref()
  }

  pub fn reset_com_adobe_granite_workflow_console(&mut self) {
    self.com_adobe_granite_workflow_console = None;
  }

  pub fn set_com_adobe_xmp_worker_files_native_fragment_linux(&mut self, com_adobe_xmp_worker_files_native_fragment_linux: ::models::ConfigNodePropertyString) {
    self.com_adobe_xmp_worker_files_native_fragment_linux = Some(com_adobe_xmp_worker_files_native_fragment_linux);
  }

  pub fn with_com_adobe_xmp_worker_files_native_fragment_linux(mut self, com_adobe_xmp_worker_files_native_fragment_linux: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_xmp_worker_files_native_fragment_linux = Some(com_adobe_xmp_worker_files_native_fragment_linux);
    self
  }

  pub fn com_adobe_xmp_worker_files_native_fragment_linux(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_xmp_worker_files_native_fragment_linux.as_ref()
  }

  pub fn reset_com_adobe_xmp_worker_files_native_fragment_linux(&mut self) {
    self.com_adobe_xmp_worker_files_native_fragment_linux = None;
  }

  pub fn set_com_adobe_xmp_worker_files_native_fragment_macosx(&mut self, com_adobe_xmp_worker_files_native_fragment_macosx: ::models::ConfigNodePropertyString) {
    self.com_adobe_xmp_worker_files_native_fragment_macosx = Some(com_adobe_xmp_worker_files_native_fragment_macosx);
  }

  pub fn with_com_adobe_xmp_worker_files_native_fragment_macosx(mut self, com_adobe_xmp_worker_files_native_fragment_macosx: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_xmp_worker_files_native_fragment_macosx = Some(com_adobe_xmp_worker_files_native_fragment_macosx);
    self
  }

  pub fn com_adobe_xmp_worker_files_native_fragment_macosx(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_xmp_worker_files_native_fragment_macosx.as_ref()
  }

  pub fn reset_com_adobe_xmp_worker_files_native_fragment_macosx(&mut self) {
    self.com_adobe_xmp_worker_files_native_fragment_macosx = None;
  }

  pub fn set_com_adobe_xmp_worker_files_native_fragment_win(&mut self, com_adobe_xmp_worker_files_native_fragment_win: ::models::ConfigNodePropertyString) {
    self.com_adobe_xmp_worker_files_native_fragment_win = Some(com_adobe_xmp_worker_files_native_fragment_win);
  }

  pub fn with_com_adobe_xmp_worker_files_native_fragment_win(mut self, com_adobe_xmp_worker_files_native_fragment_win: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_adobe_xmp_worker_files_native_fragment_win = Some(com_adobe_xmp_worker_files_native_fragment_win);
    self
  }

  pub fn com_adobe_xmp_worker_files_native_fragment_win(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_xmp_worker_files_native_fragment_win.as_ref()
  }

  pub fn reset_com_adobe_xmp_worker_files_native_fragment_win(&mut self) {
    self.com_adobe_xmp_worker_files_native_fragment_win = None;
  }

  pub fn set_com_day_commons_osgi_wrapper_simple_jndi(&mut self, com_day_commons_osgi_wrapper_simple_jndi: ::models::ConfigNodePropertyString) {
    self.com_day_commons_osgi_wrapper_simple_jndi = Some(com_day_commons_osgi_wrapper_simple_jndi);
  }

  pub fn with_com_day_commons_osgi_wrapper_simple_jndi(mut self, com_day_commons_osgi_wrapper_simple_jndi: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_day_commons_osgi_wrapper_simple_jndi = Some(com_day_commons_osgi_wrapper_simple_jndi);
    self
  }

  pub fn com_day_commons_osgi_wrapper_simple_jndi(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_day_commons_osgi_wrapper_simple_jndi.as_ref()
  }

  pub fn reset_com_day_commons_osgi_wrapper_simple_jndi(&mut self) {
    self.com_day_commons_osgi_wrapper_simple_jndi = None;
  }

  pub fn set_com_day_cq_cq_authhandler(&mut self, com_day_cq_cq_authhandler: ::models::ConfigNodePropertyString) {
    self.com_day_cq_cq_authhandler = Some(com_day_cq_cq_authhandler);
  }

  pub fn with_com_day_cq_cq_authhandler(mut self, com_day_cq_cq_authhandler: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_day_cq_cq_authhandler = Some(com_day_cq_cq_authhandler);
    self
  }

  pub fn com_day_cq_cq_authhandler(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_day_cq_cq_authhandler.as_ref()
  }

  pub fn reset_com_day_cq_cq_authhandler(&mut self) {
    self.com_day_cq_cq_authhandler = None;
  }

  pub fn set_com_day_cq_cq_compat_configupdate(&mut self, com_day_cq_cq_compat_configupdate: ::models::ConfigNodePropertyString) {
    self.com_day_cq_cq_compat_configupdate = Some(com_day_cq_cq_compat_configupdate);
  }

  pub fn with_com_day_cq_cq_compat_configupdate(mut self, com_day_cq_cq_compat_configupdate: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_day_cq_cq_compat_configupdate = Some(com_day_cq_cq_compat_configupdate);
    self
  }

  pub fn com_day_cq_cq_compat_configupdate(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_day_cq_cq_compat_configupdate.as_ref()
  }

  pub fn reset_com_day_cq_cq_compat_configupdate(&mut self) {
    self.com_day_cq_cq_compat_configupdate = None;
  }

  pub fn set_com_day_cq_cq_licensebranding(&mut self, com_day_cq_cq_licensebranding: ::models::ConfigNodePropertyString) {
    self.com_day_cq_cq_licensebranding = Some(com_day_cq_cq_licensebranding);
  }

  pub fn with_com_day_cq_cq_licensebranding(mut self, com_day_cq_cq_licensebranding: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_day_cq_cq_licensebranding = Some(com_day_cq_cq_licensebranding);
    self
  }

  pub fn com_day_cq_cq_licensebranding(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_day_cq_cq_licensebranding.as_ref()
  }

  pub fn reset_com_day_cq_cq_licensebranding(&mut self) {
    self.com_day_cq_cq_licensebranding = None;
  }

  pub fn set_com_day_cq_cq_notifcation_impl(&mut self, com_day_cq_cq_notifcation_impl: ::models::ConfigNodePropertyString) {
    self.com_day_cq_cq_notifcation_impl = Some(com_day_cq_cq_notifcation_impl);
  }

  pub fn with_com_day_cq_cq_notifcation_impl(mut self, com_day_cq_cq_notifcation_impl: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_day_cq_cq_notifcation_impl = Some(com_day_cq_cq_notifcation_impl);
    self
  }

  pub fn com_day_cq_cq_notifcation_impl(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_day_cq_cq_notifcation_impl.as_ref()
  }

  pub fn reset_com_day_cq_cq_notifcation_impl(&mut self) {
    self.com_day_cq_cq_notifcation_impl = None;
  }

  pub fn set_com_day_cq_cq_replication_audit(&mut self, com_day_cq_cq_replication_audit: ::models::ConfigNodePropertyString) {
    self.com_day_cq_cq_replication_audit = Some(com_day_cq_cq_replication_audit);
  }

  pub fn with_com_day_cq_cq_replication_audit(mut self, com_day_cq_cq_replication_audit: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_day_cq_cq_replication_audit = Some(com_day_cq_cq_replication_audit);
    self
  }

  pub fn com_day_cq_cq_replication_audit(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_day_cq_cq_replication_audit.as_ref()
  }

  pub fn reset_com_day_cq_cq_replication_audit(&mut self) {
    self.com_day_cq_cq_replication_audit = None;
  }

  pub fn set_com_day_cq_cq_search_ext(&mut self, com_day_cq_cq_search_ext: ::models::ConfigNodePropertyString) {
    self.com_day_cq_cq_search_ext = Some(com_day_cq_cq_search_ext);
  }

  pub fn with_com_day_cq_cq_search_ext(mut self, com_day_cq_cq_search_ext: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_day_cq_cq_search_ext = Some(com_day_cq_cq_search_ext);
    self
  }

  pub fn com_day_cq_cq_search_ext(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_day_cq_cq_search_ext.as_ref()
  }

  pub fn reset_com_day_cq_cq_search_ext(&mut self) {
    self.com_day_cq_cq_search_ext = None;
  }

  pub fn set_com_day_cq_dam_cq_dam_annotation_print(&mut self, com_day_cq_dam_cq_dam_annotation_print: ::models::ConfigNodePropertyString) {
    self.com_day_cq_dam_cq_dam_annotation_print = Some(com_day_cq_dam_cq_dam_annotation_print);
  }

  pub fn with_com_day_cq_dam_cq_dam_annotation_print(mut self, com_day_cq_dam_cq_dam_annotation_print: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_day_cq_dam_cq_dam_annotation_print = Some(com_day_cq_dam_cq_dam_annotation_print);
    self
  }

  pub fn com_day_cq_dam_cq_dam_annotation_print(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_day_cq_dam_cq_dam_annotation_print.as_ref()
  }

  pub fn reset_com_day_cq_dam_cq_dam_annotation_print(&mut self) {
    self.com_day_cq_dam_cq_dam_annotation_print = None;
  }

  pub fn set_com_day_cq_dam_cq_dam_asset_usage(&mut self, com_day_cq_dam_cq_dam_asset_usage: ::models::ConfigNodePropertyString) {
    self.com_day_cq_dam_cq_dam_asset_usage = Some(com_day_cq_dam_cq_dam_asset_usage);
  }

  pub fn with_com_day_cq_dam_cq_dam_asset_usage(mut self, com_day_cq_dam_cq_dam_asset_usage: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_day_cq_dam_cq_dam_asset_usage = Some(com_day_cq_dam_cq_dam_asset_usage);
    self
  }

  pub fn com_day_cq_dam_cq_dam_asset_usage(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_day_cq_dam_cq_dam_asset_usage.as_ref()
  }

  pub fn reset_com_day_cq_dam_cq_dam_asset_usage(&mut self) {
    self.com_day_cq_dam_cq_dam_asset_usage = None;
  }

  pub fn set_com_day_cq_dam_cq_dam_s7dam(&mut self, com_day_cq_dam_cq_dam_s7dam: ::models::ConfigNodePropertyString) {
    self.com_day_cq_dam_cq_dam_s7dam = Some(com_day_cq_dam_cq_dam_s7dam);
  }

  pub fn with_com_day_cq_dam_cq_dam_s7dam(mut self, com_day_cq_dam_cq_dam_s7dam: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_day_cq_dam_cq_dam_s7dam = Some(com_day_cq_dam_cq_dam_s7dam);
    self
  }

  pub fn com_day_cq_dam_cq_dam_s7dam(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_day_cq_dam_cq_dam_s7dam.as_ref()
  }

  pub fn reset_com_day_cq_dam_cq_dam_s7dam(&mut self) {
    self.com_day_cq_dam_cq_dam_s7dam = None;
  }

  pub fn set_com_day_cq_dam_cq_dam_similaritysearch(&mut self, com_day_cq_dam_cq_dam_similaritysearch: ::models::ConfigNodePropertyString) {
    self.com_day_cq_dam_cq_dam_similaritysearch = Some(com_day_cq_dam_cq_dam_similaritysearch);
  }

  pub fn with_com_day_cq_dam_cq_dam_similaritysearch(mut self, com_day_cq_dam_cq_dam_similaritysearch: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_day_cq_dam_cq_dam_similaritysearch = Some(com_day_cq_dam_cq_dam_similaritysearch);
    self
  }

  pub fn com_day_cq_dam_cq_dam_similaritysearch(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_day_cq_dam_cq_dam_similaritysearch.as_ref()
  }

  pub fn reset_com_day_cq_dam_cq_dam_similaritysearch(&mut self) {
    self.com_day_cq_dam_cq_dam_similaritysearch = None;
  }

  pub fn set_com_day_cq_dam_dam_webdav_support(&mut self, com_day_cq_dam_dam_webdav_support: ::models::ConfigNodePropertyString) {
    self.com_day_cq_dam_dam_webdav_support = Some(com_day_cq_dam_dam_webdav_support);
  }

  pub fn with_com_day_cq_dam_dam_webdav_support(mut self, com_day_cq_dam_dam_webdav_support: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_day_cq_dam_dam_webdav_support = Some(com_day_cq_dam_dam_webdav_support);
    self
  }

  pub fn com_day_cq_dam_dam_webdav_support(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_day_cq_dam_dam_webdav_support.as_ref()
  }

  pub fn reset_com_day_cq_dam_dam_webdav_support(&mut self) {
    self.com_day_cq_dam_dam_webdav_support = None;
  }

  pub fn set_com_day_cq_pre_upgrade_tasks(&mut self, com_day_cq_pre_upgrade_tasks: ::models::ConfigNodePropertyString) {
    self.com_day_cq_pre_upgrade_tasks = Some(com_day_cq_pre_upgrade_tasks);
  }

  pub fn with_com_day_cq_pre_upgrade_tasks(mut self, com_day_cq_pre_upgrade_tasks: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_day_cq_pre_upgrade_tasks = Some(com_day_cq_pre_upgrade_tasks);
    self
  }

  pub fn com_day_cq_pre_upgrade_tasks(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_day_cq_pre_upgrade_tasks.as_ref()
  }

  pub fn reset_com_day_cq_pre_upgrade_tasks(&mut self) {
    self.com_day_cq_pre_upgrade_tasks = None;
  }

  pub fn set_com_day_cq_replication_extensions(&mut self, com_day_cq_replication_extensions: ::models::ConfigNodePropertyString) {
    self.com_day_cq_replication_extensions = Some(com_day_cq_replication_extensions);
  }

  pub fn with_com_day_cq_replication_extensions(mut self, com_day_cq_replication_extensions: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_day_cq_replication_extensions = Some(com_day_cq_replication_extensions);
    self
  }

  pub fn com_day_cq_replication_extensions(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_day_cq_replication_extensions.as_ref()
  }

  pub fn reset_com_day_cq_replication_extensions(&mut self) {
    self.com_day_cq_replication_extensions = None;
  }

  pub fn set_com_day_cq_wcm_cq_msm_core(&mut self, com_day_cq_wcm_cq_msm_core: ::models::ConfigNodePropertyString) {
    self.com_day_cq_wcm_cq_msm_core = Some(com_day_cq_wcm_cq_msm_core);
  }

  pub fn with_com_day_cq_wcm_cq_msm_core(mut self, com_day_cq_wcm_cq_msm_core: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_day_cq_wcm_cq_msm_core = Some(com_day_cq_wcm_cq_msm_core);
    self
  }

  pub fn com_day_cq_wcm_cq_msm_core(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_day_cq_wcm_cq_msm_core.as_ref()
  }

  pub fn reset_com_day_cq_wcm_cq_msm_core(&mut self) {
    self.com_day_cq_wcm_cq_msm_core = None;
  }

  pub fn set_com_day_cq_wcm_cq_wcm_translation(&mut self, com_day_cq_wcm_cq_wcm_translation: ::models::ConfigNodePropertyString) {
    self.com_day_cq_wcm_cq_wcm_translation = Some(com_day_cq_wcm_cq_wcm_translation);
  }

  pub fn with_com_day_cq_wcm_cq_wcm_translation(mut self, com_day_cq_wcm_cq_wcm_translation: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.com_day_cq_wcm_cq_wcm_translation = Some(com_day_cq_wcm_cq_wcm_translation);
    self
  }

  pub fn com_day_cq_wcm_cq_wcm_translation(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_day_cq_wcm_cq_wcm_translation.as_ref()
  }

  pub fn reset_com_day_cq_wcm_cq_wcm_translation(&mut self) {
    self.com_day_cq_wcm_cq_wcm_translation = None;
  }

  pub fn set_day_commons_jrawio(&mut self, day_commons_jrawio: ::models::ConfigNodePropertyString) {
    self.day_commons_jrawio = Some(day_commons_jrawio);
  }

  pub fn with_day_commons_jrawio(mut self, day_commons_jrawio: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.day_commons_jrawio = Some(day_commons_jrawio);
    self
  }

  pub fn day_commons_jrawio(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.day_commons_jrawio.as_ref()
  }

  pub fn reset_day_commons_jrawio(&mut self) {
    self.day_commons_jrawio = None;
  }

  pub fn set_org_apache_aries_jmx_whiteboard(&mut self, org_apache_aries_jmx_whiteboard: ::models::ConfigNodePropertyString) {
    self.org_apache_aries_jmx_whiteboard = Some(org_apache_aries_jmx_whiteboard);
  }

  pub fn with_org_apache_aries_jmx_whiteboard(mut self, org_apache_aries_jmx_whiteboard: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.org_apache_aries_jmx_whiteboard = Some(org_apache_aries_jmx_whiteboard);
    self
  }

  pub fn org_apache_aries_jmx_whiteboard(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.org_apache_aries_jmx_whiteboard.as_ref()
  }

  pub fn reset_org_apache_aries_jmx_whiteboard(&mut self) {
    self.org_apache_aries_jmx_whiteboard = None;
  }

  pub fn set_org_apache_felix_http_sslfilter(&mut self, org_apache_felix_http_sslfilter: ::models::ConfigNodePropertyString) {
    self.org_apache_felix_http_sslfilter = Some(org_apache_felix_http_sslfilter);
  }

  pub fn with_org_apache_felix_http_sslfilter(mut self, org_apache_felix_http_sslfilter: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.org_apache_felix_http_sslfilter = Some(org_apache_felix_http_sslfilter);
    self
  }

  pub fn org_apache_felix_http_sslfilter(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.org_apache_felix_http_sslfilter.as_ref()
  }

  pub fn reset_org_apache_felix_http_sslfilter(&mut self) {
    self.org_apache_felix_http_sslfilter = None;
  }

  pub fn set_org_apache_felix_org_apache_felix_threaddump(&mut self, org_apache_felix_org_apache_felix_threaddump: ::models::ConfigNodePropertyString) {
    self.org_apache_felix_org_apache_felix_threaddump = Some(org_apache_felix_org_apache_felix_threaddump);
  }

  pub fn with_org_apache_felix_org_apache_felix_threaddump(mut self, org_apache_felix_org_apache_felix_threaddump: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.org_apache_felix_org_apache_felix_threaddump = Some(org_apache_felix_org_apache_felix_threaddump);
    self
  }

  pub fn org_apache_felix_org_apache_felix_threaddump(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.org_apache_felix_org_apache_felix_threaddump.as_ref()
  }

  pub fn reset_org_apache_felix_org_apache_felix_threaddump(&mut self) {
    self.org_apache_felix_org_apache_felix_threaddump = None;
  }

  pub fn set_org_apache_felix_webconsole_plugins_ds(&mut self, org_apache_felix_webconsole_plugins_ds: ::models::ConfigNodePropertyString) {
    self.org_apache_felix_webconsole_plugins_ds = Some(org_apache_felix_webconsole_plugins_ds);
  }

  pub fn with_org_apache_felix_webconsole_plugins_ds(mut self, org_apache_felix_webconsole_plugins_ds: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.org_apache_felix_webconsole_plugins_ds = Some(org_apache_felix_webconsole_plugins_ds);
    self
  }

  pub fn org_apache_felix_webconsole_plugins_ds(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.org_apache_felix_webconsole_plugins_ds.as_ref()
  }

  pub fn reset_org_apache_felix_webconsole_plugins_ds(&mut self) {
    self.org_apache_felix_webconsole_plugins_ds = None;
  }

  pub fn set_org_apache_felix_webconsole_plugins_event(&mut self, org_apache_felix_webconsole_plugins_event: ::models::ConfigNodePropertyString) {
    self.org_apache_felix_webconsole_plugins_event = Some(org_apache_felix_webconsole_plugins_event);
  }

  pub fn with_org_apache_felix_webconsole_plugins_event(mut self, org_apache_felix_webconsole_plugins_event: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.org_apache_felix_webconsole_plugins_event = Some(org_apache_felix_webconsole_plugins_event);
    self
  }

  pub fn org_apache_felix_webconsole_plugins_event(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.org_apache_felix_webconsole_plugins_event.as_ref()
  }

  pub fn reset_org_apache_felix_webconsole_plugins_event(&mut self) {
    self.org_apache_felix_webconsole_plugins_event = None;
  }

  pub fn set_org_apache_felix_webconsole_plugins_memoryusage(&mut self, org_apache_felix_webconsole_plugins_memoryusage: ::models::ConfigNodePropertyString) {
    self.org_apache_felix_webconsole_plugins_memoryusage = Some(org_apache_felix_webconsole_plugins_memoryusage);
  }

  pub fn with_org_apache_felix_webconsole_plugins_memoryusage(mut self, org_apache_felix_webconsole_plugins_memoryusage: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.org_apache_felix_webconsole_plugins_memoryusage = Some(org_apache_felix_webconsole_plugins_memoryusage);
    self
  }

  pub fn org_apache_felix_webconsole_plugins_memoryusage(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.org_apache_felix_webconsole_plugins_memoryusage.as_ref()
  }

  pub fn reset_org_apache_felix_webconsole_plugins_memoryusage(&mut self) {
    self.org_apache_felix_webconsole_plugins_memoryusage = None;
  }

  pub fn set_org_apache_felix_webconsole_plugins_packageadmin(&mut self, org_apache_felix_webconsole_plugins_packageadmin: ::models::ConfigNodePropertyString) {
    self.org_apache_felix_webconsole_plugins_packageadmin = Some(org_apache_felix_webconsole_plugins_packageadmin);
  }

  pub fn with_org_apache_felix_webconsole_plugins_packageadmin(mut self, org_apache_felix_webconsole_plugins_packageadmin: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.org_apache_felix_webconsole_plugins_packageadmin = Some(org_apache_felix_webconsole_plugins_packageadmin);
    self
  }

  pub fn org_apache_felix_webconsole_plugins_packageadmin(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.org_apache_felix_webconsole_plugins_packageadmin.as_ref()
  }

  pub fn reset_org_apache_felix_webconsole_plugins_packageadmin(&mut self) {
    self.org_apache_felix_webconsole_plugins_packageadmin = None;
  }

  pub fn set_org_apache_jackrabbit_oak_auth_ldap(&mut self, org_apache_jackrabbit_oak_auth_ldap: ::models::ConfigNodePropertyString) {
    self.org_apache_jackrabbit_oak_auth_ldap = Some(org_apache_jackrabbit_oak_auth_ldap);
  }

  pub fn with_org_apache_jackrabbit_oak_auth_ldap(mut self, org_apache_jackrabbit_oak_auth_ldap: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.org_apache_jackrabbit_oak_auth_ldap = Some(org_apache_jackrabbit_oak_auth_ldap);
    self
  }

  pub fn org_apache_jackrabbit_oak_auth_ldap(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.org_apache_jackrabbit_oak_auth_ldap.as_ref()
  }

  pub fn reset_org_apache_jackrabbit_oak_auth_ldap(&mut self) {
    self.org_apache_jackrabbit_oak_auth_ldap = None;
  }

  pub fn set_org_apache_jackrabbit_oak_segment_tar(&mut self, org_apache_jackrabbit_oak_segment_tar: ::models::ConfigNodePropertyString) {
    self.org_apache_jackrabbit_oak_segment_tar = Some(org_apache_jackrabbit_oak_segment_tar);
  }

  pub fn with_org_apache_jackrabbit_oak_segment_tar(mut self, org_apache_jackrabbit_oak_segment_tar: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.org_apache_jackrabbit_oak_segment_tar = Some(org_apache_jackrabbit_oak_segment_tar);
    self
  }

  pub fn org_apache_jackrabbit_oak_segment_tar(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.org_apache_jackrabbit_oak_segment_tar.as_ref()
  }

  pub fn reset_org_apache_jackrabbit_oak_segment_tar(&mut self) {
    self.org_apache_jackrabbit_oak_segment_tar = None;
  }

  pub fn set_org_apache_jackrabbit_oak_solr_osgi(&mut self, org_apache_jackrabbit_oak_solr_osgi: ::models::ConfigNodePropertyString) {
    self.org_apache_jackrabbit_oak_solr_osgi = Some(org_apache_jackrabbit_oak_solr_osgi);
  }

  pub fn with_org_apache_jackrabbit_oak_solr_osgi(mut self, org_apache_jackrabbit_oak_solr_osgi: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.org_apache_jackrabbit_oak_solr_osgi = Some(org_apache_jackrabbit_oak_solr_osgi);
    self
  }

  pub fn org_apache_jackrabbit_oak_solr_osgi(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.org_apache_jackrabbit_oak_solr_osgi.as_ref()
  }

  pub fn reset_org_apache_jackrabbit_oak_solr_osgi(&mut self) {
    self.org_apache_jackrabbit_oak_solr_osgi = None;
  }

  pub fn set_org_apache_sling_bundleresource_impl(&mut self, org_apache_sling_bundleresource_impl: ::models::ConfigNodePropertyString) {
    self.org_apache_sling_bundleresource_impl = Some(org_apache_sling_bundleresource_impl);
  }

  pub fn with_org_apache_sling_bundleresource_impl(mut self, org_apache_sling_bundleresource_impl: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.org_apache_sling_bundleresource_impl = Some(org_apache_sling_bundleresource_impl);
    self
  }

  pub fn org_apache_sling_bundleresource_impl(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.org_apache_sling_bundleresource_impl.as_ref()
  }

  pub fn reset_org_apache_sling_bundleresource_impl(&mut self) {
    self.org_apache_sling_bundleresource_impl = None;
  }

  pub fn set_org_apache_sling_commons_fsclassloader(&mut self, org_apache_sling_commons_fsclassloader: ::models::ConfigNodePropertyString) {
    self.org_apache_sling_commons_fsclassloader = Some(org_apache_sling_commons_fsclassloader);
  }

  pub fn with_org_apache_sling_commons_fsclassloader(mut self, org_apache_sling_commons_fsclassloader: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.org_apache_sling_commons_fsclassloader = Some(org_apache_sling_commons_fsclassloader);
    self
  }

  pub fn org_apache_sling_commons_fsclassloader(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.org_apache_sling_commons_fsclassloader.as_ref()
  }

  pub fn reset_org_apache_sling_commons_fsclassloader(&mut self) {
    self.org_apache_sling_commons_fsclassloader = None;
  }

  pub fn set_org_apache_sling_commons_log_webconsole(&mut self, org_apache_sling_commons_log_webconsole: ::models::ConfigNodePropertyString) {
    self.org_apache_sling_commons_log_webconsole = Some(org_apache_sling_commons_log_webconsole);
  }

  pub fn with_org_apache_sling_commons_log_webconsole(mut self, org_apache_sling_commons_log_webconsole: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.org_apache_sling_commons_log_webconsole = Some(org_apache_sling_commons_log_webconsole);
    self
  }

  pub fn org_apache_sling_commons_log_webconsole(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.org_apache_sling_commons_log_webconsole.as_ref()
  }

  pub fn reset_org_apache_sling_commons_log_webconsole(&mut self) {
    self.org_apache_sling_commons_log_webconsole = None;
  }

  pub fn set_org_apache_sling_datasource(&mut self, org_apache_sling_datasource: ::models::ConfigNodePropertyString) {
    self.org_apache_sling_datasource = Some(org_apache_sling_datasource);
  }

  pub fn with_org_apache_sling_datasource(mut self, org_apache_sling_datasource: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.org_apache_sling_datasource = Some(org_apache_sling_datasource);
    self
  }

  pub fn org_apache_sling_datasource(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.org_apache_sling_datasource.as_ref()
  }

  pub fn reset_org_apache_sling_datasource(&mut self) {
    self.org_apache_sling_datasource = None;
  }

  pub fn set_org_apache_sling_discovery_base(&mut self, org_apache_sling_discovery_base: ::models::ConfigNodePropertyString) {
    self.org_apache_sling_discovery_base = Some(org_apache_sling_discovery_base);
  }

  pub fn with_org_apache_sling_discovery_base(mut self, org_apache_sling_discovery_base: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.org_apache_sling_discovery_base = Some(org_apache_sling_discovery_base);
    self
  }

  pub fn org_apache_sling_discovery_base(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.org_apache_sling_discovery_base.as_ref()
  }

  pub fn reset_org_apache_sling_discovery_base(&mut self) {
    self.org_apache_sling_discovery_base = None;
  }

  pub fn set_org_apache_sling_discovery_oak(&mut self, org_apache_sling_discovery_oak: ::models::ConfigNodePropertyString) {
    self.org_apache_sling_discovery_oak = Some(org_apache_sling_discovery_oak);
  }

  pub fn with_org_apache_sling_discovery_oak(mut self, org_apache_sling_discovery_oak: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.org_apache_sling_discovery_oak = Some(org_apache_sling_discovery_oak);
    self
  }

  pub fn org_apache_sling_discovery_oak(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.org_apache_sling_discovery_oak.as_ref()
  }

  pub fn reset_org_apache_sling_discovery_oak(&mut self) {
    self.org_apache_sling_discovery_oak = None;
  }

  pub fn set_org_apache_sling_discovery_support(&mut self, org_apache_sling_discovery_support: ::models::ConfigNodePropertyString) {
    self.org_apache_sling_discovery_support = Some(org_apache_sling_discovery_support);
  }

  pub fn with_org_apache_sling_discovery_support(mut self, org_apache_sling_discovery_support: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.org_apache_sling_discovery_support = Some(org_apache_sling_discovery_support);
    self
  }

  pub fn org_apache_sling_discovery_support(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.org_apache_sling_discovery_support.as_ref()
  }

  pub fn reset_org_apache_sling_discovery_support(&mut self) {
    self.org_apache_sling_discovery_support = None;
  }

  pub fn set_org_apache_sling_distribution_api(&mut self, org_apache_sling_distribution_api: ::models::ConfigNodePropertyString) {
    self.org_apache_sling_distribution_api = Some(org_apache_sling_distribution_api);
  }

  pub fn with_org_apache_sling_distribution_api(mut self, org_apache_sling_distribution_api: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.org_apache_sling_distribution_api = Some(org_apache_sling_distribution_api);
    self
  }

  pub fn org_apache_sling_distribution_api(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.org_apache_sling_distribution_api.as_ref()
  }

  pub fn reset_org_apache_sling_distribution_api(&mut self) {
    self.org_apache_sling_distribution_api = None;
  }

  pub fn set_org_apache_sling_distribution_core(&mut self, org_apache_sling_distribution_core: ::models::ConfigNodePropertyString) {
    self.org_apache_sling_distribution_core = Some(org_apache_sling_distribution_core);
  }

  pub fn with_org_apache_sling_distribution_core(mut self, org_apache_sling_distribution_core: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.org_apache_sling_distribution_core = Some(org_apache_sling_distribution_core);
    self
  }

  pub fn org_apache_sling_distribution_core(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.org_apache_sling_distribution_core.as_ref()
  }

  pub fn reset_org_apache_sling_distribution_core(&mut self) {
    self.org_apache_sling_distribution_core = None;
  }

  pub fn set_org_apache_sling_extensions_webconsolesecurityprovider(&mut self, org_apache_sling_extensions_webconsolesecurityprovider: ::models::ConfigNodePropertyString) {
    self.org_apache_sling_extensions_webconsolesecurityprovider = Some(org_apache_sling_extensions_webconsolesecurityprovider);
  }

  pub fn with_org_apache_sling_extensions_webconsolesecurityprovider(mut self, org_apache_sling_extensions_webconsolesecurityprovider: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.org_apache_sling_extensions_webconsolesecurityprovider = Some(org_apache_sling_extensions_webconsolesecurityprovider);
    self
  }

  pub fn org_apache_sling_extensions_webconsolesecurityprovider(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.org_apache_sling_extensions_webconsolesecurityprovider.as_ref()
  }

  pub fn reset_org_apache_sling_extensions_webconsolesecurityprovider(&mut self) {
    self.org_apache_sling_extensions_webconsolesecurityprovider = None;
  }

  pub fn set_org_apache_sling_hc_webconsole(&mut self, org_apache_sling_hc_webconsole: ::models::ConfigNodePropertyString) {
    self.org_apache_sling_hc_webconsole = Some(org_apache_sling_hc_webconsole);
  }

  pub fn with_org_apache_sling_hc_webconsole(mut self, org_apache_sling_hc_webconsole: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.org_apache_sling_hc_webconsole = Some(org_apache_sling_hc_webconsole);
    self
  }

  pub fn org_apache_sling_hc_webconsole(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.org_apache_sling_hc_webconsole.as_ref()
  }

  pub fn reset_org_apache_sling_hc_webconsole(&mut self) {
    self.org_apache_sling_hc_webconsole = None;
  }

  pub fn set_org_apache_sling_installer_console(&mut self, org_apache_sling_installer_console: ::models::ConfigNodePropertyString) {
    self.org_apache_sling_installer_console = Some(org_apache_sling_installer_console);
  }

  pub fn with_org_apache_sling_installer_console(mut self, org_apache_sling_installer_console: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.org_apache_sling_installer_console = Some(org_apache_sling_installer_console);
    self
  }

  pub fn org_apache_sling_installer_console(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.org_apache_sling_installer_console.as_ref()
  }

  pub fn reset_org_apache_sling_installer_console(&mut self) {
    self.org_apache_sling_installer_console = None;
  }

  pub fn set_org_apache_sling_installer_provider_file(&mut self, org_apache_sling_installer_provider_file: ::models::ConfigNodePropertyString) {
    self.org_apache_sling_installer_provider_file = Some(org_apache_sling_installer_provider_file);
  }

  pub fn with_org_apache_sling_installer_provider_file(mut self, org_apache_sling_installer_provider_file: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.org_apache_sling_installer_provider_file = Some(org_apache_sling_installer_provider_file);
    self
  }

  pub fn org_apache_sling_installer_provider_file(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.org_apache_sling_installer_provider_file.as_ref()
  }

  pub fn reset_org_apache_sling_installer_provider_file(&mut self) {
    self.org_apache_sling_installer_provider_file = None;
  }

  pub fn set_org_apache_sling_installer_provider_jcr(&mut self, org_apache_sling_installer_provider_jcr: ::models::ConfigNodePropertyString) {
    self.org_apache_sling_installer_provider_jcr = Some(org_apache_sling_installer_provider_jcr);
  }

  pub fn with_org_apache_sling_installer_provider_jcr(mut self, org_apache_sling_installer_provider_jcr: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.org_apache_sling_installer_provider_jcr = Some(org_apache_sling_installer_provider_jcr);
    self
  }

  pub fn org_apache_sling_installer_provider_jcr(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.org_apache_sling_installer_provider_jcr.as_ref()
  }

  pub fn reset_org_apache_sling_installer_provider_jcr(&mut self) {
    self.org_apache_sling_installer_provider_jcr = None;
  }

  pub fn set_org_apache_sling_jcr_davex(&mut self, org_apache_sling_jcr_davex: ::models::ConfigNodePropertyString) {
    self.org_apache_sling_jcr_davex = Some(org_apache_sling_jcr_davex);
  }

  pub fn with_org_apache_sling_jcr_davex(mut self, org_apache_sling_jcr_davex: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.org_apache_sling_jcr_davex = Some(org_apache_sling_jcr_davex);
    self
  }

  pub fn org_apache_sling_jcr_davex(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.org_apache_sling_jcr_davex.as_ref()
  }

  pub fn reset_org_apache_sling_jcr_davex(&mut self) {
    self.org_apache_sling_jcr_davex = None;
  }

  pub fn set_org_apache_sling_jcr_resourcesecurity(&mut self, org_apache_sling_jcr_resourcesecurity: ::models::ConfigNodePropertyString) {
    self.org_apache_sling_jcr_resourcesecurity = Some(org_apache_sling_jcr_resourcesecurity);
  }

  pub fn with_org_apache_sling_jcr_resourcesecurity(mut self, org_apache_sling_jcr_resourcesecurity: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.org_apache_sling_jcr_resourcesecurity = Some(org_apache_sling_jcr_resourcesecurity);
    self
  }

  pub fn org_apache_sling_jcr_resourcesecurity(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.org_apache_sling_jcr_resourcesecurity.as_ref()
  }

  pub fn reset_org_apache_sling_jcr_resourcesecurity(&mut self) {
    self.org_apache_sling_jcr_resourcesecurity = None;
  }

  pub fn set_org_apache_sling_jmx_provider(&mut self, org_apache_sling_jmx_provider: ::models::ConfigNodePropertyString) {
    self.org_apache_sling_jmx_provider = Some(org_apache_sling_jmx_provider);
  }

  pub fn with_org_apache_sling_jmx_provider(mut self, org_apache_sling_jmx_provider: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.org_apache_sling_jmx_provider = Some(org_apache_sling_jmx_provider);
    self
  }

  pub fn org_apache_sling_jmx_provider(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.org_apache_sling_jmx_provider.as_ref()
  }

  pub fn reset_org_apache_sling_jmx_provider(&mut self) {
    self.org_apache_sling_jmx_provider = None;
  }

  pub fn set_org_apache_sling_launchpad_installer(&mut self, org_apache_sling_launchpad_installer: ::models::ConfigNodePropertyString) {
    self.org_apache_sling_launchpad_installer = Some(org_apache_sling_launchpad_installer);
  }

  pub fn with_org_apache_sling_launchpad_installer(mut self, org_apache_sling_launchpad_installer: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.org_apache_sling_launchpad_installer = Some(org_apache_sling_launchpad_installer);
    self
  }

  pub fn org_apache_sling_launchpad_installer(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.org_apache_sling_launchpad_installer.as_ref()
  }

  pub fn reset_org_apache_sling_launchpad_installer(&mut self) {
    self.org_apache_sling_launchpad_installer = None;
  }

  pub fn set_org_apache_sling_models_impl(&mut self, org_apache_sling_models_impl: ::models::ConfigNodePropertyString) {
    self.org_apache_sling_models_impl = Some(org_apache_sling_models_impl);
  }

  pub fn with_org_apache_sling_models_impl(mut self, org_apache_sling_models_impl: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.org_apache_sling_models_impl = Some(org_apache_sling_models_impl);
    self
  }

  pub fn org_apache_sling_models_impl(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.org_apache_sling_models_impl.as_ref()
  }

  pub fn reset_org_apache_sling_models_impl(&mut self) {
    self.org_apache_sling_models_impl = None;
  }

  pub fn set_org_apache_sling_repoinit_parser(&mut self, org_apache_sling_repoinit_parser: ::models::ConfigNodePropertyString) {
    self.org_apache_sling_repoinit_parser = Some(org_apache_sling_repoinit_parser);
  }

  pub fn with_org_apache_sling_repoinit_parser(mut self, org_apache_sling_repoinit_parser: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.org_apache_sling_repoinit_parser = Some(org_apache_sling_repoinit_parser);
    self
  }

  pub fn org_apache_sling_repoinit_parser(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.org_apache_sling_repoinit_parser.as_ref()
  }

  pub fn reset_org_apache_sling_repoinit_parser(&mut self) {
    self.org_apache_sling_repoinit_parser = None;
  }

  pub fn set_org_apache_sling_resource_inventory(&mut self, org_apache_sling_resource_inventory: ::models::ConfigNodePropertyString) {
    self.org_apache_sling_resource_inventory = Some(org_apache_sling_resource_inventory);
  }

  pub fn with_org_apache_sling_resource_inventory(mut self, org_apache_sling_resource_inventory: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.org_apache_sling_resource_inventory = Some(org_apache_sling_resource_inventory);
    self
  }

  pub fn org_apache_sling_resource_inventory(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.org_apache_sling_resource_inventory.as_ref()
  }

  pub fn reset_org_apache_sling_resource_inventory(&mut self) {
    self.org_apache_sling_resource_inventory = None;
  }

  pub fn set_org_apache_sling_resourceresolver(&mut self, org_apache_sling_resourceresolver: ::models::ConfigNodePropertyString) {
    self.org_apache_sling_resourceresolver = Some(org_apache_sling_resourceresolver);
  }

  pub fn with_org_apache_sling_resourceresolver(mut self, org_apache_sling_resourceresolver: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.org_apache_sling_resourceresolver = Some(org_apache_sling_resourceresolver);
    self
  }

  pub fn org_apache_sling_resourceresolver(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.org_apache_sling_resourceresolver.as_ref()
  }

  pub fn reset_org_apache_sling_resourceresolver(&mut self) {
    self.org_apache_sling_resourceresolver = None;
  }

  pub fn set_org_apache_sling_scripting_javascript(&mut self, org_apache_sling_scripting_javascript: ::models::ConfigNodePropertyString) {
    self.org_apache_sling_scripting_javascript = Some(org_apache_sling_scripting_javascript);
  }

  pub fn with_org_apache_sling_scripting_javascript(mut self, org_apache_sling_scripting_javascript: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.org_apache_sling_scripting_javascript = Some(org_apache_sling_scripting_javascript);
    self
  }

  pub fn org_apache_sling_scripting_javascript(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.org_apache_sling_scripting_javascript.as_ref()
  }

  pub fn reset_org_apache_sling_scripting_javascript(&mut self) {
    self.org_apache_sling_scripting_javascript = None;
  }

  pub fn set_org_apache_sling_scripting_jst(&mut self, org_apache_sling_scripting_jst: ::models::ConfigNodePropertyString) {
    self.org_apache_sling_scripting_jst = Some(org_apache_sling_scripting_jst);
  }

  pub fn with_org_apache_sling_scripting_jst(mut self, org_apache_sling_scripting_jst: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.org_apache_sling_scripting_jst = Some(org_apache_sling_scripting_jst);
    self
  }

  pub fn org_apache_sling_scripting_jst(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.org_apache_sling_scripting_jst.as_ref()
  }

  pub fn reset_org_apache_sling_scripting_jst(&mut self) {
    self.org_apache_sling_scripting_jst = None;
  }

  pub fn set_org_apache_sling_scripting_sightly_js_provider(&mut self, org_apache_sling_scripting_sightly_js_provider: ::models::ConfigNodePropertyString) {
    self.org_apache_sling_scripting_sightly_js_provider = Some(org_apache_sling_scripting_sightly_js_provider);
  }

  pub fn with_org_apache_sling_scripting_sightly_js_provider(mut self, org_apache_sling_scripting_sightly_js_provider: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.org_apache_sling_scripting_sightly_js_provider = Some(org_apache_sling_scripting_sightly_js_provider);
    self
  }

  pub fn org_apache_sling_scripting_sightly_js_provider(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.org_apache_sling_scripting_sightly_js_provider.as_ref()
  }

  pub fn reset_org_apache_sling_scripting_sightly_js_provider(&mut self) {
    self.org_apache_sling_scripting_sightly_js_provider = None;
  }

  pub fn set_org_apache_sling_scripting_sightly_models_provider(&mut self, org_apache_sling_scripting_sightly_models_provider: ::models::ConfigNodePropertyString) {
    self.org_apache_sling_scripting_sightly_models_provider = Some(org_apache_sling_scripting_sightly_models_provider);
  }

  pub fn with_org_apache_sling_scripting_sightly_models_provider(mut self, org_apache_sling_scripting_sightly_models_provider: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.org_apache_sling_scripting_sightly_models_provider = Some(org_apache_sling_scripting_sightly_models_provider);
    self
  }

  pub fn org_apache_sling_scripting_sightly_models_provider(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.org_apache_sling_scripting_sightly_models_provider.as_ref()
  }

  pub fn reset_org_apache_sling_scripting_sightly_models_provider(&mut self) {
    self.org_apache_sling_scripting_sightly_models_provider = None;
  }

  pub fn set_org_apache_sling_security(&mut self, org_apache_sling_security: ::models::ConfigNodePropertyString) {
    self.org_apache_sling_security = Some(org_apache_sling_security);
  }

  pub fn with_org_apache_sling_security(mut self, org_apache_sling_security: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.org_apache_sling_security = Some(org_apache_sling_security);
    self
  }

  pub fn org_apache_sling_security(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.org_apache_sling_security.as_ref()
  }

  pub fn reset_org_apache_sling_security(&mut self) {
    self.org_apache_sling_security = None;
  }

  pub fn set_org_apache_sling_servlets_compat(&mut self, org_apache_sling_servlets_compat: ::models::ConfigNodePropertyString) {
    self.org_apache_sling_servlets_compat = Some(org_apache_sling_servlets_compat);
  }

  pub fn with_org_apache_sling_servlets_compat(mut self, org_apache_sling_servlets_compat: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.org_apache_sling_servlets_compat = Some(org_apache_sling_servlets_compat);
    self
  }

  pub fn org_apache_sling_servlets_compat(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.org_apache_sling_servlets_compat.as_ref()
  }

  pub fn reset_org_apache_sling_servlets_compat(&mut self) {
    self.org_apache_sling_servlets_compat = None;
  }

  pub fn set_org_apache_sling_servlets_get(&mut self, org_apache_sling_servlets_get: ::models::ConfigNodePropertyString) {
    self.org_apache_sling_servlets_get = Some(org_apache_sling_servlets_get);
  }

  pub fn with_org_apache_sling_servlets_get(mut self, org_apache_sling_servlets_get: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.org_apache_sling_servlets_get = Some(org_apache_sling_servlets_get);
    self
  }

  pub fn org_apache_sling_servlets_get(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.org_apache_sling_servlets_get.as_ref()
  }

  pub fn reset_org_apache_sling_servlets_get(&mut self) {
    self.org_apache_sling_servlets_get = None;
  }

  pub fn set_org_apache_sling_startupfilter_disabler(&mut self, org_apache_sling_startupfilter_disabler: ::models::ConfigNodePropertyString) {
    self.org_apache_sling_startupfilter_disabler = Some(org_apache_sling_startupfilter_disabler);
  }

  pub fn with_org_apache_sling_startupfilter_disabler(mut self, org_apache_sling_startupfilter_disabler: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.org_apache_sling_startupfilter_disabler = Some(org_apache_sling_startupfilter_disabler);
    self
  }

  pub fn org_apache_sling_startupfilter_disabler(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.org_apache_sling_startupfilter_disabler.as_ref()
  }

  pub fn reset_org_apache_sling_startupfilter_disabler(&mut self) {
    self.org_apache_sling_startupfilter_disabler = None;
  }

  pub fn set_org_apache_sling_tracer(&mut self, org_apache_sling_tracer: ::models::ConfigNodePropertyString) {
    self.org_apache_sling_tracer = Some(org_apache_sling_tracer);
  }

  pub fn with_org_apache_sling_tracer(mut self, org_apache_sling_tracer: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.org_apache_sling_tracer = Some(org_apache_sling_tracer);
    self
  }

  pub fn org_apache_sling_tracer(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.org_apache_sling_tracer.as_ref()
  }

  pub fn reset_org_apache_sling_tracer(&mut self) {
    self.org_apache_sling_tracer = None;
  }

  pub fn set_we_retail_client_app_core(&mut self, we_retail_client_app_core: ::models::ConfigNodePropertyString) {
    self.we_retail_client_app_core = Some(we_retail_client_app_core);
  }

  pub fn with_we_retail_client_app_core(mut self, we_retail_client_app_core: ::models::ConfigNodePropertyString) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    self.we_retail_client_app_core = Some(we_retail_client_app_core);
    self
  }

  pub fn we_retail_client_app_core(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.we_retail_client_app_core.as_ref()
  }

  pub fn reset_we_retail_client_app_core(&mut self) {
    self.we_retail_client_app_core = None;
  }

}



