/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqContentinsightImplServletsReportingServicesProxyServleProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqContentinsightImplServletsReportingServicesProxyServleProperties::OAIComAdobeCqContentinsightImplServletsReportingServicesProxyServleProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeCqContentinsightImplServletsReportingServicesProxyServleProperties::OAIComAdobeCqContentinsightImplServletsReportingServicesProxyServleProperties() {
    init();
}

OAIComAdobeCqContentinsightImplServletsReportingServicesProxyServleProperties::~OAIComAdobeCqContentinsightImplServletsReportingServicesProxyServleProperties() {
    this->cleanup();
}

void
OAIComAdobeCqContentinsightImplServletsReportingServicesProxyServleProperties::init() {
    reportingservices_proxy_whitelist = new OAIConfigNodePropertyArray();
    m_reportingservices_proxy_whitelist_isSet = false;
}

void
OAIComAdobeCqContentinsightImplServletsReportingServicesProxyServleProperties::cleanup() {
    if(reportingservices_proxy_whitelist != nullptr) { 
        delete reportingservices_proxy_whitelist;
    }
}

OAIComAdobeCqContentinsightImplServletsReportingServicesProxyServleProperties*
OAIComAdobeCqContentinsightImplServletsReportingServicesProxyServleProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeCqContentinsightImplServletsReportingServicesProxyServleProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&reportingservices_proxy_whitelist, pJson["reportingservices.proxy.whitelist"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
}

QString
OAIComAdobeCqContentinsightImplServletsReportingServicesProxyServleProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqContentinsightImplServletsReportingServicesProxyServleProperties::asJsonObject() {
    QJsonObject obj;
    if((reportingservices_proxy_whitelist != nullptr) && (reportingservices_proxy_whitelist->isSet())){
        toJsonValue(QString("reportingservices.proxy.whitelist"), reportingservices_proxy_whitelist, obj, QString("OAIConfigNodePropertyArray"));
    }

    return obj;
}

OAIConfigNodePropertyArray*
OAIComAdobeCqContentinsightImplServletsReportingServicesProxyServleProperties::getReportingservicesProxyWhitelist() {
    return reportingservices_proxy_whitelist;
}
void
OAIComAdobeCqContentinsightImplServletsReportingServicesProxyServleProperties::setReportingservicesProxyWhitelist(OAIConfigNodePropertyArray* reportingservices_proxy_whitelist) {
    this->reportingservices_proxy_whitelist = reportingservices_proxy_whitelist;
    this->m_reportingservices_proxy_whitelist_isSet = true;
}


bool
OAIComAdobeCqContentinsightImplServletsReportingServicesProxyServleProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(reportingservices_proxy_whitelist != nullptr && reportingservices_proxy_whitelist->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

