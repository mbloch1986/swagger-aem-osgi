/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.client.apis

import org.openapitools.client.models.AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo
import org.openapitools.client.models.AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo
import org.openapitools.client.models.AnalyticsComponentQueryCacheServiceInfo
import org.openapitools.client.models.ApacheSlingHealthCheckResultHTMLSerializerInfo
import org.openapitools.client.models.ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo
import org.openapitools.client.models.ComAdobeAemTransactionCoreImplTransactionRecorderInfo
import org.openapitools.client.models.ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo
import org.openapitools.client.models.ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo
import org.openapitools.client.models.ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo
import org.openapitools.client.models.ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo
import org.openapitools.client.models.ComAdobeCqAccountApiAccountManagementServiceInfo
import org.openapitools.client.models.ComAdobeCqAccountImplAccountManagementServletInfo
import org.openapitools.client.models.ComAdobeCqAddressImplLocationLocationListServletInfo
import org.openapitools.client.models.ComAdobeCqAuditPurgeDamInfo
import org.openapitools.client.models.ComAdobeCqAuditPurgePagesInfo
import org.openapitools.client.models.ComAdobeCqAuditPurgeReplicationInfo
import org.openapitools.client.models.ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo
import org.openapitools.client.models.ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo
import org.openapitools.client.models.ComAdobeCqCdnRewriterImplCDNRewriterInfo
import org.openapitools.client.models.ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo
import org.openapitools.client.models.ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo
import org.openapitools.client.models.ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo
import org.openapitools.client.models.ComAdobeCqCommerceImplAssetStaticImageHandlerInfo
import org.openapitools.client.models.ComAdobeCqCommerceImplAssetVideoHandlerInfo
import org.openapitools.client.models.ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo
import org.openapitools.client.models.ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo
import org.openapitools.client.models.ComAdobeCqCommercePimImplPageEventListenerInfo
import org.openapitools.client.models.ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo
import org.openapitools.client.models.ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo
import org.openapitools.client.models.ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo
import org.openapitools.client.models.ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo
import org.openapitools.client.models.ComAdobeCqDamCfmImplComponentComponentConfigImplInfo
import org.openapitools.client.models.ComAdobeCqDamCfmImplConfFeatureConfigImplInfo
import org.openapitools.client.models.ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo
import org.openapitools.client.models.ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo
import org.openapitools.client.models.ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo
import org.openapitools.client.models.ComAdobeCqDamDmProcessImagePTiffManagerImplInfo
import org.openapitools.client.models.ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo
import org.openapitools.client.models.ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo
import org.openapitools.client.models.ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo
import org.openapitools.client.models.ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo
import org.openapitools.client.models.ComAdobeCqDamS7imagingImplIsImageServerComponentInfo
import org.openapitools.client.models.ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo
import org.openapitools.client.models.ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo
import org.openapitools.client.models.ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo
import org.openapitools.client.models.ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo
import org.openapitools.client.models.ComAdobeCqDeserfwImplDeserializationFirewallImplInfo
import org.openapitools.client.models.ComAdobeCqDtmImplServiceDTMWebServiceImplInfo
import org.openapitools.client.models.ComAdobeCqDtmImplServletsDTMDeployHookServletInfo
import org.openapitools.client.models.ComAdobeCqDtmReactorImplServiceWebServiceImplInfo
import org.openapitools.client.models.ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo
import org.openapitools.client.models.ComAdobeCqHcContentPackagesHealthCheckInfo
import org.openapitools.client.models.ComAdobeCqHistoryImplHistoryRequestFilterInfo
import org.openapitools.client.models.ComAdobeCqHistoryImplHistoryServiceImplInfo
import org.openapitools.client.models.ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo
import org.openapitools.client.models.ComAdobeCqProjectsImplServletProjectImageServletInfo
import org.openapitools.client.models.ComAdobeCqProjectsPurgeSchedulerInfo
import org.openapitools.client.models.ComAdobeCqScheduledExporterImplScheduledExporterImplInfo
import org.openapitools.client.models.ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo
import org.openapitools.client.models.ComAdobeCqScreensDeviceImplDeviceServiceInfo
import org.openapitools.client.models.ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo
import org.openapitools.client.models.ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo
import org.openapitools.client.models.ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo
import org.openapitools.client.models.ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo
import org.openapitools.client.models.ComAdobeCqScreensImplScreensChannelPostProcessorInfo
import org.openapitools.client.models.ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo
import org.openapitools.client.models.ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo
import org.openapitools.client.models.ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo
import org.openapitools.client.models.ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo
import org.openapitools.client.models.ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo
import org.openapitools.client.models.ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo
import org.openapitools.client.models.ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo
import org.openapitools.client.models.ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo
import org.openapitools.client.models.ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo
import org.openapitools.client.models.ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo
import org.openapitools.client.models.ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo
import org.openapitools.client.models.ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo
import org.openapitools.client.models.ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo
import org.openapitools.client.models.ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo
import org.openapitools.client.models.ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo
import org.openapitools.client.models.ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo
import org.openapitools.client.models.ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo
import org.openapitools.client.models.ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo
import org.openapitools.client.models.ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo
import org.openapitools.client.models.ComAdobeCqSocialCalendarServletsTimeZoneServletInfo
import org.openapitools.client.models.ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo
import org.openapitools.client.models.ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo
import org.openapitools.client.models.ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo
import org.openapitools.client.models.ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo
import org.openapitools.client.models.ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo
import org.openapitools.client.models.ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo
import org.openapitools.client.models.ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo
import org.openapitools.client.models.ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo
import org.openapitools.client.models.ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo
import org.openapitools.client.models.ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo
import org.openapitools.client.models.ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo
import org.openapitools.client.models.ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo
import org.openapitools.client.models.ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo
import org.openapitools.client.models.ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo
import org.openapitools.client.models.ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo
import org.openapitools.client.models.ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo
import org.openapitools.client.models.ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo
import org.openapitools.client.models.ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo
import org.openapitools.client.models.ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo
import org.openapitools.client.models.ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo
import org.openapitools.client.models.ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo
import org.openapitools.client.models.ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo
import org.openapitools.client.models.ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo
import org.openapitools.client.models.ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo
import org.openapitools.client.models.ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo
import org.openapitools.client.models.ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo
import org.openapitools.client.models.ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo
import org.openapitools.client.models.ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo
import org.openapitools.client.models.ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo
import org.openapitools.client.models.ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo
import org.openapitools.client.models.ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo
import org.openapitools.client.models.ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo
import org.openapitools.client.models.ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo
import org.openapitools.client.models.ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo
import org.openapitools.client.models.ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo
import org.openapitools.client.models.ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo
import org.openapitools.client.models.ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo
import org.openapitools.client.models.ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo
import org.openapitools.client.models.ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo
import org.openapitools.client.models.ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo
import org.openapitools.client.models.ComAdobeCqSocialGroupImplGroupServiceImplInfo
import org.openapitools.client.models.ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo
import org.openapitools.client.models.ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo
import org.openapitools.client.models.ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo
import org.openapitools.client.models.ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo
import org.openapitools.client.models.ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo
import org.openapitools.client.models.ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo
import org.openapitools.client.models.ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo
import org.openapitools.client.models.ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo
import org.openapitools.client.models.ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo
import org.openapitools.client.models.ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo
import org.openapitools.client.models.ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo
import org.openapitools.client.models.ComAdobeCqSocialNotificationsImplMentionsRouterInfo
import org.openapitools.client.models.ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo
import org.openapitools.client.models.ComAdobeCqSocialNotificationsImplNotificationsRouterInfo
import org.openapitools.client.models.ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo
import org.openapitools.client.models.ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo
import org.openapitools.client.models.ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo
import org.openapitools.client.models.ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo
import org.openapitools.client.models.ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo
import org.openapitools.client.models.ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo
import org.openapitools.client.models.ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo
import org.openapitools.client.models.ComAdobeCqSocialScoringImplScoringEventListenerInfo
import org.openapitools.client.models.ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo
import org.openapitools.client.models.ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo
import org.openapitools.client.models.ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo
import org.openapitools.client.models.ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo
import org.openapitools.client.models.ComAdobeCqSocialSrpImplSocialSolrConnectorInfo
import org.openapitools.client.models.ComAdobeCqSocialSyncImplDiffChangesObserverInfo
import org.openapitools.client.models.ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo
import org.openapitools.client.models.ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo
import org.openapitools.client.models.ComAdobeCqSocialSyncImplUserSyncListenerImplInfo
import org.openapitools.client.models.ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo
import org.openapitools.client.models.ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo
import org.openapitools.client.models.ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo
import org.openapitools.client.models.ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo
import org.openapitools.client.models.ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo
import org.openapitools.client.models.ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo
import org.openapitools.client.models.ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo
import org.openapitools.client.models.ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo
import org.openapitools.client.models.ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo
import org.openapitools.client.models.ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo
import org.openapitools.client.models.ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo
import org.openapitools.client.models.ComAdobeCqSocialUserImplTransportHttpToPublisherInfo
import org.openapitools.client.models.ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo
import org.openapitools.client.models.ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo
import org.openapitools.client.models.ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo
import org.openapitools.client.models.ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo
import org.openapitools.client.models.ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo
import org.openapitools.client.models.ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo
import org.openapitools.client.models.ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo
import org.openapitools.client.models.ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo
import org.openapitools.client.models.ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo
import org.openapitools.client.models.ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo
import org.openapitools.client.models.ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo
import org.openapitools.client.models.ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo
import org.openapitools.client.models.ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo
import org.openapitools.client.models.ComAdobeFormsCommonServiceImplDefaultDataProviderInfo
import org.openapitools.client.models.ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo
import org.openapitools.client.models.ComAdobeFormsCommonServletTempCleanUpTaskInfo
import org.openapitools.client.models.ComAdobeGraniteAcpPlatformPlatformServletInfo
import org.openapitools.client.models.ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo
import org.openapitools.client.models.ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo
import org.openapitools.client.models.ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo
import org.openapitools.client.models.ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo
import org.openapitools.client.models.ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo
import org.openapitools.client.models.ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo
import org.openapitools.client.models.ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo
import org.openapitools.client.models.ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo
import org.openapitools.client.models.ComAdobeGraniteAuthImsImplIMSProviderImplInfo
import org.openapitools.client.models.ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo
import org.openapitools.client.models.ComAdobeGraniteAuthImsInfo
import org.openapitools.client.models.ComAdobeGraniteAuthOauthAccesstokenProviderInfo
import org.openapitools.client.models.ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo
import org.openapitools.client.models.ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo
import org.openapitools.client.models.ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo
import org.openapitools.client.models.ComAdobeGraniteAuthOauthImplGithubProviderImplInfo
import org.openapitools.client.models.ComAdobeGraniteAuthOauthImplGraniteProviderInfo
import org.openapitools.client.models.ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo
import org.openapitools.client.models.ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo
import org.openapitools.client.models.ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo
import org.openapitools.client.models.ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo
import org.openapitools.client.models.ComAdobeGraniteAuthOauthProviderInfo
import org.openapitools.client.models.ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo
import org.openapitools.client.models.ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo
import org.openapitools.client.models.ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo
import org.openapitools.client.models.ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo
import org.openapitools.client.models.ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo
import org.openapitools.client.models.ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo
import org.openapitools.client.models.ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo
import org.openapitools.client.models.ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo
import org.openapitools.client.models.ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo
import org.openapitools.client.models.ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo
import org.openapitools.client.models.ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo
import org.openapitools.client.models.ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo
import org.openapitools.client.models.ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo
import org.openapitools.client.models.ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo
import org.openapitools.client.models.ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo
import org.openapitools.client.models.ComAdobeGraniteCompatrouterImplRoutingConfigInfo
import org.openapitools.client.models.ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo
import org.openapitools.client.models.ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo
import org.openapitools.client.models.ComAdobeGraniteContexthubImplContextHubImplInfo
import org.openapitools.client.models.ComAdobeGraniteCorsImplCORSPolicyImplInfo
import org.openapitools.client.models.ComAdobeGraniteCsrfImplCSRFFilterInfo
import org.openapitools.client.models.ComAdobeGraniteCsrfImplCSRFServletInfo
import org.openapitools.client.models.ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo
import org.openapitools.client.models.ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo
import org.openapitools.client.models.ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo
import org.openapitools.client.models.ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo
import org.openapitools.client.models.ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo
import org.openapitools.client.models.ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo
import org.openapitools.client.models.ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo
import org.openapitools.client.models.ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo
import org.openapitools.client.models.ComAdobeGraniteFragsImplRandomFeatureInfo
import org.openapitools.client.models.ComAdobeGraniteHttpcacheFileFileCacheStoreInfo
import org.openapitools.client.models.ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo
import org.openapitools.client.models.ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo
import org.openapitools.client.models.ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo
import org.openapitools.client.models.ComAdobeGraniteInfocollectorInfoCollectorInfo
import org.openapitools.client.models.ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo
import org.openapitools.client.models.ComAdobeGraniteLicenseImplLicenseCheckFilterInfo
import org.openapitools.client.models.ComAdobeGraniteLoggingImplLogAnalyserImplInfo
import org.openapitools.client.models.ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo
import org.openapitools.client.models.ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo
import org.openapitools.client.models.ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo
import org.openapitools.client.models.ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo
import org.openapitools.client.models.ComAdobeGraniteMonitoringImplScriptConfigImplInfo
import org.openapitools.client.models.ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo
import org.openapitools.client.models.ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo
import org.openapitools.client.models.ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo
import org.openapitools.client.models.ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo
import org.openapitools.client.models.ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo
import org.openapitools.client.models.ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo
import org.openapitools.client.models.ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo
import org.openapitools.client.models.ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo
import org.openapitools.client.models.ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo
import org.openapitools.client.models.ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo
import org.openapitools.client.models.ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo
import org.openapitools.client.models.ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo
import org.openapitools.client.models.ComAdobeGraniteOptoutImplOptOutServiceImplInfo
import org.openapitools.client.models.ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo
import org.openapitools.client.models.ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo
import org.openapitools.client.models.ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo
import org.openapitools.client.models.ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo
import org.openapitools.client.models.ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo
import org.openapitools.client.models.ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo
import org.openapitools.client.models.ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo
import org.openapitools.client.models.ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo
import org.openapitools.client.models.ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo
import org.openapitools.client.models.ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo
import org.openapitools.client.models.ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo
import org.openapitools.client.models.ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo
import org.openapitools.client.models.ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo
import org.openapitools.client.models.ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo
import org.openapitools.client.models.ComAdobeGraniteRepositoryImplCommitStatsConfigInfo
import org.openapitools.client.models.ComAdobeGraniteRepositoryServiceUserConfigurationInfo
import org.openapitools.client.models.ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo
import org.openapitools.client.models.ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo
import org.openapitools.client.models.ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo
import org.openapitools.client.models.ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo
import org.openapitools.client.models.ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo
import org.openapitools.client.models.ComAdobeGraniteRestImplServletDefaultGETServletInfo
import org.openapitools.client.models.ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo
import org.openapitools.client.models.ComAdobeGraniteSecurityUserUserPropertiesServiceInfo
import org.openapitools.client.models.ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo
import org.openapitools.client.models.ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo
import org.openapitools.client.models.ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo
import org.openapitools.client.models.ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo
import org.openapitools.client.models.ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo
import org.openapitools.client.models.ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo
import org.openapitools.client.models.ComAdobeGraniteThreaddumpThreadDumpCollectorInfo
import org.openapitools.client.models.ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo
import org.openapitools.client.models.ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo
import org.openapitools.client.models.ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo
import org.openapitools.client.models.ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo
import org.openapitools.client.models.ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo
import org.openapitools.client.models.ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo
import org.openapitools.client.models.ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo
import org.openapitools.client.models.ComAdobeGraniteWorkflowCoreJobJobHandlerInfo
import org.openapitools.client.models.ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo
import org.openapitools.client.models.ComAdobeGraniteWorkflowCorePayloadMapCacheInfo
import org.openapitools.client.models.ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo
import org.openapitools.client.models.ComAdobeGraniteWorkflowCoreWorkflowConfigInfo
import org.openapitools.client.models.ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo
import org.openapitools.client.models.ComAdobeGraniteWorkflowPurgeSchedulerInfo
import org.openapitools.client.models.ComAdobeOctopusNcommBootstrapInfo
import org.openapitools.client.models.ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo
import org.openapitools.client.models.ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo
import org.openapitools.client.models.ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo
import org.openapitools.client.models.ComDayCommonsHttpclientInfo
import org.openapitools.client.models.ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo
import org.openapitools.client.models.ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo
import org.openapitools.client.models.ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo
import org.openapitools.client.models.ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo
import org.openapitools.client.models.ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo
import org.openapitools.client.models.ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo
import org.openapitools.client.models.ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo
import org.openapitools.client.models.ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo
import org.openapitools.client.models.ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo
import org.openapitools.client.models.ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo
import org.openapitools.client.models.ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo
import org.openapitools.client.models.ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo
import org.openapitools.client.models.ComDayCqAuthImplCugCugSupportImplInfo
import org.openapitools.client.models.ComDayCqAuthImplLoginSelectorHandlerInfo
import org.openapitools.client.models.ComDayCqCommonsImplExternalizerImplInfo
import org.openapitools.client.models.ComDayCqCommonsServletsRootMappingServletInfo
import org.openapitools.client.models.ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo
import org.openapitools.client.models.ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo
import org.openapitools.client.models.ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo
import org.openapitools.client.models.ComDayCqContentsyncImplContentSyncManagerImplInfo
import org.openapitools.client.models.ComDayCqDamCommonsHandlerStandardImageHandlerInfo
import org.openapitools.client.models.ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo
import org.openapitools.client.models.ComDayCqDamCommonsUtilImplAssetCacheImplInfo
import org.openapitools.client.models.ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo
import org.openapitools.client.models.ComDayCqDamCoreImplAssetMoveListenerInfo
import org.openapitools.client.models.ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo
import org.openapitools.client.models.ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo
import org.openapitools.client.models.ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo
import org.openapitools.client.models.ComDayCqDamCoreImplDamChangeEventListenerInfo
import org.openapitools.client.models.ComDayCqDamCoreImplDamEventPurgeServiceInfo
import org.openapitools.client.models.ComDayCqDamCoreImplDamEventRecorderImplInfo
import org.openapitools.client.models.ComDayCqDamCoreImplEventDamEventAuditListenerInfo
import org.openapitools.client.models.ComDayCqDamCoreImplExpiryNotificationJobImplInfo
import org.openapitools.client.models.ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo
import org.openapitools.client.models.ComDayCqDamCoreImplGfxCommonsGfxRendererInfo
import org.openapitools.client.models.ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo
import org.openapitools.client.models.ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo
import org.openapitools.client.models.ComDayCqDamCoreImplHandlerJpegHandlerInfo
import org.openapitools.client.models.ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo
import org.openapitools.client.models.ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo
import org.openapitools.client.models.ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo
import org.openapitools.client.models.ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo
import org.openapitools.client.models.ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo
import org.openapitools.client.models.ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo
import org.openapitools.client.models.ComDayCqDamCoreImplLightboxLightboxServletInfo
import org.openapitools.client.models.ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo
import org.openapitools.client.models.ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo
import org.openapitools.client.models.ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo
import org.openapitools.client.models.ComDayCqDamCoreImplMissingMetadataNotificationJobInfo
import org.openapitools.client.models.ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo
import org.openapitools.client.models.ComDayCqDamCoreImplProcessTextExtractionProcessInfo
import org.openapitools.client.models.ComDayCqDamCoreImplRenditionMakerImplInfo
import org.openapitools.client.models.ComDayCqDamCoreImplReportsReportExportServiceInfo
import org.openapitools.client.models.ComDayCqDamCoreImplReportsReportPurgeServiceInfo
import org.openapitools.client.models.ComDayCqDamCoreImplServletAssetDownloadServletInfo
import org.openapitools.client.models.ComDayCqDamCoreImplServletAssetStatusServletInfo
import org.openapitools.client.models.ComDayCqDamCoreImplServletAssetXMPSearchServletInfo
import org.openapitools.client.models.ComDayCqDamCoreImplServletBatchMetadataServletInfo
import org.openapitools.client.models.ComDayCqDamCoreImplServletBinaryProviderServletInfo
import org.openapitools.client.models.ComDayCqDamCoreImplServletCollectionServletInfo
import org.openapitools.client.models.ComDayCqDamCoreImplServletCollectionsServletInfo
import org.openapitools.client.models.ComDayCqDamCoreImplServletCompanionServletInfo
import org.openapitools.client.models.ComDayCqDamCoreImplServletCreateAssetServletInfo
import org.openapitools.client.models.ComDayCqDamCoreImplServletDamContentDispositionFilterInfo
import org.openapitools.client.models.ComDayCqDamCoreImplServletGuidLookupFilterInfo
import org.openapitools.client.models.ComDayCqDamCoreImplServletHealthCheckServletInfo
import org.openapitools.client.models.ComDayCqDamCoreImplServletMetadataGetServletInfo
import org.openapitools.client.models.ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo
import org.openapitools.client.models.ComDayCqDamCoreImplServletResourceCollectionServletInfo
import org.openapitools.client.models.ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo
import org.openapitools.client.models.ComDayCqDamCoreImplUnzipUnzipConfigInfo
import org.openapitools.client.models.ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo
import org.openapitools.client.models.ComDayCqDamCoreProcessExtractMetadataProcessInfo
import org.openapitools.client.models.ComDayCqDamCoreProcessMetadataProcessorProcessInfo
import org.openapitools.client.models.ComDayCqDamHandlerFfmpegLocatorImplInfo
import org.openapitools.client.models.ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo
import org.openapitools.client.models.ComDayCqDamHandlerStandardPdfPdfHandlerInfo
import org.openapitools.client.models.ComDayCqDamHandlerStandardPsPostScriptHandlerInfo
import org.openapitools.client.models.ComDayCqDamHandlerStandardPsdPsdHandlerInfo
import org.openapitools.client.models.ComDayCqDamIdsImplIDSJobProcessorInfo
import org.openapitools.client.models.ComDayCqDamIdsImplIDSPoolManagerImplInfo
import org.openapitools.client.models.ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo
import org.openapitools.client.models.ComDayCqDamInddImplServletSnippetCreationServletInfo
import org.openapitools.client.models.ComDayCqDamInddProcessINDDMediaExtractProcessInfo
import org.openapitools.client.models.ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo
import org.openapitools.client.models.ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo
import org.openapitools.client.models.ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo
import org.openapitools.client.models.ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo
import org.openapitools.client.models.ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo
import org.openapitools.client.models.ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo
import org.openapitools.client.models.ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo
import org.openapitools.client.models.ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo
import org.openapitools.client.models.ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo
import org.openapitools.client.models.ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo
import org.openapitools.client.models.ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo
import org.openapitools.client.models.ComDayCqDamScene7ImplScene7APIClientImplInfo
import org.openapitools.client.models.ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo
import org.openapitools.client.models.ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo
import org.openapitools.client.models.ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo
import org.openapitools.client.models.ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo
import org.openapitools.client.models.ComDayCqDamScene7ImplScene7UploadServiceImplInfo
import org.openapitools.client.models.ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo
import org.openapitools.client.models.ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo
import org.openapitools.client.models.ComDayCqDamVideoImplServletVideoTestServletInfo
import org.openapitools.client.models.ComDayCqExtwidgetServletsImageSpriteServletInfo
import org.openapitools.client.models.ComDayCqImageInternalFontFontHelperInfo
import org.openapitools.client.models.ComDayCqJcrclustersupportClusterStartLevelControllerInfo
import org.openapitools.client.models.ComDayCqMailerDefaultMailServiceInfo
import org.openapitools.client.models.ComDayCqMailerImplCqMailingServiceInfo
import org.openapitools.client.models.ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo
import org.openapitools.client.models.ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo
import org.openapitools.client.models.ComDayCqMcmCampaignImplIntegrationConfigImplInfo
import org.openapitools.client.models.ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo
import org.openapitools.client.models.ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo
import org.openapitools.client.models.ComDayCqMcmImplMCMConfigurationInfo
import org.openapitools.client.models.ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo
import org.openapitools.client.models.ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo
import org.openapitools.client.models.ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo
import org.openapitools.client.models.ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo
import org.openapitools.client.models.ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo
import org.openapitools.client.models.ComDayCqNotificationImplNotificationServiceImplInfo
import org.openapitools.client.models.ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo
import org.openapitools.client.models.ComDayCqPollingImporterImplManagedPollConfigImplInfo
import org.openapitools.client.models.ComDayCqPollingImporterImplManagedPollingImporterImplInfo
import org.openapitools.client.models.ComDayCqPollingImporterImplPollingImporterImplInfo
import org.openapitools.client.models.ComDayCqReplicationAuditReplicationEventListenerInfo
import org.openapitools.client.models.ComDayCqReplicationContentStaticContentBuilderInfo
import org.openapitools.client.models.ComDayCqReplicationImplAgentManagerImplInfo
import org.openapitools.client.models.ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo
import org.openapitools.client.models.ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo
import org.openapitools.client.models.ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo
import org.openapitools.client.models.ComDayCqReplicationImplReplicationReceiverImplInfo
import org.openapitools.client.models.ComDayCqReplicationImplReplicatorImplInfo
import org.openapitools.client.models.ComDayCqReplicationImplReverseReplicatorInfo
import org.openapitools.client.models.ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo
import org.openapitools.client.models.ComDayCqReplicationImplTransportHttpInfo
import org.openapitools.client.models.ComDayCqReportingImplCacheCacheImplInfo
import org.openapitools.client.models.ComDayCqReportingImplConfigServiceImplInfo
import org.openapitools.client.models.ComDayCqReportingImplRLogAnalyzerInfo
import org.openapitools.client.models.ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo
import org.openapitools.client.models.ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo
import org.openapitools.client.models.ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo
import org.openapitools.client.models.ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo
import org.openapitools.client.models.ComDayCqRewriterProcessorImplHtmlParserFactoryInfo
import org.openapitools.client.models.ComDayCqSearchImplBuilderQueryBuilderImplInfo
import org.openapitools.client.models.ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo
import org.openapitools.client.models.ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo
import org.openapitools.client.models.ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo
import org.openapitools.client.models.ComDayCqSecurityACLSetupInfo
import org.openapitools.client.models.ComDayCqStatisticsImplStatisticsServiceImplInfo
import org.openapitools.client.models.ComDayCqTaggingImplJcrTagManagerFactoryImplInfo
import org.openapitools.client.models.ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo
import org.openapitools.client.models.ComDayCqTaggingImplTagGarbageCollectorInfo
import org.openapitools.client.models.ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo
import org.openapitools.client.models.ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo
import org.openapitools.client.models.ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo
import org.openapitools.client.models.ComDayCqWcmCoreImplCommandsWCMCommandServletInfo
import org.openapitools.client.models.ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo
import org.openapitools.client.models.ComDayCqWcmCoreImplEventPageEventAuditListenerInfo
import org.openapitools.client.models.ComDayCqWcmCoreImplEventPagePostProcessorInfo
import org.openapitools.client.models.ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo
import org.openapitools.client.models.ComDayCqWcmCoreImplEventTemplatePostProcessorInfo
import org.openapitools.client.models.ComDayCqWcmCoreImplLanguageManagerImplInfo
import org.openapitools.client.models.ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo
import org.openapitools.client.models.ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo
import org.openapitools.client.models.ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo
import org.openapitools.client.models.ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo
import org.openapitools.client.models.ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo
import org.openapitools.client.models.ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo
import org.openapitools.client.models.ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo
import org.openapitools.client.models.ComDayCqWcmCoreImplServletsFindReplaceServletInfo
import org.openapitools.client.models.ComDayCqWcmCoreImplServletsReferenceSearchServletInfo
import org.openapitools.client.models.ComDayCqWcmCoreImplServletsThumbnailServletInfo
import org.openapitools.client.models.ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo
import org.openapitools.client.models.ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo
import org.openapitools.client.models.ComDayCqWcmCoreImplVersionManagerImplInfo
import org.openapitools.client.models.ComDayCqWcmCoreImplVersionPurgeTaskInfo
import org.openapitools.client.models.ComDayCqWcmCoreImplWCMDebugFilterInfo
import org.openapitools.client.models.ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo
import org.openapitools.client.models.ComDayCqWcmCoreImplWarpTimeWarpFilterInfo
import org.openapitools.client.models.ComDayCqWcmCoreMvtMVTStatisticsImplInfo
import org.openapitools.client.models.ComDayCqWcmCoreStatsPageViewStatisticsImplInfo
import org.openapitools.client.models.ComDayCqWcmCoreWCMRequestFilterInfo
import org.openapitools.client.models.ComDayCqWcmDesignimporterDesignPackageImporterInfo
import org.openapitools.client.models.ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo
import org.openapitools.client.models.ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo
import org.openapitools.client.models.ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo
import org.openapitools.client.models.ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo
import org.openapitools.client.models.ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo
import org.openapitools.client.models.ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo
import org.openapitools.client.models.ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo
import org.openapitools.client.models.ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo
import org.openapitools.client.models.ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo
import org.openapitools.client.models.ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo
import org.openapitools.client.models.ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo
import org.openapitools.client.models.ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo
import org.openapitools.client.models.ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo
import org.openapitools.client.models.ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo
import org.openapitools.client.models.ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo
import org.openapitools.client.models.ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo
import org.openapitools.client.models.ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo
import org.openapitools.client.models.ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo
import org.openapitools.client.models.ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo
import org.openapitools.client.models.ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo
import org.openapitools.client.models.ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo
import org.openapitools.client.models.ComDayCqWcmFoundationFormsImplFormChooserServletInfo
import org.openapitools.client.models.ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo
import org.openapitools.client.models.ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo
import org.openapitools.client.models.ComDayCqWcmFoundationFormsImplMailServletInfo
import org.openapitools.client.models.ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo
import org.openapitools.client.models.ComDayCqWcmFoundationImplHTTPAuthHandlerInfo
import org.openapitools.client.models.ComDayCqWcmFoundationImplPageImpressionsTrackerInfo
import org.openapitools.client.models.ComDayCqWcmFoundationImplPageRedirectServletInfo
import org.openapitools.client.models.ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo
import org.openapitools.client.models.ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo
import org.openapitools.client.models.ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo
import org.openapitools.client.models.ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo
import org.openapitools.client.models.ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo
import org.openapitools.client.models.ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo
import org.openapitools.client.models.ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo
import org.openapitools.client.models.ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo
import org.openapitools.client.models.ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo
import org.openapitools.client.models.ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo
import org.openapitools.client.models.ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo
import org.openapitools.client.models.ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo
import org.openapitools.client.models.ComDayCqWcmMsmImplRolloutManagerImplInfo
import org.openapitools.client.models.ComDayCqWcmMsmImplServletsAuditLogServletInfo
import org.openapitools.client.models.ComDayCqWcmNotificationEmailImplEmailChannelInfo
import org.openapitools.client.models.ComDayCqWcmNotificationImplNotificationManagerImplInfo
import org.openapitools.client.models.ComDayCqWcmScriptingImplBVPManagerInfo
import org.openapitools.client.models.ComDayCqWcmUndoUndoConfigInfo
import org.openapitools.client.models.ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo
import org.openapitools.client.models.ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo
import org.openapitools.client.models.ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo
import org.openapitools.client.models.ComDayCqWidgetImplHtmlLibraryManagerImplInfo
import org.openapitools.client.models.ComDayCqWidgetImplWidgetExtensionProviderImplInfo
import org.openapitools.client.models.ComDayCqWorkflowImplEmailEMailNotificationServiceInfo
import org.openapitools.client.models.ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo
import org.openapitools.client.models.ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo
import org.openapitools.client.models.ComDayCrxSecurityTokenImplTokenCleanupTaskInfo
import org.openapitools.client.models.GuideLocalizationServiceInfo
import org.openapitools.client.models.MessagingUserComponentFactoryInfo
import org.openapitools.client.models.OrgApacheAriesJmxFrameworkStateConfigInfo
import org.openapitools.client.models.OrgApacheFelixEventadminImplEventAdminInfo
import org.openapitools.client.models.OrgApacheFelixHttpInfo
import org.openapitools.client.models.OrgApacheFelixHttpSslfilterSslFilterInfo
import org.openapitools.client.models.OrgApacheFelixJaasConfigurationFactoryInfo
import org.openapitools.client.models.OrgApacheFelixJaasConfigurationSpiInfo
import org.openapitools.client.models.OrgApacheFelixScrScrServiceInfo
import org.openapitools.client.models.OrgApacheFelixSystemreadyImplComponentsCheckInfo
import org.openapitools.client.models.OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo
import org.openapitools.client.models.OrgApacheFelixSystemreadyImplServicesCheckInfo
import org.openapitools.client.models.OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo
import org.openapitools.client.models.OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo
import org.openapitools.client.models.OrgApacheFelixSystemreadySystemReadyMonitorInfo
import org.openapitools.client.models.OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo
import org.openapitools.client.models.OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo
import org.openapitools.client.models.OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo
import org.openapitools.client.models.OrgApacheHttpProxyconfiguratorInfo
import org.openapitools.client.models.OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo
import org.openapitools.client.models.OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo
import org.openapitools.client.models.OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo
import org.openapitools.client.models.OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo
import org.openapitools.client.models.OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo
import org.openapitools.client.models.OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo
import org.openapitools.client.models.OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo
import org.openapitools.client.models.OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo
import org.openapitools.client.models.OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo
import org.openapitools.client.models.OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo
import org.openapitools.client.models.OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo
import org.openapitools.client.models.OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo
import org.openapitools.client.models.OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo
import org.openapitools.client.models.OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo
import org.openapitools.client.models.OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo
import org.openapitools.client.models.OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo
import org.openapitools.client.models.OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo
import org.openapitools.client.models.OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo
import org.openapitools.client.models.OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo
import org.openapitools.client.models.OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo
import org.openapitools.client.models.OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo
import org.openapitools.client.models.OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo
import org.openapitools.client.models.OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo
import org.openapitools.client.models.OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo
import org.openapitools.client.models.OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo
import org.openapitools.client.models.OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo
import org.openapitools.client.models.OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo
import org.openapitools.client.models.OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo
import org.openapitools.client.models.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo
import org.openapitools.client.models.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo
import org.openapitools.client.models.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo
import org.openapitools.client.models.OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo
import org.openapitools.client.models.OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo
import org.openapitools.client.models.OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo
import org.openapitools.client.models.OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo
import org.openapitools.client.models.OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo
import org.openapitools.client.models.OrgApacheSlingAuthCoreImplLogoutServletInfo
import org.openapitools.client.models.OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo
import org.openapitools.client.models.OrgApacheSlingCaconfigImplConfigurationResolverImplInfo
import org.openapitools.client.models.OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo
import org.openapitools.client.models.OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo
import org.openapitools.client.models.OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo
import org.openapitools.client.models.OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo
import org.openapitools.client.models.OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo
import org.openapitools.client.models.OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo
import org.openapitools.client.models.OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo
import org.openapitools.client.models.OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo
import org.openapitools.client.models.OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo
import org.openapitools.client.models.OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo
import org.openapitools.client.models.OrgApacheSlingCommonsLogLogManagerInfo
import org.openapitools.client.models.OrgApacheSlingCommonsMetricsInternalLogReporterInfo
import org.openapitools.client.models.OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo
import org.openapitools.client.models.OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo
import org.openapitools.client.models.OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo
import org.openapitools.client.models.OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo
import org.openapitools.client.models.OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo
import org.openapitools.client.models.OrgApacheSlingDatasourceDataSourceFactoryInfo
import org.openapitools.client.models.OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo
import org.openapitools.client.models.OrgApacheSlingDiscoveryOakConfigInfo
import org.openapitools.client.models.OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo
import org.openapitools.client.models.OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo
import org.openapitools.client.models.OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo
import org.openapitools.client.models.OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo
import org.openapitools.client.models.OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo
import org.openapitools.client.models.OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo
import org.openapitools.client.models.OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo
import org.openapitools.client.models.OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo
import org.openapitools.client.models.OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo
import org.openapitools.client.models.OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo
import org.openapitools.client.models.OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo
import org.openapitools.client.models.OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo
import org.openapitools.client.models.OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo
import org.openapitools.client.models.OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo
import org.openapitools.client.models.OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo
import org.openapitools.client.models.OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo
import org.openapitools.client.models.OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo
import org.openapitools.client.models.OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo
import org.openapitools.client.models.OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo
import org.openapitools.client.models.OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo
import org.openapitools.client.models.OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo
import org.openapitools.client.models.OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo
import org.openapitools.client.models.OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo
import org.openapitools.client.models.OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo
import org.openapitools.client.models.OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo
import org.openapitools.client.models.OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo
import org.openapitools.client.models.OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo
import org.openapitools.client.models.OrgApacheSlingEngineImplLogRequestLoggerInfo
import org.openapitools.client.models.OrgApacheSlingEngineImplLogRequestLoggerServiceInfo
import org.openapitools.client.models.OrgApacheSlingEngineImplSlingMainServletInfo
import org.openapitools.client.models.OrgApacheSlingEngineParametersInfo
import org.openapitools.client.models.OrgApacheSlingEventImplEventingThreadPoolInfo
import org.openapitools.client.models.OrgApacheSlingEventImplJobsDefaultJobManagerInfo
import org.openapitools.client.models.OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo
import org.openapitools.client.models.OrgApacheSlingEventImplJobsJobConsumerManagerInfo
import org.openapitools.client.models.OrgApacheSlingEventJobsQueueConfigurationInfo
import org.openapitools.client.models.OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo
import org.openapitools.client.models.OrgApacheSlingFeatureflagsFeatureInfo
import org.openapitools.client.models.OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo
import org.openapitools.client.models.OrgApacheSlingHapiImplHApiUtilImplInfo
import org.openapitools.client.models.OrgApacheSlingHcCoreImplCompositeHealthCheckInfo
import org.openapitools.client.models.OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo
import org.openapitools.client.models.OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo
import org.openapitools.client.models.OrgApacheSlingHcCoreImplScriptableHealthCheckInfo
import org.openapitools.client.models.OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo
import org.openapitools.client.models.OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo
import org.openapitools.client.models.OrgApacheSlingI18nImplI18NFilterInfo
import org.openapitools.client.models.OrgApacheSlingI18nImplJcrResourceBundleProviderInfo
import org.openapitools.client.models.OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo
import org.openapitools.client.models.OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo
import org.openapitools.client.models.OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo
import org.openapitools.client.models.OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo
import org.openapitools.client.models.OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo
import org.openapitools.client.models.OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo
import org.openapitools.client.models.OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo
import org.openapitools.client.models.OrgApacheSlingJcrRepoinitRepositoryInitializerInfo
import org.openapitools.client.models.OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo
import org.openapitools.client.models.OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo
import org.openapitools.client.models.OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo
import org.openapitools.client.models.OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo
import org.openapitools.client.models.OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo
import org.openapitools.client.models.OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo
import org.openapitools.client.models.OrgApacheSlingJmxProviderImplJMXResourceProviderInfo
import org.openapitools.client.models.OrgApacheSlingModelsImplModelAdapterFactoryInfo
import org.openapitools.client.models.OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo
import org.openapitools.client.models.OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo
import org.openapitools.client.models.OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo
import org.openapitools.client.models.OrgApacheSlingResourcemergerPickerOverridingInfo
import org.openapitools.client.models.OrgApacheSlingScriptingCoreImplScriptCacheImplInfo
import org.openapitools.client.models.OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo
import org.openapitools.client.models.OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo
import org.openapitools.client.models.OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo
import org.openapitools.client.models.OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo
import org.openapitools.client.models.OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo
import org.openapitools.client.models.OrgApacheSlingSecurityImplContentDispositionFilterInfo
import org.openapitools.client.models.OrgApacheSlingSecurityImplReferrerFilterInfo
import org.openapitools.client.models.OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo
import org.openapitools.client.models.OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo
import org.openapitools.client.models.OrgApacheSlingServletsGetDefaultGetServletInfo
import org.openapitools.client.models.OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo
import org.openapitools.client.models.OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo
import org.openapitools.client.models.OrgApacheSlingServletsPostImplSlingPostServletInfo
import org.openapitools.client.models.OrgApacheSlingServletsResolverSlingServletResolverInfo
import org.openapitools.client.models.OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo
import org.openapitools.client.models.OrgApacheSlingStartupfilterImplStartupFilterImplInfo
import org.openapitools.client.models.OrgApacheSlingTenantInternalTenantProviderImplInfo
import org.openapitools.client.models.OrgApacheSlingTracerInternalLogTracerInfo
import org.openapitools.client.models.OrgApacheSlingXssImplXSSFilterImplInfo

import org.openapitools.client.infrastructure.*

class ConfigmgrApi(basePath: kotlin.String = "http://localhost") : ApiClient(basePath) {

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param showPlaceholder  (optional)
    * @param maximumCacheEntries  (optional)
    * @param afPeriodscriptingPeriodcompatversion  (optional)
    * @param makeFileNameUnique  (optional)
    * @param generatingCompliantData  (optional)
    * @return AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun adaptiveFormAndInteractiveCommunicationWebChannelConfiguration(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, showPlaceholder: kotlin.Boolean, maximumCacheEntries: kotlin.Int, afPeriodscriptingPeriodcompatversion: kotlin.String, makeFileNameUnique: kotlin.Boolean, generatingCompliantData: kotlin.Boolean) : AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "showPlaceholder" to listOf("$showPlaceholder"), "maximumCacheEntries" to listOf("$maximumCacheEntries"), "af.scripting.compatversion" to listOf("$afPeriodscriptingPeriodcompatversion"), "makeFileNameUnique" to listOf("$makeFileNameUnique"), "generatingCompliantData" to listOf("$generatingCompliantData"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/Adaptive Form and Interactive Communication Web Channel Configuration",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param fontList  (optional)
    * @return AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, fontList: kotlin.Array<kotlin.String>) : AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "fontList" to toMultiValue(fontList.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/Adaptive Form and Interactive Communication Web Channel Theme Configuration",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPeriodanalyticsPeriodcomponentPeriodqueryPeriodcachePeriodsize  (optional)
    * @return AnalyticsComponentQueryCacheServiceInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun analyticsComponentQueryCacheService(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPeriodanalyticsPeriodcomponentPeriodqueryPeriodcachePeriodsize: kotlin.Int) : AnalyticsComponentQueryCacheServiceInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.analytics.component.query.cache.size" to listOf("$cqPeriodanalyticsPeriodcomponentPeriodqueryPeriodcachePeriodsize"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/Analytics Component Query Cache Service",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<AnalyticsComponentQueryCacheServiceInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as AnalyticsComponentQueryCacheServiceInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param styleString  (optional)
    * @return ApacheSlingHealthCheckResultHTMLSerializerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun apacheSlingHealthCheckResultHTMLSerializer(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, styleString: kotlin.String) : ApacheSlingHealthCheckResultHTMLSerializerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "styleString" to listOf("$styleString"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/Apache Sling Health Check Result HTML Serializer",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ApacheSlingHealthCheckResultHTMLSerializerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ApacheSlingHealthCheckResultHTMLSerializerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param formsManagerConfigPeriodincludeOOTBTemplates  (optional)
    * @param formsManagerConfigPeriodincludeDeprecatedTemplates  (optional)
    * @return ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, formsManagerConfigPeriodincludeOOTBTemplates: kotlin.Boolean, formsManagerConfigPeriodincludeDeprecatedTemplates: kotlin.Boolean) : ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "formsManagerConfig.includeOOTBTemplates" to listOf("$formsManagerConfigPeriodincludeOOTBTemplates"), "formsManagerConfig.includeDeprecatedTemplates" to listOf("$formsManagerConfigPeriodincludeDeprecatedTemplates"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.aem.formsndocuments.config.AEMFormsManagerConfiguration",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param isTransactionRecordingEnabled  (optional)
    * @return ComAdobeAemTransactionCoreImplTransactionRecorderInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeAemTransactionCoreImplTransactionRecorder(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, isTransactionRecordingEnabled: kotlin.Boolean) : ComAdobeAemTransactionCoreImplTransactionRecorderInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "isTransactionRecordingEnabled" to listOf("$isTransactionRecordingEnabled"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.aem.transaction.core.impl.TransactionRecorder",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeAemTransactionCoreImplTransactionRecorderInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeAemTransactionCoreImplTransactionRecorderInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param hcPeriodname  (optional)
    * @param hcPeriodtags  (optional)
    * @param hcPeriodmbeanPeriodname  (optional)
    * @return ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, hcPeriodname: kotlin.String, hcPeriodtags: kotlin.Array<kotlin.String>, hcPeriodmbeanPeriodname: kotlin.String) : ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "hc.name" to listOf("$hcPeriodname"), "hc.tags" to toMultiValue(hcPeriodtags.toList(), "multi"), "hc.mbean.name" to listOf("$hcPeriodmbeanPeriodname"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.DeprecateIndexesHC",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param hcPeriodname  (optional)
    * @param hcPeriodtags  (optional)
    * @param hcPeriodmbeanPeriodname  (optional)
    * @return ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, hcPeriodname: kotlin.String, hcPeriodtags: kotlin.Array<kotlin.String>, hcPeriodmbeanPeriodname: kotlin.String) : ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "hc.name" to listOf("$hcPeriodname"), "hc.tags" to toMultiValue(hcPeriodtags.toList(), "multi"), "hc.mbean.name" to listOf("$hcPeriodmbeanPeriodname"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.ReplicationAgentsDisabledHC",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param preUpgradePeriodmaintenancePeriodtasks  (optional)
    * @param preUpgradePeriodhcPeriodtags  (optional)
    * @return ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, preUpgradePeriodmaintenancePeriodtasks: kotlin.Array<kotlin.String>, preUpgradePeriodhcPeriodtags: kotlin.Array<kotlin.String>) : ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "pre-upgrade.maintenance.tasks" to toMultiValue(preUpgradePeriodmaintenancePeriodtasks.toList(), "multi"), "pre-upgrade.hc.tags" to toMultiValue(preUpgradePeriodhcPeriodtags.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.aem.upgrade.prechecks.mbean.impl.PreUpgradeTasksMBeanImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param rootPeriodpath  (optional)
    * @param fixPeriodinconsistencies  (optional)
    * @return ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, rootPeriodpath: kotlin.String, fixPeriodinconsistencies: kotlin.Boolean) : ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "root.path" to listOf("$rootPeriodpath"), "fix.inconsistencies" to listOf("$fixPeriodinconsistencies"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.aem.upgrade.prechecks.tasks.impl.ConsistencyCheckTaskImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPeriodaccountmanagerPeriodtokenPeriodvalidityPeriodperiod  (optional)
    * @param cqPeriodaccountmanagerPeriodconfigPeriodrequestnewaccountPeriodmail  (optional)
    * @param cqPeriodaccountmanagerPeriodconfigPeriodrequestnewpwdPeriodmail  (optional)
    * @return ComAdobeCqAccountApiAccountManagementServiceInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqAccountApiAccountManagementService(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPeriodaccountmanagerPeriodtokenPeriodvalidityPeriodperiod: kotlin.Int, cqPeriodaccountmanagerPeriodconfigPeriodrequestnewaccountPeriodmail: kotlin.String, cqPeriodaccountmanagerPeriodconfigPeriodrequestnewpwdPeriodmail: kotlin.String) : ComAdobeCqAccountApiAccountManagementServiceInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.accountmanager.token.validity.period" to listOf("$cqPeriodaccountmanagerPeriodtokenPeriodvalidityPeriodperiod"), "cq.accountmanager.config.requestnewaccount.mail" to listOf("$cqPeriodaccountmanagerPeriodconfigPeriodrequestnewaccountPeriodmail"), "cq.accountmanager.config.requestnewpwd.mail" to listOf("$cqPeriodaccountmanagerPeriodconfigPeriodrequestnewpwdPeriodmail"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.account.api.AccountManagementService",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqAccountApiAccountManagementServiceInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqAccountApiAccountManagementServiceInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPeriodaccountmanagerPeriodconfigPeriodinformnewaccountPeriodmail  (optional)
    * @param cqPeriodaccountmanagerPeriodconfigPeriodinformnewpwdPeriodmail  (optional)
    * @return ComAdobeCqAccountImplAccountManagementServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqAccountImplAccountManagementServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPeriodaccountmanagerPeriodconfigPeriodinformnewaccountPeriodmail: kotlin.String, cqPeriodaccountmanagerPeriodconfigPeriodinformnewpwdPeriodmail: kotlin.String) : ComAdobeCqAccountImplAccountManagementServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.accountmanager.config.informnewaccount.mail" to listOf("$cqPeriodaccountmanagerPeriodconfigPeriodinformnewaccountPeriodmail"), "cq.accountmanager.config.informnewpwd.mail" to listOf("$cqPeriodaccountmanagerPeriodconfigPeriodinformnewpwdPeriodmail"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.account.impl.AccountManagementServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqAccountImplAccountManagementServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqAccountImplAccountManagementServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPeriodaddressPeriodlocationPerioddefaultPeriodmaxResults  (optional)
    * @return ComAdobeCqAddressImplLocationLocationListServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqAddressImplLocationLocationListServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPeriodaddressPeriodlocationPerioddefaultPeriodmaxResults: kotlin.Int) : ComAdobeCqAddressImplLocationLocationListServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.address.location.default.maxResults" to listOf("$cqPeriodaddressPeriodlocationPerioddefaultPeriodmaxResults"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.address.impl.location.LocationListServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqAddressImplLocationLocationListServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqAddressImplLocationLocationListServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param auditlogPeriodrulePeriodname  (optional)
    * @param auditlogPeriodrulePeriodcontentpath  (optional)
    * @param auditlogPeriodrulePeriodminimumage  (optional)
    * @param auditlogPeriodrulePeriodtypes  (optional)
    * @return ComAdobeCqAuditPurgeDamInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqAuditPurgeDam(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, auditlogPeriodrulePeriodname: kotlin.String, auditlogPeriodrulePeriodcontentpath: kotlin.String, auditlogPeriodrulePeriodminimumage: kotlin.Int, auditlogPeriodrulePeriodtypes: kotlin.String) : ComAdobeCqAuditPurgeDamInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "auditlog.rule.name" to listOf("$auditlogPeriodrulePeriodname"), "auditlog.rule.contentpath" to listOf("$auditlogPeriodrulePeriodcontentpath"), "auditlog.rule.minimumage" to listOf("$auditlogPeriodrulePeriodminimumage"), "auditlog.rule.types" to listOf("$auditlogPeriodrulePeriodtypes"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.audit.purge.Dam",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqAuditPurgeDamInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqAuditPurgeDamInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param auditlogPeriodrulePeriodname  (optional)
    * @param auditlogPeriodrulePeriodcontentpath  (optional)
    * @param auditlogPeriodrulePeriodminimumage  (optional)
    * @param auditlogPeriodrulePeriodtypes  (optional)
    * @return ComAdobeCqAuditPurgePagesInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqAuditPurgePages(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, auditlogPeriodrulePeriodname: kotlin.String, auditlogPeriodrulePeriodcontentpath: kotlin.String, auditlogPeriodrulePeriodminimumage: kotlin.Int, auditlogPeriodrulePeriodtypes: kotlin.String) : ComAdobeCqAuditPurgePagesInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "auditlog.rule.name" to listOf("$auditlogPeriodrulePeriodname"), "auditlog.rule.contentpath" to listOf("$auditlogPeriodrulePeriodcontentpath"), "auditlog.rule.minimumage" to listOf("$auditlogPeriodrulePeriodminimumage"), "auditlog.rule.types" to listOf("$auditlogPeriodrulePeriodtypes"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.audit.purge.Pages",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqAuditPurgePagesInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqAuditPurgePagesInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param auditlogPeriodrulePeriodname  (optional)
    * @param auditlogPeriodrulePeriodcontentpath  (optional)
    * @param auditlogPeriodrulePeriodminimumage  (optional)
    * @param auditlogPeriodrulePeriodtypes  (optional)
    * @return ComAdobeCqAuditPurgeReplicationInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqAuditPurgeReplication(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, auditlogPeriodrulePeriodname: kotlin.String, auditlogPeriodrulePeriodcontentpath: kotlin.String, auditlogPeriodrulePeriodminimumage: kotlin.Int, auditlogPeriodrulePeriodtypes: kotlin.String) : ComAdobeCqAuditPurgeReplicationInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "auditlog.rule.name" to listOf("$auditlogPeriodrulePeriodname"), "auditlog.rule.contentpath" to listOf("$auditlogPeriodrulePeriodcontentpath"), "auditlog.rule.minimumage" to listOf("$auditlogPeriodrulePeriodminimumage"), "auditlog.rule.types" to listOf("$auditlogPeriodrulePeriodtypes"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.audit.purge.Replication",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqAuditPurgeReplicationInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqAuditPurgeReplicationInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param servicePeriodranking  (optional)
    * @param keypairPeriodid  (optional)
    * @param keypairPeriodalias  (optional)
    * @param cdnrewriterPeriodattributes  (optional)
    * @param cdnPeriodrewriterPerioddistributionPerioddomain  (optional)
    * @return ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqCdnRewriterImplAWSCloudFrontRewriter(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, servicePeriodranking: kotlin.Int, keypairPeriodid: kotlin.String, keypairPeriodalias: kotlin.String, cdnrewriterPeriodattributes: kotlin.Array<kotlin.String>, cdnPeriodrewriterPerioddistributionPerioddomain: kotlin.String) : ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "service.ranking" to listOf("$servicePeriodranking"), "keypair.id" to listOf("$keypairPeriodid"), "keypair.alias" to listOf("$keypairPeriodalias"), "cdnrewriter.attributes" to toMultiValue(cdnrewriterPeriodattributes.toList(), "multi"), "cdn.rewriter.distribution.domain" to listOf("$cdnPeriodrewriterPerioddistributionPerioddomain"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.AWSCloudFrontRewriter",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cdnPeriodconfigPerioddistributionPerioddomain  (optional)
    * @param cdnPeriodconfigPeriodenablePeriodrewriting  (optional)
    * @param cdnPeriodconfigPeriodpathPeriodprefixes  (optional)
    * @param cdnPeriodconfigPeriodcdnttl  (optional)
    * @param cdnPeriodconfigPeriodapplicationPeriodprotocol  (optional)
    * @return ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqCdnRewriterImplCDNConfigServiceImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cdnPeriodconfigPerioddistributionPerioddomain: kotlin.String, cdnPeriodconfigPeriodenablePeriodrewriting: kotlin.Boolean, cdnPeriodconfigPeriodpathPeriodprefixes: kotlin.Array<kotlin.String>, cdnPeriodconfigPeriodcdnttl: kotlin.Int, cdnPeriodconfigPeriodapplicationPeriodprotocol: kotlin.String) : ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cdn.config.distribution.domain" to listOf("$cdnPeriodconfigPerioddistributionPerioddomain"), "cdn.config.enable.rewriting" to listOf("$cdnPeriodconfigPeriodenablePeriodrewriting"), "cdn.config.path.prefixes" to toMultiValue(cdnPeriodconfigPeriodpathPeriodprefixes.toList(), "multi"), "cdn.config.cdnttl" to listOf("$cdnPeriodconfigPeriodcdnttl"), "cdn.config.application.protocol" to listOf("$cdnPeriodconfigPeriodapplicationPeriodprotocol"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNConfigServiceImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param servicePeriodranking  (optional)
    * @param cdnrewriterPeriodattributes  (optional)
    * @param cdnPeriodrewriterPerioddistributionPerioddomain  (optional)
    * @return ComAdobeCqCdnRewriterImplCDNRewriterInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqCdnRewriterImplCDNRewriter(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, servicePeriodranking: kotlin.Int, cdnrewriterPeriodattributes: kotlin.Array<kotlin.String>, cdnPeriodrewriterPerioddistributionPerioddomain: kotlin.String) : ComAdobeCqCdnRewriterImplCDNRewriterInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "service.ranking" to listOf("$servicePeriodranking"), "cdnrewriter.attributes" to toMultiValue(cdnrewriterPeriodattributes.toList(), "multi"), "cdn.rewriter.distribution.domain" to listOf("$cdnPeriodrewriterPerioddistributionPerioddomain"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNRewriter",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqCdnRewriterImplCDNRewriterInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqCdnRewriterImplCDNRewriterInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param flushPeriodagents  (optional)
    * @return ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, flushPeriodagents: kotlin.Array<kotlin.String>) : ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "flush.agents" to toMultiValue(flushPeriodagents.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.cloudconfig.core.impl.ConfigurationReplicationEventHandler",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPeriodcommercePeriodassetPeriodhandlerPeriodactive  (optional)
    * @param cqPeriodcommercePeriodassetPeriodhandlerPeriodname  (optional)
    * @return ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqCommerceImplAssetDynamicImageHandler(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPeriodcommercePeriodassetPeriodhandlerPeriodactive: kotlin.Boolean, cqPeriodcommercePeriodassetPeriodhandlerPeriodname: kotlin.String) : ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.commerce.asset.handler.active" to listOf("$cqPeriodcommercePeriodassetPeriodhandlerPeriodactive"), "cq.commerce.asset.handler.name" to listOf("$cqPeriodcommercePeriodassetPeriodhandlerPeriodname"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.commerce.impl.asset.DynamicImageHandler",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPeriodcommercePeriodassetPeriodhandlerPeriodfallback  (optional)
    * @return ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPeriodcommercePeriodassetPeriodhandlerPeriodfallback: kotlin.String) : ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.commerce.asset.handler.fallback" to listOf("$cqPeriodcommercePeriodassetPeriodhandlerPeriodfallback"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.commerce.impl.asset.ProductAssetHandlerProviderImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPeriodcommercePeriodassetPeriodhandlerPeriodactive  (optional)
    * @param cqPeriodcommercePeriodassetPeriodhandlerPeriodname  (optional)
    * @return ComAdobeCqCommerceImplAssetStaticImageHandlerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqCommerceImplAssetStaticImageHandler(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPeriodcommercePeriodassetPeriodhandlerPeriodactive: kotlin.Boolean, cqPeriodcommercePeriodassetPeriodhandlerPeriodname: kotlin.String) : ComAdobeCqCommerceImplAssetStaticImageHandlerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.commerce.asset.handler.active" to listOf("$cqPeriodcommercePeriodassetPeriodhandlerPeriodactive"), "cq.commerce.asset.handler.name" to listOf("$cqPeriodcommercePeriodassetPeriodhandlerPeriodname"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.commerce.impl.asset.StaticImageHandler",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqCommerceImplAssetStaticImageHandlerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqCommerceImplAssetStaticImageHandlerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPeriodcommercePeriodassetPeriodhandlerPeriodactive  (optional)
    * @param cqPeriodcommercePeriodassetPeriodhandlerPeriodname  (optional)
    * @return ComAdobeCqCommerceImplAssetVideoHandlerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqCommerceImplAssetVideoHandler(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPeriodcommercePeriodassetPeriodhandlerPeriodactive: kotlin.Boolean, cqPeriodcommercePeriodassetPeriodhandlerPeriodname: kotlin.String) : ComAdobeCqCommerceImplAssetVideoHandlerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.commerce.asset.handler.active" to listOf("$cqPeriodcommercePeriodassetPeriodhandlerPeriodactive"), "cq.commerce.asset.handler.name" to listOf("$cqPeriodcommercePeriodassetPeriodhandlerPeriodname"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.commerce.impl.asset.VideoHandler",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqCommerceImplAssetVideoHandlerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqCommerceImplAssetVideoHandlerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPeriodcommercePeriodpromotionPeriodroot  (optional)
    * @return ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqCommerceImplPromotionPromotionManagerImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPeriodcommercePeriodpromotionPeriodroot: kotlin.String) : ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.commerce.promotion.root" to listOf("$cqPeriodcommercePeriodpromotionPeriodroot"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.commerce.impl.promotion.PromotionManagerImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPeriodcommercePeriodcataloggeneratorPeriodbucketsize  (optional)
    * @param cqPeriodcommercePeriodcataloggeneratorPeriodbucketname  (optional)
    * @param cqPeriodcommercePeriodcataloggeneratorPeriodexcludedtemplateproperties  (optional)
    * @return ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPeriodcommercePeriodcataloggeneratorPeriodbucketsize: kotlin.Int, cqPeriodcommercePeriodcataloggeneratorPeriodbucketname: kotlin.String, cqPeriodcommercePeriodcataloggeneratorPeriodexcludedtemplateproperties: kotlin.Array<kotlin.String>) : ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.commerce.cataloggenerator.bucketsize" to listOf("$cqPeriodcommercePeriodcataloggeneratorPeriodbucketsize"), "cq.commerce.cataloggenerator.bucketname" to listOf("$cqPeriodcommercePeriodcataloggeneratorPeriodbucketname"), "cq.commerce.cataloggenerator.excludedtemplateproperties" to toMultiValue(cqPeriodcommercePeriodcataloggeneratorPeriodexcludedtemplateproperties.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.commerce.pim.impl.cataloggenerator.CatalogGeneratorImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPeriodcommercePeriodpageeventlistenerPeriodenabled  (optional)
    * @return ComAdobeCqCommercePimImplPageEventListenerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqCommercePimImplPageEventListener(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPeriodcommercePeriodpageeventlistenerPeriodenabled: kotlin.Boolean) : ComAdobeCqCommercePimImplPageEventListenerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.commerce.pageeventlistener.enabled" to listOf("$cqPeriodcommercePeriodpageeventlistenerPeriodenabled"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.commerce.pim.impl.PageEventListener",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqCommercePimImplPageEventListenerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqCommercePimImplPageEventListenerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param feed generator algorithm  (optional)
    * @return ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqCommercePimImplProductfeedProductFeedServiceImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, feed generator algorithm: kotlin.String) : ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "Feed generator algorithm" to listOf("$feed generator algorithm"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.commerce.pim.impl.productfeed.ProductFeedServiceImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param reportingservicesPeriodurl  (optional)
    * @return ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqContentinsightImplReportingServicesSettingsProvider(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, reportingservicesPeriodurl: kotlin.String) : ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "reportingservices.url" to listOf("$reportingservicesPeriodurl"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.contentinsight.impl.ReportingServicesSettingsProvider",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param brightedgePeriodurl  (optional)
    * @return ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqContentinsightImplServletsBrightEdgeProxyServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, brightedgePeriodurl: kotlin.String) : ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "brightedge.url" to listOf("$brightedgePeriodurl"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.BrightEdgeProxyServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param reportingservicesPeriodproxyPeriodwhitelist  (optional)
    * @return ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqContentinsightImplServletsReportingServicesProxyServle(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, reportingservicesPeriodproxyPeriodwhitelist: kotlin.Array<kotlin.String>) : ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "reportingservices.proxy.whitelist" to toMultiValue(reportingservicesPeriodproxyPeriodwhitelist.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.ReportingServicesProxyServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param damPeriodcfmPeriodcomponentPeriodresourceType  (optional)
    * @param damPeriodcfmPeriodcomponentPeriodfileReferenceProp  (optional)
    * @param damPeriodcfmPeriodcomponentPeriodelementsProp  (optional)
    * @param damPeriodcfmPeriodcomponentPeriodvariationProp  (optional)
    * @return ComAdobeCqDamCfmImplComponentComponentConfigImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqDamCfmImplComponentComponentConfigImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, damPeriodcfmPeriodcomponentPeriodresourceType: kotlin.String, damPeriodcfmPeriodcomponentPeriodfileReferenceProp: kotlin.String, damPeriodcfmPeriodcomponentPeriodelementsProp: kotlin.String, damPeriodcfmPeriodcomponentPeriodvariationProp: kotlin.String) : ComAdobeCqDamCfmImplComponentComponentConfigImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "dam.cfm.component.resourceType" to listOf("$damPeriodcfmPeriodcomponentPeriodresourceType"), "dam.cfm.component.fileReferenceProp" to listOf("$damPeriodcfmPeriodcomponentPeriodfileReferenceProp"), "dam.cfm.component.elementsProp" to listOf("$damPeriodcfmPeriodcomponentPeriodelementsProp"), "dam.cfm.component.variationProp" to listOf("$damPeriodcfmPeriodcomponentPeriodvariationProp"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.dam.cfm.impl.component.ComponentConfigImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqDamCfmImplComponentComponentConfigImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqDamCfmImplComponentComponentConfigImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param damPeriodcfmPeriodresourceTypes  (optional)
    * @param damPeriodcfmPeriodreferenceProperties  (optional)
    * @return ComAdobeCqDamCfmImplConfFeatureConfigImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqDamCfmImplConfFeatureConfigImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, damPeriodcfmPeriodresourceTypes: kotlin.Array<kotlin.String>, damPeriodcfmPeriodreferenceProperties: kotlin.Array<kotlin.String>) : ComAdobeCqDamCfmImplConfFeatureConfigImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "dam.cfm.resourceTypes" to toMultiValue(damPeriodcfmPeriodresourceTypes.toList(), "multi"), "dam.cfm.referenceProperties" to toMultiValue(damPeriodcfmPeriodreferenceProperties.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.dam.cfm.impl.conf.FeatureConfigImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqDamCfmImplConfFeatureConfigImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqDamCfmImplConfFeatureConfigImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param pipelinePeriodtype  (optional)
    * @return ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqDamCfmImplContentRewriterAssetProcessor(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, pipelinePeriodtype: kotlin.String) : ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "pipeline.type" to listOf("$pipelinePeriodtype"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.AssetProcessor",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param pipelinePeriodtype  (optional)
    * @return ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqDamCfmImplContentRewriterParRangeFilter(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, pipelinePeriodtype: kotlin.String) : ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "pipeline.type" to listOf("$pipelinePeriodtype"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.ParRangeFilter",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param pipelinePeriodtype  (optional)
    * @return ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqDamCfmImplContentRewriterPayloadFilter(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, pipelinePeriodtype: kotlin.String) : ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "pipeline.type" to listOf("$pipelinePeriodtype"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.PayloadFilter",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param maxMemory  (optional)
    * @return ComAdobeCqDamDmProcessImagePTiffManagerImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqDamDmProcessImagePTiffManagerImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, maxMemory: kotlin.Int) : ComAdobeCqDamDmProcessImagePTiffManagerImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "maxMemory" to listOf("$maxMemory"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.dam.dm.process.image.PTiffManagerImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqDamDmProcessImagePTiffManagerImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqDamDmProcessImagePTiffManagerImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param dmreplicateonmodifyPeriodenabled  (optional)
    * @param dmreplicateonmodifyPeriodforcesyncdeletes  (optional)
    * @return ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, dmreplicateonmodifyPeriodenabled: kotlin.Boolean, dmreplicateonmodifyPeriodforcesyncdeletes: kotlin.Boolean) : ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "dmreplicateonmodify.enabled" to listOf("$dmreplicateonmodifyPeriodenabled"), "dmreplicateonmodify.forcesyncdeletes" to listOf("$dmreplicateonmodifyPeriodforcesyncdeletes"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.dam.ips.impl.replication.trigger.ReplicateOnModifyWorker",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param comPeriodadobePerioddamPeriodmacPeriodsyncPeriodclientPeriodsoPeriodtimeout  (optional)
    * @return ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqDamMacSyncHelperImplMACSyncClientImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, comPeriodadobePerioddamPeriodmacPeriodsyncPeriodclientPeriodsoPeriodtimeout: kotlin.Int) : ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "com.adobe.dam.mac.sync.client.so.timeout" to listOf("$comPeriodadobePerioddamPeriodmacPeriodsyncPeriodclientPeriodsoPeriodtimeout"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.dam.mac.sync.helper.impl.MACSyncClientImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodregisteredPaths  (optional)
    * @param comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodsyncPeriodrenditions  (optional)
    * @param comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodreplicatePeriodthreadPeriodwaitPeriodms  (optional)
    * @param comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodplatform  (optional)
    * @return ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqDamMacSyncImplDAMSyncServiceImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodregisteredPaths: kotlin.Array<kotlin.String>, comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodsyncPeriodrenditions: kotlin.Boolean, comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodreplicatePeriodthreadPeriodwaitPeriodms: kotlin.Int, comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodplatform: kotlin.String) : ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "com.adobe.cq.dam.mac.sync.damsyncservice.registered_paths" to toMultiValue(comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodregisteredPaths.toList(), "multi"), "com.adobe.cq.dam.mac.sync.damsyncservice.sync.renditions" to listOf("$comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodsyncPeriodrenditions"), "com.adobe.cq.dam.mac.sync.damsyncservice.replicate.thread.wait.ms" to listOf("$comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodreplicatePeriodthreadPeriodwaitPeriodms"), "com.adobe.cq.dam.mac.sync.damsyncservice.platform" to listOf("$comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodplatform"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.dam.mac.sync.impl.DAMSyncServiceImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param nuiEnabled  (optional)
    * @param nuiServiceUrl  (optional)
    * @param nuiApiKey  (optional)
    * @return ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqDamProcessorNuiImplNuiAssetProcessor(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, nuiEnabled: kotlin.Boolean, nuiServiceUrl: kotlin.String, nuiApiKey: kotlin.String) : ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "nuiEnabled" to listOf("$nuiEnabled"), "nuiServiceUrl" to listOf("$nuiServiceUrl"), "nuiApiKey" to listOf("$nuiApiKey"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.dam.processor.nui.impl.NuiAssetProcessor",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param tcpPort  (optional)
    * @param allowRemoteAccess  (optional)
    * @param maxRenderRgnPixels  (optional)
    * @param maxMessageSize  (optional)
    * @param randomAccessUrlTimeout  (optional)
    * @param workerThreads  (optional)
    * @return ComAdobeCqDamS7imagingImplIsImageServerComponentInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqDamS7imagingImplIsImageServerComponent(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, tcpPort: kotlin.String, allowRemoteAccess: kotlin.Boolean, maxRenderRgnPixels: kotlin.String, maxMessageSize: kotlin.String, randomAccessUrlTimeout: kotlin.Int, workerThreads: kotlin.Int) : ComAdobeCqDamS7imagingImplIsImageServerComponentInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "TcpPort" to listOf("$tcpPort"), "AllowRemoteAccess" to listOf("$allowRemoteAccess"), "MaxRenderRgnPixels" to listOf("$maxRenderRgnPixels"), "MaxMessageSize" to listOf("$maxMessageSize"), "RandomAccessUrlTimeout" to listOf("$randomAccessUrlTimeout"), "WorkerThreads" to listOf("$workerThreads"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.dam.s7imaging.impl.is.ImageServerComponent",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqDamS7imagingImplIsImageServerComponentInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqDamS7imagingImplIsImageServerComponentInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cachePeriodenable  (optional)
    * @param cachePeriodrootPaths  (optional)
    * @param cachePeriodmaxSize  (optional)
    * @param cachePeriodmaxEntries  (optional)
    * @return ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqDamS7imagingImplPsPlatformServerServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cachePeriodenable: kotlin.Boolean, cachePeriodrootPaths: kotlin.Array<kotlin.String>, cachePeriodmaxSize: kotlin.Int, cachePeriodmaxEntries: kotlin.Int) : ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cache.enable" to listOf("$cachePeriodenable"), "cache.rootPaths" to toMultiValue(cachePeriodrootPaths.toList(), "multi"), "cache.maxSize" to listOf("$cachePeriodmaxSize"), "cache.maxEntries" to listOf("$cachePeriodmaxEntries"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.dam.s7imaging.impl.ps.PlatformServerServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param servicePeriodranking  (optional)
    * @param pathPrefix  (optional)
    * @param createVersion  (optional)
    * @return ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqDamWebdavImplIoAssetIOHandler(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, servicePeriodranking: kotlin.Int, pathPrefix: kotlin.String, createVersion: kotlin.Boolean) : ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "service.ranking" to listOf("$servicePeriodranking"), "pathPrefix" to listOf("$pathPrefix"), "createVersion" to listOf("$createVersion"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.AssetIOHandler",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodenable  (optional)
    * @param cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodschedulerPeriodperiod  (optional)
    * @param cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodstagingPeriodtimeout  (optional)
    * @return ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodenable: kotlin.Boolean, cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodschedulerPeriodperiod: kotlin.Int, cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodstagingPeriodtimeout: kotlin.Int) : ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.dam.webdav.version.linking.enable" to listOf("$cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodenable"), "cq.dam.webdav.version.linking.scheduler.period" to listOf("$cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodschedulerPeriodperiod"), "cq.dam.webdav.version.linking.staging.timeout" to listOf("$cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodstagingPeriodtimeout"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.DamWebdavVersionLinkingJob",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param comPerioddayPeriodcqPerioddamPeriodcorePeriodimplPeriodioPeriodSpecialFilesHandlerPeriodfilepatters  (optional)
    * @return ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqDamWebdavImplIoSpecialFilesHandler(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, comPerioddayPeriodcqPerioddamPeriodcorePeriodimplPeriodioPeriodSpecialFilesHandlerPeriodfilepatters: kotlin.Array<kotlin.String>) : ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "com.day.cq.dam.core.impl.io.SpecialFilesHandler.filepatters" to toMultiValue(comPerioddayPeriodcqPerioddamPeriodcorePeriodimplPeriodioPeriodSpecialFilesHandlerPeriodfilepatters.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.SpecialFilesHandler",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param firewallPerioddeserializationPeriodwhitelist  (optional)
    * @param firewallPerioddeserializationPeriodblacklist  (optional)
    * @param firewallPerioddeserializationPerioddiagnostics  (optional)
    * @return ComAdobeCqDeserfwImplDeserializationFirewallImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqDeserfwImplDeserializationFirewallImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, firewallPerioddeserializationPeriodwhitelist: kotlin.Array<kotlin.String>, firewallPerioddeserializationPeriodblacklist: kotlin.Array<kotlin.String>, firewallPerioddeserializationPerioddiagnostics: kotlin.String) : ComAdobeCqDeserfwImplDeserializationFirewallImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "firewall.deserialization.whitelist" to toMultiValue(firewallPerioddeserializationPeriodwhitelist.toList(), "multi"), "firewall.deserialization.blacklist" to toMultiValue(firewallPerioddeserializationPeriodblacklist.toList(), "multi"), "firewall.deserialization.diagnostics" to listOf("$firewallPerioddeserializationPerioddiagnostics"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.deserfw.impl.DeserializationFirewallImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqDeserfwImplDeserializationFirewallImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqDeserfwImplDeserializationFirewallImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param connectionPeriodtimeout  (optional)
    * @param socketPeriodtimeout  (optional)
    * @return ComAdobeCqDtmImplServiceDTMWebServiceImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqDtmImplServiceDTMWebServiceImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, connectionPeriodtimeout: kotlin.Int, socketPeriodtimeout: kotlin.Int) : ComAdobeCqDtmImplServiceDTMWebServiceImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "connection.timeout" to listOf("$connectionPeriodtimeout"), "socket.timeout" to listOf("$socketPeriodtimeout"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.dtm.impl.service.DTMWebServiceImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqDtmImplServiceDTMWebServiceImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqDtmImplServiceDTMWebServiceImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param dtmPeriodstagingPeriodipPeriodwhitelist  (optional)
    * @param dtmPeriodproductionPeriodipPeriodwhitelist  (optional)
    * @return ComAdobeCqDtmImplServletsDTMDeployHookServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqDtmImplServletsDTMDeployHookServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, dtmPeriodstagingPeriodipPeriodwhitelist: kotlin.Array<kotlin.String>, dtmPeriodproductionPeriodipPeriodwhitelist: kotlin.Array<kotlin.String>) : ComAdobeCqDtmImplServletsDTMDeployHookServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "dtm.staging.ip.whitelist" to toMultiValue(dtmPeriodstagingPeriodipPeriodwhitelist.toList(), "multi"), "dtm.production.ip.whitelist" to toMultiValue(dtmPeriodproductionPeriodipPeriodwhitelist.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.dtm.impl.servlets.DTMDeployHookServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqDtmImplServletsDTMDeployHookServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqDtmImplServletsDTMDeployHookServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param endpointUri  (optional)
    * @param connectionTimeout  (optional)
    * @param socketTimeout  (optional)
    * @return ComAdobeCqDtmReactorImplServiceWebServiceImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqDtmReactorImplServiceWebServiceImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, endpointUri: kotlin.String, connectionTimeout: kotlin.Int, socketTimeout: kotlin.Int) : ComAdobeCqDtmReactorImplServiceWebServiceImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "endpointUri" to listOf("$endpointUri"), "connectionTimeout" to listOf("$connectionTimeout"), "socketTimeout" to listOf("$socketTimeout"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.dtm.reactor.impl.service.WebServiceImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqDtmReactorImplServiceWebServiceImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqDtmReactorImplServiceWebServiceImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param enabled  (optional)
    * @param disabledForGroups  (optional)
    * @return ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqExperiencelogImplExperienceLogConfigServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, enabled: kotlin.Boolean, disabledForGroups: kotlin.Array<kotlin.String>) : ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "enabled" to listOf("$enabled"), "disabledForGroups" to toMultiValue(disabledForGroups.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.experiencelog.impl.ExperienceLogConfigServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param hcPeriodname  (optional)
    * @param hcPeriodtags  (optional)
    * @param hcPeriodmbeanPeriodname  (optional)
    * @param packagePeriodnames  (optional)
    * @return ComAdobeCqHcContentPackagesHealthCheckInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqHcContentPackagesHealthCheck(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, hcPeriodname: kotlin.String, hcPeriodtags: kotlin.Array<kotlin.String>, hcPeriodmbeanPeriodname: kotlin.String, packagePeriodnames: kotlin.Array<kotlin.String>) : ComAdobeCqHcContentPackagesHealthCheckInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "hc.name" to listOf("$hcPeriodname"), "hc.tags" to toMultiValue(hcPeriodtags.toList(), "multi"), "hc.mbean.name" to listOf("$hcPeriodmbeanPeriodname"), "package.names" to toMultiValue(packagePeriodnames.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.hc.ContentPackagesHealthCheck",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqHcContentPackagesHealthCheckInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqHcContentPackagesHealthCheckInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param historyPeriodrequestFilterPeriodexcludedSelectors  (optional)
    * @param historyPeriodrequestFilterPeriodexcludedExtensions  (optional)
    * @return ComAdobeCqHistoryImplHistoryRequestFilterInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqHistoryImplHistoryRequestFilter(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, historyPeriodrequestFilterPeriodexcludedSelectors: kotlin.Array<kotlin.String>, historyPeriodrequestFilterPeriodexcludedExtensions: kotlin.Array<kotlin.String>) : ComAdobeCqHistoryImplHistoryRequestFilterInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "history.requestFilter.excludedSelectors" to toMultiValue(historyPeriodrequestFilterPeriodexcludedSelectors.toList(), "multi"), "history.requestFilter.excludedExtensions" to toMultiValue(historyPeriodrequestFilterPeriodexcludedExtensions.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.history.impl.HistoryRequestFilter",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqHistoryImplHistoryRequestFilterInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqHistoryImplHistoryRequestFilterInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param historyPeriodservicePeriodresourceTypes  (optional)
    * @param historyPeriodservicePeriodpathFilter  (optional)
    * @return ComAdobeCqHistoryImplHistoryServiceImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqHistoryImplHistoryServiceImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, historyPeriodservicePeriodresourceTypes: kotlin.Array<kotlin.String>, historyPeriodservicePeriodpathFilter: kotlin.Array<kotlin.String>) : ComAdobeCqHistoryImplHistoryServiceImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "history.service.resourceTypes" to toMultiValue(historyPeriodservicePeriodresourceTypes.toList(), "multi"), "history.service.pathFilter" to toMultiValue(historyPeriodservicePeriodpathFilter.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.history.impl.HistoryServiceImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqHistoryImplHistoryServiceImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqHistoryImplHistoryServiceImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param inboxPeriodimplPeriodtypeproviderPeriodregistrypaths  (optional)
    * @param inboxPeriodimplPeriodtypeproviderPeriodlegacypaths  (optional)
    * @param inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodfailureitem  (optional)
    * @param inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodworkitem  (optional)
    * @param inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodtask  (optional)
    * @return ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqInboxImplTypeproviderItemTypeProvider(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, inboxPeriodimplPeriodtypeproviderPeriodregistrypaths: kotlin.Array<kotlin.String>, inboxPeriodimplPeriodtypeproviderPeriodlegacypaths: kotlin.Array<kotlin.String>, inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodfailureitem: kotlin.String, inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodworkitem: kotlin.String, inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodtask: kotlin.String) : ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "inbox.impl.typeprovider.registrypaths" to toMultiValue(inboxPeriodimplPeriodtypeproviderPeriodregistrypaths.toList(), "multi"), "inbox.impl.typeprovider.legacypaths" to toMultiValue(inboxPeriodimplPeriodtypeproviderPeriodlegacypaths.toList(), "multi"), "inbox.impl.typeprovider.defaulturl.failureitem" to listOf("$inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodfailureitem"), "inbox.impl.typeprovider.defaulturl.workitem" to listOf("$inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodworkitem"), "inbox.impl.typeprovider.defaulturl.task" to listOf("$inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodtask"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.inbox.impl.typeprovider.ItemTypeProvider",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param imagePeriodquality  (optional)
    * @param imagePeriodsupportedPeriodresolutions  (optional)
    * @return ComAdobeCqProjectsImplServletProjectImageServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqProjectsImplServletProjectImageServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, imagePeriodquality: kotlin.String, imagePeriodsupportedPeriodresolutions: kotlin.String) : ComAdobeCqProjectsImplServletProjectImageServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "image.quality" to listOf("$imagePeriodquality"), "image.supported.resolutions" to listOf("$imagePeriodsupportedPeriodresolutions"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.projects.impl.servlet.ProjectImageServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqProjectsImplServletProjectImageServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqProjectsImplServletProjectImageServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param scheduledpurgePeriodname  (optional)
    * @param scheduledpurgePeriodpurgeActive  (optional)
    * @param scheduledpurgePeriodtemplates  (optional)
    * @param scheduledpurgePeriodpurgeGroups  (optional)
    * @param scheduledpurgePeriodpurgeAssets  (optional)
    * @param scheduledpurgePeriodterminateRunningWorkflows  (optional)
    * @param scheduledpurgePerioddaysold  (optional)
    * @param scheduledpurgePeriodsaveThreshold  (optional)
    * @return ComAdobeCqProjectsPurgeSchedulerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqProjectsPurgeScheduler(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, scheduledpurgePeriodname: kotlin.String, scheduledpurgePeriodpurgeActive: kotlin.Boolean, scheduledpurgePeriodtemplates: kotlin.Array<kotlin.String>, scheduledpurgePeriodpurgeGroups: kotlin.Boolean, scheduledpurgePeriodpurgeAssets: kotlin.Boolean, scheduledpurgePeriodterminateRunningWorkflows: kotlin.Boolean, scheduledpurgePerioddaysold: kotlin.Int, scheduledpurgePeriodsaveThreshold: kotlin.Int) : ComAdobeCqProjectsPurgeSchedulerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "scheduledpurge.name" to listOf("$scheduledpurgePeriodname"), "scheduledpurge.purgeActive" to listOf("$scheduledpurgePeriodpurgeActive"), "scheduledpurge.templates" to toMultiValue(scheduledpurgePeriodtemplates.toList(), "multi"), "scheduledpurge.purgeGroups" to listOf("$scheduledpurgePeriodpurgeGroups"), "scheduledpurge.purgeAssets" to listOf("$scheduledpurgePeriodpurgeAssets"), "scheduledpurge.terminateRunningWorkflows" to listOf("$scheduledpurgePeriodterminateRunningWorkflows"), "scheduledpurge.daysold" to listOf("$scheduledpurgePerioddaysold"), "scheduledpurge.saveThreshold" to listOf("$scheduledpurgePeriodsaveThreshold"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.projects.purge.Scheduler",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqProjectsPurgeSchedulerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqProjectsPurgeSchedulerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param includePeriodpaths  (optional)
    * @param exporterPerioduser  (optional)
    * @return ComAdobeCqScheduledExporterImplScheduledExporterImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqScheduledExporterImplScheduledExporterImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, includePeriodpaths: kotlin.Array<kotlin.String>, exporterPerioduser: kotlin.String) : ComAdobeCqScheduledExporterImplScheduledExporterImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "include.paths" to toMultiValue(includePeriodpaths.toList(), "multi"), "exporter.user" to listOf("$exporterPerioduser"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.scheduled.exporter.impl.ScheduledExporterImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqScheduledExporterImplScheduledExporterImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqScheduledExporterImplScheduledExporterImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodurl  (optional)
    * @param comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodapikey  (optional)
    * @param comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodproject  (optional)
    * @param comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodenvironment  (optional)
    * @param comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodsendFrequency  (optional)
    * @return ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodurl: kotlin.String, comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodapikey: kotlin.String, comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodproject: kotlin.String, comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodenvironment: kotlin.String, comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodsendFrequency: kotlin.Int) : ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "com.adobe.cq.screens.analytics.impl.url" to listOf("$comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodurl"), "com.adobe.cq.screens.analytics.impl.apikey" to listOf("$comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodapikey"), "com.adobe.cq.screens.analytics.impl.project" to listOf("$comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodproject"), "com.adobe.cq.screens.analytics.impl.environment" to listOf("$comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodenvironment"), "com.adobe.cq.screens.analytics.impl.sendFrequency" to listOf("$comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodsendFrequency"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.screens.analytics.impl.ScreensAnalyticsServiceImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param comPeriodadobePeriodaemPeriodscreensPeriodplayerPeriodpingfrequency  (optional)
    * @param comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodspecialchars  (optional)
    * @param comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminlowercasechars  (optional)
    * @param comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminuppercasechars  (optional)
    * @param comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminnumberchars  (optional)
    * @param comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminspecialchars  (optional)
    * @param comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminlength  (optional)
    * @return ComAdobeCqScreensDeviceImplDeviceServiceInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqScreensDeviceImplDeviceService(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, comPeriodadobePeriodaemPeriodscreensPeriodplayerPeriodpingfrequency: kotlin.Int, comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodspecialchars: kotlin.String, comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminlowercasechars: kotlin.Int, comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminuppercasechars: kotlin.Int, comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminnumberchars: kotlin.Int, comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminspecialchars: kotlin.Int, comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminlength: kotlin.Int) : ComAdobeCqScreensDeviceImplDeviceServiceInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "com.adobe.aem.screens.player.pingfrequency" to listOf("$comPeriodadobePeriodaemPeriodscreensPeriodplayerPeriodpingfrequency"), "com.adobe.aem.screens.device.pasword.specialchars" to listOf("$comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodspecialchars"), "com.adobe.aem.screens.device.pasword.minlowercasechars" to listOf("$comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminlowercasechars"), "com.adobe.aem.screens.device.pasword.minuppercasechars" to listOf("$comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminuppercasechars"), "com.adobe.aem.screens.device.pasword.minnumberchars" to listOf("$comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminnumberchars"), "com.adobe.aem.screens.device.pasword.minspecialchars" to listOf("$comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminspecialchars"), "com.adobe.aem.screens.device.pasword.minlength" to listOf("$comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminlength"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.screens.device.impl.DeviceService",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqScreensDeviceImplDeviceServiceInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqScreensDeviceImplDeviceServiceInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param deviceRegistrationTimeout  (optional)
    * @return ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, deviceRegistrationTimeout: kotlin.Int) : ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "deviceRegistrationTimeout" to listOf("$deviceRegistrationTimeout"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.screens.device.registration.impl.RegistrationServiceImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPeriodpagesupdatehandlerPeriodimageresourcetypes  (optional)
    * @param cqPeriodpagesupdatehandlerPeriodproductresourcetypes  (optional)
    * @param cqPeriodpagesupdatehandlerPeriodvideoresourcetypes  (optional)
    * @param cqPeriodpagesupdatehandlerPerioddynamicsequenceresourcetypes  (optional)
    * @param cqPeriodpagesupdatehandlerPeriodpreviewmodepaths  (optional)
    * @return ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqScreensImplHandlerChannelsUpdateHandler(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPeriodpagesupdatehandlerPeriodimageresourcetypes: kotlin.Array<kotlin.String>, cqPeriodpagesupdatehandlerPeriodproductresourcetypes: kotlin.Array<kotlin.String>, cqPeriodpagesupdatehandlerPeriodvideoresourcetypes: kotlin.Array<kotlin.String>, cqPeriodpagesupdatehandlerPerioddynamicsequenceresourcetypes: kotlin.Array<kotlin.String>, cqPeriodpagesupdatehandlerPeriodpreviewmodepaths: kotlin.Array<kotlin.String>) : ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.pagesupdatehandler.imageresourcetypes" to toMultiValue(cqPeriodpagesupdatehandlerPeriodimageresourcetypes.toList(), "multi"), "cq.pagesupdatehandler.productresourcetypes" to toMultiValue(cqPeriodpagesupdatehandlerPeriodproductresourcetypes.toList(), "multi"), "cq.pagesupdatehandler.videoresourcetypes" to toMultiValue(cqPeriodpagesupdatehandlerPeriodvideoresourcetypes.toList(), "multi"), "cq.pagesupdatehandler.dynamicsequenceresourcetypes" to toMultiValue(cqPeriodpagesupdatehandlerPerioddynamicsequenceresourcetypes.toList(), "multi"), "cq.pagesupdatehandler.previewmodepaths" to toMultiValue(cqPeriodpagesupdatehandlerPeriodpreviewmodepaths.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.screens.impl.handler.ChannelsUpdateHandler",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param schedulerPeriodexpression  (optional)
    * @return ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, schedulerPeriodexpression: kotlin.String) : ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "scheduler.expression" to listOf("$schedulerPeriodexpression"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.screens.impl.jobs.DistributedDevicesStatiUpdateJob",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param comPeriodadobePeriodaemPeriodscreensPeriodimplPeriodremotePeriodrequestTimeout  (optional)
    * @return ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqScreensImplRemoteImplDistributedHttpClientImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, comPeriodadobePeriodaemPeriodscreensPeriodimplPeriodremotePeriodrequestTimeout: kotlin.Int) : ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "com.adobe.aem.screens.impl.remote.request_timeout" to listOf("$comPeriodadobePeriodaemPeriodscreensPeriodimplPeriodremotePeriodrequestTimeout"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.screens.impl.remote.impl.DistributedHttpClientImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param screensPeriodchannelsPeriodpropertiesPeriodtoPeriodremove  (optional)
    * @return ComAdobeCqScreensImplScreensChannelPostProcessorInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqScreensImplScreensChannelPostProcessor(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, screensPeriodchannelsPeriodpropertiesPeriodtoPeriodremove: kotlin.Array<kotlin.String>) : ComAdobeCqScreensImplScreensChannelPostProcessorInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "screens.channels.properties.to.remove" to toMultiValue(screensPeriodchannelsPeriodpropertiesPeriodtoPeriodremove.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.screens.impl.ScreensChannelPostProcessor",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqScreensImplScreensChannelPostProcessorInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqScreensImplScreensChannelPostProcessorInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodprojectPath  (optional)
    * @param comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodscheduleFrequency  (optional)
    * @param comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodpingTimeout  (optional)
    * @param comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodrecipients  (optional)
    * @param comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodsmtpserver  (optional)
    * @param comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodsmtpport  (optional)
    * @param comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodusetls  (optional)
    * @param comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodusername  (optional)
    * @param comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodpassword  (optional)
    * @return ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodprojectPath: kotlin.Array<kotlin.String>, comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodscheduleFrequency: kotlin.String, comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodpingTimeout: kotlin.Int, comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodrecipients: kotlin.String, comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodsmtpserver: kotlin.String, comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodsmtpport: kotlin.Int, comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodusetls: kotlin.Boolean, comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodusername: kotlin.String, comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodpassword: kotlin.String) : ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.projectPath" to toMultiValue(comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodprojectPath.toList(), "multi"), "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.scheduleFrequency" to listOf("$comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodscheduleFrequency"), "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.pingTimeout" to listOf("$comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodpingTimeout"), "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.recipients" to listOf("$comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodrecipients"), "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpserver" to listOf("$comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodsmtpserver"), "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpport" to listOf("$comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodsmtpport"), "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.usetls" to listOf("$comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodusetls"), "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.username" to listOf("$comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodusername"), "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.password" to listOf("$comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodpassword"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param servicePeriodranking  (optional)
    * @param globalPeriodsize  (optional)
    * @param maxPerioddiskPeriodusage  (optional)
    * @param persistencePeriodenabled  (optional)
    * @param threadPeriodpoolPeriodmaxPeriodsize  (optional)
    * @param scheduledPeriodthreadPeriodpoolPeriodmaxPeriodsize  (optional)
    * @param gracefulPeriodshutdownPeriodtimeout  (optional)
    * @param queues  (optional)
    * @param topics  (optional)
    * @param addressesPeriodmaxPerioddeliveryPeriodattempts  (optional)
    * @param addressesPeriodexpiryPerioddelay  (optional)
    * @param addressesPeriodaddressPeriodfullPeriodmessagePeriodpolicy  (optional)
    * @param addressesPeriodmaxPeriodsizePeriodbytes  (optional)
    * @param addressesPeriodpagePeriodsizePeriodbytes  (optional)
    * @param addressesPeriodpagePeriodcachePeriodmaxPeriodsize  (optional)
    * @param clusterPerioduser  (optional)
    * @param clusterPeriodpassword  (optional)
    * @param clusterPeriodcallPeriodtimeout  (optional)
    * @param clusterPeriodcallPeriodfailoverPeriodtimeout  (optional)
    * @param clusterPeriodclientPeriodfailurePeriodcheckPeriodperiod  (optional)
    * @param clusterPeriodnotificationPeriodattempts  (optional)
    * @param clusterPeriodnotificationPeriodinterval  (optional)
    * @param idPeriodcachePeriodsize  (optional)
    * @param clusterPeriodconfirmationPeriodwindowPeriodsize  (optional)
    * @param clusterPeriodconnectionPeriodttl  (optional)
    * @param clusterPeriodduplicatePerioddetection  (optional)
    * @param clusterPeriodinitialPeriodconnectPeriodattempts  (optional)
    * @param clusterPeriodmaxPeriodretryPeriodinterval  (optional)
    * @param clusterPeriodminPeriodlargePeriodmessagePeriodsize  (optional)
    * @param clusterPeriodproducerPeriodwindowPeriodsize  (optional)
    * @param clusterPeriodreconnectPeriodattempts  (optional)
    * @param clusterPeriodretryPeriodinterval  (optional)
    * @param clusterPeriodretryPeriodintervalPeriodmultiplier  (optional)
    * @return ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqScreensMqActivemqImplArtemisJMSProvider(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, servicePeriodranking: kotlin.Int, globalPeriodsize: kotlin.Int, maxPerioddiskPeriodusage: kotlin.Int, persistencePeriodenabled: kotlin.Boolean, threadPeriodpoolPeriodmaxPeriodsize: kotlin.Int, scheduledPeriodthreadPeriodpoolPeriodmaxPeriodsize: kotlin.Int, gracefulPeriodshutdownPeriodtimeout: kotlin.Int, queues: kotlin.Array<kotlin.String>, topics: kotlin.Array<kotlin.String>, addressesPeriodmaxPerioddeliveryPeriodattempts: kotlin.Int, addressesPeriodexpiryPerioddelay: kotlin.Int, addressesPeriodaddressPeriodfullPeriodmessagePeriodpolicy: kotlin.String, addressesPeriodmaxPeriodsizePeriodbytes: kotlin.Int, addressesPeriodpagePeriodsizePeriodbytes: kotlin.Int, addressesPeriodpagePeriodcachePeriodmaxPeriodsize: kotlin.Int, clusterPerioduser: kotlin.String, clusterPeriodpassword: kotlin.String, clusterPeriodcallPeriodtimeout: kotlin.Int, clusterPeriodcallPeriodfailoverPeriodtimeout: kotlin.Int, clusterPeriodclientPeriodfailurePeriodcheckPeriodperiod: kotlin.Int, clusterPeriodnotificationPeriodattempts: kotlin.Int, clusterPeriodnotificationPeriodinterval: kotlin.Int, idPeriodcachePeriodsize: kotlin.Int, clusterPeriodconfirmationPeriodwindowPeriodsize: kotlin.Int, clusterPeriodconnectionPeriodttl: kotlin.Int, clusterPeriodduplicatePerioddetection: kotlin.Boolean, clusterPeriodinitialPeriodconnectPeriodattempts: kotlin.Int, clusterPeriodmaxPeriodretryPeriodinterval: kotlin.Int, clusterPeriodminPeriodlargePeriodmessagePeriodsize: kotlin.Int, clusterPeriodproducerPeriodwindowPeriodsize: kotlin.Int, clusterPeriodreconnectPeriodattempts: kotlin.Int, clusterPeriodretryPeriodinterval: kotlin.Int, clusterPeriodretryPeriodintervalPeriodmultiplier: java.math.BigDecimal) : ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "service.ranking" to listOf("$servicePeriodranking"), "global.size" to listOf("$globalPeriodsize"), "max.disk.usage" to listOf("$maxPerioddiskPeriodusage"), "persistence.enabled" to listOf("$persistencePeriodenabled"), "thread.pool.max.size" to listOf("$threadPeriodpoolPeriodmaxPeriodsize"), "scheduled.thread.pool.max.size" to listOf("$scheduledPeriodthreadPeriodpoolPeriodmaxPeriodsize"), "graceful.shutdown.timeout" to listOf("$gracefulPeriodshutdownPeriodtimeout"), "queues" to toMultiValue(queues.toList(), "multi"), "topics" to toMultiValue(topics.toList(), "multi"), "addresses.max.delivery.attempts" to listOf("$addressesPeriodmaxPerioddeliveryPeriodattempts"), "addresses.expiry.delay" to listOf("$addressesPeriodexpiryPerioddelay"), "addresses.address.full.message.policy" to listOf("$addressesPeriodaddressPeriodfullPeriodmessagePeriodpolicy"), "addresses.max.size.bytes" to listOf("$addressesPeriodmaxPeriodsizePeriodbytes"), "addresses.page.size.bytes" to listOf("$addressesPeriodpagePeriodsizePeriodbytes"), "addresses.page.cache.max.size" to listOf("$addressesPeriodpagePeriodcachePeriodmaxPeriodsize"), "cluster.user" to listOf("$clusterPerioduser"), "cluster.password" to listOf("$clusterPeriodpassword"), "cluster.call.timeout" to listOf("$clusterPeriodcallPeriodtimeout"), "cluster.call.failover.timeout" to listOf("$clusterPeriodcallPeriodfailoverPeriodtimeout"), "cluster.client.failure.check.period" to listOf("$clusterPeriodclientPeriodfailurePeriodcheckPeriodperiod"), "cluster.notification.attempts" to listOf("$clusterPeriodnotificationPeriodattempts"), "cluster.notification.interval" to listOf("$clusterPeriodnotificationPeriodinterval"), "id.cache.size" to listOf("$idPeriodcachePeriodsize"), "cluster.confirmation.window.size" to listOf("$clusterPeriodconfirmationPeriodwindowPeriodsize"), "cluster.connection.ttl" to listOf("$clusterPeriodconnectionPeriodttl"), "cluster.duplicate.detection" to listOf("$clusterPeriodduplicatePerioddetection"), "cluster.initial.connect.attempts" to listOf("$clusterPeriodinitialPeriodconnectPeriodattempts"), "cluster.max.retry.interval" to listOf("$clusterPeriodmaxPeriodretryPeriodinterval"), "cluster.min.large.message.size" to listOf("$clusterPeriodminPeriodlargePeriodmessagePeriodsize"), "cluster.producer.window.size" to listOf("$clusterPeriodproducerPeriodwindowPeriodsize"), "cluster.reconnect.attempts" to listOf("$clusterPeriodreconnectPeriodattempts"), "cluster.retry.interval" to listOf("$clusterPeriodretryPeriodinterval"), "cluster.retry.interval.multiplier" to listOf("$clusterPeriodretryPeriodintervalPeriodmultiplier"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.screens.mq.activemq.impl.ArtemisJMSProvider",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param comPeriodadobePeriodcqPeriodscreensPeriodofflinecontentPeriodimplPeriodBulkOfflineUpdateServiceImplPeriodprojectPath  (optional)
    * @param comPeriodadobePeriodcqPeriodscreensPeriodofflinecontentPeriodimplPeriodBulkOfflineUpdateServiceImplPeriodscheduleFrequency  (optional)
    * @return ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, comPeriodadobePeriodcqPeriodscreensPeriodofflinecontentPeriodimplPeriodBulkOfflineUpdateServiceImplPeriodprojectPath: kotlin.Array<kotlin.String>, comPeriodadobePeriodcqPeriodscreensPeriodofflinecontentPeriodimplPeriodBulkOfflineUpdateServiceImplPeriodscheduleFrequency: kotlin.String) : ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.projectPath" to toMultiValue(comPeriodadobePeriodcqPeriodscreensPeriodofflinecontentPeriodimplPeriodBulkOfflineUpdateServiceImplPeriodprojectPath.toList(), "multi"), "com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.scheduleFrequency" to listOf("$comPeriodadobePeriodcqPeriodscreensPeriodofflinecontentPeriodimplPeriodBulkOfflineUpdateServiceImplPeriodscheduleFrequency"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param disableSmartSync  (optional)
    * @return ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, disableSmartSync: kotlin.Boolean) : ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "disableSmartSync" to listOf("$disableSmartSync"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.OfflineContentServiceImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param enableDataTriggeredContent  (optional)
    * @return ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqScreensSegmentationImplSegmentationFeatureFlag(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, enableDataTriggeredContent: kotlin.Boolean) : ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "enableDataTriggeredContent" to listOf("$enableDataTriggeredContent"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.screens.segmentation.impl.SegmentationFeatureFlag",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param hcPeriodtags  (optional)
    * @return ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, hcPeriodtags: kotlin.Array<kotlin.String>) : ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "hc.tags" to toMultiValue(hcPeriodtags.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.security.hc.bundles.impl.HtmlLibraryManagerConfigHealthCheck",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param hcPeriodtags  (optional)
    * @return ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, hcPeriodtags: kotlin.Array<kotlin.String>) : ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "hc.tags" to toMultiValue(hcPeriodtags.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.security.hc.bundles.impl.WcmFilterHealthCheck",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param hcPeriodtags  (optional)
    * @param dispatcherPeriodaddress  (optional)
    * @param dispatcherPeriodfilterPeriodallowed  (optional)
    * @param dispatcherPeriodfilterPeriodblocked  (optional)
    * @return ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, hcPeriodtags: kotlin.Array<kotlin.String>, dispatcherPeriodaddress: kotlin.String, dispatcherPeriodfilterPeriodallowed: kotlin.Array<kotlin.String>, dispatcherPeriodfilterPeriodblocked: kotlin.Array<kotlin.String>) : ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "hc.tags" to toMultiValue(hcPeriodtags.toList(), "multi"), "dispatcher.address" to listOf("$dispatcherPeriodaddress"), "dispatcher.filter.allowed" to toMultiValue(dispatcherPeriodfilterPeriodallowed.toList(), "multi"), "dispatcher.filter.blocked" to toMultiValue(dispatcherPeriodfilterPeriodblocked.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.security.hc.dispatcher.impl.DispatcherAccessHealthCheck",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param hcPeriodtags  (optional)
    * @return ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSecurityHcPackagesImplExampleContentHealthCheck(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, hcPeriodtags: kotlin.Array<kotlin.String>) : ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "hc.tags" to toMultiValue(hcPeriodtags.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.security.hc.packages.impl.ExampleContentHealthCheck",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param hcPeriodtags  (optional)
    * @param webserverPeriodaddress  (optional)
    * @return ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSecurityHcWebserverImplClickjackingHealthCheck(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, hcPeriodtags: kotlin.Array<kotlin.String>, webserverPeriodaddress: kotlin.String) : ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "hc.tags" to toMultiValue(hcPeriodtags.toList(), "multi"), "webserver.address" to listOf("$webserverPeriodaddress"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.security.hc.webserver.impl.ClickjackingHealthCheck",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param enable  (optional)
    * @param ttl1  (optional)
    * @param ttl2  (optional)
    * @return ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialAccountverificationImplAccountManagementConfigIm(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, enable: kotlin.Boolean, ttl1: kotlin.Int, ttl2: kotlin.Int) : ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "enable" to listOf("$enable"), "ttl1" to listOf("$ttl1"), "ttl2" to listOf("$ttl2"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.accountverification.impl.AccountManagementConfigImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param priority  (optional)
    * @return ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialActivitystreamsClientImplSocialActivityComponen(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, priority: kotlin.Int) : ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "priority" to listOf("$priority"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityComponentFactoryImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param priority  (optional)
    * @return ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, priority: kotlin.Int) : ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "priority" to listOf("$priority"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityStreamComponentFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param eventPeriodtopics  (optional)
    * @param eventPeriodfilter  (optional)
    * @return ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialActivitystreamsListenerImplEventListenerHandler(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, eventPeriodtopics: kotlin.String, eventPeriodfilter: kotlin.String) : ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "event.topics" to listOf("$eventPeriodtopics"), "event.filter" to listOf("$eventPeriodfilter"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.EventListenerHandler",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param accepted  (optional)
    * @param ranked  (optional)
    * @return ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialActivitystreamsListenerImplModerationEventExten(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, accepted: kotlin.Boolean, ranked: kotlin.Int) : ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "accepted" to listOf("$accepted"), "ranked" to listOf("$ranked"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ModerationEventExtension",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param ranking  (optional)
    * @param enable  (optional)
    * @return ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, ranking: kotlin.Int, enable: kotlin.Boolean) : ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "ranking" to listOf("$ranking"), "enable" to listOf("$enable"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.RatingEventActivitySuppressor",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param streamPath  (optional)
    * @param streamName  (optional)
    * @return ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialActivitystreamsListenerImplResourceActivityStre(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, streamPath: kotlin.String, streamName: kotlin.String) : ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "streamPath" to listOf("$streamPath"), "streamName" to listOf("$streamName"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ResourceActivityStreamProviderFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param maxRetry  (optional)
    * @param fieldWhitelist  (optional)
    * @param attachmentTypeBlacklist  (optional)
    * @return ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, maxRetry: kotlin.Int, fieldWhitelist: kotlin.Array<kotlin.String>, attachmentTypeBlacklist: kotlin.Array<kotlin.String>) : ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "MaxRetry" to listOf("$maxRetry"), "fieldWhitelist" to toMultiValue(fieldWhitelist.toList(), "multi"), "attachmentTypeBlacklist" to toMultiValue(attachmentTypeBlacklist.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.calendar.client.endpoints.impl.CalendarOperationsImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param attachmentTypeBlacklist  (optional)
    * @param extensionPeriodorder  (optional)
    * @return ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialCalendarClientOperationextensionsEventAttachmen(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, attachmentTypeBlacklist: kotlin.String, extensionPeriodorder: kotlin.Int) : ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "attachmentTypeBlacklist" to listOf("$attachmentTypeBlacklist"), "extension.order" to listOf("$extensionPeriodorder"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.calendar.client.operationextensions.EventAttachment",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param timezonesPeriodexpirytime  (optional)
    * @return ComAdobeCqSocialCalendarServletsTimeZoneServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialCalendarServletsTimeZoneServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, timezonesPeriodexpirytime: kotlin.Int) : ComAdobeCqSocialCalendarServletsTimeZoneServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "timezones.expirytime" to listOf("$timezonesPeriodexpirytime"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.calendar.servlets.TimeZoneServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialCalendarServletsTimeZoneServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialCalendarServletsTimeZoneServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param ranking  (optional)
    * @return ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, ranking: kotlin.Int) : ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "ranking" to listOf("$ranking"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentDeleteEventActivitySuppressor",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param fieldWhitelist  (optional)
    * @param attachmentTypeBlacklist  (optional)
    * @return ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, fieldWhitelist: kotlin.Array<kotlin.String>, attachmentTypeBlacklist: kotlin.Array<kotlin.String>) : ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "fieldWhitelist" to toMultiValue(fieldWhitelist.toList(), "multi"), "attachmentTypeBlacklist" to toMultiValue(attachmentTypeBlacklist.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentOperationService",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param fieldWhitelist  (optional)
    * @param attachmentTypeBlacklist  (optional)
    * @return ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, fieldWhitelist: kotlin.Array<kotlin.String>, attachmentTypeBlacklist: kotlin.Array<kotlin.String>) : ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "fieldWhitelist" to toMultiValue(fieldWhitelist.toList(), "multi"), "attachmentTypeBlacklist" to toMultiValue(attachmentTypeBlacklist.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.TranslationOperationService",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param numUserLimit  (optional)
    * @return ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, numUserLimit: kotlin.Int) : ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "numUserLimit" to listOf("$numUserLimit"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.commons.comments.listing.impl.SearchCommentSocialComponentListProvider",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param enableScheduledPostsSearch  (optional)
    * @param numberOfMinutes  (optional)
    * @param maxSearchLimit  (optional)
    * @return ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, enableScheduledPostsSearch: kotlin.Boolean, numberOfMinutes: kotlin.Int, maxSearchLimit: kotlin.Int) : ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "enableScheduledPostsSearch" to listOf("$enableScheduledPostsSearch"), "numberOfMinutes" to listOf("$numberOfMinutes"), "maxSearchLimit" to listOf("$maxSearchLimit"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.commons.comments.scheduler.impl.SearchScheduledPosts",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param corsPeriodenabling  (optional)
    * @return ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialCommonsCorsCORSAuthenticationFilter(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, corsPeriodenabling: kotlin.Boolean) : ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cors.enabling" to listOf("$corsPeriodenabling"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.commons.cors.CORSAuthenticationFilter",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param priorityOrder  (optional)
    * @param replyEmailPatterns  (optional)
    * @return ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, priorityOrder: kotlin.Int, replyEmailPatterns: kotlin.Array<kotlin.String>) : ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "priorityOrder" to listOf("$priorityOrder"), "replyEmailPatterns" to toMultiValue(replyEmailPatterns.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.AndroidEmailClientProvider",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param contextPeriodpath  (optional)
    * @return ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, contextPeriodpath: kotlin.String) : ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "context.path" to listOf("$contextPeriodpath"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailBuilderImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param eventPeriodtopics  (optional)
    * @return ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, eventPeriodtopics: kotlin.String) : ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "event.topics" to listOf("$eventPeriodtopics"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailEventListener",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param priorityOrder  (optional)
    * @param replyEmailPatterns  (optional)
    * @return ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, priorityOrder: kotlin.Int, replyEmailPatterns: kotlin.Array<kotlin.String>) : ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "priorityOrder" to listOf("$priorityOrder"), "replyEmailPatterns" to toMultiValue(replyEmailPatterns.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CustomEmailClientProvider",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param patternPeriodtime  (optional)
    * @param patternPeriodnewline  (optional)
    * @param patternPerioddayOfMonth  (optional)
    * @param patternPeriodmonth  (optional)
    * @param patternPeriodyear  (optional)
    * @param patternPerioddate  (optional)
    * @param patternPerioddateTime  (optional)
    * @param patternPeriodemail  (optional)
    * @return ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, patternPeriodtime: kotlin.String, patternPeriodnewline: kotlin.String, patternPerioddayOfMonth: kotlin.String, patternPeriodmonth: kotlin.String, patternPeriodyear: kotlin.String, patternPerioddate: kotlin.String, patternPerioddateTime: kotlin.String, patternPeriodemail: kotlin.String) : ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "pattern.time" to listOf("$patternPeriodtime"), "pattern.newline" to listOf("$patternPeriodnewline"), "pattern.dayOfMonth" to listOf("$patternPerioddayOfMonth"), "pattern.month" to listOf("$patternPeriodmonth"), "pattern.year" to listOf("$patternPeriodyear"), "pattern.date" to listOf("$patternPerioddate"), "pattern.dateTime" to listOf("$patternPerioddateTime"), "pattern.email" to listOf("$patternPeriodemail"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailQuotedTextPatternsImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param emailPeriodname  (optional)
    * @param emailPeriodcreatePostFromReply  (optional)
    * @param emailPeriodaddCommentIdTo  (optional)
    * @param emailPeriodsubjectMaximumLength  (optional)
    * @param emailPeriodreplyToAddress  (optional)
    * @param emailPeriodreplyToDelimiter  (optional)
    * @param emailPeriodtrackerIdPrefixInSubject  (optional)
    * @param emailPeriodtrackerIdPrefixInBody  (optional)
    * @param emailPeriodasHTML  (optional)
    * @param emailPerioddefaultUserName  (optional)
    * @param emailPeriodtemplatesPeriodrootPath  (optional)
    * @return ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, emailPeriodname: kotlin.String, emailPeriodcreatePostFromReply: kotlin.Boolean, emailPeriodaddCommentIdTo: kotlin.String, emailPeriodsubjectMaximumLength: kotlin.Int, emailPeriodreplyToAddress: kotlin.String, emailPeriodreplyToDelimiter: kotlin.String, emailPeriodtrackerIdPrefixInSubject: kotlin.String, emailPeriodtrackerIdPrefixInBody: kotlin.String, emailPeriodasHTML: kotlin.Boolean, emailPerioddefaultUserName: kotlin.String, emailPeriodtemplatesPeriodrootPath: kotlin.String) : ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "email.name" to listOf("$emailPeriodname"), "email.createPostFromReply" to listOf("$emailPeriodcreatePostFromReply"), "email.addCommentIdTo" to listOf("$emailPeriodaddCommentIdTo"), "email.subjectMaximumLength" to listOf("$emailPeriodsubjectMaximumLength"), "email.replyToAddress" to listOf("$emailPeriodreplyToAddress"), "email.replyToDelimiter" to listOf("$emailPeriodreplyToDelimiter"), "email.trackerIdPrefixInSubject" to listOf("$emailPeriodtrackerIdPrefixInSubject"), "email.trackerIdPrefixInBody" to listOf("$emailPeriodtrackerIdPrefixInBody"), "email.asHTML" to listOf("$emailPeriodasHTML"), "email.defaultUserName" to listOf("$emailPerioddefaultUserName"), "email.templates.rootPath" to listOf("$emailPeriodtemplatesPeriodrootPath"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyConfigurationImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param connectProtocol  (optional)
    * @return ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, connectProtocol: kotlin.String) : ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "connectProtocol" to listOf("$connectProtocol"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyImporter",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param priorityOrder  (optional)
    * @param replyEmailPatterns  (optional)
    * @return ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, priorityOrder: kotlin.Int, replyEmailPatterns: kotlin.Array<kotlin.String>) : ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "priorityOrder" to listOf("$priorityOrder"), "replyEmailPatterns" to toMultiValue(replyEmailPatterns.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.GmailEmailClientProvider",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param priorityOrder  (optional)
    * @param replyEmailPatterns  (optional)
    * @return ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, priorityOrder: kotlin.Int, replyEmailPatterns: kotlin.Array<kotlin.String>) : ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "priorityOrder" to listOf("$priorityOrder"), "replyEmailPatterns" to toMultiValue(replyEmailPatterns.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.IOSEmailClientProvider",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param priorityOrder  (optional)
    * @param replyEmailPatterns  (optional)
    * @return ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, priorityOrder: kotlin.Int, replyEmailPatterns: kotlin.Array<kotlin.String>) : ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "priorityOrder" to listOf("$priorityOrder"), "replyEmailPatterns" to toMultiValue(replyEmailPatterns.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.MacmailEmailClientProvider",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param priorityOrder  (optional)
    * @param replyEmailPatterns  (optional)
    * @return ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, priorityOrder: kotlin.Int, replyEmailPatterns: kotlin.Array<kotlin.String>) : ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "priorityOrder" to listOf("$priorityOrder"), "replyEmailPatterns" to toMultiValue(replyEmailPatterns.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.OutLookEmailClientProvider",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param replyEmailPatterns  (optional)
    * @param priorityOrder  (optional)
    * @return ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, replyEmailPatterns: kotlin.Array<kotlin.String>, priorityOrder: kotlin.Int) : ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "replyEmailPatterns" to toMultiValue(replyEmailPatterns.toList(), "multi"), "priorityOrder" to listOf("$priorityOrder"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.UnknownEmailClientProvider",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param priorityOrder  (optional)
    * @param replyEmailPatterns  (optional)
    * @return ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, priorityOrder: kotlin.Int, replyEmailPatterns: kotlin.Array<kotlin.String>) : ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "priorityOrder" to listOf("$priorityOrder"), "replyEmailPatterns" to toMultiValue(replyEmailPatterns.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.YahooEmailClientProvider",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param numberOfDays  (optional)
    * @param ageOfFile  (optional)
    * @return ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, numberOfDays: kotlin.Int, ageOfFile: kotlin.Int) : ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "numberOfDays" to listOf("$numberOfDays"), "ageOfFile" to listOf("$ageOfFile"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.commons.maintainance.impl.DeleteTempUGCImageUploads",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param eventPeriodtopics  (optional)
    * @param eventPeriodfilter  (optional)
    * @param verbs  (optional)
    * @return ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, eventPeriodtopics: kotlin.String, eventPeriodfilter: kotlin.String, verbs: kotlin.Array<kotlin.String>) : ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "event.topics" to listOf("$eventPeriodtopics"), "event.filter" to listOf("$eventPeriodfilter"), "verbs" to toMultiValue(verbs.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.commons.ugclimiter.impl.UGCLimiterServiceImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param enable  (optional)
    * @param uGCLimit  (optional)
    * @param ugcLimitDuration  (optional)
    * @param domains  (optional)
    * @param toList  (optional)
    * @return ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, enable: kotlin.Boolean, uGCLimit: kotlin.Int, ugcLimitDuration: kotlin.Int, domains: kotlin.Array<kotlin.String>, toList: kotlin.Array<kotlin.String>) : ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "enable" to listOf("$enable"), "UGCLimit" to listOf("$uGCLimit"), "ugcLimitDuration" to listOf("$ugcLimitDuration"), "domains" to toMultiValue(domains.toList(), "multi"), "toList" to toMultiValue(toList.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.commons.ugclimitsconfig.impl.CommunityUserUGCLimitsConfigImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param oauthPeriodproviderPeriodid  (optional)
    * @param oauthPeriodcloudPeriodconfigPeriodroot  (optional)
    * @param providerPeriodconfigPeriodroot  (optional)
    * @param providerPeriodconfigPeriodcreatePeriodtagsPeriodenabled  (optional)
    * @param providerPeriodconfigPerioduserPeriodfolder  (optional)
    * @param providerPeriodconfigPeriodfacebookPeriodfetchPeriodfields  (optional)
    * @param providerPeriodconfigPeriodfacebookPeriodfields  (optional)
    * @param providerPeriodconfigPeriodrefreshPerioduserdataPeriodenabled  (optional)
    * @return ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialConnectOauthImplFacebookProviderImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, oauthPeriodproviderPeriodid: kotlin.String, oauthPeriodcloudPeriodconfigPeriodroot: kotlin.String, providerPeriodconfigPeriodroot: kotlin.String, providerPeriodconfigPeriodcreatePeriodtagsPeriodenabled: kotlin.Boolean, providerPeriodconfigPerioduserPeriodfolder: kotlin.String, providerPeriodconfigPeriodfacebookPeriodfetchPeriodfields: kotlin.Boolean, providerPeriodconfigPeriodfacebookPeriodfields: kotlin.Array<kotlin.String>, providerPeriodconfigPeriodrefreshPerioduserdataPeriodenabled: kotlin.Boolean) : ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "oauth.provider.id" to listOf("$oauthPeriodproviderPeriodid"), "oauth.cloud.config.root" to listOf("$oauthPeriodcloudPeriodconfigPeriodroot"), "provider.config.root" to listOf("$providerPeriodconfigPeriodroot"), "provider.config.create.tags.enabled" to listOf("$providerPeriodconfigPeriodcreatePeriodtagsPeriodenabled"), "provider.config.user.folder" to listOf("$providerPeriodconfigPerioduserPeriodfolder"), "provider.config.facebook.fetch.fields" to listOf("$providerPeriodconfigPeriodfacebookPeriodfetchPeriodfields"), "provider.config.facebook.fields" to toMultiValue(providerPeriodconfigPeriodfacebookPeriodfields.toList(), "multi"), "provider.config.refresh.userdata.enabled" to listOf("$providerPeriodconfigPeriodrefreshPerioduserdataPeriodenabled"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.FacebookProviderImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param path  (optional)
    * @param servicePeriodranking  (optional)
    * @return ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, path: kotlin.Array<kotlin.String>, servicePeriodranking: kotlin.Int) : ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "path" to toMultiValue(path.toList(), "multi"), "service.ranking" to listOf("$servicePeriodranking"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthAuthenticationHandler",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param facebook  (optional)
    * @param twitter  (optional)
    * @param providerPeriodconfigPerioduserPeriodfolder  (optional)
    * @return ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, facebook: kotlin.Array<kotlin.String>, twitter: kotlin.Array<kotlin.String>, providerPeriodconfigPerioduserPeriodfolder: kotlin.String) : ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "facebook" to toMultiValue(facebook.toList(), "multi"), "twitter" to toMultiValue(twitter.toList(), "multi"), "provider.config.user.folder" to listOf("$providerPeriodconfigPerioduserPeriodfolder"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthUserProfileMapper",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param oauthPeriodproviderPeriodid  (optional)
    * @param oauthPeriodcloudPeriodconfigPeriodroot  (optional)
    * @param providerPeriodconfigPeriodroot  (optional)
    * @param providerPeriodconfigPerioduserPeriodfolder  (optional)
    * @param providerPeriodconfigPeriodtwitterPeriodenablePeriodparams  (optional)
    * @param providerPeriodconfigPeriodtwitterPeriodparams  (optional)
    * @param providerPeriodconfigPeriodrefreshPerioduserdataPeriodenabled  (optional)
    * @return ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialConnectOauthImplTwitterProviderImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, oauthPeriodproviderPeriodid: kotlin.String, oauthPeriodcloudPeriodconfigPeriodroot: kotlin.String, providerPeriodconfigPeriodroot: kotlin.String, providerPeriodconfigPerioduserPeriodfolder: kotlin.String, providerPeriodconfigPeriodtwitterPeriodenablePeriodparams: kotlin.Boolean, providerPeriodconfigPeriodtwitterPeriodparams: kotlin.Array<kotlin.String>, providerPeriodconfigPeriodrefreshPerioduserdataPeriodenabled: kotlin.Boolean) : ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "oauth.provider.id" to listOf("$oauthPeriodproviderPeriodid"), "oauth.cloud.config.root" to listOf("$oauthPeriodcloudPeriodconfigPeriodroot"), "provider.config.root" to listOf("$providerPeriodconfigPeriodroot"), "provider.config.user.folder" to listOf("$providerPeriodconfigPerioduserPeriodfolder"), "provider.config.twitter.enable.params" to listOf("$providerPeriodconfigPeriodtwitterPeriodenablePeriodparams"), "provider.config.twitter.params" to toMultiValue(providerPeriodconfigPeriodtwitterPeriodparams.toList(), "multi"), "provider.config.refresh.userdata.enabled" to listOf("$providerPeriodconfigPeriodrefreshPerioduserdataPeriodenabled"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.TwitterProviderImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPeriodsocialPeriodcontentPeriodfragmentsPeriodservicesPeriodenabled  (optional)
    * @param cqPeriodsocialPeriodcontentPeriodfragmentsPeriodservicesPeriodwaitTimeSeconds  (optional)
    * @return ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPeriodsocialPeriodcontentPeriodfragmentsPeriodservicesPeriodenabled: kotlin.Boolean, cqPeriodsocialPeriodcontentPeriodfragmentsPeriodservicesPeriodwaitTimeSeconds: kotlin.Int) : ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.social.content.fragments.services.enabled" to listOf("$cqPeriodsocialPeriodcontentPeriodfragmentsPeriodservicesPeriodenabled"), "cq.social.content.fragments.services.waitTimeSeconds" to listOf("$cqPeriodsocialPeriodcontentPeriodfragmentsPeriodservicesPeriodwaitTimeSeconds"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.content.fragments.services.impl.CommunitiesFragmentCreationServiceImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param versionPeriodid  (optional)
    * @param cachePeriodon  (optional)
    * @param concurrencyPeriodlevel  (optional)
    * @param cachePeriodstartPeriodsize  (optional)
    * @param cachePeriodttl  (optional)
    * @param cachePeriodsize  (optional)
    * @param timePeriodlimit  (optional)
    * @return ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialDatastoreAsImplASResourceProviderFactory(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, versionPeriodid: kotlin.String, cachePeriodon: kotlin.Boolean, concurrencyPeriodlevel: kotlin.Int, cachePeriodstartPeriodsize: kotlin.Int, cachePeriodttl: kotlin.Int, cachePeriodsize: kotlin.Int, timePeriodlimit: kotlin.Int) : ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "version.id" to listOf("$versionPeriodid"), "cache.on" to listOf("$cachePeriodon"), "concurrency.level" to listOf("$concurrencyPeriodlevel"), "cache.start.size" to listOf("$cachePeriodstartPeriodsize"), "cache.ttl" to listOf("$cachePeriodttl"), "cache.size" to listOf("$cachePeriodsize"), "time.limit" to listOf("$timePeriodlimit"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.datastore.as.impl.ASResourceProviderFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param solrPeriodzkPeriodtimeout  (optional)
    * @param solrPeriodcommit  (optional)
    * @param cachePeriodon  (optional)
    * @param concurrencyPeriodlevel  (optional)
    * @param cachePeriodstartPeriodsize  (optional)
    * @param cachePeriodttl  (optional)
    * @param cachePeriodsize  (optional)
    * @return ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, solrPeriodzkPeriodtimeout: kotlin.String, solrPeriodcommit: kotlin.String, cachePeriodon: kotlin.Boolean, concurrencyPeriodlevel: kotlin.Int, cachePeriodstartPeriodsize: kotlin.Int, cachePeriodttl: kotlin.Int, cachePeriodsize: kotlin.Int) : ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "solr.zk.timeout" to listOf("$solrPeriodzkPeriodtimeout"), "solr.commit" to listOf("$solrPeriodcommit"), "cache.on" to listOf("$cachePeriodon"), "concurrency.level" to listOf("$concurrencyPeriodlevel"), "cache.start.size" to listOf("$cachePeriodstartPeriodsize"), "cache.ttl" to listOf("$cachePeriodttl"), "cache.size" to listOf("$cachePeriodsize"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.datastore.op.impl.SocialMSResourceProviderFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param solrPeriodzkPeriodtimeout  (optional)
    * @param solrPeriodcommit  (optional)
    * @param cachePeriodon  (optional)
    * @param concurrencyPeriodlevel  (optional)
    * @param cachePeriodstartPeriodsize  (optional)
    * @param cachePeriodttl  (optional)
    * @param cachePeriodsize  (optional)
    * @return ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, solrPeriodzkPeriodtimeout: kotlin.String, solrPeriodcommit: kotlin.String, cachePeriodon: kotlin.Boolean, concurrencyPeriodlevel: kotlin.Int, cachePeriodstartPeriodsize: kotlin.Int, cachePeriodttl: kotlin.Int, cachePeriodsize: kotlin.Int) : ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "solr.zk.timeout" to listOf("$solrPeriodzkPeriodtimeout"), "solr.commit" to listOf("$solrPeriodcommit"), "cache.on" to listOf("$cachePeriodon"), "concurrency.level" to listOf("$concurrencyPeriodlevel"), "cache.start.size" to listOf("$cachePeriodstartPeriodsize"), "cache.ttl" to listOf("$cachePeriodttl"), "cache.size" to listOf("$cachePeriodsize"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.datastore.rdb.impl.SocialRDBResourceProviderFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param isMemberCheck  (optional)
    * @return ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, isMemberCheck: kotlin.Boolean) : ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "isMemberCheck" to listOf("$isMemberCheck"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementLearningPathAdaptorFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param isMemberCheck  (optional)
    * @return ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, isMemberCheck: kotlin.Boolean) : ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "isMemberCheck" to listOf("$isMemberCheck"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementResourceAdaptorFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param fieldWhitelist  (optional)
    * @return ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, fieldWhitelist: kotlin.Array<kotlin.String>) : ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "fieldWhitelist" to toMultiValue(fieldWhitelist.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.enablement.learningpath.endpoints.impl.EnablementLearningPathModelOperationService",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param fieldWhitelist  (optional)
    * @return ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialEnablementResourceEndpointsImplEnablementResou(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, fieldWhitelist: kotlin.Array<kotlin.String>) : ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "fieldWhitelist" to toMultiValue(fieldWhitelist.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.enablement.resource.endpoints.impl.EnablementResourceModelOperationService",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param servicePeriodranking  (optional)
    * @return ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialEnablementServicesImplAuthorMarkerImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, servicePeriodranking: kotlin.Int) : ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "service.ranking" to listOf("$servicePeriodranking"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.enablement.services.impl.AuthorMarkerImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param slingPeriodservletPeriodselectors  (optional)
    * @param slingPeriodservletPeriodextensions  (optional)
    * @return ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, slingPeriodservletPeriodselectors: kotlin.String, slingPeriodservletPeriodextensions: kotlin.String) : ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "sling.servlet.selectors" to listOf("$slingPeriodservletPeriodselectors"), "sling.servlet.extensions" to listOf("$slingPeriodservletPeriodextensions"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.FilelibraryDownloadGetServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param fieldWhitelist  (optional)
    * @param attachmentTypeBlacklist  (optional)
    * @return ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, fieldWhitelist: kotlin.Array<kotlin.String>, attachmentTypeBlacklist: kotlin.Array<kotlin.String>) : ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "fieldWhitelist" to toMultiValue(fieldWhitelist.toList(), "multi"), "attachmentTypeBlacklist" to toMultiValue(attachmentTypeBlacklist.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.impl.FileLibraryOperationsService",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param fieldWhitelist  (optional)
    * @param attachmentTypeBlacklist  (optional)
    * @return ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialForumClientEndpointsImplForumOperationsService(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, fieldWhitelist: kotlin.Array<kotlin.String>, attachmentTypeBlacklist: kotlin.Array<kotlin.String>) : ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "fieldWhitelist" to toMultiValue(fieldWhitelist.toList(), "multi"), "attachmentTypeBlacklist" to toMultiValue(attachmentTypeBlacklist.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.forum.client.endpoints.impl.ForumOperationsService",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param extensionPeriodorder  (optional)
    * @param flushPeriodforumontopic  (optional)
    * @return ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialForumDispatcherImplFlushOperations(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, extensionPeriodorder: kotlin.Int, flushPeriodforumontopic: kotlin.Boolean) : ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "extension.order" to listOf("$extensionPeriodorder"), "flush.forumontopic" to listOf("$flushPeriodforumontopic"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.forum.dispatcher.impl.FlushOperations",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param groupPeriodlistingPeriodpaginationPeriodenable  (optional)
    * @param groupPeriodlistingPeriodlazyloadingPeriodenable  (optional)
    * @param pagePeriodsize  (optional)
    * @param priority  (optional)
    * @return ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, groupPeriodlistingPeriodpaginationPeriodenable: kotlin.Boolean, groupPeriodlistingPeriodlazyloadingPeriodenable: kotlin.Boolean, pagePeriodsize: kotlin.Int, priority: kotlin.Int) : ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "group.listing.pagination.enable" to listOf("$groupPeriodlistingPeriodpaginationPeriodenable"), "group.listing.lazyloading.enable" to listOf("$groupPeriodlistingPeriodlazyloadingPeriodenable"), "page.size" to listOf("$pagePeriodsize"), "priority" to listOf("$priority"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.group.client.impl.CommunityGroupCollectionComponentFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param maxWaitTime  (optional)
    * @param minWaitBetweenRetries  (optional)
    * @return ComAdobeCqSocialGroupImplGroupServiceImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialGroupImplGroupServiceImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, maxWaitTime: kotlin.Int, minWaitBetweenRetries: kotlin.Int) : ComAdobeCqSocialGroupImplGroupServiceImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "maxWaitTime" to listOf("$maxWaitTime"), "minWaitBetweenRetries" to listOf("$minWaitBetweenRetries"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.group.impl.GroupServiceImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialGroupImplGroupServiceImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialGroupImplGroupServiceImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param parameterPeriodguavaPeriodcachePeriodenabled  (optional)
    * @param parameterPeriodguavaPeriodcachePeriodparams  (optional)
    * @param parameterPeriodguavaPeriodcachePeriodreload  (optional)
    * @param servicePeriodranking  (optional)
    * @return ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialHandlebarsGuavaTemplateCacheImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, parameterPeriodguavaPeriodcachePeriodenabled: kotlin.Boolean, parameterPeriodguavaPeriodcachePeriodparams: kotlin.String, parameterPeriodguavaPeriodcachePeriodreload: kotlin.Boolean, servicePeriodranking: kotlin.Int) : ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "parameter.guava.cache.enabled" to listOf("$parameterPeriodguavaPeriodcachePeriodenabled"), "parameter.guava.cache.params" to listOf("$parameterPeriodguavaPeriodcachePeriodparams"), "parameter.guava.cache.reload" to listOf("$parameterPeriodguavaPeriodcachePeriodreload"), "service.ranking" to listOf("$servicePeriodranking"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.handlebars.GuavaTemplateCacheImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param fieldWhitelist  (optional)
    * @param attachmentTypeBlacklist  (optional)
    * @return ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, fieldWhitelist: kotlin.Array<kotlin.String>, attachmentTypeBlacklist: kotlin.Array<kotlin.String>) : ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "fieldWhitelist" to toMultiValue(fieldWhitelist.toList(), "multi"), "attachmentTypeBlacklist" to toMultiValue(attachmentTypeBlacklist.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.ideation.client.endpoints.impl.IdeationOperationsService",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param fieldWhitelist  (optional)
    * @param attachmentTypeBlacklist  (optional)
    * @return ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, fieldWhitelist: kotlin.Array<kotlin.String>, attachmentTypeBlacklist: kotlin.Array<kotlin.String>) : ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "fieldWhitelist" to toMultiValue(fieldWhitelist.toList(), "multi"), "attachmentTypeBlacklist" to toMultiValue(attachmentTypeBlacklist.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.journal.client.endpoints.impl.JournalOperationsService",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param fieldWhitelist  (optional)
    * @return ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, fieldWhitelist: kotlin.Array<kotlin.String>) : ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "fieldWhitelist" to toMultiValue(fieldWhitelist.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberGroupProfileOperationService",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param fieldWhitelist  (optional)
    * @return ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, fieldWhitelist: kotlin.Array<kotlin.String>) : ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "fieldWhitelist" to toMultiValue(fieldWhitelist.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberUserProfileOperationService",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param everyoneLimit  (optional)
    * @param priority  (optional)
    * @return ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, everyoneLimit: kotlin.Int, priority: kotlin.Int) : ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "everyoneLimit" to listOf("$everyoneLimit"), "priority" to listOf("$priority"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.members.impl.CommunityMemberGroupProfileComponentFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param messagePeriodproperties  (optional)
    * @param messageBoxSizeLimit  (optional)
    * @param messageCountLimit  (optional)
    * @param notifyFailure  (optional)
    * @param failureMessageFrom  (optional)
    * @param failureTemplatePath  (optional)
    * @param maxRetries  (optional)
    * @param minWaitBetweenRetries  (optional)
    * @param countUpdatePoolSize  (optional)
    * @param inboxPeriodpath  (optional)
    * @param sentitemsPeriodpath  (optional)
    * @param supportAttachments  (optional)
    * @param supportGroupMessaging  (optional)
    * @param maxTotalRecipients  (optional)
    * @param batchSize  (optional)
    * @param maxTotalAttachmentSize  (optional)
    * @param attachmentTypeBlacklist  (optional)
    * @param allowedAttachmentTypes  (optional)
    * @param serviceSelector  (optional)
    * @param fieldWhitelist  (optional)
    * @return ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialMessagingClientEndpointsImplMessagingOperation(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, messagePeriodproperties: kotlin.Array<kotlin.String>, messageBoxSizeLimit: kotlin.Int, messageCountLimit: kotlin.Int, notifyFailure: kotlin.Boolean, failureMessageFrom: kotlin.String, failureTemplatePath: kotlin.String, maxRetries: kotlin.Int, minWaitBetweenRetries: kotlin.Int, countUpdatePoolSize: kotlin.Int, inboxPeriodpath: kotlin.String, sentitemsPeriodpath: kotlin.String, supportAttachments: kotlin.Boolean, supportGroupMessaging: kotlin.Boolean, maxTotalRecipients: kotlin.Int, batchSize: kotlin.Int, maxTotalAttachmentSize: kotlin.Int, attachmentTypeBlacklist: kotlin.Array<kotlin.String>, allowedAttachmentTypes: kotlin.Array<kotlin.String>, serviceSelector: kotlin.String, fieldWhitelist: kotlin.Array<kotlin.String>) : ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "message.properties" to toMultiValue(messagePeriodproperties.toList(), "multi"), "messageBoxSizeLimit" to listOf("$messageBoxSizeLimit"), "messageCountLimit" to listOf("$messageCountLimit"), "notifyFailure" to listOf("$notifyFailure"), "failureMessageFrom" to listOf("$failureMessageFrom"), "failureTemplatePath" to listOf("$failureTemplatePath"), "maxRetries" to listOf("$maxRetries"), "minWaitBetweenRetries" to listOf("$minWaitBetweenRetries"), "countUpdatePoolSize" to listOf("$countUpdatePoolSize"), "inbox.path" to listOf("$inboxPeriodpath"), "sentitems.path" to listOf("$sentitemsPeriodpath"), "supportAttachments" to listOf("$supportAttachments"), "supportGroupMessaging" to listOf("$supportGroupMessaging"), "maxTotalRecipients" to listOf("$maxTotalRecipients"), "batchSize" to listOf("$batchSize"), "maxTotalAttachmentSize" to listOf("$maxTotalAttachmentSize"), "attachmentTypeBlacklist" to toMultiValue(attachmentTypeBlacklist.toList(), "multi"), "allowedAttachmentTypes" to toMultiValue(allowedAttachmentTypes.toList(), "multi"), "serviceSelector" to listOf("$serviceSelector"), "fieldWhitelist" to toMultiValue(fieldWhitelist.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.messaging.client.endpoints.impl.MessagingOperationsServiceImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param resourceTypePeriodfilters  (optional)
    * @param priority  (optional)
    * @return ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, resourceTypePeriodfilters: kotlin.Array<kotlin.String>, priority: kotlin.Int) : ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "resourceType.filters" to toMultiValue(resourceTypePeriodfilters.toList(), "multi"), "priority" to listOf("$priority"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.FilterGroupSocialComponentFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param priority  (optional)
    * @return ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialModerationDashboardApiModerationDashboardSocial(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, priority: kotlin.Int) : ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "priority" to listOf("$priority"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.ModerationDashboardSocialComponentFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param priority  (optional)
    * @return ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, priority: kotlin.Int) : ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "priority" to listOf("$priority"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.UserDetailsSocialComponentFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param resourceTypePeriodfilters  (optional)
    * @param priority  (optional)
    * @return ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, resourceTypePeriodfilters: kotlin.Array<kotlin.String>, priority: kotlin.Int) : ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "resourceType.filters" to toMultiValue(resourceTypePeriodfilters.toList(), "multi"), "priority" to listOf("$priority"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.internal.impl.FilterGroupSocialComponentFactoryV2",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param eventPeriodtopics  (optional)
    * @param eventPeriodfilter  (optional)
    * @return ComAdobeCqSocialNotificationsImplMentionsRouterInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialNotificationsImplMentionsRouter(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, eventPeriodtopics: kotlin.String, eventPeriodfilter: kotlin.String) : ComAdobeCqSocialNotificationsImplMentionsRouterInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "event.topics" to listOf("$eventPeriodtopics"), "event.filter" to listOf("$eventPeriodfilter"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.notifications.impl.MentionsRouter",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialNotificationsImplMentionsRouterInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialNotificationsImplMentionsRouterInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param maxPeriodunreadPeriodnotificationPeriodcount  (optional)
    * @return ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialNotificationsImplNotificationManagerImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, maxPeriodunreadPeriodnotificationPeriodcount: kotlin.Int) : ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "max.unread.notification.count" to listOf("$maxPeriodunreadPeriodnotificationPeriodcount"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationManagerImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param eventPeriodtopics  (optional)
    * @param eventPeriodfilter  (optional)
    * @return ComAdobeCqSocialNotificationsImplNotificationsRouterInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialNotificationsImplNotificationsRouter(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, eventPeriodtopics: kotlin.String, eventPeriodfilter: kotlin.String) : ComAdobeCqSocialNotificationsImplNotificationsRouterInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "event.topics" to listOf("$eventPeriodtopics"), "event.filter" to listOf("$eventPeriodfilter"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationsRouter",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialNotificationsImplNotificationsRouterInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialNotificationsImplNotificationsRouterInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param fieldWhitelist  (optional)
    * @param attachmentTypeBlacklist  (optional)
    * @return ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, fieldWhitelist: kotlin.Array<kotlin.String>, attachmentTypeBlacklist: kotlin.Array<kotlin.String>) : ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "fieldWhitelist" to toMultiValue(fieldWhitelist.toList(), "multi"), "attachmentTypeBlacklist" to toMultiValue(attachmentTypeBlacklist.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.qna.client.endpoints.impl.QnaForumOperationsService",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPeriodsocialPeriodreportingPeriodanalyticsPeriodpollingPeriodimporterPeriodinterval  (optional)
    * @param cqPeriodsocialPeriodreportingPeriodanalyticsPeriodpollingPeriodimporterPeriodpageSize  (optional)
    * @return ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPeriodsocialPeriodreportingPeriodanalyticsPeriodpollingPeriodimporterPeriodinterval: kotlin.Int, cqPeriodsocialPeriodreportingPeriodanalyticsPeriodpollingPeriodimporterPeriodpageSize: kotlin.Int) : ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.social.reporting.analytics.polling.importer.interval" to listOf("$cqPeriodsocialPeriodreportingPeriodanalyticsPeriodpollingPeriodimporterPeriodinterval"), "cq.social.reporting.analytics.polling.importer.pageSize" to listOf("$cqPeriodsocialPeriodreportingPeriodanalyticsPeriodpollingPeriodimporterPeriodpageSize"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportImporterServiceImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param reportPeriodfetchPerioddelay  (optional)
    * @return ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, reportPeriodfetchPerioddelay: kotlin.Int) : ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "report.fetch.delay" to listOf("$reportPeriodfetchPerioddelay"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportManagementServiceImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPeriodsocialPeriodconsolePeriodanalyticsPeriodsitesPeriodmapping  (optional)
    * @param priority  (optional)
    * @return ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPeriodsocialPeriodconsolePeriodanalyticsPeriodsitesPeriodmapping: kotlin.Array<kotlin.String>, priority: kotlin.Int) : ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.social.console.analytics.sites.mapping" to toMultiValue(cqPeriodsocialPeriodconsolePeriodanalyticsPeriodsitesPeriodmapping.toList(), "multi"), "priority" to listOf("$priority"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.SiteTrendReportSocialComponentFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param fieldWhitelist  (optional)
    * @param attachmentTypeBlacklist  (optional)
    * @return ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, fieldWhitelist: kotlin.Array<kotlin.String>, attachmentTypeBlacklist: kotlin.Array<kotlin.String>) : ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "fieldWhitelist" to toMultiValue(fieldWhitelist.toList(), "multi"), "attachmentTypeBlacklist" to toMultiValue(attachmentTypeBlacklist.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.review.client.endpoints.impl.ReviewOperationsService",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param slingPeriodservletPeriodselectors  (optional)
    * @param slingPeriodservletPeriodextensions  (optional)
    * @return ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, slingPeriodservletPeriodselectors: kotlin.String, slingPeriodservletPeriodextensions: kotlin.String) : ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "sling.servlet.selectors" to listOf("$slingPeriodservletPeriodselectors"), "sling.servlet.extensions" to listOf("$slingPeriodservletPeriodextensions"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.scf.core.operations.impl.SocialOperationsServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param slingPeriodservletPeriodselectors  (optional)
    * @param slingPeriodservletPeriodextensions  (optional)
    * @return ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, slingPeriodservletPeriodselectors: kotlin.Array<kotlin.String>, slingPeriodservletPeriodextensions: kotlin.String) : ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "sling.servlet.selectors" to toMultiValue(slingPeriodservletPeriodselectors.toList(), "multi"), "sling.servlet.extensions" to listOf("$slingPeriodservletPeriodextensions"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.scf.endpoints.impl.DefaultSocialGetServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param eventPeriodtopics  (optional)
    * @param eventPeriodfilter  (optional)
    * @return ComAdobeCqSocialScoringImplScoringEventListenerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialScoringImplScoringEventListener(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, eventPeriodtopics: kotlin.String, eventPeriodfilter: kotlin.String) : ComAdobeCqSocialScoringImplScoringEventListenerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "event.topics" to listOf("$eventPeriodtopics"), "event.filter" to listOf("$eventPeriodfilter"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.scoring.impl.ScoringEventListener",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialScoringImplScoringEventListenerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialScoringImplScoringEventListenerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param enableFallback  (optional)
    * @return ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, enableFallback: kotlin.Boolean) : ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "enableFallback" to listOf("$enableFallback"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.serviceusers.internal.impl.ServiceUserWrapperImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param fieldWhitelist  (optional)
    * @param sitePathFilters  (optional)
    * @param sitePackageGroup  (optional)
    * @return ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialSiteEndpointsImplSiteOperationService(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, fieldWhitelist: kotlin.Array<kotlin.String>, sitePathFilters: kotlin.Array<kotlin.String>, sitePackageGroup: kotlin.String) : ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "fieldWhitelist" to toMultiValue(fieldWhitelist.toList(), "multi"), "sitePathFilters" to toMultiValue(sitePathFilters.toList(), "multi"), "sitePackageGroup" to listOf("$sitePackageGroup"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.site.endpoints.impl.SiteOperationService",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPeriodsocialPeriodconsolePeriodanalyticsPeriodcomponents  (optional)
    * @return ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPeriodsocialPeriodconsolePeriodanalyticsPeriodcomponents: kotlin.Array<kotlin.String>) : ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.social.console.analytics.components" to toMultiValue(cqPeriodsocialPeriodconsolePeriodanalyticsPeriodcomponents.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.site.impl.AnalyticsComponentConfigurationServiceImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param componentsUsingTags  (optional)
    * @return ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialSiteImplSiteConfiguratorImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, componentsUsingTags: kotlin.Array<kotlin.String>) : ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "componentsUsingTags" to toMultiValue(componentsUsingTags.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.site.impl.SiteConfiguratorImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param srpPeriodtype  (optional)
    * @return ComAdobeCqSocialSrpImplSocialSolrConnectorInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialSrpImplSocialSolrConnector(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, srpPeriodtype: kotlin.String) : ComAdobeCqSocialSrpImplSocialSolrConnectorInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "srp.type" to listOf("$srpPeriodtype"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.srp.impl.SocialSolrConnector",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialSrpImplSocialSolrConnectorInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialSrpImplSocialSolrConnectorInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param enabled  (optional)
    * @param agentName  (optional)
    * @param diffPath  (optional)
    * @param propertyNames  (optional)
    * @return ComAdobeCqSocialSyncImplDiffChangesObserverInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialSyncImplDiffChangesObserver(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, enabled: kotlin.Boolean, agentName: kotlin.String, diffPath: kotlin.String, propertyNames: kotlin.String) : ComAdobeCqSocialSyncImplDiffChangesObserverInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "enabled" to listOf("$enabled"), "agentName" to listOf("$agentName"), "diffPath" to listOf("$diffPath"), "propertyNames" to listOf("$propertyNames"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.sync.impl.DiffChangesObserver",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialSyncImplDiffChangesObserverInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialSyncImplDiffChangesObserverInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param nodetypes  (optional)
    * @param ignorableprops  (optional)
    * @param ignorablenodes  (optional)
    * @param enabled  (optional)
    * @param distfolders  (optional)
    * @return ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialSyncImplGroupSyncListenerImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, nodetypes: kotlin.Array<kotlin.String>, ignorableprops: kotlin.Array<kotlin.String>, ignorablenodes: kotlin.String, enabled: kotlin.Boolean, distfolders: kotlin.String) : ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "nodetypes" to toMultiValue(nodetypes.toList(), "multi"), "ignorableprops" to toMultiValue(ignorableprops.toList(), "multi"), "ignorablenodes" to listOf("$ignorablenodes"), "enabled" to listOf("$enabled"), "distfolders" to listOf("$distfolders"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.sync.impl.GroupSyncListenerImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param activeRunModes  (optional)
    * @return ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialSyncImplPublisherSyncServiceImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, activeRunModes: kotlin.Array<kotlin.String>) : ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "activeRunModes" to toMultiValue(activeRunModes.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.sync.impl.PublisherSyncServiceImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param nodetypes  (optional)
    * @param ignorableprops  (optional)
    * @param ignorablenodes  (optional)
    * @param enabled  (optional)
    * @param distfolders  (optional)
    * @return ComAdobeCqSocialSyncImplUserSyncListenerImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialSyncImplUserSyncListenerImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, nodetypes: kotlin.Array<kotlin.String>, ignorableprops: kotlin.Array<kotlin.String>, ignorablenodes: kotlin.Array<kotlin.String>, enabled: kotlin.Boolean, distfolders: kotlin.Array<kotlin.String>) : ComAdobeCqSocialSyncImplUserSyncListenerImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "nodetypes" to toMultiValue(nodetypes.toList(), "multi"), "ignorableprops" to toMultiValue(ignorableprops.toList(), "multi"), "ignorablenodes" to toMultiValue(ignorablenodes.toList(), "multi"), "enabled" to listOf("$enabled"), "distfolders" to toMultiValue(distfolders.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.sync.impl.UserSyncListenerImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialSyncImplUserSyncListenerImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialSyncImplUserSyncListenerImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param translatePeriodlanguage  (optional)
    * @param translatePerioddisplay  (optional)
    * @param translatePeriodattribution  (optional)
    * @param translatePeriodcaching  (optional)
    * @param translatePeriodsmartPeriodrendering  (optional)
    * @param translatePeriodcachingPeriodduration  (optional)
    * @param translatePeriodsessionPeriodsavePeriodinterval  (optional)
    * @param translatePeriodsessionPeriodsavePeriodbatchLimit  (optional)
    * @return ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialTranslationImplTranslationServiceConfigManager(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, translatePeriodlanguage: kotlin.String, translatePerioddisplay: kotlin.String, translatePeriodattribution: kotlin.Boolean, translatePeriodcaching: kotlin.String, translatePeriodsmartPeriodrendering: kotlin.String, translatePeriodcachingPeriodduration: kotlin.String, translatePeriodsessionPeriodsavePeriodinterval: kotlin.String, translatePeriodsessionPeriodsavePeriodbatchLimit: kotlin.String) : ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "translate.language" to listOf("$translatePeriodlanguage"), "translate.display" to listOf("$translatePerioddisplay"), "translate.attribution" to listOf("$translatePeriodattribution"), "translate.caching" to listOf("$translatePeriodcaching"), "translate.smart.rendering" to listOf("$translatePeriodsmartPeriodrendering"), "translate.caching.duration" to listOf("$translatePeriodcachingPeriodduration"), "translate.session.save.interval" to listOf("$translatePeriodsessionPeriodsavePeriodinterval"), "translate.session.save.batchLimit" to listOf("$translatePeriodsessionPeriodsavePeriodbatchLimit"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.translation.impl.TranslationServiceConfigManager",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param eventPeriodtopics  (optional)
    * @param eventPeriodfilter  (optional)
    * @param translatePeriodlistenerPeriodtype  (optional)
    * @param translatePeriodpropertyPeriodlist  (optional)
    * @param poolSize  (optional)
    * @param maxPoolSize  (optional)
    * @param queueSize  (optional)
    * @param keepAliveTime  (optional)
    * @return ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialTranslationImplUGCLanguageDetector(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, eventPeriodtopics: kotlin.String, eventPeriodfilter: kotlin.String, translatePeriodlistenerPeriodtype: kotlin.Array<kotlin.String>, translatePeriodpropertyPeriodlist: kotlin.Array<kotlin.String>, poolSize: kotlin.Int, maxPoolSize: kotlin.Int, queueSize: kotlin.Int, keepAliveTime: kotlin.Int) : ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "event.topics" to listOf("$eventPeriodtopics"), "event.filter" to listOf("$eventPeriodfilter"), "translate.listener.type" to toMultiValue(translatePeriodlistenerPeriodtype.toList(), "multi"), "translate.property.list" to toMultiValue(translatePeriodpropertyPeriodlist.toList(), "multi"), "poolSize" to listOf("$poolSize"), "maxPoolSize" to listOf("$maxPoolSize"), "queueSize" to listOf("$queueSize"), "keepAliveTime" to listOf("$keepAliveTime"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.translation.impl.UGCLanguageDetector",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param threadPoolSize  (optional)
    * @param delayTime  (optional)
    * @param workerSleepTime  (optional)
    * @return ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, threadPoolSize: kotlin.Int, delayTime: kotlin.Int, workerSleepTime: kotlin.Int) : ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "threadPoolSize" to listOf("$threadPoolSize"), "delayTime" to listOf("$delayTime"), "workerSleepTime" to listOf("$workerSleepTime"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.ugcbase.dispatcher.impl.FlushServiceImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param poolSize  (optional)
    * @param maxPoolSize  (optional)
    * @param queueSize  (optional)
    * @param keepAliveTime  (optional)
    * @return ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, poolSize: kotlin.Int, maxPoolSize: kotlin.Int, queueSize: kotlin.Int, keepAliveTime: kotlin.Int) : ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "poolSize" to listOf("$poolSize"), "maxPoolSize" to listOf("$maxPoolSize"), "queueSize" to listOf("$queueSize"), "keepAliveTime" to listOf("$keepAliveTime"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.AysncReverseReplicatorImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param isPrimaryPublisher  (optional)
    * @return ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialUgcbaseImplPublisherConfigurationImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, isPrimaryPublisher: kotlin.Boolean) : ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "isPrimaryPublisher" to listOf("$isPrimaryPublisher"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.PublisherConfigurationImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param legacyCloudUGCPathMapping  (optional)
    * @return ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialUgcbaseImplSocialUtilsImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, legacyCloudUGCPathMapping: kotlin.Boolean) : ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "legacyCloudUGCPathMapping" to listOf("$legacyCloudUGCPathMapping"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.SocialUtilsImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param automoderationPeriodsequence  (optional)
    * @param automoderationPeriodonfailurestop  (optional)
    * @return ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialUgcbaseModerationImplAutoModerationImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, automoderationPeriodsequence: kotlin.Array<kotlin.String>, automoderationPeriodonfailurestop: kotlin.Boolean) : ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "automoderation.sequence" to toMultiValue(automoderationPeriodsequence.toList(), "multi"), "automoderation.onfailurestop" to listOf("$automoderationPeriodonfailurestop"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.AutoModerationImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param watchwordsPeriodpositive  (optional)
    * @param watchwordsPeriodnegative  (optional)
    * @param watchwordsPeriodpath  (optional)
    * @param sentimentPeriodpath  (optional)
    * @return ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialUgcbaseModerationImplSentimentProcess(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, watchwordsPeriodpositive: kotlin.Array<kotlin.String>, watchwordsPeriodnegative: kotlin.Array<kotlin.String>, watchwordsPeriodpath: kotlin.String, sentimentPeriodpath: kotlin.String) : ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "watchwords.positive" to toMultiValue(watchwordsPeriodpositive.toList(), "multi"), "watchwords.negative" to toMultiValue(watchwordsPeriodnegative.toList(), "multi"), "watchwords.path" to listOf("$watchwordsPeriodpath"), "sentiment.path" to listOf("$sentimentPeriodpath"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.SentimentProcess",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param defaultPeriodattachmentPeriodtypePeriodblacklist  (optional)
    * @param baselinePeriodattachmentPeriodtypePeriodblacklist  (optional)
    * @return ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, defaultPeriodattachmentPeriodtypePeriodblacklist: kotlin.Array<kotlin.String>, baselinePeriodattachmentPeriodtypePeriodblacklist: kotlin.Array<kotlin.String>) : ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "default.attachment.type.blacklist" to toMultiValue(defaultPeriodattachmentPeriodtypePeriodblacklist.toList(), "multi"), "baseline.attachment.type.blacklist" to toMultiValue(baselinePeriodattachmentPeriodtypePeriodblacklist.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.DefaultAttachmentTypeBlacklistService",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param parameterPeriodwhitelist  (optional)
    * @param parameterPeriodwhitelistPeriodprefixes  (optional)
    * @param binaryPeriodparameterPeriodwhitelist  (optional)
    * @param modifierPeriodwhitelist  (optional)
    * @param operationPeriodwhitelist  (optional)
    * @param operationPeriodwhitelistPeriodprefixes  (optional)
    * @param typehintPeriodwhitelist  (optional)
    * @param resourcetypePeriodwhitelist  (optional)
    * @return ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, parameterPeriodwhitelist: kotlin.Array<kotlin.String>, parameterPeriodwhitelistPeriodprefixes: kotlin.Array<kotlin.String>, binaryPeriodparameterPeriodwhitelist: kotlin.Array<kotlin.String>, modifierPeriodwhitelist: kotlin.Array<kotlin.String>, operationPeriodwhitelist: kotlin.Array<kotlin.String>, operationPeriodwhitelistPeriodprefixes: kotlin.Array<kotlin.String>, typehintPeriodwhitelist: kotlin.Array<kotlin.String>, resourcetypePeriodwhitelist: kotlin.Array<kotlin.String>) : ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "parameter.whitelist" to toMultiValue(parameterPeriodwhitelist.toList(), "multi"), "parameter.whitelist.prefixes" to toMultiValue(parameterPeriodwhitelistPeriodprefixes.toList(), "multi"), "binary.parameter.whitelist" to toMultiValue(binaryPeriodparameterPeriodwhitelist.toList(), "multi"), "modifier.whitelist" to toMultiValue(modifierPeriodwhitelist.toList(), "multi"), "operation.whitelist" to toMultiValue(operationPeriodwhitelist.toList(), "multi"), "operation.whitelist.prefixes" to toMultiValue(operationPeriodwhitelistPeriodprefixes.toList(), "multi"), "typehint.whitelist" to toMultiValue(typehintPeriodwhitelist.toList(), "multi"), "resourcetype.whitelist" to toMultiValue(resourcetypePeriodwhitelist.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.SaferSlingPostValidatorImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param slingPeriodservletPeriodextensions  (optional)
    * @param slingPeriodservletPeriodpaths  (optional)
    * @param slingPeriodservletPeriodmethods  (optional)
    * @return ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, slingPeriodservletPeriodextensions: kotlin.String, slingPeriodservletPeriodpaths: kotlin.String, slingPeriodservletPeriodmethods: kotlin.String) : ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "sling.servlet.extensions" to listOf("$slingPeriodservletPeriodextensions"), "sling.servlet.paths" to listOf("$slingPeriodservletPeriodpaths"), "sling.servlet.methods" to listOf("$slingPeriodservletPeriodmethods"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.user.endpoints.impl.UsersGroupFromPublishServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param enable  (optional)
    * @param agentPeriodconfiguration  (optional)
    * @param contextPeriodpath  (optional)
    * @param disabledPeriodcipherPeriodsuites  (optional)
    * @param enabledPeriodcipherPeriodsuites  (optional)
    * @return ComAdobeCqSocialUserImplTransportHttpToPublisherInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqSocialUserImplTransportHttpToPublisher(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, enable: kotlin.Boolean, agentPeriodconfiguration: kotlin.Array<kotlin.String>, contextPeriodpath: kotlin.String, disabledPeriodcipherPeriodsuites: kotlin.Array<kotlin.String>, enabledPeriodcipherPeriodsuites: kotlin.Array<kotlin.String>) : ComAdobeCqSocialUserImplTransportHttpToPublisherInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "enable" to listOf("$enable"), "agent.configuration" to toMultiValue(agentPeriodconfiguration.toList(), "multi"), "context.path" to listOf("$contextPeriodpath"), "disabled.cipher.suites" to toMultiValue(disabledPeriodcipherPeriodsuites.toList(), "multi"), "enabled.cipher.suites" to toMultiValue(enabledPeriodcipherPeriodsuites.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.social.user.impl.transport.HttpToPublisher",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqSocialUserImplTransportHttpToPublisherInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqSocialUserImplTransportHttpToPublisherInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param resourcePeriodtypes  (optional)
    * @return ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, resourcePeriodtypes: kotlin.Array<kotlin.String>) : ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "resource.types" to toMultiValue(resourcePeriodtypes.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.ui.wcm.commons.internal.servlets.rte.RTEFilterServletFactory.amended",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param deletePeriodpathPeriodregexps  (optional)
    * @param deletePeriodsql2Periodquery  (optional)
    * @return ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqUpgradesCleanupImplUpgradeContentCleanup(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, deletePeriodpathPeriodregexps: kotlin.Array<kotlin.String>, deletePeriodsql2Periodquery: kotlin.String) : ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "delete.path.regexps" to toMultiValue(deletePeriodpathPeriodregexps.toList(), "multi"), "delete.sql2.query" to listOf("$deletePeriodsql2Periodquery"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeContentCleanup",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param deletePeriodnamePeriodregexps  (optional)
    * @return ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, deletePeriodnamePeriodregexps: kotlin.Array<kotlin.String>) : ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "delete.name.regexps" to toMultiValue(deletePeriodnamePeriodregexps.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeInstallFolderCleanup",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param threshold  (optional)
    * @param jobTopicName  (optional)
    * @param emailEnabled  (optional)
    * @return ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, threshold: kotlin.Int, jobTopicName: kotlin.String, emailEnabled: kotlin.Boolean) : ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "threshold" to listOf("$threshold"), "jobTopicName" to listOf("$jobTopicName"), "emailEnabled" to listOf("$emailEnabled"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncDeleteConfigProviderService",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param schedulerPeriodexpression  (optional)
    * @param jobPeriodpurgePeriodthreshold  (optional)
    * @param jobPeriodpurgePeriodmaxPeriodjobs  (optional)
    * @return ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, schedulerPeriodexpression: kotlin.String, jobPeriodpurgePeriodthreshold: kotlin.Int, jobPeriodpurgePeriodmaxPeriodjobs: kotlin.Int) : ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "scheduler.expression" to listOf("$schedulerPeriodexpression"), "job.purge.threshold" to listOf("$jobPeriodpurgePeriodthreshold"), "job.purge.max.jobs" to listOf("$jobPeriodpurgePeriodmaxPeriodjobs"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncJobCleanUpTask",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param threshold  (optional)
    * @param jobTopicName  (optional)
    * @param emailEnabled  (optional)
    * @return ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, threshold: kotlin.Int, jobTopicName: kotlin.String, emailEnabled: kotlin.Boolean) : ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "threshold" to listOf("$threshold"), "jobTopicName" to listOf("$jobTopicName"), "emailEnabled" to listOf("$emailEnabled"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncMoveConfigProviderService",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param threshold  (optional)
    * @param jobTopicName  (optional)
    * @param emailEnabled  (optional)
    * @return ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, threshold: kotlin.Int, jobTopicName: kotlin.String, emailEnabled: kotlin.Boolean) : ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "threshold" to listOf("$threshold"), "jobTopicName" to listOf("$jobTopicName"), "emailEnabled" to listOf("$emailEnabled"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncPageMoveConfigProviderService",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param eventPeriodfilter  (optional)
    * @param launchesPeriodeventhandlerPeriodthreadpoolPeriodmaxsize  (optional)
    * @param launchesPeriodeventhandlerPeriodthreadpoolPeriodpriority  (optional)
    * @param launchesPeriodeventhandlerPeriodupdatelastmodification  (optional)
    * @return ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqWcmLaunchesImplLaunchesEventHandler(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, eventPeriodfilter: kotlin.String, launchesPeriodeventhandlerPeriodthreadpoolPeriodmaxsize: kotlin.Int, launchesPeriodeventhandlerPeriodthreadpoolPeriodpriority: kotlin.String, launchesPeriodeventhandlerPeriodupdatelastmodification: kotlin.Boolean) : ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "event.filter" to listOf("$eventPeriodfilter"), "launches.eventhandler.threadpool.maxsize" to listOf("$launchesPeriodeventhandlerPeriodthreadpoolPeriodmaxsize"), "launches.eventhandler.threadpool.priority" to listOf("$launchesPeriodeventhandlerPeriodthreadpoolPeriodpriority"), "launches.eventhandler.updatelastmodification" to listOf("$launchesPeriodeventhandlerPeriodupdatelastmodification"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.wcm.launches.impl.LaunchesEventHandler",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPeriodwcmPeriodqrcodePeriodservletPeriodwhitelist  (optional)
    * @return ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPeriodwcmPeriodqrcodePeriodservletPeriodwhitelist: kotlin.Array<kotlin.String>) : ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.wcm.qrcode.servlet.whitelist" to toMultiValue(cqPeriodwcmPeriodqrcodePeriodservletPeriodwhitelist.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.wcm.mobile.qrcode.servlet.QRCodeImageGenerator",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param size  (optional)
    * @return ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, size: kotlin.Int) : ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "size" to listOf("$size"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.wcm.style.internal.ComponentStyleInfoCacheImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param syncTranslationStatePeriodschedulingFormat  (optional)
    * @param schedulingRepeatTranslationPeriodschedulingFormat  (optional)
    * @param syncTranslationStatePeriodlockTimeoutInMinutes  (optional)
    * @param exportPeriodformat  (optional)
    * @return ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, syncTranslationStatePeriodschedulingFormat: kotlin.String, schedulingRepeatTranslationPeriodschedulingFormat: kotlin.String, syncTranslationStatePeriodlockTimeoutInMinutes: kotlin.String, exportPeriodformat: kotlin.String) : ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "syncTranslationState.schedulingFormat" to listOf("$syncTranslationStatePeriodschedulingFormat"), "schedulingRepeatTranslation.schedulingFormat" to listOf("$schedulingRepeatTranslationPeriodschedulingFormat"), "syncTranslationState.lockTimeoutInMinutes" to listOf("$syncTranslationStatePeriodlockTimeoutInMinutes"), "export.format" to listOf("$exportPeriodformat"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.cq.wcm.translation.impl.TranslationPlatformConfigurationImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param portalPeriodoutboxes  (optional)
    * @param draftPerioddataPeriodservice  (optional)
    * @param draftPeriodmetadataPeriodservice  (optional)
    * @param submitPerioddataPeriodservice  (optional)
    * @param submitPeriodmetadataPeriodservice  (optional)
    * @param pendingSignPerioddataPeriodservice  (optional)
    * @param pendingSignPeriodmetadataPeriodservice  (optional)
    * @return ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, portalPeriodoutboxes: kotlin.Array<kotlin.String>, draftPerioddataPeriodservice: kotlin.String, draftPeriodmetadataPeriodservice: kotlin.String, submitPerioddataPeriodservice: kotlin.String, submitPeriodmetadataPeriodservice: kotlin.String, pendingSignPerioddataPeriodservice: kotlin.String, pendingSignPeriodmetadataPeriodservice: kotlin.String) : ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "portal.outboxes" to toMultiValue(portalPeriodoutboxes.toList(), "multi"), "draft.data.service" to listOf("$draftPerioddataPeriodservice"), "draft.metadata.service" to listOf("$draftPeriodmetadataPeriodservice"), "submit.data.service" to listOf("$submitPerioddataPeriodservice"), "submit.metadata.service" to listOf("$submitPeriodmetadataPeriodservice"), "pendingSign.data.service" to listOf("$pendingSignPerioddataPeriodservice"), "pendingSign.metadata.service" to listOf("$pendingSignPeriodmetadataPeriodservice"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.fd.fp.config.FormsPortalDraftsandSubmissionConfigService",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param formportalPeriodinterval  (optional)
    * @return ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeFdFpConfigFormsPortalSchedulerService(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, formportalPeriodinterval: kotlin.String) : ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "formportal.interval" to listOf("$formportalPeriodinterval"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.fd.fp.config.FormsPortalSchedulerService",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param alloweddataFileLocations  (optional)
    * @return ComAdobeFormsCommonServiceImplDefaultDataProviderInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeFormsCommonServiceImplDefaultDataProvider(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, alloweddataFileLocations: kotlin.Array<kotlin.String>) : ComAdobeFormsCommonServiceImplDefaultDataProviderInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "alloweddataFileLocations" to toMultiValue(alloweddataFileLocations.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.forms.common.service.impl.DefaultDataProvider",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeFormsCommonServiceImplDefaultDataProviderInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeFormsCommonServiceImplDefaultDataProviderInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param tempStorageConfig  (optional)
    * @return ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, tempStorageConfig: kotlin.String) : ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "tempStorageConfig" to listOf("$tempStorageConfig"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.forms.common.service.impl.FormsCommonConfigurationServiceImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param schedulerPeriodexpression  (optional)
    * @param duration for Temporary Storage  (optional)
    * @param duration for Anonymous Storage  (optional)
    * @return ComAdobeFormsCommonServletTempCleanUpTaskInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeFormsCommonServletTempCleanUpTask(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, schedulerPeriodexpression: kotlin.String, duration for Temporary Storage: kotlin.String, duration for Anonymous Storage: kotlin.String) : ComAdobeFormsCommonServletTempCleanUpTaskInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "scheduler.expression" to listOf("$schedulerPeriodexpression"), "Duration for Temporary Storage" to listOf("$duration for Temporary Storage"), "Duration for Anonymous Storage" to listOf("$duration for Anonymous Storage"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.forms.common.servlet.TempCleanUpTask",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeFormsCommonServletTempCleanUpTaskInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeFormsCommonServletTempCleanUpTaskInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param queryPeriodlimit  (optional)
    * @param filePeriodtypePeriodextensionPeriodmap  (optional)
    * @return ComAdobeGraniteAcpPlatformPlatformServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteAcpPlatformPlatformServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, queryPeriodlimit: kotlin.Int, filePeriodtypePeriodextensionPeriodmap: kotlin.Array<kotlin.String>) : ComAdobeGraniteAcpPlatformPlatformServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "query.limit" to listOf("$queryPeriodlimit"), "file.type.extension.map" to toMultiValue(filePeriodtypePeriodextensionPeriodmap.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.acp.platform.PlatformServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteAcpPlatformPlatformServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteAcpPlatformPlatformServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param aggregatePeriodrelationships  (optional)
    * @param aggregatePerioddescendPeriodvirtual  (optional)
    * @return ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteActivitystreamsImplActivityManagerImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, aggregatePeriodrelationships: kotlin.Array<kotlin.String>, aggregatePerioddescendPeriodvirtual: kotlin.Boolean) : ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "aggregate.relationships" to toMultiValue(aggregatePeriodrelationships.toList(), "multi"), "aggregate.descend.virtual" to listOf("$aggregatePerioddescendPeriodvirtual"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.activitystreams.impl.ActivityManagerImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param disabled  (optional)
    * @return ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteAnalyzerBaseSystemStatusServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, disabled: kotlin.Boolean) : ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "disabled" to listOf("$disabled"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.analyzer.base.SystemStatusServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param disabled  (optional)
    * @return ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, disabled: kotlin.Boolean) : ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "disabled" to listOf("$disabled"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.analyzer.scripts.compile.AllScriptsCompilerServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param comPeriodadobePeriodcqPeriodcdnPeriodcdnRewriter  (optional)
    * @param comPeriodadobePeriodcqPeriodcloudConfigPeriodcomponents  (optional)
    * @param comPeriodadobePeriodcqPeriodcloudConfigPeriodcore  (optional)
    * @param comPeriodadobePeriodcqPeriodcloudConfigPeriodui  (optional)
    * @param comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodeditor  (optional)
    * @param comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodprojectsPeriodcore  (optional)
    * @param comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodprojectsPeriodwcmPeriodcore  (optional)
    * @param comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPerioduiPeriodcommons  (optional)
    * @param comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodwcmPeriodstyle  (optional)
    * @param comPeriodadobePeriodcqPeriodcqActivitymapIntegration  (optional)
    * @param comPeriodadobePeriodcqPeriodcqContexthubCommons  (optional)
    * @param comPeriodadobePeriodcqPeriodcqDtm  (optional)
    * @param comPeriodadobePeriodcqPeriodcqHealthcheck  (optional)
    * @param comPeriodadobePeriodcqPeriodcqMultisiteTargeting  (optional)
    * @param comPeriodadobePeriodcqPeriodcqPreUpgradeCleanup  (optional)
    * @param comPeriodadobePeriodcqPeriodcqProductInfoProvider  (optional)
    * @param comPeriodadobePeriodcqPeriodcqRestSites  (optional)
    * @param comPeriodadobePeriodcqPeriodcqSecurityHc  (optional)
    * @param comPeriodadobePeriodcqPerioddamPeriodcqDamSvgHandler  (optional)
    * @param comPeriodadobePeriodcqPerioddamPeriodcqScene7Imaging  (optional)
    * @param comPeriodadobePeriodcqPerioddtmReactorPeriodcore  (optional)
    * @param comPeriodadobePeriodcqPerioddtmReactorPeriodui  (optional)
    * @param comPeriodadobePeriodcqPeriodexpJspelResolver  (optional)
    * @param comPeriodadobePeriodcqPeriodinboxPeriodcqInbox  (optional)
    * @param comPeriodadobePeriodcqPeriodjsonSchemaParser  (optional)
    * @param comPeriodadobePeriodcqPeriodmediaPeriodcqMediaPublishingDpsFpCore  (optional)
    * @param comPeriodadobePeriodcqPeriodmobilePeriodcqMobileCaas  (optional)
    * @param comPeriodadobePeriodcqPeriodmobilePeriodcqMobileIndexBuilder  (optional)
    * @param comPeriodadobePeriodcqPeriodmobilePeriodcqMobilePhonegapBuild  (optional)
    * @param comPeriodadobePeriodcqPeriodmyspell  (optional)
    * @param comPeriodadobePeriodcqPeriodsamplePeriodwePeriodretailPeriodcore  (optional)
    * @param comPeriodadobePeriodcqPeriodscreensPeriodcomPeriodadobePeriodcqPeriodscreensPerioddcc  (optional)
    * @param comPeriodadobePeriodcqPeriodscreensPeriodcomPeriodadobePeriodcqPeriodscreensPeriodmqPeriodcore  (optional)
    * @param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialAsProvider  (optional)
    * @param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialBadgingBasicImpl  (optional)
    * @param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialBadgingImpl  (optional)
    * @param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialCalendarImpl  (optional)
    * @param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialContentFragmentsImpl  (optional)
    * @param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialEnablementImpl  (optional)
    * @param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialGraphImpl  (optional)
    * @param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialIdeationImpl  (optional)
    * @param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialJcrProvider  (optional)
    * @param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialMembersImpl  (optional)
    * @param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialMsProvider  (optional)
    * @param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialNotificationsChannelsWeb  (optional)
    * @param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialNotificationsImpl  (optional)
    * @param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialRdbProvider  (optional)
    * @param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScfImpl  (optional)
    * @param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScoringBasicImpl  (optional)
    * @param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScoringImpl  (optional)
    * @param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialServiceusersImpl  (optional)
    * @param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialSrpImpl  (optional)
    * @param comPeriodadobePeriodcqPeriodsocialPeriodcqSocialUgcbaseImpl  (optional)
    * @param comPeriodadobePerioddamPeriodcqDamCfmImpl  (optional)
    * @param comPeriodadobePeriodformsPeriodfoundationFormsFoundationBase  (optional)
    * @param comPeriodadobePeriodgranitePeriodapicontroller  (optional)
    * @param comPeriodadobePeriodgranitePeriodassetPeriodcore  (optional)
    * @param comPeriodadobePeriodgranitePeriodauthPeriodsso  (optional)
    * @param comPeriodadobePeriodgranitePeriodbundlesPeriodhcPeriodimpl  (optional)
    * @param comPeriodadobePeriodgranitePeriodcompatRouter  (optional)
    * @param comPeriodadobePeriodgranitePeriodconf  (optional)
    * @param comPeriodadobePeriodgranitePeriodconfPerioduiPeriodcore  (optional)
    * @param comPeriodadobePeriodgranitePeriodcors  (optional)
    * @param comPeriodadobePeriodgranitePeriodcrxExplorer  (optional)
    * @param comPeriodadobePeriodgranitePeriodcrxdeLite  (optional)
    * @param comPeriodadobePeriodgranitePeriodcryptoPeriodconfig  (optional)
    * @param comPeriodadobePeriodgranitePeriodcryptoPeriodextension  (optional)
    * @param comPeriodadobePeriodgranitePeriodcryptoPeriodfile  (optional)
    * @param comPeriodadobePeriodgranitePeriodcryptoPeriodjcr  (optional)
    * @param comPeriodadobePeriodgranitePeriodcsrf  (optional)
    * @param comPeriodadobePeriodgranitePerioddistributionPeriodcore  (optional)
    * @param comPeriodadobePeriodgranitePerioddropwizardPeriodmetrics  (optional)
    * @param comPeriodadobePeriodgranitePeriodfragsPeriodimpl  (optional)
    * @param comPeriodadobePeriodgranitePeriodgibson  (optional)
    * @param comPeriodadobePeriodgranitePeriodinfocollector  (optional)
    * @param comPeriodadobePeriodgranitePeriodinstallerPeriodfactoryPeriodpackages  (optional)
    * @param comPeriodadobePeriodgranitePeriodjettyPeriodssl  (optional)
    * @param comPeriodadobePeriodgranitePeriodjobsPeriodasync  (optional)
    * @param comPeriodadobePeriodgranitePeriodmaintenancePeriodoak  (optional)
    * @param comPeriodadobePeriodgranitePeriodmonitoringPeriodcore  (optional)
    * @param comPeriodadobePeriodgranitePeriodqueries  (optional)
    * @param comPeriodadobePeriodgranitePeriodreplicationPeriodhcPeriodimpl  (optional)
    * @param comPeriodadobePeriodgranitePeriodrepositoryPeriodchecker  (optional)
    * @param comPeriodadobePeriodgranitePeriodrepositoryPeriodhcPeriodimpl  (optional)
    * @param comPeriodadobePeriodgranitePeriodrestPeriodassets  (optional)
    * @param comPeriodadobePeriodgranitePeriodsecurityPeriodui  (optional)
    * @param comPeriodadobePeriodgranitePeriodstartup  (optional)
    * @param comPeriodadobePeriodgranitePeriodtagsoup  (optional)
    * @param comPeriodadobePeriodgranitePeriodtaskmanagementPeriodcore  (optional)
    * @param comPeriodadobePeriodgranitePeriodtaskmanagementPeriodworkflow  (optional)
    * @param comPeriodadobePeriodgranitePerioduiPeriodclientlibsPeriodcompilerPeriodless  (optional)
    * @param comPeriodadobePeriodgranitePerioduiPeriodclientlibsPeriodprocessorPeriodgcc  (optional)
    * @param comPeriodadobePeriodgranitePeriodwebconsolePeriodplugins  (optional)
    * @param comPeriodadobePeriodgranitePeriodworkflowPeriodconsole  (optional)
    * @param comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodlinux  (optional)
    * @param comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodmacosx  (optional)
    * @param comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodwin  (optional)
    * @param comPerioddayPeriodcommonsPeriodosgiPeriodwrapperPeriodsimpleJndi  (optional)
    * @param comPerioddayPeriodcqPeriodcqAuthhandler  (optional)
    * @param comPerioddayPeriodcqPeriodcqCompatConfigupdate  (optional)
    * @param comPerioddayPeriodcqPeriodcqLicensebranding  (optional)
    * @param comPerioddayPeriodcqPeriodcqNotifcationImpl  (optional)
    * @param comPerioddayPeriodcqPeriodcqReplicationAudit  (optional)
    * @param comPerioddayPeriodcqPeriodcqSearchExt  (optional)
    * @param comPerioddayPeriodcqPerioddamPeriodcqDamAnnotationPrint  (optional)
    * @param comPerioddayPeriodcqPerioddamPeriodcqDamAssetUsage  (optional)
    * @param comPerioddayPeriodcqPerioddamPeriodcqDamS7dam  (optional)
    * @param comPerioddayPeriodcqPerioddamPeriodcqDamSimilaritysearch  (optional)
    * @param comPerioddayPeriodcqPerioddamPerioddamWebdavSupport  (optional)
    * @param comPerioddayPeriodcqPeriodpreUpgradeTasks  (optional)
    * @param comPerioddayPeriodcqPeriodreplicationPeriodextensions  (optional)
    * @param comPerioddayPeriodcqPeriodwcmPeriodcqMsmCore  (optional)
    * @param comPerioddayPeriodcqPeriodwcmPeriodcqWcmTranslation  (optional)
    * @param dayCommonsJrawio  (optional)
    * @param orgPeriodapachePeriodariesPeriodjmxPeriodwhiteboard  (optional)
    * @param orgPeriodapachePeriodfelixPeriodhttpPeriodsslfilter  (optional)
    * @param orgPeriodapachePeriodfelixPeriodorgPeriodapachePeriodfelixPeriodthreaddump  (optional)
    * @param orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodds  (optional)
    * @param orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodevent  (optional)
    * @param orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodmemoryusage  (optional)
    * @param orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodpackageadmin  (optional)
    * @param orgPeriodapachePeriodjackrabbitPeriodoakAuthLdap  (optional)
    * @param orgPeriodapachePeriodjackrabbitPeriodoakSegmentTar  (optional)
    * @param orgPeriodapachePeriodjackrabbitPeriodoakSolrOsgi  (optional)
    * @param orgPeriodapachePeriodslingPeriodbundleresourcePeriodimpl  (optional)
    * @param orgPeriodapachePeriodslingPeriodcommonsPeriodfsclassloader  (optional)
    * @param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodwebconsole  (optional)
    * @param orgPeriodapachePeriodslingPerioddatasource  (optional)
    * @param orgPeriodapachePeriodslingPerioddiscoveryPeriodbase  (optional)
    * @param orgPeriodapachePeriodslingPerioddiscoveryPeriodoak  (optional)
    * @param orgPeriodapachePeriodslingPerioddiscoveryPeriodsupport  (optional)
    * @param orgPeriodapachePeriodslingPerioddistributionPeriodapi  (optional)
    * @param orgPeriodapachePeriodslingPerioddistributionPeriodcore  (optional)
    * @param orgPeriodapachePeriodslingPeriodextensionsPeriodwebconsolesecurityprovider  (optional)
    * @param orgPeriodapachePeriodslingPeriodhcPeriodwebconsole  (optional)
    * @param orgPeriodapachePeriodslingPeriodinstallerPeriodconsole  (optional)
    * @param orgPeriodapachePeriodslingPeriodinstallerPeriodproviderPeriodfile  (optional)
    * @param orgPeriodapachePeriodslingPeriodinstallerPeriodproviderPeriodjcr  (optional)
    * @param orgPeriodapachePeriodslingPeriodjcrPerioddavex  (optional)
    * @param orgPeriodapachePeriodslingPeriodjcrPeriodresourcesecurity  (optional)
    * @param orgPeriodapachePeriodslingPeriodjmxPeriodprovider  (optional)
    * @param orgPeriodapachePeriodslingPeriodlaunchpadPeriodinstaller  (optional)
    * @param orgPeriodapachePeriodslingPeriodmodelsPeriodimpl  (optional)
    * @param orgPeriodapachePeriodslingPeriodrepoinitPeriodparser  (optional)
    * @param orgPeriodapachePeriodslingPeriodresourcePeriodinventory  (optional)
    * @param orgPeriodapachePeriodslingPeriodresourceresolver  (optional)
    * @param orgPeriodapachePeriodslingPeriodscriptingPeriodjavascript  (optional)
    * @param orgPeriodapachePeriodslingPeriodscriptingPeriodjst  (optional)
    * @param orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodjsPeriodprovider  (optional)
    * @param orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodmodelsPeriodprovider  (optional)
    * @param orgPeriodapachePeriodslingPeriodsecurity  (optional)
    * @param orgPeriodapachePeriodslingPeriodservletsPeriodcompat  (optional)
    * @param orgPeriodapachePeriodslingPeriodservletsPeriodget  (optional)
    * @param orgPeriodapachePeriodslingPeriodstartupfilterPerioddisabler  (optional)
    * @param orgPeriodapachePeriodslingPeriodtracer  (optional)
    * @param wePeriodretailPeriodclientPeriodappPeriodcore  (optional)
    * @return ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteApicontrollerFilterResolverHookFactory(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, comPeriodadobePeriodcqPeriodcdnPeriodcdnRewriter: kotlin.String, comPeriodadobePeriodcqPeriodcloudConfigPeriodcomponents: kotlin.String, comPeriodadobePeriodcqPeriodcloudConfigPeriodcore: kotlin.String, comPeriodadobePeriodcqPeriodcloudConfigPeriodui: kotlin.String, comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodeditor: kotlin.String, comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodprojectsPeriodcore: kotlin.String, comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodprojectsPeriodwcmPeriodcore: kotlin.String, comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPerioduiPeriodcommons: kotlin.String, comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodwcmPeriodstyle: kotlin.String, comPeriodadobePeriodcqPeriodcqActivitymapIntegration: kotlin.String, comPeriodadobePeriodcqPeriodcqContexthubCommons: kotlin.String, comPeriodadobePeriodcqPeriodcqDtm: kotlin.String, comPeriodadobePeriodcqPeriodcqHealthcheck: kotlin.String, comPeriodadobePeriodcqPeriodcqMultisiteTargeting: kotlin.String, comPeriodadobePeriodcqPeriodcqPreUpgradeCleanup: kotlin.String, comPeriodadobePeriodcqPeriodcqProductInfoProvider: kotlin.String, comPeriodadobePeriodcqPeriodcqRestSites: kotlin.String, comPeriodadobePeriodcqPeriodcqSecurityHc: kotlin.String, comPeriodadobePeriodcqPerioddamPeriodcqDamSvgHandler: kotlin.String, comPeriodadobePeriodcqPerioddamPeriodcqScene7Imaging: kotlin.String, comPeriodadobePeriodcqPerioddtmReactorPeriodcore: kotlin.String, comPeriodadobePeriodcqPerioddtmReactorPeriodui: kotlin.String, comPeriodadobePeriodcqPeriodexpJspelResolver: kotlin.String, comPeriodadobePeriodcqPeriodinboxPeriodcqInbox: kotlin.String, comPeriodadobePeriodcqPeriodjsonSchemaParser: kotlin.String, comPeriodadobePeriodcqPeriodmediaPeriodcqMediaPublishingDpsFpCore: kotlin.String, comPeriodadobePeriodcqPeriodmobilePeriodcqMobileCaas: kotlin.String, comPeriodadobePeriodcqPeriodmobilePeriodcqMobileIndexBuilder: kotlin.String, comPeriodadobePeriodcqPeriodmobilePeriodcqMobilePhonegapBuild: kotlin.String, comPeriodadobePeriodcqPeriodmyspell: kotlin.String, comPeriodadobePeriodcqPeriodsamplePeriodwePeriodretailPeriodcore: kotlin.String, comPeriodadobePeriodcqPeriodscreensPeriodcomPeriodadobePeriodcqPeriodscreensPerioddcc: kotlin.String, comPeriodadobePeriodcqPeriodscreensPeriodcomPeriodadobePeriodcqPeriodscreensPeriodmqPeriodcore: kotlin.String, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialAsProvider: kotlin.String, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialBadgingBasicImpl: kotlin.String, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialBadgingImpl: kotlin.String, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialCalendarImpl: kotlin.String, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialContentFragmentsImpl: kotlin.String, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialEnablementImpl: kotlin.String, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialGraphImpl: kotlin.String, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialIdeationImpl: kotlin.String, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialJcrProvider: kotlin.String, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialMembersImpl: kotlin.String, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialMsProvider: kotlin.String, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialNotificationsChannelsWeb: kotlin.String, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialNotificationsImpl: kotlin.String, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialRdbProvider: kotlin.String, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScfImpl: kotlin.String, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScoringBasicImpl: kotlin.String, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScoringImpl: kotlin.String, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialServiceusersImpl: kotlin.String, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialSrpImpl: kotlin.String, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialUgcbaseImpl: kotlin.String, comPeriodadobePerioddamPeriodcqDamCfmImpl: kotlin.String, comPeriodadobePeriodformsPeriodfoundationFormsFoundationBase: kotlin.String, comPeriodadobePeriodgranitePeriodapicontroller: kotlin.String, comPeriodadobePeriodgranitePeriodassetPeriodcore: kotlin.String, comPeriodadobePeriodgranitePeriodauthPeriodsso: kotlin.String, comPeriodadobePeriodgranitePeriodbundlesPeriodhcPeriodimpl: kotlin.String, comPeriodadobePeriodgranitePeriodcompatRouter: kotlin.String, comPeriodadobePeriodgranitePeriodconf: kotlin.String, comPeriodadobePeriodgranitePeriodconfPerioduiPeriodcore: kotlin.String, comPeriodadobePeriodgranitePeriodcors: kotlin.String, comPeriodadobePeriodgranitePeriodcrxExplorer: kotlin.String, comPeriodadobePeriodgranitePeriodcrxdeLite: kotlin.String, comPeriodadobePeriodgranitePeriodcryptoPeriodconfig: kotlin.String, comPeriodadobePeriodgranitePeriodcryptoPeriodextension: kotlin.String, comPeriodadobePeriodgranitePeriodcryptoPeriodfile: kotlin.String, comPeriodadobePeriodgranitePeriodcryptoPeriodjcr: kotlin.String, comPeriodadobePeriodgranitePeriodcsrf: kotlin.String, comPeriodadobePeriodgranitePerioddistributionPeriodcore: kotlin.String, comPeriodadobePeriodgranitePerioddropwizardPeriodmetrics: kotlin.String, comPeriodadobePeriodgranitePeriodfragsPeriodimpl: kotlin.String, comPeriodadobePeriodgranitePeriodgibson: kotlin.String, comPeriodadobePeriodgranitePeriodinfocollector: kotlin.String, comPeriodadobePeriodgranitePeriodinstallerPeriodfactoryPeriodpackages: kotlin.String, comPeriodadobePeriodgranitePeriodjettyPeriodssl: kotlin.String, comPeriodadobePeriodgranitePeriodjobsPeriodasync: kotlin.String, comPeriodadobePeriodgranitePeriodmaintenancePeriodoak: kotlin.String, comPeriodadobePeriodgranitePeriodmonitoringPeriodcore: kotlin.String, comPeriodadobePeriodgranitePeriodqueries: kotlin.String, comPeriodadobePeriodgranitePeriodreplicationPeriodhcPeriodimpl: kotlin.String, comPeriodadobePeriodgranitePeriodrepositoryPeriodchecker: kotlin.String, comPeriodadobePeriodgranitePeriodrepositoryPeriodhcPeriodimpl: kotlin.String, comPeriodadobePeriodgranitePeriodrestPeriodassets: kotlin.String, comPeriodadobePeriodgranitePeriodsecurityPeriodui: kotlin.String, comPeriodadobePeriodgranitePeriodstartup: kotlin.String, comPeriodadobePeriodgranitePeriodtagsoup: kotlin.String, comPeriodadobePeriodgranitePeriodtaskmanagementPeriodcore: kotlin.String, comPeriodadobePeriodgranitePeriodtaskmanagementPeriodworkflow: kotlin.String, comPeriodadobePeriodgranitePerioduiPeriodclientlibsPeriodcompilerPeriodless: kotlin.String, comPeriodadobePeriodgranitePerioduiPeriodclientlibsPeriodprocessorPeriodgcc: kotlin.String, comPeriodadobePeriodgranitePeriodwebconsolePeriodplugins: kotlin.String, comPeriodadobePeriodgranitePeriodworkflowPeriodconsole: kotlin.String, comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodlinux: kotlin.String, comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodmacosx: kotlin.String, comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodwin: kotlin.String, comPerioddayPeriodcommonsPeriodosgiPeriodwrapperPeriodsimpleJndi: kotlin.String, comPerioddayPeriodcqPeriodcqAuthhandler: kotlin.String, comPerioddayPeriodcqPeriodcqCompatConfigupdate: kotlin.String, comPerioddayPeriodcqPeriodcqLicensebranding: kotlin.String, comPerioddayPeriodcqPeriodcqNotifcationImpl: kotlin.String, comPerioddayPeriodcqPeriodcqReplicationAudit: kotlin.String, comPerioddayPeriodcqPeriodcqSearchExt: kotlin.String, comPerioddayPeriodcqPerioddamPeriodcqDamAnnotationPrint: kotlin.String, comPerioddayPeriodcqPerioddamPeriodcqDamAssetUsage: kotlin.String, comPerioddayPeriodcqPerioddamPeriodcqDamS7dam: kotlin.String, comPerioddayPeriodcqPerioddamPeriodcqDamSimilaritysearch: kotlin.String, comPerioddayPeriodcqPerioddamPerioddamWebdavSupport: kotlin.String, comPerioddayPeriodcqPeriodpreUpgradeTasks: kotlin.String, comPerioddayPeriodcqPeriodreplicationPeriodextensions: kotlin.String, comPerioddayPeriodcqPeriodwcmPeriodcqMsmCore: kotlin.String, comPerioddayPeriodcqPeriodwcmPeriodcqWcmTranslation: kotlin.String, dayCommonsJrawio: kotlin.String, orgPeriodapachePeriodariesPeriodjmxPeriodwhiteboard: kotlin.String, orgPeriodapachePeriodfelixPeriodhttpPeriodsslfilter: kotlin.String, orgPeriodapachePeriodfelixPeriodorgPeriodapachePeriodfelixPeriodthreaddump: kotlin.String, orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodds: kotlin.String, orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodevent: kotlin.String, orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodmemoryusage: kotlin.String, orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodpackageadmin: kotlin.String, orgPeriodapachePeriodjackrabbitPeriodoakAuthLdap: kotlin.String, orgPeriodapachePeriodjackrabbitPeriodoakSegmentTar: kotlin.String, orgPeriodapachePeriodjackrabbitPeriodoakSolrOsgi: kotlin.String, orgPeriodapachePeriodslingPeriodbundleresourcePeriodimpl: kotlin.String, orgPeriodapachePeriodslingPeriodcommonsPeriodfsclassloader: kotlin.String, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodwebconsole: kotlin.String, orgPeriodapachePeriodslingPerioddatasource: kotlin.String, orgPeriodapachePeriodslingPerioddiscoveryPeriodbase: kotlin.String, orgPeriodapachePeriodslingPerioddiscoveryPeriodoak: kotlin.String, orgPeriodapachePeriodslingPerioddiscoveryPeriodsupport: kotlin.String, orgPeriodapachePeriodslingPerioddistributionPeriodapi: kotlin.String, orgPeriodapachePeriodslingPerioddistributionPeriodcore: kotlin.String, orgPeriodapachePeriodslingPeriodextensionsPeriodwebconsolesecurityprovider: kotlin.String, orgPeriodapachePeriodslingPeriodhcPeriodwebconsole: kotlin.String, orgPeriodapachePeriodslingPeriodinstallerPeriodconsole: kotlin.String, orgPeriodapachePeriodslingPeriodinstallerPeriodproviderPeriodfile: kotlin.String, orgPeriodapachePeriodslingPeriodinstallerPeriodproviderPeriodjcr: kotlin.String, orgPeriodapachePeriodslingPeriodjcrPerioddavex: kotlin.String, orgPeriodapachePeriodslingPeriodjcrPeriodresourcesecurity: kotlin.String, orgPeriodapachePeriodslingPeriodjmxPeriodprovider: kotlin.String, orgPeriodapachePeriodslingPeriodlaunchpadPeriodinstaller: kotlin.String, orgPeriodapachePeriodslingPeriodmodelsPeriodimpl: kotlin.String, orgPeriodapachePeriodslingPeriodrepoinitPeriodparser: kotlin.String, orgPeriodapachePeriodslingPeriodresourcePeriodinventory: kotlin.String, orgPeriodapachePeriodslingPeriodresourceresolver: kotlin.String, orgPeriodapachePeriodslingPeriodscriptingPeriodjavascript: kotlin.String, orgPeriodapachePeriodslingPeriodscriptingPeriodjst: kotlin.String, orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodjsPeriodprovider: kotlin.String, orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodmodelsPeriodprovider: kotlin.String, orgPeriodapachePeriodslingPeriodsecurity: kotlin.String, orgPeriodapachePeriodslingPeriodservletsPeriodcompat: kotlin.String, orgPeriodapachePeriodslingPeriodservletsPeriodget: kotlin.String, orgPeriodapachePeriodslingPeriodstartupfilterPerioddisabler: kotlin.String, orgPeriodapachePeriodslingPeriodtracer: kotlin.String, wePeriodretailPeriodclientPeriodappPeriodcore: kotlin.String) : ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "com.adobe.cq.cdn.cdn-rewriter" to listOf("$comPeriodadobePeriodcqPeriodcdnPeriodcdnRewriter"), "com.adobe.cq.cloud-config.components" to listOf("$comPeriodadobePeriodcqPeriodcloudConfigPeriodcomponents"), "com.adobe.cq.cloud-config.core" to listOf("$comPeriodadobePeriodcqPeriodcloudConfigPeriodcore"), "com.adobe.cq.cloud-config.ui" to listOf("$comPeriodadobePeriodcqPeriodcloudConfigPeriodui"), "com.adobe.cq.com.adobe.cq.editor" to listOf("$comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodeditor"), "com.adobe.cq.com.adobe.cq.projects.core" to listOf("$comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodprojectsPeriodcore"), "com.adobe.cq.com.adobe.cq.projects.wcm.core" to listOf("$comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodprojectsPeriodwcmPeriodcore"), "com.adobe.cq.com.adobe.cq.ui.commons" to listOf("$comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPerioduiPeriodcommons"), "com.adobe.cq.com.adobe.cq.wcm.style" to listOf("$comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodwcmPeriodstyle"), "com.adobe.cq.cq-activitymap-integration" to listOf("$comPeriodadobePeriodcqPeriodcqActivitymapIntegration"), "com.adobe.cq.cq-contexthub-commons" to listOf("$comPeriodadobePeriodcqPeriodcqContexthubCommons"), "com.adobe.cq.cq-dtm" to listOf("$comPeriodadobePeriodcqPeriodcqDtm"), "com.adobe.cq.cq-healthcheck" to listOf("$comPeriodadobePeriodcqPeriodcqHealthcheck"), "com.adobe.cq.cq-multisite-targeting" to listOf("$comPeriodadobePeriodcqPeriodcqMultisiteTargeting"), "com.adobe.cq.cq-pre-upgrade-cleanup" to listOf("$comPeriodadobePeriodcqPeriodcqPreUpgradeCleanup"), "com.adobe.cq.cq-product-info-provider" to listOf("$comPeriodadobePeriodcqPeriodcqProductInfoProvider"), "com.adobe.cq.cq-rest-sites" to listOf("$comPeriodadobePeriodcqPeriodcqRestSites"), "com.adobe.cq.cq-security-hc" to listOf("$comPeriodadobePeriodcqPeriodcqSecurityHc"), "com.adobe.cq.dam.cq-dam-svg-handler" to listOf("$comPeriodadobePeriodcqPerioddamPeriodcqDamSvgHandler"), "com.adobe.cq.dam.cq-scene7-imaging" to listOf("$comPeriodadobePeriodcqPerioddamPeriodcqScene7Imaging"), "com.adobe.cq.dtm-reactor.core" to listOf("$comPeriodadobePeriodcqPerioddtmReactorPeriodcore"), "com.adobe.cq.dtm-reactor.ui" to listOf("$comPeriodadobePeriodcqPerioddtmReactorPeriodui"), "com.adobe.cq.exp-jspel-resolver" to listOf("$comPeriodadobePeriodcqPeriodexpJspelResolver"), "com.adobe.cq.inbox.cq-inbox" to listOf("$comPeriodadobePeriodcqPeriodinboxPeriodcqInbox"), "com.adobe.cq.json-schema-parser" to listOf("$comPeriodadobePeriodcqPeriodjsonSchemaParser"), "com.adobe.cq.media.cq-media-publishing-dps-fp-core" to listOf("$comPeriodadobePeriodcqPeriodmediaPeriodcqMediaPublishingDpsFpCore"), "com.adobe.cq.mobile.cq-mobile-caas" to listOf("$comPeriodadobePeriodcqPeriodmobilePeriodcqMobileCaas"), "com.adobe.cq.mobile.cq-mobile-index-builder" to listOf("$comPeriodadobePeriodcqPeriodmobilePeriodcqMobileIndexBuilder"), "com.adobe.cq.mobile.cq-mobile-phonegap-build" to listOf("$comPeriodadobePeriodcqPeriodmobilePeriodcqMobilePhonegapBuild"), "com.adobe.cq.myspell" to listOf("$comPeriodadobePeriodcqPeriodmyspell"), "com.adobe.cq.sample.we.retail.core" to listOf("$comPeriodadobePeriodcqPeriodsamplePeriodwePeriodretailPeriodcore"), "com.adobe.cq.screens.com.adobe.cq.screens.dcc" to listOf("$comPeriodadobePeriodcqPeriodscreensPeriodcomPeriodadobePeriodcqPeriodscreensPerioddcc"), "com.adobe.cq.screens.com.adobe.cq.screens.mq.core" to listOf("$comPeriodadobePeriodcqPeriodscreensPeriodcomPeriodadobePeriodcqPeriodscreensPeriodmqPeriodcore"), "com.adobe.cq.social.cq-social-as-provider" to listOf("$comPeriodadobePeriodcqPeriodsocialPeriodcqSocialAsProvider"), "com.adobe.cq.social.cq-social-badging-basic-impl" to listOf("$comPeriodadobePeriodcqPeriodsocialPeriodcqSocialBadgingBasicImpl"), "com.adobe.cq.social.cq-social-badging-impl" to listOf("$comPeriodadobePeriodcqPeriodsocialPeriodcqSocialBadgingImpl"), "com.adobe.cq.social.cq-social-calendar-impl" to listOf("$comPeriodadobePeriodcqPeriodsocialPeriodcqSocialCalendarImpl"), "com.adobe.cq.social.cq-social-content-fragments-impl" to listOf("$comPeriodadobePeriodcqPeriodsocialPeriodcqSocialContentFragmentsImpl"), "com.adobe.cq.social.cq-social-enablement-impl" to listOf("$comPeriodadobePeriodcqPeriodsocialPeriodcqSocialEnablementImpl"), "com.adobe.cq.social.cq-social-graph-impl" to listOf("$comPeriodadobePeriodcqPeriodsocialPeriodcqSocialGraphImpl"), "com.adobe.cq.social.cq-social-ideation-impl" to listOf("$comPeriodadobePeriodcqPeriodsocialPeriodcqSocialIdeationImpl"), "com.adobe.cq.social.cq-social-jcr-provider" to listOf("$comPeriodadobePeriodcqPeriodsocialPeriodcqSocialJcrProvider"), "com.adobe.cq.social.cq-social-members-impl" to listOf("$comPeriodadobePeriodcqPeriodsocialPeriodcqSocialMembersImpl"), "com.adobe.cq.social.cq-social-ms-provider" to listOf("$comPeriodadobePeriodcqPeriodsocialPeriodcqSocialMsProvider"), "com.adobe.cq.social.cq-social-notifications-channels-web" to listOf("$comPeriodadobePeriodcqPeriodsocialPeriodcqSocialNotificationsChannelsWeb"), "com.adobe.cq.social.cq-social-notifications-impl" to listOf("$comPeriodadobePeriodcqPeriodsocialPeriodcqSocialNotificationsImpl"), "com.adobe.cq.social.cq-social-rdb-provider" to listOf("$comPeriodadobePeriodcqPeriodsocialPeriodcqSocialRdbProvider"), "com.adobe.cq.social.cq-social-scf-impl" to listOf("$comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScfImpl"), "com.adobe.cq.social.cq-social-scoring-basic-impl" to listOf("$comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScoringBasicImpl"), "com.adobe.cq.social.cq-social-scoring-impl" to listOf("$comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScoringImpl"), "com.adobe.cq.social.cq-social-serviceusers-impl" to listOf("$comPeriodadobePeriodcqPeriodsocialPeriodcqSocialServiceusersImpl"), "com.adobe.cq.social.cq-social-srp-impl" to listOf("$comPeriodadobePeriodcqPeriodsocialPeriodcqSocialSrpImpl"), "com.adobe.cq.social.cq-social-ugcbase-impl" to listOf("$comPeriodadobePeriodcqPeriodsocialPeriodcqSocialUgcbaseImpl"), "com.adobe.dam.cq-dam-cfm-impl" to listOf("$comPeriodadobePerioddamPeriodcqDamCfmImpl"), "com.adobe.forms.foundation-forms-foundation-base" to listOf("$comPeriodadobePeriodformsPeriodfoundationFormsFoundationBase"), "com.adobe.granite.apicontroller" to listOf("$comPeriodadobePeriodgranitePeriodapicontroller"), "com.adobe.granite.asset.core" to listOf("$comPeriodadobePeriodgranitePeriodassetPeriodcore"), "com.adobe.granite.auth.sso" to listOf("$comPeriodadobePeriodgranitePeriodauthPeriodsso"), "com.adobe.granite.bundles.hc.impl" to listOf("$comPeriodadobePeriodgranitePeriodbundlesPeriodhcPeriodimpl"), "com.adobe.granite.compat-router" to listOf("$comPeriodadobePeriodgranitePeriodcompatRouter"), "com.adobe.granite.conf" to listOf("$comPeriodadobePeriodgranitePeriodconf"), "com.adobe.granite.conf.ui.core" to listOf("$comPeriodadobePeriodgranitePeriodconfPerioduiPeriodcore"), "com.adobe.granite.cors" to listOf("$comPeriodadobePeriodgranitePeriodcors"), "com.adobe.granite.crx-explorer" to listOf("$comPeriodadobePeriodgranitePeriodcrxExplorer"), "com.adobe.granite.crxde-lite" to listOf("$comPeriodadobePeriodgranitePeriodcrxdeLite"), "com.adobe.granite.crypto.config" to listOf("$comPeriodadobePeriodgranitePeriodcryptoPeriodconfig"), "com.adobe.granite.crypto.extension" to listOf("$comPeriodadobePeriodgranitePeriodcryptoPeriodextension"), "com.adobe.granite.crypto.file" to listOf("$comPeriodadobePeriodgranitePeriodcryptoPeriodfile"), "com.adobe.granite.crypto.jcr" to listOf("$comPeriodadobePeriodgranitePeriodcryptoPeriodjcr"), "com.adobe.granite.csrf" to listOf("$comPeriodadobePeriodgranitePeriodcsrf"), "com.adobe.granite.distribution.core" to listOf("$comPeriodadobePeriodgranitePerioddistributionPeriodcore"), "com.adobe.granite.dropwizard.metrics" to listOf("$comPeriodadobePeriodgranitePerioddropwizardPeriodmetrics"), "com.adobe.granite.frags.impl" to listOf("$comPeriodadobePeriodgranitePeriodfragsPeriodimpl"), "com.adobe.granite.gibson" to listOf("$comPeriodadobePeriodgranitePeriodgibson"), "com.adobe.granite.infocollector" to listOf("$comPeriodadobePeriodgranitePeriodinfocollector"), "com.adobe.granite.installer.factory.packages" to listOf("$comPeriodadobePeriodgranitePeriodinstallerPeriodfactoryPeriodpackages"), "com.adobe.granite.jetty.ssl" to listOf("$comPeriodadobePeriodgranitePeriodjettyPeriodssl"), "com.adobe.granite.jobs.async" to listOf("$comPeriodadobePeriodgranitePeriodjobsPeriodasync"), "com.adobe.granite.maintenance.oak" to listOf("$comPeriodadobePeriodgranitePeriodmaintenancePeriodoak"), "com.adobe.granite.monitoring.core" to listOf("$comPeriodadobePeriodgranitePeriodmonitoringPeriodcore"), "com.adobe.granite.queries" to listOf("$comPeriodadobePeriodgranitePeriodqueries"), "com.adobe.granite.replication.hc.impl" to listOf("$comPeriodadobePeriodgranitePeriodreplicationPeriodhcPeriodimpl"), "com.adobe.granite.repository.checker" to listOf("$comPeriodadobePeriodgranitePeriodrepositoryPeriodchecker"), "com.adobe.granite.repository.hc.impl" to listOf("$comPeriodadobePeriodgranitePeriodrepositoryPeriodhcPeriodimpl"), "com.adobe.granite.rest.assets" to listOf("$comPeriodadobePeriodgranitePeriodrestPeriodassets"), "com.adobe.granite.security.ui" to listOf("$comPeriodadobePeriodgranitePeriodsecurityPeriodui"), "com.adobe.granite.startup" to listOf("$comPeriodadobePeriodgranitePeriodstartup"), "com.adobe.granite.tagsoup" to listOf("$comPeriodadobePeriodgranitePeriodtagsoup"), "com.adobe.granite.taskmanagement.core" to listOf("$comPeriodadobePeriodgranitePeriodtaskmanagementPeriodcore"), "com.adobe.granite.taskmanagement.workflow" to listOf("$comPeriodadobePeriodgranitePeriodtaskmanagementPeriodworkflow"), "com.adobe.granite.ui.clientlibs.compiler.less" to listOf("$comPeriodadobePeriodgranitePerioduiPeriodclientlibsPeriodcompilerPeriodless"), "com.adobe.granite.ui.clientlibs.processor.gcc" to listOf("$comPeriodadobePeriodgranitePerioduiPeriodclientlibsPeriodprocessorPeriodgcc"), "com.adobe.granite.webconsole.plugins" to listOf("$comPeriodadobePeriodgranitePeriodwebconsolePeriodplugins"), "com.adobe.granite.workflow.console" to listOf("$comPeriodadobePeriodgranitePeriodworkflowPeriodconsole"), "com.adobe.xmp.worker.files.native.fragment.linux" to listOf("$comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodlinux"), "com.adobe.xmp.worker.files.native.fragment.macosx" to listOf("$comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodmacosx"), "com.adobe.xmp.worker.files.native.fragment.win" to listOf("$comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodwin"), "com.day.commons.osgi.wrapper.simple-jndi" to listOf("$comPerioddayPeriodcommonsPeriodosgiPeriodwrapperPeriodsimpleJndi"), "com.day.cq.cq-authhandler" to listOf("$comPerioddayPeriodcqPeriodcqAuthhandler"), "com.day.cq.cq-compat-configupdate" to listOf("$comPerioddayPeriodcqPeriodcqCompatConfigupdate"), "com.day.cq.cq-licensebranding" to listOf("$comPerioddayPeriodcqPeriodcqLicensebranding"), "com.day.cq.cq-notifcation-impl" to listOf("$comPerioddayPeriodcqPeriodcqNotifcationImpl"), "com.day.cq.cq-replication-audit" to listOf("$comPerioddayPeriodcqPeriodcqReplicationAudit"), "com.day.cq.cq-search-ext" to listOf("$comPerioddayPeriodcqPeriodcqSearchExt"), "com.day.cq.dam.cq-dam-annotation-print" to listOf("$comPerioddayPeriodcqPerioddamPeriodcqDamAnnotationPrint"), "com.day.cq.dam.cq-dam-asset-usage" to listOf("$comPerioddayPeriodcqPerioddamPeriodcqDamAssetUsage"), "com.day.cq.dam.cq-dam-s7dam" to listOf("$comPerioddayPeriodcqPerioddamPeriodcqDamS7dam"), "com.day.cq.dam.cq-dam-similaritysearch" to listOf("$comPerioddayPeriodcqPerioddamPeriodcqDamSimilaritysearch"), "com.day.cq.dam.dam-webdav-support" to listOf("$comPerioddayPeriodcqPerioddamPerioddamWebdavSupport"), "com.day.cq.pre-upgrade-tasks" to listOf("$comPerioddayPeriodcqPeriodpreUpgradeTasks"), "com.day.cq.replication.extensions" to listOf("$comPerioddayPeriodcqPeriodreplicationPeriodextensions"), "com.day.cq.wcm.cq-msm-core" to listOf("$comPerioddayPeriodcqPeriodwcmPeriodcqMsmCore"), "com.day.cq.wcm.cq-wcm-translation" to listOf("$comPerioddayPeriodcqPeriodwcmPeriodcqWcmTranslation"), "day-commons-jrawio" to listOf("$dayCommonsJrawio"), "org.apache.aries.jmx.whiteboard" to listOf("$orgPeriodapachePeriodariesPeriodjmxPeriodwhiteboard"), "org.apache.felix.http.sslfilter" to listOf("$orgPeriodapachePeriodfelixPeriodhttpPeriodsslfilter"), "org.apache.felix.org.apache.felix.threaddump" to listOf("$orgPeriodapachePeriodfelixPeriodorgPeriodapachePeriodfelixPeriodthreaddump"), "org.apache.felix.webconsole.plugins.ds" to listOf("$orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodds"), "org.apache.felix.webconsole.plugins.event" to listOf("$orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodevent"), "org.apache.felix.webconsole.plugins.memoryusage" to listOf("$orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodmemoryusage"), "org.apache.felix.webconsole.plugins.packageadmin" to listOf("$orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodpackageadmin"), "org.apache.jackrabbit.oak-auth-ldap" to listOf("$orgPeriodapachePeriodjackrabbitPeriodoakAuthLdap"), "org.apache.jackrabbit.oak-segment-tar" to listOf("$orgPeriodapachePeriodjackrabbitPeriodoakSegmentTar"), "org.apache.jackrabbit.oak-solr-osgi" to listOf("$orgPeriodapachePeriodjackrabbitPeriodoakSolrOsgi"), "org.apache.sling.bundleresource.impl" to listOf("$orgPeriodapachePeriodslingPeriodbundleresourcePeriodimpl"), "org.apache.sling.commons.fsclassloader" to listOf("$orgPeriodapachePeriodslingPeriodcommonsPeriodfsclassloader"), "org.apache.sling.commons.log.webconsole" to listOf("$orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodwebconsole"), "org.apache.sling.datasource" to listOf("$orgPeriodapachePeriodslingPerioddatasource"), "org.apache.sling.discovery.base" to listOf("$orgPeriodapachePeriodslingPerioddiscoveryPeriodbase"), "org.apache.sling.discovery.oak" to listOf("$orgPeriodapachePeriodslingPerioddiscoveryPeriodoak"), "org.apache.sling.discovery.support" to listOf("$orgPeriodapachePeriodslingPerioddiscoveryPeriodsupport"), "org.apache.sling.distribution.api" to listOf("$orgPeriodapachePeriodslingPerioddistributionPeriodapi"), "org.apache.sling.distribution.core" to listOf("$orgPeriodapachePeriodslingPerioddistributionPeriodcore"), "org.apache.sling.extensions.webconsolesecurityprovider" to listOf("$orgPeriodapachePeriodslingPeriodextensionsPeriodwebconsolesecurityprovider"), "org.apache.sling.hc.webconsole" to listOf("$orgPeriodapachePeriodslingPeriodhcPeriodwebconsole"), "org.apache.sling.installer.console" to listOf("$orgPeriodapachePeriodslingPeriodinstallerPeriodconsole"), "org.apache.sling.installer.provider.file" to listOf("$orgPeriodapachePeriodslingPeriodinstallerPeriodproviderPeriodfile"), "org.apache.sling.installer.provider.jcr" to listOf("$orgPeriodapachePeriodslingPeriodinstallerPeriodproviderPeriodjcr"), "org.apache.sling.jcr.davex" to listOf("$orgPeriodapachePeriodslingPeriodjcrPerioddavex"), "org.apache.sling.jcr.resourcesecurity" to listOf("$orgPeriodapachePeriodslingPeriodjcrPeriodresourcesecurity"), "org.apache.sling.jmx.provider" to listOf("$orgPeriodapachePeriodslingPeriodjmxPeriodprovider"), "org.apache.sling.launchpad.installer" to listOf("$orgPeriodapachePeriodslingPeriodlaunchpadPeriodinstaller"), "org.apache.sling.models.impl" to listOf("$orgPeriodapachePeriodslingPeriodmodelsPeriodimpl"), "org.apache.sling.repoinit.parser" to listOf("$orgPeriodapachePeriodslingPeriodrepoinitPeriodparser"), "org.apache.sling.resource.inventory" to listOf("$orgPeriodapachePeriodslingPeriodresourcePeriodinventory"), "org.apache.sling.resourceresolver" to listOf("$orgPeriodapachePeriodslingPeriodresourceresolver"), "org.apache.sling.scripting.javascript" to listOf("$orgPeriodapachePeriodslingPeriodscriptingPeriodjavascript"), "org.apache.sling.scripting.jst" to listOf("$orgPeriodapachePeriodslingPeriodscriptingPeriodjst"), "org.apache.sling.scripting.sightly.js.provider" to listOf("$orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodjsPeriodprovider"), "org.apache.sling.scripting.sightly.models.provider" to listOf("$orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodmodelsPeriodprovider"), "org.apache.sling.security" to listOf("$orgPeriodapachePeriodslingPeriodsecurity"), "org.apache.sling.servlets.compat" to listOf("$orgPeriodapachePeriodslingPeriodservletsPeriodcompat"), "org.apache.sling.servlets.get" to listOf("$orgPeriodapachePeriodslingPeriodservletsPeriodget"), "org.apache.sling.startupfilter.disabler" to listOf("$orgPeriodapachePeriodslingPeriodstartupfilterPerioddisabler"), "org.apache.sling.tracer" to listOf("$orgPeriodapachePeriodslingPeriodtracer"), "we.retail.client.app.core" to listOf("$wePeriodretailPeriodclientPeriodappPeriodcore"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.apicontroller.FilterResolverHookFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param path  (optional)
    * @param servicePeriodranking  (optional)
    * @return ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteAuthCertImplClientCertAuthHandler(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, path: kotlin.String, servicePeriodranking: kotlin.Int) : ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "path" to listOf("$path"), "service.ranking" to listOf("$servicePeriodranking"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.auth.cert.impl.ClientCertAuthHandler",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param configid  (optional)
    * @param scope  (optional)
    * @return ComAdobeGraniteAuthImsInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteAuthIms(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, configid: kotlin.String, scope: kotlin.String) : ComAdobeGraniteAuthImsInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "configid" to listOf("$configid"), "scope" to listOf("$scope"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.auth.ims",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteAuthImsInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteAuthImsInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param oauthPeriodproviderPeriodid  (optional)
    * @return ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, oauthPeriodproviderPeriodid: kotlin.String) : ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "oauth.provider.id" to listOf("$oauthPeriodproviderPeriodid"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.auth.ims.impl.ExternalUserIdMappingProviderExtension",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param authPeriodimsPeriodclientPeriodsecret  (optional)
    * @param customizerPeriodtype  (optional)
    * @return ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, authPeriodimsPeriodclientPeriodsecret: kotlin.String, customizerPeriodtype: kotlin.String) : ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "auth.ims.client.secret" to listOf("$authPeriodimsPeriodclientPeriodsecret"), "customizer.type" to listOf("$customizerPeriodtype"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSAccessTokenRequestCustomizerImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param oauthPeriodproviderPeriodid  (optional)
    * @return ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, oauthPeriodproviderPeriodid: kotlin.String) : ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "oauth.provider.id" to listOf("$oauthPeriodproviderPeriodid"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSInstanceCredentialsValidator",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param oauthPeriodproviderPeriodid  (optional)
    * @param oauthPeriodproviderPeriodimsPeriodauthorizationPeriodurl  (optional)
    * @param oauthPeriodproviderPeriodimsPeriodtokenPeriodurl  (optional)
    * @param oauthPeriodproviderPeriodimsPeriodprofilePeriodurl  (optional)
    * @param oauthPeriodproviderPeriodimsPeriodextendedPerioddetailsPeriodurls  (optional)
    * @param oauthPeriodproviderPeriodimsPeriodvalidatePeriodtokenPeriodurl  (optional)
    * @param oauthPeriodproviderPeriodimsPeriodsessionPeriodproperty  (optional)
    * @param oauthPeriodproviderPeriodimsPeriodservicePeriodtokenPeriodclientPeriodid  (optional)
    * @param oauthPeriodproviderPeriodimsPeriodservicePeriodtokenPeriodclientPeriodsecret  (optional)
    * @param oauthPeriodproviderPeriodimsPeriodservicePeriodtoken  (optional)
    * @param imsPeriodorgPeriodref  (optional)
    * @param imsPeriodgroupPeriodmapping  (optional)
    * @param oauthPeriodproviderPeriodimsPeriodonlyPeriodlicensePeriodgroup  (optional)
    * @return ComAdobeGraniteAuthImsImplIMSProviderImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteAuthImsImplIMSProviderImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, oauthPeriodproviderPeriodid: kotlin.String, oauthPeriodproviderPeriodimsPeriodauthorizationPeriodurl: kotlin.String, oauthPeriodproviderPeriodimsPeriodtokenPeriodurl: kotlin.String, oauthPeriodproviderPeriodimsPeriodprofilePeriodurl: kotlin.String, oauthPeriodproviderPeriodimsPeriodextendedPerioddetailsPeriodurls: kotlin.Array<kotlin.String>, oauthPeriodproviderPeriodimsPeriodvalidatePeriodtokenPeriodurl: kotlin.String, oauthPeriodproviderPeriodimsPeriodsessionPeriodproperty: kotlin.String, oauthPeriodproviderPeriodimsPeriodservicePeriodtokenPeriodclientPeriodid: kotlin.String, oauthPeriodproviderPeriodimsPeriodservicePeriodtokenPeriodclientPeriodsecret: kotlin.String, oauthPeriodproviderPeriodimsPeriodservicePeriodtoken: kotlin.String, imsPeriodorgPeriodref: kotlin.String, imsPeriodgroupPeriodmapping: kotlin.Array<kotlin.String>, oauthPeriodproviderPeriodimsPeriodonlyPeriodlicensePeriodgroup: kotlin.Boolean) : ComAdobeGraniteAuthImsImplIMSProviderImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "oauth.provider.id" to listOf("$oauthPeriodproviderPeriodid"), "oauth.provider.ims.authorization.url" to listOf("$oauthPeriodproviderPeriodimsPeriodauthorizationPeriodurl"), "oauth.provider.ims.token.url" to listOf("$oauthPeriodproviderPeriodimsPeriodtokenPeriodurl"), "oauth.provider.ims.profile.url" to listOf("$oauthPeriodproviderPeriodimsPeriodprofilePeriodurl"), "oauth.provider.ims.extended.details.urls" to toMultiValue(oauthPeriodproviderPeriodimsPeriodextendedPerioddetailsPeriodurls.toList(), "multi"), "oauth.provider.ims.validate.token.url" to listOf("$oauthPeriodproviderPeriodimsPeriodvalidatePeriodtokenPeriodurl"), "oauth.provider.ims.session.property" to listOf("$oauthPeriodproviderPeriodimsPeriodsessionPeriodproperty"), "oauth.provider.ims.service.token.client.id" to listOf("$oauthPeriodproviderPeriodimsPeriodservicePeriodtokenPeriodclientPeriodid"), "oauth.provider.ims.service.token.client.secret" to listOf("$oauthPeriodproviderPeriodimsPeriodservicePeriodtokenPeriodclientPeriodsecret"), "oauth.provider.ims.service.token" to listOf("$oauthPeriodproviderPeriodimsPeriodservicePeriodtoken"), "ims.org.ref" to listOf("$imsPeriodorgPeriodref"), "ims.group.mapping" to toMultiValue(imsPeriodgroupPeriodmapping.toList(), "multi"), "oauth.provider.ims.only.license.group" to listOf("$oauthPeriodproviderPeriodimsPeriodonlyPeriodlicensePeriodgroup"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSProviderImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteAuthImsImplIMSProviderImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteAuthImsImplIMSProviderImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param oauthPeriodconfigmanagerPeriodimsPeriodconfigid  (optional)
    * @param imsPeriodowningEntity  (optional)
    * @param aemPeriodinstanceId  (optional)
    * @param imsPeriodserviceCode  (optional)
    * @return ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteAuthImsImplImsConfigProviderImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, oauthPeriodconfigmanagerPeriodimsPeriodconfigid: kotlin.String, imsPeriodowningEntity: kotlin.String, aemPeriodinstanceId: kotlin.String, imsPeriodserviceCode: kotlin.String) : ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "oauth.configmanager.ims.configid" to listOf("$oauthPeriodconfigmanagerPeriodimsPeriodconfigid"), "ims.owningEntity" to listOf("$imsPeriodowningEntity"), "aem.instanceId" to listOf("$aemPeriodinstanceId"), "ims.serviceCode" to listOf("$imsPeriodserviceCode"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.auth.ims.impl.ImsConfigProviderImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param name  (optional)
    * @param authPeriodtokenPeriodproviderPeriodtitle  (optional)
    * @param authPeriodtokenPeriodproviderPerioddefaultPeriodclaims  (optional)
    * @param authPeriodtokenPeriodproviderPeriodendpoint  (optional)
    * @param authPeriodaccessPeriodtokenPeriodrequest  (optional)
    * @param authPeriodtokenPeriodproviderPeriodkeypairPeriodalias  (optional)
    * @param authPeriodtokenPeriodproviderPeriodconnPeriodtimeout  (optional)
    * @param authPeriodtokenPeriodproviderPeriodsoPeriodtimeout  (optional)
    * @param authPeriodtokenPeriodproviderPeriodclientPeriodid  (optional)
    * @param authPeriodtokenPeriodproviderPeriodscope  (optional)
    * @param authPeriodtokenPeriodproviderPeriodreusePeriodaccessPeriodtoken  (optional)
    * @param authPeriodtokenPeriodproviderPeriodrelaxedPeriodssl  (optional)
    * @param tokenPeriodrequestPeriodcustomizerPeriodtype  (optional)
    * @param authPeriodtokenPeriodvalidatorPeriodtype  (optional)
    * @return ComAdobeGraniteAuthOauthAccesstokenProviderInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteAuthOauthAccesstokenProvider(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, name: kotlin.String, authPeriodtokenPeriodproviderPeriodtitle: kotlin.String, authPeriodtokenPeriodproviderPerioddefaultPeriodclaims: kotlin.Array<kotlin.String>, authPeriodtokenPeriodproviderPeriodendpoint: kotlin.String, authPeriodaccessPeriodtokenPeriodrequest: kotlin.String, authPeriodtokenPeriodproviderPeriodkeypairPeriodalias: kotlin.String, authPeriodtokenPeriodproviderPeriodconnPeriodtimeout: kotlin.Int, authPeriodtokenPeriodproviderPeriodsoPeriodtimeout: kotlin.Int, authPeriodtokenPeriodproviderPeriodclientPeriodid: kotlin.String, authPeriodtokenPeriodproviderPeriodscope: kotlin.String, authPeriodtokenPeriodproviderPeriodreusePeriodaccessPeriodtoken: kotlin.Boolean, authPeriodtokenPeriodproviderPeriodrelaxedPeriodssl: kotlin.Boolean, tokenPeriodrequestPeriodcustomizerPeriodtype: kotlin.String, authPeriodtokenPeriodvalidatorPeriodtype: kotlin.String) : ComAdobeGraniteAuthOauthAccesstokenProviderInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "name" to listOf("$name"), "auth.token.provider.title" to listOf("$authPeriodtokenPeriodproviderPeriodtitle"), "auth.token.provider.default.claims" to toMultiValue(authPeriodtokenPeriodproviderPerioddefaultPeriodclaims.toList(), "multi"), "auth.token.provider.endpoint" to listOf("$authPeriodtokenPeriodproviderPeriodendpoint"), "auth.access.token.request" to listOf("$authPeriodaccessPeriodtokenPeriodrequest"), "auth.token.provider.keypair.alias" to listOf("$authPeriodtokenPeriodproviderPeriodkeypairPeriodalias"), "auth.token.provider.conn.timeout" to listOf("$authPeriodtokenPeriodproviderPeriodconnPeriodtimeout"), "auth.token.provider.so.timeout" to listOf("$authPeriodtokenPeriodproviderPeriodsoPeriodtimeout"), "auth.token.provider.client.id" to listOf("$authPeriodtokenPeriodproviderPeriodclientPeriodid"), "auth.token.provider.scope" to listOf("$authPeriodtokenPeriodproviderPeriodscope"), "auth.token.provider.reuse.access.token" to listOf("$authPeriodtokenPeriodproviderPeriodreusePeriodaccessPeriodtoken"), "auth.token.provider.relaxed.ssl" to listOf("$authPeriodtokenPeriodproviderPeriodrelaxedPeriodssl"), "token.request.customizer.type" to listOf("$tokenPeriodrequestPeriodcustomizerPeriodtype"), "auth.token.validator.type" to listOf("$authPeriodtokenPeriodvalidatorPeriodtype"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.auth.oauth.accesstoken.provider",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteAuthOauthAccesstokenProviderInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteAuthOauthAccesstokenProviderInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param path  (optional)
    * @param oauthPeriodclientIdsPeriodallowed  (optional)
    * @param authPeriodbearerPeriodsyncPeriodims  (optional)
    * @param authPeriodtokenRequestParameter  (optional)
    * @param oauthPeriodbearerPeriodconfigid  (optional)
    * @param oauthPeriodjwtPeriodsupport  (optional)
    * @return ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteAuthOauthImplBearerAuthenticationHandler(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, path: kotlin.String, oauthPeriodclientIdsPeriodallowed: kotlin.Array<kotlin.String>, authPeriodbearerPeriodsyncPeriodims: kotlin.Boolean, authPeriodtokenRequestParameter: kotlin.String, oauthPeriodbearerPeriodconfigid: kotlin.String, oauthPeriodjwtPeriodsupport: kotlin.Boolean) : ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "path" to listOf("$path"), "oauth.clientIds.allowed" to toMultiValue(oauthPeriodclientIdsPeriodallowed.toList(), "multi"), "auth.bearer.sync.ims" to listOf("$authPeriodbearerPeriodsyncPeriodims"), "auth.tokenRequestParameter" to listOf("$authPeriodtokenRequestParameter"), "oauth.bearer.configid" to listOf("$oauthPeriodbearerPeriodconfigid"), "oauth.jwt.support" to listOf("$oauthPeriodjwtPeriodsupport"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.BearerAuthenticationHandler",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param authPeriodtokenPeriodvalidatorPeriodtype  (optional)
    * @return ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, authPeriodtokenPeriodvalidatorPeriodtype: kotlin.String) : ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "auth.token.validator.type" to listOf("$authPeriodtokenPeriodvalidatorPeriodtype"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.DefaultTokenValidatorImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param oauthPeriodproviderPeriodid  (optional)
    * @return ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteAuthOauthImplFacebookProviderImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, oauthPeriodproviderPeriodid: kotlin.String) : ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "oauth.provider.id" to listOf("$oauthPeriodproviderPeriodid"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.FacebookProviderImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param oauthPeriodproviderPeriodid  (optional)
    * @param oauthPeriodproviderPeriodgithubPeriodauthorizationPeriodurl  (optional)
    * @param oauthPeriodproviderPeriodgithubPeriodtokenPeriodurl  (optional)
    * @param oauthPeriodproviderPeriodgithubPeriodprofilePeriodurl  (optional)
    * @return ComAdobeGraniteAuthOauthImplGithubProviderImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteAuthOauthImplGithubProviderImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, oauthPeriodproviderPeriodid: kotlin.String, oauthPeriodproviderPeriodgithubPeriodauthorizationPeriodurl: kotlin.String, oauthPeriodproviderPeriodgithubPeriodtokenPeriodurl: kotlin.String, oauthPeriodproviderPeriodgithubPeriodprofilePeriodurl: kotlin.String) : ComAdobeGraniteAuthOauthImplGithubProviderImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "oauth.provider.id" to listOf("$oauthPeriodproviderPeriodid"), "oauth.provider.github.authorization.url" to listOf("$oauthPeriodproviderPeriodgithubPeriodauthorizationPeriodurl"), "oauth.provider.github.token.url" to listOf("$oauthPeriodproviderPeriodgithubPeriodtokenPeriodurl"), "oauth.provider.github.profile.url" to listOf("$oauthPeriodproviderPeriodgithubPeriodprofilePeriodurl"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.GithubProviderImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteAuthOauthImplGithubProviderImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteAuthOauthImplGithubProviderImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param oauthPeriodproviderPeriodid  (optional)
    * @param oauthPeriodproviderPeriodgranitePeriodauthorizationPeriodurl  (optional)
    * @param oauthPeriodproviderPeriodgranitePeriodtokenPeriodurl  (optional)
    * @param oauthPeriodproviderPeriodgranitePeriodprofilePeriodurl  (optional)
    * @param oauthPeriodproviderPeriodgranitePeriodextendedPerioddetailsPeriodurls  (optional)
    * @return ComAdobeGraniteAuthOauthImplGraniteProviderInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteAuthOauthImplGraniteProvider(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, oauthPeriodproviderPeriodid: kotlin.String, oauthPeriodproviderPeriodgranitePeriodauthorizationPeriodurl: kotlin.String, oauthPeriodproviderPeriodgranitePeriodtokenPeriodurl: kotlin.String, oauthPeriodproviderPeriodgranitePeriodprofilePeriodurl: kotlin.String, oauthPeriodproviderPeriodgranitePeriodextendedPerioddetailsPeriodurls: kotlin.String) : ComAdobeGraniteAuthOauthImplGraniteProviderInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "oauth.provider.id" to listOf("$oauthPeriodproviderPeriodid"), "oauth.provider.granite.authorization.url" to listOf("$oauthPeriodproviderPeriodgranitePeriodauthorizationPeriodurl"), "oauth.provider.granite.token.url" to listOf("$oauthPeriodproviderPeriodgranitePeriodtokenPeriodurl"), "oauth.provider.granite.profile.url" to listOf("$oauthPeriodproviderPeriodgranitePeriodprofilePeriodurl"), "oauth.provider.granite.extended.details.urls" to listOf("$oauthPeriodproviderPeriodgranitePeriodextendedPerioddetailsPeriodurls"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.GraniteProvider",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteAuthOauthImplGraniteProviderInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteAuthOauthImplGraniteProviderInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param oauthPeriodcookiePeriodloginPeriodtimeout  (optional)
    * @param oauthPeriodcookiePeriodmaxPeriodage  (optional)
    * @return ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteAuthOauthImplHelperProviderConfigManager(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, oauthPeriodcookiePeriodloginPeriodtimeout: kotlin.String, oauthPeriodcookiePeriodmaxPeriodage: kotlin.String) : ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "oauth.cookie.login.timeout" to listOf("$oauthPeriodcookiePeriodloginPeriodtimeout"), "oauth.cookie.max.age" to listOf("$oauthPeriodcookiePeriodmaxPeriodage"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManager",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param oauthPeriodcookiePeriodloginPeriodtimeout  (optional)
    * @param oauthPeriodcookiePeriodmaxPeriodage  (optional)
    * @return ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, oauthPeriodcookiePeriodloginPeriodtimeout: kotlin.String, oauthPeriodcookiePeriodmaxPeriodage: kotlin.String) : ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "oauth.cookie.login.timeout" to listOf("$oauthPeriodcookiePeriodloginPeriodtimeout"), "oauth.cookie.max.age" to listOf("$oauthPeriodcookiePeriodmaxPeriodage"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManagerInternal",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param path  (optional)
    * @return ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteAuthOauthImplOAuthAuthenticationHandler(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, path: kotlin.String) : ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "path" to listOf("$path"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.OAuthAuthenticationHandler",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param oauthPeriodproviderPeriodid  (optional)
    * @return ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteAuthOauthImplTwitterProviderImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, oauthPeriodproviderPeriodid: kotlin.String) : ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "oauth.provider.id" to listOf("$oauthPeriodproviderPeriodid"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.TwitterProviderImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param oauthPeriodconfigPeriodid  (optional)
    * @param oauthPeriodclientPeriodid  (optional)
    * @param oauthPeriodclientPeriodsecret  (optional)
    * @param oauthPeriodscope  (optional)
    * @param oauthPeriodconfigPeriodproviderPeriodid  (optional)
    * @param oauthPeriodcreatePeriodusers  (optional)
    * @param oauthPerioduseridPeriodproperty  (optional)
    * @param forcePeriodstrictPeriodusernamePeriodmatching  (optional)
    * @param oauthPeriodencodePerioduserids  (optional)
    * @param oauthPeriodhashPerioduserids  (optional)
    * @param oauthPeriodcallBackUrl  (optional)
    * @param oauthPeriodaccessPeriodtokenPeriodpersist  (optional)
    * @param oauthPeriodaccessPeriodtokenPeriodpersistPeriodcookie  (optional)
    * @param oauthPeriodcsrfPeriodstatePeriodprotection  (optional)
    * @param oauthPeriodredirectPeriodrequestPeriodparams  (optional)
    * @param oauthPeriodconfigPeriodsiblingsPeriodallow  (optional)
    * @return ComAdobeGraniteAuthOauthProviderInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteAuthOauthProvider(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, oauthPeriodconfigPeriodid: kotlin.String, oauthPeriodclientPeriodid: kotlin.String, oauthPeriodclientPeriodsecret: kotlin.String, oauthPeriodscope: kotlin.Array<kotlin.String>, oauthPeriodconfigPeriodproviderPeriodid: kotlin.String, oauthPeriodcreatePeriodusers: kotlin.Boolean, oauthPerioduseridPeriodproperty: kotlin.String, forcePeriodstrictPeriodusernamePeriodmatching: kotlin.Boolean, oauthPeriodencodePerioduserids: kotlin.Boolean, oauthPeriodhashPerioduserids: kotlin.Boolean, oauthPeriodcallBackUrl: kotlin.String, oauthPeriodaccessPeriodtokenPeriodpersist: kotlin.Boolean, oauthPeriodaccessPeriodtokenPeriodpersistPeriodcookie: kotlin.Boolean, oauthPeriodcsrfPeriodstatePeriodprotection: kotlin.Boolean, oauthPeriodredirectPeriodrequestPeriodparams: kotlin.Boolean, oauthPeriodconfigPeriodsiblingsPeriodallow: kotlin.Boolean) : ComAdobeGraniteAuthOauthProviderInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "oauth.config.id" to listOf("$oauthPeriodconfigPeriodid"), "oauth.client.id" to listOf("$oauthPeriodclientPeriodid"), "oauth.client.secret" to listOf("$oauthPeriodclientPeriodsecret"), "oauth.scope" to toMultiValue(oauthPeriodscope.toList(), "multi"), "oauth.config.provider.id" to listOf("$oauthPeriodconfigPeriodproviderPeriodid"), "oauth.create.users" to listOf("$oauthPeriodcreatePeriodusers"), "oauth.userid.property" to listOf("$oauthPerioduseridPeriodproperty"), "force.strict.username.matching" to listOf("$forcePeriodstrictPeriodusernamePeriodmatching"), "oauth.encode.userids" to listOf("$oauthPeriodencodePerioduserids"), "oauth.hash.userids" to listOf("$oauthPeriodhashPerioduserids"), "oauth.callBackUrl" to listOf("$oauthPeriodcallBackUrl"), "oauth.access.token.persist" to listOf("$oauthPeriodaccessPeriodtokenPeriodpersist"), "oauth.access.token.persist.cookie" to listOf("$oauthPeriodaccessPeriodtokenPeriodpersistPeriodcookie"), "oauth.csrf.state.protection" to listOf("$oauthPeriodcsrfPeriodstatePeriodprotection"), "oauth.redirect.request.params" to listOf("$oauthPeriodredirectPeriodrequestPeriodparams"), "oauth.config.siblings.allow" to listOf("$oauthPeriodconfigPeriodsiblingsPeriodallow"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.auth.oauth.provider",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteAuthOauthProviderInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteAuthOauthProviderInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param supportedPaths  (optional)
    * @return ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteAuthRequirementImplDefaultRequirementHandler(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, supportedPaths: kotlin.Array<kotlin.String>) : ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "supportedPaths" to toMultiValue(supportedPaths.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.auth.requirement.impl.DefaultRequirementHandler",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param path  (optional)
    * @param servicePeriodranking  (optional)
    * @param idpUrl  (optional)
    * @param idpCertAlias  (optional)
    * @param idpHttpRedirect  (optional)
    * @param serviceProviderEntityId  (optional)
    * @param assertionConsumerServiceURL  (optional)
    * @param spPrivateKeyAlias  (optional)
    * @param keyStorePassword  (optional)
    * @param defaultRedirectUrl  (optional)
    * @param userIDAttribute  (optional)
    * @param useEncryption  (optional)
    * @param createUser  (optional)
    * @param userIntermediatePath  (optional)
    * @param addGroupMemberships  (optional)
    * @param groupMembershipAttribute  (optional)
    * @param defaultGroups  (optional)
    * @param nameIdFormat  (optional)
    * @param synchronizeAttributes  (optional)
    * @param handleLogout  (optional)
    * @param logoutUrl  (optional)
    * @param clockTolerance  (optional)
    * @param digestMethod  (optional)
    * @param signatureMethod  (optional)
    * @param identitySyncType  (optional)
    * @param idpIdentifier  (optional)
    * @return ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteAuthSamlSamlAuthenticationHandler(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, path: kotlin.Array<kotlin.String>, servicePeriodranking: kotlin.Int, idpUrl: kotlin.String, idpCertAlias: kotlin.String, idpHttpRedirect: kotlin.Boolean, serviceProviderEntityId: kotlin.String, assertionConsumerServiceURL: kotlin.String, spPrivateKeyAlias: kotlin.String, keyStorePassword: kotlin.String, defaultRedirectUrl: kotlin.String, userIDAttribute: kotlin.String, useEncryption: kotlin.Boolean, createUser: kotlin.Boolean, userIntermediatePath: kotlin.String, addGroupMemberships: kotlin.Boolean, groupMembershipAttribute: kotlin.String, defaultGroups: kotlin.Array<kotlin.String>, nameIdFormat: kotlin.String, synchronizeAttributes: kotlin.Array<kotlin.String>, handleLogout: kotlin.Boolean, logoutUrl: kotlin.String, clockTolerance: kotlin.Int, digestMethod: kotlin.String, signatureMethod: kotlin.String, identitySyncType: kotlin.String, idpIdentifier: kotlin.String) : ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "path" to toMultiValue(path.toList(), "multi"), "service.ranking" to listOf("$servicePeriodranking"), "idpUrl" to listOf("$idpUrl"), "idpCertAlias" to listOf("$idpCertAlias"), "idpHttpRedirect" to listOf("$idpHttpRedirect"), "serviceProviderEntityId" to listOf("$serviceProviderEntityId"), "assertionConsumerServiceURL" to listOf("$assertionConsumerServiceURL"), "spPrivateKeyAlias" to listOf("$spPrivateKeyAlias"), "keyStorePassword" to listOf("$keyStorePassword"), "defaultRedirectUrl" to listOf("$defaultRedirectUrl"), "userIDAttribute" to listOf("$userIDAttribute"), "useEncryption" to listOf("$useEncryption"), "createUser" to listOf("$createUser"), "userIntermediatePath" to listOf("$userIntermediatePath"), "addGroupMemberships" to listOf("$addGroupMemberships"), "groupMembershipAttribute" to listOf("$groupMembershipAttribute"), "defaultGroups" to toMultiValue(defaultGroups.toList(), "multi"), "nameIdFormat" to listOf("$nameIdFormat"), "synchronizeAttributes" to toMultiValue(synchronizeAttributes.toList(), "multi"), "handleLogout" to listOf("$handleLogout"), "logoutUrl" to listOf("$logoutUrl"), "clockTolerance" to listOf("$clockTolerance"), "digestMethod" to listOf("$digestMethod"), "signatureMethod" to listOf("$signatureMethod"), "identitySyncType" to listOf("$identitySyncType"), "idpIdentifier" to listOf("$idpIdentifier"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param path  (optional)
    * @param servicePeriodranking  (optional)
    * @param jaasPeriodcontrolFlag  (optional)
    * @param jaasPeriodrealmName  (optional)
    * @param jaasPeriodranking  (optional)
    * @param headers  (optional)
    * @param cookies  (optional)
    * @param parameters  (optional)
    * @param usermap  (optional)
    * @param format  (optional)
    * @param trustedCredentialsAttribute  (optional)
    * @return ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteAuthSsoImplSsoAuthenticationHandler(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, path: kotlin.String, servicePeriodranking: kotlin.Int, jaasPeriodcontrolFlag: kotlin.String, jaasPeriodrealmName: kotlin.String, jaasPeriodranking: kotlin.Int, headers: kotlin.Array<kotlin.String>, cookies: kotlin.Array<kotlin.String>, parameters: kotlin.Array<kotlin.String>, usermap: kotlin.Array<kotlin.String>, format: kotlin.String, trustedCredentialsAttribute: kotlin.String) : ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "path" to listOf("$path"), "service.ranking" to listOf("$servicePeriodranking"), "jaas.controlFlag" to listOf("$jaasPeriodcontrolFlag"), "jaas.realmName" to listOf("$jaasPeriodrealmName"), "jaas.ranking" to listOf("$jaasPeriodranking"), "headers" to toMultiValue(headers.toList(), "multi"), "cookies" to toMultiValue(cookies.toList(), "multi"), "parameters" to toMultiValue(parameters.toList(), "multi"), "usermap" to toMultiValue(usermap.toList(), "multi"), "format" to listOf("$format"), "trustedCredentialsAttribute" to listOf("$trustedCredentialsAttribute"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.auth.sso.impl.SsoAuthenticationHandler",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param hcPeriodtags  (optional)
    * @param minimumPeriodcodePeriodcachePeriodsize  (optional)
    * @return ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteBundlesHcImplCodeCacheHealthCheck(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, hcPeriodtags: kotlin.Array<kotlin.String>, minimumPeriodcodePeriodcachePeriodsize: kotlin.Int) : ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "hc.tags" to toMultiValue(hcPeriodtags.toList(), "multi"), "minimum.code.cache.size" to listOf("$minimumPeriodcodePeriodcachePeriodsize"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.CodeCacheHealthCheck",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param hcPeriodtags  (optional)
    * @return ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, hcPeriodtags: kotlin.Array<kotlin.String>) : ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "hc.tags" to toMultiValue(hcPeriodtags.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.CrxdeSupportBundleHealthCheck",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param hcPeriodtags  (optional)
    * @return ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteBundlesHcImplDavExBundleHealthCheck(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, hcPeriodtags: kotlin.Array<kotlin.String>) : ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "hc.tags" to toMultiValue(hcPeriodtags.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.DavExBundleHealthCheck",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param hcPeriodtags  (optional)
    * @param ignoredPeriodbundles  (optional)
    * @return ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, hcPeriodtags: kotlin.Array<kotlin.String>, ignoredPeriodbundles: kotlin.Array<kotlin.String>) : ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "hc.tags" to toMultiValue(hcPeriodtags.toList(), "multi"), "ignored.bundles" to toMultiValue(ignoredPeriodbundles.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.InactiveBundlesHealthCheck",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param hcPeriodtags  (optional)
    * @param maxPeriodqueuedPeriodjobs  (optional)
    * @return ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteBundlesHcImplJobsHealthCheck(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, hcPeriodtags: kotlin.Array<kotlin.String>, maxPeriodqueuedPeriodjobs: kotlin.Int) : ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "hc.tags" to toMultiValue(hcPeriodtags.toList(), "multi"), "max.queued.jobs" to listOf("$maxPeriodqueuedPeriodjobs"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.JobsHealthCheck",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param hcPeriodtags  (optional)
    * @return ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteBundlesHcImplSlingGetServletHealthCheck(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, hcPeriodtags: kotlin.Array<kotlin.String>) : ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "hc.tags" to toMultiValue(hcPeriodtags.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingGetServletHealthCheck",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param hcPeriodtags  (optional)
    * @return ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, hcPeriodtags: kotlin.Array<kotlin.String>) : ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "hc.tags" to toMultiValue(hcPeriodtags.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJavaScriptHandlerHealthCheck",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param hcPeriodtags  (optional)
    * @return ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, hcPeriodtags: kotlin.Array<kotlin.String>) : ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "hc.tags" to toMultiValue(hcPeriodtags.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJspScriptHandlerHealthCheck",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param hcPeriodtags  (optional)
    * @return ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, hcPeriodtags: kotlin.Array<kotlin.String>) : ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "hc.tags" to toMultiValue(hcPeriodtags.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingReferrerFilterHealthCheck",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param hcPeriodtags  (optional)
    * @return ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteBundlesHcImplWebDavBundleHealthCheck(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, hcPeriodtags: kotlin.Array<kotlin.String>) : ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "hc.tags" to toMultiValue(hcPeriodtags.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.WebDavBundleHealthCheck",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param replicatePeriodcommentPeriodresourceTypes  (optional)
    * @return ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteCommentsInternalCommentReplicationContentFilterFac(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, replicatePeriodcommentPeriodresourceTypes: kotlin.Array<kotlin.String>) : ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "replicate.comment.resourceTypes" to toMultiValue(replicatePeriodcommentPeriodresourceTypes.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.comments.internal.CommentReplicationContentFilterFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param compatgroups  (optional)
    * @param enabled  (optional)
    * @return ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, compatgroups: kotlin.Array<kotlin.String>, enabled: kotlin.Boolean) : ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "compatgroups" to toMultiValue(compatgroups.toList(), "multi"), "enabled" to listOf("$enabled"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.compatrouter.impl.CompatSwitchingServiceImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param id  (optional)
    * @param compatPath  (optional)
    * @param newPath  (optional)
    * @return ComAdobeGraniteCompatrouterImplRoutingConfigInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteCompatrouterImplRoutingConfig(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, id: kotlin.String, compatPath: kotlin.String, newPath: kotlin.String) : ComAdobeGraniteCompatrouterImplRoutingConfigInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "id" to listOf("$id"), "compatPath" to listOf("$compatPath"), "newPath" to listOf("$newPath"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.compatrouter.impl.RoutingConfig",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteCompatrouterImplRoutingConfigInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteCompatrouterImplRoutingConfigInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param group  (optional)
    * @param ids  (optional)
    * @return ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteCompatrouterImplSwitchMappingConfig(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, group: kotlin.String, ids: kotlin.Array<kotlin.String>) : ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "group" to listOf("$group"), "ids" to toMultiValue(ids.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.compatrouter.impl.SwitchMappingConfig",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param enabled  (optional)
    * @param fallbackPaths  (optional)
    * @return ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, enabled: kotlin.Boolean, fallbackPaths: kotlin.Array<kotlin.String>) : ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "enabled" to listOf("$enabled"), "fallbackPaths" to toMultiValue(fallbackPaths.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.conf.impl.RuntimeAwareConfigurationResourceResolvingStrategy",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param comPeriodadobePeriodgranitePeriodcontexthubPeriodsilentMode  (optional)
    * @param comPeriodadobePeriodgranitePeriodcontexthubPeriodshowUi  (optional)
    * @return ComAdobeGraniteContexthubImplContextHubImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteContexthubImplContextHubImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, comPeriodadobePeriodgranitePeriodcontexthubPeriodsilentMode: kotlin.Boolean, comPeriodadobePeriodgranitePeriodcontexthubPeriodshowUi: kotlin.Boolean) : ComAdobeGraniteContexthubImplContextHubImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "com.adobe.granite.contexthub.silent_mode" to listOf("$comPeriodadobePeriodgranitePeriodcontexthubPeriodsilentMode"), "com.adobe.granite.contexthub.show_ui" to listOf("$comPeriodadobePeriodgranitePeriodcontexthubPeriodshowUi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.contexthub.impl.ContextHubImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteContexthubImplContextHubImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteContexthubImplContextHubImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param alloworigin  (optional)
    * @param alloworiginregexp  (optional)
    * @param allowedpaths  (optional)
    * @param exposedheaders  (optional)
    * @param maxage  (optional)
    * @param supportedheaders  (optional)
    * @param supportedmethods  (optional)
    * @param supportscredentials  (optional)
    * @return ComAdobeGraniteCorsImplCORSPolicyImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteCorsImplCORSPolicyImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, alloworigin: kotlin.Array<kotlin.String>, alloworiginregexp: kotlin.Array<kotlin.String>, allowedpaths: kotlin.Array<kotlin.String>, exposedheaders: kotlin.Array<kotlin.String>, maxage: kotlin.Int, supportedheaders: kotlin.Array<kotlin.String>, supportedmethods: kotlin.Array<kotlin.String>, supportscredentials: kotlin.Boolean) : ComAdobeGraniteCorsImplCORSPolicyImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "alloworigin" to toMultiValue(alloworigin.toList(), "multi"), "alloworiginregexp" to toMultiValue(alloworiginregexp.toList(), "multi"), "allowedpaths" to toMultiValue(allowedpaths.toList(), "multi"), "exposedheaders" to toMultiValue(exposedheaders.toList(), "multi"), "maxage" to listOf("$maxage"), "supportedheaders" to toMultiValue(supportedheaders.toList(), "multi"), "supportedmethods" to toMultiValue(supportedmethods.toList(), "multi"), "supportscredentials" to listOf("$supportscredentials"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.cors.impl.CORSPolicyImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteCorsImplCORSPolicyImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteCorsImplCORSPolicyImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param filterPeriodmethods  (optional)
    * @param filterPeriodenablePeriodsafePerioduserPeriodagents  (optional)
    * @param filterPeriodsafePerioduserPeriodagents  (optional)
    * @param filterPeriodexcludedPeriodpaths  (optional)
    * @return ComAdobeGraniteCsrfImplCSRFFilterInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteCsrfImplCSRFFilter(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, filterPeriodmethods: kotlin.Array<kotlin.String>, filterPeriodenablePeriodsafePerioduserPeriodagents: kotlin.Boolean, filterPeriodsafePerioduserPeriodagents: kotlin.Array<kotlin.String>, filterPeriodexcludedPeriodpaths: kotlin.Array<kotlin.String>) : ComAdobeGraniteCsrfImplCSRFFilterInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "filter.methods" to toMultiValue(filterPeriodmethods.toList(), "multi"), "filter.enable.safe.user.agents" to listOf("$filterPeriodenablePeriodsafePerioduserPeriodagents"), "filter.safe.user.agents" to toMultiValue(filterPeriodsafePerioduserPeriodagents.toList(), "multi"), "filter.excluded.paths" to toMultiValue(filterPeriodexcludedPeriodpaths.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.csrf.impl.CSRFFilter",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteCsrfImplCSRFFilterInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteCsrfImplCSRFFilterInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param csrfPeriodtokenPeriodexpiresPeriodin  (optional)
    * @param slingPeriodauthPeriodrequirements  (optional)
    * @return ComAdobeGraniteCsrfImplCSRFServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteCsrfImplCSRFServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, csrfPeriodtokenPeriodexpiresPeriodin: kotlin.Int, slingPeriodauthPeriodrequirements: kotlin.String) : ComAdobeGraniteCsrfImplCSRFServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "csrf.token.expires.in" to listOf("$csrfPeriodtokenPeriodexpiresPeriodin"), "sling.auth.requirements" to listOf("$slingPeriodauthPeriodrequirements"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.csrf.impl.CSRFServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteCsrfImplCSRFServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteCsrfImplCSRFServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param name  (optional)
    * @param username  (optional)
    * @param encryptedPassword  (optional)
    * @return ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, name: kotlin.String, username: kotlin.String, encryptedPassword: kotlin.String) : ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "name" to listOf("$name"), "username" to listOf("$username"), "encryptedPassword" to listOf("$encryptedPassword"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.distribution.core.impl.CryptoDistributionTransportSecretProvider",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param enabled  (optional)
    * @param agentName  (optional)
    * @param diffPath  (optional)
    * @param observedPath  (optional)
    * @param serviceName  (optional)
    * @param propertyNames  (optional)
    * @param distributionDelay  (optional)
    * @param serviceUserPeriodtarget  (optional)
    * @return ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteDistributionCoreImplDiffDiffChangesObserver(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, enabled: kotlin.Boolean, agentName: kotlin.String, diffPath: kotlin.String, observedPath: kotlin.String, serviceName: kotlin.String, propertyNames: kotlin.String, distributionDelay: kotlin.Int, serviceUserPeriodtarget: kotlin.String) : ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "enabled" to listOf("$enabled"), "agentName" to listOf("$agentName"), "diffPath" to listOf("$diffPath"), "observedPath" to listOf("$observedPath"), "serviceName" to listOf("$serviceName"), "propertyNames" to listOf("$propertyNames"), "distributionDelay" to listOf("$distributionDelay"), "serviceUser.target" to listOf("$serviceUserPeriodtarget"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffChangesObserver",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param diffPath  (optional)
    * @param serviceName  (optional)
    * @param serviceUserPeriodtarget  (optional)
    * @return ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteDistributionCoreImplDiffDiffEventListener(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, diffPath: kotlin.String, serviceName: kotlin.String, serviceUserPeriodtarget: kotlin.String) : ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "diffPath" to listOf("$diffPath"), "serviceName" to listOf("$serviceName"), "serviceUser.target" to listOf("$serviceUserPeriodtarget"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffEventListener",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param importerPeriodname  (optional)
    * @return ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteDistributionCoreImplDistributionToReplicationEven(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, importerPeriodname: kotlin.Array<kotlin.String>) : ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "importer.name" to toMultiValue(importerPeriodname.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.distribution.core.impl.DistributionToReplicationEventTransformer",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param providerName  (optional)
    * @param forwardPeriodrequests  (optional)
    * @return ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, providerName: kotlin.String, forwardPeriodrequests: kotlin.Boolean) : ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "providerName" to listOf("$providerName"), "forward.requests" to listOf("$forwardPeriodrequests"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.distribution.core.impl.replication.adapters.ReplicationAgentProvider",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param forwardPeriodrequests  (optional)
    * @return ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteDistributionCoreImplReplicationDistributionTrans(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, forwardPeriodrequests: kotlin.Boolean) : ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "forward.requests" to listOf("$forwardPeriodrequests"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.distribution.core.impl.replication.DistributionTransportHandler",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param name  (optional)
    * @param serviceName  (optional)
    * @param userId  (optional)
    * @param accessTokenProviderPeriodtarget  (optional)
    * @return ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, name: kotlin.String, serviceName: kotlin.String, userId: kotlin.String, accessTokenProviderPeriodtarget: kotlin.String) : ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "name" to listOf("$name"), "serviceName" to listOf("$serviceName"), "userId" to listOf("$userId"), "accessTokenProvider.target" to listOf("$accessTokenProviderPeriodtarget"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.distribution.core.impl.transport.AccessTokenDistributionTransportSecretProvider",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param featurePeriodname  (optional)
    * @param featurePerioddescription  (optional)
    * @param httpPeriodheaderPeriodname  (optional)
    * @param httpPeriodheaderPeriodvaluepattern  (optional)
    * @return ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteFragsImplCheckHttpHeaderFlag(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, featurePeriodname: kotlin.String, featurePerioddescription: kotlin.String, httpPeriodheaderPeriodname: kotlin.String, httpPeriodheaderPeriodvaluepattern: kotlin.String) : ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "feature.name" to listOf("$featurePeriodname"), "feature.description" to listOf("$featurePerioddescription"), "http.header.name" to listOf("$httpPeriodheaderPeriodname"), "http.header.valuepattern" to listOf("$httpPeriodheaderPeriodvaluepattern"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.frags.impl.CheckHttpHeaderFlag",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param featurePeriodname  (optional)
    * @param featurePerioddescription  (optional)
    * @param activePeriodpercentage  (optional)
    * @param cookiePeriodname  (optional)
    * @param cookiePeriodmaxAge  (optional)
    * @return ComAdobeGraniteFragsImplRandomFeatureInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteFragsImplRandomFeature(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, featurePeriodname: kotlin.String, featurePerioddescription: kotlin.String, activePeriodpercentage: kotlin.String, cookiePeriodname: kotlin.String, cookiePeriodmaxAge: kotlin.Int) : ComAdobeGraniteFragsImplRandomFeatureInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "feature.name" to listOf("$featurePeriodname"), "feature.description" to listOf("$featurePerioddescription"), "active.percentage" to listOf("$activePeriodpercentage"), "cookie.name" to listOf("$cookiePeriodname"), "cookie.maxAge" to listOf("$cookiePeriodmaxAge"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.frags.impl.RandomFeature",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteFragsImplRandomFeatureInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteFragsImplRandomFeatureInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param comPeriodadobePeriodgranitePeriodhttpcachePeriodfilePerioddocumentRoot  (optional)
    * @param comPeriodadobePeriodgranitePeriodhttpcachePeriodfilePeriodincludeHost  (optional)
    * @return ComAdobeGraniteHttpcacheFileFileCacheStoreInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteHttpcacheFileFileCacheStore(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, comPeriodadobePeriodgranitePeriodhttpcachePeriodfilePerioddocumentRoot: kotlin.String, comPeriodadobePeriodgranitePeriodhttpcachePeriodfilePeriodincludeHost: kotlin.String) : ComAdobeGraniteHttpcacheFileFileCacheStoreInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "com.adobe.granite.httpcache.file.documentRoot" to listOf("$comPeriodadobePeriodgranitePeriodhttpcachePeriodfilePerioddocumentRoot"), "com.adobe.granite.httpcache.file.includeHost" to listOf("$comPeriodadobePeriodgranitePeriodhttpcachePeriodfilePeriodincludeHost"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.httpcache.file.FileCacheStore",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteHttpcacheFileFileCacheStoreInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteHttpcacheFileFileCacheStoreInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param comPeriodadobePeriodgranitePeriodhttpcachePeriodurlPeriodpaths  (optional)
    * @return ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteHttpcacheImplOuterCacheFilter(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, comPeriodadobePeriodgranitePeriodhttpcachePeriodurlPeriodpaths: kotlin.Array<kotlin.String>) : ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "com.adobe.granite.httpcache.url.paths" to toMultiValue(comPeriodadobePeriodgranitePeriodhttpcachePeriodurlPeriodpaths.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.httpcache.impl.OuterCacheFilter",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param pseudoPeriodpatterns  (optional)
    * @return ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteI18nImplBundlePseudoTranslations(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, pseudoPeriodpatterns: kotlin.Array<kotlin.String>) : ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "pseudo.patterns" to toMultiValue(pseudoPeriodpatterns.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.i18n.impl.bundle.PseudoTranslations",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param securityPeriodpreferencesPeriodname  (optional)
    * @return ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteI18nImplPreferencesLocaleResolverService(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, securityPeriodpreferencesPeriodname: kotlin.String) : ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "security.preferences.name" to listOf("$securityPeriodpreferencesPeriodname"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.i18n.impl.PreferencesLocaleResolverService",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param granitePeriodinfocollectorPeriodincludeThreadDumps  (optional)
    * @param granitePeriodinfocollectorPeriodincludeHeapDump  (optional)
    * @return ComAdobeGraniteInfocollectorInfoCollectorInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteInfocollectorInfoCollector(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, granitePeriodinfocollectorPeriodincludeThreadDumps: kotlin.Boolean, granitePeriodinfocollectorPeriodincludeHeapDump: kotlin.Boolean) : ComAdobeGraniteInfocollectorInfoCollectorInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "granite.infocollector.includeThreadDumps" to listOf("$granitePeriodinfocollectorPeriodincludeThreadDumps"), "granite.infocollector.includeHeapDump" to listOf("$granitePeriodinfocollectorPeriodincludeHeapDump"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.infocollector.InfoCollector",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteInfocollectorInfoCollectorInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteInfocollectorInfoCollectorInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodport  (optional)
    * @param comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodkeystorePerioduser  (optional)
    * @param comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodkeystorePeriodpassword  (optional)
    * @param comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodciphersuitesPeriodexcluded  (optional)
    * @param comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodciphersuitesPeriodincluded  (optional)
    * @param comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodclientPeriodcertificate  (optional)
    * @return ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteJettySslInternalGraniteSslConnectorFactory(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodport: kotlin.Int, comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodkeystorePerioduser: kotlin.String, comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodkeystorePeriodpassword: kotlin.String, comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodciphersuitesPeriodexcluded: kotlin.Array<kotlin.String>, comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodciphersuitesPeriodincluded: kotlin.Array<kotlin.String>, comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodclientPeriodcertificate: kotlin.String) : ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "com.adobe.granite.jetty.ssl.port" to listOf("$comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodport"), "com.adobe.granite.jetty.ssl.keystore.user" to listOf("$comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodkeystorePerioduser"), "com.adobe.granite.jetty.ssl.keystore.password" to listOf("$comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodkeystorePeriodpassword"), "com.adobe.granite.jetty.ssl.ciphersuites.excluded" to toMultiValue(comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodciphersuitesPeriodexcluded.toList(), "multi"), "com.adobe.granite.jetty.ssl.ciphersuites.included" to toMultiValue(comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodciphersuitesPeriodincluded.toList(), "multi"), "com.adobe.granite.jetty.ssl.client.certificate" to listOf("$comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodclientPeriodcertificate"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.jetty.ssl.internal.GraniteSslConnectorFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param checkInternval  (optional)
    * @param excludeIds  (optional)
    * @param encryptPing  (optional)
    * @return ComAdobeGraniteLicenseImplLicenseCheckFilterInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteLicenseImplLicenseCheckFilter(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, checkInternval: kotlin.Int, excludeIds: kotlin.Array<kotlin.String>, encryptPing: kotlin.Boolean) : ComAdobeGraniteLicenseImplLicenseCheckFilterInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "checkInternval" to listOf("$checkInternval"), "excludeIds" to toMultiValue(excludeIds.toList(), "multi"), "encryptPing" to listOf("$encryptPing"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.license.impl.LicenseCheckFilter",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteLicenseImplLicenseCheckFilterInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteLicenseImplLicenseCheckFilterInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param messagesPeriodqueuePeriodsize  (optional)
    * @param loggerPeriodconfig  (optional)
    * @param messagesPeriodsize  (optional)
    * @return ComAdobeGraniteLoggingImplLogAnalyserImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteLoggingImplLogAnalyserImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, messagesPeriodqueuePeriodsize: kotlin.Int, loggerPeriodconfig: kotlin.Array<kotlin.String>, messagesPeriodsize: kotlin.Int) : ComAdobeGraniteLoggingImplLogAnalyserImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "messages.queue.size" to listOf("$messagesPeriodqueuePeriodsize"), "logger.config" to toMultiValue(loggerPeriodconfig.toList(), "multi"), "messages.size" to listOf("$messagesPeriodsize"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.logging.impl.LogAnalyserImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteLoggingImplLogAnalyserImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteLoggingImplLogAnalyserImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param hcPeriodtags  (optional)
    * @return ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteLoggingImplLogErrorHealthCheck(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, hcPeriodtags: kotlin.Array<kotlin.String>) : ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "hc.tags" to toMultiValue(hcPeriodtags.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.logging.impl.LogErrorHealthCheck",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param granitePeriodmaintenancePeriodmandatory  (optional)
    * @param jobPeriodtopics  (optional)
    * @return ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, granitePeriodmaintenancePeriodmandatory: kotlin.Boolean, jobPeriodtopics: kotlin.String) : ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "granite.maintenance.mandatory" to listOf("$granitePeriodmaintenancePeriodmandatory"), "job.topics" to listOf("$jobPeriodtopics"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.DataStoreGarbageCollectionTask",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param jobPeriodtopics  (optional)
    * @return ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, jobPeriodtopics: kotlin.String) : ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "job.topics" to listOf("$jobPeriodtopics"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.LuceneBinariesCleanupTask",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param fullPeriodgcPerioddays  (optional)
    * @return ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteMaintenanceCrxImplRevisionCleanupTask(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, fullPeriodgcPerioddays: kotlin.Array<kotlin.String>) : ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "full.gc.days" to toMultiValue(fullPeriodgcPerioddays.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.RevisionCleanupTask",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param scriptPeriodfilename  (optional)
    * @param scriptPerioddisplay  (optional)
    * @param scriptPeriodpath  (optional)
    * @param scriptPeriodplatform  (optional)
    * @param interval  (optional)
    * @param jmxdomain  (optional)
    * @return ComAdobeGraniteMonitoringImplScriptConfigImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteMonitoringImplScriptConfigImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, scriptPeriodfilename: kotlin.String, scriptPerioddisplay: kotlin.String, scriptPeriodpath: kotlin.String, scriptPeriodplatform: kotlin.Array<kotlin.String>, interval: kotlin.Int, jmxdomain: kotlin.String) : ComAdobeGraniteMonitoringImplScriptConfigImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "script.filename" to listOf("$scriptPeriodfilename"), "script.display" to listOf("$scriptPerioddisplay"), "script.path" to listOf("$scriptPeriodpath"), "script.platform" to toMultiValue(scriptPeriodplatform.toList(), "multi"), "interval" to listOf("$interval"), "jmxdomain" to listOf("$jmxdomain"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.monitoring.impl.ScriptConfigImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteMonitoringImplScriptConfigImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteMonitoringImplScriptConfigImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param path  (optional)
    * @param jaasPeriodcontrolFlag  (optional)
    * @param jaasPeriodrealmName  (optional)
    * @param jaasPeriodranking  (optional)
    * @param oauthPeriodofflinePeriodvalidation  (optional)
    * @return ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, path: kotlin.String, jaasPeriodcontrolFlag: kotlin.String, jaasPeriodrealmName: kotlin.String, jaasPeriodranking: kotlin.Int, oauthPeriodofflinePeriodvalidation: kotlin.Boolean) : ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "path" to listOf("$path"), "jaas.controlFlag" to listOf("$jaasPeriodcontrolFlag"), "jaas.realmName" to listOf("$jaasPeriodrealmName"), "jaas.ranking" to listOf("$jaasPeriodranking"), "oauth.offline.validation" to listOf("$oauthPeriodofflinePeriodvalidation"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.oauth.server.auth.impl.OAuth2ServerAuthenticationHandler",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param schedulerPeriodexpression  (optional)
    * @return ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteOauthServerImplAccessTokenCleanupTask(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, schedulerPeriodexpression: kotlin.String) : ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "scheduler.expression" to listOf("$schedulerPeriodexpression"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.oauth.server.impl.AccessTokenCleanupTask",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param oauthPeriodclientPeriodrevocationPeriodactive  (optional)
    * @return ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, oauthPeriodclientPeriodrevocationPeriodactive: kotlin.Boolean) : ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "oauth.client.revocation.active" to listOf("$oauthPeriodclientPeriodrevocationPeriodactive"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2ClientRevocationServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param slingPeriodservletPeriodpaths  (optional)
    * @param oauthPeriodrevocationPeriodactive  (optional)
    * @return ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, slingPeriodservletPeriodpaths: kotlin.String, oauthPeriodrevocationPeriodactive: kotlin.Boolean) : ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "sling.servlet.paths" to listOf("$slingPeriodservletPeriodpaths"), "oauth.revocation.active" to listOf("$oauthPeriodrevocationPeriodactive"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2RevocationEndpointServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param oauthPeriodissuer  (optional)
    * @param oauthPeriodaccessPeriodtokenPeriodexpiresPeriodin  (optional)
    * @param osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern  (optional)
    * @param osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect  (optional)
    * @return ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, oauthPeriodissuer: kotlin.String, oauthPeriodaccessPeriodtokenPeriodexpiresPeriodin: kotlin.String, osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern: kotlin.String, osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect: kotlin.String) : ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "oauth.issuer" to listOf("$oauthPeriodissuer"), "oauth.access.token.expires.in" to listOf("$oauthPeriodaccessPeriodtokenPeriodexpiresPeriodin"), "osgi.http.whiteboard.servlet.pattern" to listOf("$osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern"), "osgi.http.whiteboard.context.select" to listOf("$osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenEndpointServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param oauthPeriodtokenPeriodrevocationPeriodactive  (optional)
    * @return ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, oauthPeriodtokenPeriodrevocationPeriodactive: kotlin.Boolean) : ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "oauth.token.revocation.active" to listOf("$oauthPeriodtokenPeriodrevocationPeriodactive"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenRevocationServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param offloadingPeriodtransporter  (optional)
    * @param offloadingPeriodcleanupPeriodpayload  (optional)
    * @return ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteOffloadingImplOffloadingConfigurator(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, offloadingPeriodtransporter: kotlin.String, offloadingPeriodcleanupPeriodpayload: kotlin.Boolean) : ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "offloading.transporter" to listOf("$offloadingPeriodtransporter"), "offloading.cleanup.payload" to listOf("$offloadingPeriodcleanupPeriodpayload"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingConfigurator",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param offloadingPeriodjobclonerPeriodenabled  (optional)
    * @return ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteOffloadingImplOffloadingJobCloner(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, offloadingPeriodjobclonerPeriodenabled: kotlin.Boolean) : ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "offloading.jobcloner.enabled" to listOf("$offloadingPeriodjobclonerPeriodenabled"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobCloner",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param offloadingPeriodoffloaderPeriodenabled  (optional)
    * @return ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteOffloadingImplOffloadingJobOffloader(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, offloadingPeriodoffloaderPeriodenabled: kotlin.Boolean) : ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "offloading.offloader.enabled" to listOf("$offloadingPeriodoffloaderPeriodenabled"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobOffloader",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param offloadingPeriodagentmanagerPeriodenabled  (optional)
    * @return ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteOffloadingImplTransporterOffloadingAgentManager(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, offloadingPeriodagentmanagerPeriodenabled: kotlin.Boolean) : ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "offloading.agentmanager.enabled" to listOf("$offloadingPeriodagentmanagerPeriodenabled"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingAgentManager",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param defaultPeriodtransportPeriodagentToWorkerPeriodprefix  (optional)
    * @param defaultPeriodtransportPeriodagentToMasterPeriodprefix  (optional)
    * @param defaultPeriodtransportPeriodinputPeriodpackage  (optional)
    * @param defaultPeriodtransportPeriodoutputPeriodpackage  (optional)
    * @param defaultPeriodtransportPeriodreplicationPeriodsynchronous  (optional)
    * @param defaultPeriodtransportPeriodcontentpackage  (optional)
    * @param offloadingPeriodtransporterPerioddefaultPeriodenabled  (optional)
    * @return ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, defaultPeriodtransportPeriodagentToWorkerPeriodprefix: kotlin.String, defaultPeriodtransportPeriodagentToMasterPeriodprefix: kotlin.String, defaultPeriodtransportPeriodinputPeriodpackage: kotlin.String, defaultPeriodtransportPeriodoutputPeriodpackage: kotlin.String, defaultPeriodtransportPeriodreplicationPeriodsynchronous: kotlin.Boolean, defaultPeriodtransportPeriodcontentpackage: kotlin.Boolean, offloadingPeriodtransporterPerioddefaultPeriodenabled: kotlin.Boolean) : ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "default.transport.agent-to-worker.prefix" to listOf("$defaultPeriodtransportPeriodagentToWorkerPeriodprefix"), "default.transport.agent-to-master.prefix" to listOf("$defaultPeriodtransportPeriodagentToMasterPeriodprefix"), "default.transport.input.package" to listOf("$defaultPeriodtransportPeriodinputPeriodpackage"), "default.transport.output.package" to listOf("$defaultPeriodtransportPeriodoutputPeriodpackage"), "default.transport.replication.synchronous" to listOf("$defaultPeriodtransportPeriodreplicationPeriodsynchronous"), "default.transport.contentpackage" to listOf("$defaultPeriodtransportPeriodcontentpackage"), "offloading.transporter.default.enabled" to listOf("$offloadingPeriodtransporterPerioddefaultPeriodenabled"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingDefaultTransporter",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param omnisearchPeriodsuggestionPeriodrequiretextPeriodmin  (optional)
    * @param omnisearchPeriodsuggestionPeriodspellcheckPeriodrequire  (optional)
    * @return ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, omnisearchPeriodsuggestionPeriodrequiretextPeriodmin: kotlin.Int, omnisearchPeriodsuggestionPeriodspellcheckPeriodrequire: kotlin.Boolean) : ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "omnisearch.suggestion.requiretext.min" to listOf("$omnisearchPeriodsuggestionPeriodrequiretextPeriodmin"), "omnisearch.suggestion.spellcheck.require" to listOf("$omnisearchPeriodsuggestionPeriodspellcheckPeriodrequire"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.omnisearch.impl.core.OmniSearchServiceImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param optoutPeriodcookies  (optional)
    * @param optoutPeriodheaders  (optional)
    * @param optoutPeriodwhitelistPeriodcookies  (optional)
    * @return ComAdobeGraniteOptoutImplOptOutServiceImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteOptoutImplOptOutServiceImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, optoutPeriodcookies: kotlin.Array<kotlin.String>, optoutPeriodheaders: kotlin.Array<kotlin.String>, optoutPeriodwhitelistPeriodcookies: kotlin.Array<kotlin.String>) : ComAdobeGraniteOptoutImplOptOutServiceImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "optout.cookies" to toMultiValue(optoutPeriodcookies.toList(), "multi"), "optout.headers" to toMultiValue(optoutPeriodheaders.toList(), "multi"), "optout.whitelist.cookies" to toMultiValue(optoutPeriodwhitelistPeriodcookies.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.optout.impl.OptOutServiceImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteOptoutImplOptOutServiceImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteOptoutImplOptOutServiceImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param indexingPeriodcriticalPeriodthreshold  (optional)
    * @param indexingPeriodwarnPeriodthreshold  (optional)
    * @param hcPeriodtags  (optional)
    * @return ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteQueriesImplHcAsyncIndexHealthCheck(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, indexingPeriodcriticalPeriodthreshold: kotlin.Int, indexingPeriodwarnPeriodthreshold: kotlin.Int, hcPeriodtags: kotlin.Array<kotlin.String>) : ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "indexing.critical.threshold" to listOf("$indexingPeriodcriticalPeriodthreshold"), "indexing.warn.threshold" to listOf("$indexingPeriodwarnPeriodthreshold"), "hc.tags" to toMultiValue(hcPeriodtags.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.queries.impl.hc.AsyncIndexHealthCheck",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param largePeriodindexPeriodcriticalPeriodthreshold  (optional)
    * @param largePeriodindexPeriodwarnPeriodthreshold  (optional)
    * @param hcPeriodtags  (optional)
    * @return ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteQueriesImplHcLargeIndexHealthCheck(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, largePeriodindexPeriodcriticalPeriodthreshold: kotlin.Int, largePeriodindexPeriodwarnPeriodthreshold: kotlin.Int, hcPeriodtags: kotlin.Array<kotlin.String>) : ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "large.index.critical.threshold" to listOf("$largePeriodindexPeriodcriticalPeriodthreshold"), "large.index.warn.threshold" to listOf("$largePeriodindexPeriodwarnPeriodthreshold"), "hc.tags" to toMultiValue(hcPeriodtags.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.queries.impl.hc.LargeIndexHealthCheck",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param hcPeriodtags  (optional)
    * @return ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteQueriesImplHcQueriesStatusHealthCheck(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, hcPeriodtags: kotlin.Array<kotlin.String>) : ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "hc.tags" to toMultiValue(hcPeriodtags.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueriesStatusHealthCheck",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param getPeriod  (optional)
    * @return ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteQueriesImplHcQueryHealthCheckMetrics(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, getPeriod: kotlin.Int) : ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "getPeriod" to listOf("$getPeriod"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueryHealthCheckMetrics",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param hcPeriodtags  (optional)
    * @return ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteQueriesImplHcQueryLimitsHealthCheck(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, hcPeriodtags: kotlin.Array<kotlin.String>) : ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "hc.tags" to toMultiValue(hcPeriodtags.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueryLimitsHealthCheck",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param numberPeriodofPeriodretriesPeriodallowed  (optional)
    * @param hcPeriodtags  (optional)
    * @return ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteReplicationHcImplReplicationQueueHealthCheck(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, numberPeriodofPeriodretriesPeriodallowed: kotlin.Int, hcPeriodtags: kotlin.Array<kotlin.String>) : ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "number.of.retries.allowed" to listOf("$numberPeriodofPeriodretriesPeriodallowed"), "hc.tags" to toMultiValue(hcPeriodtags.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationQueueHealthCheck",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param hcPeriodtags  (optional)
    * @return ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, hcPeriodtags: kotlin.Array<kotlin.String>) : ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "hc.tags" to toMultiValue(hcPeriodtags.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationTransportUsersHealthCheck",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param hcPeriodtags  (optional)
    * @return ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, hcPeriodtags: kotlin.Array<kotlin.String>) : ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "hc.tags" to toMultiValue(hcPeriodtags.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.repository.hc.impl.AuthorizableNodeNameHealthCheck",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param hcPeriodtags  (optional)
    * @param excludePeriodsearchPeriodpath  (optional)
    * @return ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, hcPeriodtags: kotlin.Array<kotlin.String>, excludePeriodsearchPeriodpath: kotlin.Array<kotlin.String>) : ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "hc.tags" to toMultiValue(hcPeriodtags.toList(), "multi"), "exclude.search.path" to toMultiValue(excludePeriodsearchPeriodpath.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.repository.hc.impl.content.sling.SlingContentHealthCheck",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param hcPeriodtags  (optional)
    * @return ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, hcPeriodtags: kotlin.Array<kotlin.String>) : ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "hc.tags" to toMultiValue(hcPeriodtags.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.repository.hc.impl.ContinuousRGCHealthCheck",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param hcPeriodtags  (optional)
    * @return ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, hcPeriodtags: kotlin.Array<kotlin.String>) : ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "hc.tags" to toMultiValue(hcPeriodtags.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultAccessUserProfileHealthCheck",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param hcPeriodtags  (optional)
    * @param accountPeriodlogins  (optional)
    * @param consolePeriodlogins  (optional)
    * @return ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, hcPeriodtags: kotlin.Array<kotlin.String>, accountPeriodlogins: kotlin.Array<kotlin.String>, consolePeriodlogins: kotlin.Array<kotlin.String>) : ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "hc.tags" to toMultiValue(hcPeriodtags.toList(), "multi"), "account.logins" to toMultiValue(accountPeriodlogins.toList(), "multi"), "console.logins" to toMultiValue(consolePeriodlogins.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultLoginsHealthCheck",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param hcPeriodtags  (optional)
    * @param diskPeriodspacePeriodwarnPeriodthreshold  (optional)
    * @param diskPeriodspacePerioderrorPeriodthreshold  (optional)
    * @return ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, hcPeriodtags: kotlin.Array<kotlin.String>, diskPeriodspacePeriodwarnPeriodthreshold: kotlin.Int, diskPeriodspacePerioderrorPeriodthreshold: kotlin.Int) : ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "hc.tags" to toMultiValue(hcPeriodtags.toList(), "multi"), "disk.space.warn.threshold" to listOf("$diskPeriodspacePeriodwarnPeriodthreshold"), "disk.space.error.threshold" to listOf("$diskPeriodspacePerioderrorPeriodthreshold"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.repository.hc.impl.DiskSpaceHealthCheck",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param hcPeriodtags  (optional)
    * @return ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, hcPeriodtags: kotlin.Array<kotlin.String>) : ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "hc.tags" to toMultiValue(hcPeriodtags.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.repository.hc.impl.ObservationQueueLengthHealthCheck",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param enabled  (optional)
    * @param intervalSeconds  (optional)
    * @param commitsPerIntervalThreshold  (optional)
    * @param maxLocationLength  (optional)
    * @param maxDetailsShown  (optional)
    * @param minDetailsPercentage  (optional)
    * @param threadMatchers  (optional)
    * @param maxGreedyDepth  (optional)
    * @param greedyStackMatchers  (optional)
    * @param stackFilters  (optional)
    * @param stackMatchers  (optional)
    * @param stackCategorizers  (optional)
    * @param stackShorteners  (optional)
    * @return ComAdobeGraniteRepositoryImplCommitStatsConfigInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteRepositoryImplCommitStatsConfig(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, enabled: kotlin.Boolean, intervalSeconds: kotlin.Int, commitsPerIntervalThreshold: kotlin.Int, maxLocationLength: kotlin.Int, maxDetailsShown: kotlin.Int, minDetailsPercentage: kotlin.Int, threadMatchers: kotlin.Array<kotlin.String>, maxGreedyDepth: kotlin.Int, greedyStackMatchers: kotlin.String, stackFilters: kotlin.Array<kotlin.String>, stackMatchers: kotlin.Array<kotlin.String>, stackCategorizers: kotlin.Array<kotlin.String>, stackShorteners: kotlin.Array<kotlin.String>) : ComAdobeGraniteRepositoryImplCommitStatsConfigInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "enabled" to listOf("$enabled"), "intervalSeconds" to listOf("$intervalSeconds"), "commitsPerIntervalThreshold" to listOf("$commitsPerIntervalThreshold"), "maxLocationLength" to listOf("$maxLocationLength"), "maxDetailsShown" to listOf("$maxDetailsShown"), "minDetailsPercentage" to listOf("$minDetailsPercentage"), "threadMatchers" to toMultiValue(threadMatchers.toList(), "multi"), "maxGreedyDepth" to listOf("$maxGreedyDepth"), "greedyStackMatchers" to listOf("$greedyStackMatchers"), "stackFilters" to toMultiValue(stackFilters.toList(), "multi"), "stackMatchers" to toMultiValue(stackMatchers.toList(), "multi"), "stackCategorizers" to toMultiValue(stackCategorizers.toList(), "multi"), "stackShorteners" to toMultiValue(stackShorteners.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.repository.impl.CommitStatsConfig",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteRepositoryImplCommitStatsConfigInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteRepositoryImplCommitStatsConfigInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param servicePeriodranking  (optional)
    * @param serviceusersPeriodsimpleSubjectPopulation  (optional)
    * @param serviceusersPeriodlist  (optional)
    * @return ComAdobeGraniteRepositoryServiceUserConfigurationInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteRepositoryServiceUserConfiguration(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, servicePeriodranking: kotlin.Int, serviceusersPeriodsimpleSubjectPopulation: kotlin.Boolean, serviceusersPeriodlist: kotlin.Array<kotlin.String>) : ComAdobeGraniteRepositoryServiceUserConfigurationInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "service.ranking" to listOf("$servicePeriodranking"), "serviceusers.simpleSubjectPopulation" to listOf("$serviceusersPeriodsimpleSubjectPopulation"), "serviceusers.list" to toMultiValue(serviceusersPeriodlist.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.repository.ServiceUserConfiguration",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteRepositoryServiceUserConfigurationInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteRepositoryServiceUserConfigurationInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param hcPeriodtags  (optional)
    * @return ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, hcPeriodtags: kotlin.Array<kotlin.String>) : ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "hc.tags" to toMultiValue(hcPeriodtags.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.requests.logging.impl.hc.RequestsStatusHealthCheckImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param name  (optional)
    * @param types  (optional)
    * @return ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteResourcestatusImplCompositeStatusType(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, name: kotlin.String, types: kotlin.Array<kotlin.String>) : ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "name" to listOf("$name"), "types" to toMultiValue(types.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.resourcestatus.impl.CompositeStatusType",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param providerPeriodroot  (optional)
    * @return ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteResourcestatusImplStatusResourceProviderImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, providerPeriodroot: kotlin.String) : ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "provider.root" to listOf("$providerPeriodroot"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.resourcestatus.impl.StatusResourceProviderImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param mimePeriodallowEmpty  (optional)
    * @param mimePeriodallowed  (optional)
    * @return ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteRestAssetsImplAssetContentDispositionFilter(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, mimePeriodallowEmpty: kotlin.Boolean, mimePeriodallowed: kotlin.Array<kotlin.String>) : ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "mime.allowEmpty" to listOf("$mimePeriodallowEmpty"), "mime.allowed" to toMultiValue(mimePeriodallowed.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.rest.assets.impl.AssetContentDispositionFilter",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param providerPeriodroots  (optional)
    * @return ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, providerPeriodroots: kotlin.String) : ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "provider.roots" to listOf("$providerPeriodroots"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.rest.impl.ApiEndpointResourceProviderFactoryImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param defaultPeriodlimit  (optional)
    * @param usePeriodabsolutePerioduri  (optional)
    * @return ComAdobeGraniteRestImplServletDefaultGETServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteRestImplServletDefaultGETServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, defaultPeriodlimit: kotlin.Int, usePeriodabsolutePerioduri: kotlin.Boolean) : ComAdobeGraniteRestImplServletDefaultGETServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "default.limit" to listOf("$defaultPeriodlimit"), "use.absolute.uri" to listOf("$usePeriodabsolutePerioduri"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.rest.impl.servlet.DefaultGETServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteRestImplServletDefaultGETServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteRestImplServletDefaultGETServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param hcPeriodtags  (optional)
    * @return ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, hcPeriodtags: kotlin.Array<kotlin.String>) : ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "hc.tags" to toMultiValue(hcPeriodtags.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.security.user.ui.internal.servlets.SSLConfigurationServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param adapterPeriodcondition  (optional)
    * @param granitePerioduserpropertiesPeriodnodetypes  (optional)
    * @param granitePerioduserpropertiesPeriodresourcetypes  (optional)
    * @return ComAdobeGraniteSecurityUserUserPropertiesServiceInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteSecurityUserUserPropertiesService(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, adapterPeriodcondition: kotlin.String, granitePerioduserpropertiesPeriodnodetypes: kotlin.Array<kotlin.String>, granitePerioduserpropertiesPeriodresourcetypes: kotlin.Array<kotlin.String>) : ComAdobeGraniteSecurityUserUserPropertiesServiceInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "adapter.condition" to listOf("$adapterPeriodcondition"), "granite.userproperties.nodetypes" to toMultiValue(granitePerioduserpropertiesPeriodnodetypes.toList(), "multi"), "granite.userproperties.resourcetypes" to toMultiValue(granitePerioduserpropertiesPeriodresourcetypes.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.security.user.UserPropertiesService",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteSecurityUserUserPropertiesServiceInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteSecurityUserUserPropertiesServiceInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param group2memberPeriodrelationshipPeriodoutgoing  (optional)
    * @param group2memberPeriodexcludedPeriodoutgoing  (optional)
    * @param group2memberPeriodrelationshipPeriodincoming  (optional)
    * @param group2memberPeriodexcludedPeriodincoming  (optional)
    * @return ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteSocialgraphImplSocialGraphFactoryImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, group2memberPeriodrelationshipPeriodoutgoing: kotlin.String, group2memberPeriodexcludedPeriodoutgoing: kotlin.Array<kotlin.String>, group2memberPeriodrelationshipPeriodincoming: kotlin.String, group2memberPeriodexcludedPeriodincoming: kotlin.Array<kotlin.String>) : ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "group2member.relationship.outgoing" to listOf("$group2memberPeriodrelationshipPeriodoutgoing"), "group2member.excluded.outgoing" to toMultiValue(group2memberPeriodexcludedPeriodoutgoing.toList(), "multi"), "group2member.relationship.incoming" to listOf("$group2memberPeriodrelationshipPeriodincoming"), "group2member.excluded.incoming" to toMultiValue(group2memberPeriodexcludedPeriodincoming.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.socialgraph.impl.SocialGraphFactoryImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param schedulerPeriodexpression  (optional)
    * @param jmxPeriodobjectname  (optional)
    * @return ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, schedulerPeriodexpression: kotlin.String, jmxPeriodobjectname: kotlin.String) : ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "scheduler.expression" to listOf("$schedulerPeriodexpression"), "jmx.objectname" to listOf("$jmxPeriodobjectname"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.system.monitoring.impl.SystemStatsMBeanImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param adapterPeriodcondition  (optional)
    * @return ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, adapterPeriodcondition: kotlin.String) : ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "adapter.condition" to listOf("$adapterPeriodcondition"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskAdapterFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param archivingPeriodenabled  (optional)
    * @param schedulerPeriodexpression  (optional)
    * @param archivePeriodsincePerioddaysPeriodcompleted  (optional)
    * @return ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteTaskmanagementImplJcrTaskArchiveService(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, archivingPeriodenabled: kotlin.Boolean, schedulerPeriodexpression: kotlin.String, archivePeriodsincePerioddaysPeriodcompleted: kotlin.Int) : ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "archiving.enabled" to listOf("$archivingPeriodenabled"), "scheduler.expression" to listOf("$schedulerPeriodexpression"), "archive.since.days.completed" to listOf("$archivePeriodsincePerioddaysPeriodcompleted"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskArchiveService",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param purgeCompleted  (optional)
    * @param completedAge  (optional)
    * @param purgeActive  (optional)
    * @param activeAge  (optional)
    * @param saveThreshold  (optional)
    * @return ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, purgeCompleted: kotlin.Boolean, completedAge: kotlin.Int, purgeActive: kotlin.Boolean, activeAge: kotlin.Int, saveThreshold: kotlin.Int) : ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "purgeCompleted" to listOf("$purgeCompleted"), "completedAge" to listOf("$completedAge"), "purgeActive" to listOf("$purgeActive"), "activeAge" to listOf("$activeAge"), "saveThreshold" to listOf("$saveThreshold"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.taskmanagement.impl.purge.TaskPurgeMaintenanceTask",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param adapterPeriodcondition  (optional)
    * @param taskmanagerPeriodadmingroups  (optional)
    * @return ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, adapterPeriodcondition: kotlin.String, taskmanagerPeriodadmingroups: kotlin.Array<kotlin.String>) : ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "adapter.condition" to listOf("$adapterPeriodcondition"), "taskmanager.admingroups" to toMultiValue(taskmanagerPeriodadmingroups.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.taskmanagement.impl.service.TaskManagerAdapterFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param schedulerPeriodperiod  (optional)
    * @param schedulerPeriodrunOn  (optional)
    * @param granitePeriodthreaddumpPeriodenabled  (optional)
    * @param granitePeriodthreaddumpPerioddumpsPerFile  (optional)
    * @param granitePeriodthreaddumpPeriodenableGzipCompression  (optional)
    * @param granitePeriodthreaddumpPeriodenableDirectoriesCompression  (optional)
    * @param granitePeriodthreaddumpPeriodenableJStack  (optional)
    * @param granitePeriodthreaddumpPeriodmaxBackupDays  (optional)
    * @param granitePeriodthreaddumpPeriodbackupCleanTrigger  (optional)
    * @return ComAdobeGraniteThreaddumpThreadDumpCollectorInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteThreaddumpThreadDumpCollector(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, schedulerPeriodperiod: kotlin.Int, schedulerPeriodrunOn: kotlin.String, granitePeriodthreaddumpPeriodenabled: kotlin.Boolean, granitePeriodthreaddumpPerioddumpsPerFile: kotlin.Int, granitePeriodthreaddumpPeriodenableGzipCompression: kotlin.Boolean, granitePeriodthreaddumpPeriodenableDirectoriesCompression: kotlin.Boolean, granitePeriodthreaddumpPeriodenableJStack: kotlin.Boolean, granitePeriodthreaddumpPeriodmaxBackupDays: kotlin.Int, granitePeriodthreaddumpPeriodbackupCleanTrigger: kotlin.String) : ComAdobeGraniteThreaddumpThreadDumpCollectorInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "scheduler.period" to listOf("$schedulerPeriodperiod"), "scheduler.runOn" to listOf("$schedulerPeriodrunOn"), "granite.threaddump.enabled" to listOf("$granitePeriodthreaddumpPeriodenabled"), "granite.threaddump.dumpsPerFile" to listOf("$granitePeriodthreaddumpPerioddumpsPerFile"), "granite.threaddump.enableGzipCompression" to listOf("$granitePeriodthreaddumpPeriodenableGzipCompression"), "granite.threaddump.enableDirectoriesCompression" to listOf("$granitePeriodthreaddumpPeriodenableDirectoriesCompression"), "granite.threaddump.enableJStack" to listOf("$granitePeriodthreaddumpPeriodenableJStack"), "granite.threaddump.maxBackupDays" to listOf("$granitePeriodthreaddumpPeriodmaxBackupDays"), "granite.threaddump.backupCleanTrigger" to listOf("$granitePeriodthreaddumpPeriodbackupCleanTrigger"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.threaddump.ThreadDumpCollector",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteThreaddumpThreadDumpCollectorInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteThreaddumpThreadDumpCollectorInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param translationFactory  (optional)
    * @param defaultConnectorLabel  (optional)
    * @param defaultConnectorAttribution  (optional)
    * @param defaultConnectorWorkspaceId  (optional)
    * @param defaultConnectorSubscriptionKey  (optional)
    * @param languageMapLocation  (optional)
    * @param categoryMapLocation  (optional)
    * @param retryAttempts  (optional)
    * @param timeoutCount  (optional)
    * @return ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, translationFactory: kotlin.String, defaultConnectorLabel: kotlin.String, defaultConnectorAttribution: kotlin.String, defaultConnectorWorkspaceId: kotlin.String, defaultConnectorSubscriptionKey: kotlin.String, languageMapLocation: kotlin.String, categoryMapLocation: kotlin.String, retryAttempts: kotlin.Int, timeoutCount: kotlin.Int) : ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "translationFactory" to listOf("$translationFactory"), "defaultConnectorLabel" to listOf("$defaultConnectorLabel"), "defaultConnectorAttribution" to listOf("$defaultConnectorAttribution"), "defaultConnectorWorkspaceId" to listOf("$defaultConnectorWorkspaceId"), "defaultConnectorSubscriptionKey" to listOf("$defaultConnectorSubscriptionKey"), "languageMapLocation" to listOf("$languageMapLocation"), "categoryMapLocation" to listOf("$categoryMapLocation"), "retryAttempts" to listOf("$retryAttempts"), "timeoutCount" to listOf("$timeoutCount"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.translation.connector.msft.core.impl.MicrosoftTranslationServiceFactoryImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param defaultConnectorName  (optional)
    * @param defaultCategory  (optional)
    * @return ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteTranslationCoreImplTranslationManagerImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, defaultConnectorName: kotlin.String, defaultCategory: kotlin.String) : ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "defaultConnectorName" to listOf("$defaultConnectorName"), "defaultCategory" to listOf("$defaultCategory"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.translation.core.impl.TranslationManagerImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param htmllibmanagerPeriodtiming  (optional)
    * @param htmllibmanagerPerioddebugPeriodinitPeriodjs  (optional)
    * @param htmllibmanagerPeriodminify  (optional)
    * @param htmllibmanagerPerioddebug  (optional)
    * @param htmllibmanagerPeriodgzip  (optional)
    * @param htmllibmanagerPeriodmaxDataUriSize  (optional)
    * @param htmllibmanagerPeriodmaxage  (optional)
    * @param htmllibmanagerPeriodforceCQUrlInfo  (optional)
    * @param htmllibmanagerPerioddefaultthemename  (optional)
    * @param htmllibmanagerPerioddefaultuserthemename  (optional)
    * @param htmllibmanagerPeriodclientmanager  (optional)
    * @param htmllibmanagerPeriodpathPeriodlist  (optional)
    * @param htmllibmanagerPeriodexcludedPeriodpathPeriodlist  (optional)
    * @param htmllibmanagerPeriodprocessorPeriodjs  (optional)
    * @param htmllibmanagerPeriodprocessorPeriodcss  (optional)
    * @param htmllibmanagerPeriodlongcachePeriodpatterns  (optional)
    * @param htmllibmanagerPeriodlongcachePeriodformat  (optional)
    * @param htmllibmanagerPerioduseFileSystemOutputCache  (optional)
    * @param htmllibmanagerPeriodfileSystemOutputCacheLocation  (optional)
    * @param htmllibmanagerPerioddisablePeriodreplacement  (optional)
    * @return ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, htmllibmanagerPeriodtiming: kotlin.Boolean, htmllibmanagerPerioddebugPeriodinitPeriodjs: kotlin.String, htmllibmanagerPeriodminify: kotlin.Boolean, htmllibmanagerPerioddebug: kotlin.Boolean, htmllibmanagerPeriodgzip: kotlin.Boolean, htmllibmanagerPeriodmaxDataUriSize: kotlin.Int, htmllibmanagerPeriodmaxage: kotlin.Int, htmllibmanagerPeriodforceCQUrlInfo: kotlin.Boolean, htmllibmanagerPerioddefaultthemename: kotlin.String, htmllibmanagerPerioddefaultuserthemename: kotlin.String, htmllibmanagerPeriodclientmanager: kotlin.String, htmllibmanagerPeriodpathPeriodlist: kotlin.Array<kotlin.String>, htmllibmanagerPeriodexcludedPeriodpathPeriodlist: kotlin.Array<kotlin.String>, htmllibmanagerPeriodprocessorPeriodjs: kotlin.Array<kotlin.String>, htmllibmanagerPeriodprocessorPeriodcss: kotlin.Array<kotlin.String>, htmllibmanagerPeriodlongcachePeriodpatterns: kotlin.Array<kotlin.String>, htmllibmanagerPeriodlongcachePeriodformat: kotlin.String, htmllibmanagerPerioduseFileSystemOutputCache: kotlin.Boolean, htmllibmanagerPeriodfileSystemOutputCacheLocation: kotlin.String, htmllibmanagerPerioddisablePeriodreplacement: kotlin.Array<kotlin.String>) : ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "htmllibmanager.timing" to listOf("$htmllibmanagerPeriodtiming"), "htmllibmanager.debug.init.js" to listOf("$htmllibmanagerPerioddebugPeriodinitPeriodjs"), "htmllibmanager.minify" to listOf("$htmllibmanagerPeriodminify"), "htmllibmanager.debug" to listOf("$htmllibmanagerPerioddebug"), "htmllibmanager.gzip" to listOf("$htmllibmanagerPeriodgzip"), "htmllibmanager.maxDataUriSize" to listOf("$htmllibmanagerPeriodmaxDataUriSize"), "htmllibmanager.maxage" to listOf("$htmllibmanagerPeriodmaxage"), "htmllibmanager.forceCQUrlInfo" to listOf("$htmllibmanagerPeriodforceCQUrlInfo"), "htmllibmanager.defaultthemename" to listOf("$htmllibmanagerPerioddefaultthemename"), "htmllibmanager.defaultuserthemename" to listOf("$htmllibmanagerPerioddefaultuserthemename"), "htmllibmanager.clientmanager" to listOf("$htmllibmanagerPeriodclientmanager"), "htmllibmanager.path.list" to toMultiValue(htmllibmanagerPeriodpathPeriodlist.toList(), "multi"), "htmllibmanager.excluded.path.list" to toMultiValue(htmllibmanagerPeriodexcludedPeriodpathPeriodlist.toList(), "multi"), "htmllibmanager.processor.js" to toMultiValue(htmllibmanagerPeriodprocessorPeriodjs.toList(), "multi"), "htmllibmanager.processor.css" to toMultiValue(htmllibmanagerPeriodprocessorPeriodcss.toList(), "multi"), "htmllibmanager.longcache.patterns" to toMultiValue(htmllibmanagerPeriodlongcachePeriodpatterns.toList(), "multi"), "htmllibmanager.longcache.format" to listOf("$htmllibmanagerPeriodlongcachePeriodformat"), "htmllibmanager.useFileSystemOutputCache" to listOf("$htmllibmanagerPerioduseFileSystemOutputCache"), "htmllibmanager.fileSystemOutputCacheLocation" to listOf("$htmllibmanagerPeriodfileSystemOutputCacheLocation"), "htmllibmanager.disable.replacement" to toMultiValue(htmllibmanagerPerioddisablePeriodreplacement.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.ui.clientlibs.impl.HtmlLibraryManagerImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param enabled  (optional)
    * @return ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, enabled: kotlin.Boolean) : ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "enabled" to listOf("$enabled"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.workflow.console.frags.WorkflowWithdrawFeature",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param granitePeriodworkflowPeriodWorkflowPublishEventServicePeriodenabled  (optional)
    * @return ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, granitePeriodworkflowPeriodWorkflowPublishEventServicePeriodenabled: kotlin.Boolean) : ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "granite.workflow.WorkflowPublishEventService.enabled" to listOf("$granitePeriodworkflowPeriodWorkflowPublishEventServicePeriodenabled"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.workflow.console.publish.WorkflowPublishEventService",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param bucketSize  (optional)
    * @return ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteWorkflowCoreJcrWorkflowBucketManager(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, bucketSize: kotlin.Int) : ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "bucketSize" to listOf("$bucketSize"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.workflow.core.jcr.WorkflowBucketManager",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param defaultPeriodtimeout  (optional)
    * @param maxPeriodtimeout  (optional)
    * @param defaultPeriodperiod  (optional)
    * @return ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteWorkflowCoreJobExternalProcessJobHandler(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, defaultPeriodtimeout: kotlin.Int, maxPeriodtimeout: kotlin.Int, defaultPeriodperiod: kotlin.Int) : ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "default.timeout" to listOf("$defaultPeriodtimeout"), "max.timeout" to listOf("$maxPeriodtimeout"), "default.period" to listOf("$defaultPeriodperiod"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.workflow.core.job.ExternalProcessJobHandler",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param jobPeriodtopics  (optional)
    * @param allowPeriodselfPeriodprocessPeriodtermination  (optional)
    * @return ComAdobeGraniteWorkflowCoreJobJobHandlerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteWorkflowCoreJobJobHandler(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, jobPeriodtopics: kotlin.Array<kotlin.String>, allowPeriodselfPeriodprocessPeriodtermination: kotlin.Boolean) : ComAdobeGraniteWorkflowCoreJobJobHandlerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "job.topics" to toMultiValue(jobPeriodtopics.toList(), "multi"), "allow.self.process.termination" to listOf("$allowPeriodselfPeriodprocessPeriodtermination"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.workflow.core.job.JobHandler",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteWorkflowCoreJobJobHandlerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteWorkflowCoreJobJobHandlerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param jobPeriodtopics  (optional)
    * @return ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, jobPeriodtopics: kotlin.String) : ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "job.topics" to listOf("$jobPeriodtopics"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.workflow.core.offloading.WorkflowOffloadingJobConsumer",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param getSystemWorkflowModels  (optional)
    * @param getPackageRootPath  (optional)
    * @return ComAdobeGraniteWorkflowCorePayloadMapCacheInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteWorkflowCorePayloadMapCache(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, getSystemWorkflowModels: kotlin.Array<kotlin.String>, getPackageRootPath: kotlin.String) : ComAdobeGraniteWorkflowCorePayloadMapCacheInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "getSystemWorkflowModels" to toMultiValue(getSystemWorkflowModels.toList(), "multi"), "getPackageRootPath" to listOf("$getPackageRootPath"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.workflow.core.PayloadMapCache",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteWorkflowCorePayloadMapCacheInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteWorkflowCorePayloadMapCacheInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param payloadPeriodmovePeriodwhitePeriodlist  (optional)
    * @param payloadPeriodmovePeriodhandlePeriodfromPeriodworkflowPeriodprocess  (optional)
    * @return ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, payloadPeriodmovePeriodwhitePeriodlist: kotlin.Array<kotlin.String>, payloadPeriodmovePeriodhandlePeriodfromPeriodworkflowPeriodprocess: kotlin.Boolean) : ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "payload.move.white.list" to toMultiValue(payloadPeriodmovePeriodwhitePeriodlist.toList(), "multi"), "payload.move.handle.from.workflow.process" to listOf("$payloadPeriodmovePeriodhandlePeriodfromPeriodworkflowPeriodprocess"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.workflow.core.payloadmap.PayloadMoveListener",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPeriodworkflowPeriodconfigPeriodworkflowPeriodpackagesPeriodrootPeriodpath  (optional)
    * @param cqPeriodworkflowPeriodconfigPeriodworkflowPeriodprocessPeriodlegacyPeriodmode  (optional)
    * @param cqPeriodworkflowPeriodconfigPeriodallowPeriodlocking  (optional)
    * @return ComAdobeGraniteWorkflowCoreWorkflowConfigInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteWorkflowCoreWorkflowConfig(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPeriodworkflowPeriodconfigPeriodworkflowPeriodpackagesPeriodrootPeriodpath: kotlin.Array<kotlin.String>, cqPeriodworkflowPeriodconfigPeriodworkflowPeriodprocessPeriodlegacyPeriodmode: kotlin.Boolean, cqPeriodworkflowPeriodconfigPeriodallowPeriodlocking: kotlin.Boolean) : ComAdobeGraniteWorkflowCoreWorkflowConfigInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.workflow.config.workflow.packages.root.path" to toMultiValue(cqPeriodworkflowPeriodconfigPeriodworkflowPeriodpackagesPeriodrootPeriodpath.toList(), "multi"), "cq.workflow.config.workflow.process.legacy.mode" to listOf("$cqPeriodworkflowPeriodconfigPeriodworkflowPeriodprocessPeriodlegacyPeriodmode"), "cq.workflow.config.allow.locking" to listOf("$cqPeriodworkflowPeriodconfigPeriodallowPeriodlocking"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.workflow.core.WorkflowConfig",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteWorkflowCoreWorkflowConfigInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteWorkflowCoreWorkflowConfigInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param granitePeriodworkflowinboxPeriodsortPeriodpropertyName  (optional)
    * @param granitePeriodworkflowinboxPeriodsortPeriodorder  (optional)
    * @param cqPeriodworkflowPeriodjobPeriodretry  (optional)
    * @param cqPeriodworkflowPeriodsuperuser  (optional)
    * @param granitePeriodworkflowPeriodinboxQuerySize  (optional)
    * @param granitePeriodworkflowPeriodadminUserGroupFilter  (optional)
    * @param granitePeriodworkflowPeriodenforceWorkitemAssigneePermissions  (optional)
    * @param granitePeriodworkflowPeriodenforceWorkflowInitiatorPermissions  (optional)
    * @param granitePeriodworkflowPeriodinjectTenantIdInJobTopics  (optional)
    * @param granitePeriodworkflowPeriodmaxPurgeSaveThreshold  (optional)
    * @param granitePeriodworkflowPeriodmaxPurgeQueryCount  (optional)
    * @return ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteWorkflowCoreWorkflowSessionFactory(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, granitePeriodworkflowinboxPeriodsortPeriodpropertyName: kotlin.String, granitePeriodworkflowinboxPeriodsortPeriodorder: kotlin.String, cqPeriodworkflowPeriodjobPeriodretry: kotlin.Int, cqPeriodworkflowPeriodsuperuser: kotlin.Array<kotlin.String>, granitePeriodworkflowPeriodinboxQuerySize: kotlin.Int, granitePeriodworkflowPeriodadminUserGroupFilter: kotlin.Boolean, granitePeriodworkflowPeriodenforceWorkitemAssigneePermissions: kotlin.Boolean, granitePeriodworkflowPeriodenforceWorkflowInitiatorPermissions: kotlin.Boolean, granitePeriodworkflowPeriodinjectTenantIdInJobTopics: kotlin.Boolean, granitePeriodworkflowPeriodmaxPurgeSaveThreshold: kotlin.Int, granitePeriodworkflowPeriodmaxPurgeQueryCount: kotlin.Int) : ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "granite.workflowinbox.sort.propertyName" to listOf("$granitePeriodworkflowinboxPeriodsortPeriodpropertyName"), "granite.workflowinbox.sort.order" to listOf("$granitePeriodworkflowinboxPeriodsortPeriodorder"), "cq.workflow.job.retry" to listOf("$cqPeriodworkflowPeriodjobPeriodretry"), "cq.workflow.superuser" to toMultiValue(cqPeriodworkflowPeriodsuperuser.toList(), "multi"), "granite.workflow.inboxQuerySize" to listOf("$granitePeriodworkflowPeriodinboxQuerySize"), "granite.workflow.adminUserGroupFilter" to listOf("$granitePeriodworkflowPeriodadminUserGroupFilter"), "granite.workflow.enforceWorkitemAssigneePermissions" to listOf("$granitePeriodworkflowPeriodenforceWorkitemAssigneePermissions"), "granite.workflow.enforceWorkflowInitiatorPermissions" to listOf("$granitePeriodworkflowPeriodenforceWorkflowInitiatorPermissions"), "granite.workflow.injectTenantIdInJobTopics" to listOf("$granitePeriodworkflowPeriodinjectTenantIdInJobTopics"), "granite.workflow.maxPurgeSaveThreshold" to listOf("$granitePeriodworkflowPeriodmaxPurgeSaveThreshold"), "granite.workflow.maxPurgeQueryCount" to listOf("$granitePeriodworkflowPeriodmaxPurgeQueryCount"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.workflow.core.WorkflowSessionFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param scheduledpurgePeriodname  (optional)
    * @param scheduledpurgePeriodworkflowStatus  (optional)
    * @param scheduledpurgePeriodmodelIds  (optional)
    * @param scheduledpurgePerioddaysold  (optional)
    * @return ComAdobeGraniteWorkflowPurgeSchedulerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeGraniteWorkflowPurgeScheduler(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, scheduledpurgePeriodname: kotlin.String, scheduledpurgePeriodworkflowStatus: kotlin.String, scheduledpurgePeriodmodelIds: kotlin.Array<kotlin.String>, scheduledpurgePerioddaysold: kotlin.Int) : ComAdobeGraniteWorkflowPurgeSchedulerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "scheduledpurge.name" to listOf("$scheduledpurgePeriodname"), "scheduledpurge.workflowStatus" to listOf("$scheduledpurgePeriodworkflowStatus"), "scheduledpurge.modelIds" to toMultiValue(scheduledpurgePeriodmodelIds.toList(), "multi"), "scheduledpurge.daysold" to listOf("$scheduledpurgePerioddaysold"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.granite.workflow.purge.Scheduler",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeGraniteWorkflowPurgeSchedulerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeGraniteWorkflowPurgeSchedulerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param maxConnections  (optional)
    * @param maxRequests  (optional)
    * @param requestTimeout  (optional)
    * @param requestRetries  (optional)
    * @param launchTimeout  (optional)
    * @return ComAdobeOctopusNcommBootstrapInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeOctopusNcommBootstrap(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, maxConnections: kotlin.Int, maxRequests: kotlin.Int, requestTimeout: kotlin.Int, requestRetries: kotlin.Int, launchTimeout: kotlin.Int) : ComAdobeOctopusNcommBootstrapInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "maxConnections" to listOf("$maxConnections"), "maxRequests" to listOf("$maxRequests"), "requestTimeout" to listOf("$requestTimeout"), "requestRetries" to listOf("$requestRetries"), "launchTimeout" to listOf("$launchTimeout"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.octopus.ncomm.bootstrap",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeOctopusNcommBootstrapInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeOctopusNcommBootstrapInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param communitiesPeriodintegrationPeriodlivefyrePeriodslingPeriodeventPeriodfilter  (optional)
    * @return ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, communitiesPeriodintegrationPeriodlivefyrePeriodslingPeriodeventPeriodfilter: kotlin.String) : ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "communities.integration.livefyre.sling.event.filter" to listOf("$communitiesPeriodintegrationPeriodlivefyrePeriodslingPeriodeventPeriodfilter"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.social.integrations.livefyre.user.pingforpull.impl.PingPullServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param maxConnections  (optional)
    * @param maxRequests  (optional)
    * @param requestTimeout  (optional)
    * @param logDir  (optional)
    * @return ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comAdobeXmpWorkerFilesNcommXMPFilesNComm(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, maxConnections: kotlin.String, maxRequests: kotlin.String, requestTimeout: kotlin.String, logDir: kotlin.String) : ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "maxConnections" to listOf("$maxConnections"), "maxRequests" to listOf("$maxRequests"), "requestTimeout" to listOf("$requestTimeout"), "logDir" to listOf("$logDir"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.adobe.xmp.worker.files.ncomm.XMPFilesNComm",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param jdbcPerioddriverPeriodclass  (optional)
    * @param jdbcPeriodconnectionPerioduri  (optional)
    * @param jdbcPeriodusername  (optional)
    * @param jdbcPeriodpassword  (optional)
    * @param jdbcPeriodvalidationPeriodquery  (optional)
    * @param defaultPeriodreadonly  (optional)
    * @param defaultPeriodautocommit  (optional)
    * @param poolPeriodsize  (optional)
    * @param poolPeriodmaxPeriodwaitPeriodmsec  (optional)
    * @param datasourcePeriodname  (optional)
    * @param datasourcePeriodsvcPeriodproperties  (optional)
    * @return ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCommonsDatasourceJdbcpoolJdbcPoolService(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, jdbcPerioddriverPeriodclass: kotlin.String, jdbcPeriodconnectionPerioduri: kotlin.String, jdbcPeriodusername: kotlin.String, jdbcPeriodpassword: kotlin.String, jdbcPeriodvalidationPeriodquery: kotlin.String, defaultPeriodreadonly: kotlin.Boolean, defaultPeriodautocommit: kotlin.Boolean, poolPeriodsize: kotlin.Int, poolPeriodmaxPeriodwaitPeriodmsec: kotlin.Int, datasourcePeriodname: kotlin.String, datasourcePeriodsvcPeriodproperties: kotlin.Array<kotlin.String>) : ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "jdbc.driver.class" to listOf("$jdbcPerioddriverPeriodclass"), "jdbc.connection.uri" to listOf("$jdbcPeriodconnectionPerioduri"), "jdbc.username" to listOf("$jdbcPeriodusername"), "jdbc.password" to listOf("$jdbcPeriodpassword"), "jdbc.validation.query" to listOf("$jdbcPeriodvalidationPeriodquery"), "default.readonly" to listOf("$defaultPeriodreadonly"), "default.autocommit" to listOf("$defaultPeriodautocommit"), "pool.size" to listOf("$poolPeriodsize"), "pool.max.wait.msec" to listOf("$poolPeriodmaxPeriodwaitPeriodmsec"), "datasource.name" to listOf("$datasourcePeriodname"), "datasource.svc.properties" to toMultiValue(datasourcePeriodsvcPeriodproperties.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.commons.datasource.jdbcpool.JdbcPoolService",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param proxyPeriodenabled  (optional)
    * @param proxyPeriodhost  (optional)
    * @param proxyPerioduser  (optional)
    * @param proxyPeriodpassword  (optional)
    * @param proxyPeriodntlmPeriodhost  (optional)
    * @param proxyPeriodntlmPerioddomain  (optional)
    * @param proxyPeriodexceptions  (optional)
    * @return ComDayCommonsHttpclientInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCommonsHttpclient(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, proxyPeriodenabled: kotlin.Boolean, proxyPeriodhost: kotlin.String, proxyPerioduser: kotlin.String, proxyPeriodpassword: kotlin.String, proxyPeriodntlmPeriodhost: kotlin.String, proxyPeriodntlmPerioddomain: kotlin.String, proxyPeriodexceptions: kotlin.Array<kotlin.String>) : ComDayCommonsHttpclientInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "proxy.enabled" to listOf("$proxyPeriodenabled"), "proxy.host" to listOf("$proxyPeriodhost"), "proxy.user" to listOf("$proxyPerioduser"), "proxy.password" to listOf("$proxyPeriodpassword"), "proxy.ntlm.host" to listOf("$proxyPeriodntlmPeriodhost"), "proxy.ntlm.domain" to listOf("$proxyPeriodntlmPerioddomain"), "proxy.exceptions" to toMultiValue(proxyPeriodexceptions.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.commons.httpclient",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCommonsHttpclientInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCommonsHttpclientInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPeriodstorePeriodlistenerPeriodadditionalStorePaths  (optional)
    * @return ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqAnalyticsImplStorePropertiesChangeListener(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPeriodstorePeriodlistenerPeriodadditionalStorePaths: kotlin.Array<kotlin.String>) : ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.store.listener.additionalStorePaths" to toMultiValue(cqPeriodstorePeriodlistenerPeriodadditionalStorePaths.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.analytics.impl.StorePropertiesChangeListener",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param allowedPeriodpaths  (optional)
    * @param cqPeriodanalyticsPeriodsaintPeriodexporterPeriodpagesize  (optional)
    * @return ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqAnalyticsSitecatalystImplExporterClassificationsExporte(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, allowedPeriodpaths: kotlin.Array<kotlin.String>, cqPeriodanalyticsPeriodsaintPeriodexporterPeriodpagesize: kotlin.Int) : ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "allowed.paths" to toMultiValue(allowedPeriodpaths.toList(), "multi"), "cq.analytics.saint.exporter.pagesize" to listOf("$cqPeriodanalyticsPeriodsaintPeriodexporterPeriodpagesize"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.exporter.ClassificationsExporter",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param reportPeriodfetchPeriodattempts  (optional)
    * @param reportPeriodfetchPerioddelay  (optional)
    * @return ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqAnalyticsSitecatalystImplImporterReportImporter(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, reportPeriodfetchPeriodattempts: kotlin.Int, reportPeriodfetchPerioddelay: kotlin.Int) : ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "report.fetch.attempts" to listOf("$reportPeriodfetchPeriodattempts"), "report.fetch.delay" to listOf("$reportPeriodfetchPerioddelay"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.importer.ReportImporter",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPeriodanalyticsPeriodadapterfactoryPeriodcontextstores  (optional)
    * @return ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPeriodanalyticsPeriodadapterfactoryPeriodcontextstores: kotlin.Array<kotlin.String>) : ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.analytics.adapterfactory.contextstores" to toMultiValue(cqPeriodanalyticsPeriodadapterfactoryPeriodcontextstores.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystAdapterFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPeriodanalyticsPeriodsitecatalystPeriodservicePerioddatacenterPeriodurl  (optional)
    * @param devhostnamepatterns  (optional)
    * @param connectionPeriodtimeout  (optional)
    * @param socketPeriodtimeout  (optional)
    * @return ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPeriodanalyticsPeriodsitecatalystPeriodservicePerioddatacenterPeriodurl: kotlin.Array<kotlin.String>, devhostnamepatterns: kotlin.Array<kotlin.String>, connectionPeriodtimeout: kotlin.Int, socketPeriodtimeout: kotlin.Int) : ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.analytics.sitecatalyst.service.datacenter.url" to toMultiValue(cqPeriodanalyticsPeriodsitecatalystPeriodservicePerioddatacenterPeriodurl.toList(), "multi"), "devhostnamepatterns" to toMultiValue(devhostnamepatterns.toList(), "multi"), "connection.timeout" to listOf("$connectionPeriodtimeout"), "socket.timeout" to listOf("$socketPeriodtimeout"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystHttpClientImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPeriodanalyticsPeriodtestandtargetPeriodaccountoptionsupdaterPeriodenabled  (optional)
    * @return ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqAnalyticsTestandtargetImplAccountOptionsUpdater(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPeriodanalyticsPeriodtestandtargetPeriodaccountoptionsupdaterPeriodenabled: kotlin.Boolean) : ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.analytics.testandtarget.accountoptionsupdater.enabled" to listOf("$cqPeriodanalyticsPeriodtestandtargetPeriodaccountoptionsupdaterPeriodenabled"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.AccountOptionsUpdater",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPeriodanalyticsPeriodtestandtargetPerioddeleteauthoractivitylistenerPeriodenabled  (optional)
    * @return ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPeriodanalyticsPeriodtestandtargetPerioddeleteauthoractivitylistenerPeriodenabled: kotlin.Boolean) : ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.analytics.testandtarget.deleteauthoractivitylistener.enabled" to listOf("$cqPeriodanalyticsPeriodtestandtargetPerioddeleteauthoractivitylistenerPeriodenabled"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.DeleteAuthorActivityListener",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPeriodanalyticsPeriodtestandtargetPeriodpushauthorcampaignpagelistenerPeriodenabled  (optional)
    * @return ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPeriodanalyticsPeriodtestandtargetPeriodpushauthorcampaignpagelistenerPeriodenabled: kotlin.Boolean) : ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.analytics.testandtarget.pushauthorcampaignpagelistener.enabled" to listOf("$cqPeriodanalyticsPeriodtestandtargetPeriodpushauthorcampaignpagelistenerPeriodenabled"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.PushAuthorCampaignPageListener",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPeriodanalyticsPeriodtestandtargetPeriodsegmentimporterPeriodenabled  (optional)
    * @return ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqAnalyticsTestandtargetImplSegmentImporter(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPeriodanalyticsPeriodtestandtargetPeriodsegmentimporterPeriodenabled: kotlin.Boolean) : ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.analytics.testandtarget.segmentimporter.enabled" to listOf("$cqPeriodanalyticsPeriodtestandtargetPeriodsegmentimporterPeriodenabled"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.SegmentImporter",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param endpointUri  (optional)
    * @param connectionTimeout  (optional)
    * @param socketTimeout  (optional)
    * @return ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqAnalyticsTestandtargetImplServiceWebServiceImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, endpointUri: kotlin.String, connectionTimeout: kotlin.Int, socketTimeout: kotlin.Int) : ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "endpointUri" to listOf("$endpointUri"), "connectionTimeout" to listOf("$connectionTimeout"), "socketTimeout" to listOf("$socketTimeout"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.service.WebServiceImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param testandtargetPeriodendpointPeriodurl  (optional)
    * @return ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqAnalyticsTestandtargetImplServletsAdminServerServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, testandtargetPeriodendpointPeriodurl: kotlin.String) : ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "testandtarget.endpoint.url" to listOf("$testandtargetPeriodendpointPeriodurl"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.servlets.AdminServerServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPeriodanalyticsPeriodtestandtargetPeriodapiPeriodurl  (optional)
    * @param cqPeriodanalyticsPeriodtestandtargetPeriodtimeout  (optional)
    * @param cqPeriodanalyticsPeriodtestandtargetPeriodsockettimeout  (optional)
    * @param cqPeriodanalyticsPeriodtestandtargetPeriodrecommendationsPeriodurlPeriodreplace  (optional)
    * @param cqPeriodanalyticsPeriodtestandtargetPeriodrecommendationsPeriodurlPeriodreplacewith  (optional)
    * @return ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPeriodanalyticsPeriodtestandtargetPeriodapiPeriodurl: kotlin.String, cqPeriodanalyticsPeriodtestandtargetPeriodtimeout: kotlin.Int, cqPeriodanalyticsPeriodtestandtargetPeriodsockettimeout: kotlin.Int, cqPeriodanalyticsPeriodtestandtargetPeriodrecommendationsPeriodurlPeriodreplace: kotlin.String, cqPeriodanalyticsPeriodtestandtargetPeriodrecommendationsPeriodurlPeriodreplacewith: kotlin.String) : ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.analytics.testandtarget.api.url" to listOf("$cqPeriodanalyticsPeriodtestandtargetPeriodapiPeriodurl"), "cq.analytics.testandtarget.timeout" to listOf("$cqPeriodanalyticsPeriodtestandtargetPeriodtimeout"), "cq.analytics.testandtarget.sockettimeout" to listOf("$cqPeriodanalyticsPeriodtestandtargetPeriodsockettimeout"), "cq.analytics.testandtarget.recommendations.url.replace" to listOf("$cqPeriodanalyticsPeriodtestandtargetPeriodrecommendationsPeriodurlPeriodreplace"), "cq.analytics.testandtarget.recommendations.url.replacewith" to listOf("$cqPeriodanalyticsPeriodtestandtargetPeriodrecommendationsPeriodurlPeriodreplacewith"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.TestandtargetHttpClientImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cugPeriodexemptedPeriodprincipals  (optional)
    * @param cugPeriodenabled  (optional)
    * @param cugPeriodprincipalsPeriodregex  (optional)
    * @param cugPeriodprincipalsPeriodreplacement  (optional)
    * @return ComDayCqAuthImplCugCugSupportImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqAuthImplCugCugSupportImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cugPeriodexemptedPeriodprincipals: kotlin.Array<kotlin.String>, cugPeriodenabled: kotlin.Boolean, cugPeriodprincipalsPeriodregex: kotlin.String, cugPeriodprincipalsPeriodreplacement: kotlin.String) : ComDayCqAuthImplCugCugSupportImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cug.exempted.principals" to toMultiValue(cugPeriodexemptedPeriodprincipals.toList(), "multi"), "cug.enabled" to listOf("$cugPeriodenabled"), "cug.principals.regex" to listOf("$cugPeriodprincipalsPeriodregex"), "cug.principals.replacement" to listOf("$cugPeriodprincipalsPeriodreplacement"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.auth.impl.cug.CugSupportImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqAuthImplCugCugSupportImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqAuthImplCugCugSupportImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param path  (optional)
    * @param servicePeriodranking  (optional)
    * @param authPeriodloginselectorPeriodmappings  (optional)
    * @param authPeriodloginselectorPeriodchangepwPeriodmappings  (optional)
    * @param authPeriodloginselectorPerioddefaultloginpage  (optional)
    * @param authPeriodloginselectorPerioddefaultchangepwpage  (optional)
    * @param authPeriodloginselectorPeriodhandle  (optional)
    * @param authPeriodloginselectorPeriodhandlePeriodallPeriodextensions  (optional)
    * @return ComDayCqAuthImplLoginSelectorHandlerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqAuthImplLoginSelectorHandler(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, path: kotlin.String, servicePeriodranking: kotlin.Int, authPeriodloginselectorPeriodmappings: kotlin.Array<kotlin.String>, authPeriodloginselectorPeriodchangepwPeriodmappings: kotlin.Array<kotlin.String>, authPeriodloginselectorPerioddefaultloginpage: kotlin.String, authPeriodloginselectorPerioddefaultchangepwpage: kotlin.String, authPeriodloginselectorPeriodhandle: kotlin.Array<kotlin.String>, authPeriodloginselectorPeriodhandlePeriodallPeriodextensions: kotlin.Boolean) : ComDayCqAuthImplLoginSelectorHandlerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "path" to listOf("$path"), "service.ranking" to listOf("$servicePeriodranking"), "auth.loginselector.mappings" to toMultiValue(authPeriodloginselectorPeriodmappings.toList(), "multi"), "auth.loginselector.changepw.mappings" to toMultiValue(authPeriodloginselectorPeriodchangepwPeriodmappings.toList(), "multi"), "auth.loginselector.defaultloginpage" to listOf("$authPeriodloginselectorPerioddefaultloginpage"), "auth.loginselector.defaultchangepwpage" to listOf("$authPeriodloginselectorPerioddefaultchangepwpage"), "auth.loginselector.handle" to toMultiValue(authPeriodloginselectorPeriodhandle.toList(), "multi"), "auth.loginselector.handle.all.extensions" to listOf("$authPeriodloginselectorPeriodhandlePeriodallPeriodextensions"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.auth.impl.LoginSelectorHandler",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqAuthImplLoginSelectorHandlerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqAuthImplLoginSelectorHandlerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param externalizerPerioddomains  (optional)
    * @param externalizerPeriodhost  (optional)
    * @param externalizerPeriodcontextpath  (optional)
    * @param externalizerPeriodencodedpath  (optional)
    * @return ComDayCqCommonsImplExternalizerImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqCommonsImplExternalizerImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, externalizerPerioddomains: kotlin.Array<kotlin.String>, externalizerPeriodhost: kotlin.String, externalizerPeriodcontextpath: kotlin.String, externalizerPeriodencodedpath: kotlin.Boolean) : ComDayCqCommonsImplExternalizerImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "externalizer.domains" to toMultiValue(externalizerPerioddomains.toList(), "multi"), "externalizer.host" to listOf("$externalizerPeriodhost"), "externalizer.contextpath" to listOf("$externalizerPeriodcontextpath"), "externalizer.encodedpath" to listOf("$externalizerPeriodencodedpath"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.commons.impl.ExternalizerImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqCommonsImplExternalizerImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqCommonsImplExternalizerImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param rootmappingPeriodtarget  (optional)
    * @return ComDayCqCommonsServletsRootMappingServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqCommonsServletsRootMappingServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, rootmappingPeriodtarget: kotlin.String) : ComDayCqCommonsServletsRootMappingServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "rootmapping.target" to listOf("$rootmappingPeriodtarget"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.commons.servlets.RootMappingServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqCommonsServletsRootMappingServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqCommonsServletsRootMappingServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param codeupgradetasks  (optional)
    * @param codeupgradetaskfilters  (optional)
    * @return ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, codeupgradetasks: kotlin.Array<kotlin.String>, codeupgradetaskfilters: kotlin.Array<kotlin.String>) : ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "codeupgradetasks" to toMultiValue(codeupgradetasks.toList(), "multi"), "codeupgradetaskfilters" to toMultiValue(codeupgradetaskfilters.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.CodeUpgradeExecutionConditionChecker",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param upgradeTaskIgnoreList  (optional)
    * @return ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, upgradeTaskIgnoreList: kotlin.Array<kotlin.String>) : ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "upgradeTaskIgnoreList" to toMultiValue(upgradeTaskIgnoreList.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.UpgradeTaskIgnoreList",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param effectiveBundleListPath  (optional)
    * @return ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, effectiveBundleListPath: kotlin.String) : ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "effectiveBundleListPath" to listOf("$effectiveBundleListPath"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.VersionRangeTaskIgnorelist",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param contentsyncPeriodfallbackPeriodauthorizable  (optional)
    * @param contentsyncPeriodfallbackPeriodupdateuser  (optional)
    * @return ComDayCqContentsyncImplContentSyncManagerImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqContentsyncImplContentSyncManagerImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, contentsyncPeriodfallbackPeriodauthorizable: kotlin.String, contentsyncPeriodfallbackPeriodupdateuser: kotlin.String) : ComDayCqContentsyncImplContentSyncManagerImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "contentsync.fallback.authorizable" to listOf("$contentsyncPeriodfallbackPeriodauthorizable"), "contentsync.fallback.updateuser" to listOf("$contentsyncPeriodfallbackPeriodupdateuser"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.contentsync.impl.ContentSyncManagerImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqContentsyncImplContentSyncManagerImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqContentsyncImplContentSyncManagerImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param largeFileThreshold  (optional)
    * @param largeCommentThreshold  (optional)
    * @param cqPerioddamPeriodenablePeriodextPeriodmetaPeriodextraction  (optional)
    * @return ComDayCqDamCommonsHandlerStandardImageHandlerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamCommonsHandlerStandardImageHandler(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, largeFileThreshold: kotlin.Int, largeCommentThreshold: kotlin.Int, cqPerioddamPeriodenablePeriodextPeriodmetaPeriodextraction: kotlin.Boolean) : ComDayCqDamCommonsHandlerStandardImageHandlerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "large_file_threshold" to listOf("$largeFileThreshold"), "large_comment_threshold" to listOf("$largeCommentThreshold"), "cq.dam.enable.ext.meta.extraction" to listOf("$cqPerioddamPeriodenablePeriodextPeriodmetaPeriodextraction"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.commons.handler.StandardImageHandler",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamCommonsHandlerStandardImageHandlerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamCommonsHandlerStandardImageHandlerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param xmpPeriodfilterPeriodapplyWhitelist  (optional)
    * @param xmpPeriodfilterPeriodwhitelist  (optional)
    * @param xmpPeriodfilterPeriodapplyBlacklist  (optional)
    * @param xmpPeriodfilterPeriodblacklist  (optional)
    * @return ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamCommonsMetadataXmpFilterBlackWhite(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, xmpPeriodfilterPeriodapplyWhitelist: kotlin.Boolean, xmpPeriodfilterPeriodwhitelist: kotlin.Array<kotlin.String>, xmpPeriodfilterPeriodapplyBlacklist: kotlin.Boolean, xmpPeriodfilterPeriodblacklist: kotlin.Array<kotlin.String>) : ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "xmp.filter.apply_whitelist" to listOf("$xmpPeriodfilterPeriodapplyWhitelist"), "xmp.filter.whitelist" to toMultiValue(xmpPeriodfilterPeriodwhitelist.toList(), "multi"), "xmp.filter.apply_blacklist" to listOf("$xmpPeriodfilterPeriodapplyBlacklist"), "xmp.filter.blacklist" to toMultiValue(xmpPeriodfilterPeriodblacklist.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.commons.metadata.XmpFilterBlackWhite",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param largePeriodfilePeriodmin  (optional)
    * @param cachePeriodapply  (optional)
    * @param mimePeriodtypes  (optional)
    * @return ComDayCqDamCommonsUtilImplAssetCacheImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamCommonsUtilImplAssetCacheImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, largePeriodfilePeriodmin: kotlin.Int, cachePeriodapply: kotlin.Boolean, mimePeriodtypes: kotlin.Array<kotlin.String>) : ComDayCqDamCommonsUtilImplAssetCacheImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "large.file.min" to listOf("$largePeriodfilePeriodmin"), "cache.apply" to listOf("$cachePeriodapply"), "mime.types" to toMultiValue(mimePeriodtypes.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.commons.util.impl.AssetCacheImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamCommonsUtilImplAssetCacheImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamCommonsUtilImplAssetCacheImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodwidth  (optional)
    * @param cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodheight  (optional)
    * @param cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodpaddingPeriodhorizontal  (optional)
    * @param cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodpaddingPeriodvertical  (optional)
    * @param cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodsize  (optional)
    * @param cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodcolor  (optional)
    * @param cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodfamily  (optional)
    * @param cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodlight  (optional)
    * @param cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodmarginTextImage  (optional)
    * @param cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodminImageHeight  (optional)
    * @param cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodwidth  (optional)
    * @param cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodapproved  (optional)
    * @param cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodrejected  (optional)
    * @param cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodchangesRequested  (optional)
    * @param cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodannotationMarkerPeriodwidth  (optional)
    * @param cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodassetPeriodminheight  (optional)
    * @return ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodwidth: kotlin.Int, cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodheight: kotlin.Int, cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodpaddingPeriodhorizontal: kotlin.Int, cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodpaddingPeriodvertical: kotlin.Int, cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodsize: kotlin.Int, cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodcolor: kotlin.String, cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodfamily: kotlin.String, cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodlight: kotlin.String, cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodmarginTextImage: kotlin.Int, cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodminImageHeight: kotlin.Int, cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodwidth: kotlin.Int, cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodapproved: kotlin.String, cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodrejected: kotlin.String, cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodchangesRequested: kotlin.String, cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodannotationMarkerPeriodwidth: kotlin.Int, cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodassetPeriodminheight: kotlin.Int) : ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.dam.config.annotation.pdf.document.width" to listOf("$cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodwidth"), "cq.dam.config.annotation.pdf.document.height" to listOf("$cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodheight"), "cq.dam.config.annotation.pdf.document.padding.horizontal" to listOf("$cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodpaddingPeriodhorizontal"), "cq.dam.config.annotation.pdf.document.padding.vertical" to listOf("$cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodpaddingPeriodvertical"), "cq.dam.config.annotation.pdf.font.size" to listOf("$cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodsize"), "cq.dam.config.annotation.pdf.font.color" to listOf("$cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodcolor"), "cq.dam.config.annotation.pdf.font.family" to listOf("$cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodfamily"), "cq.dam.config.annotation.pdf.font.light" to listOf("$cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodlight"), "cq.dam.config.annotation.pdf.marginTextImage" to listOf("$cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodmarginTextImage"), "cq.dam.config.annotation.pdf.minImageHeight" to listOf("$cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodminImageHeight"), "cq.dam.config.annotation.pdf.reviewStatus.width" to listOf("$cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodwidth"), "cq.dam.config.annotation.pdf.reviewStatus.color.approved" to listOf("$cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodapproved"), "cq.dam.config.annotation.pdf.reviewStatus.color.rejected" to listOf("$cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodrejected"), "cq.dam.config.annotation.pdf.reviewStatus.color.changesRequested" to listOf("$cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodchangesRequested"), "cq.dam.config.annotation.pdf.annotationMarker.width" to listOf("$cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodannotationMarkerPeriodwidth"), "cq.dam.config.annotation.pdf.asset.minheight" to listOf("$cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodassetPeriodminheight"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.core.impl.annotation.pdf.AnnotationPdfConfig",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param enabled  (optional)
    * @return ComDayCqDamCoreImplAssetMoveListenerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamCoreImplAssetMoveListener(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, enabled: kotlin.Boolean) : ComDayCqDamCoreImplAssetMoveListenerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "enabled" to listOf("$enabled"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.core.impl.AssetMoveListener",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamCoreImplAssetMoveListenerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamCoreImplAssetMoveListenerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param isEnabled  (optional)
    * @return ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamCoreImplAssethomeAssetHomePageConfiguration(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, isEnabled: kotlin.Boolean) : ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "isEnabled" to listOf("$isEnabled"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.core.impl.assethome.AssetHomePageConfiguration",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPerioddamPeriodadhocPeriodassetPeriodsharePeriodprezipPeriodmaxcontentsize  (optional)
    * @return ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPerioddamPeriodadhocPeriodassetPeriodsharePeriodprezipPeriodmaxcontentsize: kotlin.Int) : ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.dam.adhoc.asset.share.prezip.maxcontentsize" to listOf("$cqPerioddamPeriodadhocPeriodassetPeriodsharePeriodprezipPeriodmaxcontentsize"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.core.impl.assetlinkshare.AdhocAssetShareProxyServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPerioddamPeriodimagePeriodcachePeriodmaxPeriodmemory  (optional)
    * @param cqPerioddamPeriodimagePeriodcachePeriodmaxPeriodage  (optional)
    * @param cqPerioddamPeriodimagePeriodcachePeriodmaxPerioddimension  (optional)
    * @return ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamCoreImplCacheCQBufferedImageCache(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPerioddamPeriodimagePeriodcachePeriodmaxPeriodmemory: kotlin.Int, cqPerioddamPeriodimagePeriodcachePeriodmaxPeriodage: kotlin.Int, cqPerioddamPeriodimagePeriodcachePeriodmaxPerioddimension: kotlin.String) : ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.dam.image.cache.max.memory" to listOf("$cqPerioddamPeriodimagePeriodcachePeriodmaxPeriodmemory"), "cq.dam.image.cache.max.age" to listOf("$cqPerioddamPeriodimagePeriodcachePeriodmaxPeriodage"), "cq.dam.image.cache.max.dimension" to listOf("$cqPerioddamPeriodimagePeriodcachePeriodmaxPerioddimension"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.core.impl.cache.CQBufferedImageCache",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param changeeventlistenerPeriodobservedPeriodpaths  (optional)
    * @return ComDayCqDamCoreImplDamChangeEventListenerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamCoreImplDamChangeEventListener(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, changeeventlistenerPeriodobservedPeriodpaths: kotlin.Array<kotlin.String>) : ComDayCqDamCoreImplDamChangeEventListenerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "changeeventlistener.observed.paths" to toMultiValue(changeeventlistenerPeriodobservedPeriodpaths.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.core.impl.DamChangeEventListener",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamCoreImplDamChangeEventListenerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamCoreImplDamChangeEventListenerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param schedulerPeriodexpression  (optional)
    * @param maxSavedActivities  (optional)
    * @param saveInterval  (optional)
    * @param enableActivityPurge  (optional)
    * @param eventTypes  (optional)
    * @return ComDayCqDamCoreImplDamEventPurgeServiceInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamCoreImplDamEventPurgeService(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, schedulerPeriodexpression: kotlin.String, maxSavedActivities: kotlin.Int, saveInterval: kotlin.Int, enableActivityPurge: kotlin.Boolean, eventTypes: kotlin.String) : ComDayCqDamCoreImplDamEventPurgeServiceInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "scheduler.expression" to listOf("$schedulerPeriodexpression"), "maxSavedActivities" to listOf("$maxSavedActivities"), "saveInterval" to listOf("$saveInterval"), "enableActivityPurge" to listOf("$enableActivityPurge"), "eventTypes" to listOf("$eventTypes"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.core.impl.DamEventPurgeService",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamCoreImplDamEventPurgeServiceInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamCoreImplDamEventPurgeServiceInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param eventPeriodfilter  (optional)
    * @param eventPeriodqueuePeriodlength  (optional)
    * @param eventrecorderPeriodenabled  (optional)
    * @param eventrecorderPeriodblacklist  (optional)
    * @param eventrecorderPeriodeventtypes  (optional)
    * @return ComDayCqDamCoreImplDamEventRecorderImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamCoreImplDamEventRecorderImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, eventPeriodfilter: kotlin.String, eventPeriodqueuePeriodlength: kotlin.Int, eventrecorderPeriodenabled: kotlin.Boolean, eventrecorderPeriodblacklist: kotlin.Array<kotlin.String>, eventrecorderPeriodeventtypes: kotlin.String) : ComDayCqDamCoreImplDamEventRecorderImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "event.filter" to listOf("$eventPeriodfilter"), "event.queue.length" to listOf("$eventPeriodqueuePeriodlength"), "eventrecorder.enabled" to listOf("$eventrecorderPeriodenabled"), "eventrecorder.blacklist" to toMultiValue(eventrecorderPeriodblacklist.toList(), "multi"), "eventrecorder.eventtypes" to listOf("$eventrecorderPeriodeventtypes"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.core.impl.DamEventRecorderImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamCoreImplDamEventRecorderImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamCoreImplDamEventRecorderImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param eventPeriodfilter  (optional)
    * @param enabled  (optional)
    * @return ComDayCqDamCoreImplEventDamEventAuditListenerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamCoreImplEventDamEventAuditListener(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, eventPeriodfilter: kotlin.String, enabled: kotlin.Boolean) : ComDayCqDamCoreImplEventDamEventAuditListenerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "event.filter" to listOf("$eventPeriodfilter"), "enabled" to listOf("$enabled"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.core.impl.event.DamEventAuditListener",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamCoreImplEventDamEventAuditListenerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamCoreImplEventDamEventAuditListenerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodistimebased  (optional)
    * @param cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodtimebasedPeriodrule  (optional)
    * @param cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodperiodPeriodrule  (optional)
    * @param sendEmail  (optional)
    * @param assetExpiredLimit  (optional)
    * @param priorNotificationSeconds  (optional)
    * @param cqPerioddamPeriodexpiryPeriodnotificationPeriodurlPeriodprotocol  (optional)
    * @return ComDayCqDamCoreImplExpiryNotificationJobImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamCoreImplExpiryNotificationJobImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodistimebased: kotlin.Boolean, cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodtimebasedPeriodrule: kotlin.String, cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodperiodPeriodrule: kotlin.Int, sendEmail: kotlin.Boolean, assetExpiredLimit: kotlin.Int, priorNotificationSeconds: kotlin.Int, cqPerioddamPeriodexpiryPeriodnotificationPeriodurlPeriodprotocol: kotlin.String) : ComDayCqDamCoreImplExpiryNotificationJobImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.dam.expiry.notification.scheduler.istimebased" to listOf("$cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodistimebased"), "cq.dam.expiry.notification.scheduler.timebased.rule" to listOf("$cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodtimebasedPeriodrule"), "cq.dam.expiry.notification.scheduler.period.rule" to listOf("$cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodperiodPeriodrule"), "send_email" to listOf("$sendEmail"), "asset_expired_limit" to listOf("$assetExpiredLimit"), "prior_notification_seconds" to listOf("$priorNotificationSeconds"), "cq.dam.expiry.notification.url.protocol" to listOf("$cqPerioddamPeriodexpiryPeriodnotificationPeriodurlPeriodprotocol"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.core.impl.ExpiryNotificationJobImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamCoreImplExpiryNotificationJobImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamCoreImplExpiryNotificationJobImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param isEnabled  (optional)
    * @return ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, isEnabled: kotlin.Boolean) : ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "isEnabled" to listOf("$isEnabled"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.core.impl.foldermetadataschema.FolderMetadataSchemaFeatureFlag",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param skipPeriodbufferedcache  (optional)
    * @return ComDayCqDamCoreImplGfxCommonsGfxRendererInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamCoreImplGfxCommonsGfxRenderer(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, skipPeriodbufferedcache: kotlin.Boolean) : ComDayCqDamCoreImplGfxCommonsGfxRendererInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "skip.bufferedcache" to listOf("$skipPeriodbufferedcache"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.core.impl.gfx.CommonsGfxRenderer",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamCoreImplGfxCommonsGfxRendererInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamCoreImplGfxCommonsGfxRendererInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param mimetype  (optional)
    * @return ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamCoreImplHandlerEPSFormatHandler(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, mimetype: kotlin.String) : ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "mimetype" to listOf("$mimetype"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.core.impl.handler.EPSFormatHandler",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param mimetype  (optional)
    * @return ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamCoreImplHandlerIndesignFormatHandler(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, mimetype: kotlin.Array<kotlin.String>) : ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "mimetype" to toMultiValue(mimetype.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.core.impl.handler.IndesignFormatHandler",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPerioddamPeriodenablePeriodextPeriodmetaPeriodextraction  (optional)
    * @param largeFileThreshold  (optional)
    * @param largeCommentThreshold  (optional)
    * @return ComDayCqDamCoreImplHandlerJpegHandlerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamCoreImplHandlerJpegHandler(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPerioddamPeriodenablePeriodextPeriodmetaPeriodextraction: kotlin.Boolean, largeFileThreshold: kotlin.Int, largeCommentThreshold: kotlin.Int) : ComDayCqDamCoreImplHandlerJpegHandlerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.dam.enable.ext.meta.extraction" to listOf("$cqPerioddamPeriodenablePeriodextPeriodmetaPeriodextraction"), "large_file_threshold" to listOf("$largeFileThreshold"), "large_comment_threshold" to listOf("$largeCommentThreshold"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.core.impl.handler.JpegHandler",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamCoreImplHandlerJpegHandlerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamCoreImplHandlerJpegHandlerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param xmphandlerPeriodcqPeriodformats  (optional)
    * @return ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamCoreImplHandlerXmpNCommXMPHandler(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, xmphandlerPeriodcqPeriodformats: kotlin.Array<kotlin.String>) : ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "xmphandler.cq.formats" to toMultiValue(xmphandlerPeriodcqPeriodformats.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.core.impl.handler.xmp.NCommXMPHandler",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param jmxPeriodobjectname  (optional)
    * @param propertyPeriodmeasurePeriodenabled  (optional)
    * @param propertyPeriodname  (optional)
    * @param propertyPeriodmaxPeriodwaitPeriodms  (optional)
    * @param propertyPeriodmaxPeriodrate  (optional)
    * @param fulltextPeriodmeasurePeriodenabled  (optional)
    * @param fulltextPeriodname  (optional)
    * @param fulltextPeriodmaxPeriodwaitPeriodms  (optional)
    * @param fulltextPeriodmaxPeriodrate  (optional)
    * @return ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamCoreImplJmxAssetIndexUpdateMonitor(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, jmxPeriodobjectname: kotlin.String, propertyPeriodmeasurePeriodenabled: kotlin.Boolean, propertyPeriodname: kotlin.String, propertyPeriodmaxPeriodwaitPeriodms: kotlin.Int, propertyPeriodmaxPeriodrate: java.math.BigDecimal, fulltextPeriodmeasurePeriodenabled: kotlin.Boolean, fulltextPeriodname: kotlin.String, fulltextPeriodmaxPeriodwaitPeriodms: kotlin.Int, fulltextPeriodmaxPeriodrate: java.math.BigDecimal) : ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "jmx.objectname" to listOf("$jmxPeriodobjectname"), "property.measure.enabled" to listOf("$propertyPeriodmeasurePeriodenabled"), "property.name" to listOf("$propertyPeriodname"), "property.max.wait.ms" to listOf("$propertyPeriodmaxPeriodwaitPeriodms"), "property.max.rate" to listOf("$propertyPeriodmaxPeriodrate"), "fulltext.measure.enabled" to listOf("$fulltextPeriodmeasurePeriodenabled"), "fulltext.name" to listOf("$fulltextPeriodname"), "fulltext.max.wait.ms" to listOf("$fulltextPeriodmaxPeriodwaitPeriodms"), "fulltext.max.rate" to listOf("$fulltextPeriodmaxPeriodrate"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetIndexUpdateMonitor",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param jmxPeriodobjectname  (optional)
    * @return ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamCoreImplJmxAssetMigrationMBeanImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, jmxPeriodobjectname: kotlin.String) : ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "jmx.objectname" to listOf("$jmxPeriodobjectname"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetMigrationMBeanImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param jmxPeriodobjectname  (optional)
    * @param active  (optional)
    * @return ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamCoreImplJmxAssetUpdateMonitorImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, jmxPeriodobjectname: kotlin.String, active: kotlin.Boolean) : ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "jmx.objectname" to listOf("$jmxPeriodobjectname"), "active" to listOf("$active"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetUpdateMonitorImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param operation  (optional)
    * @param emailEnabled  (optional)
    * @return ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, operation: kotlin.String, emailEnabled: kotlin.Boolean) : ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "operation" to listOf("$operation"), "emailEnabled" to listOf("$emailEnabled"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataexport.AsyncMetadataExportConfigProviderService",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param operation  (optional)
    * @param operationIcon  (optional)
    * @param topicName  (optional)
    * @param emailEnabled  (optional)
    * @return ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, operation: kotlin.String, operationIcon: kotlin.String, topicName: kotlin.String, emailEnabled: kotlin.Boolean) : ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "operation" to listOf("$operation"), "operationIcon" to listOf("$operationIcon"), "topicName" to listOf("$topicName"), "emailEnabled" to listOf("$emailEnabled"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataimport.AsyncMetadataImportConfigProviderService",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param slingPeriodservletPeriodpaths  (optional)
    * @param slingPeriodservletPeriodmethods  (optional)
    * @param cqPerioddamPeriodenablePeriodanonymous  (optional)
    * @return ComDayCqDamCoreImplLightboxLightboxServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamCoreImplLightboxLightboxServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, slingPeriodservletPeriodpaths: kotlin.String, slingPeriodservletPeriodmethods: kotlin.Array<kotlin.String>, cqPerioddamPeriodenablePeriodanonymous: kotlin.Boolean) : ComDayCqDamCoreImplLightboxLightboxServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "sling.servlet.paths" to listOf("$slingPeriodservletPeriodpaths"), "sling.servlet.methods" to toMultiValue(slingPeriodservletPeriodmethods.toList(), "multi"), "cq.dam.enable.anonymous" to listOf("$cqPerioddamPeriodenablePeriodanonymous"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.core.impl.lightbox.LightboxServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamCoreImplLightboxLightboxServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamCoreImplLightboxLightboxServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param graniteData  (optional)
    * @return ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamCoreImplMetadataEditorSelectComponentHandler(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, graniteData: kotlin.Array<kotlin.String>) : ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "granite:data" to toMultiValue(graniteData.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.core.impl.metadata.editor.SelectComponentHandler",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPerioddamPeriodallowPeriodallPeriodmime  (optional)
    * @param cqPerioddamPeriodallowedPeriodassetPeriodmimes  (optional)
    * @return ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPerioddamPeriodallowPeriodallPeriodmime: kotlin.Boolean, cqPerioddamPeriodallowedPeriodassetPeriodmimes: kotlin.Array<kotlin.String>) : ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.dam.allow.all.mime" to listOf("$cqPerioddamPeriodallowPeriodallPeriodmime"), "cq.dam.allowed.asset.mimes" to toMultiValue(cqPerioddamPeriodallowedPeriodassetPeriodmimes.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.core.impl.mimeType.AssetUploadRestrictionHelper",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPerioddamPerioddetectPeriodassetPeriodmimePeriodfromPeriodcontent  (optional)
    * @return ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPerioddamPerioddetectPeriodassetPeriodmimePeriodfromPeriodcontent: kotlin.Boolean) : ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.dam.detect.asset.mime.from.content" to listOf("$cqPerioddamPerioddetectPeriodassetPeriodmimePeriodfromPeriodcontent"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.core.impl.mimeType.DamMimeTypeServiceImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodistimebased  (optional)
    * @param cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodtimebasedPeriodrule  (optional)
    * @param cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodperiodPeriodrule  (optional)
    * @param cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodrecipient  (optional)
    * @return ComDayCqDamCoreImplMissingMetadataNotificationJobInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamCoreImplMissingMetadataNotificationJob(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodistimebased: kotlin.Boolean, cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodtimebasedPeriodrule: kotlin.String, cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodperiodPeriodrule: kotlin.Int, cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodrecipient: kotlin.String) : ComDayCqDamCoreImplMissingMetadataNotificationJobInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.dam.missingmetadata.notification.scheduler.istimebased" to listOf("$cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodistimebased"), "cq.dam.missingmetadata.notification.scheduler.timebased.rule" to listOf("$cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodtimebasedPeriodrule"), "cq.dam.missingmetadata.notification.scheduler.period.rule" to listOf("$cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodperiodPeriodrule"), "cq.dam.missingmetadata.notification.recipient" to listOf("$cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodrecipient"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.core.impl.MissingMetadataNotificationJob",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamCoreImplMissingMetadataNotificationJobInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamCoreImplMissingMetadataNotificationJobInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param processPeriodlabel  (optional)
    * @param notify on Complete  (optional)
    * @return ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, processPeriodlabel: kotlin.String, notify on Complete: kotlin.Boolean) : ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "process.label" to listOf("$processPeriodlabel"), "Notify on Complete" to listOf("$notify on Complete"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.core.impl.process.SendTransientWorkflowCompletedEmailProcess",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param mimeTypes  (optional)
    * @param maxExtract  (optional)
    * @return ComDayCqDamCoreImplProcessTextExtractionProcessInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamCoreImplProcessTextExtractionProcess(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, mimeTypes: kotlin.Array<kotlin.String>, maxExtract: kotlin.Int) : ComDayCqDamCoreImplProcessTextExtractionProcessInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "mimeTypes" to toMultiValue(mimeTypes.toList(), "multi"), "maxExtract" to listOf("$maxExtract"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.core.impl.process.TextExtractionProcess",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamCoreImplProcessTextExtractionProcessInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamCoreImplProcessTextExtractionProcessInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param xmpPeriodpropagate  (optional)
    * @param xmpPeriodexcludes  (optional)
    * @return ComDayCqDamCoreImplRenditionMakerImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamCoreImplRenditionMakerImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, xmpPeriodpropagate: kotlin.Boolean, xmpPeriodexcludes: kotlin.Array<kotlin.String>) : ComDayCqDamCoreImplRenditionMakerImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "xmp.propagate" to listOf("$xmpPeriodpropagate"), "xmp.excludes" to toMultiValue(xmpPeriodexcludes.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.core.impl.RenditionMakerImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamCoreImplRenditionMakerImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamCoreImplRenditionMakerImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param queryBatchSize  (optional)
    * @return ComDayCqDamCoreImplReportsReportExportServiceInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamCoreImplReportsReportExportService(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, queryBatchSize: kotlin.Int) : ComDayCqDamCoreImplReportsReportExportServiceInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "queryBatchSize" to listOf("$queryBatchSize"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.core.impl.reports.ReportExportService",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamCoreImplReportsReportExportServiceInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamCoreImplReportsReportExportServiceInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param schedulerPeriodexpression  (optional)
    * @param maxSavedReports  (optional)
    * @param timeDuration  (optional)
    * @param enableReportPurge  (optional)
    * @return ComDayCqDamCoreImplReportsReportPurgeServiceInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamCoreImplReportsReportPurgeService(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, schedulerPeriodexpression: kotlin.String, maxSavedReports: kotlin.Int, timeDuration: kotlin.Int, enableReportPurge: kotlin.Boolean) : ComDayCqDamCoreImplReportsReportPurgeServiceInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "scheduler.expression" to listOf("$schedulerPeriodexpression"), "maxSavedReports" to listOf("$maxSavedReports"), "timeDuration" to listOf("$timeDuration"), "enableReportPurge" to listOf("$enableReportPurge"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.core.impl.reports.ReportPurgeService",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamCoreImplReportsReportPurgeServiceInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamCoreImplReportsReportPurgeServiceInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param enabled  (optional)
    * @return ComDayCqDamCoreImplServletAssetDownloadServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamCoreImplServletAssetDownloadServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, enabled: kotlin.Boolean) : ComDayCqDamCoreImplServletAssetDownloadServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "enabled" to listOf("$enabled"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetDownloadServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamCoreImplServletAssetDownloadServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamCoreImplServletAssetDownloadServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPerioddamPeriodbatchPeriodstatusPeriodmaxassets  (optional)
    * @return ComDayCqDamCoreImplServletAssetStatusServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamCoreImplServletAssetStatusServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPerioddamPeriodbatchPeriodstatusPeriodmaxassets: kotlin.Int) : ComDayCqDamCoreImplServletAssetStatusServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.dam.batch.status.maxassets" to listOf("$cqPerioddamPeriodbatchPeriodstatusPeriodmaxassets"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetStatusServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamCoreImplServletAssetStatusServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamCoreImplServletAssetStatusServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPerioddamPeriodbatchPeriodindesignPeriodmaxassets  (optional)
    * @return ComDayCqDamCoreImplServletAssetXMPSearchServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamCoreImplServletAssetXMPSearchServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPerioddamPeriodbatchPeriodindesignPeriodmaxassets: kotlin.Int) : ComDayCqDamCoreImplServletAssetXMPSearchServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.dam.batch.indesign.maxassets" to listOf("$cqPerioddamPeriodbatchPeriodindesignPeriodmaxassets"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetXMPSearchServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamCoreImplServletAssetXMPSearchServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamCoreImplServletAssetXMPSearchServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPerioddamPeriodbatchPeriodmetadataPeriodassetPerioddefault  (optional)
    * @param cqPerioddamPeriodbatchPeriodmetadataPeriodcollectionPerioddefault  (optional)
    * @param cqPerioddamPeriodbatchPeriodmetadataPeriodmaxresources  (optional)
    * @return ComDayCqDamCoreImplServletBatchMetadataServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamCoreImplServletBatchMetadataServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPerioddamPeriodbatchPeriodmetadataPeriodassetPerioddefault: kotlin.Array<kotlin.String>, cqPerioddamPeriodbatchPeriodmetadataPeriodcollectionPerioddefault: kotlin.Array<kotlin.String>, cqPerioddamPeriodbatchPeriodmetadataPeriodmaxresources: kotlin.Int) : ComDayCqDamCoreImplServletBatchMetadataServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.dam.batch.metadata.asset.default" to toMultiValue(cqPerioddamPeriodbatchPeriodmetadataPeriodassetPerioddefault.toList(), "multi"), "cq.dam.batch.metadata.collection.default" to toMultiValue(cqPerioddamPeriodbatchPeriodmetadataPeriodcollectionPerioddefault.toList(), "multi"), "cq.dam.batch.metadata.maxresources" to listOf("$cqPerioddamPeriodbatchPeriodmetadataPeriodmaxresources"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.BatchMetadataServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamCoreImplServletBatchMetadataServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamCoreImplServletBatchMetadataServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param slingPeriodservletPeriodresourceTypes  (optional)
    * @param slingPeriodservletPeriodmethods  (optional)
    * @param cqPerioddamPerioddrmPeriodenable  (optional)
    * @return ComDayCqDamCoreImplServletBinaryProviderServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamCoreImplServletBinaryProviderServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, slingPeriodservletPeriodresourceTypes: kotlin.Array<kotlin.String>, slingPeriodservletPeriodmethods: kotlin.Array<kotlin.String>, cqPerioddamPerioddrmPeriodenable: kotlin.Boolean) : ComDayCqDamCoreImplServletBinaryProviderServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "sling.servlet.resourceTypes" to toMultiValue(slingPeriodservletPeriodresourceTypes.toList(), "multi"), "sling.servlet.methods" to toMultiValue(slingPeriodservletPeriodmethods.toList(), "multi"), "cq.dam.drm.enable" to listOf("$cqPerioddamPerioddrmPeriodenable"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.BinaryProviderServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamCoreImplServletBinaryProviderServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamCoreImplServletBinaryProviderServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPerioddamPeriodbatchPeriodcollectionPeriodproperties  (optional)
    * @param cqPerioddamPeriodbatchPeriodcollectionPeriodmaxcollections  (optional)
    * @return ComDayCqDamCoreImplServletCollectionServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamCoreImplServletCollectionServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPerioddamPeriodbatchPeriodcollectionPeriodproperties: kotlin.Array<kotlin.String>, cqPerioddamPeriodbatchPeriodcollectionPeriodmaxcollections: kotlin.Int) : ComDayCqDamCoreImplServletCollectionServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.dam.batch.collection.properties" to toMultiValue(cqPerioddamPeriodbatchPeriodcollectionPeriodproperties.toList(), "multi"), "cq.dam.batch.collection.maxcollections" to listOf("$cqPerioddamPeriodbatchPeriodcollectionPeriodmaxcollections"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamCoreImplServletCollectionServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamCoreImplServletCollectionServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPerioddamPeriodbatchPeriodcollectionsPeriodproperties  (optional)
    * @param cqPerioddamPeriodbatchPeriodcollectionsPeriodlimit  (optional)
    * @return ComDayCqDamCoreImplServletCollectionsServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamCoreImplServletCollectionsServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPerioddamPeriodbatchPeriodcollectionsPeriodproperties: kotlin.Array<kotlin.String>, cqPerioddamPeriodbatchPeriodcollectionsPeriodlimit: kotlin.Int) : ComDayCqDamCoreImplServletCollectionsServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.dam.batch.collections.properties" to toMultiValue(cqPerioddamPeriodbatchPeriodcollectionsPeriodproperties.toList(), "multi"), "cq.dam.batch.collections.limit" to listOf("$cqPerioddamPeriodbatchPeriodcollectionsPeriodlimit"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionsServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamCoreImplServletCollectionsServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamCoreImplServletCollectionsServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param more Info  (optional)
    * @param SlashmntSlashoverlaySlashdamSlashguiSlashcontentSlashassetsSlashmoreinfoPeriodhtmlSlashDollarLeft_Curly_BracketpathRight_Curly_Bracket  (optional)
    * @return ComDayCqDamCoreImplServletCompanionServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamCoreImplServletCompanionServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, more Info: kotlin.String, SlashmntSlashoverlaySlashdamSlashguiSlashcontentSlashassetsSlashmoreinfoPeriodhtmlSlashDollarLeft_Curly_BracketpathRight_Curly_Bracket: kotlin.String) : ComDayCqDamCoreImplServletCompanionServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "More Info" to listOf("$more Info"), "/mnt/overlay/dam/gui/content/assets/moreinfo.html/${path}" to listOf("$SlashmntSlashoverlaySlashdamSlashguiSlashcontentSlashassetsSlashmoreinfoPeriodhtmlSlashDollarLeft_Curly_BracketpathRight_Curly_Bracket"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CompanionServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamCoreImplServletCompanionServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamCoreImplServletCompanionServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param detectDuplicate  (optional)
    * @return ComDayCqDamCoreImplServletCreateAssetServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamCoreImplServletCreateAssetServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, detectDuplicate: kotlin.Boolean) : ComDayCqDamCoreImplServletCreateAssetServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "detect_duplicate" to listOf("$detectDuplicate"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CreateAssetServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamCoreImplServletCreateAssetServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamCoreImplServletCreateAssetServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPeriodmimePeriodtypePeriodblacklist  (optional)
    * @param cqPerioddamPeriodemptyPeriodmime  (optional)
    * @return ComDayCqDamCoreImplServletDamContentDispositionFilterInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamCoreImplServletDamContentDispositionFilter(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPeriodmimePeriodtypePeriodblacklist: kotlin.Array<kotlin.String>, cqPerioddamPeriodemptyPeriodmime: kotlin.Boolean) : ComDayCqDamCoreImplServletDamContentDispositionFilterInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.mime.type.blacklist" to toMultiValue(cqPeriodmimePeriodtypePeriodblacklist.toList(), "multi"), "cq.dam.empty.mime" to listOf("$cqPerioddamPeriodemptyPeriodmime"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.DamContentDispositionFilter",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamCoreImplServletDamContentDispositionFilterInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamCoreImplServletDamContentDispositionFilterInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPerioddamPeriodcorePeriodguidlookupfilterPeriodenabled  (optional)
    * @return ComDayCqDamCoreImplServletGuidLookupFilterInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamCoreImplServletGuidLookupFilter(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPerioddamPeriodcorePeriodguidlookupfilterPeriodenabled: kotlin.Boolean) : ComDayCqDamCoreImplServletGuidLookupFilterInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.dam.core.guidlookupfilter.enabled" to listOf("$cqPerioddamPeriodcorePeriodguidlookupfilterPeriodenabled"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.GuidLookupFilter",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamCoreImplServletGuidLookupFilterInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamCoreImplServletGuidLookupFilterInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPerioddamPeriodsyncPeriodworkflowPeriodid  (optional)
    * @param cqPerioddamPeriodsyncPeriodfolderPeriodtypes  (optional)
    * @return ComDayCqDamCoreImplServletHealthCheckServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamCoreImplServletHealthCheckServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPerioddamPeriodsyncPeriodworkflowPeriodid: kotlin.String, cqPerioddamPeriodsyncPeriodfolderPeriodtypes: kotlin.Array<kotlin.String>) : ComDayCqDamCoreImplServletHealthCheckServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.dam.sync.workflow.id" to listOf("$cqPerioddamPeriodsyncPeriodworkflowPeriodid"), "cq.dam.sync.folder.types" to toMultiValue(cqPerioddamPeriodsyncPeriodfolderPeriodtypes.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.HealthCheckServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamCoreImplServletHealthCheckServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamCoreImplServletHealthCheckServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param slingPeriodservletPeriodresourceTypes  (optional)
    * @param slingPeriodservletPeriodmethods  (optional)
    * @param slingPeriodservletPeriodextensions  (optional)
    * @param slingPeriodservletPeriodselectors  (optional)
    * @return ComDayCqDamCoreImplServletMetadataGetServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamCoreImplServletMetadataGetServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, slingPeriodservletPeriodresourceTypes: kotlin.String, slingPeriodservletPeriodmethods: kotlin.String, slingPeriodservletPeriodextensions: kotlin.String, slingPeriodservletPeriodselectors: kotlin.String) : ComDayCqDamCoreImplServletMetadataGetServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "sling.servlet.resourceTypes" to listOf("$slingPeriodservletPeriodresourceTypes"), "sling.servlet.methods" to listOf("$slingPeriodservletPeriodmethods"), "sling.servlet.extensions" to listOf("$slingPeriodservletPeriodextensions"), "sling.servlet.selectors" to listOf("$slingPeriodservletPeriodselectors"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.MetadataGetServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamCoreImplServletMetadataGetServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamCoreImplServletMetadataGetServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPerioddamPerioddrmPeriodenable  (optional)
    * @return ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamCoreImplServletMultipleLicenseAcceptServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPerioddamPerioddrmPeriodenable: kotlin.Boolean) : ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.dam.drm.enable" to listOf("$cqPerioddamPerioddrmPeriodenable"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.MultipleLicenseAcceptServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param slingPeriodservletPeriodresourceTypes  (optional)
    * @param slingPeriodservletPeriodmethods  (optional)
    * @param slingPeriodservletPeriodselectors  (optional)
    * @param downloadPeriodconfig  (optional)
    * @param viewPeriodselector  (optional)
    * @param sendEmail  (optional)
    * @return ComDayCqDamCoreImplServletResourceCollectionServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamCoreImplServletResourceCollectionServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, slingPeriodservletPeriodresourceTypes: kotlin.Array<kotlin.String>, slingPeriodservletPeriodmethods: kotlin.String, slingPeriodservletPeriodselectors: kotlin.String, downloadPeriodconfig: kotlin.String, viewPeriodselector: kotlin.String, sendEmail: kotlin.Boolean) : ComDayCqDamCoreImplServletResourceCollectionServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "sling.servlet.resourceTypes" to toMultiValue(slingPeriodservletPeriodresourceTypes.toList(), "multi"), "sling.servlet.methods" to listOf("$slingPeriodservletPeriodmethods"), "sling.servlet.selectors" to listOf("$slingPeriodservletPeriodselectors"), "download.config" to listOf("$downloadPeriodconfig"), "view.selector" to listOf("$viewPeriodselector"), "send_email" to listOf("$sendEmail"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.ResourceCollectionServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamCoreImplServletResourceCollectionServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamCoreImplServletResourceCollectionServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param createPreviewEnabled  (optional)
    * @param updatePreviewEnabled  (optional)
    * @param queueSize  (optional)
    * @param folderPreviewRenditionRegex  (optional)
    * @return ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, createPreviewEnabled: kotlin.Boolean, updatePreviewEnabled: kotlin.Boolean, queueSize: kotlin.Int, folderPreviewRenditionRegex: kotlin.String) : ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "createPreviewEnabled" to listOf("$createPreviewEnabled"), "updatePreviewEnabled" to listOf("$updatePreviewEnabled"), "queueSize" to listOf("$queueSize"), "folderPreviewRenditionRegex" to listOf("$folderPreviewRenditionRegex"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.core.impl.ui.preview.FolderPreviewUpdaterImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPerioddamPeriodconfigPeriodunzipPeriodmaxuncompressedsize  (optional)
    * @param cqPerioddamPeriodconfigPeriodunzipPeriodencoding  (optional)
    * @return ComDayCqDamCoreImplUnzipUnzipConfigInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamCoreImplUnzipUnzipConfig(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPerioddamPeriodconfigPeriodunzipPeriodmaxuncompressedsize: kotlin.Int, cqPerioddamPeriodconfigPeriodunzipPeriodencoding: kotlin.String) : ComDayCqDamCoreImplUnzipUnzipConfigInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.dam.config.unzip.maxuncompressedsize" to listOf("$cqPerioddamPeriodconfigPeriodunzipPeriodmaxuncompressedsize"), "cq.dam.config.unzip.encoding" to listOf("$cqPerioddamPeriodconfigPeriodunzipPeriodencoding"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.core.impl.unzip.UnzipConfig",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamCoreImplUnzipUnzipConfigInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamCoreImplUnzipUnzipConfigInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param processPeriodlabel  (optional)
    * @param cqPerioddamPeriodenablePeriodsha1  (optional)
    * @return ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamCoreProcessExifToolExtractMetadataProcess(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, processPeriodlabel: kotlin.String, cqPerioddamPeriodenablePeriodsha1: kotlin.Boolean) : ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "process.label" to listOf("$processPeriodlabel"), "cq.dam.enable.sha1" to listOf("$cqPerioddamPeriodenablePeriodsha1"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.core.process.ExifToolExtractMetadataProcess",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param processPeriodlabel  (optional)
    * @param cqPerioddamPeriodenablePeriodsha1  (optional)
    * @return ComDayCqDamCoreProcessExtractMetadataProcessInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamCoreProcessExtractMetadataProcess(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, processPeriodlabel: kotlin.String, cqPerioddamPeriodenablePeriodsha1: kotlin.Boolean) : ComDayCqDamCoreProcessExtractMetadataProcessInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "process.label" to listOf("$processPeriodlabel"), "cq.dam.enable.sha1" to listOf("$cqPerioddamPeriodenablePeriodsha1"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.core.process.ExtractMetadataProcess",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamCoreProcessExtractMetadataProcessInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamCoreProcessExtractMetadataProcessInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param processPeriodlabel  (optional)
    * @param cqPerioddamPeriodenablePeriodsha1  (optional)
    * @param cqPerioddamPeriodmetadataPeriodxssprotectedPeriodproperties  (optional)
    * @return ComDayCqDamCoreProcessMetadataProcessorProcessInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamCoreProcessMetadataProcessorProcess(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, processPeriodlabel: kotlin.String, cqPerioddamPeriodenablePeriodsha1: kotlin.Boolean, cqPerioddamPeriodmetadataPeriodxssprotectedPeriodproperties: kotlin.Array<kotlin.String>) : ComDayCqDamCoreProcessMetadataProcessorProcessInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "process.label" to listOf("$processPeriodlabel"), "cq.dam.enable.sha1" to listOf("$cqPerioddamPeriodenablePeriodsha1"), "cq.dam.metadata.xssprotected.properties" to toMultiValue(cqPerioddamPeriodmetadataPeriodxssprotectedPeriodproperties.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.core.process.MetadataProcessorProcess",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamCoreProcessMetadataProcessorProcessInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamCoreProcessMetadataProcessorProcessInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param executablePeriodsearchpath  (optional)
    * @return ComDayCqDamHandlerFfmpegLocatorImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamHandlerFfmpegLocatorImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, executablePeriodsearchpath: kotlin.Array<kotlin.String>) : ComDayCqDamHandlerFfmpegLocatorImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "executable.searchpath" to toMultiValue(executablePeriodsearchpath.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.handler.ffmpeg.LocatorImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamHandlerFfmpegLocatorImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamHandlerFfmpegLocatorImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param eventPeriodfilter  (optional)
    * @param fontmgrPeriodsystemPeriodfontPerioddir  (optional)
    * @param fontmgrPeriodadobePeriodfontPerioddir  (optional)
    * @param fontmgrPeriodcustomerPeriodfontPerioddir  (optional)
    * @return ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, eventPeriodfilter: kotlin.String, fontmgrPeriodsystemPeriodfontPerioddir: kotlin.Array<kotlin.String>, fontmgrPeriodadobePeriodfontPerioddir: kotlin.String, fontmgrPeriodcustomerPeriodfontPerioddir: kotlin.String) : ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "event.filter" to listOf("$eventPeriodfilter"), "fontmgr.system.font.dir" to toMultiValue(fontmgrPeriodsystemPeriodfontPerioddir.toList(), "multi"), "fontmgr.adobe.font.dir" to listOf("$fontmgrPeriodadobePeriodfontPerioddir"), "fontmgr.customer.font.dir" to listOf("$fontmgrPeriodcustomerPeriodfontPerioddir"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.handler.gibson.fontmanager.impl.FontManagerServiceImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param rasterPeriodannotation  (optional)
    * @return ComDayCqDamHandlerStandardPdfPdfHandlerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamHandlerStandardPdfPdfHandler(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, rasterPeriodannotation: kotlin.Boolean) : ComDayCqDamHandlerStandardPdfPdfHandlerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "raster.annotation" to listOf("$rasterPeriodannotation"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.handler.standard.pdf.PdfHandler",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamHandlerStandardPdfPdfHandlerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamHandlerStandardPdfPdfHandlerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param rasterPeriodannotation  (optional)
    * @return ComDayCqDamHandlerStandardPsPostScriptHandlerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamHandlerStandardPsPostScriptHandler(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, rasterPeriodannotation: kotlin.Boolean) : ComDayCqDamHandlerStandardPsPostScriptHandlerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "raster.annotation" to listOf("$rasterPeriodannotation"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.handler.standard.ps.PostScriptHandler",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamHandlerStandardPsPostScriptHandlerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamHandlerStandardPsPostScriptHandlerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param largeFileThreshold  (optional)
    * @return ComDayCqDamHandlerStandardPsdPsdHandlerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamHandlerStandardPsdPsdHandler(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, largeFileThreshold: kotlin.Int) : ComDayCqDamHandlerStandardPsdPsdHandlerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "large_file_threshold" to listOf("$largeFileThreshold"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.handler.standard.psd.PsdHandler",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamHandlerStandardPsdPsdHandlerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamHandlerStandardPsdPsdHandlerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param enablePeriodmultisession  (optional)
    * @param idsPeriodccPeriodenable  (optional)
    * @param enablePeriodretry  (optional)
    * @param enablePeriodretryPeriodscripterror  (optional)
    * @param externalizerPerioddomainPeriodcqhost  (optional)
    * @param externalizerPerioddomainPeriodhttp  (optional)
    * @return ComDayCqDamIdsImplIDSJobProcessorInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamIdsImplIDSJobProcessor(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, enablePeriodmultisession: kotlin.Boolean, idsPeriodccPeriodenable: kotlin.Boolean, enablePeriodretry: kotlin.Boolean, enablePeriodretryPeriodscripterror: kotlin.Boolean, externalizerPerioddomainPeriodcqhost: kotlin.String, externalizerPerioddomainPeriodhttp: kotlin.String) : ComDayCqDamIdsImplIDSJobProcessorInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "enable.multisession" to listOf("$enablePeriodmultisession"), "ids.cc.enable" to listOf("$idsPeriodccPeriodenable"), "enable.retry" to listOf("$enablePeriodretry"), "enable.retry.scripterror" to listOf("$enablePeriodretryPeriodscripterror"), "externalizer.domain.cqhost" to listOf("$externalizerPerioddomainPeriodcqhost"), "externalizer.domain.http" to listOf("$externalizerPerioddomainPeriodhttp"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.ids.impl.IDSJobProcessor",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamIdsImplIDSJobProcessorInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamIdsImplIDSJobProcessorInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param maxPerioderrorsPeriodtoPeriodblacklist  (optional)
    * @param retryPeriodintervalPeriodtoPeriodwhitelist  (optional)
    * @param connectPeriodtimeout  (optional)
    * @param socketPeriodtimeout  (optional)
    * @param processPeriodlabel  (optional)
    * @param connectionPeriodusePeriodmax  (optional)
    * @return ComDayCqDamIdsImplIDSPoolManagerImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamIdsImplIDSPoolManagerImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, maxPerioderrorsPeriodtoPeriodblacklist: kotlin.Int, retryPeriodintervalPeriodtoPeriodwhitelist: kotlin.Int, connectPeriodtimeout: kotlin.Int, socketPeriodtimeout: kotlin.Int, processPeriodlabel: kotlin.String, connectionPeriodusePeriodmax: kotlin.Int) : ComDayCqDamIdsImplIDSPoolManagerImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "max.errors.to.blacklist" to listOf("$maxPerioderrorsPeriodtoPeriodblacklist"), "retry.interval.to.whitelist" to listOf("$retryPeriodintervalPeriodtoPeriodwhitelist"), "connect.timeout" to listOf("$connectPeriodtimeout"), "socket.timeout" to listOf("$socketPeriodtimeout"), "process.label" to listOf("$processPeriodlabel"), "connection.use.max" to listOf("$connectionPeriodusePeriodmax"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.ids.impl.IDSPoolManagerImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamIdsImplIDSPoolManagerImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamIdsImplIDSPoolManagerImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param processPeriodlabel  (optional)
    * @param extractPeriodpages  (optional)
    * @return ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamInddImplHandlerIndesignXMPHandler(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, processPeriodlabel: kotlin.String, extractPeriodpages: kotlin.Boolean) : ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "process.label" to listOf("$processPeriodlabel"), "extract.pages" to listOf("$extractPeriodpages"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.indd.impl.handler.IndesignXMPHandler",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param snippetcreationPeriodmaxcollections  (optional)
    * @return ComDayCqDamInddImplServletSnippetCreationServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamInddImplServletSnippetCreationServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, snippetcreationPeriodmaxcollections: kotlin.Int) : ComDayCqDamInddImplServletSnippetCreationServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "snippetcreation.maxcollections" to listOf("$snippetcreationPeriodmaxcollections"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.indd.impl.servlet.SnippetCreationServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamInddImplServletSnippetCreationServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamInddImplServletSnippetCreationServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param processPeriodlabel  (optional)
    * @param cqPerioddamPeriodinddPeriodpagesPeriodregex  (optional)
    * @param idsPeriodjobPerioddecoupled  (optional)
    * @param idsPeriodjobPeriodworkflowPeriodmodel  (optional)
    * @return ComDayCqDamInddProcessINDDMediaExtractProcessInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamInddProcessINDDMediaExtractProcess(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, processPeriodlabel: kotlin.String, cqPerioddamPeriodinddPeriodpagesPeriodregex: kotlin.String, idsPeriodjobPerioddecoupled: kotlin.Boolean, idsPeriodjobPeriodworkflowPeriodmodel: kotlin.String) : ComDayCqDamInddProcessINDDMediaExtractProcessInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "process.label" to listOf("$processPeriodlabel"), "cq.dam.indd.pages.regex" to listOf("$cqPerioddamPeriodinddPeriodpagesPeriodregex"), "ids.job.decoupled" to listOf("$idsPeriodjobPerioddecoupled"), "ids.job.workflow.model" to listOf("$idsPeriodjobPeriodworkflowPeriodmodel"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.indd.process.INDDMediaExtractProcess",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamInddProcessINDDMediaExtractProcessInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamInddProcessINDDMediaExtractProcessInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param batchPeriodcommitPeriodsize  (optional)
    * @return ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, batchPeriodcommitPeriodsize: kotlin.Int) : ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "batch.commit.size" to listOf("$batchPeriodcommitPeriodsize"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceDataHandlerImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param schedulerPeriodexpression  (optional)
    * @return ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamPerformanceInternalAssetPerformanceReportSyncJob(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, schedulerPeriodexpression: kotlin.String) : ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "scheduler.expression" to listOf("$schedulerPeriodexpression"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceReportSyncJob",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param deletePeriodzipPeriodfile  (optional)
    * @return ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, deletePeriodzipPeriodfile: kotlin.Boolean) : ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "delete.zip.file" to listOf("$deletePeriodzipPeriodfile"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.pim.impl.sourcing.upload.process.ProductAssetsUploadProcess",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPerioddamPeriods7damPerioddynamicmediaconfigeventlistenerPeriodenabled  (optional)
    * @return ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPerioddamPeriods7damPerioddynamicmediaconfigeventlistenerPeriodenabled: kotlin.Boolean) : ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.dam.s7dam.dynamicmediaconfigeventlistener.enabled" to listOf("$cqPerioddamPeriods7damPerioddynamicmediaconfigeventlistenerPeriodenabled"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.S7damDynamicMediaConfigEventListener",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param schedulerPeriodexpression  (optional)
    * @param schedulerPeriodconcurrent  (optional)
    * @return ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, schedulerPeriodexpression: kotlin.String, schedulerPeriodconcurrent: kotlin.Boolean) : ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "scheduler.expression" to listOf("$schedulerPeriodexpression"), "scheduler.concurrent" to listOf("$schedulerPeriodconcurrent"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.SiteCatalystReportRunner",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param slingPeriodpostPeriodoperation  (optional)
    * @param slingPeriodservletPeriodmethods  (optional)
    * @return ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamS7damCommonPostServletsSetCreateHandler(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, slingPeriodpostPeriodoperation: kotlin.String, slingPeriodservletPeriodmethods: kotlin.String) : ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "sling.post.operation" to listOf("$slingPeriodpostPeriodoperation"), "sling.servlet.methods" to listOf("$slingPeriodservletPeriodmethods"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetCreateHandler",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param slingPeriodpostPeriodoperation  (optional)
    * @param slingPeriodservletPeriodmethods  (optional)
    * @return ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamS7damCommonPostServletsSetModifyHandler(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, slingPeriodpostPeriodoperation: kotlin.String, slingPeriodservletPeriodmethods: kotlin.String) : ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "sling.post.operation" to listOf("$slingPeriodpostPeriodoperation"), "sling.servlet.methods" to listOf("$slingPeriodservletPeriodmethods"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetModifyHandler",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param processPeriodlabel  (optional)
    * @return ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, processPeriodlabel: kotlin.String) : ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "process.label" to listOf("$processPeriodlabel"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.s7dam.common.process.VideoThumbnailDownloadProcess",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPerioddamPeriods7damPerioddamchangeeventlistenerPeriodenabled  (optional)
    * @return ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamS7damCommonS7damDamChangeEventListener(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPerioddamPeriods7damPerioddamchangeeventlistenerPeriodenabled: kotlin.Boolean) : ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.dam.s7dam.damchangeeventlistener.enabled" to listOf("$cqPerioddamPeriods7damPerioddamchangeeventlistenerPeriodenabled"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.s7dam.common.S7damDamChangeEventListener",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param slingPeriodservletPeriodpaths  (optional)
    * @param slingPeriodservletPeriodmethods  (optional)
    * @return ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamS7damCommonServletsS7damProductInfoServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, slingPeriodservletPeriodpaths: kotlin.String, slingPeriodservletPeriodmethods: kotlin.String) : ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "sling.servlet.paths" to listOf("$slingPeriodservletPeriodpaths"), "sling.servlet.methods" to listOf("$slingPeriodservletPeriodmethods"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.s7dam.common.servlets.S7damProductInfoServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodminsizePeriodname  (optional)
    * @param cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodpartsizePeriodname  (optional)
    * @param cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodnumthreadPeriodname  (optional)
    * @param cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodreadtimeoutPeriodname  (optional)
    * @param cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodconnectiontimeoutPeriodname  (optional)
    * @param cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodmaxretrycountPeriodname  (optional)
    * @param cqPerioddamPeriods7damPeriodvideoproxyclientservicePerioduploadprogressPeriodintervalPeriodname  (optional)
    * @return ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodminsizePeriodname: kotlin.Int, cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodpartsizePeriodname: kotlin.Int, cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodnumthreadPeriodname: kotlin.Int, cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodreadtimeoutPeriodname: kotlin.Int, cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodconnectiontimeoutPeriodname: kotlin.Int, cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodmaxretrycountPeriodname: kotlin.Int, cqPerioddamPeriods7damPeriodvideoproxyclientservicePerioduploadprogressPeriodintervalPeriodname: kotlin.Int) : ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.dam.s7dam.videoproxyclientservice.multipartupload.minsize.name" to listOf("$cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodminsizePeriodname"), "cq.dam.s7dam.videoproxyclientservice.multipartupload.partsize.name" to listOf("$cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodpartsizePeriodname"), "cq.dam.s7dam.videoproxyclientservice.multipartupload.numthread.name" to listOf("$cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodnumthreadPeriodname"), "cq.dam.s7dam.videoproxyclientservice.http.readtimeout.name" to listOf("$cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodreadtimeoutPeriodname"), "cq.dam.s7dam.videoproxyclientservice.http.connectiontimeout.name" to listOf("$cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodconnectiontimeoutPeriodname"), "cq.dam.s7dam.videoproxyclientservice.http.maxretrycount.name" to listOf("$cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodmaxretrycountPeriodname"), "cq.dam.s7dam.videoproxyclientservice.uploadprogress.interval.name" to listOf("$cqPerioddamPeriods7damPeriodvideoproxyclientservicePerioduploadprogressPeriodintervalPeriodname"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.s7dam.common.video.impl.VideoProxyClientServiceImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPerioddamPeriodscene7PeriodapiclientPeriodrecordsperpagePeriodnofilterPeriodname  (optional)
    * @param cqPerioddamPeriodscene7PeriodapiclientPeriodrecordsperpagePeriodwithfilterPeriodname  (optional)
    * @return ComDayCqDamScene7ImplScene7APIClientImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamScene7ImplScene7APIClientImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPerioddamPeriodscene7PeriodapiclientPeriodrecordsperpagePeriodnofilterPeriodname: kotlin.Int, cqPerioddamPeriodscene7PeriodapiclientPeriodrecordsperpagePeriodwithfilterPeriodname: kotlin.Int) : ComDayCqDamScene7ImplScene7APIClientImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.dam.scene7.apiclient.recordsperpage.nofilter.name" to listOf("$cqPerioddamPeriodscene7PeriodapiclientPeriodrecordsperpagePeriodnofilterPeriodname"), "cq.dam.scene7.apiclient.recordsperpage.withfilter.name" to listOf("$cqPerioddamPeriodscene7PeriodapiclientPeriodrecordsperpagePeriodwithfilterPeriodname"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7APIClientImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamScene7ImplScene7APIClientImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamScene7ImplScene7APIClientImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPerioddamPeriodscene7PeriodassetmimetypeservicePeriodmapping  (optional)
    * @return ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPerioddamPeriodscene7PeriodassetmimetypeservicePeriodmapping: kotlin.Array<kotlin.String>) : ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.dam.scene7.assetmimetypeservice.mapping" to toMultiValue(cqPerioddamPeriodscene7PeriodassetmimetypeservicePeriodmapping.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7AssetMimeTypeServiceImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPerioddamPeriodscene7PeriodconfigurationeventlistenerPeriodenabled  (optional)
    * @return ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamScene7ImplScene7ConfigurationEventListener(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPerioddamPeriodscene7PeriodconfigurationeventlistenerPeriodenabled: kotlin.Boolean) : ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.dam.scene7.configurationeventlistener.enabled" to listOf("$cqPerioddamPeriodscene7PeriodconfigurationeventlistenerPeriodenabled"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7ConfigurationEventListener",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPerioddamPeriodscene7PerioddamchangeeventlistenerPeriodenabled  (optional)
    * @param cqPerioddamPeriodscene7PerioddamchangeeventlistenerPeriodobservedPeriodpaths  (optional)
    * @return ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamScene7ImplScene7DamChangeEventListener(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPerioddamPeriodscene7PerioddamchangeeventlistenerPeriodenabled: kotlin.Boolean, cqPerioddamPeriodscene7PerioddamchangeeventlistenerPeriodobservedPeriodpaths: kotlin.Array<kotlin.String>) : ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.dam.scene7.damchangeeventlistener.enabled" to listOf("$cqPerioddamPeriodscene7PerioddamchangeeventlistenerPeriodenabled"), "cq.dam.scene7.damchangeeventlistener.observed.paths" to toMultiValue(cqPerioddamPeriodscene7PerioddamchangeeventlistenerPeriodobservedPeriodpaths.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7DamChangeEventListener",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param scene7FlashTemplatesPeriodrti  (optional)
    * @param scene7FlashTemplatesPeriodrsi  (optional)
    * @param scene7FlashTemplatesPeriodrb  (optional)
    * @param scene7FlashTemplatesPeriodrurl  (optional)
    * @param scene7FlashTemplatePeriodurlFormatParameter  (optional)
    * @return ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamScene7ImplScene7FlashTemplatesServiceImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, scene7FlashTemplatesPeriodrti: kotlin.String, scene7FlashTemplatesPeriodrsi: kotlin.String, scene7FlashTemplatesPeriodrb: kotlin.String, scene7FlashTemplatesPeriodrurl: kotlin.String, scene7FlashTemplatePeriodurlFormatParameter: kotlin.String) : ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "scene7FlashTemplates.rti" to listOf("$scene7FlashTemplatesPeriodrti"), "scene7FlashTemplates.rsi" to listOf("$scene7FlashTemplatesPeriodrsi"), "scene7FlashTemplates.rb" to listOf("$scene7FlashTemplatesPeriodrb"), "scene7FlashTemplates.rurl" to listOf("$scene7FlashTemplatesPeriodrurl"), "scene7FlashTemplate.urlFormatParameter" to listOf("$scene7FlashTemplatePeriodurlFormatParameter"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7FlashTemplatesServiceImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPerioddamPeriodscene7PerioduploadservicePeriodactivejobtimeoutPeriodlabel  (optional)
    * @param cqPerioddamPeriodscene7PerioduploadservicePeriodconnectionmaxperroutePeriodlabel  (optional)
    * @return ComDayCqDamScene7ImplScene7UploadServiceImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamScene7ImplScene7UploadServiceImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPerioddamPeriodscene7PerioduploadservicePeriodactivejobtimeoutPeriodlabel: kotlin.Int, cqPerioddamPeriodscene7PerioduploadservicePeriodconnectionmaxperroutePeriodlabel: kotlin.Int) : ComDayCqDamScene7ImplScene7UploadServiceImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.dam.scene7.uploadservice.activejobtimeout.label" to listOf("$cqPerioddamPeriodscene7PerioduploadservicePeriodactivejobtimeoutPeriodlabel"), "cq.dam.scene7.uploadservice.connectionmaxperroute.label" to listOf("$cqPerioddamPeriodscene7PerioduploadservicePeriodconnectionmaxperroutePeriodlabel"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7UploadServiceImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamScene7ImplScene7UploadServiceImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamScene7ImplScene7UploadServiceImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param getCacheExpirationUnit  (optional)
    * @param getCacheExpirationValue  (optional)
    * @return ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, getCacheExpirationUnit: kotlin.String, getCacheExpirationValue: kotlin.Int) : ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "getCacheExpirationUnit" to listOf("$getCacheExpirationUnit"), "getCacheExpirationValue" to listOf("$getCacheExpirationValue"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.stock.integration.impl.cache.StockCacheConfigurationServiceImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param name  (optional)
    * @param locale  (optional)
    * @param imsConfig  (optional)
    * @return ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamStockIntegrationImplConfigurationStockConfiguration(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, name: kotlin.String, locale: kotlin.String, imsConfig: kotlin.String) : ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "name" to listOf("$name"), "locale" to listOf("$locale"), "imsConfig" to listOf("$imsConfig"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.stock.integration.impl.configuration.StockConfigurationImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param enabled  (optional)
    * @return ComDayCqDamVideoImplServletVideoTestServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqDamVideoImplServletVideoTestServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, enabled: kotlin.Boolean) : ComDayCqDamVideoImplServletVideoTestServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "enabled" to listOf("$enabled"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.dam.video.impl.servlet.VideoTestServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqDamVideoImplServletVideoTestServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqDamVideoImplServletVideoTestServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param maxWidth  (optional)
    * @param maxHeight  (optional)
    * @return ComDayCqExtwidgetServletsImageSpriteServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqExtwidgetServletsImageSpriteServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, maxWidth: kotlin.Int, maxHeight: kotlin.Int) : ComDayCqExtwidgetServletsImageSpriteServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "maxWidth" to listOf("$maxWidth"), "maxHeight" to listOf("$maxHeight"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.extwidget.servlets.ImageSpriteServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqExtwidgetServletsImageSpriteServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqExtwidgetServletsImageSpriteServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param fontpath  (optional)
    * @param oversamplingFactor  (optional)
    * @return ComDayCqImageInternalFontFontHelperInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqImageInternalFontFontHelper(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, fontpath: kotlin.Array<kotlin.String>, oversamplingFactor: kotlin.Int) : ComDayCqImageInternalFontFontHelperInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "fontpath" to toMultiValue(fontpath.toList(), "multi"), "oversamplingFactor" to listOf("$oversamplingFactor"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.image.internal.font.FontHelper",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqImageInternalFontFontHelperInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqImageInternalFontFontHelperInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param clusterPeriodlevelPeriodenable  (optional)
    * @param clusterPeriodmasterPeriodlevel  (optional)
    * @param clusterPeriodslavePeriodlevel  (optional)
    * @return ComDayCqJcrclustersupportClusterStartLevelControllerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqJcrclustersupportClusterStartLevelController(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, clusterPeriodlevelPeriodenable: kotlin.Boolean, clusterPeriodmasterPeriodlevel: kotlin.Int, clusterPeriodslavePeriodlevel: kotlin.Int) : ComDayCqJcrclustersupportClusterStartLevelControllerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cluster.level.enable" to listOf("$clusterPeriodlevelPeriodenable"), "cluster.master.level" to listOf("$clusterPeriodmasterPeriodlevel"), "cluster.slave.level" to listOf("$clusterPeriodslavePeriodlevel"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.jcrclustersupport.ClusterStartLevelController",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqJcrclustersupportClusterStartLevelControllerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqJcrclustersupportClusterStartLevelControllerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param smtpPeriodhost  (optional)
    * @param smtpPeriodport  (optional)
    * @param smtpPerioduser  (optional)
    * @param smtpPeriodpassword  (optional)
    * @param fromPeriodaddress  (optional)
    * @param smtpPeriodssl  (optional)
    * @param smtpPeriodstarttls  (optional)
    * @param debugPeriodemail  (optional)
    * @return ComDayCqMailerDefaultMailServiceInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqMailerDefaultMailService(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, smtpPeriodhost: kotlin.String, smtpPeriodport: kotlin.Int, smtpPerioduser: kotlin.String, smtpPeriodpassword: kotlin.String, fromPeriodaddress: kotlin.String, smtpPeriodssl: kotlin.Boolean, smtpPeriodstarttls: kotlin.Boolean, debugPeriodemail: kotlin.Boolean) : ComDayCqMailerDefaultMailServiceInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "smtp.host" to listOf("$smtpPeriodhost"), "smtp.port" to listOf("$smtpPeriodport"), "smtp.user" to listOf("$smtpPerioduser"), "smtp.password" to listOf("$smtpPeriodpassword"), "from.address" to listOf("$fromPeriodaddress"), "smtp.ssl" to listOf("$smtpPeriodssl"), "smtp.starttls" to listOf("$smtpPeriodstarttls"), "debug.email" to listOf("$debugPeriodemail"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.mailer.DefaultMailService",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqMailerDefaultMailServiceInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqMailerDefaultMailServiceInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param maxPeriodrecipientPeriodcount  (optional)
    * @return ComDayCqMailerImplCqMailingServiceInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqMailerImplCqMailingService(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, maxPeriodrecipientPeriodcount: kotlin.String) : ComDayCqMailerImplCqMailingServiceInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "max.recipient.count" to listOf("$maxPeriodrecipientPeriodcount"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.mailer.impl.CqMailingService",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqMailerImplCqMailingServiceInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqMailerImplCqMailingServiceInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param mailerPeriodemailPeriodcharset  (optional)
    * @return ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqMailerImplEmailCqEmailTemplateFactory(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, mailerPeriodemailPeriodcharset: kotlin.String) : ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "mailer.email.charset" to listOf("$mailerPeriodemailPeriodcharset"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.mailer.impl.email.CqEmailTemplateFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param mailerPeriodemailPeriodembed  (optional)
    * @param mailerPeriodemailPeriodcharset  (optional)
    * @param mailerPeriodemailPeriodretrieverUserID  (optional)
    * @param mailerPeriodemailPeriodretrieverUserPWD  (optional)
    * @return ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqMailerImplEmailCqRetrieverTemplateFactory(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, mailerPeriodemailPeriodembed: kotlin.Boolean, mailerPeriodemailPeriodcharset: kotlin.String, mailerPeriodemailPeriodretrieverUserID: kotlin.String, mailerPeriodemailPeriodretrieverUserPWD: kotlin.String) : ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "mailer.email.embed" to listOf("$mailerPeriodemailPeriodembed"), "mailer.email.charset" to listOf("$mailerPeriodemailPeriodcharset"), "mailer.email.retrieverUserID" to listOf("$mailerPeriodemailPeriodretrieverUserID"), "mailer.email.retrieverUserPWD" to listOf("$mailerPeriodemailPeriodretrieverUserPWD"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.mailer.impl.email.CqRetrieverTemplateFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param aemPeriodmcmPeriodcampaignPeriodformConstraints  (optional)
    * @param aemPeriodmcmPeriodcampaignPeriodpublicUrl  (optional)
    * @param aemPeriodmcmPeriodcampaignPeriodrelaxedSSL  (optional)
    * @return ComDayCqMcmCampaignImplIntegrationConfigImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqMcmCampaignImplIntegrationConfigImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, aemPeriodmcmPeriodcampaignPeriodformConstraints: kotlin.Array<kotlin.String>, aemPeriodmcmPeriodcampaignPeriodpublicUrl: kotlin.String, aemPeriodmcmPeriodcampaignPeriodrelaxedSSL: kotlin.Boolean) : ComDayCqMcmCampaignImplIntegrationConfigImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "aem.mcm.campaign.formConstraints" to toMultiValue(aemPeriodmcmPeriodcampaignPeriodformConstraints.toList(), "multi"), "aem.mcm.campaign.publicUrl" to listOf("$aemPeriodmcmPeriodcampaignPeriodpublicUrl"), "aem.mcm.campaign.relaxedSSL" to listOf("$aemPeriodmcmPeriodcampaignPeriodrelaxedSSL"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.mcm.campaign.impl.IntegrationConfigImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqMcmCampaignImplIntegrationConfigImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqMcmCampaignImplIntegrationConfigImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param servicePeriodranking  (optional)
    * @param tagpattern  (optional)
    * @return ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqMcmCampaignImporterPersonalizedTextHandlerFactory(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, servicePeriodranking: kotlin.Int, tagpattern: kotlin.String) : ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "service.ranking" to listOf("$servicePeriodranking"), "tagpattern" to listOf("$tagpattern"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.mcm.campaign.importer.PersonalizedTextHandlerFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param fromPeriodaddress  (optional)
    * @param senderPeriodhost  (optional)
    * @param maxPeriodbouncePeriodcount  (optional)
    * @return ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqMcmCoreNewsletterNewsletterEmailServiceImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, fromPeriodaddress: kotlin.String, senderPeriodhost: kotlin.String, maxPeriodbouncePeriodcount: kotlin.String) : ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "from.address" to listOf("$fromPeriodaddress"), "sender.host" to listOf("$senderPeriodhost"), "max.bounce.count" to listOf("$maxPeriodbouncePeriodcount"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.mcm.core.newsletter.NewsletterEmailServiceImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param experiencePeriodindirection  (optional)
    * @param touchpointPeriodindirection  (optional)
    * @return ComDayCqMcmImplMCMConfigurationInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqMcmImplMCMConfiguration(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, experiencePeriodindirection: kotlin.Array<kotlin.String>, touchpointPeriodindirection: kotlin.Array<kotlin.String>) : ComDayCqMcmImplMCMConfigurationInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "experience.indirection" to toMultiValue(experiencePeriodindirection.toList(), "multi"), "touchpoint.indirection" to toMultiValue(touchpointPeriodindirection.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.mcm.impl.MCMConfiguration",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqMcmImplMCMConfigurationInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqMcmImplMCMConfigurationInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param servicePeriodranking  (optional)
    * @param tagpattern  (optional)
    * @param componentPeriodresourceType  (optional)
    * @return ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, servicePeriodranking: kotlin.Int, tagpattern: kotlin.String, componentPeriodresourceType: kotlin.String) : ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "service.ranking" to listOf("$servicePeriodranking"), "tagpattern" to listOf("$tagpattern"), "component.resourceType" to listOf("$componentPeriodresourceType"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.ClickThroughComponentTagHandlerFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param servicePeriodranking  (optional)
    * @param tagpattern  (optional)
    * @param componentPeriodresourceType  (optional)
    * @return ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, servicePeriodranking: kotlin.Int, tagpattern: kotlin.String, componentPeriodresourceType: kotlin.String) : ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "service.ranking" to listOf("$servicePeriodranking"), "tagpattern" to listOf("$tagpattern"), "component.resourceType" to listOf("$componentPeriodresourceType"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.GraphicalClickThroughComponentTagHandlerFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param servicePeriodranking  (optional)
    * @param tagpattern  (optional)
    * @return ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, servicePeriodranking: kotlin.Int, tagpattern: kotlin.String) : ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "service.ranking" to listOf("$servicePeriodranking"), "tagpattern" to listOf("$tagpattern"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.LeadFormCTAComponentTagHandlerFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param servicePeriodranking  (optional)
    * @param tagpattern  (optional)
    * @return ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, servicePeriodranking: kotlin.Int, tagpattern: kotlin.String) : ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "service.ranking" to listOf("$servicePeriodranking"), "tagpattern" to listOf("$tagpattern"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.MBoxExperienceTagHandlerFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param servicePeriodranking  (optional)
    * @param tagpattern  (optional)
    * @param componentPeriodresourceType  (optional)
    * @return ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, servicePeriodranking: kotlin.Int, tagpattern: kotlin.String, componentPeriodresourceType: kotlin.String) : ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "service.ranking" to listOf("$servicePeriodranking"), "tagpattern" to listOf("$tagpattern"), "component.resourceType" to listOf("$componentPeriodresourceType"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.TargetComponentTagHandlerFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param eventPeriodfilter  (optional)
    * @return ComDayCqNotificationImplNotificationServiceImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqNotificationImplNotificationServiceImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, eventPeriodfilter: kotlin.String) : ComDayCqNotificationImplNotificationServiceImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "event.filter" to listOf("$eventPeriodfilter"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.notification.impl.NotificationServiceImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqNotificationImplNotificationServiceImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqNotificationImplNotificationServiceImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param forcelocation  (optional)
    * @return ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqPersonalizationImplServletsTargetingConfigurationServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, forcelocation: kotlin.Boolean) : ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "forcelocation" to listOf("$forcelocation"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.personalization.impl.servlets.TargetingConfigurationServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param id  (optional)
    * @param enabled  (optional)
    * @param reference  (optional)
    * @param interval  (optional)
    * @param expression  (optional)
    * @param source  (optional)
    * @param target  (optional)
    * @param login  (optional)
    * @param password  (optional)
    * @return ComDayCqPollingImporterImplManagedPollConfigImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqPollingImporterImplManagedPollConfigImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, id: kotlin.String, enabled: kotlin.Boolean, reference: kotlin.Boolean, interval: kotlin.Int, expression: kotlin.String, source: kotlin.String, target: kotlin.String, login: kotlin.String, password: kotlin.String) : ComDayCqPollingImporterImplManagedPollConfigImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "id" to listOf("$id"), "enabled" to listOf("$enabled"), "reference" to listOf("$reference"), "interval" to listOf("$interval"), "expression" to listOf("$expression"), "source" to listOf("$source"), "target" to listOf("$target"), "login" to listOf("$login"), "password" to listOf("$password"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollConfigImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqPollingImporterImplManagedPollConfigImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqPollingImporterImplManagedPollConfigImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param importerPerioduser  (optional)
    * @return ComDayCqPollingImporterImplManagedPollingImporterImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqPollingImporterImplManagedPollingImporterImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, importerPerioduser: kotlin.String) : ComDayCqPollingImporterImplManagedPollingImporterImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "importer.user" to listOf("$importerPerioduser"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollingImporterImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqPollingImporterImplManagedPollingImporterImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqPollingImporterImplManagedPollingImporterImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param importerPeriodminPeriodinterval  (optional)
    * @param importerPerioduser  (optional)
    * @param excludePeriodpaths  (optional)
    * @param includePeriodpaths  (optional)
    * @return ComDayCqPollingImporterImplPollingImporterImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqPollingImporterImplPollingImporterImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, importerPeriodminPeriodinterval: kotlin.Int, importerPerioduser: kotlin.String, excludePeriodpaths: kotlin.Array<kotlin.String>, includePeriodpaths: kotlin.Array<kotlin.String>) : ComDayCqPollingImporterImplPollingImporterImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "importer.min.interval" to listOf("$importerPeriodminPeriodinterval"), "importer.user" to listOf("$importerPerioduser"), "exclude.paths" to toMultiValue(excludePeriodpaths.toList(), "multi"), "include.paths" to toMultiValue(includePeriodpaths.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.polling.importer.impl.PollingImporterImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqPollingImporterImplPollingImporterImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqPollingImporterImplPollingImporterImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param servicePeriodranking  (optional)
    * @return ComDayCqReplicationAuditReplicationEventListenerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqReplicationAuditReplicationEventListener(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, servicePeriodranking: kotlin.Int) : ComDayCqReplicationAuditReplicationEventListenerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "service.ranking" to listOf("$servicePeriodranking"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.replication.audit.ReplicationEventListener",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqReplicationAuditReplicationEventListenerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqReplicationAuditReplicationEventListenerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param host  (optional)
    * @param port  (optional)
    * @return ComDayCqReplicationContentStaticContentBuilderInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqReplicationContentStaticContentBuilder(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, host: kotlin.String, port: kotlin.Int) : ComDayCqReplicationContentStaticContentBuilderInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "host" to listOf("$host"), "port" to listOf("$port"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.replication.content.StaticContentBuilder",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqReplicationContentStaticContentBuilderInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqReplicationContentStaticContentBuilderInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param jobPeriodtopics  (optional)
    * @param serviceUserPeriodtarget  (optional)
    * @param agentProviderPeriodtarget  (optional)
    * @return ComDayCqReplicationImplAgentManagerImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqReplicationImplAgentManagerImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, jobPeriodtopics: kotlin.String, serviceUserPeriodtarget: kotlin.String, agentProviderPeriodtarget: kotlin.String) : ComDayCqReplicationImplAgentManagerImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "job.topics" to listOf("$jobPeriodtopics"), "serviceUser.target" to listOf("$serviceUserPeriodtarget"), "agentProvider.target" to listOf("$agentProviderPeriodtarget"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.replication.impl.AgentManagerImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqReplicationImplAgentManagerImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqReplicationImplAgentManagerImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param binaryPeriodthreshold  (optional)
    * @return ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqReplicationImplContentDurboBinaryLessContentBuilder(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, binaryPeriodthreshold: kotlin.Int) : ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "binary.threshold" to listOf("$binaryPeriodthreshold"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.replication.impl.content.durbo.BinaryLessContentBuilder",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param preservePeriodhierarchyPeriodnodes  (optional)
    * @param ignorePeriodversioning  (optional)
    * @param importPeriodacl  (optional)
    * @param savePeriodthreshold  (optional)
    * @param preservePerioduserPeriodpaths  (optional)
    * @param preservePerioduuid  (optional)
    * @param preservePerioduuidPeriodnodetypes  (optional)
    * @param preservePerioduuidPeriodsubtrees  (optional)
    * @param autoPeriodcommit  (optional)
    * @return ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqReplicationImplContentDurboDurboImportConfigurationProv(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, preservePeriodhierarchyPeriodnodes: kotlin.Boolean, ignorePeriodversioning: kotlin.Boolean, importPeriodacl: kotlin.Boolean, savePeriodthreshold: kotlin.Int, preservePerioduserPeriodpaths: kotlin.Boolean, preservePerioduuid: kotlin.Boolean, preservePerioduuidPeriodnodetypes: kotlin.Array<kotlin.String>, preservePerioduuidPeriodsubtrees: kotlin.Array<kotlin.String>, autoPeriodcommit: kotlin.Boolean) : ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "preserve.hierarchy.nodes" to listOf("$preservePeriodhierarchyPeriodnodes"), "ignore.versioning" to listOf("$ignorePeriodversioning"), "import.acl" to listOf("$importPeriodacl"), "save.threshold" to listOf("$savePeriodthreshold"), "preserve.user.paths" to listOf("$preservePerioduserPeriodpaths"), "preserve.uuid" to listOf("$preservePerioduuid"), "preserve.uuid.nodetypes" to toMultiValue(preservePerioduuidPeriodnodetypes.toList(), "multi"), "preserve.uuid.subtrees" to toMultiValue(preservePerioduuidPeriodsubtrees.toList(), "multi"), "auto.commit" to listOf("$autoPeriodcommit"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.replication.impl.content.durbo.DurboImportConfigurationProviderService",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param replicationPeriodcontentPerioduseFileStorage  (optional)
    * @param replicationPeriodcontentPeriodmaxCommitAttempts  (optional)
    * @return ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqReplicationImplReplicationContentFactoryProviderImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, replicationPeriodcontentPerioduseFileStorage: kotlin.Boolean, replicationPeriodcontentPeriodmaxCommitAttempts: kotlin.Int) : ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "replication.content.useFileStorage" to listOf("$replicationPeriodcontentPerioduseFileStorage"), "replication.content.maxCommitAttempts" to listOf("$replicationPeriodcontentPeriodmaxCommitAttempts"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.replication.impl.ReplicationContentFactoryProviderImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param receiverPeriodtmpfilePeriodthreshold  (optional)
    * @param receiverPeriodpackagesPeriodusePeriodinstall  (optional)
    * @return ComDayCqReplicationImplReplicationReceiverImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqReplicationImplReplicationReceiverImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, receiverPeriodtmpfilePeriodthreshold: kotlin.Int, receiverPeriodpackagesPeriodusePeriodinstall: kotlin.Boolean) : ComDayCqReplicationImplReplicationReceiverImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "receiver.tmpfile.threshold" to listOf("$receiverPeriodtmpfilePeriodthreshold"), "receiver.packages.use.install" to listOf("$receiverPeriodpackagesPeriodusePeriodinstall"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.replication.impl.ReplicationReceiverImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqReplicationImplReplicationReceiverImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqReplicationImplReplicationReceiverImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param distributeEvents  (optional)
    * @return ComDayCqReplicationImplReplicatorImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqReplicationImplReplicatorImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, distributeEvents: kotlin.Boolean) : ComDayCqReplicationImplReplicatorImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "distribute_events" to listOf("$distributeEvents"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.replication.impl.ReplicatorImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqReplicationImplReplicatorImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqReplicationImplReplicatorImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param schedulerPeriodperiod  (optional)
    * @return ComDayCqReplicationImplReverseReplicatorInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqReplicationImplReverseReplicator(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, schedulerPeriodperiod: kotlin.Int) : ComDayCqReplicationImplReverseReplicatorInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "scheduler.period" to listOf("$schedulerPeriodperiod"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.replication.impl.ReverseReplicator",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqReplicationImplReverseReplicatorInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqReplicationImplReverseReplicatorInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param disabledPeriodcipherPeriodsuites  (optional)
    * @param enabledPeriodcipherPeriodsuites  (optional)
    * @return ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqReplicationImplTransportBinaryLessTransportHandler(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, disabledPeriodcipherPeriodsuites: kotlin.Array<kotlin.String>, enabledPeriodcipherPeriodsuites: kotlin.Array<kotlin.String>) : ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "disabled.cipher.suites" to toMultiValue(disabledPeriodcipherPeriodsuites.toList(), "multi"), "enabled.cipher.suites" to toMultiValue(enabledPeriodcipherPeriodsuites.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.replication.impl.transport.BinaryLessTransportHandler",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param disabledPeriodcipherPeriodsuites  (optional)
    * @param enabledPeriodcipherPeriodsuites  (optional)
    * @return ComDayCqReplicationImplTransportHttpInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqReplicationImplTransportHttp(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, disabledPeriodcipherPeriodsuites: kotlin.Array<kotlin.String>, enabledPeriodcipherPeriodsuites: kotlin.Array<kotlin.String>) : ComDayCqReplicationImplTransportHttpInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "disabled.cipher.suites" to toMultiValue(disabledPeriodcipherPeriodsuites.toList(), "multi"), "enabled.cipher.suites" to toMultiValue(enabledPeriodcipherPeriodsuites.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.replication.impl.transport.Http",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqReplicationImplTransportHttpInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqReplicationImplTransportHttpInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param repcachePeriodenable  (optional)
    * @param repcachePeriodttl  (optional)
    * @param repcachePeriodmax  (optional)
    * @return ComDayCqReportingImplCacheCacheImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqReportingImplCacheCacheImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, repcachePeriodenable: kotlin.Boolean, repcachePeriodttl: kotlin.Int, repcachePeriodmax: kotlin.Int) : ComDayCqReportingImplCacheCacheImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "repcache.enable" to listOf("$repcachePeriodenable"), "repcache.ttl" to listOf("$repcachePeriodttl"), "repcache.max" to listOf("$repcachePeriodmax"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.reporting.impl.cache.CacheImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqReportingImplCacheCacheImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqReportingImplCacheCacheImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param repconfPeriodtimezone  (optional)
    * @param repconfPeriodlocale  (optional)
    * @param repconfPeriodsnapshots  (optional)
    * @param repconfPeriodrepdir  (optional)
    * @param repconfPeriodhourofday  (optional)
    * @param repconfPeriodminofhour  (optional)
    * @param repconfPeriodmaxrows  (optional)
    * @param repconfPeriodfakedata  (optional)
    * @param repconfPeriodsnapshotuser  (optional)
    * @param repconfPeriodenforcesnapshotuser  (optional)
    * @return ComDayCqReportingImplConfigServiceImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqReportingImplConfigServiceImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, repconfPeriodtimezone: kotlin.String, repconfPeriodlocale: kotlin.String, repconfPeriodsnapshots: kotlin.String, repconfPeriodrepdir: kotlin.String, repconfPeriodhourofday: kotlin.Int, repconfPeriodminofhour: kotlin.Int, repconfPeriodmaxrows: kotlin.Int, repconfPeriodfakedata: kotlin.Boolean, repconfPeriodsnapshotuser: kotlin.String, repconfPeriodenforcesnapshotuser: kotlin.Boolean) : ComDayCqReportingImplConfigServiceImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "repconf.timezone" to listOf("$repconfPeriodtimezone"), "repconf.locale" to listOf("$repconfPeriodlocale"), "repconf.snapshots" to listOf("$repconfPeriodsnapshots"), "repconf.repdir" to listOf("$repconfPeriodrepdir"), "repconf.hourofday" to listOf("$repconfPeriodhourofday"), "repconf.minofhour" to listOf("$repconfPeriodminofhour"), "repconf.maxrows" to listOf("$repconfPeriodmaxrows"), "repconf.fakedata" to listOf("$repconfPeriodfakedata"), "repconf.snapshotuser" to listOf("$repconfPeriodsnapshotuser"), "repconf.enforcesnapshotuser" to listOf("$repconfPeriodenforcesnapshotuser"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.reporting.impl.ConfigServiceImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqReportingImplConfigServiceImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqReportingImplConfigServiceImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param requestPeriodlogPeriodoutput  (optional)
    * @return ComDayCqReportingImplRLogAnalyzerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqReportingImplRLogAnalyzer(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, requestPeriodlogPeriodoutput: kotlin.String) : ComDayCqReportingImplRLogAnalyzerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "request.log.output" to listOf("$requestPeriodlogPeriodoutput"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.reporting.impl.RLogAnalyzer",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqReportingImplRLogAnalyzerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqReportingImplRLogAnalyzerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param schedulerPeriodperiod  (optional)
    * @param schedulerPeriodconcurrent  (optional)
    * @param servicePeriodbadLinkToleranceInterval  (optional)
    * @param servicePeriodcheckOverridePatterns  (optional)
    * @param servicePeriodcacheBrokenInternalLinks  (optional)
    * @param servicePeriodspecialLinkPrefix  (optional)
    * @param servicePeriodspecialLinkPatterns  (optional)
    * @return ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqRewriterLinkcheckerImplLinkCheckerImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, schedulerPeriodperiod: kotlin.Int, schedulerPeriodconcurrent: kotlin.Boolean, servicePeriodbadLinkToleranceInterval: kotlin.Int, servicePeriodcheckOverridePatterns: kotlin.Array<kotlin.String>, servicePeriodcacheBrokenInternalLinks: kotlin.Boolean, servicePeriodspecialLinkPrefix: kotlin.Array<kotlin.String>, servicePeriodspecialLinkPatterns: kotlin.Array<kotlin.String>) : ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "scheduler.period" to listOf("$schedulerPeriodperiod"), "scheduler.concurrent" to listOf("$schedulerPeriodconcurrent"), "service.bad_link_tolerance_interval" to listOf("$servicePeriodbadLinkToleranceInterval"), "service.check_override_patterns" to toMultiValue(servicePeriodcheckOverridePatterns.toList(), "multi"), "service.cache_broken_internal_links" to listOf("$servicePeriodcacheBrokenInternalLinks"), "service.special_link_prefix" to toMultiValue(servicePeriodspecialLinkPrefix.toList(), "multi"), "service.special_link_patterns" to toMultiValue(servicePeriodspecialLinkPatterns.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param schedulerPeriodperiod  (optional)
    * @param schedulerPeriodconcurrent  (optional)
    * @param goodLinkTestInterval  (optional)
    * @param badLinkTestInterval  (optional)
    * @param linkUnusedInterval  (optional)
    * @param connectionPeriodtimeout  (optional)
    * @return ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqRewriterLinkcheckerImplLinkCheckerTask(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, schedulerPeriodperiod: kotlin.Int, schedulerPeriodconcurrent: kotlin.Boolean, goodLinkTestInterval: kotlin.Int, badLinkTestInterval: kotlin.Int, linkUnusedInterval: kotlin.Int, connectionPeriodtimeout: kotlin.Int) : ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "scheduler.period" to listOf("$schedulerPeriodperiod"), "scheduler.concurrent" to listOf("$schedulerPeriodconcurrent"), "good_link_test_interval" to listOf("$goodLinkTestInterval"), "bad_link_test_interval" to listOf("$badLinkTestInterval"), "link_unused_interval" to listOf("$linkUnusedInterval"), "connection.timeout" to listOf("$connectionPeriodtimeout"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTask",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param linkcheckertransformerPerioddisableRewriting  (optional)
    * @param linkcheckertransformerPerioddisableChecking  (optional)
    * @param linkcheckertransformerPeriodmapCacheSize  (optional)
    * @param linkcheckertransformerPeriodstrictExtensionCheck  (optional)
    * @param linkcheckertransformerPeriodstripHtmltExtension  (optional)
    * @param linkcheckertransformerPeriodrewriteElements  (optional)
    * @param linkcheckertransformerPeriodstripExtensionPathBlacklist  (optional)
    * @return ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, linkcheckertransformerPerioddisableRewriting: kotlin.Boolean, linkcheckertransformerPerioddisableChecking: kotlin.Boolean, linkcheckertransformerPeriodmapCacheSize: kotlin.Int, linkcheckertransformerPeriodstrictExtensionCheck: kotlin.Boolean, linkcheckertransformerPeriodstripHtmltExtension: kotlin.Boolean, linkcheckertransformerPeriodrewriteElements: kotlin.Array<kotlin.String>, linkcheckertransformerPeriodstripExtensionPathBlacklist: kotlin.Array<kotlin.String>) : ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "linkcheckertransformer.disableRewriting" to listOf("$linkcheckertransformerPerioddisableRewriting"), "linkcheckertransformer.disableChecking" to listOf("$linkcheckertransformerPerioddisableChecking"), "linkcheckertransformer.mapCacheSize" to listOf("$linkcheckertransformerPeriodmapCacheSize"), "linkcheckertransformer.strictExtensionCheck" to listOf("$linkcheckertransformerPeriodstrictExtensionCheck"), "linkcheckertransformer.stripHtmltExtension" to listOf("$linkcheckertransformerPeriodstripHtmltExtension"), "linkcheckertransformer.rewriteElements" to toMultiValue(linkcheckertransformerPeriodrewriteElements.toList(), "multi"), "linkcheckertransformer.stripExtensionPathBlacklist" to toMultiValue(linkcheckertransformerPeriodstripExtensionPathBlacklist.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTransformerFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param servicePeriodmaxLinksPerHost  (optional)
    * @param servicePeriodsaveExternalLinkReferences  (optional)
    * @return ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqRewriterLinkcheckerImplLinkInfoStorageImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, servicePeriodmaxLinksPerHost: kotlin.Int, servicePeriodsaveExternalLinkReferences: kotlin.Boolean) : ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "service.max_links_per_host" to listOf("$servicePeriodmaxLinksPerHost"), "service.save_external_link_references" to listOf("$servicePeriodsaveExternalLinkReferences"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkInfoStorageImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param htmlparserPeriodprocessTags  (optional)
    * @param htmlparserPeriodpreserveCamelCase  (optional)
    * @return ComDayCqRewriterProcessorImplHtmlParserFactoryInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqRewriterProcessorImplHtmlParserFactory(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, htmlparserPeriodprocessTags: kotlin.Array<kotlin.String>, htmlparserPeriodpreserveCamelCase: kotlin.Boolean) : ComDayCqRewriterProcessorImplHtmlParserFactoryInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "htmlparser.processTags" to toMultiValue(htmlparserPeriodprocessTags.toList(), "multi"), "htmlparser.preserveCamelCase" to listOf("$htmlparserPeriodpreserveCamelCase"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.rewriter.processor.impl.HtmlParserFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqRewriterProcessorImplHtmlParserFactoryInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqRewriterProcessorImplHtmlParserFactoryInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param excerptPeriodproperties  (optional)
    * @param cachePeriodmaxPeriodentries  (optional)
    * @param cachePeriodentryPeriodlifetime  (optional)
    * @param xpathPeriodunion  (optional)
    * @return ComDayCqSearchImplBuilderQueryBuilderImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqSearchImplBuilderQueryBuilderImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, excerptPeriodproperties: kotlin.Array<kotlin.String>, cachePeriodmaxPeriodentries: kotlin.Int, cachePeriodentryPeriodlifetime: kotlin.Int, xpathPeriodunion: kotlin.Boolean) : ComDayCqSearchImplBuilderQueryBuilderImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "excerpt.properties" to toMultiValue(excerptPeriodproperties.toList(), "multi"), "cache.max.entries" to listOf("$cachePeriodmaxPeriodentries"), "cache.entry.lifetime" to listOf("$cachePeriodentryPeriodlifetime"), "xpath.union" to listOf("$xpathPeriodunion"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.search.impl.builder.QueryBuilderImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqSearchImplBuilderQueryBuilderImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqSearchImplBuilderQueryBuilderImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param pathBuilderPeriodtarget  (optional)
    * @param suggestPeriodbasepath  (optional)
    * @return ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqSearchSuggestImplSuggestionIndexManagerImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, pathBuilderPeriodtarget: kotlin.String, suggestPeriodbasepath: kotlin.String) : ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "pathBuilder.target" to listOf("$pathBuilderPeriodtarget"), "suggest.basepath" to listOf("$suggestPeriodbasepath"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.search.suggest.impl.SuggestionIndexManagerImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPeriodsearchpromotePeriodconfighandlerPeriodenabled  (optional)
    * @return ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqSearchpromoteImplPublishSearchPromoteConfigHandler(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPeriodsearchpromotePeriodconfighandlerPeriodenabled: kotlin.Boolean) : ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.searchpromote.confighandler.enabled" to listOf("$cqPeriodsearchpromotePeriodconfighandlerPeriodenabled"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.searchpromote.impl.PublishSearchPromoteConfigHandler",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPeriodsearchpromotePeriodconfigurationPeriodserverPerioduri  (optional)
    * @param cqPeriodsearchpromotePeriodconfigurationPeriodenvironment  (optional)
    * @param connectionPeriodtimeout  (optional)
    * @param socketPeriodtimeout  (optional)
    * @return ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqSearchpromoteImplSearchPromoteServiceImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPeriodsearchpromotePeriodconfigurationPeriodserverPerioduri: kotlin.String, cqPeriodsearchpromotePeriodconfigurationPeriodenvironment: kotlin.String, connectionPeriodtimeout: kotlin.Int, socketPeriodtimeout: kotlin.Int) : ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.searchpromote.configuration.server.uri" to listOf("$cqPeriodsearchpromotePeriodconfigurationPeriodserverPerioduri"), "cq.searchpromote.configuration.environment" to listOf("$cqPeriodsearchpromotePeriodconfigurationPeriodenvironment"), "connection.timeout" to listOf("$connectionPeriodtimeout"), "socket.timeout" to listOf("$socketPeriodtimeout"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.searchpromote.impl.SearchPromoteServiceImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPeriodaclsetupPeriodrules  (optional)
    * @return ComDayCqSecurityACLSetupInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqSecurityACLSetup(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPeriodaclsetupPeriodrules: kotlin.Array<kotlin.String>) : ComDayCqSecurityACLSetupInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.aclsetup.rules" to toMultiValue(cqPeriodaclsetupPeriodrules.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.security.ACLSetup",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqSecurityACLSetupInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqSecurityACLSetupInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param schedulerPeriodperiod  (optional)
    * @param schedulerPeriodconcurrent  (optional)
    * @param path  (optional)
    * @param workspace  (optional)
    * @param keywordsPath  (optional)
    * @param asyncEntries  (optional)
    * @return ComDayCqStatisticsImplStatisticsServiceImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqStatisticsImplStatisticsServiceImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, schedulerPeriodperiod: kotlin.Int, schedulerPeriodconcurrent: kotlin.Boolean, path: kotlin.String, workspace: kotlin.String, keywordsPath: kotlin.String, asyncEntries: kotlin.Boolean) : ComDayCqStatisticsImplStatisticsServiceImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "scheduler.period" to listOf("$schedulerPeriodperiod"), "scheduler.concurrent" to listOf("$schedulerPeriodconcurrent"), "path" to listOf("$path"), "workspace" to listOf("$workspace"), "keywordsPath" to listOf("$keywordsPath"), "asyncEntries" to listOf("$asyncEntries"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.statistics.impl.StatisticsServiceImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqStatisticsImplStatisticsServiceImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqStatisticsImplStatisticsServiceImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param validationPeriodenabled  (optional)
    * @return ComDayCqTaggingImplJcrTagManagerFactoryImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqTaggingImplJcrTagManagerFactoryImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, validationPeriodenabled: kotlin.Boolean) : ComDayCqTaggingImplJcrTagManagerFactoryImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "validation.enabled" to listOf("$validationPeriodenabled"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.tagging.impl.JcrTagManagerFactoryImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqTaggingImplJcrTagManagerFactoryImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqTaggingImplJcrTagManagerFactoryImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param ignorePath  (optional)
    * @return ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqTaggingImplSearchTagPredicateEvaluator(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, ignorePath: kotlin.Boolean) : ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "ignore_path" to listOf("$ignorePath"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.tagging.impl.search.TagPredicateEvaluator",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param schedulerPeriodexpression  (optional)
    * @return ComDayCqTaggingImplTagGarbageCollectorInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqTaggingImplTagGarbageCollector(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, schedulerPeriodexpression: kotlin.String) : ComDayCqTaggingImplTagGarbageCollectorInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "scheduler.expression" to listOf("$schedulerPeriodexpression"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.tagging.impl.TagGarbageCollector",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqTaggingImplTagGarbageCollectorInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqTaggingImplTagGarbageCollectorInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPeriodpagesupdatehandlerPeriodimageresourcetypes  (optional)
    * @return ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmContentsyncImplHandlerPagesUpdateHandler(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPeriodpagesupdatehandlerPeriodimageresourcetypes: kotlin.Array<kotlin.String>) : ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.pagesupdatehandler.imageresourcetypes" to toMultiValue(cqPeriodpagesupdatehandlerPeriodimageresourcetypes.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.contentsync.impl.handler.PagesUpdateHandler",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodlinks  (optional)
    * @param cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodclientlibs  (optional)
    * @param cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodimages  (optional)
    * @param cqPeriodcontentsyncPeriodpathrewritertransformerPeriodattributePeriodpattern  (optional)
    * @param cqPeriodcontentsyncPeriodpathrewritertransformerPeriodclientlibraryPeriodpattern  (optional)
    * @param cqPeriodcontentsyncPeriodpathrewritertransformerPeriodclientlibraryPeriodreplace  (optional)
    * @return ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodlinks: kotlin.Array<kotlin.String>, cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodclientlibs: kotlin.Array<kotlin.String>, cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodimages: kotlin.Array<kotlin.String>, cqPeriodcontentsyncPeriodpathrewritertransformerPeriodattributePeriodpattern: kotlin.String, cqPeriodcontentsyncPeriodpathrewritertransformerPeriodclientlibraryPeriodpattern: kotlin.String, cqPeriodcontentsyncPeriodpathrewritertransformerPeriodclientlibraryPeriodreplace: kotlin.String) : ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.contentsync.pathrewritertransformer.mapping.links" to toMultiValue(cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodlinks.toList(), "multi"), "cq.contentsync.pathrewritertransformer.mapping.clientlibs" to toMultiValue(cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodclientlibs.toList(), "multi"), "cq.contentsync.pathrewritertransformer.mapping.images" to toMultiValue(cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodimages.toList(), "multi"), "cq.contentsync.pathrewritertransformer.attribute.pattern" to listOf("$cqPeriodcontentsyncPeriodpathrewritertransformerPeriodattributePeriodpattern"), "cq.contentsync.pathrewritertransformer.clientlibrary.pattern" to listOf("$cqPeriodcontentsyncPeriodpathrewritertransformerPeriodclientlibraryPeriodpattern"), "cq.contentsync.pathrewritertransformer.clientlibrary.replace" to listOf("$cqPeriodcontentsyncPeriodpathrewritertransformerPeriodclientlibraryPeriodreplace"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.contentsync.impl.rewriter.PathRewriterTransformerFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param authoringUIModeServicePerioddefault  (optional)
    * @return ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmCoreImplAuthoringUIModeServiceImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, authoringUIModeServicePerioddefault: kotlin.String) : ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "authoringUIModeService.default" to listOf("$authoringUIModeServicePerioddefault"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.core.impl.AuthoringUIModeServiceImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param wcmcommandservletPerioddeleteWhitelist  (optional)
    * @return ComDayCqWcmCoreImplCommandsWCMCommandServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmCoreImplCommandsWCMCommandServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, wcmcommandservletPerioddeleteWhitelist: kotlin.Array<kotlin.String>) : ComDayCqWcmCoreImplCommandsWCMCommandServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "wcmcommandservlet.delete_whitelist" to toMultiValue(wcmcommandservletPerioddeleteWhitelist.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.core.impl.commands.WCMCommandServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmCoreImplCommandsWCMCommandServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmCoreImplCommandsWCMCommandServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param dimPerioddefaultPeriodmode  (optional)
    * @param dimPeriodappcachePeriodenabled  (optional)
    * @return ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, dimPerioddefaultPeriodmode: kotlin.String, dimPeriodappcachePeriodenabled: kotlin.Boolean) : ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "dim.default.mode" to listOf("$dimPerioddefaultPeriodmode"), "dim.appcache.enabled" to listOf("$dimPeriodappcachePeriodenabled"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.core.impl.devicedetection.DeviceIdentificationModeImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param configured  (optional)
    * @return ComDayCqWcmCoreImplEventPageEventAuditListenerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmCoreImplEventPageEventAuditListener(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, configured: kotlin.String) : ComDayCqWcmCoreImplEventPageEventAuditListenerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "configured" to listOf("$configured"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.core.impl.event.PageEventAuditListener",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmCoreImplEventPageEventAuditListenerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmCoreImplEventPageEventAuditListenerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param paths  (optional)
    * @return ComDayCqWcmCoreImplEventPagePostProcessorInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmCoreImplEventPagePostProcessor(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, paths: kotlin.Array<kotlin.String>) : ComDayCqWcmCoreImplEventPagePostProcessorInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "paths" to toMultiValue(paths.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.core.impl.event.PagePostProcessor",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmCoreImplEventPagePostProcessorInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmCoreImplEventPagePostProcessorInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param paths  (optional)
    * @param excludedPaths  (optional)
    * @return ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmCoreImplEventRepositoryChangeEventListener(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, paths: kotlin.Array<kotlin.String>, excludedPaths: kotlin.Array<kotlin.String>) : ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "paths" to toMultiValue(paths.toList(), "multi"), "excludedPaths" to toMultiValue(excludedPaths.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.core.impl.event.RepositoryChangeEventListener",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param paths  (optional)
    * @return ComDayCqWcmCoreImplEventTemplatePostProcessorInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmCoreImplEventTemplatePostProcessor(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, paths: kotlin.String) : ComDayCqWcmCoreImplEventTemplatePostProcessorInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "paths" to listOf("$paths"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.core.impl.event.TemplatePostProcessor",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmCoreImplEventTemplatePostProcessorInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmCoreImplEventTemplatePostProcessorInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param langmgrPeriodlistPeriodpath  (optional)
    * @param langmgrPeriodcountryPerioddefault  (optional)
    * @return ComDayCqWcmCoreImplLanguageManagerImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmCoreImplLanguageManagerImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, langmgrPeriodlistPeriodpath: kotlin.String, langmgrPeriodcountryPerioddefault: kotlin.Array<kotlin.String>) : ComDayCqWcmCoreImplLanguageManagerImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "langmgr.list.path" to listOf("$langmgrPeriodlistPeriodpath"), "langmgr.country.default" to toMultiValue(langmgrPeriodcountryPerioddefault.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.core.impl.LanguageManagerImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmCoreImplLanguageManagerImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmCoreImplLanguageManagerImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param linkPeriodexpiredPeriodprefix  (optional)
    * @param linkPeriodexpiredPeriodremove  (optional)
    * @param linkPeriodexpiredPeriodsuffix  (optional)
    * @param linkPeriodinvalidPeriodprefix  (optional)
    * @param linkPeriodinvalidPeriodremove  (optional)
    * @param linkPeriodinvalidPeriodsuffix  (optional)
    * @param linkPeriodpredatedPeriodprefix  (optional)
    * @param linkPeriodpredatedPeriodremove  (optional)
    * @param linkPeriodpredatedPeriodsuffix  (optional)
    * @param linkPeriodwcmmodes  (optional)
    * @return ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, linkPeriodexpiredPeriodprefix: kotlin.String, linkPeriodexpiredPeriodremove: kotlin.Boolean, linkPeriodexpiredPeriodsuffix: kotlin.String, linkPeriodinvalidPeriodprefix: kotlin.String, linkPeriodinvalidPeriodremove: kotlin.Boolean, linkPeriodinvalidPeriodsuffix: kotlin.String, linkPeriodpredatedPeriodprefix: kotlin.String, linkPeriodpredatedPeriodremove: kotlin.Boolean, linkPeriodpredatedPeriodsuffix: kotlin.String, linkPeriodwcmmodes: kotlin.Array<kotlin.String>) : ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "link.expired.prefix" to listOf("$linkPeriodexpiredPeriodprefix"), "link.expired.remove" to listOf("$linkPeriodexpiredPeriodremove"), "link.expired.suffix" to listOf("$linkPeriodexpiredPeriodsuffix"), "link.invalid.prefix" to listOf("$linkPeriodinvalidPeriodprefix"), "link.invalid.remove" to listOf("$linkPeriodinvalidPeriodremove"), "link.invalid.suffix" to listOf("$linkPeriodinvalidPeriodsuffix"), "link.predated.prefix" to listOf("$linkPeriodpredatedPeriodprefix"), "link.predated.remove" to listOf("$linkPeriodpredatedPeriodremove"), "link.predated.suffix" to listOf("$linkPeriodpredatedPeriodsuffix"), "link.wcmmodes" to toMultiValue(linkPeriodwcmmodes.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.core.impl.LinkCheckerConfigurationFactoryImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param pagePeriodinfoPeriodproviderPeriodpropertyPeriodregexPerioddefault  (optional)
    * @param pagePeriodinfoPeriodproviderPeriodpropertyPeriodname  (optional)
    * @return ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmCoreImplPagePageInfoAggregatorImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, pagePeriodinfoPeriodproviderPeriodpropertyPeriodregexPerioddefault: kotlin.String, pagePeriodinfoPeriodproviderPeriodpropertyPeriodname: kotlin.String) : ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "page.info.provider.property.regex.default" to listOf("$pagePeriodinfoPeriodproviderPeriodpropertyPeriodregexPerioddefault"), "page.info.provider.property.name" to listOf("$pagePeriodinfoPeriodproviderPeriodpropertyPeriodname"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.core.impl.page.PageInfoAggregatorImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param illegalCharMapping  (optional)
    * @param pageSubTreeActivationCheck  (optional)
    * @return ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmCoreImplPagePageManagerFactoryImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, illegalCharMapping: kotlin.String, pageSubTreeActivationCheck: kotlin.Boolean) : ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "illegalCharMapping" to listOf("$illegalCharMapping"), "pageSubTreeActivationCheck" to listOf("$pageSubTreeActivationCheck"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.core.impl.page.PageManagerFactoryImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param contentReferenceConfigPeriodresourceTypes  (optional)
    * @return ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmCoreImplReferencesContentContentReferenceConfig(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, contentReferenceConfigPeriodresourceTypes: kotlin.Array<kotlin.String>) : ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "contentReferenceConfig.resourceTypes" to toMultiValue(contentReferenceConfigPeriodresourceTypes.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.core.impl.references.content.ContentReferenceConfig",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param damPeriodshowexpired  (optional)
    * @param damPeriodshowhidden  (optional)
    * @param tagTitleSearch  (optional)
    * @param guessTotal  (optional)
    * @param damPeriodexpiryProperty  (optional)
    * @return ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmCoreImplServletsContentfinderAssetViewHandler(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, damPeriodshowexpired: kotlin.Boolean, damPeriodshowhidden: kotlin.Boolean, tagTitleSearch: kotlin.Boolean, guessTotal: kotlin.String, damPeriodexpiryProperty: kotlin.String) : ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "dam.showexpired" to listOf("$damPeriodshowexpired"), "dam.showhidden" to listOf("$damPeriodshowhidden"), "tagTitleSearch" to listOf("$tagTitleSearch"), "guessTotal" to listOf("$guessTotal"), "dam.expiryProperty" to listOf("$damPeriodexpiryProperty"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.AssetViewHandler",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param itemPeriodresourcePeriodtypes  (optional)
    * @return ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, itemPeriodresourcePeriodtypes: kotlin.Array<kotlin.String>) : ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "item.resource.types" to toMultiValue(itemPeriodresourcePeriodtypes.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.connector.ConnectorViewHandler",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param guessTotal  (optional)
    * @param tagTitleSearch  (optional)
    * @return ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmCoreImplServletsContentfinderPageViewHandler(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, guessTotal: kotlin.String, tagTitleSearch: kotlin.Boolean) : ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "guessTotal" to listOf("$guessTotal"), "tagTitleSearch" to listOf("$tagTitleSearch"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.PageViewHandler",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param scope  (optional)
    * @return ComDayCqWcmCoreImplServletsFindReplaceServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmCoreImplServletsFindReplaceServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, scope: kotlin.Array<kotlin.String>) : ComDayCqWcmCoreImplServletsFindReplaceServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "scope" to toMultiValue(scope.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.FindReplaceServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmCoreImplServletsFindReplaceServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmCoreImplServletsFindReplaceServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param referencesearchservletPeriodmaxReferencesPerPage  (optional)
    * @param referencesearchservletPeriodmaxPages  (optional)
    * @return ComDayCqWcmCoreImplServletsReferenceSearchServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmCoreImplServletsReferenceSearchServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, referencesearchservletPeriodmaxReferencesPerPage: kotlin.Int, referencesearchservletPeriodmaxPages: kotlin.Int) : ComDayCqWcmCoreImplServletsReferenceSearchServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "referencesearchservlet.maxReferencesPerPage" to listOf("$referencesearchservletPeriodmaxReferencesPerPage"), "referencesearchservlet.maxPages" to listOf("$referencesearchservletPeriodmaxPages"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.ReferenceSearchServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmCoreImplServletsReferenceSearchServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmCoreImplServletsReferenceSearchServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param workspace  (optional)
    * @param dimensions  (optional)
    * @return ComDayCqWcmCoreImplServletsThumbnailServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmCoreImplServletsThumbnailServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, workspace: kotlin.String, dimensions: kotlin.Array<kotlin.String>) : ComDayCqWcmCoreImplServletsThumbnailServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "workspace" to listOf("$workspace"), "dimensions" to toMultiValue(dimensions.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.ThumbnailServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmCoreImplServletsThumbnailServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmCoreImplServletsThumbnailServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param nonValidChars  (optional)
    * @return ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmCoreImplUtilsDefaultPageNameValidator(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, nonValidChars: kotlin.String) : ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "nonValidChars" to listOf("$nonValidChars"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.core.impl.utils.DefaultPageNameValidator",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param defaultPeriodexternalizerPerioddomain  (optional)
    * @return ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmCoreImplVariantsPageVariantsProviderImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, defaultPeriodexternalizerPerioddomain: kotlin.String) : ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "default.externalizer.domain" to listOf("$defaultPeriodexternalizerPerioddomain"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.core.impl.variants.PageVariantsProviderImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param versionmanagerPeriodcreateVersionOnActivation  (optional)
    * @param versionmanagerPeriodpurgingEnabled  (optional)
    * @param versionmanagerPeriodpurgePaths  (optional)
    * @param versionmanagerPeriodivPaths  (optional)
    * @param versionmanagerPeriodmaxAgeDays  (optional)
    * @param versionmanagerPeriodmaxNumberVersions  (optional)
    * @param versionmanagerPeriodminNumberVersions  (optional)
    * @return ComDayCqWcmCoreImplVersionManagerImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmCoreImplVersionManagerImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, versionmanagerPeriodcreateVersionOnActivation: kotlin.Boolean, versionmanagerPeriodpurgingEnabled: kotlin.Boolean, versionmanagerPeriodpurgePaths: kotlin.Array<kotlin.String>, versionmanagerPeriodivPaths: kotlin.Array<kotlin.String>, versionmanagerPeriodmaxAgeDays: kotlin.Int, versionmanagerPeriodmaxNumberVersions: kotlin.Int, versionmanagerPeriodminNumberVersions: kotlin.Int) : ComDayCqWcmCoreImplVersionManagerImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "versionmanager.createVersionOnActivation" to listOf("$versionmanagerPeriodcreateVersionOnActivation"), "versionmanager.purgingEnabled" to listOf("$versionmanagerPeriodpurgingEnabled"), "versionmanager.purgePaths" to toMultiValue(versionmanagerPeriodpurgePaths.toList(), "multi"), "versionmanager.ivPaths" to toMultiValue(versionmanagerPeriodivPaths.toList(), "multi"), "versionmanager.maxAgeDays" to listOf("$versionmanagerPeriodmaxAgeDays"), "versionmanager.maxNumberVersions" to listOf("$versionmanagerPeriodmaxNumberVersions"), "versionmanager.minNumberVersions" to listOf("$versionmanagerPeriodminNumberVersions"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.core.impl.VersionManagerImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmCoreImplVersionManagerImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmCoreImplVersionManagerImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param versionpurgePeriodpaths  (optional)
    * @param versionpurgePeriodrecursive  (optional)
    * @param versionpurgePeriodmaxVersions  (optional)
    * @param versionpurgePeriodminVersions  (optional)
    * @param versionpurgePeriodmaxAgeDays  (optional)
    * @return ComDayCqWcmCoreImplVersionPurgeTaskInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmCoreImplVersionPurgeTask(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, versionpurgePeriodpaths: kotlin.Array<kotlin.String>, versionpurgePeriodrecursive: kotlin.Boolean, versionpurgePeriodmaxVersions: kotlin.Int, versionpurgePeriodminVersions: kotlin.Int, versionpurgePeriodmaxAgeDays: kotlin.Int) : ComDayCqWcmCoreImplVersionPurgeTaskInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "versionpurge.paths" to toMultiValue(versionpurgePeriodpaths.toList(), "multi"), "versionpurge.recursive" to listOf("$versionpurgePeriodrecursive"), "versionpurge.maxVersions" to listOf("$versionpurgePeriodmaxVersions"), "versionpurge.minVersions" to listOf("$versionpurgePeriodminVersions"), "versionpurge.maxAgeDays" to listOf("$versionpurgePeriodmaxAgeDays"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.core.impl.VersionPurgeTask",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmCoreImplVersionPurgeTaskInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmCoreImplVersionPurgeTaskInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param wcmdbgfilterPeriodenabled  (optional)
    * @param wcmdbgfilterPeriodjspDebug  (optional)
    * @return ComDayCqWcmCoreImplWCMDebugFilterInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmCoreImplWCMDebugFilter(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, wcmdbgfilterPeriodenabled: kotlin.Boolean, wcmdbgfilterPeriodjspDebug: kotlin.Boolean) : ComDayCqWcmCoreImplWCMDebugFilterInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "wcmdbgfilter.enabled" to listOf("$wcmdbgfilterPeriodenabled"), "wcmdbgfilter.jspDebug" to listOf("$wcmdbgfilterPeriodjspDebug"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.core.impl.WCMDebugFilter",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmCoreImplWCMDebugFilterInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmCoreImplWCMDebugFilterInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param wcmdevmodefilterPeriodenabled  (optional)
    * @return ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmCoreImplWCMDeveloperModeFilter(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, wcmdevmodefilterPeriodenabled: kotlin.Boolean) : ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "wcmdevmodefilter.enabled" to listOf("$wcmdevmodefilterPeriodenabled"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.core.impl.WCMDeveloperModeFilter",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param filterPeriodorder  (optional)
    * @param filterPeriodscope  (optional)
    * @return ComDayCqWcmCoreImplWarpTimeWarpFilterInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmCoreImplWarpTimeWarpFilter(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, filterPeriodorder: kotlin.String, filterPeriodscope: kotlin.String) : ComDayCqWcmCoreImplWarpTimeWarpFilterInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "filter.order" to listOf("$filterPeriodorder"), "filter.scope" to listOf("$filterPeriodscope"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.core.impl.warp.TimeWarpFilter",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmCoreImplWarpTimeWarpFilterInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmCoreImplWarpTimeWarpFilterInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param mvtstatisticsPeriodtrackingurl  (optional)
    * @return ComDayCqWcmCoreMvtMVTStatisticsImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmCoreMvtMVTStatisticsImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, mvtstatisticsPeriodtrackingurl: kotlin.String) : ComDayCqWcmCoreMvtMVTStatisticsImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "mvtstatistics.trackingurl" to listOf("$mvtstatisticsPeriodtrackingurl"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.core.mvt.MVTStatisticsImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmCoreMvtMVTStatisticsImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmCoreMvtMVTStatisticsImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param pageviewstatisticsPeriodtrackingurl  (optional)
    * @param pageviewstatisticsPeriodtrackingscriptPeriodenabled  (optional)
    * @return ComDayCqWcmCoreStatsPageViewStatisticsImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmCoreStatsPageViewStatisticsImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, pageviewstatisticsPeriodtrackingurl: kotlin.String, pageviewstatisticsPeriodtrackingscriptPeriodenabled: kotlin.String) : ComDayCqWcmCoreStatsPageViewStatisticsImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "pageviewstatistics.trackingurl" to listOf("$pageviewstatisticsPeriodtrackingurl"), "pageviewstatistics.trackingscript.enabled" to listOf("$pageviewstatisticsPeriodtrackingscriptPeriodenabled"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.core.stats.PageViewStatisticsImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmCoreStatsPageViewStatisticsImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmCoreStatsPageViewStatisticsImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param wcmfilterPeriodmode  (optional)
    * @return ComDayCqWcmCoreWCMRequestFilterInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmCoreWCMRequestFilter(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, wcmfilterPeriodmode: kotlin.String) : ComDayCqWcmCoreWCMRequestFilterInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "wcmfilter.mode" to listOf("$wcmfilterPeriodmode"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.core.WCMRequestFilter",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmCoreWCMRequestFilterInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmCoreWCMRequestFilterInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param extractPeriodfilter  (optional)
    * @return ComDayCqWcmDesignimporterDesignPackageImporterInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmDesignimporterDesignPackageImporter(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, extractPeriodfilter: kotlin.Array<kotlin.String>) : ComDayCqWcmDesignimporterDesignPackageImporterInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "extract.filter" to toMultiValue(extractPeriodfilter.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.designimporter.DesignPackageImporter",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmDesignimporterDesignPackageImporterInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmDesignimporterDesignPackageImporterInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param filepattern  (optional)
    * @param buildPeriodpagePeriodnodes  (optional)
    * @param buildPeriodclientPeriodlibs  (optional)
    * @param buildPeriodcanvasPeriodcomponent  (optional)
    * @return ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmDesignimporterImplCanvasBuilderImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, filepattern: kotlin.String, buildPeriodpagePeriodnodes: kotlin.Boolean, buildPeriodclientPeriodlibs: kotlin.Boolean, buildPeriodcanvasPeriodcomponent: kotlin.Boolean) : ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "filepattern" to listOf("$filepattern"), "build.page.nodes" to listOf("$buildPeriodpagePeriodnodes"), "build.client.libs" to listOf("$buildPeriodclientPeriodlibs"), "build.canvas.component" to listOf("$buildPeriodcanvasPeriodcomponent"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasBuilderImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param minThreadPoolSize  (optional)
    * @param maxThreadPoolSize  (optional)
    * @return ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmDesignimporterImplCanvasPageDeleteHandler(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, minThreadPoolSize: kotlin.Int, maxThreadPoolSize: kotlin.Int) : ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "minThreadPoolSize" to listOf("$minThreadPoolSize"), "maxThreadPoolSize" to listOf("$maxThreadPoolSize"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasPageDeleteHandler",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param searchPeriodpattern  (optional)
    * @param replacePeriodpattern  (optional)
    * @return ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmDesignimporterImplEntryPreprocessorImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, searchPeriodpattern: kotlin.String, replacePeriodpattern: kotlin.String) : ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "search.pattern" to listOf("$searchPeriodpattern"), "replace.pattern" to listOf("$replacePeriodpattern"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.designimporter.impl.EntryPreprocessorImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param filepattern  (optional)
    * @param devicePeriodgroups  (optional)
    * @param buildPeriodpagePeriodnodes  (optional)
    * @param buildPeriodclientPeriodlibs  (optional)
    * @param buildPeriodcanvasPeriodcomponent  (optional)
    * @return ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmDesignimporterImplMobileCanvasBuilderImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, filepattern: kotlin.String, devicePeriodgroups: kotlin.Array<kotlin.String>, buildPeriodpagePeriodnodes: kotlin.Boolean, buildPeriodclientPeriodlibs: kotlin.Boolean, buildPeriodcanvasPeriodcomponent: kotlin.Boolean) : ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "filepattern" to listOf("$filepattern"), "device.groups" to toMultiValue(devicePeriodgroups.toList(), "multi"), "build.page.nodes" to listOf("$buildPeriodpagePeriodnodes"), "build.client.libs" to listOf("$buildPeriodclientPeriodlibs"), "build.canvas.component" to listOf("$buildPeriodcanvasPeriodcomponent"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.designimporter.impl.MobileCanvasBuilderImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param servicePeriodranking  (optional)
    * @param tagpattern  (optional)
    * @return ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, servicePeriodranking: kotlin.Int, tagpattern: kotlin.String) : ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "service.ranking" to listOf("$servicePeriodranking"), "tagpattern" to listOf("$tagpattern"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.CanvasComponentTagHandlerFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param servicePeriodranking  (optional)
    * @param tagpattern  (optional)
    * @return ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, servicePeriodranking: kotlin.Int, tagpattern: kotlin.String) : ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "service.ranking" to listOf("$servicePeriodranking"), "tagpattern" to listOf("$tagpattern"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultComponentTagHandlerFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param servicePeriodranking  (optional)
    * @param tagpattern  (optional)
    * @return ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, servicePeriodranking: kotlin.Int, tagpattern: kotlin.String) : ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "service.ranking" to listOf("$servicePeriodranking"), "tagpattern" to listOf("$tagpattern"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultTagHandlerFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param servicePeriodranking  (optional)
    * @param tagpattern  (optional)
    * @return ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, servicePeriodranking: kotlin.Int, tagpattern: kotlin.String) : ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "service.ranking" to listOf("$servicePeriodranking"), "tagpattern" to listOf("$tagpattern"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.HeadTagHandlerFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param servicePeriodranking  (optional)
    * @param tagpattern  (optional)
    * @return ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, servicePeriodranking: kotlin.Int, tagpattern: kotlin.String) : ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "service.ranking" to listOf("$servicePeriodranking"), "tagpattern" to listOf("$tagpattern"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.IFrameTagHandlerFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param servicePeriodranking  (optional)
    * @param tagpattern  (optional)
    * @param componentPeriodresourceType  (optional)
    * @return ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, servicePeriodranking: kotlin.Int, tagpattern: kotlin.String, componentPeriodresourceType: kotlin.String) : ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "service.ranking" to listOf("$servicePeriodranking"), "tagpattern" to listOf("$tagpattern"), "component.resourceType" to listOf("$componentPeriodresourceType"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImageComponentTagHandlerFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param servicePeriodranking  (optional)
    * @param tagpattern  (optional)
    * @return ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, servicePeriodranking: kotlin.Int, tagpattern: kotlin.String) : ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "service.ranking" to listOf("$servicePeriodranking"), "tagpattern" to listOf("$tagpattern"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImgTagHandlerFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param servicePeriodranking  (optional)
    * @param tagpattern  (optional)
    * @return ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, servicePeriodranking: kotlin.Int, tagpattern: kotlin.String) : ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "service.ranking" to listOf("$servicePeriodranking"), "tagpattern" to listOf("$tagpattern"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.InlineScriptTagHandlerFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param servicePeriodranking  (optional)
    * @param tagpattern  (optional)
    * @return ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, servicePeriodranking: kotlin.Int, tagpattern: kotlin.String) : ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "service.ranking" to listOf("$servicePeriodranking"), "tagpattern" to listOf("$tagpattern"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.LinkTagHandlerFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param servicePeriodranking  (optional)
    * @param tagpattern  (optional)
    * @return ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, servicePeriodranking: kotlin.Int, tagpattern: kotlin.String) : ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "service.ranking" to listOf("$servicePeriodranking"), "tagpattern" to listOf("$tagpattern"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.MetaTagHandlerFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param servicePeriodranking  (optional)
    * @param tagpattern  (optional)
    * @return ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, servicePeriodranking: kotlin.Int, tagpattern: kotlin.String) : ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "service.ranking" to listOf("$servicePeriodranking"), "tagpattern" to listOf("$tagpattern"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.NonScriptTagHandlerFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param servicePeriodranking  (optional)
    * @param tagpattern  (optional)
    * @param componentPeriodresourceType  (optional)
    * @return ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, servicePeriodranking: kotlin.Int, tagpattern: kotlin.String, componentPeriodresourceType: kotlin.String) : ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "service.ranking" to listOf("$servicePeriodranking"), "tagpattern" to listOf("$tagpattern"), "component.resourceType" to listOf("$componentPeriodresourceType"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ParsysComponentTagHandlerFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param servicePeriodranking  (optional)
    * @param tagpattern  (optional)
    * @return ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, servicePeriodranking: kotlin.Int, tagpattern: kotlin.String) : ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "service.ranking" to listOf("$servicePeriodranking"), "tagpattern" to listOf("$tagpattern"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ScriptTagHandlerFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param servicePeriodranking  (optional)
    * @param tagpattern  (optional)
    * @return ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, servicePeriodranking: kotlin.Int, tagpattern: kotlin.String) : ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "service.ranking" to listOf("$servicePeriodranking"), "tagpattern" to listOf("$tagpattern"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.StyleTagHandlerFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param servicePeriodranking  (optional)
    * @param tagpattern  (optional)
    * @param componentPeriodresourceType  (optional)
    * @return ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, servicePeriodranking: kotlin.Int, tagpattern: kotlin.String, componentPeriodresourceType: kotlin.String) : ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "service.ranking" to listOf("$servicePeriodranking"), "tagpattern" to listOf("$tagpattern"), "component.resourceType" to listOf("$componentPeriodresourceType"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TextComponentTagHandlerFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param servicePeriodranking  (optional)
    * @param tagpattern  (optional)
    * @param componentPeriodresourceType  (optional)
    * @return ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, servicePeriodranking: kotlin.Int, tagpattern: kotlin.String, componentPeriodresourceType: kotlin.String) : ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "service.ranking" to listOf("$servicePeriodranking"), "tagpattern" to listOf("$tagpattern"), "component.resourceType" to listOf("$componentPeriodresourceType"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleComponentTagHandlerFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param servicePeriodranking  (optional)
    * @param tagpattern  (optional)
    * @return ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, servicePeriodranking: kotlin.Int, tagpattern: kotlin.String) : ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "service.ranking" to listOf("$servicePeriodranking"), "tagpattern" to listOf("$tagpattern"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleTagHandlerFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param servicePeriodname  (optional)
    * @param slingPeriodservletPeriodresourceTypes  (optional)
    * @param slingPeriodservletPeriodselectors  (optional)
    * @param slingPeriodservletPeriodmethods  (optional)
    * @param formsPeriodformchooserservletPeriodadvansesearchPeriodrequire  (optional)
    * @return ComDayCqWcmFoundationFormsImplFormChooserServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmFoundationFormsImplFormChooserServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, servicePeriodname: kotlin.String, slingPeriodservletPeriodresourceTypes: kotlin.String, slingPeriodservletPeriodselectors: kotlin.String, slingPeriodservletPeriodmethods: kotlin.Array<kotlin.String>, formsPeriodformchooserservletPeriodadvansesearchPeriodrequire: kotlin.Boolean) : ComDayCqWcmFoundationFormsImplFormChooserServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "service.name" to listOf("$servicePeriodname"), "sling.servlet.resourceTypes" to listOf("$slingPeriodservletPeriodresourceTypes"), "sling.servlet.selectors" to listOf("$slingPeriodservletPeriodselectors"), "sling.servlet.methods" to toMultiValue(slingPeriodservletPeriodmethods.toList(), "multi"), "forms.formchooserservlet.advansesearch.require" to listOf("$formsPeriodformchooserservletPeriodadvansesearchPeriodrequire"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormChooserServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmFoundationFormsImplFormChooserServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmFoundationFormsImplFormChooserServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param formsPeriodformparagraphpostprocessorPeriodenabled  (optional)
    * @param formsPeriodformparagraphpostprocessorPeriodformresourcetypes  (optional)
    * @return ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmFoundationFormsImplFormParagraphPostProcessor(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, formsPeriodformparagraphpostprocessorPeriodenabled: kotlin.Boolean, formsPeriodformparagraphpostprocessorPeriodformresourcetypes: kotlin.Array<kotlin.String>) : ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "forms.formparagraphpostprocessor.enabled" to listOf("$formsPeriodformparagraphpostprocessorPeriodenabled"), "forms.formparagraphpostprocessor.formresourcetypes" to toMultiValue(formsPeriodformparagraphpostprocessorPeriodformresourcetypes.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormParagraphPostProcessor",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param namePeriodwhitelist  (optional)
    * @param allowPeriodexpressions  (optional)
    * @return ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmFoundationFormsImplFormsHandlingServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, namePeriodwhitelist: kotlin.String, allowPeriodexpressions: kotlin.Boolean) : ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "name.whitelist" to listOf("$namePeriodwhitelist"), "allow.expressions" to listOf("$allowPeriodexpressions"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormsHandlingServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param slingPeriodservletPeriodresourceTypes  (optional)
    * @param slingPeriodservletPeriodselectors  (optional)
    * @param resourcePeriodwhitelist  (optional)
    * @param resourcePeriodblacklist  (optional)
    * @return ComDayCqWcmFoundationFormsImplMailServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmFoundationFormsImplMailServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, slingPeriodservletPeriodresourceTypes: kotlin.String, slingPeriodservletPeriodselectors: kotlin.String, resourcePeriodwhitelist: kotlin.Array<kotlin.String>, resourcePeriodblacklist: kotlin.String) : ComDayCqWcmFoundationFormsImplMailServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "sling.servlet.resourceTypes" to listOf("$slingPeriodservletPeriodresourceTypes"), "sling.servlet.selectors" to listOf("$slingPeriodservletPeriodselectors"), "resource.whitelist" to toMultiValue(resourcePeriodwhitelist.toList(), "multi"), "resource.blacklist" to listOf("$resourcePeriodblacklist"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.MailServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmFoundationFormsImplMailServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmFoundationFormsImplMailServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param adaptPeriodsupportedPeriodwidths  (optional)
    * @return ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmFoundationImplAdaptiveImageComponentServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, adaptPeriodsupportedPeriodwidths: kotlin.Array<kotlin.String>) : ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "adapt.supported.widths" to toMultiValue(adaptPeriodsupportedPeriodwidths.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.foundation.impl.AdaptiveImageComponentServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param path  (optional)
    * @param authPeriodhttpPeriodnologin  (optional)
    * @param authPeriodhttpPeriodrealm  (optional)
    * @param authPerioddefaultPeriodloginpage  (optional)
    * @param authPeriodcredPeriodform  (optional)
    * @param authPeriodcredPeriodutf8  (optional)
    * @return ComDayCqWcmFoundationImplHTTPAuthHandlerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmFoundationImplHTTPAuthHandler(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, path: kotlin.String, authPeriodhttpPeriodnologin: kotlin.Boolean, authPeriodhttpPeriodrealm: kotlin.String, authPerioddefaultPeriodloginpage: kotlin.String, authPeriodcredPeriodform: kotlin.Array<kotlin.String>, authPeriodcredPeriodutf8: kotlin.Array<kotlin.String>) : ComDayCqWcmFoundationImplHTTPAuthHandlerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "path" to listOf("$path"), "auth.http.nologin" to listOf("$authPeriodhttpPeriodnologin"), "auth.http.realm" to listOf("$authPeriodhttpPeriodrealm"), "auth.default.loginpage" to listOf("$authPerioddefaultPeriodloginpage"), "auth.cred.form" to toMultiValue(authPeriodcredPeriodform.toList(), "multi"), "auth.cred.utf8" to toMultiValue(authPeriodcredPeriodutf8.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.foundation.impl.HTTPAuthHandler",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmFoundationImplHTTPAuthHandlerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmFoundationImplHTTPAuthHandlerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param slingPeriodauthPeriodrequirements  (optional)
    * @return ComDayCqWcmFoundationImplPageImpressionsTrackerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmFoundationImplPageImpressionsTracker(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, slingPeriodauthPeriodrequirements: kotlin.String) : ComDayCqWcmFoundationImplPageImpressionsTrackerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "sling.auth.requirements" to listOf("$slingPeriodauthPeriodrequirements"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.foundation.impl.PageImpressionsTracker",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmFoundationImplPageImpressionsTrackerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmFoundationImplPageImpressionsTrackerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param excludedPeriodresourcePeriodtypes  (optional)
    * @return ComDayCqWcmFoundationImplPageRedirectServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmFoundationImplPageRedirectServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, excludedPeriodresourcePeriodtypes: kotlin.Array<kotlin.String>) : ComDayCqWcmFoundationImplPageRedirectServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "excluded.resource.types" to toMultiValue(excludedPeriodresourcePeriodtypes.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.foundation.impl.PageRedirectServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmFoundationImplPageRedirectServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmFoundationImplPageRedirectServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param defaultPeriodattachmentPeriodtypePeriodblacklist  (optional)
    * @param baselinePeriodattachmentPeriodtypePeriodblacklist  (optional)
    * @return ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, defaultPeriodattachmentPeriodtypePeriodblacklist: kotlin.Array<kotlin.String>, baselinePeriodattachmentPeriodtypePeriodblacklist: kotlin.Array<kotlin.String>) : ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "default.attachment.type.blacklist" to toMultiValue(defaultPeriodattachmentPeriodtypePeriodblacklist.toList(), "multi"), "baseline.attachment.type.blacklist" to toMultiValue(baselinePeriodattachmentPeriodtypePeriodblacklist.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.foundation.security.impl.DefaultAttachmentTypeBlacklistService",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param parameterPeriodwhitelist  (optional)
    * @param parameterPeriodwhitelistPeriodprefixes  (optional)
    * @param binaryPeriodparameterPeriodwhitelist  (optional)
    * @param modifierPeriodwhitelist  (optional)
    * @param operationPeriodwhitelist  (optional)
    * @param operationPeriodwhitelistPeriodprefixes  (optional)
    * @param typehintPeriodwhitelist  (optional)
    * @param resourcetypePeriodwhitelist  (optional)
    * @return ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, parameterPeriodwhitelist: kotlin.Array<kotlin.String>, parameterPeriodwhitelistPeriodprefixes: kotlin.Array<kotlin.String>, binaryPeriodparameterPeriodwhitelist: kotlin.Array<kotlin.String>, modifierPeriodwhitelist: kotlin.Array<kotlin.String>, operationPeriodwhitelist: kotlin.Array<kotlin.String>, operationPeriodwhitelistPeriodprefixes: kotlin.Array<kotlin.String>, typehintPeriodwhitelist: kotlin.Array<kotlin.String>, resourcetypePeriodwhitelist: kotlin.Array<kotlin.String>) : ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "parameter.whitelist" to toMultiValue(parameterPeriodwhitelist.toList(), "multi"), "parameter.whitelist.prefixes" to toMultiValue(parameterPeriodwhitelistPeriodprefixes.toList(), "multi"), "binary.parameter.whitelist" to toMultiValue(binaryPeriodparameterPeriodwhitelist.toList(), "multi"), "modifier.whitelist" to toMultiValue(modifierPeriodwhitelist.toList(), "multi"), "operation.whitelist" to toMultiValue(operationPeriodwhitelist.toList(), "multi"), "operation.whitelist.prefixes" to toMultiValue(operationPeriodwhitelistPeriodprefixes.toList(), "multi"), "typehint.whitelist" to toMultiValue(typehintPeriodwhitelist.toList(), "multi"), "resourcetype.whitelist" to toMultiValue(resourcetypePeriodwhitelist.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.foundation.security.impl.SaferSlingPostValidatorImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param devicePeriodinfoPeriodtransformerPeriodenabled  (optional)
    * @param devicePeriodinfoPeriodtransformerPeriodcssPeriodstyle  (optional)
    * @return ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, devicePeriodinfoPeriodtransformerPeriodenabled: kotlin.Boolean, devicePeriodinfoPeriodtransformerPeriodcssPeriodstyle: kotlin.String) : ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "device.info.transformer.enabled" to listOf("$devicePeriodinfoPeriodtransformerPeriodenabled"), "device.info.transformer.css.style" to listOf("$devicePeriodinfoPeriodtransformerPeriodcssPeriodstyle"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.mobile.core.impl.device.DeviceInfoTransformerFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param redirectPeriodenabled  (optional)
    * @param redirectPeriodstatsPeriodenabled  (optional)
    * @param redirectPeriodextensions  (optional)
    * @param redirectPeriodpaths  (optional)
    * @return ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmMobileCoreImplRedirectRedirectFilter(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, redirectPeriodenabled: kotlin.Boolean, redirectPeriodstatsPeriodenabled: kotlin.Boolean, redirectPeriodextensions: kotlin.Array<kotlin.String>, redirectPeriodpaths: kotlin.Array<kotlin.String>) : ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "redirect.enabled" to listOf("$redirectPeriodenabled"), "redirect.stats.enabled" to listOf("$redirectPeriodstatsPeriodenabled"), "redirect.extensions" to toMultiValue(redirectPeriodextensions.toList(), "multi"), "redirect.paths" to toMultiValue(redirectPeriodpaths.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.mobile.core.impl.redirect.RedirectFilter",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes  (optional)
    * @param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems  (optional)
    * @param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops  (optional)
    * @param contentcopyactionPeriodorderPeriodstyle  (optional)
    * @return ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmMsmImplActionsContentCopyActionFactory(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes: kotlin.Array<kotlin.String>, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems: kotlin.Array<kotlin.String>, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops: kotlin.Array<kotlin.String>, contentcopyactionPeriodorderPeriodstyle: kotlin.String) : ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.wcm.msm.action.excludednodetypes" to toMultiValue(cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes.toList(), "multi"), "cq.wcm.msm.action.excludedparagraphitems" to toMultiValue(cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems.toList(), "multi"), "cq.wcm.msm.action.excludedprops" to toMultiValue(cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops.toList(), "multi"), "contentcopyaction.order.style" to listOf("$contentcopyactionPeriodorderPeriodstyle"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentCopyActionFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes  (optional)
    * @param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems  (optional)
    * @param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops  (optional)
    * @return ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmMsmImplActionsContentDeleteActionFactory(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes: kotlin.Array<kotlin.String>, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems: kotlin.Array<kotlin.String>, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops: kotlin.Array<kotlin.String>) : ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.wcm.msm.action.excludednodetypes" to toMultiValue(cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes.toList(), "multi"), "cq.wcm.msm.action.excludedparagraphitems" to toMultiValue(cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems.toList(), "multi"), "cq.wcm.msm.action.excludedprops" to toMultiValue(cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentDeleteActionFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes  (optional)
    * @param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems  (optional)
    * @param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops  (optional)
    * @param cqPeriodwcmPeriodmsmPeriodactionPeriodignoredMixin  (optional)
    * @return ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmMsmImplActionsContentUpdateActionFactory(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes: kotlin.Array<kotlin.String>, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems: kotlin.Array<kotlin.String>, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops: kotlin.Array<kotlin.String>, cqPeriodwcmPeriodmsmPeriodactionPeriodignoredMixin: kotlin.Array<kotlin.String>) : ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.wcm.msm.action.excludednodetypes" to toMultiValue(cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes.toList(), "multi"), "cq.wcm.msm.action.excludedparagraphitems" to toMultiValue(cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems.toList(), "multi"), "cq.wcm.msm.action.excludedprops" to toMultiValue(cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops.toList(), "multi"), "cq.wcm.msm.action.ignoredMixin" to toMultiValue(cqPeriodwcmPeriodmsmPeriodactionPeriodignoredMixin.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentUpdateActionFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes  (optional)
    * @param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems  (optional)
    * @param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops  (optional)
    * @return ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmMsmImplActionsOrderChildrenActionFactory(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes: kotlin.Array<kotlin.String>, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems: kotlin.Array<kotlin.String>, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops: kotlin.Array<kotlin.String>) : ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.wcm.msm.action.excludednodetypes" to toMultiValue(cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes.toList(), "multi"), "cq.wcm.msm.action.excludedparagraphitems" to toMultiValue(cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems.toList(), "multi"), "cq.wcm.msm.action.excludedprops" to toMultiValue(cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.OrderChildrenActionFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes  (optional)
    * @param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems  (optional)
    * @param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops  (optional)
    * @param cqPeriodwcmPeriodmsmPeriodimplPeriodactionsPeriodpagemovePeriodpropReferenceUpdate  (optional)
    * @return ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmMsmImplActionsPageMoveActionFactory(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes: kotlin.Array<kotlin.String>, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems: kotlin.Array<kotlin.String>, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops: kotlin.Array<kotlin.String>, cqPeriodwcmPeriodmsmPeriodimplPeriodactionsPeriodpagemovePeriodpropReferenceUpdate: kotlin.Boolean) : ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.wcm.msm.action.excludednodetypes" to toMultiValue(cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes.toList(), "multi"), "cq.wcm.msm.action.excludedparagraphitems" to toMultiValue(cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems.toList(), "multi"), "cq.wcm.msm.action.excludedprops" to toMultiValue(cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops.toList(), "multi"), "cq.wcm.msm.impl.actions.pagemove.prop_referenceUpdate" to listOf("$cqPeriodwcmPeriodmsmPeriodimplPeriodactionsPeriodpagemovePeriodpropReferenceUpdate"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.PageMoveActionFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes  (optional)
    * @param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems  (optional)
    * @param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops  (optional)
    * @param cqPeriodwcmPeriodmsmPeriodimplPeriodactionPeriodreferencesupdatePeriodpropUpdateNested  (optional)
    * @return ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmMsmImplActionsReferencesUpdateActionFactory(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes: kotlin.Array<kotlin.String>, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems: kotlin.Array<kotlin.String>, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops: kotlin.Array<kotlin.String>, cqPeriodwcmPeriodmsmPeriodimplPeriodactionPeriodreferencesupdatePeriodpropUpdateNested: kotlin.Boolean) : ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.wcm.msm.action.excludednodetypes" to toMultiValue(cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes.toList(), "multi"), "cq.wcm.msm.action.excludedparagraphitems" to toMultiValue(cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems.toList(), "multi"), "cq.wcm.msm.action.excludedprops" to toMultiValue(cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops.toList(), "multi"), "cq.wcm.msm.impl.action.referencesupdate.prop_updateNested" to listOf("$cqPeriodwcmPeriodmsmPeriodimplPeriodactionPeriodreferencesupdatePeriodpropUpdateNested"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ReferencesUpdateActionFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes  (optional)
    * @param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems  (optional)
    * @param cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops  (optional)
    * @return ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmMsmImplActionsVersionCopyActionFactory(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes: kotlin.Array<kotlin.String>, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems: kotlin.Array<kotlin.String>, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops: kotlin.Array<kotlin.String>) : ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.wcm.msm.action.excludednodetypes" to toMultiValue(cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes.toList(), "multi"), "cq.wcm.msm.action.excludedparagraphitems" to toMultiValue(cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems.toList(), "multi"), "cq.wcm.msm.action.excludedprops" to toMultiValue(cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.VersionCopyActionFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param liverelationshipmgrPeriodrelationsconfigPerioddefault  (optional)
    * @return ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmMsmImplLiveRelationshipManagerImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, liverelationshipmgrPeriodrelationsconfigPerioddefault: kotlin.String) : ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "liverelationshipmgr.relationsconfig.default" to listOf("$liverelationshipmgrPeriodrelationsconfigPerioddefault"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.msm.impl.LiveRelationshipManagerImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param eventPeriodfilter  (optional)
    * @param rolloutmgrPeriodexcludedpropsPerioddefault  (optional)
    * @param rolloutmgrPeriodexcludedparagraphpropsPerioddefault  (optional)
    * @param rolloutmgrPeriodexcludednodetypesPerioddefault  (optional)
    * @param rolloutmgrPeriodthreadpoolPeriodmaxsize  (optional)
    * @param rolloutmgrPeriodthreadpoolPeriodmaxshutdowntime  (optional)
    * @param rolloutmgrPeriodthreadpoolPeriodpriority  (optional)
    * @param rolloutmgrPeriodcommitPeriodsize  (optional)
    * @param rolloutmgrPeriodconflicthandlingPeriodenabled  (optional)
    * @return ComDayCqWcmMsmImplRolloutManagerImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmMsmImplRolloutManagerImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, eventPeriodfilter: kotlin.String, rolloutmgrPeriodexcludedpropsPerioddefault: kotlin.Array<kotlin.String>, rolloutmgrPeriodexcludedparagraphpropsPerioddefault: kotlin.Array<kotlin.String>, rolloutmgrPeriodexcludednodetypesPerioddefault: kotlin.Array<kotlin.String>, rolloutmgrPeriodthreadpoolPeriodmaxsize: kotlin.Int, rolloutmgrPeriodthreadpoolPeriodmaxshutdowntime: kotlin.Int, rolloutmgrPeriodthreadpoolPeriodpriority: kotlin.String, rolloutmgrPeriodcommitPeriodsize: kotlin.Int, rolloutmgrPeriodconflicthandlingPeriodenabled: kotlin.Boolean) : ComDayCqWcmMsmImplRolloutManagerImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "event.filter" to listOf("$eventPeriodfilter"), "rolloutmgr.excludedprops.default" to toMultiValue(rolloutmgrPeriodexcludedpropsPerioddefault.toList(), "multi"), "rolloutmgr.excludedparagraphprops.default" to toMultiValue(rolloutmgrPeriodexcludedparagraphpropsPerioddefault.toList(), "multi"), "rolloutmgr.excludednodetypes.default" to toMultiValue(rolloutmgrPeriodexcludednodetypesPerioddefault.toList(), "multi"), "rolloutmgr.threadpool.maxsize" to listOf("$rolloutmgrPeriodthreadpoolPeriodmaxsize"), "rolloutmgr.threadpool.maxshutdowntime" to listOf("$rolloutmgrPeriodthreadpoolPeriodmaxshutdowntime"), "rolloutmgr.threadpool.priority" to listOf("$rolloutmgrPeriodthreadpoolPeriodpriority"), "rolloutmgr.commit.size" to listOf("$rolloutmgrPeriodcommitPeriodsize"), "rolloutmgr.conflicthandling.enabled" to listOf("$rolloutmgrPeriodconflicthandlingPeriodenabled"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.msm.impl.RolloutManagerImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmMsmImplRolloutManagerImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmMsmImplRolloutManagerImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param auditlogservletPerioddefaultPeriodeventsPeriodcount  (optional)
    * @param auditlogservletPerioddefaultPeriodpath  (optional)
    * @return ComDayCqWcmMsmImplServletsAuditLogServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmMsmImplServletsAuditLogServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, auditlogservletPerioddefaultPeriodeventsPeriodcount: kotlin.Int, auditlogservletPerioddefaultPeriodpath: kotlin.String) : ComDayCqWcmMsmImplServletsAuditLogServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "auditlogservlet.default.events.count" to listOf("$auditlogservletPerioddefaultPeriodeventsPeriodcount"), "auditlogservlet.default.path" to listOf("$auditlogservletPerioddefaultPeriodpath"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.msm.impl.servlets.AuditLogServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmMsmImplServletsAuditLogServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmMsmImplServletsAuditLogServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param emailPeriodfrom  (optional)
    * @return ComDayCqWcmNotificationEmailImplEmailChannelInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmNotificationEmailImplEmailChannel(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, emailPeriodfrom: kotlin.String) : ComDayCqWcmNotificationEmailImplEmailChannelInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "email.from" to listOf("$emailPeriodfrom"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.notification.email.impl.EmailChannel",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmNotificationEmailImplEmailChannelInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmNotificationEmailImplEmailChannelInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param eventPeriodtopics  (optional)
    * @return ComDayCqWcmNotificationImplNotificationManagerImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmNotificationImplNotificationManagerImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, eventPeriodtopics: kotlin.Array<kotlin.String>) : ComDayCqWcmNotificationImplNotificationManagerImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "event.topics" to toMultiValue(eventPeriodtopics.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.notification.impl.NotificationManagerImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmNotificationImplNotificationManagerImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmNotificationImplNotificationManagerImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param comPerioddayPeriodcqPeriodwcmPeriodscriptingPeriodbvpPeriodscriptPeriodengines  (optional)
    * @return ComDayCqWcmScriptingImplBVPManagerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmScriptingImplBVPManager(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, comPerioddayPeriodcqPeriodwcmPeriodscriptingPeriodbvpPeriodscriptPeriodengines: kotlin.Array<kotlin.String>) : ComDayCqWcmScriptingImplBVPManagerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "com.day.cq.wcm.scripting.bvp.script.engines" to toMultiValue(comPerioddayPeriodcqPeriodwcmPeriodscriptingPeriodbvpPeriodscriptPeriodengines.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.scripting.impl.BVPManager",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmScriptingImplBVPManagerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmScriptingImplBVPManagerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cqPeriodwcmPeriodundoPeriodenabled  (optional)
    * @param cqPeriodwcmPeriodundoPeriodpath  (optional)
    * @param cqPeriodwcmPeriodundoPeriodvalidity  (optional)
    * @param cqPeriodwcmPeriodundoPeriodsteps  (optional)
    * @param cqPeriodwcmPeriodundoPeriodpersistence  (optional)
    * @param cqPeriodwcmPeriodundoPeriodpersistencePeriodmode  (optional)
    * @param cqPeriodwcmPeriodundoPeriodmarkermode  (optional)
    * @param cqPeriodwcmPeriodundoPeriodwhitelist  (optional)
    * @param cqPeriodwcmPeriodundoPeriodblacklist  (optional)
    * @return ComDayCqWcmUndoUndoConfigInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmUndoUndoConfig(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cqPeriodwcmPeriodundoPeriodenabled: kotlin.Boolean, cqPeriodwcmPeriodundoPeriodpath: kotlin.String, cqPeriodwcmPeriodundoPeriodvalidity: kotlin.Int, cqPeriodwcmPeriodundoPeriodsteps: kotlin.Int, cqPeriodwcmPeriodundoPeriodpersistence: kotlin.String, cqPeriodwcmPeriodundoPeriodpersistencePeriodmode: kotlin.Boolean, cqPeriodwcmPeriodundoPeriodmarkermode: kotlin.String, cqPeriodwcmPeriodundoPeriodwhitelist: kotlin.Array<kotlin.String>, cqPeriodwcmPeriodundoPeriodblacklist: kotlin.Array<kotlin.String>) : ComDayCqWcmUndoUndoConfigInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cq.wcm.undo.enabled" to listOf("$cqPeriodwcmPeriodundoPeriodenabled"), "cq.wcm.undo.path" to listOf("$cqPeriodwcmPeriodundoPeriodpath"), "cq.wcm.undo.validity" to listOf("$cqPeriodwcmPeriodundoPeriodvalidity"), "cq.wcm.undo.steps" to listOf("$cqPeriodwcmPeriodundoPeriodsteps"), "cq.wcm.undo.persistence" to listOf("$cqPeriodwcmPeriodundoPeriodpersistence"), "cq.wcm.undo.persistence.mode" to listOf("$cqPeriodwcmPeriodundoPeriodpersistencePeriodmode"), "cq.wcm.undo.markermode" to listOf("$cqPeriodwcmPeriodundoPeriodmarkermode"), "cq.wcm.undo.whitelist" to toMultiValue(cqPeriodwcmPeriodundoPeriodwhitelist.toList(), "multi"), "cq.wcm.undo.blacklist" to toMultiValue(cqPeriodwcmPeriodundoPeriodblacklist.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.undo.UndoConfig",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmUndoUndoConfigInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmUndoUndoConfigInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param flush agents  (optional)
    * @return ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmWebservicesupportImplReplicationEventListener(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, flush agents: kotlin.Array<kotlin.String>) : ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "Flush agents" to toMultiValue(flush agents.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.webservicesupport.impl.ReplicationEventListener",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param eventPeriodfilter  (optional)
    * @param minThreadPoolSize  (optional)
    * @param maxThreadPoolSize  (optional)
    * @param cqPeriodwcmPeriodworkflowPeriodterminatePeriodonPeriodactivate  (optional)
    * @param cqPeriodwcmPeriodworklfowPeriodterminatePeriodexclusionPeriodlist  (optional)
    * @return ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmWorkflowImplWcmWorkflowServiceImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, eventPeriodfilter: kotlin.String, minThreadPoolSize: kotlin.Int, maxThreadPoolSize: kotlin.Int, cqPeriodwcmPeriodworkflowPeriodterminatePeriodonPeriodactivate: kotlin.Boolean, cqPeriodwcmPeriodworklfowPeriodterminatePeriodexclusionPeriodlist: kotlin.Array<kotlin.String>) : ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "event.filter" to listOf("$eventPeriodfilter"), "minThreadPoolSize" to listOf("$minThreadPoolSize"), "maxThreadPoolSize" to listOf("$maxThreadPoolSize"), "cq.wcm.workflow.terminate.on.activate" to listOf("$cqPeriodwcmPeriodworkflowPeriodterminatePeriodonPeriodactivate"), "cq.wcm.worklfow.terminate.exclusion.list" to toMultiValue(cqPeriodwcmPeriodworklfowPeriodterminatePeriodexclusionPeriodlist.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.workflow.impl.WcmWorkflowServiceImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param workflowpackageinfoproviderPeriodfilter  (optional)
    * @param workflowpackageinfoproviderPeriodfilterPeriodrootpath  (optional)
    * @return ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWcmWorkflowImplWorkflowPackageInfoProvider(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, workflowpackageinfoproviderPeriodfilter: kotlin.Array<kotlin.String>, workflowpackageinfoproviderPeriodfilterPeriodrootpath: kotlin.String) : ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "workflowpackageinfoprovider.filter" to toMultiValue(workflowpackageinfoproviderPeriodfilter.toList(), "multi"), "workflowpackageinfoprovider.filter.rootpath" to listOf("$workflowpackageinfoproviderPeriodfilterPeriodrootpath"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.wcm.workflow.impl.WorkflowPackageInfoProvider",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param htmllibmanagerPeriodclientmanager  (optional)
    * @param htmllibmanagerPerioddebug  (optional)
    * @param htmllibmanagerPerioddebugPeriodconsole  (optional)
    * @param htmllibmanagerPerioddebugPeriodinitPeriodjs  (optional)
    * @param htmllibmanagerPerioddefaultthemename  (optional)
    * @param htmllibmanagerPerioddefaultuserthemename  (optional)
    * @param htmllibmanagerPeriodfirebuglitePeriodpath  (optional)
    * @param htmllibmanagerPeriodforceCQUrlInfo  (optional)
    * @param htmllibmanagerPeriodgzip  (optional)
    * @param htmllibmanagerPeriodmaxage  (optional)
    * @param htmllibmanagerPeriodmaxDataUriSize  (optional)
    * @param htmllibmanagerPeriodminify  (optional)
    * @param htmllibmanagerPeriodpathPeriodlist  (optional)
    * @param htmllibmanagerPeriodtiming  (optional)
    * @return ComDayCqWidgetImplHtmlLibraryManagerImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWidgetImplHtmlLibraryManagerImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, htmllibmanagerPeriodclientmanager: kotlin.String, htmllibmanagerPerioddebug: kotlin.Boolean, htmllibmanagerPerioddebugPeriodconsole: kotlin.Boolean, htmllibmanagerPerioddebugPeriodinitPeriodjs: kotlin.String, htmllibmanagerPerioddefaultthemename: kotlin.String, htmllibmanagerPerioddefaultuserthemename: kotlin.String, htmllibmanagerPeriodfirebuglitePeriodpath: kotlin.String, htmllibmanagerPeriodforceCQUrlInfo: kotlin.Boolean, htmllibmanagerPeriodgzip: kotlin.Boolean, htmllibmanagerPeriodmaxage: kotlin.Int, htmllibmanagerPeriodmaxDataUriSize: kotlin.Int, htmllibmanagerPeriodminify: kotlin.Boolean, htmllibmanagerPeriodpathPeriodlist: kotlin.Array<kotlin.String>, htmllibmanagerPeriodtiming: kotlin.Boolean) : ComDayCqWidgetImplHtmlLibraryManagerImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "htmllibmanager.clientmanager" to listOf("$htmllibmanagerPeriodclientmanager"), "htmllibmanager.debug" to listOf("$htmllibmanagerPerioddebug"), "htmllibmanager.debug.console" to listOf("$htmllibmanagerPerioddebugPeriodconsole"), "htmllibmanager.debug.init.js" to listOf("$htmllibmanagerPerioddebugPeriodinitPeriodjs"), "htmllibmanager.defaultthemename" to listOf("$htmllibmanagerPerioddefaultthemename"), "htmllibmanager.defaultuserthemename" to listOf("$htmllibmanagerPerioddefaultuserthemename"), "htmllibmanager.firebuglite.path" to listOf("$htmllibmanagerPeriodfirebuglitePeriodpath"), "htmllibmanager.forceCQUrlInfo" to listOf("$htmllibmanagerPeriodforceCQUrlInfo"), "htmllibmanager.gzip" to listOf("$htmllibmanagerPeriodgzip"), "htmllibmanager.maxage" to listOf("$htmllibmanagerPeriodmaxage"), "htmllibmanager.maxDataUriSize" to listOf("$htmllibmanagerPeriodmaxDataUriSize"), "htmllibmanager.minify" to listOf("$htmllibmanagerPeriodminify"), "htmllibmanager.path.list" to toMultiValue(htmllibmanagerPeriodpathPeriodlist.toList(), "multi"), "htmllibmanager.timing" to listOf("$htmllibmanagerPeriodtiming"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.widget.impl.HtmlLibraryManagerImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWidgetImplHtmlLibraryManagerImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWidgetImplHtmlLibraryManagerImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param extendablePeriodwidgets  (optional)
    * @param widgetextensionproviderPerioddebug  (optional)
    * @return ComDayCqWidgetImplWidgetExtensionProviderImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWidgetImplWidgetExtensionProviderImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, extendablePeriodwidgets: kotlin.Array<kotlin.String>, widgetextensionproviderPerioddebug: kotlin.Boolean) : ComDayCqWidgetImplWidgetExtensionProviderImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "extendable.widgets" to toMultiValue(extendablePeriodwidgets.toList(), "multi"), "widgetextensionprovider.debug" to listOf("$widgetextensionproviderPerioddebug"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.widget.impl.WidgetExtensionProviderImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWidgetImplWidgetExtensionProviderImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWidgetImplWidgetExtensionProviderImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param fromPeriodaddress  (optional)
    * @param hostPeriodprefix  (optional)
    * @param notifyPeriodonabort  (optional)
    * @param notifyPeriodoncomplete  (optional)
    * @param notifyPeriodoncontainercomplete  (optional)
    * @param notifyPerioduseronly  (optional)
    * @return ComDayCqWorkflowImplEmailEMailNotificationServiceInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWorkflowImplEmailEMailNotificationService(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, fromPeriodaddress: kotlin.String, hostPeriodprefix: kotlin.String, notifyPeriodonabort: kotlin.Boolean, notifyPeriodoncomplete: kotlin.Boolean, notifyPeriodoncontainercomplete: kotlin.Boolean, notifyPerioduseronly: kotlin.Boolean) : ComDayCqWorkflowImplEmailEMailNotificationServiceInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "from.address" to listOf("$fromPeriodaddress"), "host.prefix" to listOf("$hostPeriodprefix"), "notify.onabort" to listOf("$notifyPeriodonabort"), "notify.oncomplete" to listOf("$notifyPeriodoncomplete"), "notify.oncontainercomplete" to listOf("$notifyPeriodoncontainercomplete"), "notify.useronly" to listOf("$notifyPerioduseronly"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.workflow.impl.email.EMailNotificationService",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWorkflowImplEmailEMailNotificationServiceInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWorkflowImplEmailEMailNotificationServiceInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param notifyPeriodonupdate  (optional)
    * @param notifyPeriodoncomplete  (optional)
    * @return ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCqWorkflowImplEmailTaskEMailNotificationService(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, notifyPeriodonupdate: kotlin.Boolean, notifyPeriodoncomplete: kotlin.Boolean) : ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "notify.onupdate" to listOf("$notifyPeriodonupdate"), "notify.oncomplete" to listOf("$notifyPeriodoncomplete"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.cq.workflow.impl.email.TaskEMailNotificationService",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param path  (optional)
    * @param tokenPeriodrequiredPeriodattr  (optional)
    * @param tokenPeriodalternatePeriodurl  (optional)
    * @param tokenPeriodencapsulated  (optional)
    * @param skipPeriodtokenPeriodrefresh  (optional)
    * @return ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCrxSecurityTokenImplImplTokenAuthenticationHandler(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, path: kotlin.String, tokenPeriodrequiredPeriodattr: kotlin.String, tokenPeriodalternatePeriodurl: kotlin.String, tokenPeriodencapsulated: kotlin.Boolean, skipPeriodtokenPeriodrefresh: kotlin.Array<kotlin.String>) : ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "path" to listOf("$path"), "token.required.attr" to listOf("$tokenPeriodrequiredPeriodattr"), "token.alternate.url" to listOf("$tokenPeriodalternatePeriodurl"), "token.encapsulated" to listOf("$tokenPeriodencapsulated"), "skip.token.refresh" to toMultiValue(skipPeriodtokenPeriodrefresh.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.crx.security.token.impl.impl.TokenAuthenticationHandler",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param enablePeriodtokenPeriodcleanupPeriodtask  (optional)
    * @param schedulerPeriodexpression  (optional)
    * @param batchPeriodsize  (optional)
    * @return ComDayCrxSecurityTokenImplTokenCleanupTaskInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun comDayCrxSecurityTokenImplTokenCleanupTask(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, enablePeriodtokenPeriodcleanupPeriodtask: kotlin.Boolean, schedulerPeriodexpression: kotlin.String, batchPeriodsize: kotlin.Int) : ComDayCrxSecurityTokenImplTokenCleanupTaskInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "enable.token.cleanup.task" to listOf("$enablePeriodtokenPeriodcleanupPeriodtask"), "scheduler.expression" to listOf("$schedulerPeriodexpression"), "batch.size" to listOf("$batchPeriodsize"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/com.day.crx.security.token.impl.TokenCleanupTask",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComDayCrxSecurityTokenImplTokenCleanupTaskInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComDayCrxSecurityTokenImplTokenCleanupTaskInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param supportedLocales  (optional)
    * @param localizable Properties  (optional)
    * @return GuideLocalizationServiceInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun guideLocalizationService(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, supportedLocales: kotlin.Array<kotlin.String>, localizable Properties: kotlin.Array<kotlin.String>) : GuideLocalizationServiceInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "supportedLocales" to toMultiValue(supportedLocales.toList(), "multi"), "Localizable Properties" to toMultiValue(localizable Properties.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/Guide Localization Service",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<GuideLocalizationServiceInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as GuideLocalizationServiceInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param priority  (optional)
    * @return MessagingUserComponentFactoryInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun messagingUserComponentFactory(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, priority: kotlin.Int) : MessagingUserComponentFactoryInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "priority" to listOf("$priority"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/MessagingUserComponentFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<MessagingUserComponentFactoryInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as MessagingUserComponentFactoryInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param attributeChangeNotificationEnabled  (optional)
    * @return OrgApacheAriesJmxFrameworkStateConfigInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheAriesJmxFrameworkStateConfig(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, attributeChangeNotificationEnabled: kotlin.Boolean) : OrgApacheAriesJmxFrameworkStateConfigInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "attributeChangeNotificationEnabled" to listOf("$attributeChangeNotificationEnabled"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.aries.jmx.framework.StateConfig",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheAriesJmxFrameworkStateConfigInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheAriesJmxFrameworkStateConfigInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param orgPeriodapachePeriodfelixPeriodeventadminPeriodThreadPoolSize  (optional)
    * @param orgPeriodapachePeriodfelixPeriodeventadminPeriodAsyncToSyncThreadRatio  (optional)
    * @param orgPeriodapachePeriodfelixPeriodeventadminPeriodTimeout  (optional)
    * @param orgPeriodapachePeriodfelixPeriodeventadminPeriodRequireTopic  (optional)
    * @param orgPeriodapachePeriodfelixPeriodeventadminPeriodIgnoreTimeout  (optional)
    * @param orgPeriodapachePeriodfelixPeriodeventadminPeriodIgnoreTopic  (optional)
    * @return OrgApacheFelixEventadminImplEventAdminInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheFelixEventadminImplEventAdmin(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, orgPeriodapachePeriodfelixPeriodeventadminPeriodThreadPoolSize: kotlin.Int, orgPeriodapachePeriodfelixPeriodeventadminPeriodAsyncToSyncThreadRatio: java.math.BigDecimal, orgPeriodapachePeriodfelixPeriodeventadminPeriodTimeout: kotlin.Int, orgPeriodapachePeriodfelixPeriodeventadminPeriodRequireTopic: kotlin.Boolean, orgPeriodapachePeriodfelixPeriodeventadminPeriodIgnoreTimeout: kotlin.Array<kotlin.String>, orgPeriodapachePeriodfelixPeriodeventadminPeriodIgnoreTopic: kotlin.Array<kotlin.String>) : OrgApacheFelixEventadminImplEventAdminInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "org.apache.felix.eventadmin.ThreadPoolSize" to listOf("$orgPeriodapachePeriodfelixPeriodeventadminPeriodThreadPoolSize"), "org.apache.felix.eventadmin.AsyncToSyncThreadRatio" to listOf("$orgPeriodapachePeriodfelixPeriodeventadminPeriodAsyncToSyncThreadRatio"), "org.apache.felix.eventadmin.Timeout" to listOf("$orgPeriodapachePeriodfelixPeriodeventadminPeriodTimeout"), "org.apache.felix.eventadmin.RequireTopic" to listOf("$orgPeriodapachePeriodfelixPeriodeventadminPeriodRequireTopic"), "org.apache.felix.eventadmin.IgnoreTimeout" to toMultiValue(orgPeriodapachePeriodfelixPeriodeventadminPeriodIgnoreTimeout.toList(), "multi"), "org.apache.felix.eventadmin.IgnoreTopic" to toMultiValue(orgPeriodapachePeriodfelixPeriodeventadminPeriodIgnoreTopic.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.felix.eventadmin.impl.EventAdmin",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheFelixEventadminImplEventAdminInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheFelixEventadminImplEventAdminInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param orgPeriodapachePeriodfelixPeriodhttpPeriodhost  (optional)
    * @param orgPeriodapachePeriodfelixPeriodhttpPeriodenable  (optional)
    * @param orgPeriodosgiPeriodservicePeriodhttpPeriodport  (optional)
    * @param orgPeriodapachePeriodfelixPeriodhttpPeriodtimeout  (optional)
    * @param orgPeriodapachePeriodfelixPeriodhttpsPeriodenable  (optional)
    * @param orgPeriodosgiPeriodservicePeriodhttpPeriodportPeriodsecure  (optional)
    * @param orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystore  (optional)
    * @param orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodpassword  (optional)
    * @param orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkeyPeriodpassword  (optional)
    * @param orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststore  (optional)
    * @param orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststorePeriodpassword  (optional)
    * @param orgPeriodapachePeriodfelixPeriodhttpsPeriodclientcertificate  (optional)
    * @param orgPeriodapachePeriodfelixPeriodhttpPeriodcontextPath  (optional)
    * @param orgPeriodapachePeriodfelixPeriodhttpPeriodmbeans  (optional)
    * @param orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPeriodtimeout  (optional)
    * @param orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodthreadpoolPeriodmax  (optional)
    * @param orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodacceptors  (optional)
    * @param orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodselectors  (optional)
    * @param orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodheaderBufferSize  (optional)
    * @param orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodrequestBufferSize  (optional)
    * @param orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodresponseBufferSize  (optional)
    * @param orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodmaxFormSize  (optional)
    * @param orgPeriodapachePeriodfelixPeriodhttpPeriodpathExclusions  (optional)
    * @param orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodciphersuitesPeriodexcluded  (optional)
    * @param orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodciphersuitesPeriodincluded  (optional)
    * @param orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodsendServerHeader  (optional)
    * @param orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodprotocolsPeriodincluded  (optional)
    * @param orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodprotocolsPeriodexcluded  (optional)
    * @param orgPeriodapachePeriodfelixPeriodproxyPeriodloadPeriodbalancerPeriodconnectionPeriodenable  (optional)
    * @param orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodrenegotiateAllowed  (optional)
    * @param orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodsessionPeriodcookiePeriodhttpOnly  (optional)
    * @param orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodsessionPeriodcookiePeriodsecure  (optional)
    * @param orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionIdPathParameterName  (optional)
    * @param orgPeriodeclipsePeriodjettyPeriodservletPeriodCheckingRemoteSessionIdEncoding  (optional)
    * @param orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionCookie  (optional)
    * @param orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionDomain  (optional)
    * @param orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionPath  (optional)
    * @param orgPeriodeclipsePeriodjettyPeriodservletPeriodMaxAge  (optional)
    * @param orgPeriodapachePeriodfelixPeriodhttpPeriodname  (optional)
    * @param orgPeriodapachePeriodfelixPeriodjettyPeriodgziphandlerPeriodenable  (optional)
    * @param orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodminGzipSize  (optional)
    * @param orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodcompressionLevel  (optional)
    * @param orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodinflateBufferSize  (optional)
    * @param orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodsyncFlush  (optional)
    * @param orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedUserAgents  (optional)
    * @param orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedMethods  (optional)
    * @param orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedMethods  (optional)
    * @param orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedPaths  (optional)
    * @param orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedPaths  (optional)
    * @param orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedMimeTypes  (optional)
    * @param orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedMimeTypes  (optional)
    * @param orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPeriodinvalidate  (optional)
    * @param orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPerioduniqueid  (optional)
    * @return OrgApacheFelixHttpInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheFelixHttp(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, orgPeriodapachePeriodfelixPeriodhttpPeriodhost: kotlin.String, orgPeriodapachePeriodfelixPeriodhttpPeriodenable: kotlin.Boolean, orgPeriodosgiPeriodservicePeriodhttpPeriodport: kotlin.Int, orgPeriodapachePeriodfelixPeriodhttpPeriodtimeout: kotlin.Int, orgPeriodapachePeriodfelixPeriodhttpsPeriodenable: kotlin.Boolean, orgPeriodosgiPeriodservicePeriodhttpPeriodportPeriodsecure: kotlin.Int, orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystore: kotlin.String, orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodpassword: kotlin.String, orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkeyPeriodpassword: kotlin.String, orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststore: kotlin.String, orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststorePeriodpassword: kotlin.String, orgPeriodapachePeriodfelixPeriodhttpsPeriodclientcertificate: kotlin.String, orgPeriodapachePeriodfelixPeriodhttpPeriodcontextPath: kotlin.String, orgPeriodapachePeriodfelixPeriodhttpPeriodmbeans: kotlin.Boolean, orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPeriodtimeout: kotlin.Int, orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodthreadpoolPeriodmax: kotlin.Int, orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodacceptors: kotlin.Int, orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodselectors: kotlin.Int, orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodheaderBufferSize: kotlin.Int, orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodrequestBufferSize: kotlin.Int, orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodresponseBufferSize: kotlin.Int, orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodmaxFormSize: kotlin.Int, orgPeriodapachePeriodfelixPeriodhttpPeriodpathExclusions: kotlin.Array<kotlin.String>, orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodciphersuitesPeriodexcluded: kotlin.Array<kotlin.String>, orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodciphersuitesPeriodincluded: kotlin.Array<kotlin.String>, orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodsendServerHeader: kotlin.Boolean, orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodprotocolsPeriodincluded: kotlin.Array<kotlin.String>, orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodprotocolsPeriodexcluded: kotlin.Array<kotlin.String>, orgPeriodapachePeriodfelixPeriodproxyPeriodloadPeriodbalancerPeriodconnectionPeriodenable: kotlin.Boolean, orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodrenegotiateAllowed: kotlin.Boolean, orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodsessionPeriodcookiePeriodhttpOnly: kotlin.Boolean, orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodsessionPeriodcookiePeriodsecure: kotlin.Boolean, orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionIdPathParameterName: kotlin.String, orgPeriodeclipsePeriodjettyPeriodservletPeriodCheckingRemoteSessionIdEncoding: kotlin.Boolean, orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionCookie: kotlin.String, orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionDomain: kotlin.String, orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionPath: kotlin.String, orgPeriodeclipsePeriodjettyPeriodservletPeriodMaxAge: kotlin.Int, orgPeriodapachePeriodfelixPeriodhttpPeriodname: kotlin.String, orgPeriodapachePeriodfelixPeriodjettyPeriodgziphandlerPeriodenable: kotlin.Boolean, orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodminGzipSize: kotlin.Int, orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodcompressionLevel: kotlin.Int, orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodinflateBufferSize: kotlin.Int, orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodsyncFlush: kotlin.Boolean, orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedUserAgents: kotlin.Array<kotlin.String>, orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedMethods: kotlin.Array<kotlin.String>, orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedMethods: kotlin.Array<kotlin.String>, orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedPaths: kotlin.Array<kotlin.String>, orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedPaths: kotlin.Array<kotlin.String>, orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedMimeTypes: kotlin.Array<kotlin.String>, orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedMimeTypes: kotlin.Array<kotlin.String>, orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPeriodinvalidate: kotlin.Boolean, orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPerioduniqueid: kotlin.Boolean) : OrgApacheFelixHttpInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "org.apache.felix.http.host" to listOf("$orgPeriodapachePeriodfelixPeriodhttpPeriodhost"), "org.apache.felix.http.enable" to listOf("$orgPeriodapachePeriodfelixPeriodhttpPeriodenable"), "org.osgi.service.http.port" to listOf("$orgPeriodosgiPeriodservicePeriodhttpPeriodport"), "org.apache.felix.http.timeout" to listOf("$orgPeriodapachePeriodfelixPeriodhttpPeriodtimeout"), "org.apache.felix.https.enable" to listOf("$orgPeriodapachePeriodfelixPeriodhttpsPeriodenable"), "org.osgi.service.http.port.secure" to listOf("$orgPeriodosgiPeriodservicePeriodhttpPeriodportPeriodsecure"), "org.apache.felix.https.keystore" to listOf("$orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystore"), "org.apache.felix.https.keystore.password" to listOf("$orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodpassword"), "org.apache.felix.https.keystore.key.password" to listOf("$orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkeyPeriodpassword"), "org.apache.felix.https.truststore" to listOf("$orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststore"), "org.apache.felix.https.truststore.password" to listOf("$orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststorePeriodpassword"), "org.apache.felix.https.clientcertificate" to listOf("$orgPeriodapachePeriodfelixPeriodhttpsPeriodclientcertificate"), "org.apache.felix.http.context_path" to listOf("$orgPeriodapachePeriodfelixPeriodhttpPeriodcontextPath"), "org.apache.felix.http.mbeans" to listOf("$orgPeriodapachePeriodfelixPeriodhttpPeriodmbeans"), "org.apache.felix.http.session.timeout" to listOf("$orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPeriodtimeout"), "org.apache.felix.http.jetty.threadpool.max" to listOf("$orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodthreadpoolPeriodmax"), "org.apache.felix.http.jetty.acceptors" to listOf("$orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodacceptors"), "org.apache.felix.http.jetty.selectors" to listOf("$orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodselectors"), "org.apache.felix.http.jetty.headerBufferSize" to listOf("$orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodheaderBufferSize"), "org.apache.felix.http.jetty.requestBufferSize" to listOf("$orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodrequestBufferSize"), "org.apache.felix.http.jetty.responseBufferSize" to listOf("$orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodresponseBufferSize"), "org.apache.felix.http.jetty.maxFormSize" to listOf("$orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodmaxFormSize"), "org.apache.felix.http.path_exclusions" to toMultiValue(orgPeriodapachePeriodfelixPeriodhttpPeriodpathExclusions.toList(), "multi"), "org.apache.felix.https.jetty.ciphersuites.excluded" to toMultiValue(orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodciphersuitesPeriodexcluded.toList(), "multi"), "org.apache.felix.https.jetty.ciphersuites.included" to toMultiValue(orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodciphersuitesPeriodincluded.toList(), "multi"), "org.apache.felix.http.jetty.sendServerHeader" to listOf("$orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodsendServerHeader"), "org.apache.felix.https.jetty.protocols.included" to toMultiValue(orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodprotocolsPeriodincluded.toList(), "multi"), "org.apache.felix.https.jetty.protocols.excluded" to toMultiValue(orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodprotocolsPeriodexcluded.toList(), "multi"), "org.apache.felix.proxy.load.balancer.connection.enable" to listOf("$orgPeriodapachePeriodfelixPeriodproxyPeriodloadPeriodbalancerPeriodconnectionPeriodenable"), "org.apache.felix.https.jetty.renegotiateAllowed" to listOf("$orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodrenegotiateAllowed"), "org.apache.felix.https.jetty.session.cookie.httpOnly" to listOf("$orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodsessionPeriodcookiePeriodhttpOnly"), "org.apache.felix.https.jetty.session.cookie.secure" to listOf("$orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodsessionPeriodcookiePeriodsecure"), "org.eclipse.jetty.servlet.SessionIdPathParameterName" to listOf("$orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionIdPathParameterName"), "org.eclipse.jetty.servlet.CheckingRemoteSessionIdEncoding" to listOf("$orgPeriodeclipsePeriodjettyPeriodservletPeriodCheckingRemoteSessionIdEncoding"), "org.eclipse.jetty.servlet.SessionCookie" to listOf("$orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionCookie"), "org.eclipse.jetty.servlet.SessionDomain" to listOf("$orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionDomain"), "org.eclipse.jetty.servlet.SessionPath" to listOf("$orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionPath"), "org.eclipse.jetty.servlet.MaxAge" to listOf("$orgPeriodeclipsePeriodjettyPeriodservletPeriodMaxAge"), "org.apache.felix.http.name" to listOf("$orgPeriodapachePeriodfelixPeriodhttpPeriodname"), "org.apache.felix.jetty.gziphandler.enable" to listOf("$orgPeriodapachePeriodfelixPeriodjettyPeriodgziphandlerPeriodenable"), "org.apache.felix.jetty.gzip.minGzipSize" to listOf("$orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodminGzipSize"), "org.apache.felix.jetty.gzip.compressionLevel" to listOf("$orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodcompressionLevel"), "org.apache.felix.jetty.gzip.inflateBufferSize" to listOf("$orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodinflateBufferSize"), "org.apache.felix.jetty.gzip.syncFlush" to listOf("$orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodsyncFlush"), "org.apache.felix.jetty.gzip.excludedUserAgents" to toMultiValue(orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedUserAgents.toList(), "multi"), "org.apache.felix.jetty.gzip.includedMethods" to toMultiValue(orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedMethods.toList(), "multi"), "org.apache.felix.jetty.gzip.excludedMethods" to toMultiValue(orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedMethods.toList(), "multi"), "org.apache.felix.jetty.gzip.includedPaths" to toMultiValue(orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedPaths.toList(), "multi"), "org.apache.felix.jetty.gzip.excludedPaths" to toMultiValue(orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedPaths.toList(), "multi"), "org.apache.felix.jetty.gzip.includedMimeTypes" to toMultiValue(orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedMimeTypes.toList(), "multi"), "org.apache.felix.jetty.gzip.excludedMimeTypes" to toMultiValue(orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedMimeTypes.toList(), "multi"), "org.apache.felix.http.session.invalidate" to listOf("$orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPeriodinvalidate"), "org.apache.felix.http.session.uniqueid" to listOf("$orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPerioduniqueid"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.felix.http",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheFelixHttpInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheFelixHttpInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param sslForwardPeriodheader  (optional)
    * @param sslForwardPeriodvalue  (optional)
    * @param sslForwardCertPeriodheader  (optional)
    * @param rewritePeriodabsolutePeriodurls  (optional)
    * @return OrgApacheFelixHttpSslfilterSslFilterInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheFelixHttpSslfilterSslFilter(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, sslForwardPeriodheader: kotlin.String, sslForwardPeriodvalue: kotlin.String, sslForwardCertPeriodheader: kotlin.String, rewritePeriodabsolutePeriodurls: kotlin.Boolean) : OrgApacheFelixHttpSslfilterSslFilterInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "ssl-forward.header" to listOf("$sslForwardPeriodheader"), "ssl-forward.value" to listOf("$sslForwardPeriodvalue"), "ssl-forward-cert.header" to listOf("$sslForwardCertPeriodheader"), "rewrite.absolute.urls" to listOf("$rewritePeriodabsolutePeriodurls"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.felix.http.sslfilter.SslFilter",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheFelixHttpSslfilterSslFilterInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheFelixHttpSslfilterSslFilterInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param jaasPeriodcontrolFlag  (optional)
    * @param jaasPeriodranking  (optional)
    * @param jaasPeriodrealmName  (optional)
    * @param jaasPeriodclassname  (optional)
    * @param jaasPeriodoptions  (optional)
    * @return OrgApacheFelixJaasConfigurationFactoryInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheFelixJaasConfigurationFactory(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, jaasPeriodcontrolFlag: kotlin.String, jaasPeriodranking: kotlin.Int, jaasPeriodrealmName: kotlin.String, jaasPeriodclassname: kotlin.String, jaasPeriodoptions: kotlin.Array<kotlin.String>) : OrgApacheFelixJaasConfigurationFactoryInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "jaas.controlFlag" to listOf("$jaasPeriodcontrolFlag"), "jaas.ranking" to listOf("$jaasPeriodranking"), "jaas.realmName" to listOf("$jaasPeriodrealmName"), "jaas.classname" to listOf("$jaasPeriodclassname"), "jaas.options" to toMultiValue(jaasPeriodoptions.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.felix.jaas.Configuration.factory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheFelixJaasConfigurationFactoryInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheFelixJaasConfigurationFactoryInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param jaasPerioddefaultRealmName  (optional)
    * @param jaasPeriodconfigProviderName  (optional)
    * @param jaasPeriodglobalConfigPolicy  (optional)
    * @return OrgApacheFelixJaasConfigurationSpiInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheFelixJaasConfigurationSpi(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, jaasPerioddefaultRealmName: kotlin.String, jaasPeriodconfigProviderName: kotlin.String, jaasPeriodglobalConfigPolicy: kotlin.String) : OrgApacheFelixJaasConfigurationSpiInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "jaas.defaultRealmName" to listOf("$jaasPerioddefaultRealmName"), "jaas.configProviderName" to listOf("$jaasPeriodconfigProviderName"), "jaas.globalConfigPolicy" to listOf("$jaasPeriodglobalConfigPolicy"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.felix.jaas.ConfigurationSpi",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheFelixJaasConfigurationSpiInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheFelixJaasConfigurationSpiInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param dsPeriodloglevel  (optional)
    * @param dsPeriodfactoryPeriodenabled  (optional)
    * @param dsPerioddelayedPeriodkeepInstances  (optional)
    * @param dsPeriodlockPeriodtimeoutPeriodmilliseconds  (optional)
    * @param dsPeriodstopPeriodtimeoutPeriodmilliseconds  (optional)
    * @param dsPeriodglobalPeriodextender  (optional)
    * @return OrgApacheFelixScrScrServiceInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheFelixScrScrService(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, dsPeriodloglevel: kotlin.Int, dsPeriodfactoryPeriodenabled: kotlin.Boolean, dsPerioddelayedPeriodkeepInstances: kotlin.Boolean, dsPeriodlockPeriodtimeoutPeriodmilliseconds: kotlin.Int, dsPeriodstopPeriodtimeoutPeriodmilliseconds: kotlin.Int, dsPeriodglobalPeriodextender: kotlin.Boolean) : OrgApacheFelixScrScrServiceInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "ds.loglevel" to listOf("$dsPeriodloglevel"), "ds.factory.enabled" to listOf("$dsPeriodfactoryPeriodenabled"), "ds.delayed.keepInstances" to listOf("$dsPerioddelayedPeriodkeepInstances"), "ds.lock.timeout.milliseconds" to listOf("$dsPeriodlockPeriodtimeoutPeriodmilliseconds"), "ds.stop.timeout.milliseconds" to listOf("$dsPeriodstopPeriodtimeoutPeriodmilliseconds"), "ds.global.extender" to listOf("$dsPeriodglobalPeriodextender"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.felix.scr.ScrService",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheFelixScrScrServiceInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheFelixScrScrServiceInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param componentsPeriodlist  (optional)
    * @param type  (optional)
    * @return OrgApacheFelixSystemreadyImplComponentsCheckInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheFelixSystemreadyImplComponentsCheck(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, componentsPeriodlist: kotlin.Array<kotlin.String>, type: kotlin.String) : OrgApacheFelixSystemreadyImplComponentsCheckInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "components.list" to toMultiValue(componentsPeriodlist.toList(), "multi"), "type" to listOf("$type"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.felix.systemready.impl.ComponentsCheck",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheFelixSystemreadyImplComponentsCheckInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheFelixSystemreadyImplComponentsCheckInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param timeout  (optional)
    * @param targetPeriodstartPeriodlevel  (optional)
    * @param targetPeriodstartPeriodlevelPeriodpropPeriodname  (optional)
    * @param type  (optional)
    * @return OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheFelixSystemreadyImplFrameworkStartCheck(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, timeout: kotlin.Int, targetPeriodstartPeriodlevel: kotlin.Int, targetPeriodstartPeriodlevelPeriodpropPeriodname: kotlin.String, type: kotlin.String) : OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "timeout" to listOf("$timeout"), "target.start.level" to listOf("$targetPeriodstartPeriodlevel"), "target.start.level.prop.name" to listOf("$targetPeriodstartPeriodlevelPeriodpropPeriodname"), "type" to listOf("$type"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.felix.systemready.impl.FrameworkStartCheck",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param servicesPeriodlist  (optional)
    * @param type  (optional)
    * @return OrgApacheFelixSystemreadyImplServicesCheckInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheFelixSystemreadyImplServicesCheck(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, servicesPeriodlist: kotlin.Array<kotlin.String>, type: kotlin.String) : OrgApacheFelixSystemreadyImplServicesCheckInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "services.list" to toMultiValue(servicesPeriodlist.toList(), "multi"), "type" to listOf("$type"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.felix.systemready.impl.ServicesCheck",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheFelixSystemreadyImplServicesCheckInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheFelixSystemreadyImplServicesCheckInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern  (optional)
    * @param osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect  (optional)
    * @return OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheFelixSystemreadyImplServletSystemAliveServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern: kotlin.String, osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect: kotlin.String) : OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "osgi.http.whiteboard.servlet.pattern" to listOf("$osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern"), "osgi.http.whiteboard.context.select" to listOf("$osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemAliveServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern  (optional)
    * @param osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect  (optional)
    * @return OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheFelixSystemreadyImplServletSystemReadyServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern: kotlin.String, osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect: kotlin.String) : OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "osgi.http.whiteboard.servlet.pattern" to listOf("$osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern"), "osgi.http.whiteboard.context.select" to listOf("$osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemReadyServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param pollPeriodinterval  (optional)
    * @return OrgApacheFelixSystemreadySystemReadyMonitorInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheFelixSystemreadySystemReadyMonitor(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, pollPeriodinterval: kotlin.Int) : OrgApacheFelixSystemreadySystemReadyMonitorInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "poll.interval" to listOf("$pollPeriodinterval"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.felix.systemready.SystemReadyMonitor",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheFelixSystemreadySystemReadyMonitorInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheFelixSystemreadySystemReadyMonitorInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param managerPeriodroot  (optional)
    * @param httpPeriodservicePeriodfilter  (optional)
    * @param defaultPeriodrender  (optional)
    * @param realm  (optional)
    * @param username  (optional)
    * @param password  (optional)
    * @param category  (optional)
    * @param locale  (optional)
    * @param loglevel  (optional)
    * @param plugins  (optional)
    * @return OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheFelixWebconsoleInternalServletOsgiManager(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, managerPeriodroot: kotlin.String, httpPeriodservicePeriodfilter: kotlin.String, defaultPeriodrender: kotlin.String, realm: kotlin.String, username: kotlin.String, password: kotlin.String, category: kotlin.String, locale: kotlin.String, loglevel: kotlin.Int, plugins: kotlin.String) : OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "manager.root" to listOf("$managerPeriodroot"), "http.service.filter" to listOf("$httpPeriodservicePeriodfilter"), "default.render" to listOf("$defaultPeriodrender"), "realm" to listOf("$realm"), "username" to listOf("$username"), "password" to listOf("$password"), "category" to listOf("$category"), "locale" to listOf("$locale"), "loglevel" to listOf("$loglevel"), "plugins" to listOf("$plugins"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.felix.webconsole.internal.servlet.OsgiManager",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param maxPeriodsize  (optional)
    * @return OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheFelixWebconsolePluginsEventInternalPluginServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, maxPeriodsize: kotlin.Int) : OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "max.size" to listOf("$maxPeriodsize"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.felix.webconsole.plugins.event.internal.PluginServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param felixPeriodmemoryusagePerioddumpPeriodthreshold  (optional)
    * @param felixPeriodmemoryusagePerioddumpPeriodinterval  (optional)
    * @param felixPeriodmemoryusagePerioddumpPeriodlocation  (optional)
    * @return OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, felixPeriodmemoryusagePerioddumpPeriodthreshold: kotlin.Int, felixPeriodmemoryusagePerioddumpPeriodinterval: kotlin.Int, felixPeriodmemoryusagePerioddumpPeriodlocation: kotlin.String) : OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "felix.memoryusage.dump.threshold" to listOf("$felixPeriodmemoryusagePerioddumpPeriodthreshold"), "felix.memoryusage.dump.interval" to listOf("$felixPeriodmemoryusagePerioddumpPeriodinterval"), "felix.memoryusage.dump.location" to listOf("$felixPeriodmemoryusagePerioddumpPeriodlocation"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.felix.webconsole.plugins.memoryusage.internal.MemoryUsageConfigurator",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param proxyPeriodenabled  (optional)
    * @param proxyPeriodhost  (optional)
    * @param proxyPeriodport  (optional)
    * @param proxyPerioduser  (optional)
    * @param proxyPeriodpassword  (optional)
    * @param proxyPeriodexceptions  (optional)
    * @return OrgApacheHttpProxyconfiguratorInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheHttpProxyconfigurator(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, proxyPeriodenabled: kotlin.Boolean, proxyPeriodhost: kotlin.String, proxyPeriodport: kotlin.Int, proxyPerioduser: kotlin.String, proxyPeriodpassword: kotlin.String, proxyPeriodexceptions: kotlin.Array<kotlin.String>) : OrgApacheHttpProxyconfiguratorInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "proxy.enabled" to listOf("$proxyPeriodenabled"), "proxy.host" to listOf("$proxyPeriodhost"), "proxy.port" to listOf("$proxyPeriodport"), "proxy.user" to listOf("$proxyPerioduser"), "proxy.password" to listOf("$proxyPeriodpassword"), "proxy.exceptions" to toMultiValue(proxyPeriodexceptions.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.http.proxyconfigurator",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheHttpProxyconfiguratorInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheHttpProxyconfiguratorInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param dir  (optional)
    * @return OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, dir: kotlin.String) : OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "dir" to listOf("$dir"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreTextProviderService",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param path  (optional)
    * @return OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, path: kotlin.String) : OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "path" to listOf("$path"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.FileDataStore",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param mongouri  (optional)
    * @param db  (optional)
    * @param socketKeepAlive  (optional)
    * @param cache  (optional)
    * @param nodeCachePercentage  (optional)
    * @param prevDocCachePercentage  (optional)
    * @param childrenCachePercentage  (optional)
    * @param diffCachePercentage  (optional)
    * @param cacheSegmentCount  (optional)
    * @param cacheStackMoveDistance  (optional)
    * @param blobCacheSize  (optional)
    * @param persistentCache  (optional)
    * @param journalCache  (optional)
    * @param customBlobStore  (optional)
    * @param journalGCInterval  (optional)
    * @param journalGCMaxAge  (optional)
    * @param prefetchExternalChanges  (optional)
    * @param role  (optional)
    * @param versionGcMaxAgeInSecs  (optional)
    * @param versionGCExpression  (optional)
    * @param versionGCTimeLimitInSecs  (optional)
    * @param blobGcMaxAgeInSecs  (optional)
    * @param blobTrackSnapshotIntervalInSecs  (optional)
    * @param repositoryPeriodhome  (optional)
    * @param maxReplicationLagInSecs  (optional)
    * @param documentStoreType  (optional)
    * @param bundlingDisabled  (optional)
    * @param updateLimit  (optional)
    * @param persistentCacheIncludes  (optional)
    * @param leaseCheckMode  (optional)
    * @return OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, mongouri: kotlin.String, db: kotlin.String, socketKeepAlive: kotlin.Boolean, cache: kotlin.Int, nodeCachePercentage: kotlin.Int, prevDocCachePercentage: kotlin.Int, childrenCachePercentage: kotlin.Int, diffCachePercentage: kotlin.Int, cacheSegmentCount: kotlin.Int, cacheStackMoveDistance: kotlin.Int, blobCacheSize: kotlin.Int, persistentCache: kotlin.String, journalCache: kotlin.String, customBlobStore: kotlin.Boolean, journalGCInterval: kotlin.Int, journalGCMaxAge: kotlin.Int, prefetchExternalChanges: kotlin.Boolean, role: kotlin.String, versionGcMaxAgeInSecs: kotlin.Int, versionGCExpression: kotlin.String, versionGCTimeLimitInSecs: kotlin.Int, blobGcMaxAgeInSecs: kotlin.Int, blobTrackSnapshotIntervalInSecs: kotlin.Int, repositoryPeriodhome: kotlin.String, maxReplicationLagInSecs: kotlin.Int, documentStoreType: kotlin.String, bundlingDisabled: kotlin.Boolean, updateLimit: kotlin.Int, persistentCacheIncludes: kotlin.Array<kotlin.String>, leaseCheckMode: kotlin.String) : OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "mongouri" to listOf("$mongouri"), "db" to listOf("$db"), "socketKeepAlive" to listOf("$socketKeepAlive"), "cache" to listOf("$cache"), "nodeCachePercentage" to listOf("$nodeCachePercentage"), "prevDocCachePercentage" to listOf("$prevDocCachePercentage"), "childrenCachePercentage" to listOf("$childrenCachePercentage"), "diffCachePercentage" to listOf("$diffCachePercentage"), "cacheSegmentCount" to listOf("$cacheSegmentCount"), "cacheStackMoveDistance" to listOf("$cacheStackMoveDistance"), "blobCacheSize" to listOf("$blobCacheSize"), "persistentCache" to listOf("$persistentCache"), "journalCache" to listOf("$journalCache"), "customBlobStore" to listOf("$customBlobStore"), "journalGCInterval" to listOf("$journalGCInterval"), "journalGCMaxAge" to listOf("$journalGCMaxAge"), "prefetchExternalChanges" to listOf("$prefetchExternalChanges"), "role" to listOf("$role"), "versionGcMaxAgeInSecs" to listOf("$versionGcMaxAgeInSecs"), "versionGCExpression" to listOf("$versionGCExpression"), "versionGCTimeLimitInSecs" to listOf("$versionGCTimeLimitInSecs"), "blobGcMaxAgeInSecs" to listOf("$blobGcMaxAgeInSecs"), "blobTrackSnapshotIntervalInSecs" to listOf("$blobTrackSnapshotIntervalInSecs"), "repository.home" to listOf("$repositoryPeriodhome"), "maxReplicationLagInSecs" to listOf("$maxReplicationLagInSecs"), "documentStoreType" to listOf("$documentStoreType"), "bundlingDisabled" to listOf("$bundlingDisabled"), "updateLimit" to listOf("$updateLimit"), "persistentCacheIncludes" to toMultiValue(persistentCacheIncludes.toList(), "multi"), "leaseCheckMode" to listOf("$leaseCheckMode"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreService",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param persistentCacheIncludes  (optional)
    * @return OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, persistentCacheIncludes: kotlin.Array<kotlin.String>) : OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "persistentCacheIncludes" to toMultiValue(persistentCacheIncludes.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreServicePreset",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param includedPaths  (optional)
    * @param enableAsyncObserver  (optional)
    * @param observerQueueSize  (optional)
    * @return OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, includedPaths: kotlin.Array<kotlin.String>, enableAsyncObserver: kotlin.Boolean, observerQueueSize: kotlin.Int) : OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "includedPaths" to toMultiValue(includedPaths.toList(), "multi"), "enableAsyncObserver" to listOf("$enableAsyncObserver"), "observerQueueSize" to listOf("$observerQueueSize"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.secondary.SecondaryStoreCacheService",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param asyncConfigs  (optional)
    * @param leaseTimeOutMinutes  (optional)
    * @param failingIndexTimeoutSeconds  (optional)
    * @param errorWarnIntervalSeconds  (optional)
    * @return OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheJackrabbitOakPluginsIndexAsyncIndexerService(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, asyncConfigs: kotlin.Array<kotlin.String>, leaseTimeOutMinutes: kotlin.Int, failingIndexTimeoutSeconds: kotlin.Int, errorWarnIntervalSeconds: kotlin.Int) : OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "asyncConfigs" to toMultiValue(asyncConfigs.toList(), "multi"), "leaseTimeOutMinutes" to listOf("$leaseTimeOutMinutes"), "failingIndexTimeoutSeconds" to listOf("$failingIndexTimeoutSeconds"), "errorWarnIntervalSeconds" to listOf("$errorWarnIntervalSeconds"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.AsyncIndexerService",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param disabled  (optional)
    * @param debug  (optional)
    * @param localIndexDir  (optional)
    * @param enableOpenIndexAsync  (optional)
    * @param threadPoolSize  (optional)
    * @param prefetchIndexFiles  (optional)
    * @param extractedTextCacheSizeInMB  (optional)
    * @param extractedTextCacheExpiryInSecs  (optional)
    * @param alwaysUsePreExtractedCache  (optional)
    * @param booleanClauseLimit  (optional)
    * @param enableHybridIndexing  (optional)
    * @param hybridQueueSize  (optional)
    * @param disableStoredIndexDefinition  (optional)
    * @param deletedBlobsCollectionEnabled  (optional)
    * @param propIndexCleanerIntervalInSecs  (optional)
    * @param enableSingleBlobIndexFiles  (optional)
    * @return OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, disabled: kotlin.Boolean, debug: kotlin.Boolean, localIndexDir: kotlin.String, enableOpenIndexAsync: kotlin.Boolean, threadPoolSize: kotlin.Int, prefetchIndexFiles: kotlin.Boolean, extractedTextCacheSizeInMB: kotlin.Int, extractedTextCacheExpiryInSecs: kotlin.Int, alwaysUsePreExtractedCache: kotlin.Boolean, booleanClauseLimit: kotlin.Int, enableHybridIndexing: kotlin.Boolean, hybridQueueSize: kotlin.Int, disableStoredIndexDefinition: kotlin.Boolean, deletedBlobsCollectionEnabled: kotlin.Boolean, propIndexCleanerIntervalInSecs: kotlin.Int, enableSingleBlobIndexFiles: kotlin.Boolean) : OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "disabled" to listOf("$disabled"), "debug" to listOf("$debug"), "localIndexDir" to listOf("$localIndexDir"), "enableOpenIndexAsync" to listOf("$enableOpenIndexAsync"), "threadPoolSize" to listOf("$threadPoolSize"), "prefetchIndexFiles" to listOf("$prefetchIndexFiles"), "extractedTextCacheSizeInMB" to listOf("$extractedTextCacheSizeInMB"), "extractedTextCacheExpiryInSecs" to listOf("$extractedTextCacheExpiryInSecs"), "alwaysUsePreExtractedCache" to listOf("$alwaysUsePreExtractedCache"), "booleanClauseLimit" to listOf("$booleanClauseLimit"), "enableHybridIndexing" to listOf("$enableHybridIndexing"), "hybridQueueSize" to listOf("$hybridQueueSize"), "disableStoredIndexDefinition" to listOf("$disableStoredIndexDefinition"), "deletedBlobsCollectionEnabled" to listOf("$deletedBlobsCollectionEnabled"), "propIndexCleanerIntervalInSecs" to listOf("$propIndexCleanerIntervalInSecs"), "enableSingleBlobIndexFiles" to listOf("$enableSingleBlobIndexFiles"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexProviderService",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param solrPeriodhomePeriodpath  (optional)
    * @param solrPeriodcorePeriodname  (optional)
    * @return OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, solrPeriodhomePeriodpath: kotlin.String, solrPeriodcorePeriodname: kotlin.String) : OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "solr.home.path" to listOf("$solrPeriodhomePeriodpath"), "solr.core.name" to listOf("$solrPeriodcorePeriodname"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.EmbeddedSolrServerConfigurationProvider",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param enabled  (optional)
    * @return OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, enabled: kotlin.Boolean) : OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "enabled" to listOf("$enabled"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.NodeStateSolrServersObserverService",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param pathPerioddescPeriodfield  (optional)
    * @param pathPeriodchildPeriodfield  (optional)
    * @param pathPeriodparentPeriodfield  (optional)
    * @param pathPeriodexactPeriodfield  (optional)
    * @param catchPeriodallPeriodfield  (optional)
    * @param collapsedPeriodpathPeriodfield  (optional)
    * @param pathPerioddepthPeriodfield  (optional)
    * @param commitPeriodpolicy  (optional)
    * @param rows  (optional)
    * @param pathPeriodrestrictions  (optional)
    * @param propertyPeriodrestrictions  (optional)
    * @param primarytypesPeriodrestrictions  (optional)
    * @param ignoredPeriodproperties  (optional)
    * @param usedPeriodproperties  (optional)
    * @param typePeriodmappings  (optional)
    * @param propertyPeriodmappings  (optional)
    * @param collapsePeriodjcrcontentPeriodnodes  (optional)
    * @return OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, pathPerioddescPeriodfield: kotlin.String, pathPeriodchildPeriodfield: kotlin.String, pathPeriodparentPeriodfield: kotlin.String, pathPeriodexactPeriodfield: kotlin.String, catchPeriodallPeriodfield: kotlin.String, collapsedPeriodpathPeriodfield: kotlin.String, pathPerioddepthPeriodfield: kotlin.String, commitPeriodpolicy: kotlin.String, rows: kotlin.Int, pathPeriodrestrictions: kotlin.Boolean, propertyPeriodrestrictions: kotlin.Boolean, primarytypesPeriodrestrictions: kotlin.Boolean, ignoredPeriodproperties: kotlin.Array<kotlin.String>, usedPeriodproperties: kotlin.Array<kotlin.String>, typePeriodmappings: kotlin.Array<kotlin.String>, propertyPeriodmappings: kotlin.Array<kotlin.String>, collapsePeriodjcrcontentPeriodnodes: kotlin.Boolean) : OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "path.desc.field" to listOf("$pathPerioddescPeriodfield"), "path.child.field" to listOf("$pathPeriodchildPeriodfield"), "path.parent.field" to listOf("$pathPeriodparentPeriodfield"), "path.exact.field" to listOf("$pathPeriodexactPeriodfield"), "catch.all.field" to listOf("$catchPeriodallPeriodfield"), "collapsed.path.field" to listOf("$collapsedPeriodpathPeriodfield"), "path.depth.field" to listOf("$pathPerioddepthPeriodfield"), "commit.policy" to listOf("$commitPeriodpolicy"), "rows" to listOf("$rows"), "path.restrictions" to listOf("$pathPeriodrestrictions"), "property.restrictions" to listOf("$propertyPeriodrestrictions"), "primarytypes.restrictions" to listOf("$primarytypesPeriodrestrictions"), "ignored.properties" to toMultiValue(ignoredPeriodproperties.toList(), "multi"), "used.properties" to toMultiValue(usedPeriodproperties.toList(), "multi"), "type.mappings" to toMultiValue(typePeriodmappings.toList(), "multi"), "property.mappings" to toMultiValue(propertyPeriodmappings.toList(), "multi"), "collapse.jcrcontent.nodes" to listOf("$collapsePeriodjcrcontentPeriodnodes"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.OakSolrConfigurationProviderService",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param solrPeriodhttpPeriodurl  (optional)
    * @param solrPeriodzkPeriodhost  (optional)
    * @param solrPeriodcollection  (optional)
    * @param solrPeriodsocketPeriodtimeout  (optional)
    * @param solrPeriodconnectionPeriodtimeout  (optional)
    * @param solrPeriodshardsPeriodno  (optional)
    * @param solrPeriodreplicationPeriodfactor  (optional)
    * @param solrPeriodconfPerioddir  (optional)
    * @return OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, solrPeriodhttpPeriodurl: kotlin.String, solrPeriodzkPeriodhost: kotlin.String, solrPeriodcollection: kotlin.String, solrPeriodsocketPeriodtimeout: kotlin.Int, solrPeriodconnectionPeriodtimeout: kotlin.Int, solrPeriodshardsPeriodno: kotlin.Int, solrPeriodreplicationPeriodfactor: kotlin.Int, solrPeriodconfPerioddir: kotlin.String) : OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "solr.http.url" to listOf("$solrPeriodhttpPeriodurl"), "solr.zk.host" to listOf("$solrPeriodzkPeriodhost"), "solr.collection" to listOf("$solrPeriodcollection"), "solr.socket.timeout" to listOf("$solrPeriodsocketPeriodtimeout"), "solr.connection.timeout" to listOf("$solrPeriodconnectionPeriodtimeout"), "solr.shards.no" to listOf("$solrPeriodshardsPeriodno"), "solr.replication.factor" to listOf("$solrPeriodreplicationPeriodfactor"), "solr.conf.dir" to listOf("$solrPeriodconfPerioddir"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.RemoteSolrServerConfigurationProvider",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param queryPeriodaggregation  (optional)
    * @return OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, queryPeriodaggregation: kotlin.Boolean) : OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "query.aggregation" to listOf("$queryPeriodaggregation"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrQueryIndexProviderService",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param serverPeriodtype  (optional)
    * @return OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, serverPeriodtype: kotlin.String) : OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "server.type" to listOf("$serverPeriodtype"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrServerProviderService",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param providerType  (optional)
    * @return OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, providerType: kotlin.String) : OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "providerType" to listOf("$providerType"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.metric.StatisticsProviderFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param maxItems  (optional)
    * @param maxPathDepth  (optional)
    * @param enabled  (optional)
    * @return OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheJackrabbitOakPluginsObservationChangeCollectorProvider(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, maxItems: kotlin.Int, maxPathDepth: kotlin.Int, enabled: kotlin.Boolean) : OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "maxItems" to listOf("$maxItems"), "maxPathDepth" to listOf("$maxPathDepth"), "enabled" to listOf("$enabled"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.observation.ChangeCollectorProvider",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param queryLimitInMemory  (optional)
    * @param queryLimitReads  (optional)
    * @param queryFailTraversal  (optional)
    * @param fastQuerySize  (optional)
    * @return OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheJackrabbitOakQueryQueryEngineSettingsService(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, queryLimitInMemory: kotlin.Int, queryLimitReads: kotlin.Int, queryFailTraversal: kotlin.Boolean, fastQuerySize: kotlin.Boolean) : OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "queryLimitInMemory" to listOf("$queryLimitInMemory"), "queryLimitReads" to listOf("$queryLimitReads"), "queryFailTraversal" to listOf("$queryFailTraversal"), "fastQuerySize" to listOf("$fastQuerySize"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.jackrabbit.oak.query.QueryEngineSettingsService",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param orgPeriodapachePeriodjackrabbitPeriodoakPeriodauthenticationPeriodappName  (optional)
    * @param orgPeriodapachePeriodjackrabbitPeriodoakPeriodauthenticationPeriodconfigSpiName  (optional)
    * @return OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, orgPeriodapachePeriodjackrabbitPeriodoakPeriodauthenticationPeriodappName: kotlin.String, orgPeriodapachePeriodjackrabbitPeriodoakPeriodauthenticationPeriodconfigSpiName: kotlin.String) : OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "org.apache.jackrabbit.oak.authentication.appName" to listOf("$orgPeriodapachePeriodjackrabbitPeriodoakPeriodauthenticationPeriodappName"), "org.apache.jackrabbit.oak.authentication.configSpiName" to listOf("$orgPeriodapachePeriodjackrabbitPeriodoakPeriodauthenticationPeriodconfigSpiName"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.AuthenticationConfigurationImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param providerPeriodname  (optional)
    * @param hostPeriodname  (optional)
    * @param hostPeriodport  (optional)
    * @param hostPeriodssl  (optional)
    * @param hostPeriodtls  (optional)
    * @param hostPeriodnoCertCheck  (optional)
    * @param bindPerioddn  (optional)
    * @param bindPeriodpassword  (optional)
    * @param searchTimeout  (optional)
    * @param adminPoolPeriodmaxActive  (optional)
    * @param adminPoolPeriodlookupOnValidate  (optional)
    * @param userPoolPeriodmaxActive  (optional)
    * @param userPoolPeriodlookupOnValidate  (optional)
    * @param userPeriodbaseDN  (optional)
    * @param userPeriodobjectclass  (optional)
    * @param userPeriodidAttribute  (optional)
    * @param userPeriodextraFilter  (optional)
    * @param userPeriodmakeDnPath  (optional)
    * @param groupPeriodbaseDN  (optional)
    * @param groupPeriodobjectclass  (optional)
    * @param groupPeriodnameAttribute  (optional)
    * @param groupPeriodextraFilter  (optional)
    * @param groupPeriodmakeDnPath  (optional)
    * @param groupPeriodmemberAttribute  (optional)
    * @param useUidForExtId  (optional)
    * @param customattributes  (optional)
    * @return OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, providerPeriodname: kotlin.String, hostPeriodname: kotlin.String, hostPeriodport: kotlin.Int, hostPeriodssl: kotlin.Boolean, hostPeriodtls: kotlin.Boolean, hostPeriodnoCertCheck: kotlin.Boolean, bindPerioddn: kotlin.String, bindPeriodpassword: kotlin.String, searchTimeout: kotlin.String, adminPoolPeriodmaxActive: kotlin.Int, adminPoolPeriodlookupOnValidate: kotlin.Boolean, userPoolPeriodmaxActive: kotlin.Int, userPoolPeriodlookupOnValidate: kotlin.Boolean, userPeriodbaseDN: kotlin.String, userPeriodobjectclass: kotlin.Array<kotlin.String>, userPeriodidAttribute: kotlin.String, userPeriodextraFilter: kotlin.String, userPeriodmakeDnPath: kotlin.Boolean, groupPeriodbaseDN: kotlin.String, groupPeriodobjectclass: kotlin.Array<kotlin.String>, groupPeriodnameAttribute: kotlin.String, groupPeriodextraFilter: kotlin.String, groupPeriodmakeDnPath: kotlin.Boolean, groupPeriodmemberAttribute: kotlin.String, useUidForExtId: kotlin.Boolean, customattributes: kotlin.Array<kotlin.String>) : OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "provider.name" to listOf("$providerPeriodname"), "host.name" to listOf("$hostPeriodname"), "host.port" to listOf("$hostPeriodport"), "host.ssl" to listOf("$hostPeriodssl"), "host.tls" to listOf("$hostPeriodtls"), "host.noCertCheck" to listOf("$hostPeriodnoCertCheck"), "bind.dn" to listOf("$bindPerioddn"), "bind.password" to listOf("$bindPeriodpassword"), "searchTimeout" to listOf("$searchTimeout"), "adminPool.maxActive" to listOf("$adminPoolPeriodmaxActive"), "adminPool.lookupOnValidate" to listOf("$adminPoolPeriodlookupOnValidate"), "userPool.maxActive" to listOf("$userPoolPeriodmaxActive"), "userPool.lookupOnValidate" to listOf("$userPoolPeriodlookupOnValidate"), "user.baseDN" to listOf("$userPeriodbaseDN"), "user.objectclass" to toMultiValue(userPeriodobjectclass.toList(), "multi"), "user.idAttribute" to listOf("$userPeriodidAttribute"), "user.extraFilter" to listOf("$userPeriodextraFilter"), "user.makeDnPath" to listOf("$userPeriodmakeDnPath"), "group.baseDN" to listOf("$groupPeriodbaseDN"), "group.objectclass" to toMultiValue(groupPeriodobjectclass.toList(), "multi"), "group.nameAttribute" to listOf("$groupPeriodnameAttribute"), "group.extraFilter" to listOf("$groupPeriodextraFilter"), "group.makeDnPath" to listOf("$groupPeriodmakeDnPath"), "group.memberAttribute" to listOf("$groupPeriodmemberAttribute"), "useUidForExtId" to listOf("$useUidForExtId"), "customattributes" to toMultiValue(customattributes.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.ldap.impl.LdapIdentityProvider",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param tokenExpiration  (optional)
    * @param tokenLength  (optional)
    * @param tokenRefresh  (optional)
    * @param tokenCleanupThreshold  (optional)
    * @param passwordHashAlgorithm  (optional)
    * @param passwordHashIterations  (optional)
    * @param passwordSaltSize  (optional)
    * @return OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, tokenExpiration: kotlin.String, tokenLength: kotlin.String, tokenRefresh: kotlin.Boolean, tokenCleanupThreshold: kotlin.Int, passwordHashAlgorithm: kotlin.String, passwordHashIterations: kotlin.Int, passwordSaltSize: kotlin.Int) : OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "tokenExpiration" to listOf("$tokenExpiration"), "tokenLength" to listOf("$tokenLength"), "tokenRefresh" to listOf("$tokenRefresh"), "tokenCleanupThreshold" to listOf("$tokenCleanupThreshold"), "passwordHashAlgorithm" to listOf("$passwordHashAlgorithm"), "passwordHashIterations" to listOf("$passwordHashIterations"), "passwordSaltSize" to listOf("$passwordSaltSize"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.token.TokenConfigurationImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param permissionsJr2  (optional)
    * @param importBehavior  (optional)
    * @param readPaths  (optional)
    * @param administrativePrincipals  (optional)
    * @param configurationRanking  (optional)
    * @return OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, permissionsJr2: kotlin.String, importBehavior: kotlin.String, readPaths: kotlin.Array<kotlin.String>, administrativePrincipals: kotlin.Array<kotlin.String>, configurationRanking: kotlin.Int) : OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "permissionsJr2" to listOf("$permissionsJr2"), "importBehavior" to listOf("$importBehavior"), "readPaths" to toMultiValue(readPaths.toList(), "multi"), "administrativePrincipals" to toMultiValue(administrativePrincipals.toList(), "multi"), "configurationRanking" to listOf("$configurationRanking"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.jackrabbit.oak.security.authorization.AuthorizationConfigurationImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param requiredServicePids  (optional)
    * @param authorizationCompositionType  (optional)
    * @return OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, requiredServicePids: kotlin.Array<kotlin.String>, authorizationCompositionType: kotlin.String) : OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "requiredServicePids" to toMultiValue(requiredServicePids.toList(), "multi"), "authorizationCompositionType" to listOf("$authorizationCompositionType"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.jackrabbit.oak.security.internal.SecurityProviderRegistration",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param length  (optional)
    * @return OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, length: kotlin.Int) : OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "length" to listOf("$length"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.jackrabbit.oak.security.user.RandomAuthorizableNodeName",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param usersPath  (optional)
    * @param groupsPath  (optional)
    * @param systemRelativePath  (optional)
    * @param defaultDepth  (optional)
    * @param importBehavior  (optional)
    * @param passwordHashAlgorithm  (optional)
    * @param passwordHashIterations  (optional)
    * @param passwordSaltSize  (optional)
    * @param omitAdminPw  (optional)
    * @param supportAutoSave  (optional)
    * @param passwordMaxAge  (optional)
    * @param initialPasswordChange  (optional)
    * @param passwordHistorySize  (optional)
    * @param passwordExpiryForAdmin  (optional)
    * @param cacheExpiration  (optional)
    * @param enableRFC7613UsercaseMappedProfile  (optional)
    * @return OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheJackrabbitOakSecurityUserUserConfigurationImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, usersPath: kotlin.String, groupsPath: kotlin.String, systemRelativePath: kotlin.String, defaultDepth: kotlin.Int, importBehavior: kotlin.String, passwordHashAlgorithm: kotlin.String, passwordHashIterations: kotlin.Int, passwordSaltSize: kotlin.Int, omitAdminPw: kotlin.Boolean, supportAutoSave: kotlin.Boolean, passwordMaxAge: kotlin.Int, initialPasswordChange: kotlin.Boolean, passwordHistorySize: kotlin.Int, passwordExpiryForAdmin: kotlin.Boolean, cacheExpiration: kotlin.Int, enableRFC7613UsercaseMappedProfile: kotlin.Boolean) : OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "usersPath" to listOf("$usersPath"), "groupsPath" to listOf("$groupsPath"), "systemRelativePath" to listOf("$systemRelativePath"), "defaultDepth" to listOf("$defaultDepth"), "importBehavior" to listOf("$importBehavior"), "passwordHashAlgorithm" to listOf("$passwordHashAlgorithm"), "passwordHashIterations" to listOf("$passwordHashIterations"), "passwordSaltSize" to listOf("$passwordSaltSize"), "omitAdminPw" to listOf("$omitAdminPw"), "supportAutoSave" to listOf("$supportAutoSave"), "passwordMaxAge" to listOf("$passwordMaxAge"), "initialPasswordChange" to listOf("$initialPasswordChange"), "passwordHistorySize" to listOf("$passwordHistorySize"), "passwordExpiryForAdmin" to listOf("$passwordExpiryForAdmin"), "cacheExpiration" to listOf("$cacheExpiration"), "enableRFC7613UsercaseMappedProfile" to listOf("$enableRFC7613UsercaseMappedProfile"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.jackrabbit.oak.security.user.UserConfigurationImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param accountName  (optional)
    * @param containerName  (optional)
    * @param accessKey  (optional)
    * @param rootPath  (optional)
    * @param connectionURL  (optional)
    * @return OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, accountName: kotlin.String, containerName: kotlin.String, accessKey: kotlin.String, rootPath: kotlin.String, connectionURL: kotlin.String) : OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "accountName" to listOf("$accountName"), "containerName" to listOf("$containerName"), "accessKey" to listOf("$accessKey"), "rootPath" to listOf("$rootPath"), "connectionURL" to listOf("$connectionURL"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.jackrabbit.oak.segment.azure.AzureSegmentStoreService",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param repositoryPeriodhome  (optional)
    * @param tarmkPeriodmode  (optional)
    * @param tarmkPeriodsize  (optional)
    * @param segmentCachePeriodsize  (optional)
    * @param stringCachePeriodsize  (optional)
    * @param templateCachePeriodsize  (optional)
    * @param stringDeduplicationCachePeriodsize  (optional)
    * @param templateDeduplicationCachePeriodsize  (optional)
    * @param nodeDeduplicationCachePeriodsize  (optional)
    * @param pauseCompaction  (optional)
    * @param compactionPeriodretryCount  (optional)
    * @param compactionPeriodforcePeriodtimeout  (optional)
    * @param compactionPeriodsizeDeltaEstimation  (optional)
    * @param compactionPerioddisableEstimation  (optional)
    * @param compactionPeriodretainedGenerations  (optional)
    * @param compactionPeriodmemoryThreshold  (optional)
    * @param compactionPeriodprogressLog  (optional)
    * @param standby  (optional)
    * @param customBlobStore  (optional)
    * @param customSegmentStore  (optional)
    * @param splitPersistence  (optional)
    * @param repositoryPeriodbackupPerioddir  (optional)
    * @param blobGcMaxAgeInSecs  (optional)
    * @param blobTrackSnapshotIntervalInSecs  (optional)
    * @param role  (optional)
    * @param registerDescriptors  (optional)
    * @param dispatchChanges  (optional)
    * @return OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheJackrabbitOakSegmentSegmentNodeStoreFactory(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, repositoryPeriodhome: kotlin.String, tarmkPeriodmode: kotlin.String, tarmkPeriodsize: kotlin.Int, segmentCachePeriodsize: kotlin.Int, stringCachePeriodsize: kotlin.Int, templateCachePeriodsize: kotlin.Int, stringDeduplicationCachePeriodsize: kotlin.Int, templateDeduplicationCachePeriodsize: kotlin.Int, nodeDeduplicationCachePeriodsize: kotlin.Int, pauseCompaction: kotlin.Boolean, compactionPeriodretryCount: kotlin.Int, compactionPeriodforcePeriodtimeout: kotlin.Int, compactionPeriodsizeDeltaEstimation: kotlin.Int, compactionPerioddisableEstimation: kotlin.Boolean, compactionPeriodretainedGenerations: kotlin.Int, compactionPeriodmemoryThreshold: kotlin.Int, compactionPeriodprogressLog: kotlin.Int, standby: kotlin.Boolean, customBlobStore: kotlin.Boolean, customSegmentStore: kotlin.Boolean, splitPersistence: kotlin.Boolean, repositoryPeriodbackupPerioddir: kotlin.String, blobGcMaxAgeInSecs: kotlin.Int, blobTrackSnapshotIntervalInSecs: kotlin.Int, role: kotlin.String, registerDescriptors: kotlin.Boolean, dispatchChanges: kotlin.Boolean) : OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "repository.home" to listOf("$repositoryPeriodhome"), "tarmk.mode" to listOf("$tarmkPeriodmode"), "tarmk.size" to listOf("$tarmkPeriodsize"), "segmentCache.size" to listOf("$segmentCachePeriodsize"), "stringCache.size" to listOf("$stringCachePeriodsize"), "templateCache.size" to listOf("$templateCachePeriodsize"), "stringDeduplicationCache.size" to listOf("$stringDeduplicationCachePeriodsize"), "templateDeduplicationCache.size" to listOf("$templateDeduplicationCachePeriodsize"), "nodeDeduplicationCache.size" to listOf("$nodeDeduplicationCachePeriodsize"), "pauseCompaction" to listOf("$pauseCompaction"), "compaction.retryCount" to listOf("$compactionPeriodretryCount"), "compaction.force.timeout" to listOf("$compactionPeriodforcePeriodtimeout"), "compaction.sizeDeltaEstimation" to listOf("$compactionPeriodsizeDeltaEstimation"), "compaction.disableEstimation" to listOf("$compactionPerioddisableEstimation"), "compaction.retainedGenerations" to listOf("$compactionPeriodretainedGenerations"), "compaction.memoryThreshold" to listOf("$compactionPeriodmemoryThreshold"), "compaction.progressLog" to listOf("$compactionPeriodprogressLog"), "standby" to listOf("$standby"), "customBlobStore" to listOf("$customBlobStore"), "customSegmentStore" to listOf("$customSegmentStore"), "splitPersistence" to listOf("$splitPersistence"), "repository.backup.dir" to listOf("$repositoryPeriodbackupPerioddir"), "blobGcMaxAgeInSecs" to listOf("$blobGcMaxAgeInSecs"), "blobTrackSnapshotIntervalInSecs" to listOf("$blobTrackSnapshotIntervalInSecs"), "role" to listOf("$role"), "registerDescriptors" to listOf("$registerDescriptors"), "dispatchChanges" to listOf("$dispatchChanges"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param commitsTrackerWriterGroups  (optional)
    * @return OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, commitsTrackerWriterGroups: kotlin.Array<kotlin.String>) : OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "commitsTrackerWriterGroups" to toMultiValue(commitsTrackerWriterGroups.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreMonitorService",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param repositoryPeriodhome  (optional)
    * @param tarmkPeriodmode  (optional)
    * @param tarmkPeriodsize  (optional)
    * @param segmentCachePeriodsize  (optional)
    * @param stringCachePeriodsize  (optional)
    * @param templateCachePeriodsize  (optional)
    * @param stringDeduplicationCachePeriodsize  (optional)
    * @param templateDeduplicationCachePeriodsize  (optional)
    * @param nodeDeduplicationCachePeriodsize  (optional)
    * @param pauseCompaction  (optional)
    * @param compactionPeriodretryCount  (optional)
    * @param compactionPeriodforcePeriodtimeout  (optional)
    * @param compactionPeriodsizeDeltaEstimation  (optional)
    * @param compactionPerioddisableEstimation  (optional)
    * @param compactionPeriodretainedGenerations  (optional)
    * @param compactionPeriodmemoryThreshold  (optional)
    * @param compactionPeriodprogressLog  (optional)
    * @param standby  (optional)
    * @param customBlobStore  (optional)
    * @param customSegmentStore  (optional)
    * @param splitPersistence  (optional)
    * @param repositoryPeriodbackupPerioddir  (optional)
    * @param blobGcMaxAgeInSecs  (optional)
    * @param blobTrackSnapshotIntervalInSecs  (optional)
    * @return OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheJackrabbitOakSegmentSegmentNodeStoreService(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, repositoryPeriodhome: kotlin.String, tarmkPeriodmode: kotlin.String, tarmkPeriodsize: kotlin.Int, segmentCachePeriodsize: kotlin.Int, stringCachePeriodsize: kotlin.Int, templateCachePeriodsize: kotlin.Int, stringDeduplicationCachePeriodsize: kotlin.Int, templateDeduplicationCachePeriodsize: kotlin.Int, nodeDeduplicationCachePeriodsize: kotlin.Int, pauseCompaction: kotlin.Boolean, compactionPeriodretryCount: kotlin.Int, compactionPeriodforcePeriodtimeout: kotlin.Int, compactionPeriodsizeDeltaEstimation: kotlin.Int, compactionPerioddisableEstimation: kotlin.Boolean, compactionPeriodretainedGenerations: kotlin.Int, compactionPeriodmemoryThreshold: kotlin.Int, compactionPeriodprogressLog: kotlin.Int, standby: kotlin.Boolean, customBlobStore: kotlin.Boolean, customSegmentStore: kotlin.Boolean, splitPersistence: kotlin.Boolean, repositoryPeriodbackupPerioddir: kotlin.String, blobGcMaxAgeInSecs: kotlin.Int, blobTrackSnapshotIntervalInSecs: kotlin.Int) : OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "repository.home" to listOf("$repositoryPeriodhome"), "tarmk.mode" to listOf("$tarmkPeriodmode"), "tarmk.size" to listOf("$tarmkPeriodsize"), "segmentCache.size" to listOf("$segmentCachePeriodsize"), "stringCache.size" to listOf("$stringCachePeriodsize"), "templateCache.size" to listOf("$templateCachePeriodsize"), "stringDeduplicationCache.size" to listOf("$stringDeduplicationCachePeriodsize"), "templateDeduplicationCache.size" to listOf("$templateDeduplicationCachePeriodsize"), "nodeDeduplicationCache.size" to listOf("$nodeDeduplicationCachePeriodsize"), "pauseCompaction" to listOf("$pauseCompaction"), "compaction.retryCount" to listOf("$compactionPeriodretryCount"), "compaction.force.timeout" to listOf("$compactionPeriodforcePeriodtimeout"), "compaction.sizeDeltaEstimation" to listOf("$compactionPeriodsizeDeltaEstimation"), "compaction.disableEstimation" to listOf("$compactionPerioddisableEstimation"), "compaction.retainedGenerations" to listOf("$compactionPeriodretainedGenerations"), "compaction.memoryThreshold" to listOf("$compactionPeriodmemoryThreshold"), "compaction.progressLog" to listOf("$compactionPeriodprogressLog"), "standby" to listOf("$standby"), "customBlobStore" to listOf("$customBlobStore"), "customSegmentStore" to listOf("$customSegmentStore"), "splitPersistence" to listOf("$splitPersistence"), "repository.backup.dir" to listOf("$repositoryPeriodbackupPerioddir"), "blobGcMaxAgeInSecs" to listOf("$blobGcMaxAgeInSecs"), "blobTrackSnapshotIntervalInSecs" to listOf("$blobTrackSnapshotIntervalInSecs"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreService",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param orgPeriodapachePeriodslingPeriodinstallerPeriodconfigurationPeriodpersist  (optional)
    * @param mode  (optional)
    * @param port  (optional)
    * @param primaryPeriodhost  (optional)
    * @param interval  (optional)
    * @param primaryPeriodallowedClientIpRanges  (optional)
    * @param secure  (optional)
    * @param standbyPeriodreadtimeout  (optional)
    * @param standbyPeriodautoclean  (optional)
    * @return OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, orgPeriodapachePeriodslingPeriodinstallerPeriodconfigurationPeriodpersist: kotlin.Boolean, mode: kotlin.String, port: kotlin.Int, primaryPeriodhost: kotlin.String, interval: kotlin.Int, primaryPeriodallowedClientIpRanges: kotlin.Array<kotlin.String>, secure: kotlin.Boolean, standbyPeriodreadtimeout: kotlin.Int, standbyPeriodautoclean: kotlin.Boolean) : OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "org.apache.sling.installer.configuration.persist" to listOf("$orgPeriodapachePeriodslingPeriodinstallerPeriodconfigurationPeriodpersist"), "mode" to listOf("$mode"), "port" to listOf("$port"), "primary.host" to listOf("$primaryPeriodhost"), "interval" to listOf("$interval"), "primary.allowed-client-ip-ranges" to toMultiValue(primaryPeriodallowedClientIpRanges.toList(), "multi"), "secure" to listOf("$secure"), "standby.readtimeout" to listOf("$standbyPeriodreadtimeout"), "standby.autoclean" to listOf("$standbyPeriodautoclean"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.jackrabbit.oak.segment.standby.store.StandbyStoreService",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param handlerPeriodname  (optional)
    * @param userPeriodexpirationTime  (optional)
    * @param userPeriodautoMembership  (optional)
    * @param userPeriodpropertyMapping  (optional)
    * @param userPeriodpathPrefix  (optional)
    * @param userPeriodmembershipExpTime  (optional)
    * @param userPeriodmembershipNestingDepth  (optional)
    * @param userPerioddynamicMembership  (optional)
    * @param userPerioddisableMissing  (optional)
    * @param groupPeriodexpirationTime  (optional)
    * @param groupPeriodautoMembership  (optional)
    * @param groupPeriodpropertyMapping  (optional)
    * @param groupPeriodpathPrefix  (optional)
    * @param enableRFC7613UsercaseMappedProfile  (optional)
    * @return OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, handlerPeriodname: kotlin.String, userPeriodexpirationTime: kotlin.String, userPeriodautoMembership: kotlin.Array<kotlin.String>, userPeriodpropertyMapping: kotlin.Array<kotlin.String>, userPeriodpathPrefix: kotlin.String, userPeriodmembershipExpTime: kotlin.String, userPeriodmembershipNestingDepth: kotlin.Int, userPerioddynamicMembership: kotlin.Boolean, userPerioddisableMissing: kotlin.Boolean, groupPeriodexpirationTime: kotlin.String, groupPeriodautoMembership: kotlin.Array<kotlin.String>, groupPeriodpropertyMapping: kotlin.Array<kotlin.String>, groupPeriodpathPrefix: kotlin.String, enableRFC7613UsercaseMappedProfile: kotlin.Boolean) : OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "handler.name" to listOf("$handlerPeriodname"), "user.expirationTime" to listOf("$userPeriodexpirationTime"), "user.autoMembership" to toMultiValue(userPeriodautoMembership.toList(), "multi"), "user.propertyMapping" to toMultiValue(userPeriodpropertyMapping.toList(), "multi"), "user.pathPrefix" to listOf("$userPeriodpathPrefix"), "user.membershipExpTime" to listOf("$userPeriodmembershipExpTime"), "user.membershipNestingDepth" to listOf("$userPeriodmembershipNestingDepth"), "user.dynamicMembership" to listOf("$userPerioddynamicMembership"), "user.disableMissing" to listOf("$userPerioddisableMissing"), "group.expirationTime" to listOf("$groupPeriodexpirationTime"), "group.autoMembership" to toMultiValue(groupPeriodautoMembership.toList(), "multi"), "group.propertyMapping" to toMultiValue(groupPeriodpropertyMapping.toList(), "multi"), "group.pathPrefix" to listOf("$groupPeriodpathPrefix"), "enableRFC7613UsercaseMappedProfile" to listOf("$enableRFC7613UsercaseMappedProfile"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.DefaultSyncHandler",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param jaasPeriodranking  (optional)
    * @param jaasPeriodcontrolFlag  (optional)
    * @param jaasPeriodrealmName  (optional)
    * @param idpPeriodname  (optional)
    * @param syncPeriodhandlerName  (optional)
    * @return OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, jaasPeriodranking: kotlin.Int, jaasPeriodcontrolFlag: kotlin.String, jaasPeriodrealmName: kotlin.String, idpPeriodname: kotlin.String, syncPeriodhandlerName: kotlin.String) : OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "jaas.ranking" to listOf("$jaasPeriodranking"), "jaas.controlFlag" to listOf("$jaasPeriodcontrolFlag"), "jaas.realmName" to listOf("$jaasPeriodrealmName"), "idp.name" to listOf("$idpPeriodname"), "sync.handlerName" to listOf("$syncPeriodhandlerName"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.ExternalLoginModuleFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param protectExternalId  (optional)
    * @return OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, protectExternalId: kotlin.Boolean) : OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "protectExternalId" to listOf("$protectExternalId"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.principal.ExternalPrincipalConfiguration",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param cugSupportedPaths  (optional)
    * @param cugEnabled  (optional)
    * @param configurationRanking  (optional)
    * @return OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, cugSupportedPaths: kotlin.Array<kotlin.String>, cugEnabled: kotlin.Boolean, configurationRanking: kotlin.Int) : OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "cugSupportedPaths" to toMultiValue(cugSupportedPaths.toList(), "multi"), "cugEnabled" to listOf("$cugEnabled"), "configurationRanking" to listOf("$configurationRanking"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugConfiguration",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param principalNames  (optional)
    * @return OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, principalNames: kotlin.Array<kotlin.String>) : OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "principalNames" to toMultiValue(principalNames.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugExcludeImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param enabledActions  (optional)
    * @param userPrivilegeNames  (optional)
    * @param groupPrivilegeNames  (optional)
    * @param constraint  (optional)
    * @return OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, enabledActions: kotlin.String, userPrivilegeNames: kotlin.Array<kotlin.String>, groupPrivilegeNames: kotlin.Array<kotlin.String>, constraint: kotlin.String) : OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "enabledActions" to listOf("$enabledActions"), "userPrivilegeNames" to toMultiValue(userPrivilegeNames.toList(), "multi"), "groupPrivilegeNames" to toMultiValue(groupPrivilegeNames.toList(), "multi"), "constraint" to listOf("$constraint"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.user.action.DefaultAuthorizableActionProvider",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param packageRoots  (optional)
    * @return OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheJackrabbitVaultPackagingImplPackagingImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, packageRoots: kotlin.Array<kotlin.String>) : OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "packageRoots" to toMultiValue(packageRoots.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.jackrabbit.vault.packaging.impl.PackagingImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param homePath  (optional)
    * @return OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, homePath: kotlin.String) : OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "homePath" to listOf("$homePath"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.jackrabbit.vault.packaging.registry.impl.FSPackageRegistry",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param slingPeriodservletPeriodmethods  (optional)
    * @param slingPeriodservletPeriodpaths  (optional)
    * @return OrgApacheSlingAuthCoreImplLogoutServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingAuthCoreImplLogoutServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, slingPeriodservletPeriodmethods: kotlin.Array<kotlin.String>, slingPeriodservletPeriodpaths: kotlin.String) : OrgApacheSlingAuthCoreImplLogoutServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "sling.servlet.methods" to toMultiValue(slingPeriodservletPeriodmethods.toList(), "multi"), "sling.servlet.paths" to listOf("$slingPeriodservletPeriodpaths"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.auth.core.impl.LogoutServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingAuthCoreImplLogoutServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingAuthCoreImplLogoutServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param enabled  (optional)
    * @return OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingCaconfigImplConfigurationBindingsValueProvider(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, enabled: kotlin.Boolean) : OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "enabled" to listOf("$enabled"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationBindingsValueProvider",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param configBucketNames  (optional)
    * @return OrgApacheSlingCaconfigImplConfigurationResolverImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingCaconfigImplConfigurationResolverImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, configBucketNames: kotlin.Array<kotlin.String>) : OrgApacheSlingCaconfigImplConfigurationResolverImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "configBucketNames" to toMultiValue(configBucketNames.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationResolverImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingCaconfigImplConfigurationResolverImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingCaconfigImplConfigurationResolverImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param enabled  (optional)
    * @param configPropertyInheritancePropertyNames  (optional)
    * @return OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, enabled: kotlin.Boolean, configPropertyInheritancePropertyNames: kotlin.Array<kotlin.String>) : OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "enabled" to listOf("$enabled"), "configPropertyInheritancePropertyNames" to toMultiValue(configPropertyInheritancePropertyNames.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationInheritanceStrategy",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param enabled  (optional)
    * @return OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, enabled: kotlin.Boolean) : OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "enabled" to listOf("$enabled"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationPersistenceStrategy",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param description  (optional)
    * @param overrides  (optional)
    * @param enabled  (optional)
    * @param servicePeriodranking  (optional)
    * @return OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, description: kotlin.String, overrides: kotlin.Array<kotlin.String>, enabled: kotlin.Boolean, servicePeriodranking: kotlin.Int) : OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "description" to listOf("$description"), "overrides" to toMultiValue(overrides.toList(), "multi"), "enabled" to listOf("$enabled"), "service.ranking" to listOf("$servicePeriodranking"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.caconfig.impl.override.OsgiConfigurationOverrideProvider",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param enabled  (optional)
    * @param servicePeriodranking  (optional)
    * @return OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, enabled: kotlin.Boolean, servicePeriodranking: kotlin.Int) : OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "enabled" to listOf("$enabled"), "service.ranking" to listOf("$servicePeriodranking"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.caconfig.impl.override.SystemPropertyConfigurationOverrideProvider",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param ignorePropertyNameRegex  (optional)
    * @param configCollectionPropertiesResourceNames  (optional)
    * @return OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingCaconfigManagementImplConfigurationManagementSetti(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, ignorePropertyNameRegex: kotlin.Array<kotlin.String>, configCollectionPropertiesResourceNames: kotlin.Array<kotlin.String>) : OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "ignorePropertyNameRegex" to toMultiValue(ignorePropertyNameRegex.toList(), "multi"), "configCollectionPropertiesResourceNames" to toMultiValue(configCollectionPropertiesResourceNames.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.caconfig.management.impl.ConfigurationManagementSettingsImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param enabled  (optional)
    * @param configPath  (optional)
    * @param fallbackPaths  (optional)
    * @param configCollectionInheritancePropertyNames  (optional)
    * @return OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, enabled: kotlin.Boolean, configPath: kotlin.String, fallbackPaths: kotlin.Array<kotlin.String>, configCollectionInheritancePropertyNames: kotlin.Array<kotlin.String>) : OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "enabled" to listOf("$enabled"), "configPath" to listOf("$configPath"), "fallbackPaths" to toMultiValue(fallbackPaths.toList(), "multi"), "configCollectionInheritancePropertyNames" to toMultiValue(configCollectionInheritancePropertyNames.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultConfigurationResourceResolvingStrategy",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param enabled  (optional)
    * @param configRefResourceNames  (optional)
    * @param configRefPropertyNames  (optional)
    * @param servicePeriodranking  (optional)
    * @return OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, enabled: kotlin.Boolean, configRefResourceNames: kotlin.Array<kotlin.String>, configRefPropertyNames: kotlin.Array<kotlin.String>, servicePeriodranking: kotlin.Int) : OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "enabled" to listOf("$enabled"), "configRefResourceNames" to toMultiValue(configRefResourceNames.toList(), "multi"), "configRefPropertyNames" to toMultiValue(configRefPropertyNames.toList(), "multi"), "service.ranking" to listOf("$servicePeriodranking"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultContextPathStrategy",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param parserPeriodfeatures  (optional)
    * @return OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingCommonsHtmlInternalTagsoupHtmlParser(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, parserPeriodfeatures: kotlin.Array<kotlin.String>) : OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "parser.features" to toMultiValue(parserPeriodfeatures.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.commons.html.internal.TagsoupHtmlParser",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodlevel  (optional)
    * @param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile  (optional)
    * @param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodnumber  (optional)
    * @param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodsize  (optional)
    * @param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpattern  (optional)
    * @param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodconfigurationFile  (optional)
    * @param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpackagingDataEnabled  (optional)
    * @param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodmaxCallerDataDepth  (optional)
    * @param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodmaxOldFileCountInDump  (optional)
    * @param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodnumOfLines  (optional)
    * @return OrgApacheSlingCommonsLogLogManagerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingCommonsLogLogManager(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodlevel: kotlin.String, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile: kotlin.String, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodnumber: kotlin.Int, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodsize: kotlin.String, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpattern: kotlin.String, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodconfigurationFile: kotlin.String, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpackagingDataEnabled: kotlin.Boolean, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodmaxCallerDataDepth: kotlin.Int, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodmaxOldFileCountInDump: kotlin.Int, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodnumOfLines: kotlin.Int) : OrgApacheSlingCommonsLogLogManagerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "org.apache.sling.commons.log.level" to listOf("$orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodlevel"), "org.apache.sling.commons.log.file" to listOf("$orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile"), "org.apache.sling.commons.log.file.number" to listOf("$orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodnumber"), "org.apache.sling.commons.log.file.size" to listOf("$orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodsize"), "org.apache.sling.commons.log.pattern" to listOf("$orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpattern"), "org.apache.sling.commons.log.configurationFile" to listOf("$orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodconfigurationFile"), "org.apache.sling.commons.log.packagingDataEnabled" to listOf("$orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpackagingDataEnabled"), "org.apache.sling.commons.log.maxCallerDataDepth" to listOf("$orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodmaxCallerDataDepth"), "org.apache.sling.commons.log.maxOldFileCountInDump" to listOf("$orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodmaxOldFileCountInDump"), "org.apache.sling.commons.log.numOfLines" to listOf("$orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodnumOfLines"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.commons.log.LogManager",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingCommonsLogLogManagerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingCommonsLogLogManagerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodlevel  (optional)
    * @param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile  (optional)
    * @param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpattern  (optional)
    * @param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodnames  (optional)
    * @param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodadditiv  (optional)
    * @return OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingCommonsLogLogManagerFactoryConfig(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodlevel: kotlin.String, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile: kotlin.String, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpattern: kotlin.String, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodnames: kotlin.Array<kotlin.String>, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodadditiv: kotlin.Boolean) : OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "org.apache.sling.commons.log.level" to listOf("$orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodlevel"), "org.apache.sling.commons.log.file" to listOf("$orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile"), "org.apache.sling.commons.log.pattern" to listOf("$orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpattern"), "org.apache.sling.commons.log.names" to toMultiValue(orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodnames.toList(), "multi"), "org.apache.sling.commons.log.additiv" to listOf("$orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodadditiv"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.commons.log.LogManager.factory.config",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile  (optional)
    * @param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodnumber  (optional)
    * @param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodsize  (optional)
    * @param orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodbuffered  (optional)
    * @return OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingCommonsLogLogManagerFactoryWriter(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile: kotlin.String, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodnumber: kotlin.Int, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodsize: kotlin.String, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodbuffered: kotlin.Boolean) : OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "org.apache.sling.commons.log.file" to listOf("$orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile"), "org.apache.sling.commons.log.file.number" to listOf("$orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodnumber"), "org.apache.sling.commons.log.file.size" to listOf("$orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodsize"), "org.apache.sling.commons.log.file.buffered" to listOf("$orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodbuffered"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.commons.log.LogManager.factory.writer",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param period  (optional)
    * @param timeUnit  (optional)
    * @param level  (optional)
    * @param loggerName  (optional)
    * @param prefix  (optional)
    * @param pattern  (optional)
    * @param registryName  (optional)
    * @return OrgApacheSlingCommonsMetricsInternalLogReporterInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingCommonsMetricsInternalLogReporter(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, period: kotlin.Int, timeUnit: kotlin.String, level: kotlin.String, loggerName: kotlin.String, prefix: kotlin.String, pattern: kotlin.String, registryName: kotlin.String) : OrgApacheSlingCommonsMetricsInternalLogReporterInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "period" to listOf("$period"), "timeUnit" to listOf("$timeUnit"), "level" to listOf("$level"), "loggerName" to listOf("$loggerName"), "prefix" to listOf("$prefix"), "pattern" to listOf("$pattern"), "registryName" to listOf("$registryName"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.commons.metrics.internal.LogReporter",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingCommonsMetricsInternalLogReporterInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingCommonsMetricsInternalLogReporterInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param datasources  (optional)
    * @param step  (optional)
    * @param archives  (optional)
    * @param path  (optional)
    * @return OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, datasources: kotlin.Array<kotlin.String>, step: kotlin.Int, archives: kotlin.Array<kotlin.String>, path: kotlin.String) : OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "datasources" to toMultiValue(datasources.toList(), "multi"), "step" to listOf("$step"), "archives" to toMultiValue(archives.toList(), "multi"), "path" to listOf("$path"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.commons.metrics.rrd4j.impl.CodahaleMetricsReporter",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param mimePeriodtypes  (optional)
    * @return OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingCommonsMimeInternalMimeTypeServiceImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, mimePeriodtypes: kotlin.Array<kotlin.String>) : OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "mime.types" to toMultiValue(mimePeriodtypes.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.commons.mime.internal.MimeTypeServiceImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param poolName  (optional)
    * @param allowedPoolNames  (optional)
    * @param schedulerPerioduseleaderforsingle  (optional)
    * @param metricsPeriodfilters  (optional)
    * @param slowThresholdMillis  (optional)
    * @return OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingCommonsSchedulerImplQuartzScheduler(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, poolName: kotlin.String, allowedPoolNames: kotlin.Array<kotlin.String>, schedulerPerioduseleaderforsingle: kotlin.Boolean, metricsPeriodfilters: kotlin.Array<kotlin.String>, slowThresholdMillis: kotlin.Int) : OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "poolName" to listOf("$poolName"), "allowedPoolNames" to toMultiValue(allowedPoolNames.toList(), "multi"), "scheduler.useleaderforsingle" to listOf("$schedulerPerioduseleaderforsingle"), "metrics.filters" to toMultiValue(metricsPeriodfilters.toList(), "multi"), "slowThresholdMillis" to listOf("$slowThresholdMillis"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.commons.scheduler.impl.QuartzScheduler",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param maxPeriodquartzJobPerioddurationPeriodacceptable  (optional)
    * @return OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingCommonsSchedulerImplSchedulerHealthCheck(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, maxPeriodquartzJobPerioddurationPeriodacceptable: kotlin.Int) : OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "max.quartzJob.duration.acceptable" to listOf("$maxPeriodquartzJobPerioddurationPeriodacceptable"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.commons.scheduler.impl.SchedulerHealthCheck",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param name  (optional)
    * @param minPoolSize  (optional)
    * @param maxPoolSize  (optional)
    * @param queueSize  (optional)
    * @param maxThreadAge  (optional)
    * @param keepAliveTime  (optional)
    * @param blockPolicy  (optional)
    * @param shutdownGraceful  (optional)
    * @param daemon  (optional)
    * @param shutdownWaitTime  (optional)
    * @param priority  (optional)
    * @return OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, name: kotlin.String, minPoolSize: kotlin.Int, maxPoolSize: kotlin.Int, queueSize: kotlin.Int, maxThreadAge: kotlin.Int, keepAliveTime: kotlin.Int, blockPolicy: kotlin.String, shutdownGraceful: kotlin.Boolean, daemon: kotlin.Boolean, shutdownWaitTime: kotlin.Int, priority: kotlin.String) : OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "name" to listOf("$name"), "minPoolSize" to listOf("$minPoolSize"), "maxPoolSize" to listOf("$maxPoolSize"), "queueSize" to listOf("$queueSize"), "maxThreadAge" to listOf("$maxThreadAge"), "keepAliveTime" to listOf("$keepAliveTime"), "blockPolicy" to listOf("$blockPolicy"), "shutdownGraceful" to listOf("$shutdownGraceful"), "daemon" to listOf("$daemon"), "shutdownWaitTime" to listOf("$shutdownWaitTime"), "priority" to listOf("$priority"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.commons.threads.impl.DefaultThreadPool.factory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param datasourcePeriodname  (optional)
    * @param datasourcePeriodsvcPeriodpropPeriodname  (optional)
    * @param driverClassName  (optional)
    * @param url  (optional)
    * @param username  (optional)
    * @param password  (optional)
    * @param defaultAutoCommit  (optional)
    * @param defaultReadOnly  (optional)
    * @param defaultTransactionIsolation  (optional)
    * @param defaultCatalog  (optional)
    * @param maxActive  (optional)
    * @param maxIdle  (optional)
    * @param minIdle  (optional)
    * @param initialSize  (optional)
    * @param maxWait  (optional)
    * @param maxAge  (optional)
    * @param testOnBorrow  (optional)
    * @param testOnReturn  (optional)
    * @param testWhileIdle  (optional)
    * @param validationQuery  (optional)
    * @param validationQueryTimeout  (optional)
    * @param timeBetweenEvictionRunsMillis  (optional)
    * @param minEvictableIdleTimeMillis  (optional)
    * @param connectionProperties  (optional)
    * @param initSQL  (optional)
    * @param jdbcInterceptors  (optional)
    * @param validationInterval  (optional)
    * @param logValidationErrors  (optional)
    * @param datasourcePeriodsvcPeriodproperties  (optional)
    * @return OrgApacheSlingDatasourceDataSourceFactoryInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingDatasourceDataSourceFactory(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, datasourcePeriodname: kotlin.String, datasourcePeriodsvcPeriodpropPeriodname: kotlin.String, driverClassName: kotlin.String, url: kotlin.String, username: kotlin.String, password: kotlin.String, defaultAutoCommit: kotlin.String, defaultReadOnly: kotlin.String, defaultTransactionIsolation: kotlin.String, defaultCatalog: kotlin.String, maxActive: kotlin.Int, maxIdle: kotlin.Int, minIdle: kotlin.Int, initialSize: kotlin.Int, maxWait: kotlin.Int, maxAge: kotlin.Int, testOnBorrow: kotlin.Boolean, testOnReturn: kotlin.Boolean, testWhileIdle: kotlin.Boolean, validationQuery: kotlin.String, validationQueryTimeout: kotlin.Int, timeBetweenEvictionRunsMillis: kotlin.Int, minEvictableIdleTimeMillis: kotlin.Int, connectionProperties: kotlin.String, initSQL: kotlin.String, jdbcInterceptors: kotlin.String, validationInterval: kotlin.Int, logValidationErrors: kotlin.Boolean, datasourcePeriodsvcPeriodproperties: kotlin.Array<kotlin.String>) : OrgApacheSlingDatasourceDataSourceFactoryInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "datasource.name" to listOf("$datasourcePeriodname"), "datasource.svc.prop.name" to listOf("$datasourcePeriodsvcPeriodpropPeriodname"), "driverClassName" to listOf("$driverClassName"), "url" to listOf("$url"), "username" to listOf("$username"), "password" to listOf("$password"), "defaultAutoCommit" to listOf("$defaultAutoCommit"), "defaultReadOnly" to listOf("$defaultReadOnly"), "defaultTransactionIsolation" to listOf("$defaultTransactionIsolation"), "defaultCatalog" to listOf("$defaultCatalog"), "maxActive" to listOf("$maxActive"), "maxIdle" to listOf("$maxIdle"), "minIdle" to listOf("$minIdle"), "initialSize" to listOf("$initialSize"), "maxWait" to listOf("$maxWait"), "maxAge" to listOf("$maxAge"), "testOnBorrow" to listOf("$testOnBorrow"), "testOnReturn" to listOf("$testOnReturn"), "testWhileIdle" to listOf("$testWhileIdle"), "validationQuery" to listOf("$validationQuery"), "validationQueryTimeout" to listOf("$validationQueryTimeout"), "timeBetweenEvictionRunsMillis" to listOf("$timeBetweenEvictionRunsMillis"), "minEvictableIdleTimeMillis" to listOf("$minEvictableIdleTimeMillis"), "connectionProperties" to listOf("$connectionProperties"), "initSQL" to listOf("$initSQL"), "jdbcInterceptors" to listOf("$jdbcInterceptors"), "validationInterval" to listOf("$validationInterval"), "logValidationErrors" to listOf("$logValidationErrors"), "datasource.svc.properties" to toMultiValue(datasourcePeriodsvcPeriodproperties.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.datasource.DataSourceFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingDatasourceDataSourceFactoryInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingDatasourceDataSourceFactoryInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param datasourcePeriodname  (optional)
    * @param datasourcePeriodsvcPeriodpropPeriodname  (optional)
    * @param datasourcePeriodjndiPeriodname  (optional)
    * @param jndiPeriodproperties  (optional)
    * @return OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingDatasourceJNDIDataSourceFactory(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, datasourcePeriodname: kotlin.String, datasourcePeriodsvcPeriodpropPeriodname: kotlin.String, datasourcePeriodjndiPeriodname: kotlin.String, jndiPeriodproperties: kotlin.Array<kotlin.String>) : OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "datasource.name" to listOf("$datasourcePeriodname"), "datasource.svc.prop.name" to listOf("$datasourcePeriodsvcPeriodpropPeriodname"), "datasource.jndi.name" to listOf("$datasourcePeriodjndiPeriodname"), "jndi.properties" to toMultiValue(jndiPeriodproperties.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.datasource.JNDIDataSourceFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param connectorPingTimeout  (optional)
    * @param connectorPingInterval  (optional)
    * @param discoveryLiteCheckInterval  (optional)
    * @param clusterSyncServiceTimeout  (optional)
    * @param clusterSyncServiceInterval  (optional)
    * @param enableSyncToken  (optional)
    * @param minEventDelay  (optional)
    * @param socketConnectTimeout  (optional)
    * @param soTimeout  (optional)
    * @param topologyConnectorUrls  (optional)
    * @param topologyConnectorWhitelist  (optional)
    * @param autoStopLocalLoopEnabled  (optional)
    * @param gzipConnectorRequestsEnabled  (optional)
    * @param hmacEnabled  (optional)
    * @param enableEncryption  (optional)
    * @param sharedKey  (optional)
    * @param hmacSharedKeyTTL  (optional)
    * @param backoffStandbyFactor  (optional)
    * @param backoffStableFactor  (optional)
    * @return OrgApacheSlingDiscoveryOakConfigInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingDiscoveryOakConfig(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, connectorPingTimeout: kotlin.Int, connectorPingInterval: kotlin.Int, discoveryLiteCheckInterval: kotlin.Int, clusterSyncServiceTimeout: kotlin.Int, clusterSyncServiceInterval: kotlin.Int, enableSyncToken: kotlin.Boolean, minEventDelay: kotlin.Int, socketConnectTimeout: kotlin.Int, soTimeout: kotlin.Int, topologyConnectorUrls: kotlin.Array<kotlin.String>, topologyConnectorWhitelist: kotlin.Array<kotlin.String>, autoStopLocalLoopEnabled: kotlin.Boolean, gzipConnectorRequestsEnabled: kotlin.Boolean, hmacEnabled: kotlin.Boolean, enableEncryption: kotlin.Boolean, sharedKey: kotlin.String, hmacSharedKeyTTL: kotlin.Int, backoffStandbyFactor: kotlin.String, backoffStableFactor: kotlin.String) : OrgApacheSlingDiscoveryOakConfigInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "connectorPingTimeout" to listOf("$connectorPingTimeout"), "connectorPingInterval" to listOf("$connectorPingInterval"), "discoveryLiteCheckInterval" to listOf("$discoveryLiteCheckInterval"), "clusterSyncServiceTimeout" to listOf("$clusterSyncServiceTimeout"), "clusterSyncServiceInterval" to listOf("$clusterSyncServiceInterval"), "enableSyncToken" to listOf("$enableSyncToken"), "minEventDelay" to listOf("$minEventDelay"), "socketConnectTimeout" to listOf("$socketConnectTimeout"), "soTimeout" to listOf("$soTimeout"), "topologyConnectorUrls" to toMultiValue(topologyConnectorUrls.toList(), "multi"), "topologyConnectorWhitelist" to toMultiValue(topologyConnectorWhitelist.toList(), "multi"), "autoStopLocalLoopEnabled" to listOf("$autoStopLocalLoopEnabled"), "gzipConnectorRequestsEnabled" to listOf("$gzipConnectorRequestsEnabled"), "hmacEnabled" to listOf("$hmacEnabled"), "enableEncryption" to listOf("$enableEncryption"), "sharedKey" to listOf("$sharedKey"), "hmacSharedKeyTTL" to listOf("$hmacSharedKeyTTL"), "backoffStandbyFactor" to listOf("$backoffStandbyFactor"), "backoffStableFactor" to listOf("$backoffStableFactor"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.discovery.oak.Config",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingDiscoveryOakConfigInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingDiscoveryOakConfigInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param hcPeriodname  (optional)
    * @param hcPeriodtags  (optional)
    * @param hcPeriodmbeanPeriodname  (optional)
    * @return OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, hcPeriodname: kotlin.String, hcPeriodtags: kotlin.Array<kotlin.String>, hcPeriodmbeanPeriodname: kotlin.String) : OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "hc.name" to listOf("$hcPeriodname"), "hc.tags" to toMultiValue(hcPeriodtags.toList(), "multi"), "hc.mbean.name" to listOf("$hcPeriodmbeanPeriodname"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.discovery.oak.SynchronizedClocksHealthCheck",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param name  (optional)
    * @param title  (optional)
    * @param details  (optional)
    * @param enabled  (optional)
    * @param serviceName  (optional)
    * @param logPeriodlevel  (optional)
    * @param allowedPeriodroots  (optional)
    * @param queuePeriodprocessingPeriodenabled  (optional)
    * @param packageImporterPeriodendpoints  (optional)
    * @param passiveQueues  (optional)
    * @param priorityQueues  (optional)
    * @param retryPeriodstrategy  (optional)
    * @param retryPeriodattempts  (optional)
    * @param requestAuthorizationStrategyPeriodtarget  (optional)
    * @param transportSecretProviderPeriodtarget  (optional)
    * @param packageBuilderPeriodtarget  (optional)
    * @param triggersPeriodtarget  (optional)
    * @param queuePeriodprovider  (optional)
    * @param asyncPerioddelivery  (optional)
    * @param httpPeriodconnPeriodtimeout  (optional)
    * @return OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingDistributionAgentImplForwardDistributionAgentFacto(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, name: kotlin.String, title: kotlin.String, details: kotlin.String, enabled: kotlin.Boolean, serviceName: kotlin.String, logPeriodlevel: kotlin.String, allowedPeriodroots: kotlin.Array<kotlin.String>, queuePeriodprocessingPeriodenabled: kotlin.Boolean, packageImporterPeriodendpoints: kotlin.Array<kotlin.String>, passiveQueues: kotlin.Array<kotlin.String>, priorityQueues: kotlin.Array<kotlin.String>, retryPeriodstrategy: kotlin.String, retryPeriodattempts: kotlin.Int, requestAuthorizationStrategyPeriodtarget: kotlin.String, transportSecretProviderPeriodtarget: kotlin.String, packageBuilderPeriodtarget: kotlin.String, triggersPeriodtarget: kotlin.String, queuePeriodprovider: kotlin.String, asyncPerioddelivery: kotlin.Boolean, httpPeriodconnPeriodtimeout: kotlin.Int) : OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "name" to listOf("$name"), "title" to listOf("$title"), "details" to listOf("$details"), "enabled" to listOf("$enabled"), "serviceName" to listOf("$serviceName"), "log.level" to listOf("$logPeriodlevel"), "allowed.roots" to toMultiValue(allowedPeriodroots.toList(), "multi"), "queue.processing.enabled" to listOf("$queuePeriodprocessingPeriodenabled"), "packageImporter.endpoints" to toMultiValue(packageImporterPeriodendpoints.toList(), "multi"), "passiveQueues" to toMultiValue(passiveQueues.toList(), "multi"), "priorityQueues" to toMultiValue(priorityQueues.toList(), "multi"), "retry.strategy" to listOf("$retryPeriodstrategy"), "retry.attempts" to listOf("$retryPeriodattempts"), "requestAuthorizationStrategy.target" to listOf("$requestAuthorizationStrategyPeriodtarget"), "transportSecretProvider.target" to listOf("$transportSecretProviderPeriodtarget"), "packageBuilder.target" to listOf("$packageBuilderPeriodtarget"), "triggers.target" to listOf("$triggersPeriodtarget"), "queue.provider" to listOf("$queuePeriodprovider"), "async.delivery" to listOf("$asyncPerioddelivery"), "http.conn.timeout" to listOf("$httpPeriodconnPeriodtimeout"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.distribution.agent.impl.ForwardDistributionAgentFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param name  (optional)
    * @param jcrPrivilege  (optional)
    * @return OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, name: kotlin.String, jcrPrivilege: kotlin.String) : OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "name" to listOf("$name"), "jcrPrivilege" to listOf("$jcrPrivilege"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.distribution.agent.impl.PrivilegeDistributionRequestAuthorizationStrategyFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param name  (optional)
    * @param title  (optional)
    * @param details  (optional)
    * @param enabled  (optional)
    * @param serviceName  (optional)
    * @param logPeriodlevel  (optional)
    * @param allowedPeriodroots  (optional)
    * @param requestAuthorizationStrategyPeriodtarget  (optional)
    * @param queueProviderFactoryPeriodtarget  (optional)
    * @param packageBuilderPeriodtarget  (optional)
    * @param triggersPeriodtarget  (optional)
    * @param priorityQueues  (optional)
    * @return OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingDistributionAgentImplQueueDistributionAgentFactory(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, name: kotlin.String, title: kotlin.String, details: kotlin.String, enabled: kotlin.Boolean, serviceName: kotlin.String, logPeriodlevel: kotlin.String, allowedPeriodroots: kotlin.Array<kotlin.String>, requestAuthorizationStrategyPeriodtarget: kotlin.String, queueProviderFactoryPeriodtarget: kotlin.String, packageBuilderPeriodtarget: kotlin.String, triggersPeriodtarget: kotlin.String, priorityQueues: kotlin.Array<kotlin.String>) : OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "name" to listOf("$name"), "title" to listOf("$title"), "details" to listOf("$details"), "enabled" to listOf("$enabled"), "serviceName" to listOf("$serviceName"), "log.level" to listOf("$logPeriodlevel"), "allowed.roots" to toMultiValue(allowedPeriodroots.toList(), "multi"), "requestAuthorizationStrategy.target" to listOf("$requestAuthorizationStrategyPeriodtarget"), "queueProviderFactory.target" to listOf("$queueProviderFactoryPeriodtarget"), "packageBuilder.target" to listOf("$packageBuilderPeriodtarget"), "triggers.target" to listOf("$triggersPeriodtarget"), "priorityQueues" to toMultiValue(priorityQueues.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.distribution.agent.impl.QueueDistributionAgentFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param name  (optional)
    * @param title  (optional)
    * @param details  (optional)
    * @param enabled  (optional)
    * @param serviceName  (optional)
    * @param logPeriodlevel  (optional)
    * @param queuePeriodprocessingPeriodenabled  (optional)
    * @param packageExporterPeriodendpoints  (optional)
    * @param pullPerioditems  (optional)
    * @param httpPeriodconnPeriodtimeout  (optional)
    * @param requestAuthorizationStrategyPeriodtarget  (optional)
    * @param transportSecretProviderPeriodtarget  (optional)
    * @param packageBuilderPeriodtarget  (optional)
    * @param triggersPeriodtarget  (optional)
    * @return OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingDistributionAgentImplReverseDistributionAgentFacto(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, name: kotlin.String, title: kotlin.String, details: kotlin.String, enabled: kotlin.Boolean, serviceName: kotlin.String, logPeriodlevel: kotlin.String, queuePeriodprocessingPeriodenabled: kotlin.Boolean, packageExporterPeriodendpoints: kotlin.Array<kotlin.String>, pullPerioditems: kotlin.Int, httpPeriodconnPeriodtimeout: kotlin.Int, requestAuthorizationStrategyPeriodtarget: kotlin.String, transportSecretProviderPeriodtarget: kotlin.String, packageBuilderPeriodtarget: kotlin.String, triggersPeriodtarget: kotlin.String) : OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "name" to listOf("$name"), "title" to listOf("$title"), "details" to listOf("$details"), "enabled" to listOf("$enabled"), "serviceName" to listOf("$serviceName"), "log.level" to listOf("$logPeriodlevel"), "queue.processing.enabled" to listOf("$queuePeriodprocessingPeriodenabled"), "packageExporter.endpoints" to toMultiValue(packageExporterPeriodendpoints.toList(), "multi"), "pull.items" to listOf("$pullPerioditems"), "http.conn.timeout" to listOf("$httpPeriodconnPeriodtimeout"), "requestAuthorizationStrategy.target" to listOf("$requestAuthorizationStrategyPeriodtarget"), "transportSecretProvider.target" to listOf("$transportSecretProviderPeriodtarget"), "packageBuilder.target" to listOf("$packageBuilderPeriodtarget"), "triggers.target" to listOf("$triggersPeriodtarget"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.distribution.agent.impl.ReverseDistributionAgentFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param name  (optional)
    * @param title  (optional)
    * @param details  (optional)
    * @param enabled  (optional)
    * @param serviceName  (optional)
    * @param logPeriodlevel  (optional)
    * @param queuePeriodprocessingPeriodenabled  (optional)
    * @param packageExporterPeriodtarget  (optional)
    * @param packageImporterPeriodtarget  (optional)
    * @param requestAuthorizationStrategyPeriodtarget  (optional)
    * @param triggersPeriodtarget  (optional)
    * @return OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, name: kotlin.String, title: kotlin.String, details: kotlin.String, enabled: kotlin.Boolean, serviceName: kotlin.String, logPeriodlevel: kotlin.String, queuePeriodprocessingPeriodenabled: kotlin.Boolean, packageExporterPeriodtarget: kotlin.String, packageImporterPeriodtarget: kotlin.String, requestAuthorizationStrategyPeriodtarget: kotlin.String, triggersPeriodtarget: kotlin.String) : OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "name" to listOf("$name"), "title" to listOf("$title"), "details" to listOf("$details"), "enabled" to listOf("$enabled"), "serviceName" to listOf("$serviceName"), "log.level" to listOf("$logPeriodlevel"), "queue.processing.enabled" to listOf("$queuePeriodprocessingPeriodenabled"), "packageExporter.target" to listOf("$packageExporterPeriodtarget"), "packageImporter.target" to listOf("$packageImporterPeriodtarget"), "requestAuthorizationStrategy.target" to listOf("$requestAuthorizationStrategyPeriodtarget"), "triggers.target" to listOf("$triggersPeriodtarget"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.distribution.agent.impl.SimpleDistributionAgentFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param name  (optional)
    * @param title  (optional)
    * @param details  (optional)
    * @param enabled  (optional)
    * @param serviceName  (optional)
    * @param logPeriodlevel  (optional)
    * @param queuePeriodprocessingPeriodenabled  (optional)
    * @param passiveQueues  (optional)
    * @param packageExporterPeriodendpoints  (optional)
    * @param packageImporterPeriodendpoints  (optional)
    * @param retryPeriodstrategy  (optional)
    * @param retryPeriodattempts  (optional)
    * @param pullPerioditems  (optional)
    * @param httpPeriodconnPeriodtimeout  (optional)
    * @param requestAuthorizationStrategyPeriodtarget  (optional)
    * @param transportSecretProviderPeriodtarget  (optional)
    * @param packageBuilderPeriodtarget  (optional)
    * @param triggersPeriodtarget  (optional)
    * @return OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingDistributionAgentImplSyncDistributionAgentFactory(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, name: kotlin.String, title: kotlin.String, details: kotlin.String, enabled: kotlin.Boolean, serviceName: kotlin.String, logPeriodlevel: kotlin.String, queuePeriodprocessingPeriodenabled: kotlin.Boolean, passiveQueues: kotlin.Array<kotlin.String>, packageExporterPeriodendpoints: kotlin.Array<kotlin.String>, packageImporterPeriodendpoints: kotlin.Array<kotlin.String>, retryPeriodstrategy: kotlin.String, retryPeriodattempts: kotlin.Int, pullPerioditems: kotlin.Int, httpPeriodconnPeriodtimeout: kotlin.Int, requestAuthorizationStrategyPeriodtarget: kotlin.String, transportSecretProviderPeriodtarget: kotlin.String, packageBuilderPeriodtarget: kotlin.String, triggersPeriodtarget: kotlin.String) : OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "name" to listOf("$name"), "title" to listOf("$title"), "details" to listOf("$details"), "enabled" to listOf("$enabled"), "serviceName" to listOf("$serviceName"), "log.level" to listOf("$logPeriodlevel"), "queue.processing.enabled" to listOf("$queuePeriodprocessingPeriodenabled"), "passiveQueues" to toMultiValue(passiveQueues.toList(), "multi"), "packageExporter.endpoints" to toMultiValue(packageExporterPeriodendpoints.toList(), "multi"), "packageImporter.endpoints" to toMultiValue(packageImporterPeriodendpoints.toList(), "multi"), "retry.strategy" to listOf("$retryPeriodstrategy"), "retry.attempts" to listOf("$retryPeriodattempts"), "pull.items" to listOf("$pullPerioditems"), "http.conn.timeout" to listOf("$httpPeriodconnPeriodtimeout"), "requestAuthorizationStrategy.target" to listOf("$requestAuthorizationStrategyPeriodtarget"), "transportSecretProvider.target" to listOf("$transportSecretProviderPeriodtarget"), "packageBuilder.target" to listOf("$packageBuilderPeriodtarget"), "triggers.target" to listOf("$triggersPeriodtarget"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.distribution.agent.impl.SyncDistributionAgentFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param hcPeriodname  (optional)
    * @param hcPeriodtags  (optional)
    * @param hcPeriodmbeanPeriodname  (optional)
    * @param numberOfRetriesAllowed  (optional)
    * @return OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingDistributionMonitorDistributionQueueHealthCheck(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, hcPeriodname: kotlin.String, hcPeriodtags: kotlin.Array<kotlin.String>, hcPeriodmbeanPeriodname: kotlin.String, numberOfRetriesAllowed: kotlin.Int) : OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "hc.name" to listOf("$hcPeriodname"), "hc.tags" to toMultiValue(hcPeriodtags.toList(), "multi"), "hc.mbean.name" to listOf("$hcPeriodmbeanPeriodname"), "numberOfRetriesAllowed" to listOf("$numberOfRetriesAllowed"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.distribution.monitor.DistributionQueueHealthCheck",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param name  (optional)
    * @param queue  (optional)
    * @param dropPeriodinvalidPerioditems  (optional)
    * @param agentPeriodtarget  (optional)
    * @return OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingDistributionPackagingImplExporterAgentDistributio(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, name: kotlin.String, queue: kotlin.String, dropPeriodinvalidPerioditems: kotlin.Boolean, agentPeriodtarget: kotlin.String) : OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "name" to listOf("$name"), "queue" to listOf("$queue"), "drop.invalid.items" to listOf("$dropPeriodinvalidPerioditems"), "agent.target" to listOf("$agentPeriodtarget"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.AgentDistributionPackageExporterFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param name  (optional)
    * @param packageBuilderPeriodtarget  (optional)
    * @return OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingDistributionPackagingImplExporterLocalDistributio(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, name: kotlin.String, packageBuilderPeriodtarget: kotlin.String) : OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "name" to listOf("$name"), "packageBuilder.target" to listOf("$packageBuilderPeriodtarget"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.LocalDistributionPackageExporterFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param name  (optional)
    * @param endpoints  (optional)
    * @param pullPerioditems  (optional)
    * @param packageBuilderPeriodtarget  (optional)
    * @param transportSecretProviderPeriodtarget  (optional)
    * @return OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingDistributionPackagingImplExporterRemoteDistributi(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, name: kotlin.String, endpoints: kotlin.Array<kotlin.String>, pullPerioditems: kotlin.Int, packageBuilderPeriodtarget: kotlin.String, transportSecretProviderPeriodtarget: kotlin.String) : OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "name" to listOf("$name"), "endpoints" to toMultiValue(endpoints.toList(), "multi"), "pull.items" to listOf("$pullPerioditems"), "packageBuilder.target" to listOf("$packageBuilderPeriodtarget"), "transportSecretProvider.target" to listOf("$transportSecretProviderPeriodtarget"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.RemoteDistributionPackageExporterFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param name  (optional)
    * @param packageBuilderPeriodtarget  (optional)
    * @return OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingDistributionPackagingImplImporterLocalDistributio(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, name: kotlin.String, packageBuilderPeriodtarget: kotlin.String) : OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "name" to listOf("$name"), "packageBuilder.target" to listOf("$packageBuilderPeriodtarget"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.LocalDistributionPackageImporterFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param name  (optional)
    * @param endpoints  (optional)
    * @param transportSecretProviderPeriodtarget  (optional)
    * @return OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingDistributionPackagingImplImporterRemoteDistributi(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, name: kotlin.String, endpoints: kotlin.Array<kotlin.String>, transportSecretProviderPeriodtarget: kotlin.String) : OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "name" to listOf("$name"), "endpoints" to toMultiValue(endpoints.toList(), "multi"), "transportSecretProvider.target" to listOf("$transportSecretProviderPeriodtarget"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RemoteDistributionPackageImporterFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param name  (optional)
    * @param servicePeriodname  (optional)
    * @param path  (optional)
    * @param privilegePeriodname  (optional)
    * @return OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingDistributionPackagingImplImporterRepositoryDistri(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, name: kotlin.String, servicePeriodname: kotlin.String, path: kotlin.String, privilegePeriodname: kotlin.String) : OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "name" to listOf("$name"), "service.name" to listOf("$servicePeriodname"), "path" to listOf("$path"), "privilege.name" to listOf("$privilegePeriodname"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RepositoryDistributionPackageImporterFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param providerPeriodroots  (optional)
    * @param kind  (optional)
    * @return OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingDistributionResourcesImplDistributionConfiguration(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, providerPeriodroots: kotlin.String, kind: kotlin.String) : OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "provider.roots" to listOf("$providerPeriodroots"), "kind" to listOf("$kind"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionConfigurationResourceProviderFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param providerPeriodroots  (optional)
    * @param kind  (optional)
    * @return OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingDistributionResourcesImplDistributionServiceResour(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, providerPeriodroots: kotlin.String, kind: kotlin.String) : OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "provider.roots" to listOf("$providerPeriodroots"), "kind" to listOf("$kind"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionServiceResourceProviderFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param name  (optional)
    * @param type  (optional)
    * @param formatPeriodtarget  (optional)
    * @param tempFsFolder  (optional)
    * @param fileThreshold  (optional)
    * @param memoryUnit  (optional)
    * @param useOffHeapMemory  (optional)
    * @param digestAlgorithm  (optional)
    * @param monitoringQueueSize  (optional)
    * @param cleanupDelay  (optional)
    * @param packagePeriodfilters  (optional)
    * @param propertyPeriodfilters  (optional)
    * @return OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingDistributionSerializationImplDistributionPackageBu(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, name: kotlin.String, type: kotlin.String, formatPeriodtarget: kotlin.String, tempFsFolder: kotlin.String, fileThreshold: kotlin.Int, memoryUnit: kotlin.String, useOffHeapMemory: kotlin.Boolean, digestAlgorithm: kotlin.String, monitoringQueueSize: kotlin.Int, cleanupDelay: kotlin.Int, packagePeriodfilters: kotlin.Array<kotlin.String>, propertyPeriodfilters: kotlin.Array<kotlin.String>) : OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "name" to listOf("$name"), "type" to listOf("$type"), "format.target" to listOf("$formatPeriodtarget"), "tempFsFolder" to listOf("$tempFsFolder"), "fileThreshold" to listOf("$fileThreshold"), "memoryUnit" to listOf("$memoryUnit"), "useOffHeapMemory" to listOf("$useOffHeapMemory"), "digestAlgorithm" to listOf("$digestAlgorithm"), "monitoringQueueSize" to listOf("$monitoringQueueSize"), "cleanupDelay" to listOf("$cleanupDelay"), "package.filters" to toMultiValue(packagePeriodfilters.toList(), "multi"), "property.filters" to toMultiValue(propertyPeriodfilters.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.distribution.serialization.impl.DistributionPackageBuilderFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param name  (optional)
    * @param type  (optional)
    * @param importMode  (optional)
    * @param aclHandling  (optional)
    * @param packagePeriodroots  (optional)
    * @param packagePeriodfilters  (optional)
    * @param propertyPeriodfilters  (optional)
    * @param tempFsFolder  (optional)
    * @param useBinaryReferences  (optional)
    * @param autoSaveThreshold  (optional)
    * @param cleanupDelay  (optional)
    * @param fileThreshold  (optional)
    * @param mEGABYTES  (optional)
    * @param useOffHeapMemory  (optional)
    * @param digestAlgorithm  (optional)
    * @param monitoringQueueSize  (optional)
    * @param pathsMapping  (optional)
    * @param strictImport  (optional)
    * @return OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingDistributionSerializationImplVltVaultDistribution(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, name: kotlin.String, type: kotlin.String, importMode: kotlin.String, aclHandling: kotlin.String, packagePeriodroots: kotlin.String, packagePeriodfilters: kotlin.Array<kotlin.String>, propertyPeriodfilters: kotlin.Array<kotlin.String>, tempFsFolder: kotlin.String, useBinaryReferences: kotlin.Boolean, autoSaveThreshold: kotlin.Int, cleanupDelay: kotlin.Int, fileThreshold: kotlin.Int, mEGABYTES: kotlin.String, useOffHeapMemory: kotlin.Boolean, digestAlgorithm: kotlin.String, monitoringQueueSize: kotlin.Int, pathsMapping: kotlin.Array<kotlin.String>, strictImport: kotlin.Boolean) : OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "name" to listOf("$name"), "type" to listOf("$type"), "importMode" to listOf("$importMode"), "aclHandling" to listOf("$aclHandling"), "package.roots" to listOf("$packagePeriodroots"), "package.filters" to toMultiValue(packagePeriodfilters.toList(), "multi"), "property.filters" to toMultiValue(propertyPeriodfilters.toList(), "multi"), "tempFsFolder" to listOf("$tempFsFolder"), "useBinaryReferences" to listOf("$useBinaryReferences"), "autoSaveThreshold" to listOf("$autoSaveThreshold"), "cleanupDelay" to listOf("$cleanupDelay"), "fileThreshold" to listOf("$fileThreshold"), "MEGA_BYTES" to listOf("$mEGABYTES"), "useOffHeapMemory" to listOf("$useOffHeapMemory"), "digestAlgorithm" to listOf("$digestAlgorithm"), "monitoringQueueSize" to listOf("$monitoringQueueSize"), "pathsMapping" to toMultiValue(pathsMapping.toList(), "multi"), "strictImport" to listOf("$strictImport"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.distribution.serialization.impl.vlt.VaultDistributionPackageBuilderFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param name  (optional)
    * @param username  (optional)
    * @param password  (optional)
    * @return OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingDistributionTransportImplUserCredentialsDistributi(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, name: kotlin.String, username: kotlin.String, password: kotlin.String) : OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "name" to listOf("$name"), "username" to listOf("$username"), "password" to listOf("$password"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.distribution.transport.impl.UserCredentialsDistributionTransportSecretProvider",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param name  (optional)
    * @param path  (optional)
    * @return OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingDistributionTriggerImplDistributionEventDistribute(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, name: kotlin.String, path: kotlin.String) : OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "name" to listOf("$name"), "path" to listOf("$path"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.distribution.trigger.impl.DistributionEventDistributeDistributionTriggerFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param name  (optional)
    * @param path  (optional)
    * @param ignoredPathsPatterns  (optional)
    * @param serviceName  (optional)
    * @param deep  (optional)
    * @return OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, name: kotlin.String, path: kotlin.String, ignoredPathsPatterns: kotlin.Array<kotlin.String>, serviceName: kotlin.String, deep: kotlin.Boolean) : OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "name" to listOf("$name"), "path" to listOf("$path"), "ignoredPathsPatterns" to toMultiValue(ignoredPathsPatterns.toList(), "multi"), "serviceName" to listOf("$serviceName"), "deep" to listOf("$deep"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.distribution.trigger.impl.JcrEventDistributionTriggerFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param name  (optional)
    * @param path  (optional)
    * @param serviceName  (optional)
    * @param nuggetsPath  (optional)
    * @return OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, name: kotlin.String, path: kotlin.String, serviceName: kotlin.String, nuggetsPath: kotlin.String) : OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "name" to listOf("$name"), "path" to listOf("$path"), "serviceName" to listOf("$serviceName"), "nuggetsPath" to listOf("$nuggetsPath"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.distribution.trigger.impl.PersistedJcrEventDistributionTriggerFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param name  (optional)
    * @param endpoint  (optional)
    * @param transportSecretProviderPeriodtarget  (optional)
    * @return OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, name: kotlin.String, endpoint: kotlin.String, transportSecretProviderPeriodtarget: kotlin.String) : OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "name" to listOf("$name"), "endpoint" to listOf("$endpoint"), "transportSecretProvider.target" to listOf("$transportSecretProviderPeriodtarget"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.distribution.trigger.impl.RemoteEventDistributionTriggerFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param name  (optional)
    * @param path  (optional)
    * @return OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingDistributionTriggerImplResourceEventDistributionTr(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, name: kotlin.String, path: kotlin.String) : OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "name" to listOf("$name"), "path" to listOf("$path"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.distribution.trigger.impl.ResourceEventDistributionTriggerFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param name  (optional)
    * @param path  (optional)
    * @param seconds  (optional)
    * @param serviceName  (optional)
    * @return OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingDistributionTriggerImplScheduledDistributionTrigge(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, name: kotlin.String, path: kotlin.String, seconds: kotlin.String, serviceName: kotlin.String) : OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "name" to listOf("$name"), "path" to listOf("$path"), "seconds" to listOf("$seconds"), "serviceName" to listOf("$serviceName"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.distribution.trigger.impl.ScheduledDistributionTriggerFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect  (optional)
    * @param osgiPeriodhttpPeriodwhiteboardPeriodlistener  (optional)
    * @param authPeriodsudoPeriodcookie  (optional)
    * @param authPeriodsudoPeriodparameter  (optional)
    * @param authPeriodannonymous  (optional)
    * @param slingPeriodauthPeriodrequirements  (optional)
    * @param slingPeriodauthPeriodanonymousPerioduser  (optional)
    * @param slingPeriodauthPeriodanonymousPeriodpassword  (optional)
    * @param authPeriodhttp  (optional)
    * @param authPeriodhttpPeriodrealm  (optional)
    * @param authPerioduriPeriodsuffix  (optional)
    * @return OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingEngineImplAuthSlingAuthenticator(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect: kotlin.String, osgiPeriodhttpPeriodwhiteboardPeriodlistener: kotlin.String, authPeriodsudoPeriodcookie: kotlin.String, authPeriodsudoPeriodparameter: kotlin.String, authPeriodannonymous: kotlin.Boolean, slingPeriodauthPeriodrequirements: kotlin.Array<kotlin.String>, slingPeriodauthPeriodanonymousPerioduser: kotlin.String, slingPeriodauthPeriodanonymousPeriodpassword: kotlin.String, authPeriodhttp: kotlin.String, authPeriodhttpPeriodrealm: kotlin.String, authPerioduriPeriodsuffix: kotlin.Array<kotlin.String>) : OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "osgi.http.whiteboard.context.select" to listOf("$osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect"), "osgi.http.whiteboard.listener" to listOf("$osgiPeriodhttpPeriodwhiteboardPeriodlistener"), "auth.sudo.cookie" to listOf("$authPeriodsudoPeriodcookie"), "auth.sudo.parameter" to listOf("$authPeriodsudoPeriodparameter"), "auth.annonymous" to listOf("$authPeriodannonymous"), "sling.auth.requirements" to toMultiValue(slingPeriodauthPeriodrequirements.toList(), "multi"), "sling.auth.anonymous.user" to listOf("$slingPeriodauthPeriodanonymousPerioduser"), "sling.auth.anonymous.password" to listOf("$slingPeriodauthPeriodanonymousPeriodpassword"), "auth.http" to listOf("$authPeriodhttp"), "auth.http.realm" to listOf("$authPeriodhttpPeriodrealm"), "auth.uri.suffix" to toMultiValue(authPerioduriPeriodsuffix.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.engine.impl.auth.SlingAuthenticator",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param extensions  (optional)
    * @param minDurationMs  (optional)
    * @param maxDurationMs  (optional)
    * @param compactLogFormat  (optional)
    * @return OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, extensions: kotlin.Array<kotlin.String>, minDurationMs: kotlin.Int, maxDurationMs: kotlin.Int, compactLogFormat: kotlin.Boolean) : OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "extensions" to toMultiValue(extensions.toList(), "multi"), "minDurationMs" to listOf("$minDurationMs"), "maxDurationMs" to listOf("$maxDurationMs"), "compactLogFormat" to listOf("$compactLogFormat"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.engine.impl.debug.RequestProgressTrackerLogFilter",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param requestPeriodlogPeriodoutput  (optional)
    * @param requestPeriodlogPeriodoutputtype  (optional)
    * @param requestPeriodlogPeriodenabled  (optional)
    * @param accessPeriodlogPeriodoutput  (optional)
    * @param accessPeriodlogPeriodoutputtype  (optional)
    * @param accessPeriodlogPeriodenabled  (optional)
    * @return OrgApacheSlingEngineImplLogRequestLoggerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingEngineImplLogRequestLogger(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, requestPeriodlogPeriodoutput: kotlin.String, requestPeriodlogPeriodoutputtype: kotlin.Int, requestPeriodlogPeriodenabled: kotlin.Boolean, accessPeriodlogPeriodoutput: kotlin.String, accessPeriodlogPeriodoutputtype: kotlin.Int, accessPeriodlogPeriodenabled: kotlin.Boolean) : OrgApacheSlingEngineImplLogRequestLoggerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "request.log.output" to listOf("$requestPeriodlogPeriodoutput"), "request.log.outputtype" to listOf("$requestPeriodlogPeriodoutputtype"), "request.log.enabled" to listOf("$requestPeriodlogPeriodenabled"), "access.log.output" to listOf("$accessPeriodlogPeriodoutput"), "access.log.outputtype" to listOf("$accessPeriodlogPeriodoutputtype"), "access.log.enabled" to listOf("$accessPeriodlogPeriodenabled"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.engine.impl.log.RequestLogger",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingEngineImplLogRequestLoggerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingEngineImplLogRequestLoggerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param requestPeriodlogPeriodservicePeriodformat  (optional)
    * @param requestPeriodlogPeriodservicePeriodoutput  (optional)
    * @param requestPeriodlogPeriodservicePeriodoutputtype  (optional)
    * @param requestPeriodlogPeriodservicePeriodonentry  (optional)
    * @return OrgApacheSlingEngineImplLogRequestLoggerServiceInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingEngineImplLogRequestLoggerService(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, requestPeriodlogPeriodservicePeriodformat: kotlin.String, requestPeriodlogPeriodservicePeriodoutput: kotlin.String, requestPeriodlogPeriodservicePeriodoutputtype: kotlin.Int, requestPeriodlogPeriodservicePeriodonentry: kotlin.Boolean) : OrgApacheSlingEngineImplLogRequestLoggerServiceInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "request.log.service.format" to listOf("$requestPeriodlogPeriodservicePeriodformat"), "request.log.service.output" to listOf("$requestPeriodlogPeriodservicePeriodoutput"), "request.log.service.outputtype" to listOf("$requestPeriodlogPeriodservicePeriodoutputtype"), "request.log.service.onentry" to listOf("$requestPeriodlogPeriodservicePeriodonentry"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.engine.impl.log.RequestLoggerService",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingEngineImplLogRequestLoggerServiceInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingEngineImplLogRequestLoggerServiceInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param slingPeriodmaxPeriodcalls  (optional)
    * @param slingPeriodmaxPeriodinclusions  (optional)
    * @param slingPeriodtracePeriodallow  (optional)
    * @param slingPeriodmaxPeriodrecordPeriodrequests  (optional)
    * @param slingPeriodstorePeriodpatternPeriodrequests  (optional)
    * @param slingPeriodserverinfo  (optional)
    * @param slingPeriodadditionalPeriodresponsePeriodheaders  (optional)
    * @return OrgApacheSlingEngineImplSlingMainServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingEngineImplSlingMainServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, slingPeriodmaxPeriodcalls: kotlin.Int, slingPeriodmaxPeriodinclusions: kotlin.Int, slingPeriodtracePeriodallow: kotlin.Boolean, slingPeriodmaxPeriodrecordPeriodrequests: kotlin.Int, slingPeriodstorePeriodpatternPeriodrequests: kotlin.Array<kotlin.String>, slingPeriodserverinfo: kotlin.String, slingPeriodadditionalPeriodresponsePeriodheaders: kotlin.Array<kotlin.String>) : OrgApacheSlingEngineImplSlingMainServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "sling.max.calls" to listOf("$slingPeriodmaxPeriodcalls"), "sling.max.inclusions" to listOf("$slingPeriodmaxPeriodinclusions"), "sling.trace.allow" to listOf("$slingPeriodtracePeriodallow"), "sling.max.record.requests" to listOf("$slingPeriodmaxPeriodrecordPeriodrequests"), "sling.store.pattern.requests" to toMultiValue(slingPeriodstorePeriodpatternPeriodrequests.toList(), "multi"), "sling.serverinfo" to listOf("$slingPeriodserverinfo"), "sling.additional.response.headers" to toMultiValue(slingPeriodadditionalPeriodresponsePeriodheaders.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.engine.impl.SlingMainServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingEngineImplSlingMainServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingEngineImplSlingMainServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param slingPerioddefaultPeriodparameterPeriodencoding  (optional)
    * @param slingPerioddefaultPeriodmaxPeriodparameters  (optional)
    * @param filePeriodlocation  (optional)
    * @param filePeriodthreshold  (optional)
    * @param filePeriodmax  (optional)
    * @param requestPeriodmax  (optional)
    * @param slingPerioddefaultPeriodparameterPeriodcheckForAdditionalContainerParameters  (optional)
    * @return OrgApacheSlingEngineParametersInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingEngineParameters(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, slingPerioddefaultPeriodparameterPeriodencoding: kotlin.String, slingPerioddefaultPeriodmaxPeriodparameters: kotlin.Int, filePeriodlocation: kotlin.String, filePeriodthreshold: kotlin.Int, filePeriodmax: kotlin.Int, requestPeriodmax: kotlin.Int, slingPerioddefaultPeriodparameterPeriodcheckForAdditionalContainerParameters: kotlin.Boolean) : OrgApacheSlingEngineParametersInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "sling.default.parameter.encoding" to listOf("$slingPerioddefaultPeriodparameterPeriodencoding"), "sling.default.max.parameters" to listOf("$slingPerioddefaultPeriodmaxPeriodparameters"), "file.location" to listOf("$filePeriodlocation"), "file.threshold" to listOf("$filePeriodthreshold"), "file.max" to listOf("$filePeriodmax"), "request.max" to listOf("$requestPeriodmax"), "sling.default.parameter.checkForAdditionalContainerParameters" to listOf("$slingPerioddefaultPeriodparameterPeriodcheckForAdditionalContainerParameters"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.engine.parameters",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingEngineParametersInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingEngineParametersInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param minPoolSize  (optional)
    * @return OrgApacheSlingEventImplEventingThreadPoolInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingEventImplEventingThreadPool(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, minPoolSize: kotlin.Int) : OrgApacheSlingEventImplEventingThreadPoolInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "minPoolSize" to listOf("$minPoolSize"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.event.impl.EventingThreadPool",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingEventImplEventingThreadPoolInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingEventImplEventingThreadPoolInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param queuePeriodpriority  (optional)
    * @param queuePeriodretries  (optional)
    * @param queuePeriodretrydelay  (optional)
    * @param queuePeriodmaxparallel  (optional)
    * @return OrgApacheSlingEventImplJobsDefaultJobManagerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingEventImplJobsDefaultJobManager(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, queuePeriodpriority: kotlin.String, queuePeriodretries: kotlin.Int, queuePeriodretrydelay: kotlin.Int, queuePeriodmaxparallel: kotlin.Int) : OrgApacheSlingEventImplJobsDefaultJobManagerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "queue.priority" to listOf("$queuePeriodpriority"), "queue.retries" to listOf("$queuePeriodretries"), "queue.retrydelay" to listOf("$queuePeriodretrydelay"), "queue.maxparallel" to listOf("$queuePeriodmaxparallel"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.event.impl.jobs.DefaultJobManager",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingEventImplJobsDefaultJobManagerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingEventImplJobsDefaultJobManagerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param jobPeriodconsumermanagerPerioddisableDistribution  (optional)
    * @param startupPerioddelay  (optional)
    * @param cleanupPeriodperiod  (optional)
    * @return OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingEventImplJobsJcrPersistenceHandler(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, jobPeriodconsumermanagerPerioddisableDistribution: kotlin.Boolean, startupPerioddelay: kotlin.Int, cleanupPeriodperiod: kotlin.Int) : OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "job.consumermanager.disableDistribution" to listOf("$jobPeriodconsumermanagerPerioddisableDistribution"), "startup.delay" to listOf("$startupPerioddelay"), "cleanup.period" to listOf("$cleanupPeriodperiod"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.event.impl.jobs.jcr.PersistenceHandler",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param orgPeriodapachePeriodslingPeriodinstallerPeriodconfigurationPeriodpersist  (optional)
    * @param jobPeriodconsumermanagerPeriodwhitelist  (optional)
    * @param jobPeriodconsumermanagerPeriodblacklist  (optional)
    * @return OrgApacheSlingEventImplJobsJobConsumerManagerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingEventImplJobsJobConsumerManager(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, orgPeriodapachePeriodslingPeriodinstallerPeriodconfigurationPeriodpersist: kotlin.Boolean, jobPeriodconsumermanagerPeriodwhitelist: kotlin.Array<kotlin.String>, jobPeriodconsumermanagerPeriodblacklist: kotlin.Array<kotlin.String>) : OrgApacheSlingEventImplJobsJobConsumerManagerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "org.apache.sling.installer.configuration.persist" to listOf("$orgPeriodapachePeriodslingPeriodinstallerPeriodconfigurationPeriodpersist"), "job.consumermanager.whitelist" to toMultiValue(jobPeriodconsumermanagerPeriodwhitelist.toList(), "multi"), "job.consumermanager.blacklist" to toMultiValue(jobPeriodconsumermanagerPeriodblacklist.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.event.impl.jobs.JobConsumerManager",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingEventImplJobsJobConsumerManagerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingEventImplJobsJobConsumerManagerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param queuePeriodname  (optional)
    * @param queuePeriodtopics  (optional)
    * @param queuePeriodtype  (optional)
    * @param queuePeriodpriority  (optional)
    * @param queuePeriodretries  (optional)
    * @param queuePeriodretrydelay  (optional)
    * @param queuePeriodmaxparallel  (optional)
    * @param queuePeriodkeepJobs  (optional)
    * @param queuePeriodpreferRunOnCreationInstance  (optional)
    * @param queuePeriodthreadPoolSize  (optional)
    * @param servicePeriodranking  (optional)
    * @return OrgApacheSlingEventJobsQueueConfigurationInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingEventJobsQueueConfiguration(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, queuePeriodname: kotlin.String, queuePeriodtopics: kotlin.Array<kotlin.String>, queuePeriodtype: kotlin.String, queuePeriodpriority: kotlin.String, queuePeriodretries: kotlin.Int, queuePeriodretrydelay: kotlin.Int, queuePeriodmaxparallel: java.math.BigDecimal, queuePeriodkeepJobs: kotlin.Boolean, queuePeriodpreferRunOnCreationInstance: kotlin.Boolean, queuePeriodthreadPoolSize: kotlin.Int, servicePeriodranking: kotlin.Int) : OrgApacheSlingEventJobsQueueConfigurationInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "queue.name" to listOf("$queuePeriodname"), "queue.topics" to toMultiValue(queuePeriodtopics.toList(), "multi"), "queue.type" to listOf("$queuePeriodtype"), "queue.priority" to listOf("$queuePeriodpriority"), "queue.retries" to listOf("$queuePeriodretries"), "queue.retrydelay" to listOf("$queuePeriodretrydelay"), "queue.maxparallel" to listOf("$queuePeriodmaxparallel"), "queue.keepJobs" to listOf("$queuePeriodkeepJobs"), "queue.preferRunOnCreationInstance" to listOf("$queuePeriodpreferRunOnCreationInstance"), "queue.threadPoolSize" to listOf("$queuePeriodthreadPoolSize"), "service.ranking" to listOf("$servicePeriodranking"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.event.jobs.QueueConfiguration",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingEventJobsQueueConfigurationInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingEventJobsQueueConfigurationInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param users  (optional)
    * @param groups  (optional)
    * @return OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, users: kotlin.Array<kotlin.String>, groups: kotlin.Array<kotlin.String>) : OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "users" to toMultiValue(users.toList(), "multi"), "groups" to toMultiValue(groups.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.extensions.webconsolesecurityprovider.internal.SlingWebConsoleSecurityProvider",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param name  (optional)
    * @param description  (optional)
    * @param enabled  (optional)
    * @return OrgApacheSlingFeatureflagsFeatureInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingFeatureflagsFeature(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, name: kotlin.String, description: kotlin.String, enabled: kotlin.Boolean) : OrgApacheSlingFeatureflagsFeatureInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "name" to listOf("$name"), "description" to listOf("$description"), "enabled" to listOf("$enabled"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.featureflags.Feature",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingFeatureflagsFeatureInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingFeatureflagsFeatureInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param name  (optional)
    * @param description  (optional)
    * @param enabled  (optional)
    * @return OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingFeatureflagsImplConfiguredFeature(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, name: kotlin.String, description: kotlin.String, enabled: kotlin.Boolean) : OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "name" to listOf("$name"), "description" to listOf("$description"), "enabled" to listOf("$enabled"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.featureflags.impl.ConfiguredFeature",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodresourcetype  (optional)
    * @param orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodcollectionresourcetype  (optional)
    * @param orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodsearchpaths  (optional)
    * @param orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodexternalurl  (optional)
    * @param orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodenabled  (optional)
    * @return OrgApacheSlingHapiImplHApiUtilImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingHapiImplHApiUtilImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodresourcetype: kotlin.String, orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodcollectionresourcetype: kotlin.String, orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodsearchpaths: kotlin.Array<kotlin.String>, orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodexternalurl: kotlin.String, orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodenabled: kotlin.Boolean) : OrgApacheSlingHapiImplHApiUtilImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "org.apache.sling.hapi.tools.resourcetype" to listOf("$orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodresourcetype"), "org.apache.sling.hapi.tools.collectionresourcetype" to listOf("$orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodcollectionresourcetype"), "org.apache.sling.hapi.tools.searchpaths" to toMultiValue(orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodsearchpaths.toList(), "multi"), "org.apache.sling.hapi.tools.externalurl" to listOf("$orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodexternalurl"), "org.apache.sling.hapi.tools.enabled" to listOf("$orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodenabled"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.hapi.impl.HApiUtilImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingHapiImplHApiUtilImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingHapiImplHApiUtilImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param hcPeriodname  (optional)
    * @param hcPeriodtags  (optional)
    * @param hcPeriodmbeanPeriodname  (optional)
    * @param filterPeriodtags  (optional)
    * @param filterPeriodcombineTagsWithOr  (optional)
    * @return OrgApacheSlingHcCoreImplCompositeHealthCheckInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingHcCoreImplCompositeHealthCheck(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, hcPeriodname: kotlin.String, hcPeriodtags: kotlin.Array<kotlin.String>, hcPeriodmbeanPeriodname: kotlin.String, filterPeriodtags: kotlin.Array<kotlin.String>, filterPeriodcombineTagsWithOr: kotlin.Boolean) : OrgApacheSlingHcCoreImplCompositeHealthCheckInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "hc.name" to listOf("$hcPeriodname"), "hc.tags" to toMultiValue(hcPeriodtags.toList(), "multi"), "hc.mbean.name" to listOf("$hcPeriodmbeanPeriodname"), "filter.tags" to toMultiValue(filterPeriodtags.toList(), "multi"), "filter.combineTagsWithOr" to listOf("$filterPeriodcombineTagsWithOr"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.hc.core.impl.CompositeHealthCheck",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingHcCoreImplCompositeHealthCheckInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingHcCoreImplCompositeHealthCheckInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param timeoutInMs  (optional)
    * @param longRunningFutureThresholdForCriticalMs  (optional)
    * @param resultCacheTtlInMs  (optional)
    * @return OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, timeoutInMs: kotlin.Int, longRunningFutureThresholdForCriticalMs: kotlin.Int, resultCacheTtlInMs: kotlin.Int) : OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "timeoutInMs" to listOf("$timeoutInMs"), "longRunningFutureThresholdForCriticalMs" to listOf("$longRunningFutureThresholdForCriticalMs"), "resultCacheTtlInMs" to listOf("$resultCacheTtlInMs"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.hc.core.impl.executor.HealthCheckExecutorImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param hcPeriodname  (optional)
    * @param hcPeriodtags  (optional)
    * @param hcPeriodmbeanPeriodname  (optional)
    * @param mbeanPeriodname  (optional)
    * @param attributePeriodname  (optional)
    * @param attributePeriodvaluePeriodconstraint  (optional)
    * @return OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingHcCoreImplJmxAttributeHealthCheck(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, hcPeriodname: kotlin.String, hcPeriodtags: kotlin.Array<kotlin.String>, hcPeriodmbeanPeriodname: kotlin.String, mbeanPeriodname: kotlin.String, attributePeriodname: kotlin.String, attributePeriodvaluePeriodconstraint: kotlin.String) : OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "hc.name" to listOf("$hcPeriodname"), "hc.tags" to toMultiValue(hcPeriodtags.toList(), "multi"), "hc.mbean.name" to listOf("$hcPeriodmbeanPeriodname"), "mbean.name" to listOf("$mbeanPeriodname"), "attribute.name" to listOf("$attributePeriodname"), "attribute.value.constraint" to listOf("$attributePeriodvaluePeriodconstraint"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.hc.core.impl.JmxAttributeHealthCheck",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param hcPeriodname  (optional)
    * @param hcPeriodtags  (optional)
    * @param hcPeriodmbeanPeriodname  (optional)
    * @param expression  (optional)
    * @param languagePeriodextension  (optional)
    * @return OrgApacheSlingHcCoreImplScriptableHealthCheckInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingHcCoreImplScriptableHealthCheck(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, hcPeriodname: kotlin.String, hcPeriodtags: kotlin.Array<kotlin.String>, hcPeriodmbeanPeriodname: kotlin.String, expression: kotlin.String, languagePeriodextension: kotlin.String) : OrgApacheSlingHcCoreImplScriptableHealthCheckInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "hc.name" to listOf("$hcPeriodname"), "hc.tags" to toMultiValue(hcPeriodtags.toList(), "multi"), "hc.mbean.name" to listOf("$hcPeriodmbeanPeriodname"), "expression" to listOf("$expression"), "language.extension" to listOf("$languagePeriodextension"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.hc.core.impl.ScriptableHealthCheck",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingHcCoreImplScriptableHealthCheckInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingHcCoreImplScriptableHealthCheckInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param servletPath  (optional)
    * @param disabled  (optional)
    * @param corsPeriodaccessControlAllowOrigin  (optional)
    * @return OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingHcCoreImplServletHealthCheckExecutorServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, servletPath: kotlin.String, disabled: kotlin.Boolean, corsPeriodaccessControlAllowOrigin: kotlin.String) : OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "servletPath" to listOf("$servletPath"), "disabled" to listOf("$disabled"), "cors.accessControlAllowOrigin" to listOf("$corsPeriodaccessControlAllowOrigin"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.hc.core.impl.servlet.HealthCheckExecutorServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param totalWidth  (optional)
    * @param colWidthName  (optional)
    * @param colWidthResult  (optional)
    * @param colWidthTiming  (optional)
    * @return OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingHcCoreImplServletResultTxtVerboseSerializer(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, totalWidth: kotlin.Int, colWidthName: kotlin.Int, colWidthResult: kotlin.Int, colWidthTiming: kotlin.Int) : OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "totalWidth" to listOf("$totalWidth"), "colWidthName" to listOf("$colWidthName"), "colWidthResult" to listOf("$colWidthResult"), "colWidthTiming" to listOf("$colWidthTiming"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.hc.core.impl.servlet.ResultTxtVerboseSerializer",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param servicePeriodranking  (optional)
    * @param slingPeriodfilterPeriodscope  (optional)
    * @return OrgApacheSlingI18nImplI18NFilterInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingI18nImplI18NFilter(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, servicePeriodranking: kotlin.Int, slingPeriodfilterPeriodscope: kotlin.Array<kotlin.String>) : OrgApacheSlingI18nImplI18NFilterInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "service.ranking" to listOf("$servicePeriodranking"), "sling.filter.scope" to toMultiValue(slingPeriodfilterPeriodscope.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.i18n.impl.I18NFilter",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingI18nImplI18NFilterInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingI18nImplI18NFilterInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param localePerioddefault  (optional)
    * @param preloadPeriodbundles  (optional)
    * @param invalidationPerioddelay  (optional)
    * @return OrgApacheSlingI18nImplJcrResourceBundleProviderInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingI18nImplJcrResourceBundleProvider(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, localePerioddefault: kotlin.String, preloadPeriodbundles: kotlin.Boolean, invalidationPerioddelay: kotlin.Int) : OrgApacheSlingI18nImplJcrResourceBundleProviderInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "locale.default" to listOf("$localePerioddefault"), "preload.bundles" to listOf("$preloadPeriodbundles"), "invalidation.delay" to listOf("$invalidationPerioddelay"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.i18n.impl.JcrResourceBundleProvider",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingI18nImplJcrResourceBundleProviderInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingI18nImplJcrResourceBundleProviderInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param handlerPeriodschemes  (optional)
    * @param slingPeriodjcrinstallPeriodfolderPeriodnamePeriodregexp  (optional)
    * @param slingPeriodjcrinstallPeriodfolderPeriodmaxPerioddepth  (optional)
    * @param slingPeriodjcrinstallPeriodsearchPeriodpath  (optional)
    * @param slingPeriodjcrinstallPeriodnewPeriodconfigPeriodpath  (optional)
    * @param slingPeriodjcrinstallPeriodsignalPeriodpath  (optional)
    * @param slingPeriodjcrinstallPeriodenablePeriodwriteback  (optional)
    * @return OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingInstallerProviderJcrImplJcrInstaller(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, handlerPeriodschemes: kotlin.Array<kotlin.String>, slingPeriodjcrinstallPeriodfolderPeriodnamePeriodregexp: kotlin.String, slingPeriodjcrinstallPeriodfolderPeriodmaxPerioddepth: kotlin.Int, slingPeriodjcrinstallPeriodsearchPeriodpath: kotlin.Array<kotlin.String>, slingPeriodjcrinstallPeriodnewPeriodconfigPeriodpath: kotlin.String, slingPeriodjcrinstallPeriodsignalPeriodpath: kotlin.String, slingPeriodjcrinstallPeriodenablePeriodwriteback: kotlin.Boolean) : OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "handler.schemes" to toMultiValue(handlerPeriodschemes.toList(), "multi"), "sling.jcrinstall.folder.name.regexp" to listOf("$slingPeriodjcrinstallPeriodfolderPeriodnamePeriodregexp"), "sling.jcrinstall.folder.max.depth" to listOf("$slingPeriodjcrinstallPeriodfolderPeriodmaxPerioddepth"), "sling.jcrinstall.search.path" to toMultiValue(slingPeriodjcrinstallPeriodsearchPeriodpath.toList(), "multi"), "sling.jcrinstall.new.config.path" to listOf("$slingPeriodjcrinstallPeriodnewPeriodconfigPeriodpath"), "sling.jcrinstall.signal.path" to listOf("$slingPeriodjcrinstallPeriodsignalPeriodpath"), "sling.jcrinstall.enable.writeback" to listOf("$slingPeriodjcrinstallPeriodenablePeriodwriteback"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.installer.provider.jcr.impl.JcrInstaller",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param whitelistPeriodbypass  (optional)
    * @param whitelistPeriodbundlesPeriodregexp  (optional)
    * @return OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingJcrBaseInternalLoginAdminWhitelist(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, whitelistPeriodbypass: kotlin.Boolean, whitelistPeriodbundlesPeriodregexp: kotlin.String) : OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "whitelist.bypass" to listOf("$whitelistPeriodbypass"), "whitelist.bundles.regexp" to listOf("$whitelistPeriodbundlesPeriodregexp"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param whitelistPeriodname  (optional)
    * @param whitelistPeriodbundles  (optional)
    * @return OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, whitelistPeriodname: kotlin.String, whitelistPeriodbundles: kotlin.Array<kotlin.String>) : OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "whitelist.name" to listOf("$whitelistPeriodname"), "whitelist.bundles" to toMultiValue(whitelistPeriodbundles.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist.fragment",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param alias  (optional)
    * @param davPeriodcreateAbsoluteUri  (optional)
    * @param davPeriodprotectedhandlers  (optional)
    * @return OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingJcrDavexImplServletsSlingDavExServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, alias: kotlin.String, davPeriodcreateAbsoluteUri: kotlin.Boolean, davPeriodprotectedhandlers: kotlin.String) : OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "alias" to listOf("$alias"), "dav.create-absolute-uri" to listOf("$davPeriodcreateAbsoluteUri"), "dav.protectedhandlers" to listOf("$davPeriodprotectedhandlers"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param javaPeriodnamingPeriodfactoryPeriodinitial  (optional)
    * @param javaPeriodnamingPeriodproviderPeriodurl  (optional)
    * @return OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingJcrJackrabbitServerJndiRegistrationSupport(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, javaPeriodnamingPeriodfactoryPeriodinitial: kotlin.String, javaPeriodnamingPeriodproviderPeriodurl: kotlin.String) : OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "java.naming.factory.initial" to listOf("$javaPeriodnamingPeriodfactoryPeriodinitial"), "java.naming.provider.url" to listOf("$javaPeriodnamingPeriodproviderPeriodurl"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.jcr.jackrabbit.server.JndiRegistrationSupport",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param port  (optional)
    * @return OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingJcrJackrabbitServerRmiRegistrationSupport(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, port: kotlin.Int) : OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "port" to listOf("$port"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.jcr.jackrabbit.server.RmiRegistrationSupport",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param references  (optional)
    * @return OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingJcrRepoinitImplRepositoryInitializer(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, references: kotlin.Array<kotlin.String>) : OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "references" to toMultiValue(references.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.jcr.repoinit.impl.RepositoryInitializer",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param references  (optional)
    * @param scripts  (optional)
    * @return OrgApacheSlingJcrRepoinitRepositoryInitializerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingJcrRepoinitRepositoryInitializer(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, references: kotlin.Array<kotlin.String>, scripts: kotlin.Array<kotlin.String>) : OrgApacheSlingJcrRepoinitRepositoryInitializerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "references" to toMultiValue(references.toList(), "multi"), "scripts" to toMultiValue(scripts.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.jcr.repoinit.RepositoryInitializer",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingJcrRepoinitRepositoryInitializerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingJcrRepoinitRepositoryInitializerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param resourcePeriodresolverPeriodsearchpath  (optional)
    * @param resourcePeriodresolverPeriodmanglenamespaces  (optional)
    * @param resourcePeriodresolverPeriodallowDirect  (optional)
    * @param resourcePeriodresolverPeriodrequiredPeriodproviders  (optional)
    * @param resourcePeriodresolverPeriodrequiredPeriodprovidernames  (optional)
    * @param resourcePeriodresolverPeriodvirtual  (optional)
    * @param resourcePeriodresolverPeriodmapping  (optional)
    * @param resourcePeriodresolverPeriodmapPeriodlocation  (optional)
    * @param resourcePeriodresolverPeriodmapPeriodobservation  (optional)
    * @param resourcePeriodresolverPerioddefaultPeriodvanityPeriodredirectPeriodstatus  (optional)
    * @param resourcePeriodresolverPeriodenablePeriodvanitypath  (optional)
    * @param resourcePeriodresolverPeriodvanitypathPeriodmaxEntries  (optional)
    * @param resourcePeriodresolverPeriodvanitypathPeriodmaxEntriesPeriodstartup  (optional)
    * @param resourcePeriodresolverPeriodvanitypathPeriodbloomfilterPeriodmaxBytes  (optional)
    * @param resourcePeriodresolverPeriodoptimizePeriodaliasPeriodresolution  (optional)
    * @param resourcePeriodresolverPeriodvanitypathPeriodwhitelist  (optional)
    * @param resourcePeriodresolverPeriodvanitypathPeriodblacklist  (optional)
    * @param resourcePeriodresolverPeriodvanityPeriodprecedence  (optional)
    * @param resourcePeriodresolverPeriodproviderhandlingPeriodparanoid  (optional)
    * @param resourcePeriodresolverPeriodlogPeriodclosing  (optional)
    * @param resourcePeriodresolverPeriodlogPeriodunclosed  (optional)
    * @return OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, resourcePeriodresolverPeriodsearchpath: kotlin.Array<kotlin.String>, resourcePeriodresolverPeriodmanglenamespaces: kotlin.Boolean, resourcePeriodresolverPeriodallowDirect: kotlin.Boolean, resourcePeriodresolverPeriodrequiredPeriodproviders: kotlin.Array<kotlin.String>, resourcePeriodresolverPeriodrequiredPeriodprovidernames: kotlin.Array<kotlin.String>, resourcePeriodresolverPeriodvirtual: kotlin.Array<kotlin.String>, resourcePeriodresolverPeriodmapping: kotlin.Array<kotlin.String>, resourcePeriodresolverPeriodmapPeriodlocation: kotlin.String, resourcePeriodresolverPeriodmapPeriodobservation: kotlin.Array<kotlin.String>, resourcePeriodresolverPerioddefaultPeriodvanityPeriodredirectPeriodstatus: kotlin.Int, resourcePeriodresolverPeriodenablePeriodvanitypath: kotlin.Boolean, resourcePeriodresolverPeriodvanitypathPeriodmaxEntries: kotlin.Int, resourcePeriodresolverPeriodvanitypathPeriodmaxEntriesPeriodstartup: kotlin.Boolean, resourcePeriodresolverPeriodvanitypathPeriodbloomfilterPeriodmaxBytes: kotlin.Int, resourcePeriodresolverPeriodoptimizePeriodaliasPeriodresolution: kotlin.Boolean, resourcePeriodresolverPeriodvanitypathPeriodwhitelist: kotlin.Array<kotlin.String>, resourcePeriodresolverPeriodvanitypathPeriodblacklist: kotlin.Array<kotlin.String>, resourcePeriodresolverPeriodvanityPeriodprecedence: kotlin.Boolean, resourcePeriodresolverPeriodproviderhandlingPeriodparanoid: kotlin.Boolean, resourcePeriodresolverPeriodlogPeriodclosing: kotlin.Boolean, resourcePeriodresolverPeriodlogPeriodunclosed: kotlin.Boolean) : OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "resource.resolver.searchpath" to toMultiValue(resourcePeriodresolverPeriodsearchpath.toList(), "multi"), "resource.resolver.manglenamespaces" to listOf("$resourcePeriodresolverPeriodmanglenamespaces"), "resource.resolver.allowDirect" to listOf("$resourcePeriodresolverPeriodallowDirect"), "resource.resolver.required.providers" to toMultiValue(resourcePeriodresolverPeriodrequiredPeriodproviders.toList(), "multi"), "resource.resolver.required.providernames" to toMultiValue(resourcePeriodresolverPeriodrequiredPeriodprovidernames.toList(), "multi"), "resource.resolver.virtual" to toMultiValue(resourcePeriodresolverPeriodvirtual.toList(), "multi"), "resource.resolver.mapping" to toMultiValue(resourcePeriodresolverPeriodmapping.toList(), "multi"), "resource.resolver.map.location" to listOf("$resourcePeriodresolverPeriodmapPeriodlocation"), "resource.resolver.map.observation" to toMultiValue(resourcePeriodresolverPeriodmapPeriodobservation.toList(), "multi"), "resource.resolver.default.vanity.redirect.status" to listOf("$resourcePeriodresolverPerioddefaultPeriodvanityPeriodredirectPeriodstatus"), "resource.resolver.enable.vanitypath" to listOf("$resourcePeriodresolverPeriodenablePeriodvanitypath"), "resource.resolver.vanitypath.maxEntries" to listOf("$resourcePeriodresolverPeriodvanitypathPeriodmaxEntries"), "resource.resolver.vanitypath.maxEntries.startup" to listOf("$resourcePeriodresolverPeriodvanitypathPeriodmaxEntriesPeriodstartup"), "resource.resolver.vanitypath.bloomfilter.maxBytes" to listOf("$resourcePeriodresolverPeriodvanitypathPeriodbloomfilterPeriodmaxBytes"), "resource.resolver.optimize.alias.resolution" to listOf("$resourcePeriodresolverPeriodoptimizePeriodaliasPeriodresolution"), "resource.resolver.vanitypath.whitelist" to toMultiValue(resourcePeriodresolverPeriodvanitypathPeriodwhitelist.toList(), "multi"), "resource.resolver.vanitypath.blacklist" to toMultiValue(resourcePeriodresolverPeriodvanitypathPeriodblacklist.toList(), "multi"), "resource.resolver.vanity.precedence" to listOf("$resourcePeriodresolverPeriodvanityPeriodprecedence"), "resource.resolver.providerhandling.paranoid" to listOf("$resourcePeriodresolverPeriodproviderhandlingPeriodparanoid"), "resource.resolver.log.closing" to listOf("$resourcePeriodresolverPeriodlogPeriodclosing"), "resource.resolver.log.unclosed" to listOf("$resourcePeriodresolverPeriodlogPeriodunclosed"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.jcr.resource.internal.JcrResourceResolverFactoryImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param allowPeriodonlyPeriodsystemPerioduser  (optional)
    * @return OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingJcrResourceInternalJcrSystemUserValidator(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, allowPeriodonlyPeriodsystemPerioduser: kotlin.Boolean) : OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "allow.only.system.user" to listOf("$allowPeriodonlyPeriodsystemPerioduser"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.jcr.resource.internal.JcrSystemUserValidator",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param path  (optional)
    * @param checkpathPeriodprefix  (optional)
    * @param jcrPath  (optional)
    * @return OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, path: kotlin.String, checkpathPeriodprefix: kotlin.String, jcrPath: kotlin.String) : OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "path" to listOf("$path"), "checkpath.prefix" to listOf("$checkpathPeriodprefix"), "jcrPath" to listOf("$jcrPath"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.jcr.resourcesecurity.impl.ResourceAccessGateFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param servicePeriodranking  (optional)
    * @param typePeriodcollections  (optional)
    * @param typePeriodnoncollections  (optional)
    * @param typePeriodcontent  (optional)
    * @return OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingJcrWebdavImplHandlerDefaultHandlerService(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, servicePeriodranking: kotlin.Int, typePeriodcollections: kotlin.String, typePeriodnoncollections: kotlin.String, typePeriodcontent: kotlin.String) : OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "service.ranking" to listOf("$servicePeriodranking"), "type.collections" to listOf("$typePeriodcollections"), "type.noncollections" to listOf("$typePeriodnoncollections"), "type.content" to listOf("$typePeriodcontent"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DefaultHandlerService",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param servicePeriodranking  (optional)
    * @return OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, servicePeriodranking: kotlin.Int) : OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "service.ranking" to listOf("$servicePeriodranking"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DirListingExportHandlerService",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param davPeriodroot  (optional)
    * @param davPeriodcreateAbsoluteUri  (optional)
    * @param davPeriodrealm  (optional)
    * @param collectionPeriodtypes  (optional)
    * @param filterPeriodprefixes  (optional)
    * @param filterPeriodtypes  (optional)
    * @param filterPerioduris  (optional)
    * @param typePeriodcollections  (optional)
    * @param typePeriodnoncollections  (optional)
    * @param typePeriodcontent  (optional)
    * @return OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, davPeriodroot: kotlin.String, davPeriodcreateAbsoluteUri: kotlin.Boolean, davPeriodrealm: kotlin.String, collectionPeriodtypes: kotlin.Array<kotlin.String>, filterPeriodprefixes: kotlin.Array<kotlin.String>, filterPeriodtypes: kotlin.String, filterPerioduris: kotlin.String, typePeriodcollections: kotlin.String, typePeriodnoncollections: kotlin.String, typePeriodcontent: kotlin.String) : OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "dav.root" to listOf("$davPeriodroot"), "dav.create-absolute-uri" to listOf("$davPeriodcreateAbsoluteUri"), "dav.realm" to listOf("$davPeriodrealm"), "collection.types" to toMultiValue(collectionPeriodtypes.toList(), "multi"), "filter.prefixes" to toMultiValue(filterPeriodprefixes.toList(), "multi"), "filter.types" to listOf("$filterPeriodtypes"), "filter.uris" to listOf("$filterPerioduris"), "type.collections" to listOf("$typePeriodcollections"), "type.noncollections" to listOf("$typePeriodnoncollections"), "type.content" to listOf("$typePeriodcontent"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.jcr.webdav.impl.servlets.SimpleWebDavServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param providerPeriodroots  (optional)
    * @return OrgApacheSlingJmxProviderImplJMXResourceProviderInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingJmxProviderImplJMXResourceProvider(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, providerPeriodroots: kotlin.String) : OrgApacheSlingJmxProviderImplJMXResourceProviderInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "provider.roots" to listOf("$providerPeriodroots"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.jmx.provider.impl.JMXResourceProvider",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingJmxProviderImplJMXResourceProviderInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingJmxProviderImplJMXResourceProviderInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param osgiPeriodhttpPeriodwhiteboardPeriodlistener  (optional)
    * @param osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect  (optional)
    * @param maxPeriodrecursionPerioddepth  (optional)
    * @param cleanupPeriodjobPeriodperiod  (optional)
    * @return OrgApacheSlingModelsImplModelAdapterFactoryInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingModelsImplModelAdapterFactory(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, osgiPeriodhttpPeriodwhiteboardPeriodlistener: kotlin.String, osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect: kotlin.String, maxPeriodrecursionPerioddepth: kotlin.Int, cleanupPeriodjobPeriodperiod: kotlin.Int) : OrgApacheSlingModelsImplModelAdapterFactoryInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "osgi.http.whiteboard.listener" to listOf("$osgiPeriodhttpPeriodwhiteboardPeriodlistener"), "osgi.http.whiteboard.context.select" to listOf("$osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect"), "max.recursion.depth" to listOf("$maxPeriodrecursionPerioddepth"), "cleanup.job.period" to listOf("$cleanupPeriodjobPeriodperiod"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.models.impl.ModelAdapterFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingModelsImplModelAdapterFactoryInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingModelsImplModelAdapterFactoryInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param maxPeriodrecursionPeriodlevels  (optional)
    * @return OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingModelsJacksonexporterImplResourceModuleProvider(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, maxPeriodrecursionPeriodlevels: kotlin.Int) : OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "max.recursion.levels" to listOf("$maxPeriodrecursionPeriodlevels"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.models.jacksonexporter.impl.ResourceModuleProvider",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param felixPeriodinventoryPeriodprinterPeriodname  (optional)
    * @param felixPeriodinventoryPeriodprinterPeriodtitle  (optional)
    * @param path  (optional)
    * @return OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, felixPeriodinventoryPeriodprinterPeriodname: kotlin.String, felixPeriodinventoryPeriodprinterPeriodtitle: kotlin.String, path: kotlin.String) : OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "felix.inventory.printer.name" to listOf("$felixPeriodinventoryPeriodprinterPeriodname"), "felix.inventory.printer.title" to listOf("$felixPeriodinventoryPeriodprinterPeriodtitle"), "path" to listOf("$path"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.resource.inventory.impl.ResourceInventoryPrinterFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param mergePeriodroot  (optional)
    * @param mergePeriodreadOnly  (optional)
    * @return OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingResourcemergerImplMergedResourceProviderFactory(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, mergePeriodroot: kotlin.String, mergePeriodreadOnly: kotlin.Boolean) : OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "merge.root" to listOf("$mergePeriodroot"), "merge.readOnly" to listOf("$mergePeriodreadOnly"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.resourcemerger.impl.MergedResourceProviderFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param mergePeriodroot  (optional)
    * @param mergePeriodreadOnly  (optional)
    * @return OrgApacheSlingResourcemergerPickerOverridingInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingResourcemergerPickerOverriding(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, mergePeriodroot: kotlin.String, mergePeriodreadOnly: kotlin.Boolean) : OrgApacheSlingResourcemergerPickerOverridingInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "merge.root" to listOf("$mergePeriodroot"), "merge.readOnly" to listOf("$mergePeriodreadOnly"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.resourcemerger.picker.overriding",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingResourcemergerPickerOverridingInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingResourcemergerPickerOverridingInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param orgPeriodapachePeriodslingPeriodscriptingPeriodcachePeriodsize  (optional)
    * @param orgPeriodapachePeriodslingPeriodscriptingPeriodcachePeriodadditionalExtensions  (optional)
    * @return OrgApacheSlingScriptingCoreImplScriptCacheImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingScriptingCoreImplScriptCacheImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, orgPeriodapachePeriodslingPeriodscriptingPeriodcachePeriodsize: kotlin.Int, orgPeriodapachePeriodslingPeriodscriptingPeriodcachePeriodadditionalExtensions: kotlin.Array<kotlin.String>) : OrgApacheSlingScriptingCoreImplScriptCacheImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "org.apache.sling.scripting.cache.size" to listOf("$orgPeriodapachePeriodslingPeriodscriptingPeriodcachePeriodsize"), "org.apache.sling.scripting.cache.additional_extensions" to toMultiValue(orgPeriodapachePeriodslingPeriodscriptingPeriodcachePeriodadditionalExtensions.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.scripting.core.impl.ScriptCacheImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingScriptingCoreImplScriptCacheImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingScriptingCoreImplScriptCacheImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param logPeriodstacktracePeriodonclose  (optional)
    * @return OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingScriptingCoreImplScriptingResourceResolverProvider(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, logPeriodstacktracePeriodonclose: kotlin.Boolean) : OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "log.stacktrace.onclose" to listOf("$logPeriodstacktracePeriodonclose"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.scripting.core.impl.ScriptingResourceResolverProviderImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param javaPeriodclassdebuginfo  (optional)
    * @param javaPeriodjavaEncoding  (optional)
    * @param javaPeriodcompilerSourceVM  (optional)
    * @param javaPeriodcompilerTargetVM  (optional)
    * @return OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingScriptingJavaImplJavaScriptEngineFactory(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, javaPeriodclassdebuginfo: kotlin.Boolean, javaPeriodjavaEncoding: kotlin.String, javaPeriodcompilerSourceVM: kotlin.String, javaPeriodcompilerTargetVM: kotlin.String) : OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "java.classdebuginfo" to listOf("$javaPeriodclassdebuginfo"), "java.javaEncoding" to listOf("$javaPeriodjavaEncoding"), "java.compilerSourceVM" to listOf("$javaPeriodcompilerSourceVM"), "java.compilerTargetVM" to listOf("$javaPeriodcompilerTargetVM"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.scripting.java.impl.JavaScriptEngineFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param orgPeriodapachePeriodslingPeriodscriptingPeriodjavascriptPeriodrhinoPeriodoptLevel  (optional)
    * @return OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, orgPeriodapachePeriodslingPeriodscriptingPeriodjavascriptPeriodrhinoPeriodoptLevel: kotlin.Int) : OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "org.apache.sling.scripting.javascript.rhino.optLevel" to listOf("$orgPeriodapachePeriodslingPeriodscriptingPeriodjavascriptPeriodrhinoPeriodoptLevel"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.scripting.javascript.internal.RhinoJavaScriptEngineFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param jasperPeriodcompilerTargetVM  (optional)
    * @param jasperPeriodcompilerSourceVM  (optional)
    * @param jasperPeriodclassdebuginfo  (optional)
    * @param jasperPeriodenablePooling  (optional)
    * @param jasperPeriodieClassId  (optional)
    * @param jasperPeriodgenStringAsCharArray  (optional)
    * @param jasperPeriodkeepgenerated  (optional)
    * @param jasperPeriodmappedfile  (optional)
    * @param jasperPeriodtrimSpaces  (optional)
    * @param jasperPerioddisplaySourceFragments  (optional)
    * @param defaultPeriodisPeriodsession  (optional)
    * @return OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingScriptingJspJspScriptEngineFactory(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, jasperPeriodcompilerTargetVM: kotlin.String, jasperPeriodcompilerSourceVM: kotlin.String, jasperPeriodclassdebuginfo: kotlin.Boolean, jasperPeriodenablePooling: kotlin.Boolean, jasperPeriodieClassId: kotlin.String, jasperPeriodgenStringAsCharArray: kotlin.Boolean, jasperPeriodkeepgenerated: kotlin.Boolean, jasperPeriodmappedfile: kotlin.Boolean, jasperPeriodtrimSpaces: kotlin.Boolean, jasperPerioddisplaySourceFragments: kotlin.Boolean, defaultPeriodisPeriodsession: kotlin.Boolean) : OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "jasper.compilerTargetVM" to listOf("$jasperPeriodcompilerTargetVM"), "jasper.compilerSourceVM" to listOf("$jasperPeriodcompilerSourceVM"), "jasper.classdebuginfo" to listOf("$jasperPeriodclassdebuginfo"), "jasper.enablePooling" to listOf("$jasperPeriodenablePooling"), "jasper.ieClassId" to listOf("$jasperPeriodieClassId"), "jasper.genStringAsCharArray" to listOf("$jasperPeriodgenStringAsCharArray"), "jasper.keepgenerated" to listOf("$jasperPeriodkeepgenerated"), "jasper.mappedfile" to listOf("$jasperPeriodmappedfile"), "jasper.trimSpaces" to listOf("$jasperPeriodtrimSpaces"), "jasper.displaySourceFragments" to listOf("$jasperPerioddisplaySourceFragments"), "default.is.session" to listOf("$defaultPeriodisPeriodsession"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.scripting.jsp.JspScriptEngineFactory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodjsPeriodbindings  (optional)
    * @return OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodjsPeriodbindings: kotlin.Array<kotlin.String>) : OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "org.apache.sling.scripting.sightly.js.bindings" to toMultiValue(orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodjsPeriodbindings.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.scripting.sightly.js.impl.jsapi.SlyBindingsValuesProvider",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param slingPeriodcontentPerioddispositionPeriodpaths  (optional)
    * @param slingPeriodcontentPerioddispositionPeriodexcludedPeriodpaths  (optional)
    * @param slingPeriodcontentPerioddispositionPeriodallPeriodpaths  (optional)
    * @return OrgApacheSlingSecurityImplContentDispositionFilterInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingSecurityImplContentDispositionFilter(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, slingPeriodcontentPerioddispositionPeriodpaths: kotlin.Array<kotlin.String>, slingPeriodcontentPerioddispositionPeriodexcludedPeriodpaths: kotlin.Array<kotlin.String>, slingPeriodcontentPerioddispositionPeriodallPeriodpaths: kotlin.Boolean) : OrgApacheSlingSecurityImplContentDispositionFilterInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "sling.content.disposition.paths" to toMultiValue(slingPeriodcontentPerioddispositionPeriodpaths.toList(), "multi"), "sling.content.disposition.excluded.paths" to toMultiValue(slingPeriodcontentPerioddispositionPeriodexcludedPeriodpaths.toList(), "multi"), "sling.content.disposition.all.paths" to listOf("$slingPeriodcontentPerioddispositionPeriodallPeriodpaths"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.security.impl.ContentDispositionFilter",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingSecurityImplContentDispositionFilterInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingSecurityImplContentDispositionFilterInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param allowPeriodempty  (optional)
    * @param allowPeriodhosts  (optional)
    * @param allowPeriodhostsPeriodregexp  (optional)
    * @param filterPeriodmethods  (optional)
    * @param excludePeriodagentsPeriodregexp  (optional)
    * @return OrgApacheSlingSecurityImplReferrerFilterInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingSecurityImplReferrerFilter(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, allowPeriodempty: kotlin.Boolean, allowPeriodhosts: kotlin.Array<kotlin.String>, allowPeriodhostsPeriodregexp: kotlin.Array<kotlin.String>, filterPeriodmethods: kotlin.Array<kotlin.String>, excludePeriodagentsPeriodregexp: kotlin.Array<kotlin.String>) : OrgApacheSlingSecurityImplReferrerFilterInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "allow.empty" to listOf("$allowPeriodempty"), "allow.hosts" to toMultiValue(allowPeriodhosts.toList(), "multi"), "allow.hosts.regexp" to toMultiValue(allowPeriodhostsPeriodregexp.toList(), "multi"), "filter.methods" to toMultiValue(filterPeriodmethods.toList(), "multi"), "exclude.agents.regexp" to toMultiValue(excludePeriodagentsPeriodregexp.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.security.impl.ReferrerFilter",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingSecurityImplReferrerFilterInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingSecurityImplReferrerFilterInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param userPeriodmapping  (optional)
    * @param userPerioddefault  (optional)
    * @param userPeriodenablePerioddefaultPeriodmapping  (optional)
    * @param requirePeriodvalidation  (optional)
    * @return OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingServiceusermappingImplServiceUserMapperImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, userPeriodmapping: kotlin.Array<kotlin.String>, userPerioddefault: kotlin.String, userPeriodenablePerioddefaultPeriodmapping: kotlin.Boolean, requirePeriodvalidation: kotlin.Boolean) : OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "user.mapping" to toMultiValue(userPeriodmapping.toList(), "multi"), "user.default" to listOf("$userPerioddefault"), "user.enable.default.mapping" to listOf("$userPeriodenablePerioddefaultPeriodmapping"), "require.validation" to listOf("$requirePeriodvalidation"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param servicePeriodranking  (optional)
    * @param userPeriodmapping  (optional)
    * @return OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingServiceusermappingImplServiceUserMapperImplAmended(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, servicePeriodranking: kotlin.Int, userPeriodmapping: kotlin.Array<kotlin.String>) : OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "service.ranking" to listOf("$servicePeriodranking"), "user.mapping" to toMultiValue(userPeriodmapping.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl.amended",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param aliases  (optional)
    * @param index  (optional)
    * @param indexPeriodfiles  (optional)
    * @param enablePeriodhtml  (optional)
    * @param enablePeriodjson  (optional)
    * @param enablePeriodtxt  (optional)
    * @param enablePeriodxml  (optional)
    * @param jsonPeriodmaximumresults  (optional)
    * @param ecmaSuport  (optional)
    * @return OrgApacheSlingServletsGetDefaultGetServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingServletsGetDefaultGetServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, aliases: kotlin.Array<kotlin.String>, index: kotlin.Boolean, indexPeriodfiles: kotlin.Array<kotlin.String>, enablePeriodhtml: kotlin.Boolean, enablePeriodjson: kotlin.Boolean, enablePeriodtxt: kotlin.Boolean, enablePeriodxml: kotlin.Boolean, jsonPeriodmaximumresults: kotlin.Int, ecmaSuport: kotlin.Boolean) : OrgApacheSlingServletsGetDefaultGetServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "aliases" to toMultiValue(aliases.toList(), "multi"), "index" to listOf("$index"), "index.files" to toMultiValue(indexPeriodfiles.toList(), "multi"), "enable.html" to listOf("$enablePeriodhtml"), "enable.json" to listOf("$enablePeriodjson"), "enable.txt" to listOf("$enablePeriodtxt"), "enable.xml" to listOf("$enablePeriodxml"), "json.maximumresults" to listOf("$jsonPeriodmaximumresults"), "ecmaSuport" to listOf("$ecmaSuport"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.servlets.get.DefaultGetServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingServletsGetDefaultGetServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingServletsGetDefaultGetServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param slingPeriodservletPeriodselectors  (optional)
    * @param ecmaSuport  (optional)
    * @return OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingServletsGetImplVersionVersionInfoServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, slingPeriodservletPeriodselectors: kotlin.Array<kotlin.String>, ecmaSuport: kotlin.Boolean) : OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "sling.servlet.selectors" to toMultiValue(slingPeriodservletPeriodselectors.toList(), "multi"), "ecmaSuport" to listOf("$ecmaSuport"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.servlets.get.impl.version.VersionInfoServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param schedulerPeriodexpression  (optional)
    * @param schedulerPeriodconcurrent  (optional)
    * @param chunkPeriodcleanupPeriodage  (optional)
    * @return OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingServletsPostImplHelperChunkCleanUpTask(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, schedulerPeriodexpression: kotlin.String, schedulerPeriodconcurrent: kotlin.Boolean, chunkPeriodcleanupPeriodage: kotlin.Int) : OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "scheduler.expression" to listOf("$schedulerPeriodexpression"), "scheduler.concurrent" to listOf("$schedulerPeriodconcurrent"), "chunk.cleanup.age" to listOf("$chunkPeriodcleanupPeriodage"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.servlets.post.impl.helper.ChunkCleanUpTask",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param servletPeriodpostPerioddateFormats  (optional)
    * @param servletPeriodpostPeriodnodeNameHints  (optional)
    * @param servletPeriodpostPeriodnodeNameMaxLength  (optional)
    * @param servletPeriodpostPeriodcheckinNewVersionableNodes  (optional)
    * @param servletPeriodpostPeriodautoCheckout  (optional)
    * @param servletPeriodpostPeriodautoCheckin  (optional)
    * @param servletPeriodpostPeriodignorePattern  (optional)
    * @return OrgApacheSlingServletsPostImplSlingPostServletInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingServletsPostImplSlingPostServlet(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, servletPeriodpostPerioddateFormats: kotlin.Array<kotlin.String>, servletPeriodpostPeriodnodeNameHints: kotlin.Array<kotlin.String>, servletPeriodpostPeriodnodeNameMaxLength: kotlin.Int, servletPeriodpostPeriodcheckinNewVersionableNodes: kotlin.Boolean, servletPeriodpostPeriodautoCheckout: kotlin.Boolean, servletPeriodpostPeriodautoCheckin: kotlin.Boolean, servletPeriodpostPeriodignorePattern: kotlin.String) : OrgApacheSlingServletsPostImplSlingPostServletInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "servlet.post.dateFormats" to toMultiValue(servletPeriodpostPerioddateFormats.toList(), "multi"), "servlet.post.nodeNameHints" to toMultiValue(servletPeriodpostPeriodnodeNameHints.toList(), "multi"), "servlet.post.nodeNameMaxLength" to listOf("$servletPeriodpostPeriodnodeNameMaxLength"), "servlet.post.checkinNewVersionableNodes" to listOf("$servletPeriodpostPeriodcheckinNewVersionableNodes"), "servlet.post.autoCheckout" to listOf("$servletPeriodpostPeriodautoCheckout"), "servlet.post.autoCheckin" to listOf("$servletPeriodpostPeriodautoCheckin"), "servlet.post.ignorePattern" to listOf("$servletPeriodpostPeriodignorePattern"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.servlets.post.impl.SlingPostServlet",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingServletsPostImplSlingPostServletInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingServletsPostImplSlingPostServletInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param servletresolverPeriodservletRoot  (optional)
    * @param servletresolverPeriodcacheSize  (optional)
    * @param servletresolverPeriodpaths  (optional)
    * @param servletresolverPerioddefaultExtensions  (optional)
    * @return OrgApacheSlingServletsResolverSlingServletResolverInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingServletsResolverSlingServletResolver(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, servletresolverPeriodservletRoot: kotlin.String, servletresolverPeriodcacheSize: kotlin.Int, servletresolverPeriodpaths: kotlin.Array<kotlin.String>, servletresolverPerioddefaultExtensions: kotlin.Array<kotlin.String>) : OrgApacheSlingServletsResolverSlingServletResolverInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "servletresolver.servletRoot" to listOf("$servletresolverPeriodservletRoot"), "servletresolver.cacheSize" to listOf("$servletresolverPeriodcacheSize"), "servletresolver.paths" to toMultiValue(servletresolverPeriodpaths.toList(), "multi"), "servletresolver.defaultExtensions" to toMultiValue(servletresolverPerioddefaultExtensions.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.servlets.resolver.SlingServletResolver",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingServletsResolverSlingServletResolverInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingServletsResolverSlingServletResolverInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param slingPeriodname  (optional)
    * @param slingPerioddescription  (optional)
    * @return OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingSettingsImplSlingSettingsServiceImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, slingPeriodname: kotlin.String, slingPerioddescription: kotlin.String) : OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "sling.name" to listOf("$slingPeriodname"), "sling.description" to listOf("$slingPerioddescription"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.settings.impl.SlingSettingsServiceImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param activePeriodbyPerioddefault  (optional)
    * @param defaultPeriodmessage  (optional)
    * @return OrgApacheSlingStartupfilterImplStartupFilterImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingStartupfilterImplStartupFilterImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, activePeriodbyPerioddefault: kotlin.Boolean, defaultPeriodmessage: kotlin.String) : OrgApacheSlingStartupfilterImplStartupFilterImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "active.by.default" to listOf("$activePeriodbyPerioddefault"), "default.message" to listOf("$defaultPeriodmessage"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.startupfilter.impl.StartupFilterImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingStartupfilterImplStartupFilterImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingStartupfilterImplStartupFilterImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param tenantPeriodroot  (optional)
    * @param tenantPeriodpathPeriodmatcher  (optional)
    * @return OrgApacheSlingTenantInternalTenantProviderImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingTenantInternalTenantProviderImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, tenantPeriodroot: kotlin.String, tenantPeriodpathPeriodmatcher: kotlin.Array<kotlin.String>) : OrgApacheSlingTenantInternalTenantProviderImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "tenant.root" to listOf("$tenantPeriodroot"), "tenant.path.matcher" to toMultiValue(tenantPeriodpathPeriodmatcher.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.tenant.internal.TenantProviderImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingTenantInternalTenantProviderImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingTenantInternalTenantProviderImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param tracerSets  (optional)
    * @param enabled  (optional)
    * @param servletEnabled  (optional)
    * @param recordingCacheSizeInMB  (optional)
    * @param recordingCacheDurationInSecs  (optional)
    * @param recordingCompressionEnabled  (optional)
    * @param gzipResponse  (optional)
    * @return OrgApacheSlingTracerInternalLogTracerInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingTracerInternalLogTracer(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, tracerSets: kotlin.Array<kotlin.String>, enabled: kotlin.Boolean, servletEnabled: kotlin.Boolean, recordingCacheSizeInMB: kotlin.Int, recordingCacheDurationInSecs: kotlin.Int, recordingCompressionEnabled: kotlin.Boolean, gzipResponse: kotlin.Boolean) : OrgApacheSlingTracerInternalLogTracerInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "tracerSets" to toMultiValue(tracerSets.toList(), "multi"), "enabled" to listOf("$enabled"), "servletEnabled" to listOf("$servletEnabled"), "recordingCacheSizeInMB" to listOf("$recordingCacheSizeInMB"), "recordingCacheDurationInSecs" to listOf("$recordingCacheDurationInSecs"), "recordingCompressionEnabled" to listOf("$recordingCompressionEnabled"), "gzipResponse" to listOf("$gzipResponse"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.tracer.internal.LogTracer",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingTracerInternalLogTracerInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingTracerInternalLogTracerInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param post  (optional)
    * @param apply  (optional)
    * @param delete  (optional)
    * @param action  (optional)
    * @param Dollarlocation  (optional)
    * @param propertylist  (optional)
    * @param policyPath  (optional)
    * @return OrgApacheSlingXssImplXSSFilterImplInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun orgApacheSlingXssImplXSSFilterImpl(post: kotlin.Boolean, apply: kotlin.Boolean, delete: kotlin.Boolean, action: kotlin.String, Dollarlocation: kotlin.String, propertylist: kotlin.Array<kotlin.String>, policyPath: kotlin.String) : OrgApacheSlingXssImplXSSFilterImplInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("post" to listOf("$post"), "apply" to listOf("$apply"), "delete" to listOf("$delete"), "action" to listOf("$action"), "$location" to listOf("$Dollarlocation"), "propertylist" to toMultiValue(propertylist.toList(), "csv"), "policyPath" to listOf("$policyPath"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/system/console/configMgr/org.apache.sling.xss.impl.XSSFilterImpl",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrgApacheSlingXssImplXSSFilterImplInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrgApacheSlingXssImplXSSFilterImplInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

}
