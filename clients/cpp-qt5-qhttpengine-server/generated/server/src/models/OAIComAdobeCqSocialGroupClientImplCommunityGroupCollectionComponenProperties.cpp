/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::OAIComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::OAIComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties() {
    this->init();
}

OAIComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::~OAIComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties() {
    
}

void
OAIComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::init() {
    m_group_listing_pagination_enable_isSet = false;
    m_group_listing_lazyloading_enable_isSet = false;
    m_page_size_isSet = false;
    m_priority_isSet = false;
}

void
OAIComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(group_listing_pagination_enable, json[QString("group.listing.pagination.enable")]);
    
    ::OpenAPI::fromJsonValue(group_listing_lazyloading_enable, json[QString("group.listing.lazyloading.enable")]);
    
    ::OpenAPI::fromJsonValue(page_size, json[QString("page.size")]);
    
    ::OpenAPI::fromJsonValue(priority, json[QString("priority")]);
    
}

QString
OAIComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::asJsonObject() const {
    QJsonObject obj;
	if(group_listing_pagination_enable.isSet()){
        obj.insert(QString("group.listing.pagination.enable"), ::OpenAPI::toJsonValue(group_listing_pagination_enable));
    }
	if(group_listing_lazyloading_enable.isSet()){
        obj.insert(QString("group.listing.lazyloading.enable"), ::OpenAPI::toJsonValue(group_listing_lazyloading_enable));
    }
	if(page_size.isSet()){
        obj.insert(QString("page.size"), ::OpenAPI::toJsonValue(page_size));
    }
	if(priority.isSet()){
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(priority));
    }
    return obj;
}

OAIConfigNodePropertyBoolean
OAIComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::getGroupListingPaginationEnable() const {
    return group_listing_pagination_enable;
}
void
OAIComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::setGroupListingPaginationEnable(const OAIConfigNodePropertyBoolean &group_listing_pagination_enable) {
    this->group_listing_pagination_enable = group_listing_pagination_enable;
    this->m_group_listing_pagination_enable_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::getGroupListingLazyloadingEnable() const {
    return group_listing_lazyloading_enable;
}
void
OAIComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::setGroupListingLazyloadingEnable(const OAIConfigNodePropertyBoolean &group_listing_lazyloading_enable) {
    this->group_listing_lazyloading_enable = group_listing_lazyloading_enable;
    this->m_group_listing_lazyloading_enable_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::getPageSize() const {
    return page_size;
}
void
OAIComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::setPageSize(const OAIConfigNodePropertyInteger &page_size) {
    this->page_size = page_size;
    this->m_page_size_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::getPriority() const {
    return priority;
}
void
OAIComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::setPriority(const OAIConfigNodePropertyInteger &priority) {
    this->priority = priority;
    this->m_priority_isSet = true;
}


bool
OAIComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(group_listing_pagination_enable.isSet()){ isObjectUpdated = true; break;}
    
        if(group_listing_lazyloading_enable.isSet()){ isObjectUpdated = true; break;}
    
        if(page_size.isSet()){ isObjectUpdated = true; break;}
    
        if(priority.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

