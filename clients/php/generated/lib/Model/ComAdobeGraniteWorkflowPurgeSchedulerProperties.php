<?php
/**
 * ComAdobeGraniteWorkflowPurgeSchedulerProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ComAdobeGraniteWorkflowPurgeSchedulerProperties Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ComAdobeGraniteWorkflowPurgeSchedulerProperties implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'comAdobeGraniteWorkflowPurgeSchedulerProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'scheduledpurge_name' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'scheduledpurge_workflow_status' => '\OpenAPI\Client\Model\ConfigNodePropertyDropDown',
        'scheduledpurge_model_ids' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'scheduledpurge_daysold' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'scheduledpurge_name' => null,
        'scheduledpurge_workflow_status' => null,
        'scheduledpurge_model_ids' => null,
        'scheduledpurge_daysold' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'scheduledpurge_name' => 'scheduledpurge.name',
        'scheduledpurge_workflow_status' => 'scheduledpurge.workflowStatus',
        'scheduledpurge_model_ids' => 'scheduledpurge.modelIds',
        'scheduledpurge_daysold' => 'scheduledpurge.daysold'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'scheduledpurge_name' => 'setScheduledpurgeName',
        'scheduledpurge_workflow_status' => 'setScheduledpurgeWorkflowStatus',
        'scheduledpurge_model_ids' => 'setScheduledpurgeModelIds',
        'scheduledpurge_daysold' => 'setScheduledpurgeDaysold'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'scheduledpurge_name' => 'getScheduledpurgeName',
        'scheduledpurge_workflow_status' => 'getScheduledpurgeWorkflowStatus',
        'scheduledpurge_model_ids' => 'getScheduledpurgeModelIds',
        'scheduledpurge_daysold' => 'getScheduledpurgeDaysold'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['scheduledpurge_name'] = isset($data['scheduledpurge_name']) ? $data['scheduledpurge_name'] : null;
        $this->container['scheduledpurge_workflow_status'] = isset($data['scheduledpurge_workflow_status']) ? $data['scheduledpurge_workflow_status'] : null;
        $this->container['scheduledpurge_model_ids'] = isset($data['scheduledpurge_model_ids']) ? $data['scheduledpurge_model_ids'] : null;
        $this->container['scheduledpurge_daysold'] = isset($data['scheduledpurge_daysold']) ? $data['scheduledpurge_daysold'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets scheduledpurge_name
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getScheduledpurgeName()
    {
        return $this->container['scheduledpurge_name'];
    }

    /**
     * Sets scheduledpurge_name
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $scheduledpurge_name scheduledpurge_name
     *
     * @return $this
     */
    public function setScheduledpurgeName($scheduledpurge_name)
    {
        $this->container['scheduledpurge_name'] = $scheduledpurge_name;

        return $this;
    }

    /**
     * Gets scheduledpurge_workflow_status
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyDropDown|null
     */
    public function getScheduledpurgeWorkflowStatus()
    {
        return $this->container['scheduledpurge_workflow_status'];
    }

    /**
     * Sets scheduledpurge_workflow_status
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyDropDown|null $scheduledpurge_workflow_status scheduledpurge_workflow_status
     *
     * @return $this
     */
    public function setScheduledpurgeWorkflowStatus($scheduledpurge_workflow_status)
    {
        $this->container['scheduledpurge_workflow_status'] = $scheduledpurge_workflow_status;

        return $this;
    }

    /**
     * Gets scheduledpurge_model_ids
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getScheduledpurgeModelIds()
    {
        return $this->container['scheduledpurge_model_ids'];
    }

    /**
     * Sets scheduledpurge_model_ids
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $scheduledpurge_model_ids scheduledpurge_model_ids
     *
     * @return $this
     */
    public function setScheduledpurgeModelIds($scheduledpurge_model_ids)
    {
        $this->container['scheduledpurge_model_ids'] = $scheduledpurge_model_ids;

        return $this;
    }

    /**
     * Gets scheduledpurge_daysold
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getScheduledpurgeDaysold()
    {
        return $this->container['scheduledpurge_daysold'];
    }

    /**
     * Sets scheduledpurge_daysold
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $scheduledpurge_daysold scheduledpurge_daysold
     *
     * @return $this
     */
    public function setScheduledpurgeDaysold($scheduledpurge_daysold)
    {
        $this->container['scheduledpurge_daysold'] = $scheduledpurge_daysold;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


