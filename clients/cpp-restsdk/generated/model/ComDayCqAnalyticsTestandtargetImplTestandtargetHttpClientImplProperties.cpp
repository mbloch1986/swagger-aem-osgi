/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties()
{
    m_Cq_analytics_testandtarget_api_urlIsSet = false;
    m_Cq_analytics_testandtarget_timeoutIsSet = false;
    m_Cq_analytics_testandtarget_sockettimeoutIsSet = false;
    m_Cq_analytics_testandtarget_recommendations_url_replaceIsSet = false;
    m_Cq_analytics_testandtarget_recommendations_url_replacewithIsSet = false;
}

ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::~ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties()
{
}

void ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Cq_analytics_testandtarget_api_urlIsSet)
    {
        val[utility::conversions::to_string_t("cq.analytics.testandtarget.api.url")] = ModelBase::toJson(m_Cq_analytics_testandtarget_api_url);
    }
    if(m_Cq_analytics_testandtarget_timeoutIsSet)
    {
        val[utility::conversions::to_string_t("cq.analytics.testandtarget.timeout")] = ModelBase::toJson(m_Cq_analytics_testandtarget_timeout);
    }
    if(m_Cq_analytics_testandtarget_sockettimeoutIsSet)
    {
        val[utility::conversions::to_string_t("cq.analytics.testandtarget.sockettimeout")] = ModelBase::toJson(m_Cq_analytics_testandtarget_sockettimeout);
    }
    if(m_Cq_analytics_testandtarget_recommendations_url_replaceIsSet)
    {
        val[utility::conversions::to_string_t("cq.analytics.testandtarget.recommendations.url.replace")] = ModelBase::toJson(m_Cq_analytics_testandtarget_recommendations_url_replace);
    }
    if(m_Cq_analytics_testandtarget_recommendations_url_replacewithIsSet)
    {
        val[utility::conversions::to_string_t("cq.analytics.testandtarget.recommendations.url.replacewith")] = ModelBase::toJson(m_Cq_analytics_testandtarget_recommendations_url_replacewith);
    }

    return val;
}

void ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("cq.analytics.testandtarget.api.url")))
    {
        if(!val[utility::conversions::to_string_t("cq.analytics.testandtarget.api.url")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.analytics.testandtarget.api.url")]);
            setCqAnalyticsTestandtargetApiUrl( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.analytics.testandtarget.timeout")))
    {
        if(!val[utility::conversions::to_string_t("cq.analytics.testandtarget.timeout")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.analytics.testandtarget.timeout")]);
            setCqAnalyticsTestandtargetTimeout( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.analytics.testandtarget.sockettimeout")))
    {
        if(!val[utility::conversions::to_string_t("cq.analytics.testandtarget.sockettimeout")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.analytics.testandtarget.sockettimeout")]);
            setCqAnalyticsTestandtargetSockettimeout( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.analytics.testandtarget.recommendations.url.replace")))
    {
        if(!val[utility::conversions::to_string_t("cq.analytics.testandtarget.recommendations.url.replace")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.analytics.testandtarget.recommendations.url.replace")]);
            setCqAnalyticsTestandtargetRecommendationsUrlReplace( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.analytics.testandtarget.recommendations.url.replacewith")))
    {
        if(!val[utility::conversions::to_string_t("cq.analytics.testandtarget.recommendations.url.replacewith")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.analytics.testandtarget.recommendations.url.replacewith")]);
            setCqAnalyticsTestandtargetRecommendationsUrlReplacewith( newItem );
        }
    }
}

void ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Cq_analytics_testandtarget_api_urlIsSet)
    {
        if (m_Cq_analytics_testandtarget_api_url.get())
        {
            m_Cq_analytics_testandtarget_api_url->toMultipart(multipart, utility::conversions::to_string_t("cq.analytics.testandtarget.api.url."));
        }
    }
    if(m_Cq_analytics_testandtarget_timeoutIsSet)
    {
        if (m_Cq_analytics_testandtarget_timeout.get())
        {
            m_Cq_analytics_testandtarget_timeout->toMultipart(multipart, utility::conversions::to_string_t("cq.analytics.testandtarget.timeout."));
        }
    }
    if(m_Cq_analytics_testandtarget_sockettimeoutIsSet)
    {
        if (m_Cq_analytics_testandtarget_sockettimeout.get())
        {
            m_Cq_analytics_testandtarget_sockettimeout->toMultipart(multipart, utility::conversions::to_string_t("cq.analytics.testandtarget.sockettimeout."));
        }
    }
    if(m_Cq_analytics_testandtarget_recommendations_url_replaceIsSet)
    {
        if (m_Cq_analytics_testandtarget_recommendations_url_replace.get())
        {
            m_Cq_analytics_testandtarget_recommendations_url_replace->toMultipart(multipart, utility::conversions::to_string_t("cq.analytics.testandtarget.recommendations.url.replace."));
        }
    }
    if(m_Cq_analytics_testandtarget_recommendations_url_replacewithIsSet)
    {
        if (m_Cq_analytics_testandtarget_recommendations_url_replacewith.get())
        {
            m_Cq_analytics_testandtarget_recommendations_url_replacewith->toMultipart(multipart, utility::conversions::to_string_t("cq.analytics.testandtarget.recommendations.url.replacewith."));
        }
    }
}

void ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("cq.analytics.testandtarget.api.url")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.analytics.testandtarget.api.url")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.analytics.testandtarget.api.url."));
            setCqAnalyticsTestandtargetApiUrl( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.analytics.testandtarget.timeout")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.analytics.testandtarget.timeout")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.analytics.testandtarget.timeout."));
            setCqAnalyticsTestandtargetTimeout( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.analytics.testandtarget.sockettimeout")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.analytics.testandtarget.sockettimeout")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.analytics.testandtarget.sockettimeout."));
            setCqAnalyticsTestandtargetSockettimeout( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.analytics.testandtarget.recommendations.url.replace")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.analytics.testandtarget.recommendations.url.replace")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.analytics.testandtarget.recommendations.url.replace."));
            setCqAnalyticsTestandtargetRecommendationsUrlReplace( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.analytics.testandtarget.recommendations.url.replacewith")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.analytics.testandtarget.recommendations.url.replacewith")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.analytics.testandtarget.recommendations.url.replacewith."));
            setCqAnalyticsTestandtargetRecommendationsUrlReplacewith( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::getCqAnalyticsTestandtargetApiUrl() const
{
    return m_Cq_analytics_testandtarget_api_url;
}


void ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::setCqAnalyticsTestandtargetApiUrl(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Cq_analytics_testandtarget_api_url = value;
    m_Cq_analytics_testandtarget_api_urlIsSet = true;
}
bool ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::cqAnalyticsTestandtargetApiUrlIsSet() const
{
    return m_Cq_analytics_testandtarget_api_urlIsSet;
}

void ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::unsetCq_analytics_testandtarget_api_url()
{
    m_Cq_analytics_testandtarget_api_urlIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::getCqAnalyticsTestandtargetTimeout() const
{
    return m_Cq_analytics_testandtarget_timeout;
}


void ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::setCqAnalyticsTestandtargetTimeout(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cq_analytics_testandtarget_timeout = value;
    m_Cq_analytics_testandtarget_timeoutIsSet = true;
}
bool ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::cqAnalyticsTestandtargetTimeoutIsSet() const
{
    return m_Cq_analytics_testandtarget_timeoutIsSet;
}

void ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::unsetCq_analytics_testandtarget_timeout()
{
    m_Cq_analytics_testandtarget_timeoutIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::getCqAnalyticsTestandtargetSockettimeout() const
{
    return m_Cq_analytics_testandtarget_sockettimeout;
}


void ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::setCqAnalyticsTestandtargetSockettimeout(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cq_analytics_testandtarget_sockettimeout = value;
    m_Cq_analytics_testandtarget_sockettimeoutIsSet = true;
}
bool ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::cqAnalyticsTestandtargetSockettimeoutIsSet() const
{
    return m_Cq_analytics_testandtarget_sockettimeoutIsSet;
}

void ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::unsetCq_analytics_testandtarget_sockettimeout()
{
    m_Cq_analytics_testandtarget_sockettimeoutIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::getCqAnalyticsTestandtargetRecommendationsUrlReplace() const
{
    return m_Cq_analytics_testandtarget_recommendations_url_replace;
}


void ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::setCqAnalyticsTestandtargetRecommendationsUrlReplace(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Cq_analytics_testandtarget_recommendations_url_replace = value;
    m_Cq_analytics_testandtarget_recommendations_url_replaceIsSet = true;
}
bool ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::cqAnalyticsTestandtargetRecommendationsUrlReplaceIsSet() const
{
    return m_Cq_analytics_testandtarget_recommendations_url_replaceIsSet;
}

void ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::unsetCq_analytics_testandtarget_recommendations_url_replace()
{
    m_Cq_analytics_testandtarget_recommendations_url_replaceIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::getCqAnalyticsTestandtargetRecommendationsUrlReplacewith() const
{
    return m_Cq_analytics_testandtarget_recommendations_url_replacewith;
}


void ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::setCqAnalyticsTestandtargetRecommendationsUrlReplacewith(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Cq_analytics_testandtarget_recommendations_url_replacewith = value;
    m_Cq_analytics_testandtarget_recommendations_url_replacewithIsSet = true;
}
bool ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::cqAnalyticsTestandtargetRecommendationsUrlReplacewithIsSet() const
{
    return m_Cq_analytics_testandtarget_recommendations_url_replacewithIsSet;
}

void ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::unsetCq_analytics_testandtarget_recommendations_url_replacewith()
{
    m_Cq_analytics_testandtarget_recommendations_url_replacewithIsSet = false;
}

}
}
}
}

