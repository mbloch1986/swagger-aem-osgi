/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeProperties {
  #[serde(rename = "fieldWhitelist")]
  field_whitelist: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "attachmentTypeBlacklist")]
  attachment_type_blacklist: Option<::models::ConfigNodePropertyArray>
}

impl ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeProperties {
  pub fn new() -> ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeProperties {
    ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeProperties {
      field_whitelist: None,
      attachment_type_blacklist: None
    }
  }

  pub fn set_field_whitelist(&mut self, field_whitelist: ::models::ConfigNodePropertyArray) {
    self.field_whitelist = Some(field_whitelist);
  }

  pub fn with_field_whitelist(mut self, field_whitelist: ::models::ConfigNodePropertyArray) -> ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeProperties {
    self.field_whitelist = Some(field_whitelist);
    self
  }

  pub fn field_whitelist(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.field_whitelist.as_ref()
  }

  pub fn reset_field_whitelist(&mut self) {
    self.field_whitelist = None;
  }

  pub fn set_attachment_type_blacklist(&mut self, attachment_type_blacklist: ::models::ConfigNodePropertyArray) {
    self.attachment_type_blacklist = Some(attachment_type_blacklist);
  }

  pub fn with_attachment_type_blacklist(mut self, attachment_type_blacklist: ::models::ConfigNodePropertyArray) -> ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeProperties {
    self.attachment_type_blacklist = Some(attachment_type_blacklist);
    self
  }

  pub fn attachment_type_blacklist(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.attachment_type_blacklist.as_ref()
  }

  pub fn reset_attachment_type_blacklist(&mut self) {
    self.attachment_type_blacklist = None;
  }

}



