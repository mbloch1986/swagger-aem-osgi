/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties : IEquatable<ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties>
    { 
        /// <summary>
        /// Gets or Sets VersionId
        /// </summary>
        [DataMember(Name="version.id")]
        public ConfigNodePropertyString VersionId { get; set; }

        /// <summary>
        /// Gets or Sets CacheOn
        /// </summary>
        [DataMember(Name="cache.on")]
        public ConfigNodePropertyBoolean CacheOn { get; set; }

        /// <summary>
        /// Gets or Sets ConcurrencyLevel
        /// </summary>
        [DataMember(Name="concurrency.level")]
        public ConfigNodePropertyInteger ConcurrencyLevel { get; set; }

        /// <summary>
        /// Gets or Sets CacheStartSize
        /// </summary>
        [DataMember(Name="cache.start.size")]
        public ConfigNodePropertyInteger CacheStartSize { get; set; }

        /// <summary>
        /// Gets or Sets CacheTtl
        /// </summary>
        [DataMember(Name="cache.ttl")]
        public ConfigNodePropertyInteger CacheTtl { get; set; }

        /// <summary>
        /// Gets or Sets CacheSize
        /// </summary>
        [DataMember(Name="cache.size")]
        public ConfigNodePropertyInteger CacheSize { get; set; }

        /// <summary>
        /// Gets or Sets TimeLimit
        /// </summary>
        [DataMember(Name="time.limit")]
        public ConfigNodePropertyInteger TimeLimit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties {\n");
            sb.Append("  VersionId: ").Append(VersionId).Append("\n");
            sb.Append("  CacheOn: ").Append(CacheOn).Append("\n");
            sb.Append("  ConcurrencyLevel: ").Append(ConcurrencyLevel).Append("\n");
            sb.Append("  CacheStartSize: ").Append(CacheStartSize).Append("\n");
            sb.Append("  CacheTtl: ").Append(CacheTtl).Append("\n");
            sb.Append("  CacheSize: ").Append(CacheSize).Append("\n");
            sb.Append("  TimeLimit: ").Append(TimeLimit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties)obj);
        }

        /// <summary>
        /// Returns true if ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    VersionId == other.VersionId ||
                    VersionId != null &&
                    VersionId.Equals(other.VersionId)
                ) && 
                (
                    CacheOn == other.CacheOn ||
                    CacheOn != null &&
                    CacheOn.Equals(other.CacheOn)
                ) && 
                (
                    ConcurrencyLevel == other.ConcurrencyLevel ||
                    ConcurrencyLevel != null &&
                    ConcurrencyLevel.Equals(other.ConcurrencyLevel)
                ) && 
                (
                    CacheStartSize == other.CacheStartSize ||
                    CacheStartSize != null &&
                    CacheStartSize.Equals(other.CacheStartSize)
                ) && 
                (
                    CacheTtl == other.CacheTtl ||
                    CacheTtl != null &&
                    CacheTtl.Equals(other.CacheTtl)
                ) && 
                (
                    CacheSize == other.CacheSize ||
                    CacheSize != null &&
                    CacheSize.Equals(other.CacheSize)
                ) && 
                (
                    TimeLimit == other.TimeLimit ||
                    TimeLimit != null &&
                    TimeLimit.Equals(other.TimeLimit)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (VersionId != null)
                    hashCode = hashCode * 59 + VersionId.GetHashCode();
                    if (CacheOn != null)
                    hashCode = hashCode * 59 + CacheOn.GetHashCode();
                    if (ConcurrencyLevel != null)
                    hashCode = hashCode * 59 + ConcurrencyLevel.GetHashCode();
                    if (CacheStartSize != null)
                    hashCode = hashCode * 59 + CacheStartSize.GetHashCode();
                    if (CacheTtl != null)
                    hashCode = hashCode * 59 + CacheTtl.GetHashCode();
                    if (CacheSize != null)
                    hashCode = hashCode * 59 + CacheSize.GetHashCode();
                    if (TimeLimit != null)
                    hashCode = hashCode * 59 + TimeLimit.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties left, ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties left, ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
