/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties.h
 *
 * 
 */

#ifndef ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties_H_
#define ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties_H_



#include "ConfigNodePropertyDropDown.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"
#include <memory>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties
{
public:
    ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties();
    virtual ~ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties();
    
    std::string toJsonString();
    void fromJsonString(std::string const& jsonString);

    /////////////////////////////////////////////
    /// ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties members
    
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getComAdobeGraniteJettySslPort() const;
    void setComAdobeGraniteJettySslPort(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeGraniteJettySslKeystoreUser() const;
    void setComAdobeGraniteJettySslKeystoreUser(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeGraniteJettySslKeystorePassword() const;
    void setComAdobeGraniteJettySslKeystorePassword(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getComAdobeGraniteJettySslCiphersuitesExcluded() const;
    void setComAdobeGraniteJettySslCiphersuitesExcluded(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getComAdobeGraniteJettySslCiphersuitesIncluded() const;
    void setComAdobeGraniteJettySslCiphersuitesIncluded(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyDropDown> getComAdobeGraniteJettySslClientCertificate() const;
    void setComAdobeGraniteJettySslClientCertificate(std::shared_ptr<ConfigNodePropertyDropDown> value);

protected:
    std::shared_ptr<ConfigNodePropertyInteger> m_Com_adobe_granite_jetty_ssl_port;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_granite_jetty_ssl_keystore_user;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_granite_jetty_ssl_keystore_password;
    std::shared_ptr<ConfigNodePropertyArray> m_Com_adobe_granite_jetty_ssl_ciphersuites_excluded;
    std::shared_ptr<ConfigNodePropertyArray> m_Com_adobe_granite_jetty_ssl_ciphersuites_included;
    std::shared_ptr<ConfigNodePropertyDropDown> m_Com_adobe_granite_jetty_ssl_client_certificate;
};

}
}
}
}

#endif /* ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties_H_ */
