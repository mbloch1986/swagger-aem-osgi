/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties()
{
    m_PathIsSet = false;
    m_Token_required_attrIsSet = false;
    m_Token_alternate_urlIsSet = false;
    m_Token_encapsulatedIsSet = false;
    m_Skip_token_refreshIsSet = false;
    
}

ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::~ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties()
{
}

void ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_PathIsSet)
    {
        val["path"] = ModelBase::toJson(m_Path);
    }
    if(m_Token_required_attrIsSet)
    {
        val["token.required.attr"] = ModelBase::toJson(m_Token_required_attr);
    }
    if(m_Token_alternate_urlIsSet)
    {
        val["token.alternate.url"] = ModelBase::toJson(m_Token_alternate_url);
    }
    if(m_Token_encapsulatedIsSet)
    {
        val["token.encapsulated"] = ModelBase::toJson(m_Token_encapsulated);
    }
    if(m_Skip_token_refreshIsSet)
    {
        val["skip.token.refresh"] = ModelBase::toJson(m_Skip_token_refresh);
    }
    

    return val;
}

void ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::fromJson(nlohmann::json& val)
{
    if(val.find("path") != val.end())
    {
        if(!val["path"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["path"]);
            setPath( newItem );
        }
        
    }
    if(val.find("token.required.attr") != val.end())
    {
        if(!val["token.required.attr"].is_null())
        {
            ConfigNodePropertyDropDown newItem;
            newItem.fromJson(val["token.required.attr"]);
            setTokenRequiredAttr( newItem );
        }
        
    }
    if(val.find("token.alternate.url") != val.end())
    {
        if(!val["token.alternate.url"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["token.alternate.url"]);
            setTokenAlternateUrl( newItem );
        }
        
    }
    if(val.find("token.encapsulated") != val.end())
    {
        if(!val["token.encapsulated"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["token.encapsulated"]);
            setTokenEncapsulated( newItem );
        }
        
    }
    if(val.find("skip.token.refresh") != val.end())
    {
        if(!val["skip.token.refresh"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["skip.token.refresh"]);
            setSkipTokenRefresh( newItem );
        }
        
    }
    
}


ConfigNodePropertyString ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::getPath() const
{
    return m_Path;
}
void ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::setPath(ConfigNodePropertyString const& value)
{
    m_Path = value;
    m_PathIsSet = true;
}
bool ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::pathIsSet() const
{
    return m_PathIsSet;
}
void ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::unsetPath()
{
    m_PathIsSet = false;
}
ConfigNodePropertyDropDown ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::getTokenRequiredAttr() const
{
    return m_Token_required_attr;
}
void ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::setTokenRequiredAttr(ConfigNodePropertyDropDown const& value)
{
    m_Token_required_attr = value;
    m_Token_required_attrIsSet = true;
}
bool ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::tokenRequiredAttrIsSet() const
{
    return m_Token_required_attrIsSet;
}
void ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::unsetToken_required_attr()
{
    m_Token_required_attrIsSet = false;
}
ConfigNodePropertyString ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::getTokenAlternateUrl() const
{
    return m_Token_alternate_url;
}
void ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::setTokenAlternateUrl(ConfigNodePropertyString const& value)
{
    m_Token_alternate_url = value;
    m_Token_alternate_urlIsSet = true;
}
bool ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::tokenAlternateUrlIsSet() const
{
    return m_Token_alternate_urlIsSet;
}
void ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::unsetToken_alternate_url()
{
    m_Token_alternate_urlIsSet = false;
}
ConfigNodePropertyBoolean ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::getTokenEncapsulated() const
{
    return m_Token_encapsulated;
}
void ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::setTokenEncapsulated(ConfigNodePropertyBoolean const& value)
{
    m_Token_encapsulated = value;
    m_Token_encapsulatedIsSet = true;
}
bool ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::tokenEncapsulatedIsSet() const
{
    return m_Token_encapsulatedIsSet;
}
void ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::unsetToken_encapsulated()
{
    m_Token_encapsulatedIsSet = false;
}
ConfigNodePropertyArray ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::getSkipTokenRefresh() const
{
    return m_Skip_token_refresh;
}
void ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::setSkipTokenRefresh(ConfigNodePropertyArray const& value)
{
    m_Skip_token_refresh = value;
    m_Skip_token_refreshIsSet = true;
}
bool ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::skipTokenRefreshIsSet() const
{
    return m_Skip_token_refreshIsSet;
}
void ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::unsetSkip_token_refresh()
{
    m_Skip_token_refreshIsSet = false;
}

}
}
}
}

