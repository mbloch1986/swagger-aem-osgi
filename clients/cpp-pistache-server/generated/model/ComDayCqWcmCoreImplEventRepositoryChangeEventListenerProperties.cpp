/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComDayCqWcmCoreImplEventRepositoryChangeEventListenerProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComDayCqWcmCoreImplEventRepositoryChangeEventListenerProperties::ComDayCqWcmCoreImplEventRepositoryChangeEventListenerProperties()
{
    m_PathsIsSet = false;
    m_ExcludedPathsIsSet = false;
    
}

ComDayCqWcmCoreImplEventRepositoryChangeEventListenerProperties::~ComDayCqWcmCoreImplEventRepositoryChangeEventListenerProperties()
{
}

void ComDayCqWcmCoreImplEventRepositoryChangeEventListenerProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComDayCqWcmCoreImplEventRepositoryChangeEventListenerProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_PathsIsSet)
    {
        val["paths"] = ModelBase::toJson(m_Paths);
    }
    if(m_ExcludedPathsIsSet)
    {
        val["excludedPaths"] = ModelBase::toJson(m_ExcludedPaths);
    }
    

    return val;
}

void ComDayCqWcmCoreImplEventRepositoryChangeEventListenerProperties::fromJson(nlohmann::json& val)
{
    if(val.find("paths") != val.end())
    {
        if(!val["paths"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["paths"]);
            setPaths( newItem );
        }
        
    }
    if(val.find("excludedPaths") != val.end())
    {
        if(!val["excludedPaths"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["excludedPaths"]);
            setExcludedPaths( newItem );
        }
        
    }
    
}


ConfigNodePropertyArray ComDayCqWcmCoreImplEventRepositoryChangeEventListenerProperties::getPaths() const
{
    return m_Paths;
}
void ComDayCqWcmCoreImplEventRepositoryChangeEventListenerProperties::setPaths(ConfigNodePropertyArray const& value)
{
    m_Paths = value;
    m_PathsIsSet = true;
}
bool ComDayCqWcmCoreImplEventRepositoryChangeEventListenerProperties::pathsIsSet() const
{
    return m_PathsIsSet;
}
void ComDayCqWcmCoreImplEventRepositoryChangeEventListenerProperties::unsetPaths()
{
    m_PathsIsSet = false;
}
ConfigNodePropertyArray ComDayCqWcmCoreImplEventRepositoryChangeEventListenerProperties::getExcludedPaths() const
{
    return m_ExcludedPaths;
}
void ComDayCqWcmCoreImplEventRepositoryChangeEventListenerProperties::setExcludedPaths(ConfigNodePropertyArray const& value)
{
    m_ExcludedPaths = value;
    m_ExcludedPathsIsSet = true;
}
bool ComDayCqWcmCoreImplEventRepositoryChangeEventListenerProperties::excludedPathsIsSet() const
{
    return m_ExcludedPathsIsSet;
}
void ComDayCqWcmCoreImplEventRepositoryChangeEventListenerProperties::unsetExcludedPaths()
{
    m_ExcludedPathsIsSet = false;
}

}
}
}
}

