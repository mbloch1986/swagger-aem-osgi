# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.config_node_property_array import ConfigNodePropertyArray  # noqa: F401,E501
from openapi_server.models.config_node_property_boolean import ConfigNodePropertyBoolean  # noqa: F401,E501
from openapi_server import util


class ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, compatgroups: ConfigNodePropertyArray=None, enabled: ConfigNodePropertyBoolean=None):  # noqa: E501
        """ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties - a model defined in OpenAPI

        :param compatgroups: The compatgroups of this ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties.  # noqa: E501
        :type compatgroups: ConfigNodePropertyArray
        :param enabled: The enabled of this ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties.  # noqa: E501
        :type enabled: ConfigNodePropertyBoolean
        """
        self.openapi_types = {
            'compatgroups': ConfigNodePropertyArray,
            'enabled': ConfigNodePropertyBoolean
        }

        self.attribute_map = {
            'compatgroups': 'compatgroups',
            'enabled': 'enabled'
        }

        self._compatgroups = compatgroups
        self._enabled = enabled

    @classmethod
    def from_dict(cls, dikt) -> 'ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The comAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties of this ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties.  # noqa: E501
        :rtype: ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties
        """
        return util.deserialize_model(dikt, cls)

    @property
    def compatgroups(self) -> ConfigNodePropertyArray:
        """Gets the compatgroups of this ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties.


        :return: The compatgroups of this ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties.
        :rtype: ConfigNodePropertyArray
        """
        return self._compatgroups

    @compatgroups.setter
    def compatgroups(self, compatgroups: ConfigNodePropertyArray):
        """Sets the compatgroups of this ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties.


        :param compatgroups: The compatgroups of this ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties.
        :type compatgroups: ConfigNodePropertyArray
        """

        self._compatgroups = compatgroups

    @property
    def enabled(self) -> ConfigNodePropertyBoolean:
        """Gets the enabled of this ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties.


        :return: The enabled of this ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties.
        :rtype: ConfigNodePropertyBoolean
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled: ConfigNodePropertyBoolean):
        """Sets the enabled of this ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties.


        :param enabled: The enabled of this ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties.
        :type enabled: ConfigNodePropertyBoolean
        """

        self._enabled = enabled
