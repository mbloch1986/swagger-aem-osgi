/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties {
  #[serde(rename = "from.address")]
  from_address: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "sender.host")]
  sender_host: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "max.bounce.count")]
  max_bounce_count: Option<::models::ConfigNodePropertyString>
}

impl ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties {
  pub fn new() -> ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties {
    ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties {
      from_address: None,
      sender_host: None,
      max_bounce_count: None
    }
  }

  pub fn set_from_address(&mut self, from_address: ::models::ConfigNodePropertyString) {
    self.from_address = Some(from_address);
  }

  pub fn with_from_address(mut self, from_address: ::models::ConfigNodePropertyString) -> ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties {
    self.from_address = Some(from_address);
    self
  }

  pub fn from_address(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.from_address.as_ref()
  }

  pub fn reset_from_address(&mut self) {
    self.from_address = None;
  }

  pub fn set_sender_host(&mut self, sender_host: ::models::ConfigNodePropertyString) {
    self.sender_host = Some(sender_host);
  }

  pub fn with_sender_host(mut self, sender_host: ::models::ConfigNodePropertyString) -> ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties {
    self.sender_host = Some(sender_host);
    self
  }

  pub fn sender_host(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.sender_host.as_ref()
  }

  pub fn reset_sender_host(&mut self) {
    self.sender_host = None;
  }

  pub fn set_max_bounce_count(&mut self, max_bounce_count: ::models::ConfigNodePropertyString) {
    self.max_bounce_count = Some(max_bounce_count);
  }

  pub fn with_max_bounce_count(mut self, max_bounce_count: ::models::ConfigNodePropertyString) -> ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties {
    self.max_bounce_count = Some(max_bounce_count);
    self
  }

  pub fn max_bounce_count(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.max_bounce_count.as_ref()
  }

  pub fn reset_max_bounce_count(&mut self) {
    self.max_bounce_count = None;
  }

}



