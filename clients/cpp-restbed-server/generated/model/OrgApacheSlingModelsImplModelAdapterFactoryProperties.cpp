/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingModelsImplModelAdapterFactoryProperties.h"

#include <string>
#include <sstream>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheSlingModelsImplModelAdapterFactoryProperties::OrgApacheSlingModelsImplModelAdapterFactoryProperties()
{
    
}

OrgApacheSlingModelsImplModelAdapterFactoryProperties::~OrgApacheSlingModelsImplModelAdapterFactoryProperties()
{
}

std::string OrgApacheSlingModelsImplModelAdapterFactoryProperties::toJsonString()
{
	std::stringstream ss;
	ptree pt;
	write_json(ss, pt, false);
	return ss.str();
}

void OrgApacheSlingModelsImplModelAdapterFactoryProperties::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingModelsImplModelAdapterFactoryProperties::getOsgiHttpWhiteboardListener() const
{
    return m_Osgi_http_whiteboard_listener;
}
void OrgApacheSlingModelsImplModelAdapterFactoryProperties::setOsgiHttpWhiteboardListener(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Osgi_http_whiteboard_listener = value;
}
std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingModelsImplModelAdapterFactoryProperties::getOsgiHttpWhiteboardContextSelect() const
{
    return m_Osgi_http_whiteboard_context_select;
}
void OrgApacheSlingModelsImplModelAdapterFactoryProperties::setOsgiHttpWhiteboardContextSelect(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Osgi_http_whiteboard_context_select = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingModelsImplModelAdapterFactoryProperties::getMaxRecursionDepth() const
{
    return m_Max_recursion_depth;
}
void OrgApacheSlingModelsImplModelAdapterFactoryProperties::setMaxRecursionDepth(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Max_recursion_depth = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingModelsImplModelAdapterFactoryProperties::getCleanupJobPeriod() const
{
    return m_Cleanup_job_period;
}
void OrgApacheSlingModelsImplModelAdapterFactoryProperties::setCleanupJobPeriod(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cleanup_job_period = value;
}

}
}
}
}

