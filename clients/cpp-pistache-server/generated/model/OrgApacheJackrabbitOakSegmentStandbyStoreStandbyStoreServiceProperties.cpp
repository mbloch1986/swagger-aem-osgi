/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties()
{
    m_Org_apache_sling_installer_configuration_persistIsSet = false;
    m_ModeIsSet = false;
    m_PortIsSet = false;
    m_Primary_hostIsSet = false;
    m_IntervalIsSet = false;
    m_Primary_allowed_client_ip_rangesIsSet = false;
    m_SecureIsSet = false;
    m_Standby_readtimeoutIsSet = false;
    m_Standby_autocleanIsSet = false;
    
}

OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::~OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties()
{
}

void OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Org_apache_sling_installer_configuration_persistIsSet)
    {
        val["org.apache.sling.installer.configuration.persist"] = ModelBase::toJson(m_Org_apache_sling_installer_configuration_persist);
    }
    if(m_ModeIsSet)
    {
        val["mode"] = ModelBase::toJson(m_Mode);
    }
    if(m_PortIsSet)
    {
        val["port"] = ModelBase::toJson(m_Port);
    }
    if(m_Primary_hostIsSet)
    {
        val["primary.host"] = ModelBase::toJson(m_Primary_host);
    }
    if(m_IntervalIsSet)
    {
        val["interval"] = ModelBase::toJson(m_Interval);
    }
    if(m_Primary_allowed_client_ip_rangesIsSet)
    {
        val["primary.allowed-client-ip-ranges"] = ModelBase::toJson(m_Primary_allowed_client_ip_ranges);
    }
    if(m_SecureIsSet)
    {
        val["secure"] = ModelBase::toJson(m_Secure);
    }
    if(m_Standby_readtimeoutIsSet)
    {
        val["standby.readtimeout"] = ModelBase::toJson(m_Standby_readtimeout);
    }
    if(m_Standby_autocleanIsSet)
    {
        val["standby.autoclean"] = ModelBase::toJson(m_Standby_autoclean);
    }
    

    return val;
}

void OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::fromJson(nlohmann::json& val)
{
    if(val.find("org.apache.sling.installer.configuration.persist") != val.end())
    {
        if(!val["org.apache.sling.installer.configuration.persist"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["org.apache.sling.installer.configuration.persist"]);
            setOrgApacheSlingInstallerConfigurationPersist( newItem );
        }
        
    }
    if(val.find("mode") != val.end())
    {
        if(!val["mode"].is_null())
        {
            ConfigNodePropertyDropDown newItem;
            newItem.fromJson(val["mode"]);
            setMode( newItem );
        }
        
    }
    if(val.find("port") != val.end())
    {
        if(!val["port"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["port"]);
            setPort( newItem );
        }
        
    }
    if(val.find("primary.host") != val.end())
    {
        if(!val["primary.host"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["primary.host"]);
            setPrimaryHost( newItem );
        }
        
    }
    if(val.find("interval") != val.end())
    {
        if(!val["interval"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["interval"]);
            setInterval( newItem );
        }
        
    }
    if(val.find("primary.allowed-client-ip-ranges") != val.end())
    {
        if(!val["primary.allowed-client-ip-ranges"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["primary.allowed-client-ip-ranges"]);
            setPrimaryAllowedClientIpRanges( newItem );
        }
        
    }
    if(val.find("secure") != val.end())
    {
        if(!val["secure"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["secure"]);
            setSecure( newItem );
        }
        
    }
    if(val.find("standby.readtimeout") != val.end())
    {
        if(!val["standby.readtimeout"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["standby.readtimeout"]);
            setStandbyReadtimeout( newItem );
        }
        
    }
    if(val.find("standby.autoclean") != val.end())
    {
        if(!val["standby.autoclean"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["standby.autoclean"]);
            setStandbyAutoclean( newItem );
        }
        
    }
    
}


ConfigNodePropertyBoolean OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::getOrgApacheSlingInstallerConfigurationPersist() const
{
    return m_Org_apache_sling_installer_configuration_persist;
}
void OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::setOrgApacheSlingInstallerConfigurationPersist(ConfigNodePropertyBoolean const& value)
{
    m_Org_apache_sling_installer_configuration_persist = value;
    m_Org_apache_sling_installer_configuration_persistIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::orgApacheSlingInstallerConfigurationPersistIsSet() const
{
    return m_Org_apache_sling_installer_configuration_persistIsSet;
}
void OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::unsetOrg_apache_sling_installer_configuration_persist()
{
    m_Org_apache_sling_installer_configuration_persistIsSet = false;
}
ConfigNodePropertyDropDown OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::getMode() const
{
    return m_Mode;
}
void OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::setMode(ConfigNodePropertyDropDown const& value)
{
    m_Mode = value;
    m_ModeIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::modeIsSet() const
{
    return m_ModeIsSet;
}
void OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::unsetMode()
{
    m_ModeIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::getPort() const
{
    return m_Port;
}
void OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::setPort(ConfigNodePropertyInteger const& value)
{
    m_Port = value;
    m_PortIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::portIsSet() const
{
    return m_PortIsSet;
}
void OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::unsetPort()
{
    m_PortIsSet = false;
}
ConfigNodePropertyString OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::getPrimaryHost() const
{
    return m_Primary_host;
}
void OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::setPrimaryHost(ConfigNodePropertyString const& value)
{
    m_Primary_host = value;
    m_Primary_hostIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::primaryHostIsSet() const
{
    return m_Primary_hostIsSet;
}
void OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::unsetPrimary_host()
{
    m_Primary_hostIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::getInterval() const
{
    return m_Interval;
}
void OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::setInterval(ConfigNodePropertyInteger const& value)
{
    m_Interval = value;
    m_IntervalIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::intervalIsSet() const
{
    return m_IntervalIsSet;
}
void OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::unsetInterval()
{
    m_IntervalIsSet = false;
}
ConfigNodePropertyArray OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::getPrimaryAllowedClientIpRanges() const
{
    return m_Primary_allowed_client_ip_ranges;
}
void OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::setPrimaryAllowedClientIpRanges(ConfigNodePropertyArray const& value)
{
    m_Primary_allowed_client_ip_ranges = value;
    m_Primary_allowed_client_ip_rangesIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::primaryAllowedClientIpRangesIsSet() const
{
    return m_Primary_allowed_client_ip_rangesIsSet;
}
void OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::unsetPrimary_allowed_client_ip_ranges()
{
    m_Primary_allowed_client_ip_rangesIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::getSecure() const
{
    return m_Secure;
}
void OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::setSecure(ConfigNodePropertyBoolean const& value)
{
    m_Secure = value;
    m_SecureIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::secureIsSet() const
{
    return m_SecureIsSet;
}
void OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::unsetSecure()
{
    m_SecureIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::getStandbyReadtimeout() const
{
    return m_Standby_readtimeout;
}
void OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::setStandbyReadtimeout(ConfigNodePropertyInteger const& value)
{
    m_Standby_readtimeout = value;
    m_Standby_readtimeoutIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::standbyReadtimeoutIsSet() const
{
    return m_Standby_readtimeoutIsSet;
}
void OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::unsetStandby_readtimeout()
{
    m_Standby_readtimeoutIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::getStandbyAutoclean() const
{
    return m_Standby_autoclean;
}
void OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::setStandbyAutoclean(ConfigNodePropertyBoolean const& value)
{
    m_Standby_autoclean = value;
    m_Standby_autocleanIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::standbyAutocleanIsSet() const
{
    return m_Standby_autocleanIsSet;
}
void OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::unsetStandby_autoclean()
{
    m_Standby_autocleanIsSet = false;
}

}
}
}
}

