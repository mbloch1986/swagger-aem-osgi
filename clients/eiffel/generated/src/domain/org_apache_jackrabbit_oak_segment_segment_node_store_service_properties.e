note
 description:"[
		Adobe Experience Manager OSGI config (AEM) API
 		Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
  		OpenAPI spec version: 1.0.0-pre.0
 	    Contact: opensource@shinesolutions.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class ORG_APACHE_JACKRABBIT_OAK_SEGMENT_SEGMENT_NODE_STORE_SERVICE_PROPERTIES 

inherit

  ANY
      redefine
          out 
      end


feature --Access

    repository_home: detachable CONFIG_NODE_PROPERTY_STRING 
      
    tarmk_mode: detachable CONFIG_NODE_PROPERTY_STRING 
      
    tarmk_size: detachable CONFIG_NODE_PROPERTY_INTEGER 
      
    segment_cache_size: detachable CONFIG_NODE_PROPERTY_INTEGER 
      
    string_cache_size: detachable CONFIG_NODE_PROPERTY_INTEGER 
      
    template_cache_size: detachable CONFIG_NODE_PROPERTY_INTEGER 
      
    string_deduplication_cache_size: detachable CONFIG_NODE_PROPERTY_INTEGER 
      
    template_deduplication_cache_size: detachable CONFIG_NODE_PROPERTY_INTEGER 
      
    node_deduplication_cache_size: detachable CONFIG_NODE_PROPERTY_INTEGER 
      
    pause_compaction: detachable CONFIG_NODE_PROPERTY_BOOLEAN 
      
    compaction_retry_count: detachable CONFIG_NODE_PROPERTY_INTEGER 
      
    compaction_force_timeout: detachable CONFIG_NODE_PROPERTY_INTEGER 
      
    compaction_size_delta_estimation: detachable CONFIG_NODE_PROPERTY_INTEGER 
      
    compaction_disable_estimation: detachable CONFIG_NODE_PROPERTY_BOOLEAN 
      
    compaction_retained_generations: detachable CONFIG_NODE_PROPERTY_INTEGER 
      
    compaction_memory_threshold: detachable CONFIG_NODE_PROPERTY_INTEGER 
      
    compaction_progress_log: detachable CONFIG_NODE_PROPERTY_INTEGER 
      
    standby: detachable CONFIG_NODE_PROPERTY_BOOLEAN 
      
    custom_blob_store: detachable CONFIG_NODE_PROPERTY_BOOLEAN 
      
    custom_segment_store: detachable CONFIG_NODE_PROPERTY_BOOLEAN 
      
    split_persistence: detachable CONFIG_NODE_PROPERTY_BOOLEAN 
      
    repository_backup_dir: detachable CONFIG_NODE_PROPERTY_STRING 
      
    blob_gc_max_age_in_secs: detachable CONFIG_NODE_PROPERTY_INTEGER 
      
    blob_track_snapshot_interval_in_secs: detachable CONFIG_NODE_PROPERTY_INTEGER 
      

feature -- Change Element  
 
    set_repository_home (a_name: like repository_home)
        -- Set 'repository_home' with 'a_name'.
      do
        repository_home := a_name
      ensure
        repository_home_set: repository_home = a_name		
      end

    set_tarmk_mode (a_name: like tarmk_mode)
        -- Set 'tarmk_mode' with 'a_name'.
      do
        tarmk_mode := a_name
      ensure
        tarmk_mode_set: tarmk_mode = a_name		
      end

    set_tarmk_size (a_name: like tarmk_size)
        -- Set 'tarmk_size' with 'a_name'.
      do
        tarmk_size := a_name
      ensure
        tarmk_size_set: tarmk_size = a_name		
      end

    set_segment_cache_size (a_name: like segment_cache_size)
        -- Set 'segment_cache_size' with 'a_name'.
      do
        segment_cache_size := a_name
      ensure
        segment_cache_size_set: segment_cache_size = a_name		
      end

    set_string_cache_size (a_name: like string_cache_size)
        -- Set 'string_cache_size' with 'a_name'.
      do
        string_cache_size := a_name
      ensure
        string_cache_size_set: string_cache_size = a_name		
      end

    set_template_cache_size (a_name: like template_cache_size)
        -- Set 'template_cache_size' with 'a_name'.
      do
        template_cache_size := a_name
      ensure
        template_cache_size_set: template_cache_size = a_name		
      end

    set_string_deduplication_cache_size (a_name: like string_deduplication_cache_size)
        -- Set 'string_deduplication_cache_size' with 'a_name'.
      do
        string_deduplication_cache_size := a_name
      ensure
        string_deduplication_cache_size_set: string_deduplication_cache_size = a_name		
      end

    set_template_deduplication_cache_size (a_name: like template_deduplication_cache_size)
        -- Set 'template_deduplication_cache_size' with 'a_name'.
      do
        template_deduplication_cache_size := a_name
      ensure
        template_deduplication_cache_size_set: template_deduplication_cache_size = a_name		
      end

    set_node_deduplication_cache_size (a_name: like node_deduplication_cache_size)
        -- Set 'node_deduplication_cache_size' with 'a_name'.
      do
        node_deduplication_cache_size := a_name
      ensure
        node_deduplication_cache_size_set: node_deduplication_cache_size = a_name		
      end

    set_pause_compaction (a_name: like pause_compaction)
        -- Set 'pause_compaction' with 'a_name'.
      do
        pause_compaction := a_name
      ensure
        pause_compaction_set: pause_compaction = a_name		
      end

    set_compaction_retry_count (a_name: like compaction_retry_count)
        -- Set 'compaction_retry_count' with 'a_name'.
      do
        compaction_retry_count := a_name
      ensure
        compaction_retry_count_set: compaction_retry_count = a_name		
      end

    set_compaction_force_timeout (a_name: like compaction_force_timeout)
        -- Set 'compaction_force_timeout' with 'a_name'.
      do
        compaction_force_timeout := a_name
      ensure
        compaction_force_timeout_set: compaction_force_timeout = a_name		
      end

    set_compaction_size_delta_estimation (a_name: like compaction_size_delta_estimation)
        -- Set 'compaction_size_delta_estimation' with 'a_name'.
      do
        compaction_size_delta_estimation := a_name
      ensure
        compaction_size_delta_estimation_set: compaction_size_delta_estimation = a_name		
      end

    set_compaction_disable_estimation (a_name: like compaction_disable_estimation)
        -- Set 'compaction_disable_estimation' with 'a_name'.
      do
        compaction_disable_estimation := a_name
      ensure
        compaction_disable_estimation_set: compaction_disable_estimation = a_name		
      end

    set_compaction_retained_generations (a_name: like compaction_retained_generations)
        -- Set 'compaction_retained_generations' with 'a_name'.
      do
        compaction_retained_generations := a_name
      ensure
        compaction_retained_generations_set: compaction_retained_generations = a_name		
      end

    set_compaction_memory_threshold (a_name: like compaction_memory_threshold)
        -- Set 'compaction_memory_threshold' with 'a_name'.
      do
        compaction_memory_threshold := a_name
      ensure
        compaction_memory_threshold_set: compaction_memory_threshold = a_name		
      end

    set_compaction_progress_log (a_name: like compaction_progress_log)
        -- Set 'compaction_progress_log' with 'a_name'.
      do
        compaction_progress_log := a_name
      ensure
        compaction_progress_log_set: compaction_progress_log = a_name		
      end

    set_standby (a_name: like standby)
        -- Set 'standby' with 'a_name'.
      do
        standby := a_name
      ensure
        standby_set: standby = a_name		
      end

    set_custom_blob_store (a_name: like custom_blob_store)
        -- Set 'custom_blob_store' with 'a_name'.
      do
        custom_blob_store := a_name
      ensure
        custom_blob_store_set: custom_blob_store = a_name		
      end

    set_custom_segment_store (a_name: like custom_segment_store)
        -- Set 'custom_segment_store' with 'a_name'.
      do
        custom_segment_store := a_name
      ensure
        custom_segment_store_set: custom_segment_store = a_name		
      end

    set_split_persistence (a_name: like split_persistence)
        -- Set 'split_persistence' with 'a_name'.
      do
        split_persistence := a_name
      ensure
        split_persistence_set: split_persistence = a_name		
      end

    set_repository_backup_dir (a_name: like repository_backup_dir)
        -- Set 'repository_backup_dir' with 'a_name'.
      do
        repository_backup_dir := a_name
      ensure
        repository_backup_dir_set: repository_backup_dir = a_name		
      end

    set_blob_gc_max_age_in_secs (a_name: like blob_gc_max_age_in_secs)
        -- Set 'blob_gc_max_age_in_secs' with 'a_name'.
      do
        blob_gc_max_age_in_secs := a_name
      ensure
        blob_gc_max_age_in_secs_set: blob_gc_max_age_in_secs = a_name		
      end

    set_blob_track_snapshot_interval_in_secs (a_name: like blob_track_snapshot_interval_in_secs)
        -- Set 'blob_track_snapshot_interval_in_secs' with 'a_name'.
      do
        blob_track_snapshot_interval_in_secs := a_name
      ensure
        blob_track_snapshot_interval_in_secs_set: blob_track_snapshot_interval_in_secs = a_name		
      end


 feature -- Status Report

    out: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass ORG_APACHE_JACKRABBIT_OAK_SEGMENT_SEGMENT_NODE_STORE_SERVICE_PROPERTIES%N")
        if attached repository_home as l_repository_home then
          Result.append ("%Nrepository_home:")
          Result.append (l_repository_home.out)
          Result.append ("%N")    
        end  
        if attached tarmk_mode as l_tarmk_mode then
          Result.append ("%Ntarmk_mode:")
          Result.append (l_tarmk_mode.out)
          Result.append ("%N")    
        end  
        if attached tarmk_size as l_tarmk_size then
          Result.append ("%Ntarmk_size:")
          Result.append (l_tarmk_size.out)
          Result.append ("%N")    
        end  
        if attached segment_cache_size as l_segment_cache_size then
          Result.append ("%Nsegment_cache_size:")
          Result.append (l_segment_cache_size.out)
          Result.append ("%N")    
        end  
        if attached string_cache_size as l_string_cache_size then
          Result.append ("%Nstring_cache_size:")
          Result.append (l_string_cache_size.out)
          Result.append ("%N")    
        end  
        if attached template_cache_size as l_template_cache_size then
          Result.append ("%Ntemplate_cache_size:")
          Result.append (l_template_cache_size.out)
          Result.append ("%N")    
        end  
        if attached string_deduplication_cache_size as l_string_deduplication_cache_size then
          Result.append ("%Nstring_deduplication_cache_size:")
          Result.append (l_string_deduplication_cache_size.out)
          Result.append ("%N")    
        end  
        if attached template_deduplication_cache_size as l_template_deduplication_cache_size then
          Result.append ("%Ntemplate_deduplication_cache_size:")
          Result.append (l_template_deduplication_cache_size.out)
          Result.append ("%N")    
        end  
        if attached node_deduplication_cache_size as l_node_deduplication_cache_size then
          Result.append ("%Nnode_deduplication_cache_size:")
          Result.append (l_node_deduplication_cache_size.out)
          Result.append ("%N")    
        end  
        if attached pause_compaction as l_pause_compaction then
          Result.append ("%Npause_compaction:")
          Result.append (l_pause_compaction.out)
          Result.append ("%N")    
        end  
        if attached compaction_retry_count as l_compaction_retry_count then
          Result.append ("%Ncompaction_retry_count:")
          Result.append (l_compaction_retry_count.out)
          Result.append ("%N")    
        end  
        if attached compaction_force_timeout as l_compaction_force_timeout then
          Result.append ("%Ncompaction_force_timeout:")
          Result.append (l_compaction_force_timeout.out)
          Result.append ("%N")    
        end  
        if attached compaction_size_delta_estimation as l_compaction_size_delta_estimation then
          Result.append ("%Ncompaction_size_delta_estimation:")
          Result.append (l_compaction_size_delta_estimation.out)
          Result.append ("%N")    
        end  
        if attached compaction_disable_estimation as l_compaction_disable_estimation then
          Result.append ("%Ncompaction_disable_estimation:")
          Result.append (l_compaction_disable_estimation.out)
          Result.append ("%N")    
        end  
        if attached compaction_retained_generations as l_compaction_retained_generations then
          Result.append ("%Ncompaction_retained_generations:")
          Result.append (l_compaction_retained_generations.out)
          Result.append ("%N")    
        end  
        if attached compaction_memory_threshold as l_compaction_memory_threshold then
          Result.append ("%Ncompaction_memory_threshold:")
          Result.append (l_compaction_memory_threshold.out)
          Result.append ("%N")    
        end  
        if attached compaction_progress_log as l_compaction_progress_log then
          Result.append ("%Ncompaction_progress_log:")
          Result.append (l_compaction_progress_log.out)
          Result.append ("%N")    
        end  
        if attached standby as l_standby then
          Result.append ("%Nstandby:")
          Result.append (l_standby.out)
          Result.append ("%N")    
        end  
        if attached custom_blob_store as l_custom_blob_store then
          Result.append ("%Ncustom_blob_store:")
          Result.append (l_custom_blob_store.out)
          Result.append ("%N")    
        end  
        if attached custom_segment_store as l_custom_segment_store then
          Result.append ("%Ncustom_segment_store:")
          Result.append (l_custom_segment_store.out)
          Result.append ("%N")    
        end  
        if attached split_persistence as l_split_persistence then
          Result.append ("%Nsplit_persistence:")
          Result.append (l_split_persistence.out)
          Result.append ("%N")    
        end  
        if attached repository_backup_dir as l_repository_backup_dir then
          Result.append ("%Nrepository_backup_dir:")
          Result.append (l_repository_backup_dir.out)
          Result.append ("%N")    
        end  
        if attached blob_gc_max_age_in_secs as l_blob_gc_max_age_in_secs then
          Result.append ("%Nblob_gc_max_age_in_secs:")
          Result.append (l_blob_gc_max_age_in_secs.out)
          Result.append ("%N")    
        end  
        if attached blob_track_snapshot_interval_in_secs as l_blob_track_snapshot_interval_in_secs then
          Result.append ("%Nblob_track_snapshot_interval_in_secs:")
          Result.append (l_blob_track_snapshot_interval_in_secs.out)
          Result.append ("%N")    
        end  
      end
end


