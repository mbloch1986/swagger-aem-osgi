/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties()
{
    m_PathIsSet = false;
    m_Service_rankingIsSet = false;
    m_IdpUrlIsSet = false;
    m_IdpCertAliasIsSet = false;
    m_IdpHttpRedirectIsSet = false;
    m_ServiceProviderEntityIdIsSet = false;
    m_AssertionConsumerServiceURLIsSet = false;
    m_SpPrivateKeyAliasIsSet = false;
    m_KeyStorePasswordIsSet = false;
    m_DefaultRedirectUrlIsSet = false;
    m_UserIDAttributeIsSet = false;
    m_UseEncryptionIsSet = false;
    m_CreateUserIsSet = false;
    m_UserIntermediatePathIsSet = false;
    m_AddGroupMembershipsIsSet = false;
    m_GroupMembershipAttributeIsSet = false;
    m_DefaultGroupsIsSet = false;
    m_NameIdFormatIsSet = false;
    m_SynchronizeAttributesIsSet = false;
    m_HandleLogoutIsSet = false;
    m_LogoutUrlIsSet = false;
    m_ClockToleranceIsSet = false;
    m_DigestMethodIsSet = false;
    m_SignatureMethodIsSet = false;
    m_IdentitySyncTypeIsSet = false;
    m_IdpIdentifierIsSet = false;
    
}

ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::~ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties()
{
}

void ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_PathIsSet)
    {
        val["path"] = ModelBase::toJson(m_Path);
    }
    if(m_Service_rankingIsSet)
    {
        val["service.ranking"] = ModelBase::toJson(m_Service_ranking);
    }
    if(m_IdpUrlIsSet)
    {
        val["idpUrl"] = ModelBase::toJson(m_IdpUrl);
    }
    if(m_IdpCertAliasIsSet)
    {
        val["idpCertAlias"] = ModelBase::toJson(m_IdpCertAlias);
    }
    if(m_IdpHttpRedirectIsSet)
    {
        val["idpHttpRedirect"] = ModelBase::toJson(m_IdpHttpRedirect);
    }
    if(m_ServiceProviderEntityIdIsSet)
    {
        val["serviceProviderEntityId"] = ModelBase::toJson(m_ServiceProviderEntityId);
    }
    if(m_AssertionConsumerServiceURLIsSet)
    {
        val["assertionConsumerServiceURL"] = ModelBase::toJson(m_AssertionConsumerServiceURL);
    }
    if(m_SpPrivateKeyAliasIsSet)
    {
        val["spPrivateKeyAlias"] = ModelBase::toJson(m_SpPrivateKeyAlias);
    }
    if(m_KeyStorePasswordIsSet)
    {
        val["keyStorePassword"] = ModelBase::toJson(m_KeyStorePassword);
    }
    if(m_DefaultRedirectUrlIsSet)
    {
        val["defaultRedirectUrl"] = ModelBase::toJson(m_DefaultRedirectUrl);
    }
    if(m_UserIDAttributeIsSet)
    {
        val["userIDAttribute"] = ModelBase::toJson(m_UserIDAttribute);
    }
    if(m_UseEncryptionIsSet)
    {
        val["useEncryption"] = ModelBase::toJson(m_UseEncryption);
    }
    if(m_CreateUserIsSet)
    {
        val["createUser"] = ModelBase::toJson(m_CreateUser);
    }
    if(m_UserIntermediatePathIsSet)
    {
        val["userIntermediatePath"] = ModelBase::toJson(m_UserIntermediatePath);
    }
    if(m_AddGroupMembershipsIsSet)
    {
        val["addGroupMemberships"] = ModelBase::toJson(m_AddGroupMemberships);
    }
    if(m_GroupMembershipAttributeIsSet)
    {
        val["groupMembershipAttribute"] = ModelBase::toJson(m_GroupMembershipAttribute);
    }
    if(m_DefaultGroupsIsSet)
    {
        val["defaultGroups"] = ModelBase::toJson(m_DefaultGroups);
    }
    if(m_NameIdFormatIsSet)
    {
        val["nameIdFormat"] = ModelBase::toJson(m_NameIdFormat);
    }
    if(m_SynchronizeAttributesIsSet)
    {
        val["synchronizeAttributes"] = ModelBase::toJson(m_SynchronizeAttributes);
    }
    if(m_HandleLogoutIsSet)
    {
        val["handleLogout"] = ModelBase::toJson(m_HandleLogout);
    }
    if(m_LogoutUrlIsSet)
    {
        val["logoutUrl"] = ModelBase::toJson(m_LogoutUrl);
    }
    if(m_ClockToleranceIsSet)
    {
        val["clockTolerance"] = ModelBase::toJson(m_ClockTolerance);
    }
    if(m_DigestMethodIsSet)
    {
        val["digestMethod"] = ModelBase::toJson(m_DigestMethod);
    }
    if(m_SignatureMethodIsSet)
    {
        val["signatureMethod"] = ModelBase::toJson(m_SignatureMethod);
    }
    if(m_IdentitySyncTypeIsSet)
    {
        val["identitySyncType"] = ModelBase::toJson(m_IdentitySyncType);
    }
    if(m_IdpIdentifierIsSet)
    {
        val["idpIdentifier"] = ModelBase::toJson(m_IdpIdentifier);
    }
    

    return val;
}

void ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::fromJson(nlohmann::json& val)
{
    if(val.find("path") != val.end())
    {
        if(!val["path"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["path"]);
            setPath( newItem );
        }
        
    }
    if(val.find("service.ranking") != val.end())
    {
        if(!val["service.ranking"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["service.ranking"]);
            setServiceRanking( newItem );
        }
        
    }
    if(val.find("idpUrl") != val.end())
    {
        if(!val["idpUrl"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["idpUrl"]);
            setIdpUrl( newItem );
        }
        
    }
    if(val.find("idpCertAlias") != val.end())
    {
        if(!val["idpCertAlias"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["idpCertAlias"]);
            setIdpCertAlias( newItem );
        }
        
    }
    if(val.find("idpHttpRedirect") != val.end())
    {
        if(!val["idpHttpRedirect"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["idpHttpRedirect"]);
            setIdpHttpRedirect( newItem );
        }
        
    }
    if(val.find("serviceProviderEntityId") != val.end())
    {
        if(!val["serviceProviderEntityId"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["serviceProviderEntityId"]);
            setServiceProviderEntityId( newItem );
        }
        
    }
    if(val.find("assertionConsumerServiceURL") != val.end())
    {
        if(!val["assertionConsumerServiceURL"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["assertionConsumerServiceURL"]);
            setAssertionConsumerServiceURL( newItem );
        }
        
    }
    if(val.find("spPrivateKeyAlias") != val.end())
    {
        if(!val["spPrivateKeyAlias"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["spPrivateKeyAlias"]);
            setSpPrivateKeyAlias( newItem );
        }
        
    }
    if(val.find("keyStorePassword") != val.end())
    {
        if(!val["keyStorePassword"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["keyStorePassword"]);
            setKeyStorePassword( newItem );
        }
        
    }
    if(val.find("defaultRedirectUrl") != val.end())
    {
        if(!val["defaultRedirectUrl"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["defaultRedirectUrl"]);
            setDefaultRedirectUrl( newItem );
        }
        
    }
    if(val.find("userIDAttribute") != val.end())
    {
        if(!val["userIDAttribute"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["userIDAttribute"]);
            setUserIDAttribute( newItem );
        }
        
    }
    if(val.find("useEncryption") != val.end())
    {
        if(!val["useEncryption"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["useEncryption"]);
            setUseEncryption( newItem );
        }
        
    }
    if(val.find("createUser") != val.end())
    {
        if(!val["createUser"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["createUser"]);
            setCreateUser( newItem );
        }
        
    }
    if(val.find("userIntermediatePath") != val.end())
    {
        if(!val["userIntermediatePath"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["userIntermediatePath"]);
            setUserIntermediatePath( newItem );
        }
        
    }
    if(val.find("addGroupMemberships") != val.end())
    {
        if(!val["addGroupMemberships"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["addGroupMemberships"]);
            setAddGroupMemberships( newItem );
        }
        
    }
    if(val.find("groupMembershipAttribute") != val.end())
    {
        if(!val["groupMembershipAttribute"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["groupMembershipAttribute"]);
            setGroupMembershipAttribute( newItem );
        }
        
    }
    if(val.find("defaultGroups") != val.end())
    {
        if(!val["defaultGroups"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["defaultGroups"]);
            setDefaultGroups( newItem );
        }
        
    }
    if(val.find("nameIdFormat") != val.end())
    {
        if(!val["nameIdFormat"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["nameIdFormat"]);
            setNameIdFormat( newItem );
        }
        
    }
    if(val.find("synchronizeAttributes") != val.end())
    {
        if(!val["synchronizeAttributes"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["synchronizeAttributes"]);
            setSynchronizeAttributes( newItem );
        }
        
    }
    if(val.find("handleLogout") != val.end())
    {
        if(!val["handleLogout"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["handleLogout"]);
            setHandleLogout( newItem );
        }
        
    }
    if(val.find("logoutUrl") != val.end())
    {
        if(!val["logoutUrl"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["logoutUrl"]);
            setLogoutUrl( newItem );
        }
        
    }
    if(val.find("clockTolerance") != val.end())
    {
        if(!val["clockTolerance"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["clockTolerance"]);
            setClockTolerance( newItem );
        }
        
    }
    if(val.find("digestMethod") != val.end())
    {
        if(!val["digestMethod"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["digestMethod"]);
            setDigestMethod( newItem );
        }
        
    }
    if(val.find("signatureMethod") != val.end())
    {
        if(!val["signatureMethod"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["signatureMethod"]);
            setSignatureMethod( newItem );
        }
        
    }
    if(val.find("identitySyncType") != val.end())
    {
        if(!val["identitySyncType"].is_null())
        {
            ConfigNodePropertyDropDown newItem;
            newItem.fromJson(val["identitySyncType"]);
            setIdentitySyncType( newItem );
        }
        
    }
    if(val.find("idpIdentifier") != val.end())
    {
        if(!val["idpIdentifier"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["idpIdentifier"]);
            setIdpIdentifier( newItem );
        }
        
    }
    
}


ConfigNodePropertyArray ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::getPath() const
{
    return m_Path;
}
void ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::setPath(ConfigNodePropertyArray const& value)
{
    m_Path = value;
    m_PathIsSet = true;
}
bool ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::pathIsSet() const
{
    return m_PathIsSet;
}
void ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::unsetPath()
{
    m_PathIsSet = false;
}
ConfigNodePropertyInteger ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::getServiceRanking() const
{
    return m_Service_ranking;
}
void ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::setServiceRanking(ConfigNodePropertyInteger const& value)
{
    m_Service_ranking = value;
    m_Service_rankingIsSet = true;
}
bool ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::serviceRankingIsSet() const
{
    return m_Service_rankingIsSet;
}
void ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::unsetService_ranking()
{
    m_Service_rankingIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::getIdpUrl() const
{
    return m_IdpUrl;
}
void ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::setIdpUrl(ConfigNodePropertyString const& value)
{
    m_IdpUrl = value;
    m_IdpUrlIsSet = true;
}
bool ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::idpUrlIsSet() const
{
    return m_IdpUrlIsSet;
}
void ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::unsetIdpUrl()
{
    m_IdpUrlIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::getIdpCertAlias() const
{
    return m_IdpCertAlias;
}
void ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::setIdpCertAlias(ConfigNodePropertyString const& value)
{
    m_IdpCertAlias = value;
    m_IdpCertAliasIsSet = true;
}
bool ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::idpCertAliasIsSet() const
{
    return m_IdpCertAliasIsSet;
}
void ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::unsetIdpCertAlias()
{
    m_IdpCertAliasIsSet = false;
}
ConfigNodePropertyBoolean ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::getIdpHttpRedirect() const
{
    return m_IdpHttpRedirect;
}
void ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::setIdpHttpRedirect(ConfigNodePropertyBoolean const& value)
{
    m_IdpHttpRedirect = value;
    m_IdpHttpRedirectIsSet = true;
}
bool ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::idpHttpRedirectIsSet() const
{
    return m_IdpHttpRedirectIsSet;
}
void ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::unsetIdpHttpRedirect()
{
    m_IdpHttpRedirectIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::getServiceProviderEntityId() const
{
    return m_ServiceProviderEntityId;
}
void ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::setServiceProviderEntityId(ConfigNodePropertyString const& value)
{
    m_ServiceProviderEntityId = value;
    m_ServiceProviderEntityIdIsSet = true;
}
bool ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::serviceProviderEntityIdIsSet() const
{
    return m_ServiceProviderEntityIdIsSet;
}
void ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::unsetServiceProviderEntityId()
{
    m_ServiceProviderEntityIdIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::getAssertionConsumerServiceURL() const
{
    return m_AssertionConsumerServiceURL;
}
void ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::setAssertionConsumerServiceURL(ConfigNodePropertyString const& value)
{
    m_AssertionConsumerServiceURL = value;
    m_AssertionConsumerServiceURLIsSet = true;
}
bool ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::assertionConsumerServiceURLIsSet() const
{
    return m_AssertionConsumerServiceURLIsSet;
}
void ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::unsetAssertionConsumerServiceURL()
{
    m_AssertionConsumerServiceURLIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::getSpPrivateKeyAlias() const
{
    return m_SpPrivateKeyAlias;
}
void ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::setSpPrivateKeyAlias(ConfigNodePropertyString const& value)
{
    m_SpPrivateKeyAlias = value;
    m_SpPrivateKeyAliasIsSet = true;
}
bool ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::spPrivateKeyAliasIsSet() const
{
    return m_SpPrivateKeyAliasIsSet;
}
void ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::unsetSpPrivateKeyAlias()
{
    m_SpPrivateKeyAliasIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::getKeyStorePassword() const
{
    return m_KeyStorePassword;
}
void ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::setKeyStorePassword(ConfigNodePropertyString const& value)
{
    m_KeyStorePassword = value;
    m_KeyStorePasswordIsSet = true;
}
bool ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::keyStorePasswordIsSet() const
{
    return m_KeyStorePasswordIsSet;
}
void ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::unsetKeyStorePassword()
{
    m_KeyStorePasswordIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::getDefaultRedirectUrl() const
{
    return m_DefaultRedirectUrl;
}
void ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::setDefaultRedirectUrl(ConfigNodePropertyString const& value)
{
    m_DefaultRedirectUrl = value;
    m_DefaultRedirectUrlIsSet = true;
}
bool ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::defaultRedirectUrlIsSet() const
{
    return m_DefaultRedirectUrlIsSet;
}
void ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::unsetDefaultRedirectUrl()
{
    m_DefaultRedirectUrlIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::getUserIDAttribute() const
{
    return m_UserIDAttribute;
}
void ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::setUserIDAttribute(ConfigNodePropertyString const& value)
{
    m_UserIDAttribute = value;
    m_UserIDAttributeIsSet = true;
}
bool ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::userIDAttributeIsSet() const
{
    return m_UserIDAttributeIsSet;
}
void ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::unsetUserIDAttribute()
{
    m_UserIDAttributeIsSet = false;
}
ConfigNodePropertyBoolean ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::getUseEncryption() const
{
    return m_UseEncryption;
}
void ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::setUseEncryption(ConfigNodePropertyBoolean const& value)
{
    m_UseEncryption = value;
    m_UseEncryptionIsSet = true;
}
bool ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::useEncryptionIsSet() const
{
    return m_UseEncryptionIsSet;
}
void ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::unsetUseEncryption()
{
    m_UseEncryptionIsSet = false;
}
ConfigNodePropertyBoolean ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::getCreateUser() const
{
    return m_CreateUser;
}
void ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::setCreateUser(ConfigNodePropertyBoolean const& value)
{
    m_CreateUser = value;
    m_CreateUserIsSet = true;
}
bool ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::createUserIsSet() const
{
    return m_CreateUserIsSet;
}
void ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::unsetCreateUser()
{
    m_CreateUserIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::getUserIntermediatePath() const
{
    return m_UserIntermediatePath;
}
void ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::setUserIntermediatePath(ConfigNodePropertyString const& value)
{
    m_UserIntermediatePath = value;
    m_UserIntermediatePathIsSet = true;
}
bool ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::userIntermediatePathIsSet() const
{
    return m_UserIntermediatePathIsSet;
}
void ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::unsetUserIntermediatePath()
{
    m_UserIntermediatePathIsSet = false;
}
ConfigNodePropertyBoolean ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::getAddGroupMemberships() const
{
    return m_AddGroupMemberships;
}
void ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::setAddGroupMemberships(ConfigNodePropertyBoolean const& value)
{
    m_AddGroupMemberships = value;
    m_AddGroupMembershipsIsSet = true;
}
bool ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::addGroupMembershipsIsSet() const
{
    return m_AddGroupMembershipsIsSet;
}
void ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::unsetAddGroupMemberships()
{
    m_AddGroupMembershipsIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::getGroupMembershipAttribute() const
{
    return m_GroupMembershipAttribute;
}
void ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::setGroupMembershipAttribute(ConfigNodePropertyString const& value)
{
    m_GroupMembershipAttribute = value;
    m_GroupMembershipAttributeIsSet = true;
}
bool ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::groupMembershipAttributeIsSet() const
{
    return m_GroupMembershipAttributeIsSet;
}
void ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::unsetGroupMembershipAttribute()
{
    m_GroupMembershipAttributeIsSet = false;
}
ConfigNodePropertyArray ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::getDefaultGroups() const
{
    return m_DefaultGroups;
}
void ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::setDefaultGroups(ConfigNodePropertyArray const& value)
{
    m_DefaultGroups = value;
    m_DefaultGroupsIsSet = true;
}
bool ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::defaultGroupsIsSet() const
{
    return m_DefaultGroupsIsSet;
}
void ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::unsetDefaultGroups()
{
    m_DefaultGroupsIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::getNameIdFormat() const
{
    return m_NameIdFormat;
}
void ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::setNameIdFormat(ConfigNodePropertyString const& value)
{
    m_NameIdFormat = value;
    m_NameIdFormatIsSet = true;
}
bool ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::nameIdFormatIsSet() const
{
    return m_NameIdFormatIsSet;
}
void ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::unsetNameIdFormat()
{
    m_NameIdFormatIsSet = false;
}
ConfigNodePropertyArray ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::getSynchronizeAttributes() const
{
    return m_SynchronizeAttributes;
}
void ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::setSynchronizeAttributes(ConfigNodePropertyArray const& value)
{
    m_SynchronizeAttributes = value;
    m_SynchronizeAttributesIsSet = true;
}
bool ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::synchronizeAttributesIsSet() const
{
    return m_SynchronizeAttributesIsSet;
}
void ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::unsetSynchronizeAttributes()
{
    m_SynchronizeAttributesIsSet = false;
}
ConfigNodePropertyBoolean ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::getHandleLogout() const
{
    return m_HandleLogout;
}
void ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::setHandleLogout(ConfigNodePropertyBoolean const& value)
{
    m_HandleLogout = value;
    m_HandleLogoutIsSet = true;
}
bool ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::handleLogoutIsSet() const
{
    return m_HandleLogoutIsSet;
}
void ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::unsetHandleLogout()
{
    m_HandleLogoutIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::getLogoutUrl() const
{
    return m_LogoutUrl;
}
void ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::setLogoutUrl(ConfigNodePropertyString const& value)
{
    m_LogoutUrl = value;
    m_LogoutUrlIsSet = true;
}
bool ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::logoutUrlIsSet() const
{
    return m_LogoutUrlIsSet;
}
void ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::unsetLogoutUrl()
{
    m_LogoutUrlIsSet = false;
}
ConfigNodePropertyInteger ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::getClockTolerance() const
{
    return m_ClockTolerance;
}
void ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::setClockTolerance(ConfigNodePropertyInteger const& value)
{
    m_ClockTolerance = value;
    m_ClockToleranceIsSet = true;
}
bool ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::clockToleranceIsSet() const
{
    return m_ClockToleranceIsSet;
}
void ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::unsetClockTolerance()
{
    m_ClockToleranceIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::getDigestMethod() const
{
    return m_DigestMethod;
}
void ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::setDigestMethod(ConfigNodePropertyString const& value)
{
    m_DigestMethod = value;
    m_DigestMethodIsSet = true;
}
bool ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::digestMethodIsSet() const
{
    return m_DigestMethodIsSet;
}
void ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::unsetDigestMethod()
{
    m_DigestMethodIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::getSignatureMethod() const
{
    return m_SignatureMethod;
}
void ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::setSignatureMethod(ConfigNodePropertyString const& value)
{
    m_SignatureMethod = value;
    m_SignatureMethodIsSet = true;
}
bool ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::signatureMethodIsSet() const
{
    return m_SignatureMethodIsSet;
}
void ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::unsetSignatureMethod()
{
    m_SignatureMethodIsSet = false;
}
ConfigNodePropertyDropDown ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::getIdentitySyncType() const
{
    return m_IdentitySyncType;
}
void ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::setIdentitySyncType(ConfigNodePropertyDropDown const& value)
{
    m_IdentitySyncType = value;
    m_IdentitySyncTypeIsSet = true;
}
bool ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::identitySyncTypeIsSet() const
{
    return m_IdentitySyncTypeIsSet;
}
void ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::unsetIdentitySyncType()
{
    m_IdentitySyncTypeIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::getIdpIdentifier() const
{
    return m_IdpIdentifier;
}
void ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::setIdpIdentifier(ConfigNodePropertyString const& value)
{
    m_IdpIdentifier = value;
    m_IdpIdentifierIsSet = true;
}
bool ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::idpIdentifierIsSet() const
{
    return m_IdpIdentifierIsSet;
}
void ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::unsetIdpIdentifier()
{
    m_IdpIdentifierIsSet = false;
}

}
}
}
}

