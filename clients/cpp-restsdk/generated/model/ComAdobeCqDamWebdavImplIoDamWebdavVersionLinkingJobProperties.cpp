/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties::ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties()
{
    m_Cq_dam_webdav_version_linking_enableIsSet = false;
    m_Cq_dam_webdav_version_linking_scheduler_periodIsSet = false;
    m_Cq_dam_webdav_version_linking_staging_timeoutIsSet = false;
}

ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties::~ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties()
{
}

void ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Cq_dam_webdav_version_linking_enableIsSet)
    {
        val[utility::conversions::to_string_t("cq.dam.webdav.version.linking.enable")] = ModelBase::toJson(m_Cq_dam_webdav_version_linking_enable);
    }
    if(m_Cq_dam_webdav_version_linking_scheduler_periodIsSet)
    {
        val[utility::conversions::to_string_t("cq.dam.webdav.version.linking.scheduler.period")] = ModelBase::toJson(m_Cq_dam_webdav_version_linking_scheduler_period);
    }
    if(m_Cq_dam_webdav_version_linking_staging_timeoutIsSet)
    {
        val[utility::conversions::to_string_t("cq.dam.webdav.version.linking.staging.timeout")] = ModelBase::toJson(m_Cq_dam_webdav_version_linking_staging_timeout);
    }

    return val;
}

void ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("cq.dam.webdav.version.linking.enable")))
    {
        if(!val[utility::conversions::to_string_t("cq.dam.webdav.version.linking.enable")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.dam.webdav.version.linking.enable")]);
            setCqDamWebdavVersionLinkingEnable( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.dam.webdav.version.linking.scheduler.period")))
    {
        if(!val[utility::conversions::to_string_t("cq.dam.webdav.version.linking.scheduler.period")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.dam.webdav.version.linking.scheduler.period")]);
            setCqDamWebdavVersionLinkingSchedulerPeriod( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.dam.webdav.version.linking.staging.timeout")))
    {
        if(!val[utility::conversions::to_string_t("cq.dam.webdav.version.linking.staging.timeout")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.dam.webdav.version.linking.staging.timeout")]);
            setCqDamWebdavVersionLinkingStagingTimeout( newItem );
        }
    }
}

void ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Cq_dam_webdav_version_linking_enableIsSet)
    {
        if (m_Cq_dam_webdav_version_linking_enable.get())
        {
            m_Cq_dam_webdav_version_linking_enable->toMultipart(multipart, utility::conversions::to_string_t("cq.dam.webdav.version.linking.enable."));
        }
    }
    if(m_Cq_dam_webdav_version_linking_scheduler_periodIsSet)
    {
        if (m_Cq_dam_webdav_version_linking_scheduler_period.get())
        {
            m_Cq_dam_webdav_version_linking_scheduler_period->toMultipart(multipart, utility::conversions::to_string_t("cq.dam.webdav.version.linking.scheduler.period."));
        }
    }
    if(m_Cq_dam_webdav_version_linking_staging_timeoutIsSet)
    {
        if (m_Cq_dam_webdav_version_linking_staging_timeout.get())
        {
            m_Cq_dam_webdav_version_linking_staging_timeout->toMultipart(multipart, utility::conversions::to_string_t("cq.dam.webdav.version.linking.staging.timeout."));
        }
    }
}

void ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.webdav.version.linking.enable")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.webdav.version.linking.enable")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.dam.webdav.version.linking.enable."));
            setCqDamWebdavVersionLinkingEnable( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.webdav.version.linking.scheduler.period")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.webdav.version.linking.scheduler.period")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.dam.webdav.version.linking.scheduler.period."));
            setCqDamWebdavVersionLinkingSchedulerPeriod( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.webdav.version.linking.staging.timeout")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.webdav.version.linking.staging.timeout")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.dam.webdav.version.linking.staging.timeout."));
            setCqDamWebdavVersionLinkingStagingTimeout( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties::getCqDamWebdavVersionLinkingEnable() const
{
    return m_Cq_dam_webdav_version_linking_enable;
}


void ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties::setCqDamWebdavVersionLinkingEnable(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Cq_dam_webdav_version_linking_enable = value;
    m_Cq_dam_webdav_version_linking_enableIsSet = true;
}
bool ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties::cqDamWebdavVersionLinkingEnableIsSet() const
{
    return m_Cq_dam_webdav_version_linking_enableIsSet;
}

void ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties::unsetCq_dam_webdav_version_linking_enable()
{
    m_Cq_dam_webdav_version_linking_enableIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties::getCqDamWebdavVersionLinkingSchedulerPeriod() const
{
    return m_Cq_dam_webdav_version_linking_scheduler_period;
}


void ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties::setCqDamWebdavVersionLinkingSchedulerPeriod(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cq_dam_webdav_version_linking_scheduler_period = value;
    m_Cq_dam_webdav_version_linking_scheduler_periodIsSet = true;
}
bool ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties::cqDamWebdavVersionLinkingSchedulerPeriodIsSet() const
{
    return m_Cq_dam_webdav_version_linking_scheduler_periodIsSet;
}

void ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties::unsetCq_dam_webdav_version_linking_scheduler_period()
{
    m_Cq_dam_webdav_version_linking_scheduler_periodIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties::getCqDamWebdavVersionLinkingStagingTimeout() const
{
    return m_Cq_dam_webdav_version_linking_staging_timeout;
}


void ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties::setCqDamWebdavVersionLinkingStagingTimeout(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cq_dam_webdav_version_linking_staging_timeout = value;
    m_Cq_dam_webdav_version_linking_staging_timeoutIsSet = true;
}
bool ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties::cqDamWebdavVersionLinkingStagingTimeoutIsSet() const
{
    return m_Cq_dam_webdav_version_linking_staging_timeoutIsSet;
}

void ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties::unsetCq_dam_webdav_version_linking_staging_timeout()
{
    m_Cq_dam_webdav_version_linking_staging_timeoutIsSet = false;
}

}
}
}
}

