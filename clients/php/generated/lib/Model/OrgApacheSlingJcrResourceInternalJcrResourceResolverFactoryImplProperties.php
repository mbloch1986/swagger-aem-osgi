<?php
/**
 * OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'resource_resolver_searchpath' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'resource_resolver_manglenamespaces' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'resource_resolver_allow_direct' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'resource_resolver_required_providers' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'resource_resolver_required_providernames' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'resource_resolver_virtual' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'resource_resolver_mapping' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'resource_resolver_map_location' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'resource_resolver_map_observation' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'resource_resolver_default_vanity_redirect_status' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'resource_resolver_enable_vanitypath' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'resource_resolver_vanitypath_max_entries' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'resource_resolver_vanitypath_max_entries_startup' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'resource_resolver_vanitypath_bloomfilter_max_bytes' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'resource_resolver_optimize_alias_resolution' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'resource_resolver_vanitypath_whitelist' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'resource_resolver_vanitypath_blacklist' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'resource_resolver_vanity_precedence' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'resource_resolver_providerhandling_paranoid' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'resource_resolver_log_closing' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'resource_resolver_log_unclosed' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'resource_resolver_searchpath' => null,
        'resource_resolver_manglenamespaces' => null,
        'resource_resolver_allow_direct' => null,
        'resource_resolver_required_providers' => null,
        'resource_resolver_required_providernames' => null,
        'resource_resolver_virtual' => null,
        'resource_resolver_mapping' => null,
        'resource_resolver_map_location' => null,
        'resource_resolver_map_observation' => null,
        'resource_resolver_default_vanity_redirect_status' => null,
        'resource_resolver_enable_vanitypath' => null,
        'resource_resolver_vanitypath_max_entries' => null,
        'resource_resolver_vanitypath_max_entries_startup' => null,
        'resource_resolver_vanitypath_bloomfilter_max_bytes' => null,
        'resource_resolver_optimize_alias_resolution' => null,
        'resource_resolver_vanitypath_whitelist' => null,
        'resource_resolver_vanitypath_blacklist' => null,
        'resource_resolver_vanity_precedence' => null,
        'resource_resolver_providerhandling_paranoid' => null,
        'resource_resolver_log_closing' => null,
        'resource_resolver_log_unclosed' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'resource_resolver_searchpath' => 'resource.resolver.searchpath',
        'resource_resolver_manglenamespaces' => 'resource.resolver.manglenamespaces',
        'resource_resolver_allow_direct' => 'resource.resolver.allowDirect',
        'resource_resolver_required_providers' => 'resource.resolver.required.providers',
        'resource_resolver_required_providernames' => 'resource.resolver.required.providernames',
        'resource_resolver_virtual' => 'resource.resolver.virtual',
        'resource_resolver_mapping' => 'resource.resolver.mapping',
        'resource_resolver_map_location' => 'resource.resolver.map.location',
        'resource_resolver_map_observation' => 'resource.resolver.map.observation',
        'resource_resolver_default_vanity_redirect_status' => 'resource.resolver.default.vanity.redirect.status',
        'resource_resolver_enable_vanitypath' => 'resource.resolver.enable.vanitypath',
        'resource_resolver_vanitypath_max_entries' => 'resource.resolver.vanitypath.maxEntries',
        'resource_resolver_vanitypath_max_entries_startup' => 'resource.resolver.vanitypath.maxEntries.startup',
        'resource_resolver_vanitypath_bloomfilter_max_bytes' => 'resource.resolver.vanitypath.bloomfilter.maxBytes',
        'resource_resolver_optimize_alias_resolution' => 'resource.resolver.optimize.alias.resolution',
        'resource_resolver_vanitypath_whitelist' => 'resource.resolver.vanitypath.whitelist',
        'resource_resolver_vanitypath_blacklist' => 'resource.resolver.vanitypath.blacklist',
        'resource_resolver_vanity_precedence' => 'resource.resolver.vanity.precedence',
        'resource_resolver_providerhandling_paranoid' => 'resource.resolver.providerhandling.paranoid',
        'resource_resolver_log_closing' => 'resource.resolver.log.closing',
        'resource_resolver_log_unclosed' => 'resource.resolver.log.unclosed'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'resource_resolver_searchpath' => 'setResourceResolverSearchpath',
        'resource_resolver_manglenamespaces' => 'setResourceResolverManglenamespaces',
        'resource_resolver_allow_direct' => 'setResourceResolverAllowDirect',
        'resource_resolver_required_providers' => 'setResourceResolverRequiredProviders',
        'resource_resolver_required_providernames' => 'setResourceResolverRequiredProvidernames',
        'resource_resolver_virtual' => 'setResourceResolverVirtual',
        'resource_resolver_mapping' => 'setResourceResolverMapping',
        'resource_resolver_map_location' => 'setResourceResolverMapLocation',
        'resource_resolver_map_observation' => 'setResourceResolverMapObservation',
        'resource_resolver_default_vanity_redirect_status' => 'setResourceResolverDefaultVanityRedirectStatus',
        'resource_resolver_enable_vanitypath' => 'setResourceResolverEnableVanitypath',
        'resource_resolver_vanitypath_max_entries' => 'setResourceResolverVanitypathMaxEntries',
        'resource_resolver_vanitypath_max_entries_startup' => 'setResourceResolverVanitypathMaxEntriesStartup',
        'resource_resolver_vanitypath_bloomfilter_max_bytes' => 'setResourceResolverVanitypathBloomfilterMaxBytes',
        'resource_resolver_optimize_alias_resolution' => 'setResourceResolverOptimizeAliasResolution',
        'resource_resolver_vanitypath_whitelist' => 'setResourceResolverVanitypathWhitelist',
        'resource_resolver_vanitypath_blacklist' => 'setResourceResolverVanitypathBlacklist',
        'resource_resolver_vanity_precedence' => 'setResourceResolverVanityPrecedence',
        'resource_resolver_providerhandling_paranoid' => 'setResourceResolverProviderhandlingParanoid',
        'resource_resolver_log_closing' => 'setResourceResolverLogClosing',
        'resource_resolver_log_unclosed' => 'setResourceResolverLogUnclosed'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'resource_resolver_searchpath' => 'getResourceResolverSearchpath',
        'resource_resolver_manglenamespaces' => 'getResourceResolverManglenamespaces',
        'resource_resolver_allow_direct' => 'getResourceResolverAllowDirect',
        'resource_resolver_required_providers' => 'getResourceResolverRequiredProviders',
        'resource_resolver_required_providernames' => 'getResourceResolverRequiredProvidernames',
        'resource_resolver_virtual' => 'getResourceResolverVirtual',
        'resource_resolver_mapping' => 'getResourceResolverMapping',
        'resource_resolver_map_location' => 'getResourceResolverMapLocation',
        'resource_resolver_map_observation' => 'getResourceResolverMapObservation',
        'resource_resolver_default_vanity_redirect_status' => 'getResourceResolverDefaultVanityRedirectStatus',
        'resource_resolver_enable_vanitypath' => 'getResourceResolverEnableVanitypath',
        'resource_resolver_vanitypath_max_entries' => 'getResourceResolverVanitypathMaxEntries',
        'resource_resolver_vanitypath_max_entries_startup' => 'getResourceResolverVanitypathMaxEntriesStartup',
        'resource_resolver_vanitypath_bloomfilter_max_bytes' => 'getResourceResolverVanitypathBloomfilterMaxBytes',
        'resource_resolver_optimize_alias_resolution' => 'getResourceResolverOptimizeAliasResolution',
        'resource_resolver_vanitypath_whitelist' => 'getResourceResolverVanitypathWhitelist',
        'resource_resolver_vanitypath_blacklist' => 'getResourceResolverVanitypathBlacklist',
        'resource_resolver_vanity_precedence' => 'getResourceResolverVanityPrecedence',
        'resource_resolver_providerhandling_paranoid' => 'getResourceResolverProviderhandlingParanoid',
        'resource_resolver_log_closing' => 'getResourceResolverLogClosing',
        'resource_resolver_log_unclosed' => 'getResourceResolverLogUnclosed'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['resource_resolver_searchpath'] = isset($data['resource_resolver_searchpath']) ? $data['resource_resolver_searchpath'] : null;
        $this->container['resource_resolver_manglenamespaces'] = isset($data['resource_resolver_manglenamespaces']) ? $data['resource_resolver_manglenamespaces'] : null;
        $this->container['resource_resolver_allow_direct'] = isset($data['resource_resolver_allow_direct']) ? $data['resource_resolver_allow_direct'] : null;
        $this->container['resource_resolver_required_providers'] = isset($data['resource_resolver_required_providers']) ? $data['resource_resolver_required_providers'] : null;
        $this->container['resource_resolver_required_providernames'] = isset($data['resource_resolver_required_providernames']) ? $data['resource_resolver_required_providernames'] : null;
        $this->container['resource_resolver_virtual'] = isset($data['resource_resolver_virtual']) ? $data['resource_resolver_virtual'] : null;
        $this->container['resource_resolver_mapping'] = isset($data['resource_resolver_mapping']) ? $data['resource_resolver_mapping'] : null;
        $this->container['resource_resolver_map_location'] = isset($data['resource_resolver_map_location']) ? $data['resource_resolver_map_location'] : null;
        $this->container['resource_resolver_map_observation'] = isset($data['resource_resolver_map_observation']) ? $data['resource_resolver_map_observation'] : null;
        $this->container['resource_resolver_default_vanity_redirect_status'] = isset($data['resource_resolver_default_vanity_redirect_status']) ? $data['resource_resolver_default_vanity_redirect_status'] : null;
        $this->container['resource_resolver_enable_vanitypath'] = isset($data['resource_resolver_enable_vanitypath']) ? $data['resource_resolver_enable_vanitypath'] : null;
        $this->container['resource_resolver_vanitypath_max_entries'] = isset($data['resource_resolver_vanitypath_max_entries']) ? $data['resource_resolver_vanitypath_max_entries'] : null;
        $this->container['resource_resolver_vanitypath_max_entries_startup'] = isset($data['resource_resolver_vanitypath_max_entries_startup']) ? $data['resource_resolver_vanitypath_max_entries_startup'] : null;
        $this->container['resource_resolver_vanitypath_bloomfilter_max_bytes'] = isset($data['resource_resolver_vanitypath_bloomfilter_max_bytes']) ? $data['resource_resolver_vanitypath_bloomfilter_max_bytes'] : null;
        $this->container['resource_resolver_optimize_alias_resolution'] = isset($data['resource_resolver_optimize_alias_resolution']) ? $data['resource_resolver_optimize_alias_resolution'] : null;
        $this->container['resource_resolver_vanitypath_whitelist'] = isset($data['resource_resolver_vanitypath_whitelist']) ? $data['resource_resolver_vanitypath_whitelist'] : null;
        $this->container['resource_resolver_vanitypath_blacklist'] = isset($data['resource_resolver_vanitypath_blacklist']) ? $data['resource_resolver_vanitypath_blacklist'] : null;
        $this->container['resource_resolver_vanity_precedence'] = isset($data['resource_resolver_vanity_precedence']) ? $data['resource_resolver_vanity_precedence'] : null;
        $this->container['resource_resolver_providerhandling_paranoid'] = isset($data['resource_resolver_providerhandling_paranoid']) ? $data['resource_resolver_providerhandling_paranoid'] : null;
        $this->container['resource_resolver_log_closing'] = isset($data['resource_resolver_log_closing']) ? $data['resource_resolver_log_closing'] : null;
        $this->container['resource_resolver_log_unclosed'] = isset($data['resource_resolver_log_unclosed']) ? $data['resource_resolver_log_unclosed'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets resource_resolver_searchpath
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getResourceResolverSearchpath()
    {
        return $this->container['resource_resolver_searchpath'];
    }

    /**
     * Sets resource_resolver_searchpath
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $resource_resolver_searchpath resource_resolver_searchpath
     *
     * @return $this
     */
    public function setResourceResolverSearchpath($resource_resolver_searchpath)
    {
        $this->container['resource_resolver_searchpath'] = $resource_resolver_searchpath;

        return $this;
    }

    /**
     * Gets resource_resolver_manglenamespaces
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getResourceResolverManglenamespaces()
    {
        return $this->container['resource_resolver_manglenamespaces'];
    }

    /**
     * Sets resource_resolver_manglenamespaces
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $resource_resolver_manglenamespaces resource_resolver_manglenamespaces
     *
     * @return $this
     */
    public function setResourceResolverManglenamespaces($resource_resolver_manglenamespaces)
    {
        $this->container['resource_resolver_manglenamespaces'] = $resource_resolver_manglenamespaces;

        return $this;
    }

    /**
     * Gets resource_resolver_allow_direct
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getResourceResolverAllowDirect()
    {
        return $this->container['resource_resolver_allow_direct'];
    }

    /**
     * Sets resource_resolver_allow_direct
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $resource_resolver_allow_direct resource_resolver_allow_direct
     *
     * @return $this
     */
    public function setResourceResolverAllowDirect($resource_resolver_allow_direct)
    {
        $this->container['resource_resolver_allow_direct'] = $resource_resolver_allow_direct;

        return $this;
    }

    /**
     * Gets resource_resolver_required_providers
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getResourceResolverRequiredProviders()
    {
        return $this->container['resource_resolver_required_providers'];
    }

    /**
     * Sets resource_resolver_required_providers
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $resource_resolver_required_providers resource_resolver_required_providers
     *
     * @return $this
     */
    public function setResourceResolverRequiredProviders($resource_resolver_required_providers)
    {
        $this->container['resource_resolver_required_providers'] = $resource_resolver_required_providers;

        return $this;
    }

    /**
     * Gets resource_resolver_required_providernames
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getResourceResolverRequiredProvidernames()
    {
        return $this->container['resource_resolver_required_providernames'];
    }

    /**
     * Sets resource_resolver_required_providernames
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $resource_resolver_required_providernames resource_resolver_required_providernames
     *
     * @return $this
     */
    public function setResourceResolverRequiredProvidernames($resource_resolver_required_providernames)
    {
        $this->container['resource_resolver_required_providernames'] = $resource_resolver_required_providernames;

        return $this;
    }

    /**
     * Gets resource_resolver_virtual
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getResourceResolverVirtual()
    {
        return $this->container['resource_resolver_virtual'];
    }

    /**
     * Sets resource_resolver_virtual
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $resource_resolver_virtual resource_resolver_virtual
     *
     * @return $this
     */
    public function setResourceResolverVirtual($resource_resolver_virtual)
    {
        $this->container['resource_resolver_virtual'] = $resource_resolver_virtual;

        return $this;
    }

    /**
     * Gets resource_resolver_mapping
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getResourceResolverMapping()
    {
        return $this->container['resource_resolver_mapping'];
    }

    /**
     * Sets resource_resolver_mapping
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $resource_resolver_mapping resource_resolver_mapping
     *
     * @return $this
     */
    public function setResourceResolverMapping($resource_resolver_mapping)
    {
        $this->container['resource_resolver_mapping'] = $resource_resolver_mapping;

        return $this;
    }

    /**
     * Gets resource_resolver_map_location
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getResourceResolverMapLocation()
    {
        return $this->container['resource_resolver_map_location'];
    }

    /**
     * Sets resource_resolver_map_location
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $resource_resolver_map_location resource_resolver_map_location
     *
     * @return $this
     */
    public function setResourceResolverMapLocation($resource_resolver_map_location)
    {
        $this->container['resource_resolver_map_location'] = $resource_resolver_map_location;

        return $this;
    }

    /**
     * Gets resource_resolver_map_observation
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getResourceResolverMapObservation()
    {
        return $this->container['resource_resolver_map_observation'];
    }

    /**
     * Sets resource_resolver_map_observation
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $resource_resolver_map_observation resource_resolver_map_observation
     *
     * @return $this
     */
    public function setResourceResolverMapObservation($resource_resolver_map_observation)
    {
        $this->container['resource_resolver_map_observation'] = $resource_resolver_map_observation;

        return $this;
    }

    /**
     * Gets resource_resolver_default_vanity_redirect_status
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getResourceResolverDefaultVanityRedirectStatus()
    {
        return $this->container['resource_resolver_default_vanity_redirect_status'];
    }

    /**
     * Sets resource_resolver_default_vanity_redirect_status
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $resource_resolver_default_vanity_redirect_status resource_resolver_default_vanity_redirect_status
     *
     * @return $this
     */
    public function setResourceResolverDefaultVanityRedirectStatus($resource_resolver_default_vanity_redirect_status)
    {
        $this->container['resource_resolver_default_vanity_redirect_status'] = $resource_resolver_default_vanity_redirect_status;

        return $this;
    }

    /**
     * Gets resource_resolver_enable_vanitypath
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getResourceResolverEnableVanitypath()
    {
        return $this->container['resource_resolver_enable_vanitypath'];
    }

    /**
     * Sets resource_resolver_enable_vanitypath
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $resource_resolver_enable_vanitypath resource_resolver_enable_vanitypath
     *
     * @return $this
     */
    public function setResourceResolverEnableVanitypath($resource_resolver_enable_vanitypath)
    {
        $this->container['resource_resolver_enable_vanitypath'] = $resource_resolver_enable_vanitypath;

        return $this;
    }

    /**
     * Gets resource_resolver_vanitypath_max_entries
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getResourceResolverVanitypathMaxEntries()
    {
        return $this->container['resource_resolver_vanitypath_max_entries'];
    }

    /**
     * Sets resource_resolver_vanitypath_max_entries
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $resource_resolver_vanitypath_max_entries resource_resolver_vanitypath_max_entries
     *
     * @return $this
     */
    public function setResourceResolverVanitypathMaxEntries($resource_resolver_vanitypath_max_entries)
    {
        $this->container['resource_resolver_vanitypath_max_entries'] = $resource_resolver_vanitypath_max_entries;

        return $this;
    }

    /**
     * Gets resource_resolver_vanitypath_max_entries_startup
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getResourceResolverVanitypathMaxEntriesStartup()
    {
        return $this->container['resource_resolver_vanitypath_max_entries_startup'];
    }

    /**
     * Sets resource_resolver_vanitypath_max_entries_startup
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $resource_resolver_vanitypath_max_entries_startup resource_resolver_vanitypath_max_entries_startup
     *
     * @return $this
     */
    public function setResourceResolverVanitypathMaxEntriesStartup($resource_resolver_vanitypath_max_entries_startup)
    {
        $this->container['resource_resolver_vanitypath_max_entries_startup'] = $resource_resolver_vanitypath_max_entries_startup;

        return $this;
    }

    /**
     * Gets resource_resolver_vanitypath_bloomfilter_max_bytes
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getResourceResolverVanitypathBloomfilterMaxBytes()
    {
        return $this->container['resource_resolver_vanitypath_bloomfilter_max_bytes'];
    }

    /**
     * Sets resource_resolver_vanitypath_bloomfilter_max_bytes
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $resource_resolver_vanitypath_bloomfilter_max_bytes resource_resolver_vanitypath_bloomfilter_max_bytes
     *
     * @return $this
     */
    public function setResourceResolverVanitypathBloomfilterMaxBytes($resource_resolver_vanitypath_bloomfilter_max_bytes)
    {
        $this->container['resource_resolver_vanitypath_bloomfilter_max_bytes'] = $resource_resolver_vanitypath_bloomfilter_max_bytes;

        return $this;
    }

    /**
     * Gets resource_resolver_optimize_alias_resolution
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getResourceResolverOptimizeAliasResolution()
    {
        return $this->container['resource_resolver_optimize_alias_resolution'];
    }

    /**
     * Sets resource_resolver_optimize_alias_resolution
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $resource_resolver_optimize_alias_resolution resource_resolver_optimize_alias_resolution
     *
     * @return $this
     */
    public function setResourceResolverOptimizeAliasResolution($resource_resolver_optimize_alias_resolution)
    {
        $this->container['resource_resolver_optimize_alias_resolution'] = $resource_resolver_optimize_alias_resolution;

        return $this;
    }

    /**
     * Gets resource_resolver_vanitypath_whitelist
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getResourceResolverVanitypathWhitelist()
    {
        return $this->container['resource_resolver_vanitypath_whitelist'];
    }

    /**
     * Sets resource_resolver_vanitypath_whitelist
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $resource_resolver_vanitypath_whitelist resource_resolver_vanitypath_whitelist
     *
     * @return $this
     */
    public function setResourceResolverVanitypathWhitelist($resource_resolver_vanitypath_whitelist)
    {
        $this->container['resource_resolver_vanitypath_whitelist'] = $resource_resolver_vanitypath_whitelist;

        return $this;
    }

    /**
     * Gets resource_resolver_vanitypath_blacklist
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getResourceResolverVanitypathBlacklist()
    {
        return $this->container['resource_resolver_vanitypath_blacklist'];
    }

    /**
     * Sets resource_resolver_vanitypath_blacklist
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $resource_resolver_vanitypath_blacklist resource_resolver_vanitypath_blacklist
     *
     * @return $this
     */
    public function setResourceResolverVanitypathBlacklist($resource_resolver_vanitypath_blacklist)
    {
        $this->container['resource_resolver_vanitypath_blacklist'] = $resource_resolver_vanitypath_blacklist;

        return $this;
    }

    /**
     * Gets resource_resolver_vanity_precedence
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getResourceResolverVanityPrecedence()
    {
        return $this->container['resource_resolver_vanity_precedence'];
    }

    /**
     * Sets resource_resolver_vanity_precedence
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $resource_resolver_vanity_precedence resource_resolver_vanity_precedence
     *
     * @return $this
     */
    public function setResourceResolverVanityPrecedence($resource_resolver_vanity_precedence)
    {
        $this->container['resource_resolver_vanity_precedence'] = $resource_resolver_vanity_precedence;

        return $this;
    }

    /**
     * Gets resource_resolver_providerhandling_paranoid
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getResourceResolverProviderhandlingParanoid()
    {
        return $this->container['resource_resolver_providerhandling_paranoid'];
    }

    /**
     * Sets resource_resolver_providerhandling_paranoid
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $resource_resolver_providerhandling_paranoid resource_resolver_providerhandling_paranoid
     *
     * @return $this
     */
    public function setResourceResolverProviderhandlingParanoid($resource_resolver_providerhandling_paranoid)
    {
        $this->container['resource_resolver_providerhandling_paranoid'] = $resource_resolver_providerhandling_paranoid;

        return $this;
    }

    /**
     * Gets resource_resolver_log_closing
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getResourceResolverLogClosing()
    {
        return $this->container['resource_resolver_log_closing'];
    }

    /**
     * Sets resource_resolver_log_closing
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $resource_resolver_log_closing resource_resolver_log_closing
     *
     * @return $this
     */
    public function setResourceResolverLogClosing($resource_resolver_log_closing)
    {
        $this->container['resource_resolver_log_closing'] = $resource_resolver_log_closing;

        return $this;
    }

    /**
     * Gets resource_resolver_log_unclosed
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getResourceResolverLogUnclosed()
    {
        return $this->container['resource_resolver_log_unclosed'];
    }

    /**
     * Sets resource_resolver_log_unclosed
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $resource_resolver_log_unclosed resource_resolver_log_unclosed
     *
     * @return $this
     */
    public function setResourceResolverLogUnclosed($resource_resolver_log_unclosed)
    {
        $this->container['resource_resolver_log_unclosed'] = $resource_resolver_log_unclosed;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


