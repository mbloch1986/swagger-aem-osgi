/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingTracerInternalLogTracerProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingTracerInternalLogTracerProperties::OAIOrgApacheSlingTracerInternalLogTracerProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheSlingTracerInternalLogTracerProperties::OAIOrgApacheSlingTracerInternalLogTracerProperties() {
    init();
}

OAIOrgApacheSlingTracerInternalLogTracerProperties::~OAIOrgApacheSlingTracerInternalLogTracerProperties() {
    this->cleanup();
}

void
OAIOrgApacheSlingTracerInternalLogTracerProperties::init() {
    tracer_sets = new OAIConfigNodePropertyArray();
    m_tracer_sets_isSet = false;
    enabled = new OAIConfigNodePropertyBoolean();
    m_enabled_isSet = false;
    servlet_enabled = new OAIConfigNodePropertyBoolean();
    m_servlet_enabled_isSet = false;
    recording_cache_size_in_mb = new OAIConfigNodePropertyInteger();
    m_recording_cache_size_in_mb_isSet = false;
    recording_cache_duration_in_secs = new OAIConfigNodePropertyInteger();
    m_recording_cache_duration_in_secs_isSet = false;
    recording_compression_enabled = new OAIConfigNodePropertyBoolean();
    m_recording_compression_enabled_isSet = false;
    gzip_response = new OAIConfigNodePropertyBoolean();
    m_gzip_response_isSet = false;
}

void
OAIOrgApacheSlingTracerInternalLogTracerProperties::cleanup() {
    if(tracer_sets != nullptr) { 
        delete tracer_sets;
    }
    if(enabled != nullptr) { 
        delete enabled;
    }
    if(servlet_enabled != nullptr) { 
        delete servlet_enabled;
    }
    if(recording_cache_size_in_mb != nullptr) { 
        delete recording_cache_size_in_mb;
    }
    if(recording_cache_duration_in_secs != nullptr) { 
        delete recording_cache_duration_in_secs;
    }
    if(recording_compression_enabled != nullptr) { 
        delete recording_compression_enabled;
    }
    if(gzip_response != nullptr) { 
        delete gzip_response;
    }
}

OAIOrgApacheSlingTracerInternalLogTracerProperties*
OAIOrgApacheSlingTracerInternalLogTracerProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheSlingTracerInternalLogTracerProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&tracer_sets, pJson["tracerSets"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&enabled, pJson["enabled"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&servlet_enabled, pJson["servletEnabled"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&recording_cache_size_in_mb, pJson["recordingCacheSizeInMB"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&recording_cache_duration_in_secs, pJson["recordingCacheDurationInSecs"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&recording_compression_enabled, pJson["recordingCompressionEnabled"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&gzip_response, pJson["gzipResponse"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
}

QString
OAIOrgApacheSlingTracerInternalLogTracerProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingTracerInternalLogTracerProperties::asJsonObject() {
    QJsonObject obj;
    if((tracer_sets != nullptr) && (tracer_sets->isSet())){
        toJsonValue(QString("tracerSets"), tracer_sets, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((enabled != nullptr) && (enabled->isSet())){
        toJsonValue(QString("enabled"), enabled, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((servlet_enabled != nullptr) && (servlet_enabled->isSet())){
        toJsonValue(QString("servletEnabled"), servlet_enabled, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((recording_cache_size_in_mb != nullptr) && (recording_cache_size_in_mb->isSet())){
        toJsonValue(QString("recordingCacheSizeInMB"), recording_cache_size_in_mb, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((recording_cache_duration_in_secs != nullptr) && (recording_cache_duration_in_secs->isSet())){
        toJsonValue(QString("recordingCacheDurationInSecs"), recording_cache_duration_in_secs, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((recording_compression_enabled != nullptr) && (recording_compression_enabled->isSet())){
        toJsonValue(QString("recordingCompressionEnabled"), recording_compression_enabled, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((gzip_response != nullptr) && (gzip_response->isSet())){
        toJsonValue(QString("gzipResponse"), gzip_response, obj, QString("OAIConfigNodePropertyBoolean"));
    }

    return obj;
}

OAIConfigNodePropertyArray*
OAIOrgApacheSlingTracerInternalLogTracerProperties::getTracerSets() {
    return tracer_sets;
}
void
OAIOrgApacheSlingTracerInternalLogTracerProperties::setTracerSets(OAIConfigNodePropertyArray* tracer_sets) {
    this->tracer_sets = tracer_sets;
    this->m_tracer_sets_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingTracerInternalLogTracerProperties::getEnabled() {
    return enabled;
}
void
OAIOrgApacheSlingTracerInternalLogTracerProperties::setEnabled(OAIConfigNodePropertyBoolean* enabled) {
    this->enabled = enabled;
    this->m_enabled_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingTracerInternalLogTracerProperties::getServletEnabled() {
    return servlet_enabled;
}
void
OAIOrgApacheSlingTracerInternalLogTracerProperties::setServletEnabled(OAIConfigNodePropertyBoolean* servlet_enabled) {
    this->servlet_enabled = servlet_enabled;
    this->m_servlet_enabled_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingTracerInternalLogTracerProperties::getRecordingCacheSizeInMb() {
    return recording_cache_size_in_mb;
}
void
OAIOrgApacheSlingTracerInternalLogTracerProperties::setRecordingCacheSizeInMb(OAIConfigNodePropertyInteger* recording_cache_size_in_mb) {
    this->recording_cache_size_in_mb = recording_cache_size_in_mb;
    this->m_recording_cache_size_in_mb_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingTracerInternalLogTracerProperties::getRecordingCacheDurationInSecs() {
    return recording_cache_duration_in_secs;
}
void
OAIOrgApacheSlingTracerInternalLogTracerProperties::setRecordingCacheDurationInSecs(OAIConfigNodePropertyInteger* recording_cache_duration_in_secs) {
    this->recording_cache_duration_in_secs = recording_cache_duration_in_secs;
    this->m_recording_cache_duration_in_secs_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingTracerInternalLogTracerProperties::getRecordingCompressionEnabled() {
    return recording_compression_enabled;
}
void
OAIOrgApacheSlingTracerInternalLogTracerProperties::setRecordingCompressionEnabled(OAIConfigNodePropertyBoolean* recording_compression_enabled) {
    this->recording_compression_enabled = recording_compression_enabled;
    this->m_recording_compression_enabled_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingTracerInternalLogTracerProperties::getGzipResponse() {
    return gzip_response;
}
void
OAIOrgApacheSlingTracerInternalLogTracerProperties::setGzipResponse(OAIConfigNodePropertyBoolean* gzip_response) {
    this->gzip_response = gzip_response;
    this->m_gzip_response_isSet = true;
}


bool
OAIOrgApacheSlingTracerInternalLogTracerProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(tracer_sets != nullptr && tracer_sets->isSet()){ isObjectUpdated = true; break;}
        if(enabled != nullptr && enabled->isSet()){ isObjectUpdated = true; break;}
        if(servlet_enabled != nullptr && servlet_enabled->isSet()){ isObjectUpdated = true; break;}
        if(recording_cache_size_in_mb != nullptr && recording_cache_size_in_mb->isSet()){ isObjectUpdated = true; break;}
        if(recording_cache_duration_in_secs != nullptr && recording_cache_duration_in_secs->isSet()){ isObjectUpdated = true; break;}
        if(recording_compression_enabled != nullptr && recording_compression_enabled->isSet()){ isObjectUpdated = true; break;}
        if(gzip_response != nullptr && gzip_response->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

