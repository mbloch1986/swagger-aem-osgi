/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::OAIComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::OAIComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties() {
    init();
}

OAIComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::~OAIComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties() {
    this->cleanup();
}

void
OAIComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::init() {
    preserve_hierarchy_nodes = new OAIConfigNodePropertyBoolean();
    m_preserve_hierarchy_nodes_isSet = false;
    ignore_versioning = new OAIConfigNodePropertyBoolean();
    m_ignore_versioning_isSet = false;
    import_acl = new OAIConfigNodePropertyBoolean();
    m_import_acl_isSet = false;
    save_threshold = new OAIConfigNodePropertyInteger();
    m_save_threshold_isSet = false;
    preserve_user_paths = new OAIConfigNodePropertyBoolean();
    m_preserve_user_paths_isSet = false;
    preserve_uuid = new OAIConfigNodePropertyBoolean();
    m_preserve_uuid_isSet = false;
    preserve_uuid_nodetypes = new OAIConfigNodePropertyArray();
    m_preserve_uuid_nodetypes_isSet = false;
    preserve_uuid_subtrees = new OAIConfigNodePropertyArray();
    m_preserve_uuid_subtrees_isSet = false;
    auto_commit = new OAIConfigNodePropertyBoolean();
    m_auto_commit_isSet = false;
}

void
OAIComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::cleanup() {
    if(preserve_hierarchy_nodes != nullptr) { 
        delete preserve_hierarchy_nodes;
    }
    if(ignore_versioning != nullptr) { 
        delete ignore_versioning;
    }
    if(import_acl != nullptr) { 
        delete import_acl;
    }
    if(save_threshold != nullptr) { 
        delete save_threshold;
    }
    if(preserve_user_paths != nullptr) { 
        delete preserve_user_paths;
    }
    if(preserve_uuid != nullptr) { 
        delete preserve_uuid;
    }
    if(preserve_uuid_nodetypes != nullptr) { 
        delete preserve_uuid_nodetypes;
    }
    if(preserve_uuid_subtrees != nullptr) { 
        delete preserve_uuid_subtrees;
    }
    if(auto_commit != nullptr) { 
        delete auto_commit;
    }
}

OAIComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties*
OAIComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&preserve_hierarchy_nodes, pJson["preserve.hierarchy.nodes"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&ignore_versioning, pJson["ignore.versioning"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&import_acl, pJson["import.acl"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&save_threshold, pJson["save.threshold"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&preserve_user_paths, pJson["preserve.user.paths"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&preserve_uuid, pJson["preserve.uuid"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&preserve_uuid_nodetypes, pJson["preserve.uuid.nodetypes"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&preserve_uuid_subtrees, pJson["preserve.uuid.subtrees"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&auto_commit, pJson["auto.commit"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
}

QString
OAIComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::asJsonObject() {
    QJsonObject obj;
    if((preserve_hierarchy_nodes != nullptr) && (preserve_hierarchy_nodes->isSet())){
        toJsonValue(QString("preserve.hierarchy.nodes"), preserve_hierarchy_nodes, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((ignore_versioning != nullptr) && (ignore_versioning->isSet())){
        toJsonValue(QString("ignore.versioning"), ignore_versioning, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((import_acl != nullptr) && (import_acl->isSet())){
        toJsonValue(QString("import.acl"), import_acl, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((save_threshold != nullptr) && (save_threshold->isSet())){
        toJsonValue(QString("save.threshold"), save_threshold, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((preserve_user_paths != nullptr) && (preserve_user_paths->isSet())){
        toJsonValue(QString("preserve.user.paths"), preserve_user_paths, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((preserve_uuid != nullptr) && (preserve_uuid->isSet())){
        toJsonValue(QString("preserve.uuid"), preserve_uuid, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((preserve_uuid_nodetypes != nullptr) && (preserve_uuid_nodetypes->isSet())){
        toJsonValue(QString("preserve.uuid.nodetypes"), preserve_uuid_nodetypes, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((preserve_uuid_subtrees != nullptr) && (preserve_uuid_subtrees->isSet())){
        toJsonValue(QString("preserve.uuid.subtrees"), preserve_uuid_subtrees, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((auto_commit != nullptr) && (auto_commit->isSet())){
        toJsonValue(QString("auto.commit"), auto_commit, obj, QString("OAIConfigNodePropertyBoolean"));
    }

    return obj;
}

OAIConfigNodePropertyBoolean*
OAIComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::getPreserveHierarchyNodes() {
    return preserve_hierarchy_nodes;
}
void
OAIComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::setPreserveHierarchyNodes(OAIConfigNodePropertyBoolean* preserve_hierarchy_nodes) {
    this->preserve_hierarchy_nodes = preserve_hierarchy_nodes;
    this->m_preserve_hierarchy_nodes_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::getIgnoreVersioning() {
    return ignore_versioning;
}
void
OAIComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::setIgnoreVersioning(OAIConfigNodePropertyBoolean* ignore_versioning) {
    this->ignore_versioning = ignore_versioning;
    this->m_ignore_versioning_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::getImportAcl() {
    return import_acl;
}
void
OAIComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::setImportAcl(OAIConfigNodePropertyBoolean* import_acl) {
    this->import_acl = import_acl;
    this->m_import_acl_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::getSaveThreshold() {
    return save_threshold;
}
void
OAIComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::setSaveThreshold(OAIConfigNodePropertyInteger* save_threshold) {
    this->save_threshold = save_threshold;
    this->m_save_threshold_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::getPreserveUserPaths() {
    return preserve_user_paths;
}
void
OAIComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::setPreserveUserPaths(OAIConfigNodePropertyBoolean* preserve_user_paths) {
    this->preserve_user_paths = preserve_user_paths;
    this->m_preserve_user_paths_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::getPreserveUuid() {
    return preserve_uuid;
}
void
OAIComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::setPreserveUuid(OAIConfigNodePropertyBoolean* preserve_uuid) {
    this->preserve_uuid = preserve_uuid;
    this->m_preserve_uuid_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::getPreserveUuidNodetypes() {
    return preserve_uuid_nodetypes;
}
void
OAIComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::setPreserveUuidNodetypes(OAIConfigNodePropertyArray* preserve_uuid_nodetypes) {
    this->preserve_uuid_nodetypes = preserve_uuid_nodetypes;
    this->m_preserve_uuid_nodetypes_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::getPreserveUuidSubtrees() {
    return preserve_uuid_subtrees;
}
void
OAIComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::setPreserveUuidSubtrees(OAIConfigNodePropertyArray* preserve_uuid_subtrees) {
    this->preserve_uuid_subtrees = preserve_uuid_subtrees;
    this->m_preserve_uuid_subtrees_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::getAutoCommit() {
    return auto_commit;
}
void
OAIComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::setAutoCommit(OAIConfigNodePropertyBoolean* auto_commit) {
    this->auto_commit = auto_commit;
    this->m_auto_commit_isSet = true;
}


bool
OAIComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(preserve_hierarchy_nodes != nullptr && preserve_hierarchy_nodes->isSet()){ isObjectUpdated = true; break;}
        if(ignore_versioning != nullptr && ignore_versioning->isSet()){ isObjectUpdated = true; break;}
        if(import_acl != nullptr && import_acl->isSet()){ isObjectUpdated = true; break;}
        if(save_threshold != nullptr && save_threshold->isSet()){ isObjectUpdated = true; break;}
        if(preserve_user_paths != nullptr && preserve_user_paths->isSet()){ isObjectUpdated = true; break;}
        if(preserve_uuid != nullptr && preserve_uuid->isSet()){ isObjectUpdated = true; break;}
        if(preserve_uuid_nodetypes != nullptr && preserve_uuid_nodetypes->isSet()){ isObjectUpdated = true; break;}
        if(preserve_uuid_subtrees != nullptr && preserve_uuid_subtrees->isSet()){ isObjectUpdated = true; break;}
        if(auto_commit != nullptr && auto_commit->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

