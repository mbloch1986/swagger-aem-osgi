/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingEngineImplLogRequestLoggerServiceProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingEngineImplLogRequestLoggerServiceProperties::OAIOrgApacheSlingEngineImplLogRequestLoggerServiceProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheSlingEngineImplLogRequestLoggerServiceProperties::OAIOrgApacheSlingEngineImplLogRequestLoggerServiceProperties() {
    init();
}

OAIOrgApacheSlingEngineImplLogRequestLoggerServiceProperties::~OAIOrgApacheSlingEngineImplLogRequestLoggerServiceProperties() {
    this->cleanup();
}

void
OAIOrgApacheSlingEngineImplLogRequestLoggerServiceProperties::init() {
    request_log_service_format = new OAIConfigNodePropertyString();
    m_request_log_service_format_isSet = false;
    request_log_service_output = new OAIConfigNodePropertyString();
    m_request_log_service_output_isSet = false;
    request_log_service_outputtype = new OAIConfigNodePropertyDropDown();
    m_request_log_service_outputtype_isSet = false;
    request_log_service_onentry = new OAIConfigNodePropertyBoolean();
    m_request_log_service_onentry_isSet = false;
}

void
OAIOrgApacheSlingEngineImplLogRequestLoggerServiceProperties::cleanup() {
    if(request_log_service_format != nullptr) { 
        delete request_log_service_format;
    }
    if(request_log_service_output != nullptr) { 
        delete request_log_service_output;
    }
    if(request_log_service_outputtype != nullptr) { 
        delete request_log_service_outputtype;
    }
    if(request_log_service_onentry != nullptr) { 
        delete request_log_service_onentry;
    }
}

OAIOrgApacheSlingEngineImplLogRequestLoggerServiceProperties*
OAIOrgApacheSlingEngineImplLogRequestLoggerServiceProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheSlingEngineImplLogRequestLoggerServiceProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&request_log_service_format, pJson["request.log.service.format"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&request_log_service_output, pJson["request.log.service.output"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&request_log_service_outputtype, pJson["request.log.service.outputtype"], "OAIConfigNodePropertyDropDown", "OAIConfigNodePropertyDropDown");
    
    ::OpenAPI::setValue(&request_log_service_onentry, pJson["request.log.service.onentry"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
}

QString
OAIOrgApacheSlingEngineImplLogRequestLoggerServiceProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingEngineImplLogRequestLoggerServiceProperties::asJsonObject() {
    QJsonObject obj;
    if((request_log_service_format != nullptr) && (request_log_service_format->isSet())){
        toJsonValue(QString("request.log.service.format"), request_log_service_format, obj, QString("OAIConfigNodePropertyString"));
    }
    if((request_log_service_output != nullptr) && (request_log_service_output->isSet())){
        toJsonValue(QString("request.log.service.output"), request_log_service_output, obj, QString("OAIConfigNodePropertyString"));
    }
    if((request_log_service_outputtype != nullptr) && (request_log_service_outputtype->isSet())){
        toJsonValue(QString("request.log.service.outputtype"), request_log_service_outputtype, obj, QString("OAIConfigNodePropertyDropDown"));
    }
    if((request_log_service_onentry != nullptr) && (request_log_service_onentry->isSet())){
        toJsonValue(QString("request.log.service.onentry"), request_log_service_onentry, obj, QString("OAIConfigNodePropertyBoolean"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingEngineImplLogRequestLoggerServiceProperties::getRequestLogServiceFormat() {
    return request_log_service_format;
}
void
OAIOrgApacheSlingEngineImplLogRequestLoggerServiceProperties::setRequestLogServiceFormat(OAIConfigNodePropertyString* request_log_service_format) {
    this->request_log_service_format = request_log_service_format;
    this->m_request_log_service_format_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingEngineImplLogRequestLoggerServiceProperties::getRequestLogServiceOutput() {
    return request_log_service_output;
}
void
OAIOrgApacheSlingEngineImplLogRequestLoggerServiceProperties::setRequestLogServiceOutput(OAIConfigNodePropertyString* request_log_service_output) {
    this->request_log_service_output = request_log_service_output;
    this->m_request_log_service_output_isSet = true;
}

OAIConfigNodePropertyDropDown*
OAIOrgApacheSlingEngineImplLogRequestLoggerServiceProperties::getRequestLogServiceOutputtype() {
    return request_log_service_outputtype;
}
void
OAIOrgApacheSlingEngineImplLogRequestLoggerServiceProperties::setRequestLogServiceOutputtype(OAIConfigNodePropertyDropDown* request_log_service_outputtype) {
    this->request_log_service_outputtype = request_log_service_outputtype;
    this->m_request_log_service_outputtype_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingEngineImplLogRequestLoggerServiceProperties::getRequestLogServiceOnentry() {
    return request_log_service_onentry;
}
void
OAIOrgApacheSlingEngineImplLogRequestLoggerServiceProperties::setRequestLogServiceOnentry(OAIConfigNodePropertyBoolean* request_log_service_onentry) {
    this->request_log_service_onentry = request_log_service_onentry;
    this->m_request_log_service_onentry_isSet = true;
}


bool
OAIOrgApacheSlingEngineImplLogRequestLoggerServiceProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(request_log_service_format != nullptr && request_log_service_format->isSet()){ isObjectUpdated = true; break;}
        if(request_log_service_output != nullptr && request_log_service_output->isSet()){ isObjectUpdated = true; break;}
        if(request_log_service_outputtype != nullptr && request_log_service_outputtype->isSet()){ isObjectUpdated = true; break;}
        if(request_log_service_onentry != nullptr && request_log_service_onentry->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

