/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComDayCqCommonsImplExternalizerImplProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComDayCqCommonsImplExternalizerImplProperties::ComDayCqCommonsImplExternalizerImplProperties()
{
    m_Externalizer_domainsIsSet = false;
    m_Externalizer_hostIsSet = false;
    m_Externalizer_contextpathIsSet = false;
    m_Externalizer_encodedpathIsSet = false;
    
}

ComDayCqCommonsImplExternalizerImplProperties::~ComDayCqCommonsImplExternalizerImplProperties()
{
}

void ComDayCqCommonsImplExternalizerImplProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComDayCqCommonsImplExternalizerImplProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Externalizer_domainsIsSet)
    {
        val["externalizer.domains"] = ModelBase::toJson(m_Externalizer_domains);
    }
    if(m_Externalizer_hostIsSet)
    {
        val["externalizer.host"] = ModelBase::toJson(m_Externalizer_host);
    }
    if(m_Externalizer_contextpathIsSet)
    {
        val["externalizer.contextpath"] = ModelBase::toJson(m_Externalizer_contextpath);
    }
    if(m_Externalizer_encodedpathIsSet)
    {
        val["externalizer.encodedpath"] = ModelBase::toJson(m_Externalizer_encodedpath);
    }
    

    return val;
}

void ComDayCqCommonsImplExternalizerImplProperties::fromJson(nlohmann::json& val)
{
    if(val.find("externalizer.domains") != val.end())
    {
        if(!val["externalizer.domains"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["externalizer.domains"]);
            setExternalizerDomains( newItem );
        }
        
    }
    if(val.find("externalizer.host") != val.end())
    {
        if(!val["externalizer.host"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["externalizer.host"]);
            setExternalizerHost( newItem );
        }
        
    }
    if(val.find("externalizer.contextpath") != val.end())
    {
        if(!val["externalizer.contextpath"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["externalizer.contextpath"]);
            setExternalizerContextpath( newItem );
        }
        
    }
    if(val.find("externalizer.encodedpath") != val.end())
    {
        if(!val["externalizer.encodedpath"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["externalizer.encodedpath"]);
            setExternalizerEncodedpath( newItem );
        }
        
    }
    
}


ConfigNodePropertyArray ComDayCqCommonsImplExternalizerImplProperties::getExternalizerDomains() const
{
    return m_Externalizer_domains;
}
void ComDayCqCommonsImplExternalizerImplProperties::setExternalizerDomains(ConfigNodePropertyArray const& value)
{
    m_Externalizer_domains = value;
    m_Externalizer_domainsIsSet = true;
}
bool ComDayCqCommonsImplExternalizerImplProperties::externalizerDomainsIsSet() const
{
    return m_Externalizer_domainsIsSet;
}
void ComDayCqCommonsImplExternalizerImplProperties::unsetExternalizer_domains()
{
    m_Externalizer_domainsIsSet = false;
}
ConfigNodePropertyString ComDayCqCommonsImplExternalizerImplProperties::getExternalizerHost() const
{
    return m_Externalizer_host;
}
void ComDayCqCommonsImplExternalizerImplProperties::setExternalizerHost(ConfigNodePropertyString const& value)
{
    m_Externalizer_host = value;
    m_Externalizer_hostIsSet = true;
}
bool ComDayCqCommonsImplExternalizerImplProperties::externalizerHostIsSet() const
{
    return m_Externalizer_hostIsSet;
}
void ComDayCqCommonsImplExternalizerImplProperties::unsetExternalizer_host()
{
    m_Externalizer_hostIsSet = false;
}
ConfigNodePropertyString ComDayCqCommonsImplExternalizerImplProperties::getExternalizerContextpath() const
{
    return m_Externalizer_contextpath;
}
void ComDayCqCommonsImplExternalizerImplProperties::setExternalizerContextpath(ConfigNodePropertyString const& value)
{
    m_Externalizer_contextpath = value;
    m_Externalizer_contextpathIsSet = true;
}
bool ComDayCqCommonsImplExternalizerImplProperties::externalizerContextpathIsSet() const
{
    return m_Externalizer_contextpathIsSet;
}
void ComDayCqCommonsImplExternalizerImplProperties::unsetExternalizer_contextpath()
{
    m_Externalizer_contextpathIsSet = false;
}
ConfigNodePropertyBoolean ComDayCqCommonsImplExternalizerImplProperties::getExternalizerEncodedpath() const
{
    return m_Externalizer_encodedpath;
}
void ComDayCqCommonsImplExternalizerImplProperties::setExternalizerEncodedpath(ConfigNodePropertyBoolean const& value)
{
    m_Externalizer_encodedpath = value;
    m_Externalizer_encodedpathIsSet = true;
}
bool ComDayCqCommonsImplExternalizerImplProperties::externalizerEncodedpathIsSet() const
{
    return m_Externalizer_encodedpathIsSet;
}
void ComDayCqCommonsImplExternalizerImplProperties::unsetExternalizer_encodedpath()
{
    m_Externalizer_encodedpathIsSet = false;
}

}
}
}
}

