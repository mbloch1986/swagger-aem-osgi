/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComDayCqDamCoreImplDamEventRecorderImplProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComDayCqDamCoreImplDamEventRecorderImplProperties::ComDayCqDamCoreImplDamEventRecorderImplProperties()
{
    m_Event_filterIsSet = false;
    m_Event_queue_lengthIsSet = false;
    m_Eventrecorder_enabledIsSet = false;
    m_Eventrecorder_blacklistIsSet = false;
    m_Eventrecorder_eventtypesIsSet = false;
    
}

ComDayCqDamCoreImplDamEventRecorderImplProperties::~ComDayCqDamCoreImplDamEventRecorderImplProperties()
{
}

void ComDayCqDamCoreImplDamEventRecorderImplProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComDayCqDamCoreImplDamEventRecorderImplProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Event_filterIsSet)
    {
        val["event.filter"] = ModelBase::toJson(m_Event_filter);
    }
    if(m_Event_queue_lengthIsSet)
    {
        val["event.queue.length"] = ModelBase::toJson(m_Event_queue_length);
    }
    if(m_Eventrecorder_enabledIsSet)
    {
        val["eventrecorder.enabled"] = ModelBase::toJson(m_Eventrecorder_enabled);
    }
    if(m_Eventrecorder_blacklistIsSet)
    {
        val["eventrecorder.blacklist"] = ModelBase::toJson(m_Eventrecorder_blacklist);
    }
    if(m_Eventrecorder_eventtypesIsSet)
    {
        val["eventrecorder.eventtypes"] = ModelBase::toJson(m_Eventrecorder_eventtypes);
    }
    

    return val;
}

void ComDayCqDamCoreImplDamEventRecorderImplProperties::fromJson(nlohmann::json& val)
{
    if(val.find("event.filter") != val.end())
    {
        if(!val["event.filter"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["event.filter"]);
            setEventFilter( newItem );
        }
        
    }
    if(val.find("event.queue.length") != val.end())
    {
        if(!val["event.queue.length"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["event.queue.length"]);
            setEventQueueLength( newItem );
        }
        
    }
    if(val.find("eventrecorder.enabled") != val.end())
    {
        if(!val["eventrecorder.enabled"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["eventrecorder.enabled"]);
            setEventrecorderEnabled( newItem );
        }
        
    }
    if(val.find("eventrecorder.blacklist") != val.end())
    {
        if(!val["eventrecorder.blacklist"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["eventrecorder.blacklist"]);
            setEventrecorderBlacklist( newItem );
        }
        
    }
    if(val.find("eventrecorder.eventtypes") != val.end())
    {
        if(!val["eventrecorder.eventtypes"].is_null())
        {
            ConfigNodePropertyDropDown newItem;
            newItem.fromJson(val["eventrecorder.eventtypes"]);
            setEventrecorderEventtypes( newItem );
        }
        
    }
    
}


ConfigNodePropertyString ComDayCqDamCoreImplDamEventRecorderImplProperties::getEventFilter() const
{
    return m_Event_filter;
}
void ComDayCqDamCoreImplDamEventRecorderImplProperties::setEventFilter(ConfigNodePropertyString const& value)
{
    m_Event_filter = value;
    m_Event_filterIsSet = true;
}
bool ComDayCqDamCoreImplDamEventRecorderImplProperties::eventFilterIsSet() const
{
    return m_Event_filterIsSet;
}
void ComDayCqDamCoreImplDamEventRecorderImplProperties::unsetEvent_filter()
{
    m_Event_filterIsSet = false;
}
ConfigNodePropertyInteger ComDayCqDamCoreImplDamEventRecorderImplProperties::getEventQueueLength() const
{
    return m_Event_queue_length;
}
void ComDayCqDamCoreImplDamEventRecorderImplProperties::setEventQueueLength(ConfigNodePropertyInteger const& value)
{
    m_Event_queue_length = value;
    m_Event_queue_lengthIsSet = true;
}
bool ComDayCqDamCoreImplDamEventRecorderImplProperties::eventQueueLengthIsSet() const
{
    return m_Event_queue_lengthIsSet;
}
void ComDayCqDamCoreImplDamEventRecorderImplProperties::unsetEvent_queue_length()
{
    m_Event_queue_lengthIsSet = false;
}
ConfigNodePropertyBoolean ComDayCqDamCoreImplDamEventRecorderImplProperties::getEventrecorderEnabled() const
{
    return m_Eventrecorder_enabled;
}
void ComDayCqDamCoreImplDamEventRecorderImplProperties::setEventrecorderEnabled(ConfigNodePropertyBoolean const& value)
{
    m_Eventrecorder_enabled = value;
    m_Eventrecorder_enabledIsSet = true;
}
bool ComDayCqDamCoreImplDamEventRecorderImplProperties::eventrecorderEnabledIsSet() const
{
    return m_Eventrecorder_enabledIsSet;
}
void ComDayCqDamCoreImplDamEventRecorderImplProperties::unsetEventrecorder_enabled()
{
    m_Eventrecorder_enabledIsSet = false;
}
ConfigNodePropertyArray ComDayCqDamCoreImplDamEventRecorderImplProperties::getEventrecorderBlacklist() const
{
    return m_Eventrecorder_blacklist;
}
void ComDayCqDamCoreImplDamEventRecorderImplProperties::setEventrecorderBlacklist(ConfigNodePropertyArray const& value)
{
    m_Eventrecorder_blacklist = value;
    m_Eventrecorder_blacklistIsSet = true;
}
bool ComDayCqDamCoreImplDamEventRecorderImplProperties::eventrecorderBlacklistIsSet() const
{
    return m_Eventrecorder_blacklistIsSet;
}
void ComDayCqDamCoreImplDamEventRecorderImplProperties::unsetEventrecorder_blacklist()
{
    m_Eventrecorder_blacklistIsSet = false;
}
ConfigNodePropertyDropDown ComDayCqDamCoreImplDamEventRecorderImplProperties::getEventrecorderEventtypes() const
{
    return m_Eventrecorder_eventtypes;
}
void ComDayCqDamCoreImplDamEventRecorderImplProperties::setEventrecorderEventtypes(ConfigNodePropertyDropDown const& value)
{
    m_Eventrecorder_eventtypes = value;
    m_Eventrecorder_eventtypesIsSet = true;
}
bool ComDayCqDamCoreImplDamEventRecorderImplProperties::eventrecorderEventtypesIsSet() const
{
    return m_Eventrecorder_eventtypesIsSet;
}
void ComDayCqDamCoreImplDamEventRecorderImplProperties::unsetEventrecorder_eventtypes()
{
    m_Eventrecorder_eventtypesIsSet = false;
}

}
}
}
}

