<?php
/**
 * ComDayCqWcmCoreImplPagePageManagerFactoryImplProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the ComDayCqWcmCoreImplPagePageManagerFactoryImplProperties model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */
class ComDayCqWcmCoreImplPagePageManagerFactoryImplProperties 
{
        /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyString|null
     * @SerializedName("illegalCharMapping")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyString")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyString")
     */
    protected $illegalCharMapping;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyBoolean|null
     * @SerializedName("pageSubTreeActivationCheck")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyBoolean")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyBoolean")
     */
    protected $pageSubTreeActivationCheck;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->illegalCharMapping = isset($data['illegalCharMapping']) ? $data['illegalCharMapping'] : null;
        $this->pageSubTreeActivationCheck = isset($data['pageSubTreeActivationCheck']) ? $data['pageSubTreeActivationCheck'] : null;
    }

    /**
     * Gets illegalCharMapping.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyString|null
     */
    public function getIllegalCharMapping()
    {
        return $this->illegalCharMapping;
    }

    /**
     * Sets illegalCharMapping.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyString|null $illegalCharMapping
     *
     * @return $this
     */
    public function setIllegalCharMapping(ConfigNodePropertyString $illegalCharMapping = null)
    {
        $this->illegalCharMapping = $illegalCharMapping;

        return $this;
    }

    /**
     * Gets pageSubTreeActivationCheck.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyBoolean|null
     */
    public function getPageSubTreeActivationCheck()
    {
        return $this->pageSubTreeActivationCheck;
    }

    /**
     * Sets pageSubTreeActivationCheck.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyBoolean|null $pageSubTreeActivationCheck
     *
     * @return $this
     */
    public function setPageSubTreeActivationCheck(ConfigNodePropertyBoolean $pageSubTreeActivationCheck = null)
    {
        $this->pageSubTreeActivationCheck = $pageSubTreeActivationCheck;

        return $this;
    }
}


