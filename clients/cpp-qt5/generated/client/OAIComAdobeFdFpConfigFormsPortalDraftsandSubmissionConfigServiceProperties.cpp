/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties() {
    init();
}

OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::~OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties() {
    this->cleanup();
}

void
OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::init() {
    portal_outboxes = new OAIConfigNodePropertyArray();
    m_portal_outboxes_isSet = false;
    draft_data_service = new OAIConfigNodePropertyString();
    m_draft_data_service_isSet = false;
    draft_metadata_service = new OAIConfigNodePropertyString();
    m_draft_metadata_service_isSet = false;
    submit_data_service = new OAIConfigNodePropertyString();
    m_submit_data_service_isSet = false;
    submit_metadata_service = new OAIConfigNodePropertyString();
    m_submit_metadata_service_isSet = false;
    pending_sign_data_service = new OAIConfigNodePropertyString();
    m_pending_sign_data_service_isSet = false;
    pending_sign_metadata_service = new OAIConfigNodePropertyString();
    m_pending_sign_metadata_service_isSet = false;
}

void
OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::cleanup() {
    if(portal_outboxes != nullptr) { 
        delete portal_outboxes;
    }
    if(draft_data_service != nullptr) { 
        delete draft_data_service;
    }
    if(draft_metadata_service != nullptr) { 
        delete draft_metadata_service;
    }
    if(submit_data_service != nullptr) { 
        delete submit_data_service;
    }
    if(submit_metadata_service != nullptr) { 
        delete submit_metadata_service;
    }
    if(pending_sign_data_service != nullptr) { 
        delete pending_sign_data_service;
    }
    if(pending_sign_metadata_service != nullptr) { 
        delete pending_sign_metadata_service;
    }
}

OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties*
OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&portal_outboxes, pJson["portal.outboxes"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&draft_data_service, pJson["draft.data.service"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&draft_metadata_service, pJson["draft.metadata.service"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&submit_data_service, pJson["submit.data.service"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&submit_metadata_service, pJson["submit.metadata.service"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&pending_sign_data_service, pJson["pendingSign.data.service"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&pending_sign_metadata_service, pJson["pendingSign.metadata.service"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
}

QString
OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::asJsonObject() {
    QJsonObject obj;
    if((portal_outboxes != nullptr) && (portal_outboxes->isSet())){
        toJsonValue(QString("portal.outboxes"), portal_outboxes, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((draft_data_service != nullptr) && (draft_data_service->isSet())){
        toJsonValue(QString("draft.data.service"), draft_data_service, obj, QString("OAIConfigNodePropertyString"));
    }
    if((draft_metadata_service != nullptr) && (draft_metadata_service->isSet())){
        toJsonValue(QString("draft.metadata.service"), draft_metadata_service, obj, QString("OAIConfigNodePropertyString"));
    }
    if((submit_data_service != nullptr) && (submit_data_service->isSet())){
        toJsonValue(QString("submit.data.service"), submit_data_service, obj, QString("OAIConfigNodePropertyString"));
    }
    if((submit_metadata_service != nullptr) && (submit_metadata_service->isSet())){
        toJsonValue(QString("submit.metadata.service"), submit_metadata_service, obj, QString("OAIConfigNodePropertyString"));
    }
    if((pending_sign_data_service != nullptr) && (pending_sign_data_service->isSet())){
        toJsonValue(QString("pendingSign.data.service"), pending_sign_data_service, obj, QString("OAIConfigNodePropertyString"));
    }
    if((pending_sign_metadata_service != nullptr) && (pending_sign_metadata_service->isSet())){
        toJsonValue(QString("pendingSign.metadata.service"), pending_sign_metadata_service, obj, QString("OAIConfigNodePropertyString"));
    }

    return obj;
}

OAIConfigNodePropertyArray*
OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::getPortalOutboxes() {
    return portal_outboxes;
}
void
OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::setPortalOutboxes(OAIConfigNodePropertyArray* portal_outboxes) {
    this->portal_outboxes = portal_outboxes;
    this->m_portal_outboxes_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::getDraftDataService() {
    return draft_data_service;
}
void
OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::setDraftDataService(OAIConfigNodePropertyString* draft_data_service) {
    this->draft_data_service = draft_data_service;
    this->m_draft_data_service_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::getDraftMetadataService() {
    return draft_metadata_service;
}
void
OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::setDraftMetadataService(OAIConfigNodePropertyString* draft_metadata_service) {
    this->draft_metadata_service = draft_metadata_service;
    this->m_draft_metadata_service_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::getSubmitDataService() {
    return submit_data_service;
}
void
OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::setSubmitDataService(OAIConfigNodePropertyString* submit_data_service) {
    this->submit_data_service = submit_data_service;
    this->m_submit_data_service_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::getSubmitMetadataService() {
    return submit_metadata_service;
}
void
OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::setSubmitMetadataService(OAIConfigNodePropertyString* submit_metadata_service) {
    this->submit_metadata_service = submit_metadata_service;
    this->m_submit_metadata_service_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::getPendingSignDataService() {
    return pending_sign_data_service;
}
void
OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::setPendingSignDataService(OAIConfigNodePropertyString* pending_sign_data_service) {
    this->pending_sign_data_service = pending_sign_data_service;
    this->m_pending_sign_data_service_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::getPendingSignMetadataService() {
    return pending_sign_metadata_service;
}
void
OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::setPendingSignMetadataService(OAIConfigNodePropertyString* pending_sign_metadata_service) {
    this->pending_sign_metadata_service = pending_sign_metadata_service;
    this->m_pending_sign_metadata_service_isSet = true;
}


bool
OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(portal_outboxes != nullptr && portal_outboxes->isSet()){ isObjectUpdated = true; break;}
        if(draft_data_service != nullptr && draft_data_service->isSet()){ isObjectUpdated = true; break;}
        if(draft_metadata_service != nullptr && draft_metadata_service->isSet()){ isObjectUpdated = true; break;}
        if(submit_data_service != nullptr && submit_data_service->isSet()){ isObjectUpdated = true; break;}
        if(submit_metadata_service != nullptr && submit_metadata_service->isSet()){ isObjectUpdated = true; break;}
        if(pending_sign_data_service != nullptr && pending_sign_data_service->isSet()){ isObjectUpdated = true; break;}
        if(pending_sign_metadata_service != nullptr && pending_sign_metadata_service->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

