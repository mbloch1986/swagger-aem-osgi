/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComAdobeGraniteAuthOauthAccesstokenProviderProperties
    /// </summary>
    [DataContract]
    public partial class ComAdobeGraniteAuthOauthAccesstokenProviderProperties :  IEquatable<ComAdobeGraniteAuthOauthAccesstokenProviderProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAdobeGraniteAuthOauthAccesstokenProviderProperties" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="authTokenProviderTitle">authTokenProviderTitle.</param>
        /// <param name="authTokenProviderDefaultClaims">authTokenProviderDefaultClaims.</param>
        /// <param name="authTokenProviderEndpoint">authTokenProviderEndpoint.</param>
        /// <param name="authAccessTokenRequest">authAccessTokenRequest.</param>
        /// <param name="authTokenProviderKeypairAlias">authTokenProviderKeypairAlias.</param>
        /// <param name="authTokenProviderConnTimeout">authTokenProviderConnTimeout.</param>
        /// <param name="authTokenProviderSoTimeout">authTokenProviderSoTimeout.</param>
        /// <param name="authTokenProviderClientId">authTokenProviderClientId.</param>
        /// <param name="authTokenProviderScope">authTokenProviderScope.</param>
        /// <param name="authTokenProviderReuseAccessToken">authTokenProviderReuseAccessToken.</param>
        /// <param name="authTokenProviderRelaxedSsl">authTokenProviderRelaxedSsl.</param>
        /// <param name="tokenRequestCustomizerType">tokenRequestCustomizerType.</param>
        /// <param name="authTokenValidatorType">authTokenValidatorType.</param>
        public ComAdobeGraniteAuthOauthAccesstokenProviderProperties(ConfigNodePropertyString name = default(ConfigNodePropertyString), ConfigNodePropertyString authTokenProviderTitle = default(ConfigNodePropertyString), ConfigNodePropertyArray authTokenProviderDefaultClaims = default(ConfigNodePropertyArray), ConfigNodePropertyString authTokenProviderEndpoint = default(ConfigNodePropertyString), ConfigNodePropertyString authAccessTokenRequest = default(ConfigNodePropertyString), ConfigNodePropertyString authTokenProviderKeypairAlias = default(ConfigNodePropertyString), ConfigNodePropertyInteger authTokenProviderConnTimeout = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger authTokenProviderSoTimeout = default(ConfigNodePropertyInteger), ConfigNodePropertyString authTokenProviderClientId = default(ConfigNodePropertyString), ConfigNodePropertyString authTokenProviderScope = default(ConfigNodePropertyString), ConfigNodePropertyBoolean authTokenProviderReuseAccessToken = default(ConfigNodePropertyBoolean), ConfigNodePropertyBoolean authTokenProviderRelaxedSsl = default(ConfigNodePropertyBoolean), ConfigNodePropertyString tokenRequestCustomizerType = default(ConfigNodePropertyString), ConfigNodePropertyString authTokenValidatorType = default(ConfigNodePropertyString))
        {
            this.Name = name;
            this.AuthTokenProviderTitle = authTokenProviderTitle;
            this.AuthTokenProviderDefaultClaims = authTokenProviderDefaultClaims;
            this.AuthTokenProviderEndpoint = authTokenProviderEndpoint;
            this.AuthAccessTokenRequest = authAccessTokenRequest;
            this.AuthTokenProviderKeypairAlias = authTokenProviderKeypairAlias;
            this.AuthTokenProviderConnTimeout = authTokenProviderConnTimeout;
            this.AuthTokenProviderSoTimeout = authTokenProviderSoTimeout;
            this.AuthTokenProviderClientId = authTokenProviderClientId;
            this.AuthTokenProviderScope = authTokenProviderScope;
            this.AuthTokenProviderReuseAccessToken = authTokenProviderReuseAccessToken;
            this.AuthTokenProviderRelaxedSsl = authTokenProviderRelaxedSsl;
            this.TokenRequestCustomizerType = tokenRequestCustomizerType;
            this.AuthTokenValidatorType = authTokenValidatorType;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public ConfigNodePropertyString Name { get; set; }

        /// <summary>
        /// Gets or Sets AuthTokenProviderTitle
        /// </summary>
        [DataMember(Name="auth.token.provider.title", EmitDefaultValue=false)]
        public ConfigNodePropertyString AuthTokenProviderTitle { get; set; }

        /// <summary>
        /// Gets or Sets AuthTokenProviderDefaultClaims
        /// </summary>
        [DataMember(Name="auth.token.provider.default.claims", EmitDefaultValue=false)]
        public ConfigNodePropertyArray AuthTokenProviderDefaultClaims { get; set; }

        /// <summary>
        /// Gets or Sets AuthTokenProviderEndpoint
        /// </summary>
        [DataMember(Name="auth.token.provider.endpoint", EmitDefaultValue=false)]
        public ConfigNodePropertyString AuthTokenProviderEndpoint { get; set; }

        /// <summary>
        /// Gets or Sets AuthAccessTokenRequest
        /// </summary>
        [DataMember(Name="auth.access.token.request", EmitDefaultValue=false)]
        public ConfigNodePropertyString AuthAccessTokenRequest { get; set; }

        /// <summary>
        /// Gets or Sets AuthTokenProviderKeypairAlias
        /// </summary>
        [DataMember(Name="auth.token.provider.keypair.alias", EmitDefaultValue=false)]
        public ConfigNodePropertyString AuthTokenProviderKeypairAlias { get; set; }

        /// <summary>
        /// Gets or Sets AuthTokenProviderConnTimeout
        /// </summary>
        [DataMember(Name="auth.token.provider.conn.timeout", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger AuthTokenProviderConnTimeout { get; set; }

        /// <summary>
        /// Gets or Sets AuthTokenProviderSoTimeout
        /// </summary>
        [DataMember(Name="auth.token.provider.so.timeout", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger AuthTokenProviderSoTimeout { get; set; }

        /// <summary>
        /// Gets or Sets AuthTokenProviderClientId
        /// </summary>
        [DataMember(Name="auth.token.provider.client.id", EmitDefaultValue=false)]
        public ConfigNodePropertyString AuthTokenProviderClientId { get; set; }

        /// <summary>
        /// Gets or Sets AuthTokenProviderScope
        /// </summary>
        [DataMember(Name="auth.token.provider.scope", EmitDefaultValue=false)]
        public ConfigNodePropertyString AuthTokenProviderScope { get; set; }

        /// <summary>
        /// Gets or Sets AuthTokenProviderReuseAccessToken
        /// </summary>
        [DataMember(Name="auth.token.provider.reuse.access.token", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean AuthTokenProviderReuseAccessToken { get; set; }

        /// <summary>
        /// Gets or Sets AuthTokenProviderRelaxedSsl
        /// </summary>
        [DataMember(Name="auth.token.provider.relaxed.ssl", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean AuthTokenProviderRelaxedSsl { get; set; }

        /// <summary>
        /// Gets or Sets TokenRequestCustomizerType
        /// </summary>
        [DataMember(Name="token.request.customizer.type", EmitDefaultValue=false)]
        public ConfigNodePropertyString TokenRequestCustomizerType { get; set; }

        /// <summary>
        /// Gets or Sets AuthTokenValidatorType
        /// </summary>
        [DataMember(Name="auth.token.validator.type", EmitDefaultValue=false)]
        public ConfigNodePropertyString AuthTokenValidatorType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeGraniteAuthOauthAccesstokenProviderProperties {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  AuthTokenProviderTitle: ").Append(AuthTokenProviderTitle).Append("\n");
            sb.Append("  AuthTokenProviderDefaultClaims: ").Append(AuthTokenProviderDefaultClaims).Append("\n");
            sb.Append("  AuthTokenProviderEndpoint: ").Append(AuthTokenProviderEndpoint).Append("\n");
            sb.Append("  AuthAccessTokenRequest: ").Append(AuthAccessTokenRequest).Append("\n");
            sb.Append("  AuthTokenProviderKeypairAlias: ").Append(AuthTokenProviderKeypairAlias).Append("\n");
            sb.Append("  AuthTokenProviderConnTimeout: ").Append(AuthTokenProviderConnTimeout).Append("\n");
            sb.Append("  AuthTokenProviderSoTimeout: ").Append(AuthTokenProviderSoTimeout).Append("\n");
            sb.Append("  AuthTokenProviderClientId: ").Append(AuthTokenProviderClientId).Append("\n");
            sb.Append("  AuthTokenProviderScope: ").Append(AuthTokenProviderScope).Append("\n");
            sb.Append("  AuthTokenProviderReuseAccessToken: ").Append(AuthTokenProviderReuseAccessToken).Append("\n");
            sb.Append("  AuthTokenProviderRelaxedSsl: ").Append(AuthTokenProviderRelaxedSsl).Append("\n");
            sb.Append("  TokenRequestCustomizerType: ").Append(TokenRequestCustomizerType).Append("\n");
            sb.Append("  AuthTokenValidatorType: ").Append(AuthTokenValidatorType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComAdobeGraniteAuthOauthAccesstokenProviderProperties);
        }

        /// <summary>
        /// Returns true if ComAdobeGraniteAuthOauthAccesstokenProviderProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComAdobeGraniteAuthOauthAccesstokenProviderProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeGraniteAuthOauthAccesstokenProviderProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.AuthTokenProviderTitle == input.AuthTokenProviderTitle ||
                    (this.AuthTokenProviderTitle != null &&
                    this.AuthTokenProviderTitle.Equals(input.AuthTokenProviderTitle))
                ) && 
                (
                    this.AuthTokenProviderDefaultClaims == input.AuthTokenProviderDefaultClaims ||
                    (this.AuthTokenProviderDefaultClaims != null &&
                    this.AuthTokenProviderDefaultClaims.Equals(input.AuthTokenProviderDefaultClaims))
                ) && 
                (
                    this.AuthTokenProviderEndpoint == input.AuthTokenProviderEndpoint ||
                    (this.AuthTokenProviderEndpoint != null &&
                    this.AuthTokenProviderEndpoint.Equals(input.AuthTokenProviderEndpoint))
                ) && 
                (
                    this.AuthAccessTokenRequest == input.AuthAccessTokenRequest ||
                    (this.AuthAccessTokenRequest != null &&
                    this.AuthAccessTokenRequest.Equals(input.AuthAccessTokenRequest))
                ) && 
                (
                    this.AuthTokenProviderKeypairAlias == input.AuthTokenProviderKeypairAlias ||
                    (this.AuthTokenProviderKeypairAlias != null &&
                    this.AuthTokenProviderKeypairAlias.Equals(input.AuthTokenProviderKeypairAlias))
                ) && 
                (
                    this.AuthTokenProviderConnTimeout == input.AuthTokenProviderConnTimeout ||
                    (this.AuthTokenProviderConnTimeout != null &&
                    this.AuthTokenProviderConnTimeout.Equals(input.AuthTokenProviderConnTimeout))
                ) && 
                (
                    this.AuthTokenProviderSoTimeout == input.AuthTokenProviderSoTimeout ||
                    (this.AuthTokenProviderSoTimeout != null &&
                    this.AuthTokenProviderSoTimeout.Equals(input.AuthTokenProviderSoTimeout))
                ) && 
                (
                    this.AuthTokenProviderClientId == input.AuthTokenProviderClientId ||
                    (this.AuthTokenProviderClientId != null &&
                    this.AuthTokenProviderClientId.Equals(input.AuthTokenProviderClientId))
                ) && 
                (
                    this.AuthTokenProviderScope == input.AuthTokenProviderScope ||
                    (this.AuthTokenProviderScope != null &&
                    this.AuthTokenProviderScope.Equals(input.AuthTokenProviderScope))
                ) && 
                (
                    this.AuthTokenProviderReuseAccessToken == input.AuthTokenProviderReuseAccessToken ||
                    (this.AuthTokenProviderReuseAccessToken != null &&
                    this.AuthTokenProviderReuseAccessToken.Equals(input.AuthTokenProviderReuseAccessToken))
                ) && 
                (
                    this.AuthTokenProviderRelaxedSsl == input.AuthTokenProviderRelaxedSsl ||
                    (this.AuthTokenProviderRelaxedSsl != null &&
                    this.AuthTokenProviderRelaxedSsl.Equals(input.AuthTokenProviderRelaxedSsl))
                ) && 
                (
                    this.TokenRequestCustomizerType == input.TokenRequestCustomizerType ||
                    (this.TokenRequestCustomizerType != null &&
                    this.TokenRequestCustomizerType.Equals(input.TokenRequestCustomizerType))
                ) && 
                (
                    this.AuthTokenValidatorType == input.AuthTokenValidatorType ||
                    (this.AuthTokenValidatorType != null &&
                    this.AuthTokenValidatorType.Equals(input.AuthTokenValidatorType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.AuthTokenProviderTitle != null)
                    hashCode = hashCode * 59 + this.AuthTokenProviderTitle.GetHashCode();
                if (this.AuthTokenProviderDefaultClaims != null)
                    hashCode = hashCode * 59 + this.AuthTokenProviderDefaultClaims.GetHashCode();
                if (this.AuthTokenProviderEndpoint != null)
                    hashCode = hashCode * 59 + this.AuthTokenProviderEndpoint.GetHashCode();
                if (this.AuthAccessTokenRequest != null)
                    hashCode = hashCode * 59 + this.AuthAccessTokenRequest.GetHashCode();
                if (this.AuthTokenProviderKeypairAlias != null)
                    hashCode = hashCode * 59 + this.AuthTokenProviderKeypairAlias.GetHashCode();
                if (this.AuthTokenProviderConnTimeout != null)
                    hashCode = hashCode * 59 + this.AuthTokenProviderConnTimeout.GetHashCode();
                if (this.AuthTokenProviderSoTimeout != null)
                    hashCode = hashCode * 59 + this.AuthTokenProviderSoTimeout.GetHashCode();
                if (this.AuthTokenProviderClientId != null)
                    hashCode = hashCode * 59 + this.AuthTokenProviderClientId.GetHashCode();
                if (this.AuthTokenProviderScope != null)
                    hashCode = hashCode * 59 + this.AuthTokenProviderScope.GetHashCode();
                if (this.AuthTokenProviderReuseAccessToken != null)
                    hashCode = hashCode * 59 + this.AuthTokenProviderReuseAccessToken.GetHashCode();
                if (this.AuthTokenProviderRelaxedSsl != null)
                    hashCode = hashCode * 59 + this.AuthTokenProviderRelaxedSsl.GetHashCode();
                if (this.TokenRequestCustomizerType != null)
                    hashCode = hashCode * 59 + this.TokenRequestCustomizerType.GetHashCode();
                if (this.AuthTokenValidatorType != null)
                    hashCode = hashCode * 59 + this.AuthTokenValidatorType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
