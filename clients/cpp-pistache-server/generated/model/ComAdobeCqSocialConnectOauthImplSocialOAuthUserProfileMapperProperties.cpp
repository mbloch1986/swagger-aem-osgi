/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties()
{
    m_FacebookIsSet = false;
    m_TwitterIsSet = false;
    m_Provider_config_user_folderIsSet = false;
    
}

ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::~ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties()
{
}

void ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_FacebookIsSet)
    {
        val["facebook"] = ModelBase::toJson(m_Facebook);
    }
    if(m_TwitterIsSet)
    {
        val["twitter"] = ModelBase::toJson(m_Twitter);
    }
    if(m_Provider_config_user_folderIsSet)
    {
        val["provider.config.user.folder"] = ModelBase::toJson(m_Provider_config_user_folder);
    }
    

    return val;
}

void ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::fromJson(nlohmann::json& val)
{
    if(val.find("facebook") != val.end())
    {
        if(!val["facebook"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["facebook"]);
            setFacebook( newItem );
        }
        
    }
    if(val.find("twitter") != val.end())
    {
        if(!val["twitter"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["twitter"]);
            setTwitter( newItem );
        }
        
    }
    if(val.find("provider.config.user.folder") != val.end())
    {
        if(!val["provider.config.user.folder"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["provider.config.user.folder"]);
            setProviderConfigUserFolder( newItem );
        }
        
    }
    
}


ConfigNodePropertyArray ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::getFacebook() const
{
    return m_Facebook;
}
void ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::setFacebook(ConfigNodePropertyArray const& value)
{
    m_Facebook = value;
    m_FacebookIsSet = true;
}
bool ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::facebookIsSet() const
{
    return m_FacebookIsSet;
}
void ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::unsetFacebook()
{
    m_FacebookIsSet = false;
}
ConfigNodePropertyArray ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::getTwitter() const
{
    return m_Twitter;
}
void ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::setTwitter(ConfigNodePropertyArray const& value)
{
    m_Twitter = value;
    m_TwitterIsSet = true;
}
bool ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::twitterIsSet() const
{
    return m_TwitterIsSet;
}
void ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::unsetTwitter()
{
    m_TwitterIsSet = false;
}
ConfigNodePropertyString ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::getProviderConfigUserFolder() const
{
    return m_Provider_config_user_folder;
}
void ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::setProviderConfigUserFolder(ConfigNodePropertyString const& value)
{
    m_Provider_config_user_folder = value;
    m_Provider_config_user_folderIsSet = true;
}
bool ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::providerConfigUserFolderIsSet() const
{
    return m_Provider_config_user_folderIsSet;
}
void ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::unsetProvider_config_user_folder()
{
    m_Provider_config_user_folderIsSet = false;
}

}
}
}
}

