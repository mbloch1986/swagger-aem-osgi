/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingSecurityImplReferrerFilterProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheSlingSecurityImplReferrerFilterProperties::OrgApacheSlingSecurityImplReferrerFilterProperties()
{
    m_Allow_emptyIsSet = false;
    m_Allow_hostsIsSet = false;
    m_Allow_hosts_regexpIsSet = false;
    m_Filter_methodsIsSet = false;
    m_Exclude_agents_regexpIsSet = false;
}

OrgApacheSlingSecurityImplReferrerFilterProperties::~OrgApacheSlingSecurityImplReferrerFilterProperties()
{
}

void OrgApacheSlingSecurityImplReferrerFilterProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheSlingSecurityImplReferrerFilterProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Allow_emptyIsSet)
    {
        val[utility::conversions::to_string_t("allow.empty")] = ModelBase::toJson(m_Allow_empty);
    }
    if(m_Allow_hostsIsSet)
    {
        val[utility::conversions::to_string_t("allow.hosts")] = ModelBase::toJson(m_Allow_hosts);
    }
    if(m_Allow_hosts_regexpIsSet)
    {
        val[utility::conversions::to_string_t("allow.hosts.regexp")] = ModelBase::toJson(m_Allow_hosts_regexp);
    }
    if(m_Filter_methodsIsSet)
    {
        val[utility::conversions::to_string_t("filter.methods")] = ModelBase::toJson(m_Filter_methods);
    }
    if(m_Exclude_agents_regexpIsSet)
    {
        val[utility::conversions::to_string_t("exclude.agents.regexp")] = ModelBase::toJson(m_Exclude_agents_regexp);
    }

    return val;
}

void OrgApacheSlingSecurityImplReferrerFilterProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("allow.empty")))
    {
        if(!val[utility::conversions::to_string_t("allow.empty")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("allow.empty")]);
            setAllowEmpty( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("allow.hosts")))
    {
        if(!val[utility::conversions::to_string_t("allow.hosts")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("allow.hosts")]);
            setAllowHosts( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("allow.hosts.regexp")))
    {
        if(!val[utility::conversions::to_string_t("allow.hosts.regexp")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("allow.hosts.regexp")]);
            setAllowHostsRegexp( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("filter.methods")))
    {
        if(!val[utility::conversions::to_string_t("filter.methods")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("filter.methods")]);
            setFilterMethods( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("exclude.agents.regexp")))
    {
        if(!val[utility::conversions::to_string_t("exclude.agents.regexp")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("exclude.agents.regexp")]);
            setExcludeAgentsRegexp( newItem );
        }
    }
}

void OrgApacheSlingSecurityImplReferrerFilterProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Allow_emptyIsSet)
    {
        if (m_Allow_empty.get())
        {
            m_Allow_empty->toMultipart(multipart, utility::conversions::to_string_t("allow.empty."));
        }
    }
    if(m_Allow_hostsIsSet)
    {
        if (m_Allow_hosts.get())
        {
            m_Allow_hosts->toMultipart(multipart, utility::conversions::to_string_t("allow.hosts."));
        }
    }
    if(m_Allow_hosts_regexpIsSet)
    {
        if (m_Allow_hosts_regexp.get())
        {
            m_Allow_hosts_regexp->toMultipart(multipart, utility::conversions::to_string_t("allow.hosts.regexp."));
        }
    }
    if(m_Filter_methodsIsSet)
    {
        if (m_Filter_methods.get())
        {
            m_Filter_methods->toMultipart(multipart, utility::conversions::to_string_t("filter.methods."));
        }
    }
    if(m_Exclude_agents_regexpIsSet)
    {
        if (m_Exclude_agents_regexp.get())
        {
            m_Exclude_agents_regexp->toMultipart(multipart, utility::conversions::to_string_t("exclude.agents.regexp."));
        }
    }
}

void OrgApacheSlingSecurityImplReferrerFilterProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("allow.empty")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("allow.empty")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("allow.empty."));
            setAllowEmpty( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("allow.hosts")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("allow.hosts")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("allow.hosts."));
            setAllowHosts( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("allow.hosts.regexp")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("allow.hosts.regexp")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("allow.hosts.regexp."));
            setAllowHostsRegexp( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("filter.methods")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("filter.methods")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("filter.methods."));
            setFilterMethods( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("exclude.agents.regexp")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("exclude.agents.regexp")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("exclude.agents.regexp."));
            setExcludeAgentsRegexp( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingSecurityImplReferrerFilterProperties::getAllowEmpty() const
{
    return m_Allow_empty;
}


void OrgApacheSlingSecurityImplReferrerFilterProperties::setAllowEmpty(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Allow_empty = value;
    m_Allow_emptyIsSet = true;
}
bool OrgApacheSlingSecurityImplReferrerFilterProperties::allowEmptyIsSet() const
{
    return m_Allow_emptyIsSet;
}

void OrgApacheSlingSecurityImplReferrerFilterProperties::unsetAllow_empty()
{
    m_Allow_emptyIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingSecurityImplReferrerFilterProperties::getAllowHosts() const
{
    return m_Allow_hosts;
}


void OrgApacheSlingSecurityImplReferrerFilterProperties::setAllowHosts(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Allow_hosts = value;
    m_Allow_hostsIsSet = true;
}
bool OrgApacheSlingSecurityImplReferrerFilterProperties::allowHostsIsSet() const
{
    return m_Allow_hostsIsSet;
}

void OrgApacheSlingSecurityImplReferrerFilterProperties::unsetAllow_hosts()
{
    m_Allow_hostsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingSecurityImplReferrerFilterProperties::getAllowHostsRegexp() const
{
    return m_Allow_hosts_regexp;
}


void OrgApacheSlingSecurityImplReferrerFilterProperties::setAllowHostsRegexp(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Allow_hosts_regexp = value;
    m_Allow_hosts_regexpIsSet = true;
}
bool OrgApacheSlingSecurityImplReferrerFilterProperties::allowHostsRegexpIsSet() const
{
    return m_Allow_hosts_regexpIsSet;
}

void OrgApacheSlingSecurityImplReferrerFilterProperties::unsetAllow_hosts_regexp()
{
    m_Allow_hosts_regexpIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingSecurityImplReferrerFilterProperties::getFilterMethods() const
{
    return m_Filter_methods;
}


void OrgApacheSlingSecurityImplReferrerFilterProperties::setFilterMethods(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Filter_methods = value;
    m_Filter_methodsIsSet = true;
}
bool OrgApacheSlingSecurityImplReferrerFilterProperties::filterMethodsIsSet() const
{
    return m_Filter_methodsIsSet;
}

void OrgApacheSlingSecurityImplReferrerFilterProperties::unsetFilter_methods()
{
    m_Filter_methodsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingSecurityImplReferrerFilterProperties::getExcludeAgentsRegexp() const
{
    return m_Exclude_agents_regexp;
}


void OrgApacheSlingSecurityImplReferrerFilterProperties::setExcludeAgentsRegexp(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Exclude_agents_regexp = value;
    m_Exclude_agents_regexpIsSet = true;
}
bool OrgApacheSlingSecurityImplReferrerFilterProperties::excludeAgentsRegexpIsSet() const
{
    return m_Exclude_agents_regexpIsSet;
}

void OrgApacheSlingSecurityImplReferrerFilterProperties::unsetExclude_agents_regexp()
{
    m_Exclude_agents_regexpIsSet = false;
}

}
}
}
}

