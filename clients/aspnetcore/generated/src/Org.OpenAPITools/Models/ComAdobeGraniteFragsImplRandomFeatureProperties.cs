/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ComAdobeGraniteFragsImplRandomFeatureProperties : IEquatable<ComAdobeGraniteFragsImplRandomFeatureProperties>
    { 
        /// <summary>
        /// Gets or Sets FeatureName
        /// </summary>
        [DataMember(Name="feature.name")]
        public ConfigNodePropertyString FeatureName { get; set; }

        /// <summary>
        /// Gets or Sets FeatureDescription
        /// </summary>
        [DataMember(Name="feature.description")]
        public ConfigNodePropertyString FeatureDescription { get; set; }

        /// <summary>
        /// Gets or Sets ActivePercentage
        /// </summary>
        [DataMember(Name="active.percentage")]
        public ConfigNodePropertyString ActivePercentage { get; set; }

        /// <summary>
        /// Gets or Sets CookieName
        /// </summary>
        [DataMember(Name="cookie.name")]
        public ConfigNodePropertyString CookieName { get; set; }

        /// <summary>
        /// Gets or Sets CookieMaxAge
        /// </summary>
        [DataMember(Name="cookie.maxAge")]
        public ConfigNodePropertyInteger CookieMaxAge { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeGraniteFragsImplRandomFeatureProperties {\n");
            sb.Append("  FeatureName: ").Append(FeatureName).Append("\n");
            sb.Append("  FeatureDescription: ").Append(FeatureDescription).Append("\n");
            sb.Append("  ActivePercentage: ").Append(ActivePercentage).Append("\n");
            sb.Append("  CookieName: ").Append(CookieName).Append("\n");
            sb.Append("  CookieMaxAge: ").Append(CookieMaxAge).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ComAdobeGraniteFragsImplRandomFeatureProperties)obj);
        }

        /// <summary>
        /// Returns true if ComAdobeGraniteFragsImplRandomFeatureProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of ComAdobeGraniteFragsImplRandomFeatureProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeGraniteFragsImplRandomFeatureProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    FeatureName == other.FeatureName ||
                    FeatureName != null &&
                    FeatureName.Equals(other.FeatureName)
                ) && 
                (
                    FeatureDescription == other.FeatureDescription ||
                    FeatureDescription != null &&
                    FeatureDescription.Equals(other.FeatureDescription)
                ) && 
                (
                    ActivePercentage == other.ActivePercentage ||
                    ActivePercentage != null &&
                    ActivePercentage.Equals(other.ActivePercentage)
                ) && 
                (
                    CookieName == other.CookieName ||
                    CookieName != null &&
                    CookieName.Equals(other.CookieName)
                ) && 
                (
                    CookieMaxAge == other.CookieMaxAge ||
                    CookieMaxAge != null &&
                    CookieMaxAge.Equals(other.CookieMaxAge)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (FeatureName != null)
                    hashCode = hashCode * 59 + FeatureName.GetHashCode();
                    if (FeatureDescription != null)
                    hashCode = hashCode * 59 + FeatureDescription.GetHashCode();
                    if (ActivePercentage != null)
                    hashCode = hashCode * 59 + ActivePercentage.GetHashCode();
                    if (CookieName != null)
                    hashCode = hashCode * 59 + CookieName.GetHashCode();
                    if (CookieMaxAge != null)
                    hashCode = hashCode * 59 + CookieMaxAge.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ComAdobeGraniteFragsImplRandomFeatureProperties left, ComAdobeGraniteFragsImplRandomFeatureProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ComAdobeGraniteFragsImplRandomFeatureProperties left, ComAdobeGraniteFragsImplRandomFeatureProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
