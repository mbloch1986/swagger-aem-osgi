/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqReportingImplCacheCacheImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqReportingImplCacheCacheImplProperties::ComDayCqReportingImplCacheCacheImplProperties()
{
    m_Repcache_enableIsSet = false;
    m_Repcache_ttlIsSet = false;
    m_Repcache_maxIsSet = false;
}

ComDayCqReportingImplCacheCacheImplProperties::~ComDayCqReportingImplCacheCacheImplProperties()
{
}

void ComDayCqReportingImplCacheCacheImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqReportingImplCacheCacheImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Repcache_enableIsSet)
    {
        val[utility::conversions::to_string_t("repcache.enable")] = ModelBase::toJson(m_Repcache_enable);
    }
    if(m_Repcache_ttlIsSet)
    {
        val[utility::conversions::to_string_t("repcache.ttl")] = ModelBase::toJson(m_Repcache_ttl);
    }
    if(m_Repcache_maxIsSet)
    {
        val[utility::conversions::to_string_t("repcache.max")] = ModelBase::toJson(m_Repcache_max);
    }

    return val;
}

void ComDayCqReportingImplCacheCacheImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("repcache.enable")))
    {
        if(!val[utility::conversions::to_string_t("repcache.enable")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("repcache.enable")]);
            setRepcacheEnable( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("repcache.ttl")))
    {
        if(!val[utility::conversions::to_string_t("repcache.ttl")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("repcache.ttl")]);
            setRepcacheTtl( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("repcache.max")))
    {
        if(!val[utility::conversions::to_string_t("repcache.max")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("repcache.max")]);
            setRepcacheMax( newItem );
        }
    }
}

void ComDayCqReportingImplCacheCacheImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Repcache_enableIsSet)
    {
        if (m_Repcache_enable.get())
        {
            m_Repcache_enable->toMultipart(multipart, utility::conversions::to_string_t("repcache.enable."));
        }
    }
    if(m_Repcache_ttlIsSet)
    {
        if (m_Repcache_ttl.get())
        {
            m_Repcache_ttl->toMultipart(multipart, utility::conversions::to_string_t("repcache.ttl."));
        }
    }
    if(m_Repcache_maxIsSet)
    {
        if (m_Repcache_max.get())
        {
            m_Repcache_max->toMultipart(multipart, utility::conversions::to_string_t("repcache.max."));
        }
    }
}

void ComDayCqReportingImplCacheCacheImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("repcache.enable")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("repcache.enable")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("repcache.enable."));
            setRepcacheEnable( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("repcache.ttl")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("repcache.ttl")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("repcache.ttl."));
            setRepcacheTtl( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("repcache.max")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("repcache.max")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("repcache.max."));
            setRepcacheMax( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqReportingImplCacheCacheImplProperties::getRepcacheEnable() const
{
    return m_Repcache_enable;
}


void ComDayCqReportingImplCacheCacheImplProperties::setRepcacheEnable(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Repcache_enable = value;
    m_Repcache_enableIsSet = true;
}
bool ComDayCqReportingImplCacheCacheImplProperties::repcacheEnableIsSet() const
{
    return m_Repcache_enableIsSet;
}

void ComDayCqReportingImplCacheCacheImplProperties::unsetRepcache_enable()
{
    m_Repcache_enableIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqReportingImplCacheCacheImplProperties::getRepcacheTtl() const
{
    return m_Repcache_ttl;
}


void ComDayCqReportingImplCacheCacheImplProperties::setRepcacheTtl(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Repcache_ttl = value;
    m_Repcache_ttlIsSet = true;
}
bool ComDayCqReportingImplCacheCacheImplProperties::repcacheTtlIsSet() const
{
    return m_Repcache_ttlIsSet;
}

void ComDayCqReportingImplCacheCacheImplProperties::unsetRepcache_ttl()
{
    m_Repcache_ttlIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqReportingImplCacheCacheImplProperties::getRepcacheMax() const
{
    return m_Repcache_max;
}


void ComDayCqReportingImplCacheCacheImplProperties::setRepcacheMax(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Repcache_max = value;
    m_Repcache_maxIsSet = true;
}
bool ComDayCqReportingImplCacheCacheImplProperties::repcacheMaxIsSet() const
{
    return m_Repcache_maxIsSet;
}

void ComDayCqReportingImplCacheCacheImplProperties::unsetRepcache_max()
{
    m_Repcache_maxIsSet = false;
}

}
}
}
}

