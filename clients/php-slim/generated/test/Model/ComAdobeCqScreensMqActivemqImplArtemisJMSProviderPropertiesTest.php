<?php
/**
 * ComAdobeCqScreensMqActivemqImplArtemisJMSProviderPropertiesTest
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the model.
 */
namespace OpenAPIServer\Model;

use OpenAPIServer\Model\ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties;

/**
 * ComAdobeCqScreensMqActivemqImplArtemisJMSProviderPropertiesTest Class Doc Comment
 *
 * @category Class
 * @description ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 * @coversDefaultClass \OpenAPIServer\Model\ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties
 */
class ComAdobeCqScreensMqActivemqImplArtemisJMSProviderPropertiesTest extends \PHPUnit_Framework_TestCase {

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass() {

    }

    /**
     * Setup before running each test case
     */
    public function setUp() {

    }

    /**
     * Clean up after running each test case
     */
    public function tearDown() {

    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass() {

    }

    /**
     * Test "ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties"
     */
    public function testComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties() {
        $testComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties = new ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties();
    }

    /**
     * Test attribute "serviceRanking"
     */
    public function testPropertyServiceRanking() {

    }

    /**
     * Test attribute "globalSize"
     */
    public function testPropertyGlobalSize() {

    }

    /**
     * Test attribute "maxDiskUsage"
     */
    public function testPropertyMaxDiskUsage() {

    }

    /**
     * Test attribute "persistenceEnabled"
     */
    public function testPropertyPersistenceEnabled() {

    }

    /**
     * Test attribute "threadPoolMaxSize"
     */
    public function testPropertyThreadPoolMaxSize() {

    }

    /**
     * Test attribute "scheduledThreadPoolMaxSize"
     */
    public function testPropertyScheduledThreadPoolMaxSize() {

    }

    /**
     * Test attribute "gracefulShutdownTimeout"
     */
    public function testPropertyGracefulShutdownTimeout() {

    }

    /**
     * Test attribute "queues"
     */
    public function testPropertyQueues() {

    }

    /**
     * Test attribute "topics"
     */
    public function testPropertyTopics() {

    }

    /**
     * Test attribute "addressesMaxDeliveryAttempts"
     */
    public function testPropertyAddressesMaxDeliveryAttempts() {

    }

    /**
     * Test attribute "addressesExpiryDelay"
     */
    public function testPropertyAddressesExpiryDelay() {

    }

    /**
     * Test attribute "addressesAddressFullMessagePolicy"
     */
    public function testPropertyAddressesAddressFullMessagePolicy() {

    }

    /**
     * Test attribute "addressesMaxSizeBytes"
     */
    public function testPropertyAddressesMaxSizeBytes() {

    }

    /**
     * Test attribute "addressesPageSizeBytes"
     */
    public function testPropertyAddressesPageSizeBytes() {

    }

    /**
     * Test attribute "addressesPageCacheMaxSize"
     */
    public function testPropertyAddressesPageCacheMaxSize() {

    }

    /**
     * Test attribute "clusterUser"
     */
    public function testPropertyClusterUser() {

    }

    /**
     * Test attribute "clusterPassword"
     */
    public function testPropertyClusterPassword() {

    }

    /**
     * Test attribute "clusterCallTimeout"
     */
    public function testPropertyClusterCallTimeout() {

    }

    /**
     * Test attribute "clusterCallFailoverTimeout"
     */
    public function testPropertyClusterCallFailoverTimeout() {

    }

    /**
     * Test attribute "clusterClientFailureCheckPeriod"
     */
    public function testPropertyClusterClientFailureCheckPeriod() {

    }

    /**
     * Test attribute "clusterNotificationAttempts"
     */
    public function testPropertyClusterNotificationAttempts() {

    }

    /**
     * Test attribute "clusterNotificationInterval"
     */
    public function testPropertyClusterNotificationInterval() {

    }

    /**
     * Test attribute "idCacheSize"
     */
    public function testPropertyIdCacheSize() {

    }

    /**
     * Test attribute "clusterConfirmationWindowSize"
     */
    public function testPropertyClusterConfirmationWindowSize() {

    }

    /**
     * Test attribute "clusterConnectionTtl"
     */
    public function testPropertyClusterConnectionTtl() {

    }

    /**
     * Test attribute "clusterDuplicateDetection"
     */
    public function testPropertyClusterDuplicateDetection() {

    }

    /**
     * Test attribute "clusterInitialConnectAttempts"
     */
    public function testPropertyClusterInitialConnectAttempts() {

    }

    /**
     * Test attribute "clusterMaxRetryInterval"
     */
    public function testPropertyClusterMaxRetryInterval() {

    }

    /**
     * Test attribute "clusterMinLargeMessageSize"
     */
    public function testPropertyClusterMinLargeMessageSize() {

    }

    /**
     * Test attribute "clusterProducerWindowSize"
     */
    public function testPropertyClusterProducerWindowSize() {

    }

    /**
     * Test attribute "clusterReconnectAttempts"
     */
    public function testPropertyClusterReconnectAttempts() {

    }

    /**
     * Test attribute "clusterRetryInterval"
     */
    public function testPropertyClusterRetryInterval() {

    }

    /**
     * Test attribute "clusterRetryIntervalMultiplier"
     */
    public function testPropertyClusterRetryIntervalMultiplier() {

    }
}

