/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties {
  #[serde(rename = "translate.language")]
  translate_language: Option<::models::ConfigNodePropertyDropDown>,
  #[serde(rename = "translate.display")]
  translate_display: Option<::models::ConfigNodePropertyDropDown>,
  #[serde(rename = "translate.attribution")]
  translate_attribution: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "translate.caching")]
  translate_caching: Option<::models::ConfigNodePropertyDropDown>,
  #[serde(rename = "translate.smart.rendering")]
  translate_smart_rendering: Option<::models::ConfigNodePropertyDropDown>,
  #[serde(rename = "translate.caching.duration")]
  translate_caching_duration: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "translate.session.save.interval")]
  translate_session_save_interval: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "translate.session.save.batchLimit")]
  translate_session_save_batch_limit: Option<::models::ConfigNodePropertyString>
}

impl ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties {
  pub fn new() -> ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties {
    ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties {
      translate_language: None,
      translate_display: None,
      translate_attribution: None,
      translate_caching: None,
      translate_smart_rendering: None,
      translate_caching_duration: None,
      translate_session_save_interval: None,
      translate_session_save_batch_limit: None
    }
  }

  pub fn set_translate_language(&mut self, translate_language: ::models::ConfigNodePropertyDropDown) {
    self.translate_language = Some(translate_language);
  }

  pub fn with_translate_language(mut self, translate_language: ::models::ConfigNodePropertyDropDown) -> ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties {
    self.translate_language = Some(translate_language);
    self
  }

  pub fn translate_language(&self) -> Option<&::models::ConfigNodePropertyDropDown> {
    self.translate_language.as_ref()
  }

  pub fn reset_translate_language(&mut self) {
    self.translate_language = None;
  }

  pub fn set_translate_display(&mut self, translate_display: ::models::ConfigNodePropertyDropDown) {
    self.translate_display = Some(translate_display);
  }

  pub fn with_translate_display(mut self, translate_display: ::models::ConfigNodePropertyDropDown) -> ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties {
    self.translate_display = Some(translate_display);
    self
  }

  pub fn translate_display(&self) -> Option<&::models::ConfigNodePropertyDropDown> {
    self.translate_display.as_ref()
  }

  pub fn reset_translate_display(&mut self) {
    self.translate_display = None;
  }

  pub fn set_translate_attribution(&mut self, translate_attribution: ::models::ConfigNodePropertyBoolean) {
    self.translate_attribution = Some(translate_attribution);
  }

  pub fn with_translate_attribution(mut self, translate_attribution: ::models::ConfigNodePropertyBoolean) -> ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties {
    self.translate_attribution = Some(translate_attribution);
    self
  }

  pub fn translate_attribution(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.translate_attribution.as_ref()
  }

  pub fn reset_translate_attribution(&mut self) {
    self.translate_attribution = None;
  }

  pub fn set_translate_caching(&mut self, translate_caching: ::models::ConfigNodePropertyDropDown) {
    self.translate_caching = Some(translate_caching);
  }

  pub fn with_translate_caching(mut self, translate_caching: ::models::ConfigNodePropertyDropDown) -> ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties {
    self.translate_caching = Some(translate_caching);
    self
  }

  pub fn translate_caching(&self) -> Option<&::models::ConfigNodePropertyDropDown> {
    self.translate_caching.as_ref()
  }

  pub fn reset_translate_caching(&mut self) {
    self.translate_caching = None;
  }

  pub fn set_translate_smart_rendering(&mut self, translate_smart_rendering: ::models::ConfigNodePropertyDropDown) {
    self.translate_smart_rendering = Some(translate_smart_rendering);
  }

  pub fn with_translate_smart_rendering(mut self, translate_smart_rendering: ::models::ConfigNodePropertyDropDown) -> ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties {
    self.translate_smart_rendering = Some(translate_smart_rendering);
    self
  }

  pub fn translate_smart_rendering(&self) -> Option<&::models::ConfigNodePropertyDropDown> {
    self.translate_smart_rendering.as_ref()
  }

  pub fn reset_translate_smart_rendering(&mut self) {
    self.translate_smart_rendering = None;
  }

  pub fn set_translate_caching_duration(&mut self, translate_caching_duration: ::models::ConfigNodePropertyString) {
    self.translate_caching_duration = Some(translate_caching_duration);
  }

  pub fn with_translate_caching_duration(mut self, translate_caching_duration: ::models::ConfigNodePropertyString) -> ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties {
    self.translate_caching_duration = Some(translate_caching_duration);
    self
  }

  pub fn translate_caching_duration(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.translate_caching_duration.as_ref()
  }

  pub fn reset_translate_caching_duration(&mut self) {
    self.translate_caching_duration = None;
  }

  pub fn set_translate_session_save_interval(&mut self, translate_session_save_interval: ::models::ConfigNodePropertyString) {
    self.translate_session_save_interval = Some(translate_session_save_interval);
  }

  pub fn with_translate_session_save_interval(mut self, translate_session_save_interval: ::models::ConfigNodePropertyString) -> ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties {
    self.translate_session_save_interval = Some(translate_session_save_interval);
    self
  }

  pub fn translate_session_save_interval(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.translate_session_save_interval.as_ref()
  }

  pub fn reset_translate_session_save_interval(&mut self) {
    self.translate_session_save_interval = None;
  }

  pub fn set_translate_session_save_batch_limit(&mut self, translate_session_save_batch_limit: ::models::ConfigNodePropertyString) {
    self.translate_session_save_batch_limit = Some(translate_session_save_batch_limit);
  }

  pub fn with_translate_session_save_batch_limit(mut self, translate_session_save_batch_limit: ::models::ConfigNodePropertyString) -> ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties {
    self.translate_session_save_batch_limit = Some(translate_session_save_batch_limit);
    self
  }

  pub fn translate_session_save_batch_limit(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.translate_session_save_batch_limit.as_ref()
  }

  pub fn reset_translate_session_save_batch_limit(&mut self) {
    self.translate_session_save_batch_limit = None;
  }

}



