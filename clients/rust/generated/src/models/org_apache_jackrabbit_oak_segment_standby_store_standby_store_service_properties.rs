/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties {
  #[serde(rename = "org.apache.sling.installer.configuration.persist")]
  org_apache_sling_installer_configuration_persist: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "mode")]
  mode: Option<::models::ConfigNodePropertyDropDown>,
  #[serde(rename = "port")]
  port: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "primary.host")]
  primary_host: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "interval")]
  interval: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "primary.allowed-client-ip-ranges")]
  primary_allowed_client_ip_ranges: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "secure")]
  secure: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "standby.readtimeout")]
  standby_readtimeout: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "standby.autoclean")]
  standby_autoclean: Option<::models::ConfigNodePropertyBoolean>
}

impl OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties {
  pub fn new() -> OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties {
    OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties {
      org_apache_sling_installer_configuration_persist: None,
      mode: None,
      port: None,
      primary_host: None,
      interval: None,
      primary_allowed_client_ip_ranges: None,
      secure: None,
      standby_readtimeout: None,
      standby_autoclean: None
    }
  }

  pub fn set_org_apache_sling_installer_configuration_persist(&mut self, org_apache_sling_installer_configuration_persist: ::models::ConfigNodePropertyBoolean) {
    self.org_apache_sling_installer_configuration_persist = Some(org_apache_sling_installer_configuration_persist);
  }

  pub fn with_org_apache_sling_installer_configuration_persist(mut self, org_apache_sling_installer_configuration_persist: ::models::ConfigNodePropertyBoolean) -> OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties {
    self.org_apache_sling_installer_configuration_persist = Some(org_apache_sling_installer_configuration_persist);
    self
  }

  pub fn org_apache_sling_installer_configuration_persist(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.org_apache_sling_installer_configuration_persist.as_ref()
  }

  pub fn reset_org_apache_sling_installer_configuration_persist(&mut self) {
    self.org_apache_sling_installer_configuration_persist = None;
  }

  pub fn set_mode(&mut self, mode: ::models::ConfigNodePropertyDropDown) {
    self.mode = Some(mode);
  }

  pub fn with_mode(mut self, mode: ::models::ConfigNodePropertyDropDown) -> OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties {
    self.mode = Some(mode);
    self
  }

  pub fn mode(&self) -> Option<&::models::ConfigNodePropertyDropDown> {
    self.mode.as_ref()
  }

  pub fn reset_mode(&mut self) {
    self.mode = None;
  }

  pub fn set_port(&mut self, port: ::models::ConfigNodePropertyInteger) {
    self.port = Some(port);
  }

  pub fn with_port(mut self, port: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties {
    self.port = Some(port);
    self
  }

  pub fn port(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.port.as_ref()
  }

  pub fn reset_port(&mut self) {
    self.port = None;
  }

  pub fn set_primary_host(&mut self, primary_host: ::models::ConfigNodePropertyString) {
    self.primary_host = Some(primary_host);
  }

  pub fn with_primary_host(mut self, primary_host: ::models::ConfigNodePropertyString) -> OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties {
    self.primary_host = Some(primary_host);
    self
  }

  pub fn primary_host(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.primary_host.as_ref()
  }

  pub fn reset_primary_host(&mut self) {
    self.primary_host = None;
  }

  pub fn set_interval(&mut self, interval: ::models::ConfigNodePropertyInteger) {
    self.interval = Some(interval);
  }

  pub fn with_interval(mut self, interval: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties {
    self.interval = Some(interval);
    self
  }

  pub fn interval(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.interval.as_ref()
  }

  pub fn reset_interval(&mut self) {
    self.interval = None;
  }

  pub fn set_primary_allowed_client_ip_ranges(&mut self, primary_allowed_client_ip_ranges: ::models::ConfigNodePropertyArray) {
    self.primary_allowed_client_ip_ranges = Some(primary_allowed_client_ip_ranges);
  }

  pub fn with_primary_allowed_client_ip_ranges(mut self, primary_allowed_client_ip_ranges: ::models::ConfigNodePropertyArray) -> OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties {
    self.primary_allowed_client_ip_ranges = Some(primary_allowed_client_ip_ranges);
    self
  }

  pub fn primary_allowed_client_ip_ranges(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.primary_allowed_client_ip_ranges.as_ref()
  }

  pub fn reset_primary_allowed_client_ip_ranges(&mut self) {
    self.primary_allowed_client_ip_ranges = None;
  }

  pub fn set_secure(&mut self, secure: ::models::ConfigNodePropertyBoolean) {
    self.secure = Some(secure);
  }

  pub fn with_secure(mut self, secure: ::models::ConfigNodePropertyBoolean) -> OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties {
    self.secure = Some(secure);
    self
  }

  pub fn secure(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.secure.as_ref()
  }

  pub fn reset_secure(&mut self) {
    self.secure = None;
  }

  pub fn set_standby_readtimeout(&mut self, standby_readtimeout: ::models::ConfigNodePropertyInteger) {
    self.standby_readtimeout = Some(standby_readtimeout);
  }

  pub fn with_standby_readtimeout(mut self, standby_readtimeout: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties {
    self.standby_readtimeout = Some(standby_readtimeout);
    self
  }

  pub fn standby_readtimeout(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.standby_readtimeout.as_ref()
  }

  pub fn reset_standby_readtimeout(&mut self) {
    self.standby_readtimeout = None;
  }

  pub fn set_standby_autoclean(&mut self, standby_autoclean: ::models::ConfigNodePropertyBoolean) {
    self.standby_autoclean = Some(standby_autoclean);
  }

  pub fn with_standby_autoclean(mut self, standby_autoclean: ::models::ConfigNodePropertyBoolean) -> OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties {
    self.standby_autoclean = Some(standby_autoclean);
    self
  }

  pub fn standby_autoclean(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.standby_autoclean.as_ref()
  }

  pub fn reset_standby_autoclean(&mut self) {
    self.standby_autoclean = None;
  }

}



