/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties
    /// </summary>
    [DataContract]
    public partial class ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties :  IEquatable<ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties" /> class.
        /// </summary>
        /// <param name="jdbcDriverClass">jdbcDriverClass.</param>
        /// <param name="jdbcConnectionUri">jdbcConnectionUri.</param>
        /// <param name="jdbcUsername">jdbcUsername.</param>
        /// <param name="jdbcPassword">jdbcPassword.</param>
        /// <param name="jdbcValidationQuery">jdbcValidationQuery.</param>
        /// <param name="defaultReadonly">defaultReadonly.</param>
        /// <param name="defaultAutocommit">defaultAutocommit.</param>
        /// <param name="poolSize">poolSize.</param>
        /// <param name="poolMaxWaitMsec">poolMaxWaitMsec.</param>
        /// <param name="datasourceName">datasourceName.</param>
        /// <param name="datasourceSvcProperties">datasourceSvcProperties.</param>
        public ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties(ConfigNodePropertyString jdbcDriverClass = default(ConfigNodePropertyString), ConfigNodePropertyString jdbcConnectionUri = default(ConfigNodePropertyString), ConfigNodePropertyString jdbcUsername = default(ConfigNodePropertyString), ConfigNodePropertyString jdbcPassword = default(ConfigNodePropertyString), ConfigNodePropertyString jdbcValidationQuery = default(ConfigNodePropertyString), ConfigNodePropertyBoolean defaultReadonly = default(ConfigNodePropertyBoolean), ConfigNodePropertyBoolean defaultAutocommit = default(ConfigNodePropertyBoolean), ConfigNodePropertyInteger poolSize = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger poolMaxWaitMsec = default(ConfigNodePropertyInteger), ConfigNodePropertyString datasourceName = default(ConfigNodePropertyString), ConfigNodePropertyArray datasourceSvcProperties = default(ConfigNodePropertyArray))
        {
            this.JdbcDriverClass = jdbcDriverClass;
            this.JdbcConnectionUri = jdbcConnectionUri;
            this.JdbcUsername = jdbcUsername;
            this.JdbcPassword = jdbcPassword;
            this.JdbcValidationQuery = jdbcValidationQuery;
            this.DefaultReadonly = defaultReadonly;
            this.DefaultAutocommit = defaultAutocommit;
            this.PoolSize = poolSize;
            this.PoolMaxWaitMsec = poolMaxWaitMsec;
            this.DatasourceName = datasourceName;
            this.DatasourceSvcProperties = datasourceSvcProperties;
        }
        
        /// <summary>
        /// Gets or Sets JdbcDriverClass
        /// </summary>
        [DataMember(Name="jdbc.driver.class", EmitDefaultValue=false)]
        public ConfigNodePropertyString JdbcDriverClass { get; set; }

        /// <summary>
        /// Gets or Sets JdbcConnectionUri
        /// </summary>
        [DataMember(Name="jdbc.connection.uri", EmitDefaultValue=false)]
        public ConfigNodePropertyString JdbcConnectionUri { get; set; }

        /// <summary>
        /// Gets or Sets JdbcUsername
        /// </summary>
        [DataMember(Name="jdbc.username", EmitDefaultValue=false)]
        public ConfigNodePropertyString JdbcUsername { get; set; }

        /// <summary>
        /// Gets or Sets JdbcPassword
        /// </summary>
        [DataMember(Name="jdbc.password", EmitDefaultValue=false)]
        public ConfigNodePropertyString JdbcPassword { get; set; }

        /// <summary>
        /// Gets or Sets JdbcValidationQuery
        /// </summary>
        [DataMember(Name="jdbc.validation.query", EmitDefaultValue=false)]
        public ConfigNodePropertyString JdbcValidationQuery { get; set; }

        /// <summary>
        /// Gets or Sets DefaultReadonly
        /// </summary>
        [DataMember(Name="default.readonly", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean DefaultReadonly { get; set; }

        /// <summary>
        /// Gets or Sets DefaultAutocommit
        /// </summary>
        [DataMember(Name="default.autocommit", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean DefaultAutocommit { get; set; }

        /// <summary>
        /// Gets or Sets PoolSize
        /// </summary>
        [DataMember(Name="pool.size", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger PoolSize { get; set; }

        /// <summary>
        /// Gets or Sets PoolMaxWaitMsec
        /// </summary>
        [DataMember(Name="pool.max.wait.msec", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger PoolMaxWaitMsec { get; set; }

        /// <summary>
        /// Gets or Sets DatasourceName
        /// </summary>
        [DataMember(Name="datasource.name", EmitDefaultValue=false)]
        public ConfigNodePropertyString DatasourceName { get; set; }

        /// <summary>
        /// Gets or Sets DatasourceSvcProperties
        /// </summary>
        [DataMember(Name="datasource.svc.properties", EmitDefaultValue=false)]
        public ConfigNodePropertyArray DatasourceSvcProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties {\n");
            sb.Append("  JdbcDriverClass: ").Append(JdbcDriverClass).Append("\n");
            sb.Append("  JdbcConnectionUri: ").Append(JdbcConnectionUri).Append("\n");
            sb.Append("  JdbcUsername: ").Append(JdbcUsername).Append("\n");
            sb.Append("  JdbcPassword: ").Append(JdbcPassword).Append("\n");
            sb.Append("  JdbcValidationQuery: ").Append(JdbcValidationQuery).Append("\n");
            sb.Append("  DefaultReadonly: ").Append(DefaultReadonly).Append("\n");
            sb.Append("  DefaultAutocommit: ").Append(DefaultAutocommit).Append("\n");
            sb.Append("  PoolSize: ").Append(PoolSize).Append("\n");
            sb.Append("  PoolMaxWaitMsec: ").Append(PoolMaxWaitMsec).Append("\n");
            sb.Append("  DatasourceName: ").Append(DatasourceName).Append("\n");
            sb.Append("  DatasourceSvcProperties: ").Append(DatasourceSvcProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties);
        }

        /// <summary>
        /// Returns true if ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.JdbcDriverClass == input.JdbcDriverClass ||
                    (this.JdbcDriverClass != null &&
                    this.JdbcDriverClass.Equals(input.JdbcDriverClass))
                ) && 
                (
                    this.JdbcConnectionUri == input.JdbcConnectionUri ||
                    (this.JdbcConnectionUri != null &&
                    this.JdbcConnectionUri.Equals(input.JdbcConnectionUri))
                ) && 
                (
                    this.JdbcUsername == input.JdbcUsername ||
                    (this.JdbcUsername != null &&
                    this.JdbcUsername.Equals(input.JdbcUsername))
                ) && 
                (
                    this.JdbcPassword == input.JdbcPassword ||
                    (this.JdbcPassword != null &&
                    this.JdbcPassword.Equals(input.JdbcPassword))
                ) && 
                (
                    this.JdbcValidationQuery == input.JdbcValidationQuery ||
                    (this.JdbcValidationQuery != null &&
                    this.JdbcValidationQuery.Equals(input.JdbcValidationQuery))
                ) && 
                (
                    this.DefaultReadonly == input.DefaultReadonly ||
                    (this.DefaultReadonly != null &&
                    this.DefaultReadonly.Equals(input.DefaultReadonly))
                ) && 
                (
                    this.DefaultAutocommit == input.DefaultAutocommit ||
                    (this.DefaultAutocommit != null &&
                    this.DefaultAutocommit.Equals(input.DefaultAutocommit))
                ) && 
                (
                    this.PoolSize == input.PoolSize ||
                    (this.PoolSize != null &&
                    this.PoolSize.Equals(input.PoolSize))
                ) && 
                (
                    this.PoolMaxWaitMsec == input.PoolMaxWaitMsec ||
                    (this.PoolMaxWaitMsec != null &&
                    this.PoolMaxWaitMsec.Equals(input.PoolMaxWaitMsec))
                ) && 
                (
                    this.DatasourceName == input.DatasourceName ||
                    (this.DatasourceName != null &&
                    this.DatasourceName.Equals(input.DatasourceName))
                ) && 
                (
                    this.DatasourceSvcProperties == input.DatasourceSvcProperties ||
                    (this.DatasourceSvcProperties != null &&
                    this.DatasourceSvcProperties.Equals(input.DatasourceSvcProperties))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.JdbcDriverClass != null)
                    hashCode = hashCode * 59 + this.JdbcDriverClass.GetHashCode();
                if (this.JdbcConnectionUri != null)
                    hashCode = hashCode * 59 + this.JdbcConnectionUri.GetHashCode();
                if (this.JdbcUsername != null)
                    hashCode = hashCode * 59 + this.JdbcUsername.GetHashCode();
                if (this.JdbcPassword != null)
                    hashCode = hashCode * 59 + this.JdbcPassword.GetHashCode();
                if (this.JdbcValidationQuery != null)
                    hashCode = hashCode * 59 + this.JdbcValidationQuery.GetHashCode();
                if (this.DefaultReadonly != null)
                    hashCode = hashCode * 59 + this.DefaultReadonly.GetHashCode();
                if (this.DefaultAutocommit != null)
                    hashCode = hashCode * 59 + this.DefaultAutocommit.GetHashCode();
                if (this.PoolSize != null)
                    hashCode = hashCode * 59 + this.PoolSize.GetHashCode();
                if (this.PoolMaxWaitMsec != null)
                    hashCode = hashCode * 59 + this.PoolMaxWaitMsec.GetHashCode();
                if (this.DatasourceName != null)
                    hashCode = hashCode * 59 + this.DatasourceName.GetHashCode();
                if (this.DatasourceSvcProperties != null)
                    hashCode = hashCode * 59 + this.DatasourceSvcProperties.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
