/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.h
 *
 * 
 */

#ifndef OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties_H_
#define OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties_H_


#include "ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyDropDown.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties
    : public ModelBase
{
public:
    OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties();
    virtual ~OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties members

    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getUsersPath() const;
    void setUsersPath(ConfigNodePropertyString const& value);
    bool usersPathIsSet() const;
    void unsetUsersPath();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getGroupsPath() const;
    void setGroupsPath(ConfigNodePropertyString const& value);
    bool groupsPathIsSet() const;
    void unsetGroupsPath();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getSystemRelativePath() const;
    void setSystemRelativePath(ConfigNodePropertyString const& value);
    bool systemRelativePathIsSet() const;
    void unsetSystemRelativePath();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getDefaultDepth() const;
    void setDefaultDepth(ConfigNodePropertyInteger const& value);
    bool defaultDepthIsSet() const;
    void unsetDefaultDepth();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyDropDown getImportBehavior() const;
    void setImportBehavior(ConfigNodePropertyDropDown const& value);
    bool importBehaviorIsSet() const;
    void unsetImportBehavior();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getPasswordHashAlgorithm() const;
    void setPasswordHashAlgorithm(ConfigNodePropertyString const& value);
    bool passwordHashAlgorithmIsSet() const;
    void unsetPasswordHashAlgorithm();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getPasswordHashIterations() const;
    void setPasswordHashIterations(ConfigNodePropertyInteger const& value);
    bool passwordHashIterationsIsSet() const;
    void unsetPasswordHashIterations();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getPasswordSaltSize() const;
    void setPasswordSaltSize(ConfigNodePropertyInteger const& value);
    bool passwordSaltSizeIsSet() const;
    void unsetPasswordSaltSize();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getOmitAdminPw() const;
    void setOmitAdminPw(ConfigNodePropertyBoolean const& value);
    bool omitAdminPwIsSet() const;
    void unsetOmitAdminPw();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getSupportAutoSave() const;
    void setSupportAutoSave(ConfigNodePropertyBoolean const& value);
    bool supportAutoSaveIsSet() const;
    void unsetSupportAutoSave();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getPasswordMaxAge() const;
    void setPasswordMaxAge(ConfigNodePropertyInteger const& value);
    bool passwordMaxAgeIsSet() const;
    void unsetPasswordMaxAge();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getInitialPasswordChange() const;
    void setInitialPasswordChange(ConfigNodePropertyBoolean const& value);
    bool initialPasswordChangeIsSet() const;
    void unsetInitialPasswordChange();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getPasswordHistorySize() const;
    void setPasswordHistorySize(ConfigNodePropertyInteger const& value);
    bool passwordHistorySizeIsSet() const;
    void unsetPasswordHistorySize();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getPasswordExpiryForAdmin() const;
    void setPasswordExpiryForAdmin(ConfigNodePropertyBoolean const& value);
    bool passwordExpiryForAdminIsSet() const;
    void unsetPasswordExpiryForAdmin();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getCacheExpiration() const;
    void setCacheExpiration(ConfigNodePropertyInteger const& value);
    bool cacheExpirationIsSet() const;
    void unsetCacheExpiration();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getEnableRFC7613UsercaseMappedProfile() const;
    void setEnableRFC7613UsercaseMappedProfile(ConfigNodePropertyBoolean const& value);
    bool enableRFC7613UsercaseMappedProfileIsSet() const;
    void unsetEnableRFC7613UsercaseMappedProfile();

protected:
    ConfigNodePropertyString m_UsersPath;
    bool m_UsersPathIsSet;
    ConfigNodePropertyString m_GroupsPath;
    bool m_GroupsPathIsSet;
    ConfigNodePropertyString m_SystemRelativePath;
    bool m_SystemRelativePathIsSet;
    ConfigNodePropertyInteger m_DefaultDepth;
    bool m_DefaultDepthIsSet;
    ConfigNodePropertyDropDown m_ImportBehavior;
    bool m_ImportBehaviorIsSet;
    ConfigNodePropertyString m_PasswordHashAlgorithm;
    bool m_PasswordHashAlgorithmIsSet;
    ConfigNodePropertyInteger m_PasswordHashIterations;
    bool m_PasswordHashIterationsIsSet;
    ConfigNodePropertyInteger m_PasswordSaltSize;
    bool m_PasswordSaltSizeIsSet;
    ConfigNodePropertyBoolean m_OmitAdminPw;
    bool m_OmitAdminPwIsSet;
    ConfigNodePropertyBoolean m_SupportAutoSave;
    bool m_SupportAutoSaveIsSet;
    ConfigNodePropertyInteger m_PasswordMaxAge;
    bool m_PasswordMaxAgeIsSet;
    ConfigNodePropertyBoolean m_InitialPasswordChange;
    bool m_InitialPasswordChangeIsSet;
    ConfigNodePropertyInteger m_PasswordHistorySize;
    bool m_PasswordHistorySizeIsSet;
    ConfigNodePropertyBoolean m_PasswordExpiryForAdmin;
    bool m_PasswordExpiryForAdminIsSet;
    ConfigNodePropertyInteger m_CacheExpiration;
    bool m_CacheExpirationIsSet;
    ConfigNodePropertyBoolean m_EnableRFC7613UsercaseMappedProfile;
    bool m_EnableRFC7613UsercaseMappedProfileIsSet;
};

}
}
}
}

#endif /* OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties_H_ */
