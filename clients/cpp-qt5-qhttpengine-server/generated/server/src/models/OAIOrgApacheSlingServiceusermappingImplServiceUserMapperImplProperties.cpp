/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties(QString json) {
    this->fromJson(json);
}

OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties() {
    this->init();
}

OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::~OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties() {
    
}

void
OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::init() {
    m_user_mapping_isSet = false;
    m_user_default_isSet = false;
    m_user_enable_default_mapping_isSet = false;
    m_require_validation_isSet = false;
}

void
OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(user_mapping, json[QString("user.mapping")]);
    
    ::OpenAPI::fromJsonValue(user_default, json[QString("user.default")]);
    
    ::OpenAPI::fromJsonValue(user_enable_default_mapping, json[QString("user.enable.default.mapping")]);
    
    ::OpenAPI::fromJsonValue(require_validation, json[QString("require.validation")]);
    
}

QString
OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::asJsonObject() const {
    QJsonObject obj;
	if(user_mapping.isSet()){
        obj.insert(QString("user.mapping"), ::OpenAPI::toJsonValue(user_mapping));
    }
	if(user_default.isSet()){
        obj.insert(QString("user.default"), ::OpenAPI::toJsonValue(user_default));
    }
	if(user_enable_default_mapping.isSet()){
        obj.insert(QString("user.enable.default.mapping"), ::OpenAPI::toJsonValue(user_enable_default_mapping));
    }
	if(require_validation.isSet()){
        obj.insert(QString("require.validation"), ::OpenAPI::toJsonValue(require_validation));
    }
    return obj;
}

OAIConfigNodePropertyArray
OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::getUserMapping() const {
    return user_mapping;
}
void
OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::setUserMapping(const OAIConfigNodePropertyArray &user_mapping) {
    this->user_mapping = user_mapping;
    this->m_user_mapping_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::getUserDefault() const {
    return user_default;
}
void
OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::setUserDefault(const OAIConfigNodePropertyString &user_default) {
    this->user_default = user_default;
    this->m_user_default_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::getUserEnableDefaultMapping() const {
    return user_enable_default_mapping;
}
void
OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::setUserEnableDefaultMapping(const OAIConfigNodePropertyBoolean &user_enable_default_mapping) {
    this->user_enable_default_mapping = user_enable_default_mapping;
    this->m_user_enable_default_mapping_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::getRequireValidation() const {
    return require_validation;
}
void
OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::setRequireValidation(const OAIConfigNodePropertyBoolean &require_validation) {
    this->require_validation = require_validation;
    this->m_require_validation_isSet = true;
}


bool
OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(user_mapping.isSet()){ isObjectUpdated = true; break;}
    
        if(user_default.isSet()){ isObjectUpdated = true; break;}
    
        if(user_enable_default_mapping.isSet()){ isObjectUpdated = true; break;}
    
        if(require_validation.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

