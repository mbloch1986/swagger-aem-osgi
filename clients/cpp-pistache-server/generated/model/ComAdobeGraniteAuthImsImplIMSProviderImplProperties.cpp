/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeGraniteAuthImsImplIMSProviderImplProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeGraniteAuthImsImplIMSProviderImplProperties::ComAdobeGraniteAuthImsImplIMSProviderImplProperties()
{
    m_Oauth_provider_idIsSet = false;
    m_Oauth_provider_ims_authorization_urlIsSet = false;
    m_Oauth_provider_ims_token_urlIsSet = false;
    m_Oauth_provider_ims_profile_urlIsSet = false;
    m_Oauth_provider_ims_extended_details_urlsIsSet = false;
    m_Oauth_provider_ims_validate_token_urlIsSet = false;
    m_Oauth_provider_ims_session_propertyIsSet = false;
    m_Oauth_provider_ims_service_token_client_idIsSet = false;
    m_Oauth_provider_ims_service_token_client_secretIsSet = false;
    m_Oauth_provider_ims_service_tokenIsSet = false;
    m_Ims_org_refIsSet = false;
    m_Ims_group_mappingIsSet = false;
    m_Oauth_provider_ims_only_license_groupIsSet = false;
    
}

ComAdobeGraniteAuthImsImplIMSProviderImplProperties::~ComAdobeGraniteAuthImsImplIMSProviderImplProperties()
{
}

void ComAdobeGraniteAuthImsImplIMSProviderImplProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeGraniteAuthImsImplIMSProviderImplProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Oauth_provider_idIsSet)
    {
        val["oauth.provider.id"] = ModelBase::toJson(m_Oauth_provider_id);
    }
    if(m_Oauth_provider_ims_authorization_urlIsSet)
    {
        val["oauth.provider.ims.authorization.url"] = ModelBase::toJson(m_Oauth_provider_ims_authorization_url);
    }
    if(m_Oauth_provider_ims_token_urlIsSet)
    {
        val["oauth.provider.ims.token.url"] = ModelBase::toJson(m_Oauth_provider_ims_token_url);
    }
    if(m_Oauth_provider_ims_profile_urlIsSet)
    {
        val["oauth.provider.ims.profile.url"] = ModelBase::toJson(m_Oauth_provider_ims_profile_url);
    }
    if(m_Oauth_provider_ims_extended_details_urlsIsSet)
    {
        val["oauth.provider.ims.extended.details.urls"] = ModelBase::toJson(m_Oauth_provider_ims_extended_details_urls);
    }
    if(m_Oauth_provider_ims_validate_token_urlIsSet)
    {
        val["oauth.provider.ims.validate.token.url"] = ModelBase::toJson(m_Oauth_provider_ims_validate_token_url);
    }
    if(m_Oauth_provider_ims_session_propertyIsSet)
    {
        val["oauth.provider.ims.session.property"] = ModelBase::toJson(m_Oauth_provider_ims_session_property);
    }
    if(m_Oauth_provider_ims_service_token_client_idIsSet)
    {
        val["oauth.provider.ims.service.token.client.id"] = ModelBase::toJson(m_Oauth_provider_ims_service_token_client_id);
    }
    if(m_Oauth_provider_ims_service_token_client_secretIsSet)
    {
        val["oauth.provider.ims.service.token.client.secret"] = ModelBase::toJson(m_Oauth_provider_ims_service_token_client_secret);
    }
    if(m_Oauth_provider_ims_service_tokenIsSet)
    {
        val["oauth.provider.ims.service.token"] = ModelBase::toJson(m_Oauth_provider_ims_service_token);
    }
    if(m_Ims_org_refIsSet)
    {
        val["ims.org.ref"] = ModelBase::toJson(m_Ims_org_ref);
    }
    if(m_Ims_group_mappingIsSet)
    {
        val["ims.group.mapping"] = ModelBase::toJson(m_Ims_group_mapping);
    }
    if(m_Oauth_provider_ims_only_license_groupIsSet)
    {
        val["oauth.provider.ims.only.license.group"] = ModelBase::toJson(m_Oauth_provider_ims_only_license_group);
    }
    

    return val;
}

void ComAdobeGraniteAuthImsImplIMSProviderImplProperties::fromJson(nlohmann::json& val)
{
    if(val.find("oauth.provider.id") != val.end())
    {
        if(!val["oauth.provider.id"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["oauth.provider.id"]);
            setOauthProviderId( newItem );
        }
        
    }
    if(val.find("oauth.provider.ims.authorization.url") != val.end())
    {
        if(!val["oauth.provider.ims.authorization.url"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["oauth.provider.ims.authorization.url"]);
            setOauthProviderImsAuthorizationUrl( newItem );
        }
        
    }
    if(val.find("oauth.provider.ims.token.url") != val.end())
    {
        if(!val["oauth.provider.ims.token.url"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["oauth.provider.ims.token.url"]);
            setOauthProviderImsTokenUrl( newItem );
        }
        
    }
    if(val.find("oauth.provider.ims.profile.url") != val.end())
    {
        if(!val["oauth.provider.ims.profile.url"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["oauth.provider.ims.profile.url"]);
            setOauthProviderImsProfileUrl( newItem );
        }
        
    }
    if(val.find("oauth.provider.ims.extended.details.urls") != val.end())
    {
        if(!val["oauth.provider.ims.extended.details.urls"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["oauth.provider.ims.extended.details.urls"]);
            setOauthProviderImsExtendedDetailsUrls( newItem );
        }
        
    }
    if(val.find("oauth.provider.ims.validate.token.url") != val.end())
    {
        if(!val["oauth.provider.ims.validate.token.url"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["oauth.provider.ims.validate.token.url"]);
            setOauthProviderImsValidateTokenUrl( newItem );
        }
        
    }
    if(val.find("oauth.provider.ims.session.property") != val.end())
    {
        if(!val["oauth.provider.ims.session.property"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["oauth.provider.ims.session.property"]);
            setOauthProviderImsSessionProperty( newItem );
        }
        
    }
    if(val.find("oauth.provider.ims.service.token.client.id") != val.end())
    {
        if(!val["oauth.provider.ims.service.token.client.id"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["oauth.provider.ims.service.token.client.id"]);
            setOauthProviderImsServiceTokenClientId( newItem );
        }
        
    }
    if(val.find("oauth.provider.ims.service.token.client.secret") != val.end())
    {
        if(!val["oauth.provider.ims.service.token.client.secret"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["oauth.provider.ims.service.token.client.secret"]);
            setOauthProviderImsServiceTokenClientSecret( newItem );
        }
        
    }
    if(val.find("oauth.provider.ims.service.token") != val.end())
    {
        if(!val["oauth.provider.ims.service.token"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["oauth.provider.ims.service.token"]);
            setOauthProviderImsServiceToken( newItem );
        }
        
    }
    if(val.find("ims.org.ref") != val.end())
    {
        if(!val["ims.org.ref"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["ims.org.ref"]);
            setImsOrgRef( newItem );
        }
        
    }
    if(val.find("ims.group.mapping") != val.end())
    {
        if(!val["ims.group.mapping"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["ims.group.mapping"]);
            setImsGroupMapping( newItem );
        }
        
    }
    if(val.find("oauth.provider.ims.only.license.group") != val.end())
    {
        if(!val["oauth.provider.ims.only.license.group"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["oauth.provider.ims.only.license.group"]);
            setOauthProviderImsOnlyLicenseGroup( newItem );
        }
        
    }
    
}


ConfigNodePropertyString ComAdobeGraniteAuthImsImplIMSProviderImplProperties::getOauthProviderId() const
{
    return m_Oauth_provider_id;
}
void ComAdobeGraniteAuthImsImplIMSProviderImplProperties::setOauthProviderId(ConfigNodePropertyString const& value)
{
    m_Oauth_provider_id = value;
    m_Oauth_provider_idIsSet = true;
}
bool ComAdobeGraniteAuthImsImplIMSProviderImplProperties::oauthProviderIdIsSet() const
{
    return m_Oauth_provider_idIsSet;
}
void ComAdobeGraniteAuthImsImplIMSProviderImplProperties::unsetOauth_provider_id()
{
    m_Oauth_provider_idIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteAuthImsImplIMSProviderImplProperties::getOauthProviderImsAuthorizationUrl() const
{
    return m_Oauth_provider_ims_authorization_url;
}
void ComAdobeGraniteAuthImsImplIMSProviderImplProperties::setOauthProviderImsAuthorizationUrl(ConfigNodePropertyString const& value)
{
    m_Oauth_provider_ims_authorization_url = value;
    m_Oauth_provider_ims_authorization_urlIsSet = true;
}
bool ComAdobeGraniteAuthImsImplIMSProviderImplProperties::oauthProviderImsAuthorizationUrlIsSet() const
{
    return m_Oauth_provider_ims_authorization_urlIsSet;
}
void ComAdobeGraniteAuthImsImplIMSProviderImplProperties::unsetOauth_provider_ims_authorization_url()
{
    m_Oauth_provider_ims_authorization_urlIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteAuthImsImplIMSProviderImplProperties::getOauthProviderImsTokenUrl() const
{
    return m_Oauth_provider_ims_token_url;
}
void ComAdobeGraniteAuthImsImplIMSProviderImplProperties::setOauthProviderImsTokenUrl(ConfigNodePropertyString const& value)
{
    m_Oauth_provider_ims_token_url = value;
    m_Oauth_provider_ims_token_urlIsSet = true;
}
bool ComAdobeGraniteAuthImsImplIMSProviderImplProperties::oauthProviderImsTokenUrlIsSet() const
{
    return m_Oauth_provider_ims_token_urlIsSet;
}
void ComAdobeGraniteAuthImsImplIMSProviderImplProperties::unsetOauth_provider_ims_token_url()
{
    m_Oauth_provider_ims_token_urlIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteAuthImsImplIMSProviderImplProperties::getOauthProviderImsProfileUrl() const
{
    return m_Oauth_provider_ims_profile_url;
}
void ComAdobeGraniteAuthImsImplIMSProviderImplProperties::setOauthProviderImsProfileUrl(ConfigNodePropertyString const& value)
{
    m_Oauth_provider_ims_profile_url = value;
    m_Oauth_provider_ims_profile_urlIsSet = true;
}
bool ComAdobeGraniteAuthImsImplIMSProviderImplProperties::oauthProviderImsProfileUrlIsSet() const
{
    return m_Oauth_provider_ims_profile_urlIsSet;
}
void ComAdobeGraniteAuthImsImplIMSProviderImplProperties::unsetOauth_provider_ims_profile_url()
{
    m_Oauth_provider_ims_profile_urlIsSet = false;
}
ConfigNodePropertyArray ComAdobeGraniteAuthImsImplIMSProviderImplProperties::getOauthProviderImsExtendedDetailsUrls() const
{
    return m_Oauth_provider_ims_extended_details_urls;
}
void ComAdobeGraniteAuthImsImplIMSProviderImplProperties::setOauthProviderImsExtendedDetailsUrls(ConfigNodePropertyArray const& value)
{
    m_Oauth_provider_ims_extended_details_urls = value;
    m_Oauth_provider_ims_extended_details_urlsIsSet = true;
}
bool ComAdobeGraniteAuthImsImplIMSProviderImplProperties::oauthProviderImsExtendedDetailsUrlsIsSet() const
{
    return m_Oauth_provider_ims_extended_details_urlsIsSet;
}
void ComAdobeGraniteAuthImsImplIMSProviderImplProperties::unsetOauth_provider_ims_extended_details_urls()
{
    m_Oauth_provider_ims_extended_details_urlsIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteAuthImsImplIMSProviderImplProperties::getOauthProviderImsValidateTokenUrl() const
{
    return m_Oauth_provider_ims_validate_token_url;
}
void ComAdobeGraniteAuthImsImplIMSProviderImplProperties::setOauthProviderImsValidateTokenUrl(ConfigNodePropertyString const& value)
{
    m_Oauth_provider_ims_validate_token_url = value;
    m_Oauth_provider_ims_validate_token_urlIsSet = true;
}
bool ComAdobeGraniteAuthImsImplIMSProviderImplProperties::oauthProviderImsValidateTokenUrlIsSet() const
{
    return m_Oauth_provider_ims_validate_token_urlIsSet;
}
void ComAdobeGraniteAuthImsImplIMSProviderImplProperties::unsetOauth_provider_ims_validate_token_url()
{
    m_Oauth_provider_ims_validate_token_urlIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteAuthImsImplIMSProviderImplProperties::getOauthProviderImsSessionProperty() const
{
    return m_Oauth_provider_ims_session_property;
}
void ComAdobeGraniteAuthImsImplIMSProviderImplProperties::setOauthProviderImsSessionProperty(ConfigNodePropertyString const& value)
{
    m_Oauth_provider_ims_session_property = value;
    m_Oauth_provider_ims_session_propertyIsSet = true;
}
bool ComAdobeGraniteAuthImsImplIMSProviderImplProperties::oauthProviderImsSessionPropertyIsSet() const
{
    return m_Oauth_provider_ims_session_propertyIsSet;
}
void ComAdobeGraniteAuthImsImplIMSProviderImplProperties::unsetOauth_provider_ims_session_property()
{
    m_Oauth_provider_ims_session_propertyIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteAuthImsImplIMSProviderImplProperties::getOauthProviderImsServiceTokenClientId() const
{
    return m_Oauth_provider_ims_service_token_client_id;
}
void ComAdobeGraniteAuthImsImplIMSProviderImplProperties::setOauthProviderImsServiceTokenClientId(ConfigNodePropertyString const& value)
{
    m_Oauth_provider_ims_service_token_client_id = value;
    m_Oauth_provider_ims_service_token_client_idIsSet = true;
}
bool ComAdobeGraniteAuthImsImplIMSProviderImplProperties::oauthProviderImsServiceTokenClientIdIsSet() const
{
    return m_Oauth_provider_ims_service_token_client_idIsSet;
}
void ComAdobeGraniteAuthImsImplIMSProviderImplProperties::unsetOauth_provider_ims_service_token_client_id()
{
    m_Oauth_provider_ims_service_token_client_idIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteAuthImsImplIMSProviderImplProperties::getOauthProviderImsServiceTokenClientSecret() const
{
    return m_Oauth_provider_ims_service_token_client_secret;
}
void ComAdobeGraniteAuthImsImplIMSProviderImplProperties::setOauthProviderImsServiceTokenClientSecret(ConfigNodePropertyString const& value)
{
    m_Oauth_provider_ims_service_token_client_secret = value;
    m_Oauth_provider_ims_service_token_client_secretIsSet = true;
}
bool ComAdobeGraniteAuthImsImplIMSProviderImplProperties::oauthProviderImsServiceTokenClientSecretIsSet() const
{
    return m_Oauth_provider_ims_service_token_client_secretIsSet;
}
void ComAdobeGraniteAuthImsImplIMSProviderImplProperties::unsetOauth_provider_ims_service_token_client_secret()
{
    m_Oauth_provider_ims_service_token_client_secretIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteAuthImsImplIMSProviderImplProperties::getOauthProviderImsServiceToken() const
{
    return m_Oauth_provider_ims_service_token;
}
void ComAdobeGraniteAuthImsImplIMSProviderImplProperties::setOauthProviderImsServiceToken(ConfigNodePropertyString const& value)
{
    m_Oauth_provider_ims_service_token = value;
    m_Oauth_provider_ims_service_tokenIsSet = true;
}
bool ComAdobeGraniteAuthImsImplIMSProviderImplProperties::oauthProviderImsServiceTokenIsSet() const
{
    return m_Oauth_provider_ims_service_tokenIsSet;
}
void ComAdobeGraniteAuthImsImplIMSProviderImplProperties::unsetOauth_provider_ims_service_token()
{
    m_Oauth_provider_ims_service_tokenIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteAuthImsImplIMSProviderImplProperties::getImsOrgRef() const
{
    return m_Ims_org_ref;
}
void ComAdobeGraniteAuthImsImplIMSProviderImplProperties::setImsOrgRef(ConfigNodePropertyString const& value)
{
    m_Ims_org_ref = value;
    m_Ims_org_refIsSet = true;
}
bool ComAdobeGraniteAuthImsImplIMSProviderImplProperties::imsOrgRefIsSet() const
{
    return m_Ims_org_refIsSet;
}
void ComAdobeGraniteAuthImsImplIMSProviderImplProperties::unsetIms_org_ref()
{
    m_Ims_org_refIsSet = false;
}
ConfigNodePropertyArray ComAdobeGraniteAuthImsImplIMSProviderImplProperties::getImsGroupMapping() const
{
    return m_Ims_group_mapping;
}
void ComAdobeGraniteAuthImsImplIMSProviderImplProperties::setImsGroupMapping(ConfigNodePropertyArray const& value)
{
    m_Ims_group_mapping = value;
    m_Ims_group_mappingIsSet = true;
}
bool ComAdobeGraniteAuthImsImplIMSProviderImplProperties::imsGroupMappingIsSet() const
{
    return m_Ims_group_mappingIsSet;
}
void ComAdobeGraniteAuthImsImplIMSProviderImplProperties::unsetIms_group_mapping()
{
    m_Ims_group_mappingIsSet = false;
}
ConfigNodePropertyBoolean ComAdobeGraniteAuthImsImplIMSProviderImplProperties::getOauthProviderImsOnlyLicenseGroup() const
{
    return m_Oauth_provider_ims_only_license_group;
}
void ComAdobeGraniteAuthImsImplIMSProviderImplProperties::setOauthProviderImsOnlyLicenseGroup(ConfigNodePropertyBoolean const& value)
{
    m_Oauth_provider_ims_only_license_group = value;
    m_Oauth_provider_ims_only_license_groupIsSet = true;
}
bool ComAdobeGraniteAuthImsImplIMSProviderImplProperties::oauthProviderImsOnlyLicenseGroupIsSet() const
{
    return m_Oauth_provider_ims_only_license_groupIsSet;
}
void ComAdobeGraniteAuthImsImplIMSProviderImplProperties::unsetOauth_provider_ims_only_license_group()
{
    m_Oauth_provider_ims_only_license_groupIsSet = false;
}

}
}
}
}

