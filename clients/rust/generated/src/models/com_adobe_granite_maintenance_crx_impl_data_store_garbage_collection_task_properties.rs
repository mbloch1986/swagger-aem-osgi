/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskProperties {
  #[serde(rename = "granite.maintenance.mandatory")]
  granite_maintenance_mandatory: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "job.topics")]
  job_topics: Option<::models::ConfigNodePropertyString>
}

impl ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskProperties {
  pub fn new() -> ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskProperties {
    ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskProperties {
      granite_maintenance_mandatory: None,
      job_topics: None
    }
  }

  pub fn set_granite_maintenance_mandatory(&mut self, granite_maintenance_mandatory: ::models::ConfigNodePropertyBoolean) {
    self.granite_maintenance_mandatory = Some(granite_maintenance_mandatory);
  }

  pub fn with_granite_maintenance_mandatory(mut self, granite_maintenance_mandatory: ::models::ConfigNodePropertyBoolean) -> ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskProperties {
    self.granite_maintenance_mandatory = Some(granite_maintenance_mandatory);
    self
  }

  pub fn granite_maintenance_mandatory(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.granite_maintenance_mandatory.as_ref()
  }

  pub fn reset_granite_maintenance_mandatory(&mut self) {
    self.granite_maintenance_mandatory = None;
  }

  pub fn set_job_topics(&mut self, job_topics: ::models::ConfigNodePropertyString) {
    self.job_topics = Some(job_topics);
  }

  pub fn with_job_topics(mut self, job_topics: ::models::ConfigNodePropertyString) -> ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskProperties {
    self.job_topics = Some(job_topics);
    self
  }

  pub fn job_topics(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.job_topics.as_ref()
  }

  pub fn reset_job_topics(&mut self) {
    self.job_topics = None;
  }

}



