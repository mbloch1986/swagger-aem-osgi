/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties {
  #[serde(rename = "group.listing.pagination.enable")]
  group_listing_pagination_enable: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "group.listing.lazyloading.enable")]
  group_listing_lazyloading_enable: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "page.size")]
  page_size: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "priority")]
  priority: Option<::models::ConfigNodePropertyInteger>
}

impl ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties {
  pub fn new() -> ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties {
    ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties {
      group_listing_pagination_enable: None,
      group_listing_lazyloading_enable: None,
      page_size: None,
      priority: None
    }
  }

  pub fn set_group_listing_pagination_enable(&mut self, group_listing_pagination_enable: ::models::ConfigNodePropertyBoolean) {
    self.group_listing_pagination_enable = Some(group_listing_pagination_enable);
  }

  pub fn with_group_listing_pagination_enable(mut self, group_listing_pagination_enable: ::models::ConfigNodePropertyBoolean) -> ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties {
    self.group_listing_pagination_enable = Some(group_listing_pagination_enable);
    self
  }

  pub fn group_listing_pagination_enable(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.group_listing_pagination_enable.as_ref()
  }

  pub fn reset_group_listing_pagination_enable(&mut self) {
    self.group_listing_pagination_enable = None;
  }

  pub fn set_group_listing_lazyloading_enable(&mut self, group_listing_lazyloading_enable: ::models::ConfigNodePropertyBoolean) {
    self.group_listing_lazyloading_enable = Some(group_listing_lazyloading_enable);
  }

  pub fn with_group_listing_lazyloading_enable(mut self, group_listing_lazyloading_enable: ::models::ConfigNodePropertyBoolean) -> ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties {
    self.group_listing_lazyloading_enable = Some(group_listing_lazyloading_enable);
    self
  }

  pub fn group_listing_lazyloading_enable(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.group_listing_lazyloading_enable.as_ref()
  }

  pub fn reset_group_listing_lazyloading_enable(&mut self) {
    self.group_listing_lazyloading_enable = None;
  }

  pub fn set_page_size(&mut self, page_size: ::models::ConfigNodePropertyInteger) {
    self.page_size = Some(page_size);
  }

  pub fn with_page_size(mut self, page_size: ::models::ConfigNodePropertyInteger) -> ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties {
    self.page_size = Some(page_size);
    self
  }

  pub fn page_size(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.page_size.as_ref()
  }

  pub fn reset_page_size(&mut self) {
    self.page_size = None;
  }

  pub fn set_priority(&mut self, priority: ::models::ConfigNodePropertyInteger) {
    self.priority = Some(priority);
  }

  pub fn with_priority(mut self, priority: ::models::ConfigNodePropertyInteger) -> ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties {
    self.priority = Some(priority);
    self
  }

  pub fn priority(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.priority.as_ref()
  }

  pub fn reset_priority(&mut self) {
    self.priority = None;
  }

}



