/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties::OAIComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties::OAIComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties() {
    this->init();
}

OAIComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties::~OAIComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties() {
    
}

void
OAIComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties::init() {
    m_adapter_condition_isSet = false;
    m_taskmanager_admingroups_isSet = false;
}

void
OAIComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(adapter_condition, json[QString("adapter.condition")]);
    
    ::OpenAPI::fromJsonValue(taskmanager_admingroups, json[QString("taskmanager.admingroups")]);
    
}

QString
OAIComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties::asJsonObject() const {
    QJsonObject obj;
	if(adapter_condition.isSet()){
        obj.insert(QString("adapter.condition"), ::OpenAPI::toJsonValue(adapter_condition));
    }
	if(taskmanager_admingroups.isSet()){
        obj.insert(QString("taskmanager.admingroups"), ::OpenAPI::toJsonValue(taskmanager_admingroups));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties::getAdapterCondition() const {
    return adapter_condition;
}
void
OAIComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties::setAdapterCondition(const OAIConfigNodePropertyString &adapter_condition) {
    this->adapter_condition = adapter_condition;
    this->m_adapter_condition_isSet = true;
}

OAIConfigNodePropertyArray
OAIComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties::getTaskmanagerAdmingroups() const {
    return taskmanager_admingroups;
}
void
OAIComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties::setTaskmanagerAdmingroups(const OAIConfigNodePropertyArray &taskmanager_admingroups) {
    this->taskmanager_admingroups = taskmanager_admingroups;
    this->m_taskmanager_admingroups_isSet = true;
}


bool
OAIComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(adapter_condition.isSet()){ isObjectUpdated = true; break;}
    
        if(taskmanager_admingroups.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

