<?php
/**
 * OrgApacheSlingServletsPostImplSlingPostServletProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OrgApacheSlingServletsPostImplSlingPostServletProperties Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrgApacheSlingServletsPostImplSlingPostServletProperties implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'orgApacheSlingServletsPostImplSlingPostServletProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'servlet_post_date_formats' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'servlet_post_node_name_hints' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'servlet_post_node_name_max_length' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'servlet_post_checkin_new_versionable_nodes' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'servlet_post_auto_checkout' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'servlet_post_auto_checkin' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'servlet_post_ignore_pattern' => '\OpenAPI\Client\Model\ConfigNodePropertyString'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'servlet_post_date_formats' => null,
        'servlet_post_node_name_hints' => null,
        'servlet_post_node_name_max_length' => null,
        'servlet_post_checkin_new_versionable_nodes' => null,
        'servlet_post_auto_checkout' => null,
        'servlet_post_auto_checkin' => null,
        'servlet_post_ignore_pattern' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'servlet_post_date_formats' => 'servlet.post.dateFormats',
        'servlet_post_node_name_hints' => 'servlet.post.nodeNameHints',
        'servlet_post_node_name_max_length' => 'servlet.post.nodeNameMaxLength',
        'servlet_post_checkin_new_versionable_nodes' => 'servlet.post.checkinNewVersionableNodes',
        'servlet_post_auto_checkout' => 'servlet.post.autoCheckout',
        'servlet_post_auto_checkin' => 'servlet.post.autoCheckin',
        'servlet_post_ignore_pattern' => 'servlet.post.ignorePattern'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'servlet_post_date_formats' => 'setServletPostDateFormats',
        'servlet_post_node_name_hints' => 'setServletPostNodeNameHints',
        'servlet_post_node_name_max_length' => 'setServletPostNodeNameMaxLength',
        'servlet_post_checkin_new_versionable_nodes' => 'setServletPostCheckinNewVersionableNodes',
        'servlet_post_auto_checkout' => 'setServletPostAutoCheckout',
        'servlet_post_auto_checkin' => 'setServletPostAutoCheckin',
        'servlet_post_ignore_pattern' => 'setServletPostIgnorePattern'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'servlet_post_date_formats' => 'getServletPostDateFormats',
        'servlet_post_node_name_hints' => 'getServletPostNodeNameHints',
        'servlet_post_node_name_max_length' => 'getServletPostNodeNameMaxLength',
        'servlet_post_checkin_new_versionable_nodes' => 'getServletPostCheckinNewVersionableNodes',
        'servlet_post_auto_checkout' => 'getServletPostAutoCheckout',
        'servlet_post_auto_checkin' => 'getServletPostAutoCheckin',
        'servlet_post_ignore_pattern' => 'getServletPostIgnorePattern'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['servlet_post_date_formats'] = isset($data['servlet_post_date_formats']) ? $data['servlet_post_date_formats'] : null;
        $this->container['servlet_post_node_name_hints'] = isset($data['servlet_post_node_name_hints']) ? $data['servlet_post_node_name_hints'] : null;
        $this->container['servlet_post_node_name_max_length'] = isset($data['servlet_post_node_name_max_length']) ? $data['servlet_post_node_name_max_length'] : null;
        $this->container['servlet_post_checkin_new_versionable_nodes'] = isset($data['servlet_post_checkin_new_versionable_nodes']) ? $data['servlet_post_checkin_new_versionable_nodes'] : null;
        $this->container['servlet_post_auto_checkout'] = isset($data['servlet_post_auto_checkout']) ? $data['servlet_post_auto_checkout'] : null;
        $this->container['servlet_post_auto_checkin'] = isset($data['servlet_post_auto_checkin']) ? $data['servlet_post_auto_checkin'] : null;
        $this->container['servlet_post_ignore_pattern'] = isset($data['servlet_post_ignore_pattern']) ? $data['servlet_post_ignore_pattern'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets servlet_post_date_formats
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getServletPostDateFormats()
    {
        return $this->container['servlet_post_date_formats'];
    }

    /**
     * Sets servlet_post_date_formats
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $servlet_post_date_formats servlet_post_date_formats
     *
     * @return $this
     */
    public function setServletPostDateFormats($servlet_post_date_formats)
    {
        $this->container['servlet_post_date_formats'] = $servlet_post_date_formats;

        return $this;
    }

    /**
     * Gets servlet_post_node_name_hints
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getServletPostNodeNameHints()
    {
        return $this->container['servlet_post_node_name_hints'];
    }

    /**
     * Sets servlet_post_node_name_hints
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $servlet_post_node_name_hints servlet_post_node_name_hints
     *
     * @return $this
     */
    public function setServletPostNodeNameHints($servlet_post_node_name_hints)
    {
        $this->container['servlet_post_node_name_hints'] = $servlet_post_node_name_hints;

        return $this;
    }

    /**
     * Gets servlet_post_node_name_max_length
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getServletPostNodeNameMaxLength()
    {
        return $this->container['servlet_post_node_name_max_length'];
    }

    /**
     * Sets servlet_post_node_name_max_length
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $servlet_post_node_name_max_length servlet_post_node_name_max_length
     *
     * @return $this
     */
    public function setServletPostNodeNameMaxLength($servlet_post_node_name_max_length)
    {
        $this->container['servlet_post_node_name_max_length'] = $servlet_post_node_name_max_length;

        return $this;
    }

    /**
     * Gets servlet_post_checkin_new_versionable_nodes
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getServletPostCheckinNewVersionableNodes()
    {
        return $this->container['servlet_post_checkin_new_versionable_nodes'];
    }

    /**
     * Sets servlet_post_checkin_new_versionable_nodes
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $servlet_post_checkin_new_versionable_nodes servlet_post_checkin_new_versionable_nodes
     *
     * @return $this
     */
    public function setServletPostCheckinNewVersionableNodes($servlet_post_checkin_new_versionable_nodes)
    {
        $this->container['servlet_post_checkin_new_versionable_nodes'] = $servlet_post_checkin_new_versionable_nodes;

        return $this;
    }

    /**
     * Gets servlet_post_auto_checkout
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getServletPostAutoCheckout()
    {
        return $this->container['servlet_post_auto_checkout'];
    }

    /**
     * Sets servlet_post_auto_checkout
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $servlet_post_auto_checkout servlet_post_auto_checkout
     *
     * @return $this
     */
    public function setServletPostAutoCheckout($servlet_post_auto_checkout)
    {
        $this->container['servlet_post_auto_checkout'] = $servlet_post_auto_checkout;

        return $this;
    }

    /**
     * Gets servlet_post_auto_checkin
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getServletPostAutoCheckin()
    {
        return $this->container['servlet_post_auto_checkin'];
    }

    /**
     * Sets servlet_post_auto_checkin
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $servlet_post_auto_checkin servlet_post_auto_checkin
     *
     * @return $this
     */
    public function setServletPostAutoCheckin($servlet_post_auto_checkin)
    {
        $this->container['servlet_post_auto_checkin'] = $servlet_post_auto_checkin;

        return $this;
    }

    /**
     * Gets servlet_post_ignore_pattern
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getServletPostIgnorePattern()
    {
        return $this->container['servlet_post_ignore_pattern'];
    }

    /**
     * Sets servlet_post_ignore_pattern
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $servlet_post_ignore_pattern servlet_post_ignore_pattern
     *
     * @return $this
     */
    public function setServletPostIgnorePattern($servlet_post_ignore_pattern)
    {
        $this->container['servlet_post_ignore_pattern'] = $servlet_post_ignore_pattern;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


