/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties::OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties()
{
    m_NameIsSet = false;
    m_PathIsSet = false;
    m_IgnoredPathsPatternsIsSet = false;
    m_ServiceNameIsSet = false;
    m_DeepIsSet = false;
    
}

OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties::~OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties()
{
}

void OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_NameIsSet)
    {
        val["name"] = ModelBase::toJson(m_Name);
    }
    if(m_PathIsSet)
    {
        val["path"] = ModelBase::toJson(m_Path);
    }
    if(m_IgnoredPathsPatternsIsSet)
    {
        val["ignoredPathsPatterns"] = ModelBase::toJson(m_IgnoredPathsPatterns);
    }
    if(m_ServiceNameIsSet)
    {
        val["serviceName"] = ModelBase::toJson(m_ServiceName);
    }
    if(m_DeepIsSet)
    {
        val["deep"] = ModelBase::toJson(m_Deep);
    }
    

    return val;
}

void OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties::fromJson(nlohmann::json& val)
{
    if(val.find("name") != val.end())
    {
        if(!val["name"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["name"]);
            setName( newItem );
        }
        
    }
    if(val.find("path") != val.end())
    {
        if(!val["path"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["path"]);
            setPath( newItem );
        }
        
    }
    if(val.find("ignoredPathsPatterns") != val.end())
    {
        if(!val["ignoredPathsPatterns"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["ignoredPathsPatterns"]);
            setIgnoredPathsPatterns( newItem );
        }
        
    }
    if(val.find("serviceName") != val.end())
    {
        if(!val["serviceName"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["serviceName"]);
            setServiceName( newItem );
        }
        
    }
    if(val.find("deep") != val.end())
    {
        if(!val["deep"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["deep"]);
            setDeep( newItem );
        }
        
    }
    
}


ConfigNodePropertyString OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties::getName() const
{
    return m_Name;
}
void OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties::setName(ConfigNodePropertyString const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties::nameIsSet() const
{
    return m_NameIsSet;
}
void OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties::unsetName()
{
    m_NameIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties::getPath() const
{
    return m_Path;
}
void OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties::setPath(ConfigNodePropertyString const& value)
{
    m_Path = value;
    m_PathIsSet = true;
}
bool OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties::pathIsSet() const
{
    return m_PathIsSet;
}
void OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties::unsetPath()
{
    m_PathIsSet = false;
}
ConfigNodePropertyArray OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties::getIgnoredPathsPatterns() const
{
    return m_IgnoredPathsPatterns;
}
void OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties::setIgnoredPathsPatterns(ConfigNodePropertyArray const& value)
{
    m_IgnoredPathsPatterns = value;
    m_IgnoredPathsPatternsIsSet = true;
}
bool OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties::ignoredPathsPatternsIsSet() const
{
    return m_IgnoredPathsPatternsIsSet;
}
void OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties::unsetIgnoredPathsPatterns()
{
    m_IgnoredPathsPatternsIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties::getServiceName() const
{
    return m_ServiceName;
}
void OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties::setServiceName(ConfigNodePropertyString const& value)
{
    m_ServiceName = value;
    m_ServiceNameIsSet = true;
}
bool OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties::serviceNameIsSet() const
{
    return m_ServiceNameIsSet;
}
void OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties::unsetServiceName()
{
    m_ServiceNameIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties::getDeep() const
{
    return m_Deep;
}
void OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties::setDeep(ConfigNodePropertyBoolean const& value)
{
    m_Deep = value;
    m_DeepIsSet = true;
}
bool OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties::deepIsSet() const
{
    return m_DeepIsSet;
}
void OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties::unsetDeep()
{
    m_DeepIsSet = false;
}

}
}
}
}

