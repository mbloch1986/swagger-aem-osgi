/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties()
{
    m_MongouriIsSet = false;
    m_DbIsSet = false;
    m_SocketKeepAliveIsSet = false;
    m_CacheIsSet = false;
    m_NodeCachePercentageIsSet = false;
    m_PrevDocCachePercentageIsSet = false;
    m_ChildrenCachePercentageIsSet = false;
    m_DiffCachePercentageIsSet = false;
    m_CacheSegmentCountIsSet = false;
    m_CacheStackMoveDistanceIsSet = false;
    m_BlobCacheSizeIsSet = false;
    m_PersistentCacheIsSet = false;
    m_JournalCacheIsSet = false;
    m_CustomBlobStoreIsSet = false;
    m_JournalGCIntervalIsSet = false;
    m_JournalGCMaxAgeIsSet = false;
    m_PrefetchExternalChangesIsSet = false;
    m_RoleIsSet = false;
    m_VersionGcMaxAgeInSecsIsSet = false;
    m_VersionGCExpressionIsSet = false;
    m_VersionGCTimeLimitInSecsIsSet = false;
    m_BlobGcMaxAgeInSecsIsSet = false;
    m_BlobTrackSnapshotIntervalInSecsIsSet = false;
    m_Repository_homeIsSet = false;
    m_MaxReplicationLagInSecsIsSet = false;
    m_DocumentStoreTypeIsSet = false;
    m_BundlingDisabledIsSet = false;
    m_UpdateLimitIsSet = false;
    m_PersistentCacheIncludesIsSet = false;
    m_LeaseCheckModeIsSet = false;
}

OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::~OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties()
{
}

void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_MongouriIsSet)
    {
        val[utility::conversions::to_string_t("mongouri")] = ModelBase::toJson(m_Mongouri);
    }
    if(m_DbIsSet)
    {
        val[utility::conversions::to_string_t("db")] = ModelBase::toJson(m_Db);
    }
    if(m_SocketKeepAliveIsSet)
    {
        val[utility::conversions::to_string_t("socketKeepAlive")] = ModelBase::toJson(m_SocketKeepAlive);
    }
    if(m_CacheIsSet)
    {
        val[utility::conversions::to_string_t("cache")] = ModelBase::toJson(m_Cache);
    }
    if(m_NodeCachePercentageIsSet)
    {
        val[utility::conversions::to_string_t("nodeCachePercentage")] = ModelBase::toJson(m_NodeCachePercentage);
    }
    if(m_PrevDocCachePercentageIsSet)
    {
        val[utility::conversions::to_string_t("prevDocCachePercentage")] = ModelBase::toJson(m_PrevDocCachePercentage);
    }
    if(m_ChildrenCachePercentageIsSet)
    {
        val[utility::conversions::to_string_t("childrenCachePercentage")] = ModelBase::toJson(m_ChildrenCachePercentage);
    }
    if(m_DiffCachePercentageIsSet)
    {
        val[utility::conversions::to_string_t("diffCachePercentage")] = ModelBase::toJson(m_DiffCachePercentage);
    }
    if(m_CacheSegmentCountIsSet)
    {
        val[utility::conversions::to_string_t("cacheSegmentCount")] = ModelBase::toJson(m_CacheSegmentCount);
    }
    if(m_CacheStackMoveDistanceIsSet)
    {
        val[utility::conversions::to_string_t("cacheStackMoveDistance")] = ModelBase::toJson(m_CacheStackMoveDistance);
    }
    if(m_BlobCacheSizeIsSet)
    {
        val[utility::conversions::to_string_t("blobCacheSize")] = ModelBase::toJson(m_BlobCacheSize);
    }
    if(m_PersistentCacheIsSet)
    {
        val[utility::conversions::to_string_t("persistentCache")] = ModelBase::toJson(m_PersistentCache);
    }
    if(m_JournalCacheIsSet)
    {
        val[utility::conversions::to_string_t("journalCache")] = ModelBase::toJson(m_JournalCache);
    }
    if(m_CustomBlobStoreIsSet)
    {
        val[utility::conversions::to_string_t("customBlobStore")] = ModelBase::toJson(m_CustomBlobStore);
    }
    if(m_JournalGCIntervalIsSet)
    {
        val[utility::conversions::to_string_t("journalGCInterval")] = ModelBase::toJson(m_JournalGCInterval);
    }
    if(m_JournalGCMaxAgeIsSet)
    {
        val[utility::conversions::to_string_t("journalGCMaxAge")] = ModelBase::toJson(m_JournalGCMaxAge);
    }
    if(m_PrefetchExternalChangesIsSet)
    {
        val[utility::conversions::to_string_t("prefetchExternalChanges")] = ModelBase::toJson(m_PrefetchExternalChanges);
    }
    if(m_RoleIsSet)
    {
        val[utility::conversions::to_string_t("role")] = ModelBase::toJson(m_Role);
    }
    if(m_VersionGcMaxAgeInSecsIsSet)
    {
        val[utility::conversions::to_string_t("versionGcMaxAgeInSecs")] = ModelBase::toJson(m_VersionGcMaxAgeInSecs);
    }
    if(m_VersionGCExpressionIsSet)
    {
        val[utility::conversions::to_string_t("versionGCExpression")] = ModelBase::toJson(m_VersionGCExpression);
    }
    if(m_VersionGCTimeLimitInSecsIsSet)
    {
        val[utility::conversions::to_string_t("versionGCTimeLimitInSecs")] = ModelBase::toJson(m_VersionGCTimeLimitInSecs);
    }
    if(m_BlobGcMaxAgeInSecsIsSet)
    {
        val[utility::conversions::to_string_t("blobGcMaxAgeInSecs")] = ModelBase::toJson(m_BlobGcMaxAgeInSecs);
    }
    if(m_BlobTrackSnapshotIntervalInSecsIsSet)
    {
        val[utility::conversions::to_string_t("blobTrackSnapshotIntervalInSecs")] = ModelBase::toJson(m_BlobTrackSnapshotIntervalInSecs);
    }
    if(m_Repository_homeIsSet)
    {
        val[utility::conversions::to_string_t("repository.home")] = ModelBase::toJson(m_Repository_home);
    }
    if(m_MaxReplicationLagInSecsIsSet)
    {
        val[utility::conversions::to_string_t("maxReplicationLagInSecs")] = ModelBase::toJson(m_MaxReplicationLagInSecs);
    }
    if(m_DocumentStoreTypeIsSet)
    {
        val[utility::conversions::to_string_t("documentStoreType")] = ModelBase::toJson(m_DocumentStoreType);
    }
    if(m_BundlingDisabledIsSet)
    {
        val[utility::conversions::to_string_t("bundlingDisabled")] = ModelBase::toJson(m_BundlingDisabled);
    }
    if(m_UpdateLimitIsSet)
    {
        val[utility::conversions::to_string_t("updateLimit")] = ModelBase::toJson(m_UpdateLimit);
    }
    if(m_PersistentCacheIncludesIsSet)
    {
        val[utility::conversions::to_string_t("persistentCacheIncludes")] = ModelBase::toJson(m_PersistentCacheIncludes);
    }
    if(m_LeaseCheckModeIsSet)
    {
        val[utility::conversions::to_string_t("leaseCheckMode")] = ModelBase::toJson(m_LeaseCheckMode);
    }

    return val;
}

void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("mongouri")))
    {
        if(!val[utility::conversions::to_string_t("mongouri")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("mongouri")]);
            setMongouri( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("db")))
    {
        if(!val[utility::conversions::to_string_t("db")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("db")]);
            setDb( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("socketKeepAlive")))
    {
        if(!val[utility::conversions::to_string_t("socketKeepAlive")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("socketKeepAlive")]);
            setSocketKeepAlive( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cache")))
    {
        if(!val[utility::conversions::to_string_t("cache")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cache")]);
            setCache( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("nodeCachePercentage")))
    {
        if(!val[utility::conversions::to_string_t("nodeCachePercentage")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("nodeCachePercentage")]);
            setNodeCachePercentage( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("prevDocCachePercentage")))
    {
        if(!val[utility::conversions::to_string_t("prevDocCachePercentage")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("prevDocCachePercentage")]);
            setPrevDocCachePercentage( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("childrenCachePercentage")))
    {
        if(!val[utility::conversions::to_string_t("childrenCachePercentage")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("childrenCachePercentage")]);
            setChildrenCachePercentage( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("diffCachePercentage")))
    {
        if(!val[utility::conversions::to_string_t("diffCachePercentage")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("diffCachePercentage")]);
            setDiffCachePercentage( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cacheSegmentCount")))
    {
        if(!val[utility::conversions::to_string_t("cacheSegmentCount")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cacheSegmentCount")]);
            setCacheSegmentCount( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cacheStackMoveDistance")))
    {
        if(!val[utility::conversions::to_string_t("cacheStackMoveDistance")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cacheStackMoveDistance")]);
            setCacheStackMoveDistance( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("blobCacheSize")))
    {
        if(!val[utility::conversions::to_string_t("blobCacheSize")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("blobCacheSize")]);
            setBlobCacheSize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("persistentCache")))
    {
        if(!val[utility::conversions::to_string_t("persistentCache")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("persistentCache")]);
            setPersistentCache( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("journalCache")))
    {
        if(!val[utility::conversions::to_string_t("journalCache")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("journalCache")]);
            setJournalCache( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("customBlobStore")))
    {
        if(!val[utility::conversions::to_string_t("customBlobStore")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("customBlobStore")]);
            setCustomBlobStore( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("journalGCInterval")))
    {
        if(!val[utility::conversions::to_string_t("journalGCInterval")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("journalGCInterval")]);
            setJournalGCInterval( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("journalGCMaxAge")))
    {
        if(!val[utility::conversions::to_string_t("journalGCMaxAge")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("journalGCMaxAge")]);
            setJournalGCMaxAge( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("prefetchExternalChanges")))
    {
        if(!val[utility::conversions::to_string_t("prefetchExternalChanges")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("prefetchExternalChanges")]);
            setPrefetchExternalChanges( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("role")))
    {
        if(!val[utility::conversions::to_string_t("role")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("role")]);
            setRole( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("versionGcMaxAgeInSecs")))
    {
        if(!val[utility::conversions::to_string_t("versionGcMaxAgeInSecs")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("versionGcMaxAgeInSecs")]);
            setVersionGcMaxAgeInSecs( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("versionGCExpression")))
    {
        if(!val[utility::conversions::to_string_t("versionGCExpression")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("versionGCExpression")]);
            setVersionGCExpression( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("versionGCTimeLimitInSecs")))
    {
        if(!val[utility::conversions::to_string_t("versionGCTimeLimitInSecs")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("versionGCTimeLimitInSecs")]);
            setVersionGCTimeLimitInSecs( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("blobGcMaxAgeInSecs")))
    {
        if(!val[utility::conversions::to_string_t("blobGcMaxAgeInSecs")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("blobGcMaxAgeInSecs")]);
            setBlobGcMaxAgeInSecs( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("blobTrackSnapshotIntervalInSecs")))
    {
        if(!val[utility::conversions::to_string_t("blobTrackSnapshotIntervalInSecs")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("blobTrackSnapshotIntervalInSecs")]);
            setBlobTrackSnapshotIntervalInSecs( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("repository.home")))
    {
        if(!val[utility::conversions::to_string_t("repository.home")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("repository.home")]);
            setRepositoryHome( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("maxReplicationLagInSecs")))
    {
        if(!val[utility::conversions::to_string_t("maxReplicationLagInSecs")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("maxReplicationLagInSecs")]);
            setMaxReplicationLagInSecs( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("documentStoreType")))
    {
        if(!val[utility::conversions::to_string_t("documentStoreType")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromJson(val[utility::conversions::to_string_t("documentStoreType")]);
            setDocumentStoreType( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("bundlingDisabled")))
    {
        if(!val[utility::conversions::to_string_t("bundlingDisabled")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("bundlingDisabled")]);
            setBundlingDisabled( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("updateLimit")))
    {
        if(!val[utility::conversions::to_string_t("updateLimit")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("updateLimit")]);
            setUpdateLimit( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("persistentCacheIncludes")))
    {
        if(!val[utility::conversions::to_string_t("persistentCacheIncludes")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("persistentCacheIncludes")]);
            setPersistentCacheIncludes( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("leaseCheckMode")))
    {
        if(!val[utility::conversions::to_string_t("leaseCheckMode")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromJson(val[utility::conversions::to_string_t("leaseCheckMode")]);
            setLeaseCheckMode( newItem );
        }
    }
}

void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_MongouriIsSet)
    {
        if (m_Mongouri.get())
        {
            m_Mongouri->toMultipart(multipart, utility::conversions::to_string_t("mongouri."));
        }
    }
    if(m_DbIsSet)
    {
        if (m_Db.get())
        {
            m_Db->toMultipart(multipart, utility::conversions::to_string_t("db."));
        }
    }
    if(m_SocketKeepAliveIsSet)
    {
        if (m_SocketKeepAlive.get())
        {
            m_SocketKeepAlive->toMultipart(multipart, utility::conversions::to_string_t("socketKeepAlive."));
        }
    }
    if(m_CacheIsSet)
    {
        if (m_Cache.get())
        {
            m_Cache->toMultipart(multipart, utility::conversions::to_string_t("cache."));
        }
    }
    if(m_NodeCachePercentageIsSet)
    {
        if (m_NodeCachePercentage.get())
        {
            m_NodeCachePercentage->toMultipart(multipart, utility::conversions::to_string_t("nodeCachePercentage."));
        }
    }
    if(m_PrevDocCachePercentageIsSet)
    {
        if (m_PrevDocCachePercentage.get())
        {
            m_PrevDocCachePercentage->toMultipart(multipart, utility::conversions::to_string_t("prevDocCachePercentage."));
        }
    }
    if(m_ChildrenCachePercentageIsSet)
    {
        if (m_ChildrenCachePercentage.get())
        {
            m_ChildrenCachePercentage->toMultipart(multipart, utility::conversions::to_string_t("childrenCachePercentage."));
        }
    }
    if(m_DiffCachePercentageIsSet)
    {
        if (m_DiffCachePercentage.get())
        {
            m_DiffCachePercentage->toMultipart(multipart, utility::conversions::to_string_t("diffCachePercentage."));
        }
    }
    if(m_CacheSegmentCountIsSet)
    {
        if (m_CacheSegmentCount.get())
        {
            m_CacheSegmentCount->toMultipart(multipart, utility::conversions::to_string_t("cacheSegmentCount."));
        }
    }
    if(m_CacheStackMoveDistanceIsSet)
    {
        if (m_CacheStackMoveDistance.get())
        {
            m_CacheStackMoveDistance->toMultipart(multipart, utility::conversions::to_string_t("cacheStackMoveDistance."));
        }
    }
    if(m_BlobCacheSizeIsSet)
    {
        if (m_BlobCacheSize.get())
        {
            m_BlobCacheSize->toMultipart(multipart, utility::conversions::to_string_t("blobCacheSize."));
        }
    }
    if(m_PersistentCacheIsSet)
    {
        if (m_PersistentCache.get())
        {
            m_PersistentCache->toMultipart(multipart, utility::conversions::to_string_t("persistentCache."));
        }
    }
    if(m_JournalCacheIsSet)
    {
        if (m_JournalCache.get())
        {
            m_JournalCache->toMultipart(multipart, utility::conversions::to_string_t("journalCache."));
        }
    }
    if(m_CustomBlobStoreIsSet)
    {
        if (m_CustomBlobStore.get())
        {
            m_CustomBlobStore->toMultipart(multipart, utility::conversions::to_string_t("customBlobStore."));
        }
    }
    if(m_JournalGCIntervalIsSet)
    {
        if (m_JournalGCInterval.get())
        {
            m_JournalGCInterval->toMultipart(multipart, utility::conversions::to_string_t("journalGCInterval."));
        }
    }
    if(m_JournalGCMaxAgeIsSet)
    {
        if (m_JournalGCMaxAge.get())
        {
            m_JournalGCMaxAge->toMultipart(multipart, utility::conversions::to_string_t("journalGCMaxAge."));
        }
    }
    if(m_PrefetchExternalChangesIsSet)
    {
        if (m_PrefetchExternalChanges.get())
        {
            m_PrefetchExternalChanges->toMultipart(multipart, utility::conversions::to_string_t("prefetchExternalChanges."));
        }
    }
    if(m_RoleIsSet)
    {
        if (m_Role.get())
        {
            m_Role->toMultipart(multipart, utility::conversions::to_string_t("role."));
        }
    }
    if(m_VersionGcMaxAgeInSecsIsSet)
    {
        if (m_VersionGcMaxAgeInSecs.get())
        {
            m_VersionGcMaxAgeInSecs->toMultipart(multipart, utility::conversions::to_string_t("versionGcMaxAgeInSecs."));
        }
    }
    if(m_VersionGCExpressionIsSet)
    {
        if (m_VersionGCExpression.get())
        {
            m_VersionGCExpression->toMultipart(multipart, utility::conversions::to_string_t("versionGCExpression."));
        }
    }
    if(m_VersionGCTimeLimitInSecsIsSet)
    {
        if (m_VersionGCTimeLimitInSecs.get())
        {
            m_VersionGCTimeLimitInSecs->toMultipart(multipart, utility::conversions::to_string_t("versionGCTimeLimitInSecs."));
        }
    }
    if(m_BlobGcMaxAgeInSecsIsSet)
    {
        if (m_BlobGcMaxAgeInSecs.get())
        {
            m_BlobGcMaxAgeInSecs->toMultipart(multipart, utility::conversions::to_string_t("blobGcMaxAgeInSecs."));
        }
    }
    if(m_BlobTrackSnapshotIntervalInSecsIsSet)
    {
        if (m_BlobTrackSnapshotIntervalInSecs.get())
        {
            m_BlobTrackSnapshotIntervalInSecs->toMultipart(multipart, utility::conversions::to_string_t("blobTrackSnapshotIntervalInSecs."));
        }
    }
    if(m_Repository_homeIsSet)
    {
        if (m_Repository_home.get())
        {
            m_Repository_home->toMultipart(multipart, utility::conversions::to_string_t("repository.home."));
        }
    }
    if(m_MaxReplicationLagInSecsIsSet)
    {
        if (m_MaxReplicationLagInSecs.get())
        {
            m_MaxReplicationLagInSecs->toMultipart(multipart, utility::conversions::to_string_t("maxReplicationLagInSecs."));
        }
    }
    if(m_DocumentStoreTypeIsSet)
    {
        if (m_DocumentStoreType.get())
        {
            m_DocumentStoreType->toMultipart(multipart, utility::conversions::to_string_t("documentStoreType."));
        }
    }
    if(m_BundlingDisabledIsSet)
    {
        if (m_BundlingDisabled.get())
        {
            m_BundlingDisabled->toMultipart(multipart, utility::conversions::to_string_t("bundlingDisabled."));
        }
    }
    if(m_UpdateLimitIsSet)
    {
        if (m_UpdateLimit.get())
        {
            m_UpdateLimit->toMultipart(multipart, utility::conversions::to_string_t("updateLimit."));
        }
    }
    if(m_PersistentCacheIncludesIsSet)
    {
        if (m_PersistentCacheIncludes.get())
        {
            m_PersistentCacheIncludes->toMultipart(multipart, utility::conversions::to_string_t("persistentCacheIncludes."));
        }
    }
    if(m_LeaseCheckModeIsSet)
    {
        if (m_LeaseCheckMode.get())
        {
            m_LeaseCheckMode->toMultipart(multipart, utility::conversions::to_string_t("leaseCheckMode."));
        }
    }
}

void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("mongouri")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("mongouri")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("mongouri."));
            setMongouri( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("db")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("db")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("db."));
            setDb( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("socketKeepAlive")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("socketKeepAlive")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("socketKeepAlive."));
            setSocketKeepAlive( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cache")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cache")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cache."));
            setCache( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nodeCachePercentage")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("nodeCachePercentage")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("nodeCachePercentage."));
            setNodeCachePercentage( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("prevDocCachePercentage")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("prevDocCachePercentage")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("prevDocCachePercentage."));
            setPrevDocCachePercentage( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("childrenCachePercentage")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("childrenCachePercentage")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("childrenCachePercentage."));
            setChildrenCachePercentage( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("diffCachePercentage")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("diffCachePercentage")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("diffCachePercentage."));
            setDiffCachePercentage( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cacheSegmentCount")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cacheSegmentCount")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cacheSegmentCount."));
            setCacheSegmentCount( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cacheStackMoveDistance")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cacheStackMoveDistance")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cacheStackMoveDistance."));
            setCacheStackMoveDistance( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("blobCacheSize")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("blobCacheSize")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("blobCacheSize."));
            setBlobCacheSize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("persistentCache")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("persistentCache")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("persistentCache."));
            setPersistentCache( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("journalCache")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("journalCache")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("journalCache."));
            setJournalCache( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("customBlobStore")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("customBlobStore")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("customBlobStore."));
            setCustomBlobStore( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("journalGCInterval")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("journalGCInterval")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("journalGCInterval."));
            setJournalGCInterval( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("journalGCMaxAge")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("journalGCMaxAge")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("journalGCMaxAge."));
            setJournalGCMaxAge( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("prefetchExternalChanges")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("prefetchExternalChanges")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("prefetchExternalChanges."));
            setPrefetchExternalChanges( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("role")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("role")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("role."));
            setRole( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("versionGcMaxAgeInSecs")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("versionGcMaxAgeInSecs")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("versionGcMaxAgeInSecs."));
            setVersionGcMaxAgeInSecs( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("versionGCExpression")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("versionGCExpression")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("versionGCExpression."));
            setVersionGCExpression( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("versionGCTimeLimitInSecs")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("versionGCTimeLimitInSecs")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("versionGCTimeLimitInSecs."));
            setVersionGCTimeLimitInSecs( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("blobGcMaxAgeInSecs")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("blobGcMaxAgeInSecs")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("blobGcMaxAgeInSecs."));
            setBlobGcMaxAgeInSecs( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("blobTrackSnapshotIntervalInSecs")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("blobTrackSnapshotIntervalInSecs")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("blobTrackSnapshotIntervalInSecs."));
            setBlobTrackSnapshotIntervalInSecs( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("repository.home")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("repository.home")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("repository.home."));
            setRepositoryHome( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("maxReplicationLagInSecs")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("maxReplicationLagInSecs")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("maxReplicationLagInSecs."));
            setMaxReplicationLagInSecs( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("documentStoreType")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("documentStoreType")))
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("documentStoreType."));
            setDocumentStoreType( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("bundlingDisabled")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("bundlingDisabled")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("bundlingDisabled."));
            setBundlingDisabled( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("updateLimit")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("updateLimit")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("updateLimit."));
            setUpdateLimit( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("persistentCacheIncludes")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("persistentCacheIncludes")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("persistentCacheIncludes."));
            setPersistentCacheIncludes( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("leaseCheckMode")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("leaseCheckMode")))
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("leaseCheckMode."));
            setLeaseCheckMode( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getMongouri() const
{
    return m_Mongouri;
}


void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setMongouri(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Mongouri = value;
    m_MongouriIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::mongouriIsSet() const
{
    return m_MongouriIsSet;
}

void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetMongouri()
{
    m_MongouriIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getDb() const
{
    return m_Db;
}


void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setDb(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Db = value;
    m_DbIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::dbIsSet() const
{
    return m_DbIsSet;
}

void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetDb()
{
    m_DbIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getSocketKeepAlive() const
{
    return m_SocketKeepAlive;
}


void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setSocketKeepAlive(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_SocketKeepAlive = value;
    m_SocketKeepAliveIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::socketKeepAliveIsSet() const
{
    return m_SocketKeepAliveIsSet;
}

void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetSocketKeepAlive()
{
    m_SocketKeepAliveIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getCache() const
{
    return m_Cache;
}


void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setCache(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cache = value;
    m_CacheIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::cacheIsSet() const
{
    return m_CacheIsSet;
}

void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetCache()
{
    m_CacheIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getNodeCachePercentage() const
{
    return m_NodeCachePercentage;
}


void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setNodeCachePercentage(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_NodeCachePercentage = value;
    m_NodeCachePercentageIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::nodeCachePercentageIsSet() const
{
    return m_NodeCachePercentageIsSet;
}

void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetNodeCachePercentage()
{
    m_NodeCachePercentageIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getPrevDocCachePercentage() const
{
    return m_PrevDocCachePercentage;
}


void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setPrevDocCachePercentage(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_PrevDocCachePercentage = value;
    m_PrevDocCachePercentageIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::prevDocCachePercentageIsSet() const
{
    return m_PrevDocCachePercentageIsSet;
}

void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetPrevDocCachePercentage()
{
    m_PrevDocCachePercentageIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getChildrenCachePercentage() const
{
    return m_ChildrenCachePercentage;
}


void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setChildrenCachePercentage(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_ChildrenCachePercentage = value;
    m_ChildrenCachePercentageIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::childrenCachePercentageIsSet() const
{
    return m_ChildrenCachePercentageIsSet;
}

void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetChildrenCachePercentage()
{
    m_ChildrenCachePercentageIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getDiffCachePercentage() const
{
    return m_DiffCachePercentage;
}


void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setDiffCachePercentage(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_DiffCachePercentage = value;
    m_DiffCachePercentageIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::diffCachePercentageIsSet() const
{
    return m_DiffCachePercentageIsSet;
}

void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetDiffCachePercentage()
{
    m_DiffCachePercentageIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getCacheSegmentCount() const
{
    return m_CacheSegmentCount;
}


void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setCacheSegmentCount(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_CacheSegmentCount = value;
    m_CacheSegmentCountIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::cacheSegmentCountIsSet() const
{
    return m_CacheSegmentCountIsSet;
}

void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetCacheSegmentCount()
{
    m_CacheSegmentCountIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getCacheStackMoveDistance() const
{
    return m_CacheStackMoveDistance;
}


void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setCacheStackMoveDistance(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_CacheStackMoveDistance = value;
    m_CacheStackMoveDistanceIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::cacheStackMoveDistanceIsSet() const
{
    return m_CacheStackMoveDistanceIsSet;
}

void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetCacheStackMoveDistance()
{
    m_CacheStackMoveDistanceIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getBlobCacheSize() const
{
    return m_BlobCacheSize;
}


void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setBlobCacheSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_BlobCacheSize = value;
    m_BlobCacheSizeIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::blobCacheSizeIsSet() const
{
    return m_BlobCacheSizeIsSet;
}

void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetBlobCacheSize()
{
    m_BlobCacheSizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getPersistentCache() const
{
    return m_PersistentCache;
}


void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setPersistentCache(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_PersistentCache = value;
    m_PersistentCacheIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::persistentCacheIsSet() const
{
    return m_PersistentCacheIsSet;
}

void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetPersistentCache()
{
    m_PersistentCacheIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getJournalCache() const
{
    return m_JournalCache;
}


void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setJournalCache(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_JournalCache = value;
    m_JournalCacheIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::journalCacheIsSet() const
{
    return m_JournalCacheIsSet;
}

void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetJournalCache()
{
    m_JournalCacheIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getCustomBlobStore() const
{
    return m_CustomBlobStore;
}


void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setCustomBlobStore(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_CustomBlobStore = value;
    m_CustomBlobStoreIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::customBlobStoreIsSet() const
{
    return m_CustomBlobStoreIsSet;
}

void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetCustomBlobStore()
{
    m_CustomBlobStoreIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getJournalGCInterval() const
{
    return m_JournalGCInterval;
}


void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setJournalGCInterval(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_JournalGCInterval = value;
    m_JournalGCIntervalIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::journalGCIntervalIsSet() const
{
    return m_JournalGCIntervalIsSet;
}

void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetJournalGCInterval()
{
    m_JournalGCIntervalIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getJournalGCMaxAge() const
{
    return m_JournalGCMaxAge;
}


void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setJournalGCMaxAge(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_JournalGCMaxAge = value;
    m_JournalGCMaxAgeIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::journalGCMaxAgeIsSet() const
{
    return m_JournalGCMaxAgeIsSet;
}

void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetJournalGCMaxAge()
{
    m_JournalGCMaxAgeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getPrefetchExternalChanges() const
{
    return m_PrefetchExternalChanges;
}


void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setPrefetchExternalChanges(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_PrefetchExternalChanges = value;
    m_PrefetchExternalChangesIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::prefetchExternalChangesIsSet() const
{
    return m_PrefetchExternalChangesIsSet;
}

void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetPrefetchExternalChanges()
{
    m_PrefetchExternalChangesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getRole() const
{
    return m_Role;
}


void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setRole(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Role = value;
    m_RoleIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::roleIsSet() const
{
    return m_RoleIsSet;
}

void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetRole()
{
    m_RoleIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getVersionGcMaxAgeInSecs() const
{
    return m_VersionGcMaxAgeInSecs;
}


void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setVersionGcMaxAgeInSecs(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_VersionGcMaxAgeInSecs = value;
    m_VersionGcMaxAgeInSecsIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::versionGcMaxAgeInSecsIsSet() const
{
    return m_VersionGcMaxAgeInSecsIsSet;
}

void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetVersionGcMaxAgeInSecs()
{
    m_VersionGcMaxAgeInSecsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getVersionGCExpression() const
{
    return m_VersionGCExpression;
}


void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setVersionGCExpression(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_VersionGCExpression = value;
    m_VersionGCExpressionIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::versionGCExpressionIsSet() const
{
    return m_VersionGCExpressionIsSet;
}

void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetVersionGCExpression()
{
    m_VersionGCExpressionIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getVersionGCTimeLimitInSecs() const
{
    return m_VersionGCTimeLimitInSecs;
}


void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setVersionGCTimeLimitInSecs(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_VersionGCTimeLimitInSecs = value;
    m_VersionGCTimeLimitInSecsIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::versionGCTimeLimitInSecsIsSet() const
{
    return m_VersionGCTimeLimitInSecsIsSet;
}

void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetVersionGCTimeLimitInSecs()
{
    m_VersionGCTimeLimitInSecsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getBlobGcMaxAgeInSecs() const
{
    return m_BlobGcMaxAgeInSecs;
}


void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setBlobGcMaxAgeInSecs(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_BlobGcMaxAgeInSecs = value;
    m_BlobGcMaxAgeInSecsIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::blobGcMaxAgeInSecsIsSet() const
{
    return m_BlobGcMaxAgeInSecsIsSet;
}

void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetBlobGcMaxAgeInSecs()
{
    m_BlobGcMaxAgeInSecsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getBlobTrackSnapshotIntervalInSecs() const
{
    return m_BlobTrackSnapshotIntervalInSecs;
}


void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setBlobTrackSnapshotIntervalInSecs(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_BlobTrackSnapshotIntervalInSecs = value;
    m_BlobTrackSnapshotIntervalInSecsIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::blobTrackSnapshotIntervalInSecsIsSet() const
{
    return m_BlobTrackSnapshotIntervalInSecsIsSet;
}

void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetBlobTrackSnapshotIntervalInSecs()
{
    m_BlobTrackSnapshotIntervalInSecsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getRepositoryHome() const
{
    return m_Repository_home;
}


void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setRepositoryHome(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Repository_home = value;
    m_Repository_homeIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::repositoryHomeIsSet() const
{
    return m_Repository_homeIsSet;
}

void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetRepository_home()
{
    m_Repository_homeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getMaxReplicationLagInSecs() const
{
    return m_MaxReplicationLagInSecs;
}


void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setMaxReplicationLagInSecs(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_MaxReplicationLagInSecs = value;
    m_MaxReplicationLagInSecsIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::maxReplicationLagInSecsIsSet() const
{
    return m_MaxReplicationLagInSecsIsSet;
}

void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetMaxReplicationLagInSecs()
{
    m_MaxReplicationLagInSecsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyDropDown> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getDocumentStoreType() const
{
    return m_DocumentStoreType;
}


void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setDocumentStoreType(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_DocumentStoreType = value;
    m_DocumentStoreTypeIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::documentStoreTypeIsSet() const
{
    return m_DocumentStoreTypeIsSet;
}

void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetDocumentStoreType()
{
    m_DocumentStoreTypeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getBundlingDisabled() const
{
    return m_BundlingDisabled;
}


void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setBundlingDisabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_BundlingDisabled = value;
    m_BundlingDisabledIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::bundlingDisabledIsSet() const
{
    return m_BundlingDisabledIsSet;
}

void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetBundlingDisabled()
{
    m_BundlingDisabledIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getUpdateLimit() const
{
    return m_UpdateLimit;
}


void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setUpdateLimit(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_UpdateLimit = value;
    m_UpdateLimitIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::updateLimitIsSet() const
{
    return m_UpdateLimitIsSet;
}

void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetUpdateLimit()
{
    m_UpdateLimitIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getPersistentCacheIncludes() const
{
    return m_PersistentCacheIncludes;
}


void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setPersistentCacheIncludes(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_PersistentCacheIncludes = value;
    m_PersistentCacheIncludesIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::persistentCacheIncludesIsSet() const
{
    return m_PersistentCacheIncludesIsSet;
}

void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetPersistentCacheIncludes()
{
    m_PersistentCacheIncludesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyDropDown> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getLeaseCheckMode() const
{
    return m_LeaseCheckMode;
}


void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setLeaseCheckMode(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_LeaseCheckMode = value;
    m_LeaseCheckModeIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::leaseCheckModeIsSet() const
{
    return m_LeaseCheckModeIsSet;
}

void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::unsetLeaseCheckMode()
{
    m_LeaseCheckModeIsSet = false;
}

}
}
}
}

