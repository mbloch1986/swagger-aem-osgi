/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ComAdobeCqProjectsPurgeSchedulerProperties.h
 *
 * 
 */

#ifndef ComAdobeCqProjectsPurgeSchedulerProperties_H_
#define ComAdobeCqProjectsPurgeSchedulerProperties_H_


#include "ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComAdobeCqProjectsPurgeSchedulerProperties
    : public ModelBase
{
public:
    ComAdobeCqProjectsPurgeSchedulerProperties();
    virtual ~ComAdobeCqProjectsPurgeSchedulerProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// ComAdobeCqProjectsPurgeSchedulerProperties members

    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getScheduledpurgeName() const;
    void setScheduledpurgeName(ConfigNodePropertyString const& value);
    bool scheduledpurgeNameIsSet() const;
    void unsetScheduledpurge_name();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getScheduledpurgePurgeActive() const;
    void setScheduledpurgePurgeActive(ConfigNodePropertyBoolean const& value);
    bool scheduledpurgePurgeActiveIsSet() const;
    void unsetScheduledpurge_purgeActive();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyArray getScheduledpurgeTemplates() const;
    void setScheduledpurgeTemplates(ConfigNodePropertyArray const& value);
    bool scheduledpurgeTemplatesIsSet() const;
    void unsetScheduledpurge_templates();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getScheduledpurgePurgeGroups() const;
    void setScheduledpurgePurgeGroups(ConfigNodePropertyBoolean const& value);
    bool scheduledpurgePurgeGroupsIsSet() const;
    void unsetScheduledpurge_purgeGroups();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getScheduledpurgePurgeAssets() const;
    void setScheduledpurgePurgeAssets(ConfigNodePropertyBoolean const& value);
    bool scheduledpurgePurgeAssetsIsSet() const;
    void unsetScheduledpurge_purgeAssets();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getScheduledpurgeTerminateRunningWorkflows() const;
    void setScheduledpurgeTerminateRunningWorkflows(ConfigNodePropertyBoolean const& value);
    bool scheduledpurgeTerminateRunningWorkflowsIsSet() const;
    void unsetScheduledpurge_terminateRunningWorkflows();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getScheduledpurgeDaysold() const;
    void setScheduledpurgeDaysold(ConfigNodePropertyInteger const& value);
    bool scheduledpurgeDaysoldIsSet() const;
    void unsetScheduledpurge_daysold();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getScheduledpurgeSaveThreshold() const;
    void setScheduledpurgeSaveThreshold(ConfigNodePropertyInteger const& value);
    bool scheduledpurgeSaveThresholdIsSet() const;
    void unsetScheduledpurge_saveThreshold();

protected:
    ConfigNodePropertyString m_Scheduledpurge_name;
    bool m_Scheduledpurge_nameIsSet;
    ConfigNodePropertyBoolean m_Scheduledpurge_purgeActive;
    bool m_Scheduledpurge_purgeActiveIsSet;
    ConfigNodePropertyArray m_Scheduledpurge_templates;
    bool m_Scheduledpurge_templatesIsSet;
    ConfigNodePropertyBoolean m_Scheduledpurge_purgeGroups;
    bool m_Scheduledpurge_purgeGroupsIsSet;
    ConfigNodePropertyBoolean m_Scheduledpurge_purgeAssets;
    bool m_Scheduledpurge_purgeAssetsIsSet;
    ConfigNodePropertyBoolean m_Scheduledpurge_terminateRunningWorkflows;
    bool m_Scheduledpurge_terminateRunningWorkflowsIsSet;
    ConfigNodePropertyInteger m_Scheduledpurge_daysold;
    bool m_Scheduledpurge_daysoldIsSet;
    ConfigNodePropertyInteger m_Scheduledpurge_saveThreshold;
    bool m_Scheduledpurge_saveThresholdIsSet;
};

}
}
}
}

#endif /* ComAdobeCqProjectsPurgeSchedulerProperties_H_ */
