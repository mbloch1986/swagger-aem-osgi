/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OrgApacheSlingHcCoreImplScriptableHealthCheckProperties
    /// </summary>
    [DataContract]
    public partial class OrgApacheSlingHcCoreImplScriptableHealthCheckProperties :  IEquatable<OrgApacheSlingHcCoreImplScriptableHealthCheckProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrgApacheSlingHcCoreImplScriptableHealthCheckProperties" /> class.
        /// </summary>
        /// <param name="hcName">hcName.</param>
        /// <param name="hcTags">hcTags.</param>
        /// <param name="hcMbeanName">hcMbeanName.</param>
        /// <param name="expression">expression.</param>
        /// <param name="languageExtension">languageExtension.</param>
        public OrgApacheSlingHcCoreImplScriptableHealthCheckProperties(ConfigNodePropertyString hcName = default(ConfigNodePropertyString), ConfigNodePropertyArray hcTags = default(ConfigNodePropertyArray), ConfigNodePropertyString hcMbeanName = default(ConfigNodePropertyString), ConfigNodePropertyString expression = default(ConfigNodePropertyString), ConfigNodePropertyString languageExtension = default(ConfigNodePropertyString))
        {
            this.HcName = hcName;
            this.HcTags = hcTags;
            this.HcMbeanName = hcMbeanName;
            this.Expression = expression;
            this.LanguageExtension = languageExtension;
        }
        
        /// <summary>
        /// Gets or Sets HcName
        /// </summary>
        [DataMember(Name="hc.name", EmitDefaultValue=false)]
        public ConfigNodePropertyString HcName { get; set; }

        /// <summary>
        /// Gets or Sets HcTags
        /// </summary>
        [DataMember(Name="hc.tags", EmitDefaultValue=false)]
        public ConfigNodePropertyArray HcTags { get; set; }

        /// <summary>
        /// Gets or Sets HcMbeanName
        /// </summary>
        [DataMember(Name="hc.mbean.name", EmitDefaultValue=false)]
        public ConfigNodePropertyString HcMbeanName { get; set; }

        /// <summary>
        /// Gets or Sets Expression
        /// </summary>
        [DataMember(Name="expression", EmitDefaultValue=false)]
        public ConfigNodePropertyString Expression { get; set; }

        /// <summary>
        /// Gets or Sets LanguageExtension
        /// </summary>
        [DataMember(Name="language.extension", EmitDefaultValue=false)]
        public ConfigNodePropertyString LanguageExtension { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheSlingHcCoreImplScriptableHealthCheckProperties {\n");
            sb.Append("  HcName: ").Append(HcName).Append("\n");
            sb.Append("  HcTags: ").Append(HcTags).Append("\n");
            sb.Append("  HcMbeanName: ").Append(HcMbeanName).Append("\n");
            sb.Append("  Expression: ").Append(Expression).Append("\n");
            sb.Append("  LanguageExtension: ").Append(LanguageExtension).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrgApacheSlingHcCoreImplScriptableHealthCheckProperties);
        }

        /// <summary>
        /// Returns true if OrgApacheSlingHcCoreImplScriptableHealthCheckProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of OrgApacheSlingHcCoreImplScriptableHealthCheckProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheSlingHcCoreImplScriptableHealthCheckProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.HcName == input.HcName ||
                    (this.HcName != null &&
                    this.HcName.Equals(input.HcName))
                ) && 
                (
                    this.HcTags == input.HcTags ||
                    (this.HcTags != null &&
                    this.HcTags.Equals(input.HcTags))
                ) && 
                (
                    this.HcMbeanName == input.HcMbeanName ||
                    (this.HcMbeanName != null &&
                    this.HcMbeanName.Equals(input.HcMbeanName))
                ) && 
                (
                    this.Expression == input.Expression ||
                    (this.Expression != null &&
                    this.Expression.Equals(input.Expression))
                ) && 
                (
                    this.LanguageExtension == input.LanguageExtension ||
                    (this.LanguageExtension != null &&
                    this.LanguageExtension.Equals(input.LanguageExtension))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HcName != null)
                    hashCode = hashCode * 59 + this.HcName.GetHashCode();
                if (this.HcTags != null)
                    hashCode = hashCode * 59 + this.HcTags.GetHashCode();
                if (this.HcMbeanName != null)
                    hashCode = hashCode * 59 + this.HcMbeanName.GetHashCode();
                if (this.Expression != null)
                    hashCode = hashCode * 59 + this.Expression.GetHashCode();
                if (this.LanguageExtension != null)
                    hashCode = hashCode * 59 + this.LanguageExtension.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
