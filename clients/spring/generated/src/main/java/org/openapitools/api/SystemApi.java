/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.2.1-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo;
import org.openapitools.model.AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo;
import org.openapitools.model.AnalyticsComponentQueryCacheServiceInfo;
import org.openapitools.model.ApacheSlingHealthCheckResultHTMLSerializerInfo;
import java.math.BigDecimal;
import org.openapitools.model.ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo;
import org.openapitools.model.ComAdobeAemTransactionCoreImplTransactionRecorderInfo;
import org.openapitools.model.ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo;
import org.openapitools.model.ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo;
import org.openapitools.model.ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo;
import org.openapitools.model.ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo;
import org.openapitools.model.ComAdobeCqAccountApiAccountManagementServiceInfo;
import org.openapitools.model.ComAdobeCqAccountImplAccountManagementServletInfo;
import org.openapitools.model.ComAdobeCqAddressImplLocationLocationListServletInfo;
import org.openapitools.model.ComAdobeCqAuditPurgeDamInfo;
import org.openapitools.model.ComAdobeCqAuditPurgePagesInfo;
import org.openapitools.model.ComAdobeCqAuditPurgeReplicationInfo;
import org.openapitools.model.ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo;
import org.openapitools.model.ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo;
import org.openapitools.model.ComAdobeCqCdnRewriterImplCDNRewriterInfo;
import org.openapitools.model.ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo;
import org.openapitools.model.ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo;
import org.openapitools.model.ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo;
import org.openapitools.model.ComAdobeCqCommerceImplAssetStaticImageHandlerInfo;
import org.openapitools.model.ComAdobeCqCommerceImplAssetVideoHandlerInfo;
import org.openapitools.model.ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo;
import org.openapitools.model.ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo;
import org.openapitools.model.ComAdobeCqCommercePimImplPageEventListenerInfo;
import org.openapitools.model.ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo;
import org.openapitools.model.ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo;
import org.openapitools.model.ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo;
import org.openapitools.model.ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo;
import org.openapitools.model.ComAdobeCqDamCfmImplComponentComponentConfigImplInfo;
import org.openapitools.model.ComAdobeCqDamCfmImplConfFeatureConfigImplInfo;
import org.openapitools.model.ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo;
import org.openapitools.model.ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo;
import org.openapitools.model.ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo;
import org.openapitools.model.ComAdobeCqDamDmProcessImagePTiffManagerImplInfo;
import org.openapitools.model.ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo;
import org.openapitools.model.ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo;
import org.openapitools.model.ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo;
import org.openapitools.model.ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo;
import org.openapitools.model.ComAdobeCqDamS7imagingImplIsImageServerComponentInfo;
import org.openapitools.model.ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo;
import org.openapitools.model.ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo;
import org.openapitools.model.ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo;
import org.openapitools.model.ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo;
import org.openapitools.model.ComAdobeCqDeserfwImplDeserializationFirewallImplInfo;
import org.openapitools.model.ComAdobeCqDtmImplServiceDTMWebServiceImplInfo;
import org.openapitools.model.ComAdobeCqDtmImplServletsDTMDeployHookServletInfo;
import org.openapitools.model.ComAdobeCqDtmReactorImplServiceWebServiceImplInfo;
import org.openapitools.model.ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo;
import org.openapitools.model.ComAdobeCqHcContentPackagesHealthCheckInfo;
import org.openapitools.model.ComAdobeCqHistoryImplHistoryRequestFilterInfo;
import org.openapitools.model.ComAdobeCqHistoryImplHistoryServiceImplInfo;
import org.openapitools.model.ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo;
import org.openapitools.model.ComAdobeCqProjectsImplServletProjectImageServletInfo;
import org.openapitools.model.ComAdobeCqProjectsPurgeSchedulerInfo;
import org.openapitools.model.ComAdobeCqScheduledExporterImplScheduledExporterImplInfo;
import org.openapitools.model.ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo;
import org.openapitools.model.ComAdobeCqScreensDeviceImplDeviceServiceInfo;
import org.openapitools.model.ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo;
import org.openapitools.model.ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo;
import org.openapitools.model.ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo;
import org.openapitools.model.ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo;
import org.openapitools.model.ComAdobeCqScreensImplScreensChannelPostProcessorInfo;
import org.openapitools.model.ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo;
import org.openapitools.model.ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo;
import org.openapitools.model.ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo;
import org.openapitools.model.ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo;
import org.openapitools.model.ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo;
import org.openapitools.model.ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo;
import org.openapitools.model.ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo;
import org.openapitools.model.ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo;
import org.openapitools.model.ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo;
import org.openapitools.model.ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo;
import org.openapitools.model.ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo;
import org.openapitools.model.ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo;
import org.openapitools.model.ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo;
import org.openapitools.model.ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo;
import org.openapitools.model.ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo;
import org.openapitools.model.ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo;
import org.openapitools.model.ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo;
import org.openapitools.model.ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo;
import org.openapitools.model.ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo;
import org.openapitools.model.ComAdobeCqSocialCalendarServletsTimeZoneServletInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo;
import org.openapitools.model.ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo;
import org.openapitools.model.ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo;
import org.openapitools.model.ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo;
import org.openapitools.model.ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo;
import org.openapitools.model.ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo;
import org.openapitools.model.ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo;
import org.openapitools.model.ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo;
import org.openapitools.model.ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo;
import org.openapitools.model.ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo;
import org.openapitools.model.ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo;
import org.openapitools.model.ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo;
import org.openapitools.model.ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo;
import org.openapitools.model.ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo;
import org.openapitools.model.ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo;
import org.openapitools.model.ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo;
import org.openapitools.model.ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo;
import org.openapitools.model.ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo;
import org.openapitools.model.ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo;
import org.openapitools.model.ComAdobeCqSocialGroupImplGroupServiceImplInfo;
import org.openapitools.model.ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo;
import org.openapitools.model.ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo;
import org.openapitools.model.ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo;
import org.openapitools.model.ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo;
import org.openapitools.model.ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo;
import org.openapitools.model.ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo;
import org.openapitools.model.ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo;
import org.openapitools.model.ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo;
import org.openapitools.model.ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo;
import org.openapitools.model.ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo;
import org.openapitools.model.ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo;
import org.openapitools.model.ComAdobeCqSocialNotificationsImplMentionsRouterInfo;
import org.openapitools.model.ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo;
import org.openapitools.model.ComAdobeCqSocialNotificationsImplNotificationsRouterInfo;
import org.openapitools.model.ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo;
import org.openapitools.model.ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo;
import org.openapitools.model.ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo;
import org.openapitools.model.ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo;
import org.openapitools.model.ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo;
import org.openapitools.model.ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo;
import org.openapitools.model.ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo;
import org.openapitools.model.ComAdobeCqSocialScoringImplScoringEventListenerInfo;
import org.openapitools.model.ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo;
import org.openapitools.model.ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo;
import org.openapitools.model.ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo;
import org.openapitools.model.ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo;
import org.openapitools.model.ComAdobeCqSocialSrpImplSocialSolrConnectorInfo;
import org.openapitools.model.ComAdobeCqSocialSyncImplDiffChangesObserverInfo;
import org.openapitools.model.ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo;
import org.openapitools.model.ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo;
import org.openapitools.model.ComAdobeCqSocialSyncImplUserSyncListenerImplInfo;
import org.openapitools.model.ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo;
import org.openapitools.model.ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo;
import org.openapitools.model.ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo;
import org.openapitools.model.ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo;
import org.openapitools.model.ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo;
import org.openapitools.model.ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo;
import org.openapitools.model.ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo;
import org.openapitools.model.ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo;
import org.openapitools.model.ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo;
import org.openapitools.model.ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo;
import org.openapitools.model.ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo;
import org.openapitools.model.ComAdobeCqSocialUserImplTransportHttpToPublisherInfo;
import org.openapitools.model.ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo;
import org.openapitools.model.ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo;
import org.openapitools.model.ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo;
import org.openapitools.model.ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo;
import org.openapitools.model.ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo;
import org.openapitools.model.ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo;
import org.openapitools.model.ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo;
import org.openapitools.model.ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo;
import org.openapitools.model.ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo;
import org.openapitools.model.ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo;
import org.openapitools.model.ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo;
import org.openapitools.model.ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo;
import org.openapitools.model.ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo;
import org.openapitools.model.ComAdobeFormsCommonServiceImplDefaultDataProviderInfo;
import org.openapitools.model.ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo;
import org.openapitools.model.ComAdobeFormsCommonServletTempCleanUpTaskInfo;
import org.openapitools.model.ComAdobeGraniteAcpPlatformPlatformServletInfo;
import org.openapitools.model.ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo;
import org.openapitools.model.ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo;
import org.openapitools.model.ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo;
import org.openapitools.model.ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo;
import org.openapitools.model.ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo;
import org.openapitools.model.ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo;
import org.openapitools.model.ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo;
import org.openapitools.model.ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo;
import org.openapitools.model.ComAdobeGraniteAuthImsImplIMSProviderImplInfo;
import org.openapitools.model.ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo;
import org.openapitools.model.ComAdobeGraniteAuthImsInfo;
import org.openapitools.model.ComAdobeGraniteAuthOauthAccesstokenProviderInfo;
import org.openapitools.model.ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo;
import org.openapitools.model.ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo;
import org.openapitools.model.ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo;
import org.openapitools.model.ComAdobeGraniteAuthOauthImplGithubProviderImplInfo;
import org.openapitools.model.ComAdobeGraniteAuthOauthImplGraniteProviderInfo;
import org.openapitools.model.ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo;
import org.openapitools.model.ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo;
import org.openapitools.model.ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo;
import org.openapitools.model.ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo;
import org.openapitools.model.ComAdobeGraniteAuthOauthProviderInfo;
import org.openapitools.model.ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo;
import org.openapitools.model.ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo;
import org.openapitools.model.ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo;
import org.openapitools.model.ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo;
import org.openapitools.model.ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo;
import org.openapitools.model.ComAdobeGraniteCompatrouterImplRoutingConfigInfo;
import org.openapitools.model.ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo;
import org.openapitools.model.ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo;
import org.openapitools.model.ComAdobeGraniteContexthubImplContextHubImplInfo;
import org.openapitools.model.ComAdobeGraniteCorsImplCORSPolicyImplInfo;
import org.openapitools.model.ComAdobeGraniteCsrfImplCSRFFilterInfo;
import org.openapitools.model.ComAdobeGraniteCsrfImplCSRFServletInfo;
import org.openapitools.model.ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo;
import org.openapitools.model.ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo;
import org.openapitools.model.ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo;
import org.openapitools.model.ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo;
import org.openapitools.model.ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo;
import org.openapitools.model.ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo;
import org.openapitools.model.ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo;
import org.openapitools.model.ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo;
import org.openapitools.model.ComAdobeGraniteFragsImplRandomFeatureInfo;
import org.openapitools.model.ComAdobeGraniteHttpcacheFileFileCacheStoreInfo;
import org.openapitools.model.ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo;
import org.openapitools.model.ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo;
import org.openapitools.model.ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo;
import org.openapitools.model.ComAdobeGraniteInfocollectorInfoCollectorInfo;
import org.openapitools.model.ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo;
import org.openapitools.model.ComAdobeGraniteLicenseImplLicenseCheckFilterInfo;
import org.openapitools.model.ComAdobeGraniteLoggingImplLogAnalyserImplInfo;
import org.openapitools.model.ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo;
import org.openapitools.model.ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo;
import org.openapitools.model.ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo;
import org.openapitools.model.ComAdobeGraniteMonitoringImplScriptConfigImplInfo;
import org.openapitools.model.ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo;
import org.openapitools.model.ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo;
import org.openapitools.model.ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo;
import org.openapitools.model.ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo;
import org.openapitools.model.ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo;
import org.openapitools.model.ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo;
import org.openapitools.model.ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo;
import org.openapitools.model.ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo;
import org.openapitools.model.ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo;
import org.openapitools.model.ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo;
import org.openapitools.model.ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo;
import org.openapitools.model.ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo;
import org.openapitools.model.ComAdobeGraniteOptoutImplOptOutServiceImplInfo;
import org.openapitools.model.ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo;
import org.openapitools.model.ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo;
import org.openapitools.model.ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo;
import org.openapitools.model.ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo;
import org.openapitools.model.ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteRepositoryImplCommitStatsConfigInfo;
import org.openapitools.model.ComAdobeGraniteRepositoryServiceUserConfigurationInfo;
import org.openapitools.model.ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo;
import org.openapitools.model.ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo;
import org.openapitools.model.ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo;
import org.openapitools.model.ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo;
import org.openapitools.model.ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo;
import org.openapitools.model.ComAdobeGraniteRestImplServletDefaultGETServletInfo;
import org.openapitools.model.ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo;
import org.openapitools.model.ComAdobeGraniteSecurityUserUserPropertiesServiceInfo;
import org.openapitools.model.ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo;
import org.openapitools.model.ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo;
import org.openapitools.model.ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo;
import org.openapitools.model.ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo;
import org.openapitools.model.ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo;
import org.openapitools.model.ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo;
import org.openapitools.model.ComAdobeGraniteThreaddumpThreadDumpCollectorInfo;
import org.openapitools.model.ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo;
import org.openapitools.model.ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo;
import org.openapitools.model.ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo;
import org.openapitools.model.ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo;
import org.openapitools.model.ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo;
import org.openapitools.model.ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo;
import org.openapitools.model.ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo;
import org.openapitools.model.ComAdobeGraniteWorkflowCoreJobJobHandlerInfo;
import org.openapitools.model.ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo;
import org.openapitools.model.ComAdobeGraniteWorkflowCorePayloadMapCacheInfo;
import org.openapitools.model.ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo;
import org.openapitools.model.ComAdobeGraniteWorkflowCoreWorkflowConfigInfo;
import org.openapitools.model.ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo;
import org.openapitools.model.ComAdobeGraniteWorkflowPurgeSchedulerInfo;
import org.openapitools.model.ComAdobeOctopusNcommBootstrapInfo;
import org.openapitools.model.ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo;
import org.openapitools.model.ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo;
import org.openapitools.model.ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo;
import org.openapitools.model.ComDayCommonsHttpclientInfo;
import org.openapitools.model.ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo;
import org.openapitools.model.ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo;
import org.openapitools.model.ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo;
import org.openapitools.model.ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo;
import org.openapitools.model.ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo;
import org.openapitools.model.ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo;
import org.openapitools.model.ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo;
import org.openapitools.model.ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo;
import org.openapitools.model.ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo;
import org.openapitools.model.ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo;
import org.openapitools.model.ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo;
import org.openapitools.model.ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo;
import org.openapitools.model.ComDayCqAuthImplCugCugSupportImplInfo;
import org.openapitools.model.ComDayCqAuthImplLoginSelectorHandlerInfo;
import org.openapitools.model.ComDayCqCommonsImplExternalizerImplInfo;
import org.openapitools.model.ComDayCqCommonsServletsRootMappingServletInfo;
import org.openapitools.model.ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo;
import org.openapitools.model.ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo;
import org.openapitools.model.ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo;
import org.openapitools.model.ComDayCqContentsyncImplContentSyncManagerImplInfo;
import org.openapitools.model.ComDayCqDamCommonsHandlerStandardImageHandlerInfo;
import org.openapitools.model.ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo;
import org.openapitools.model.ComDayCqDamCommonsUtilImplAssetCacheImplInfo;
import org.openapitools.model.ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo;
import org.openapitools.model.ComDayCqDamCoreImplAssetMoveListenerInfo;
import org.openapitools.model.ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo;
import org.openapitools.model.ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo;
import org.openapitools.model.ComDayCqDamCoreImplDamChangeEventListenerInfo;
import org.openapitools.model.ComDayCqDamCoreImplDamEventPurgeServiceInfo;
import org.openapitools.model.ComDayCqDamCoreImplDamEventRecorderImplInfo;
import org.openapitools.model.ComDayCqDamCoreImplEventDamEventAuditListenerInfo;
import org.openapitools.model.ComDayCqDamCoreImplExpiryNotificationJobImplInfo;
import org.openapitools.model.ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo;
import org.openapitools.model.ComDayCqDamCoreImplGfxCommonsGfxRendererInfo;
import org.openapitools.model.ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo;
import org.openapitools.model.ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo;
import org.openapitools.model.ComDayCqDamCoreImplHandlerJpegHandlerInfo;
import org.openapitools.model.ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo;
import org.openapitools.model.ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo;
import org.openapitools.model.ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo;
import org.openapitools.model.ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo;
import org.openapitools.model.ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo;
import org.openapitools.model.ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo;
import org.openapitools.model.ComDayCqDamCoreImplLightboxLightboxServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo;
import org.openapitools.model.ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo;
import org.openapitools.model.ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo;
import org.openapitools.model.ComDayCqDamCoreImplMissingMetadataNotificationJobInfo;
import org.openapitools.model.ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo;
import org.openapitools.model.ComDayCqDamCoreImplProcessTextExtractionProcessInfo;
import org.openapitools.model.ComDayCqDamCoreImplRenditionMakerImplInfo;
import org.openapitools.model.ComDayCqDamCoreImplReportsReportExportServiceInfo;
import org.openapitools.model.ComDayCqDamCoreImplReportsReportPurgeServiceInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletAssetDownloadServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletAssetStatusServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletAssetXMPSearchServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletBatchMetadataServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletBinaryProviderServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletCollectionServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletCollectionsServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletCompanionServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletCreateAssetServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletDamContentDispositionFilterInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletGuidLookupFilterInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletHealthCheckServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletMetadataGetServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletResourceCollectionServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo;
import org.openapitools.model.ComDayCqDamCoreImplUnzipUnzipConfigInfo;
import org.openapitools.model.ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo;
import org.openapitools.model.ComDayCqDamCoreProcessExtractMetadataProcessInfo;
import org.openapitools.model.ComDayCqDamCoreProcessMetadataProcessorProcessInfo;
import org.openapitools.model.ComDayCqDamHandlerFfmpegLocatorImplInfo;
import org.openapitools.model.ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo;
import org.openapitools.model.ComDayCqDamHandlerStandardPdfPdfHandlerInfo;
import org.openapitools.model.ComDayCqDamHandlerStandardPsPostScriptHandlerInfo;
import org.openapitools.model.ComDayCqDamHandlerStandardPsdPsdHandlerInfo;
import org.openapitools.model.ComDayCqDamIdsImplIDSJobProcessorInfo;
import org.openapitools.model.ComDayCqDamIdsImplIDSPoolManagerImplInfo;
import org.openapitools.model.ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo;
import org.openapitools.model.ComDayCqDamInddImplServletSnippetCreationServletInfo;
import org.openapitools.model.ComDayCqDamInddProcessINDDMediaExtractProcessInfo;
import org.openapitools.model.ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo;
import org.openapitools.model.ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo;
import org.openapitools.model.ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo;
import org.openapitools.model.ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo;
import org.openapitools.model.ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo;
import org.openapitools.model.ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo;
import org.openapitools.model.ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo;
import org.openapitools.model.ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo;
import org.openapitools.model.ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo;
import org.openapitools.model.ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo;
import org.openapitools.model.ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo;
import org.openapitools.model.ComDayCqDamScene7ImplScene7APIClientImplInfo;
import org.openapitools.model.ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo;
import org.openapitools.model.ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo;
import org.openapitools.model.ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo;
import org.openapitools.model.ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo;
import org.openapitools.model.ComDayCqDamScene7ImplScene7UploadServiceImplInfo;
import org.openapitools.model.ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo;
import org.openapitools.model.ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo;
import org.openapitools.model.ComDayCqDamVideoImplServletVideoTestServletInfo;
import org.openapitools.model.ComDayCqExtwidgetServletsImageSpriteServletInfo;
import org.openapitools.model.ComDayCqImageInternalFontFontHelperInfo;
import org.openapitools.model.ComDayCqJcrclustersupportClusterStartLevelControllerInfo;
import org.openapitools.model.ComDayCqMailerDefaultMailServiceInfo;
import org.openapitools.model.ComDayCqMailerImplCqMailingServiceInfo;
import org.openapitools.model.ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo;
import org.openapitools.model.ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo;
import org.openapitools.model.ComDayCqMcmCampaignImplIntegrationConfigImplInfo;
import org.openapitools.model.ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo;
import org.openapitools.model.ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo;
import org.openapitools.model.ComDayCqMcmImplMCMConfigurationInfo;
import org.openapitools.model.ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo;
import org.openapitools.model.ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo;
import org.openapitools.model.ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo;
import org.openapitools.model.ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo;
import org.openapitools.model.ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo;
import org.openapitools.model.ComDayCqNotificationImplNotificationServiceImplInfo;
import org.openapitools.model.ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo;
import org.openapitools.model.ComDayCqPollingImporterImplManagedPollConfigImplInfo;
import org.openapitools.model.ComDayCqPollingImporterImplManagedPollingImporterImplInfo;
import org.openapitools.model.ComDayCqPollingImporterImplPollingImporterImplInfo;
import org.openapitools.model.ComDayCqReplicationAuditReplicationEventListenerInfo;
import org.openapitools.model.ComDayCqReplicationContentStaticContentBuilderInfo;
import org.openapitools.model.ComDayCqReplicationImplAgentManagerImplInfo;
import org.openapitools.model.ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo;
import org.openapitools.model.ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo;
import org.openapitools.model.ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo;
import org.openapitools.model.ComDayCqReplicationImplReplicationReceiverImplInfo;
import org.openapitools.model.ComDayCqReplicationImplReplicatorImplInfo;
import org.openapitools.model.ComDayCqReplicationImplReverseReplicatorInfo;
import org.openapitools.model.ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo;
import org.openapitools.model.ComDayCqReplicationImplTransportHttpInfo;
import org.openapitools.model.ComDayCqReportingImplCacheCacheImplInfo;
import org.openapitools.model.ComDayCqReportingImplConfigServiceImplInfo;
import org.openapitools.model.ComDayCqReportingImplRLogAnalyzerInfo;
import org.openapitools.model.ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo;
import org.openapitools.model.ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo;
import org.openapitools.model.ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo;
import org.openapitools.model.ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo;
import org.openapitools.model.ComDayCqRewriterProcessorImplHtmlParserFactoryInfo;
import org.openapitools.model.ComDayCqSearchImplBuilderQueryBuilderImplInfo;
import org.openapitools.model.ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo;
import org.openapitools.model.ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo;
import org.openapitools.model.ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo;
import org.openapitools.model.ComDayCqSecurityACLSetupInfo;
import org.openapitools.model.ComDayCqStatisticsImplStatisticsServiceImplInfo;
import org.openapitools.model.ComDayCqTaggingImplJcrTagManagerFactoryImplInfo;
import org.openapitools.model.ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo;
import org.openapitools.model.ComDayCqTaggingImplTagGarbageCollectorInfo;
import org.openapitools.model.ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo;
import org.openapitools.model.ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo;
import org.openapitools.model.ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo;
import org.openapitools.model.ComDayCqWcmCoreImplCommandsWCMCommandServletInfo;
import org.openapitools.model.ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo;
import org.openapitools.model.ComDayCqWcmCoreImplEventPageEventAuditListenerInfo;
import org.openapitools.model.ComDayCqWcmCoreImplEventPagePostProcessorInfo;
import org.openapitools.model.ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo;
import org.openapitools.model.ComDayCqWcmCoreImplEventTemplatePostProcessorInfo;
import org.openapitools.model.ComDayCqWcmCoreImplLanguageManagerImplInfo;
import org.openapitools.model.ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo;
import org.openapitools.model.ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo;
import org.openapitools.model.ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo;
import org.openapitools.model.ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo;
import org.openapitools.model.ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo;
import org.openapitools.model.ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo;
import org.openapitools.model.ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo;
import org.openapitools.model.ComDayCqWcmCoreImplServletsFindReplaceServletInfo;
import org.openapitools.model.ComDayCqWcmCoreImplServletsReferenceSearchServletInfo;
import org.openapitools.model.ComDayCqWcmCoreImplServletsThumbnailServletInfo;
import org.openapitools.model.ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo;
import org.openapitools.model.ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo;
import org.openapitools.model.ComDayCqWcmCoreImplVersionManagerImplInfo;
import org.openapitools.model.ComDayCqWcmCoreImplVersionPurgeTaskInfo;
import org.openapitools.model.ComDayCqWcmCoreImplWCMDebugFilterInfo;
import org.openapitools.model.ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo;
import org.openapitools.model.ComDayCqWcmCoreImplWarpTimeWarpFilterInfo;
import org.openapitools.model.ComDayCqWcmCoreMvtMVTStatisticsImplInfo;
import org.openapitools.model.ComDayCqWcmCoreStatsPageViewStatisticsImplInfo;
import org.openapitools.model.ComDayCqWcmCoreWCMRequestFilterInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterDesignPackageImporterInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo;
import org.openapitools.model.ComDayCqWcmFoundationFormsImplFormChooserServletInfo;
import org.openapitools.model.ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo;
import org.openapitools.model.ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo;
import org.openapitools.model.ComDayCqWcmFoundationFormsImplMailServletInfo;
import org.openapitools.model.ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo;
import org.openapitools.model.ComDayCqWcmFoundationImplHTTPAuthHandlerInfo;
import org.openapitools.model.ComDayCqWcmFoundationImplPageImpressionsTrackerInfo;
import org.openapitools.model.ComDayCqWcmFoundationImplPageRedirectServletInfo;
import org.openapitools.model.ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo;
import org.openapitools.model.ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo;
import org.openapitools.model.ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo;
import org.openapitools.model.ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo;
import org.openapitools.model.ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo;
import org.openapitools.model.ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo;
import org.openapitools.model.ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo;
import org.openapitools.model.ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo;
import org.openapitools.model.ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo;
import org.openapitools.model.ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo;
import org.openapitools.model.ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo;
import org.openapitools.model.ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo;
import org.openapitools.model.ComDayCqWcmMsmImplRolloutManagerImplInfo;
import org.openapitools.model.ComDayCqWcmMsmImplServletsAuditLogServletInfo;
import org.openapitools.model.ComDayCqWcmNotificationEmailImplEmailChannelInfo;
import org.openapitools.model.ComDayCqWcmNotificationImplNotificationManagerImplInfo;
import org.openapitools.model.ComDayCqWcmScriptingImplBVPManagerInfo;
import org.openapitools.model.ComDayCqWcmUndoUndoConfigInfo;
import org.openapitools.model.ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo;
import org.openapitools.model.ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo;
import org.openapitools.model.ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo;
import org.openapitools.model.ComDayCqWidgetImplHtmlLibraryManagerImplInfo;
import org.openapitools.model.ComDayCqWidgetImplWidgetExtensionProviderImplInfo;
import org.openapitools.model.ComDayCqWorkflowImplEmailEMailNotificationServiceInfo;
import org.openapitools.model.ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo;
import org.openapitools.model.ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo;
import org.openapitools.model.ComDayCrxSecurityTokenImplTokenCleanupTaskInfo;
import org.openapitools.model.GuideLocalizationServiceInfo;
import org.openapitools.model.MessagingUserComponentFactoryInfo;
import org.openapitools.model.OrgApacheAriesJmxFrameworkStateConfigInfo;
import org.openapitools.model.OrgApacheFelixEventadminImplEventAdminInfo;
import org.openapitools.model.OrgApacheFelixHttpInfo;
import org.openapitools.model.OrgApacheFelixHttpSslfilterSslFilterInfo;
import org.openapitools.model.OrgApacheFelixJaasConfigurationFactoryInfo;
import org.openapitools.model.OrgApacheFelixJaasConfigurationSpiInfo;
import org.openapitools.model.OrgApacheFelixScrScrServiceInfo;
import org.openapitools.model.OrgApacheFelixSystemreadyImplComponentsCheckInfo;
import org.openapitools.model.OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo;
import org.openapitools.model.OrgApacheFelixSystemreadyImplServicesCheckInfo;
import org.openapitools.model.OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo;
import org.openapitools.model.OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo;
import org.openapitools.model.OrgApacheFelixSystemreadySystemReadyMonitorInfo;
import org.openapitools.model.OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo;
import org.openapitools.model.OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo;
import org.openapitools.model.OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo;
import org.openapitools.model.OrgApacheHttpProxyconfiguratorInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo;
import org.openapitools.model.OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo;
import org.openapitools.model.OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo;
import org.openapitools.model.OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo;
import org.openapitools.model.OrgApacheSlingAuthCoreImplLogoutServletInfo;
import org.openapitools.model.OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo;
import org.openapitools.model.OrgApacheSlingCaconfigImplConfigurationResolverImplInfo;
import org.openapitools.model.OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo;
import org.openapitools.model.OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo;
import org.openapitools.model.OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo;
import org.openapitools.model.OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo;
import org.openapitools.model.OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo;
import org.openapitools.model.OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo;
import org.openapitools.model.OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo;
import org.openapitools.model.OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo;
import org.openapitools.model.OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo;
import org.openapitools.model.OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo;
import org.openapitools.model.OrgApacheSlingCommonsLogLogManagerInfo;
import org.openapitools.model.OrgApacheSlingCommonsMetricsInternalLogReporterInfo;
import org.openapitools.model.OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo;
import org.openapitools.model.OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo;
import org.openapitools.model.OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo;
import org.openapitools.model.OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo;
import org.openapitools.model.OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo;
import org.openapitools.model.OrgApacheSlingDatasourceDataSourceFactoryInfo;
import org.openapitools.model.OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo;
import org.openapitools.model.OrgApacheSlingDiscoveryOakConfigInfo;
import org.openapitools.model.OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo;
import org.openapitools.model.OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo;
import org.openapitools.model.OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo;
import org.openapitools.model.OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo;
import org.openapitools.model.OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo;
import org.openapitools.model.OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo;
import org.openapitools.model.OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo;
import org.openapitools.model.OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo;
import org.openapitools.model.OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo;
import org.openapitools.model.OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo;
import org.openapitools.model.OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo;
import org.openapitools.model.OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo;
import org.openapitools.model.OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo;
import org.openapitools.model.OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo;
import org.openapitools.model.OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo;
import org.openapitools.model.OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo;
import org.openapitools.model.OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo;
import org.openapitools.model.OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo;
import org.openapitools.model.OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo;
import org.openapitools.model.OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo;
import org.openapitools.model.OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo;
import org.openapitools.model.OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo;
import org.openapitools.model.OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo;
import org.openapitools.model.OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo;
import org.openapitools.model.OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo;
import org.openapitools.model.OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo;
import org.openapitools.model.OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo;
import org.openapitools.model.OrgApacheSlingEngineImplLogRequestLoggerInfo;
import org.openapitools.model.OrgApacheSlingEngineImplLogRequestLoggerServiceInfo;
import org.openapitools.model.OrgApacheSlingEngineImplSlingMainServletInfo;
import org.openapitools.model.OrgApacheSlingEngineParametersInfo;
import org.openapitools.model.OrgApacheSlingEventImplEventingThreadPoolInfo;
import org.openapitools.model.OrgApacheSlingEventImplJobsDefaultJobManagerInfo;
import org.openapitools.model.OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo;
import org.openapitools.model.OrgApacheSlingEventImplJobsJobConsumerManagerInfo;
import org.openapitools.model.OrgApacheSlingEventJobsQueueConfigurationInfo;
import org.openapitools.model.OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo;
import org.openapitools.model.OrgApacheSlingFeatureflagsFeatureInfo;
import org.openapitools.model.OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo;
import org.openapitools.model.OrgApacheSlingHapiImplHApiUtilImplInfo;
import org.openapitools.model.OrgApacheSlingHcCoreImplCompositeHealthCheckInfo;
import org.openapitools.model.OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo;
import org.openapitools.model.OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo;
import org.openapitools.model.OrgApacheSlingHcCoreImplScriptableHealthCheckInfo;
import org.openapitools.model.OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo;
import org.openapitools.model.OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo;
import org.openapitools.model.OrgApacheSlingI18nImplI18NFilterInfo;
import org.openapitools.model.OrgApacheSlingI18nImplJcrResourceBundleProviderInfo;
import org.openapitools.model.OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo;
import org.openapitools.model.OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo;
import org.openapitools.model.OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo;
import org.openapitools.model.OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo;
import org.openapitools.model.OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo;
import org.openapitools.model.OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo;
import org.openapitools.model.OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo;
import org.openapitools.model.OrgApacheSlingJcrRepoinitRepositoryInitializerInfo;
import org.openapitools.model.OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo;
import org.openapitools.model.OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo;
import org.openapitools.model.OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo;
import org.openapitools.model.OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo;
import org.openapitools.model.OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo;
import org.openapitools.model.OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo;
import org.openapitools.model.OrgApacheSlingJmxProviderImplJMXResourceProviderInfo;
import org.openapitools.model.OrgApacheSlingModelsImplModelAdapterFactoryInfo;
import org.openapitools.model.OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo;
import org.openapitools.model.OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo;
import org.openapitools.model.OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo;
import org.openapitools.model.OrgApacheSlingResourcemergerPickerOverridingInfo;
import org.openapitools.model.OrgApacheSlingScriptingCoreImplScriptCacheImplInfo;
import org.openapitools.model.OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo;
import org.openapitools.model.OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo;
import org.openapitools.model.OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo;
import org.openapitools.model.OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo;
import org.openapitools.model.OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo;
import org.openapitools.model.OrgApacheSlingSecurityImplContentDispositionFilterInfo;
import org.openapitools.model.OrgApacheSlingSecurityImplReferrerFilterInfo;
import org.openapitools.model.OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo;
import org.openapitools.model.OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo;
import org.openapitools.model.OrgApacheSlingServletsGetDefaultGetServletInfo;
import org.openapitools.model.OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo;
import org.openapitools.model.OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo;
import org.openapitools.model.OrgApacheSlingServletsPostImplSlingPostServletInfo;
import org.openapitools.model.OrgApacheSlingServletsResolverSlingServletResolverInfo;
import org.openapitools.model.OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo;
import org.openapitools.model.OrgApacheSlingStartupfilterImplStartupFilterImplInfo;
import org.openapitools.model.OrgApacheSlingTenantInternalTenantProviderImplInfo;
import org.openapitools.model.OrgApacheSlingTracerInternalLogTracerInfo;
import org.openapitools.model.OrgApacheSlingXssImplXSSFilterImplInfo;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-08-05T01:13:37.880Z[GMT]")

@Validated
@Api(value = "system", description = "the system API")
public interface SystemApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "", nickname = "adaptiveFormAndInteractiveCommunicationWebChannelConfiguration", notes = "", response = AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/Adaptive Form and Interactive Communication Web Channel Configuration",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo> adaptiveFormAndInteractiveCommunicationWebChannelConfiguration(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "showPlaceholder", required = false) Boolean showPlaceholder,@ApiParam(value = "") @Valid @RequestParam(value = "maximumCacheEntries", required = false) Integer maximumCacheEntries,@ApiParam(value = "") @Valid @RequestParam(value = "af.scripting.compatversion", required = false) String afScriptingCompatversion,@ApiParam(value = "") @Valid @RequestParam(value = "makeFileNameUnique", required = false) Boolean makeFileNameUnique,@ApiParam(value = "") @Valid @RequestParam(value = "generatingCompliantData", required = false) Boolean generatingCompliantData) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"generatingCompliantData\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"showPlaceholder\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"makeFileNameUnique\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"af.scripting.compatversion\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"maximumCacheEntries\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur", notes = "", response = AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/Adaptive Form and Interactive Communication Web Channel Theme Configuration",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo> adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "fontList", required = false) List<String> fontList) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"fontList\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "analyticsComponentQueryCacheService", notes = "", response = AnalyticsComponentQueryCacheServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = AnalyticsComponentQueryCacheServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/Analytics Component Query Cache Service",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<AnalyticsComponentQueryCacheServiceInfo> analyticsComponentQueryCacheService(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.analytics.component.query.cache.size", required = false) Integer cqAnalyticsComponentQueryCacheSize) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.analytics.component.query.cache.size\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "apacheSlingHealthCheckResultHTMLSerializer", notes = "", response = ApacheSlingHealthCheckResultHTMLSerializerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ApacheSlingHealthCheckResultHTMLSerializerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/Apache Sling Health Check Result HTML Serializer",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ApacheSlingHealthCheckResultHTMLSerializerInfo> apacheSlingHealthCheckResultHTMLSerializer(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "styleString", required = false) String styleString) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"styleString\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration", notes = "", response = ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.aem.formsndocuments.config.AEMFormsManagerConfiguration",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo> comAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "formsManagerConfig.includeOOTBTemplates", required = false) Boolean formsManagerConfigIncludeOOTBTemplates,@ApiParam(value = "") @Valid @RequestParam(value = "formsManagerConfig.includeDeprecatedTemplates", required = false) Boolean formsManagerConfigIncludeDeprecatedTemplates) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"formsManagerConfig.includeDeprecatedTemplates\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"formsManagerConfig.includeOOTBTemplates\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeAemTransactionCoreImplTransactionRecorder", notes = "", response = ComAdobeAemTransactionCoreImplTransactionRecorderInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeAemTransactionCoreImplTransactionRecorderInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.aem.transaction.core.impl.TransactionRecorder",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeAemTransactionCoreImplTransactionRecorderInfo> comAdobeAemTransactionCoreImplTransactionRecorder(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "isTransactionRecordingEnabled", required = false) Boolean isTransactionRecordingEnabled) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"isTransactionRecordingEnabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC", notes = "", response = ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.DeprecateIndexesHC",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo> comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "hc.name", required = false) String hcName,@ApiParam(value = "") @Valid @RequestParam(value = "hc.tags", required = false) List<String> hcTags,@ApiParam(value = "") @Valid @RequestParam(value = "hc.mbean.name", required = false) String hcMbeanName) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"hc.tags\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"hc.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"hc.mbean.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC", notes = "", response = ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.ReplicationAgentsDisabledHC",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo> comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "hc.name", required = false) String hcName,@ApiParam(value = "") @Valid @RequestParam(value = "hc.tags", required = false) List<String> hcTags,@ApiParam(value = "") @Valid @RequestParam(value = "hc.mbean.name", required = false) String hcMbeanName) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"hc.tags\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"hc.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"hc.mbean.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl", notes = "", response = ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.aem.upgrade.prechecks.mbean.impl.PreUpgradeTasksMBeanImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo> comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "pre-upgrade.maintenance.tasks", required = false) List<String> preUpgradeMaintenanceTasks,@ApiParam(value = "") @Valid @RequestParam(value = "pre-upgrade.hc.tags", required = false) List<String> preUpgradeHcTags) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"pre-upgrade.hc.tags\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"pre-upgrade.maintenance.tasks\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl", notes = "", response = ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.aem.upgrade.prechecks.tasks.impl.ConsistencyCheckTaskImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo> comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "root.path", required = false) String rootPath,@ApiParam(value = "") @Valid @RequestParam(value = "fix.inconsistencies", required = false) Boolean fixInconsistencies) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"fix.inconsistencies\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"root.path\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqAccountApiAccountManagementService", notes = "", response = ComAdobeCqAccountApiAccountManagementServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqAccountApiAccountManagementServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.account.api.AccountManagementService",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqAccountApiAccountManagementServiceInfo> comAdobeCqAccountApiAccountManagementService(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.accountmanager.token.validity.period", required = false) Integer cqAccountmanagerTokenValidityPeriod,@ApiParam(value = "") @Valid @RequestParam(value = "cq.accountmanager.config.requestnewaccount.mail", required = false) String cqAccountmanagerConfigRequestnewaccountMail,@ApiParam(value = "") @Valid @RequestParam(value = "cq.accountmanager.config.requestnewpwd.mail", required = false) String cqAccountmanagerConfigRequestnewpwdMail) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"additionalProperties\" : \"additionalProperties\",  \"title\" : \"title\",  \"properties\" : {    \"cq.accountmanager.config.requestnewaccount.mail\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"cq.accountmanager.token.validity.period\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cq.accountmanager.config.requestnewpwd.mail\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqAccountImplAccountManagementServlet", notes = "", response = ComAdobeCqAccountImplAccountManagementServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqAccountImplAccountManagementServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.account.impl.AccountManagementServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqAccountImplAccountManagementServletInfo> comAdobeCqAccountImplAccountManagementServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.accountmanager.config.informnewaccount.mail", required = false) String cqAccountmanagerConfigInformnewaccountMail,@ApiParam(value = "") @Valid @RequestParam(value = "cq.accountmanager.config.informnewpwd.mail", required = false) String cqAccountmanagerConfigInformnewpwdMail) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.accountmanager.config.informnewaccount.mail\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"cq.accountmanager.config.informnewpwd.mail\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqAddressImplLocationLocationListServlet", notes = "", response = ComAdobeCqAddressImplLocationLocationListServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqAddressImplLocationLocationListServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.address.impl.location.LocationListServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqAddressImplLocationLocationListServletInfo> comAdobeCqAddressImplLocationLocationListServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.address.location.default.maxResults", required = false) Integer cqAddressLocationDefaultMaxResults) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.address.location.default.maxResults\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqAuditPurgeDam", notes = "", response = ComAdobeCqAuditPurgeDamInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqAuditPurgeDamInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.audit.purge.Dam",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqAuditPurgeDamInfo> comAdobeCqAuditPurgeDam(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "auditlog.rule.name", required = false) String auditlogRuleName,@ApiParam(value = "") @Valid @RequestParam(value = "auditlog.rule.contentpath", required = false) String auditlogRuleContentpath,@ApiParam(value = "") @Valid @RequestParam(value = "auditlog.rule.minimumage", required = false) Integer auditlogRuleMinimumage,@ApiParam(value = "") @Valid @RequestParam(value = "auditlog.rule.types", required = false) String auditlogRuleTypes) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"auditlog.rule.contentpath\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"auditlog.rule.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"auditlog.rule.minimumage\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"auditlog.rule.types\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqAuditPurgePages", notes = "", response = ComAdobeCqAuditPurgePagesInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqAuditPurgePagesInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.audit.purge.Pages",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqAuditPurgePagesInfo> comAdobeCqAuditPurgePages(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "auditlog.rule.name", required = false) String auditlogRuleName,@ApiParam(value = "") @Valid @RequestParam(value = "auditlog.rule.contentpath", required = false) String auditlogRuleContentpath,@ApiParam(value = "") @Valid @RequestParam(value = "auditlog.rule.minimumage", required = false) Integer auditlogRuleMinimumage,@ApiParam(value = "") @Valid @RequestParam(value = "auditlog.rule.types", required = false) String auditlogRuleTypes) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"auditlog.rule.contentpath\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"auditlog.rule.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"auditlog.rule.minimumage\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"auditlog.rule.types\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqAuditPurgeReplication", notes = "", response = ComAdobeCqAuditPurgeReplicationInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqAuditPurgeReplicationInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.audit.purge.Replication",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqAuditPurgeReplicationInfo> comAdobeCqAuditPurgeReplication(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "auditlog.rule.name", required = false) String auditlogRuleName,@ApiParam(value = "") @Valid @RequestParam(value = "auditlog.rule.contentpath", required = false) String auditlogRuleContentpath,@ApiParam(value = "") @Valid @RequestParam(value = "auditlog.rule.minimumage", required = false) Integer auditlogRuleMinimumage,@ApiParam(value = "") @Valid @RequestParam(value = "auditlog.rule.types", required = false) String auditlogRuleTypes) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"auditlog.rule.contentpath\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"auditlog.rule.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"auditlog.rule.minimumage\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"auditlog.rule.types\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqCdnRewriterImplAWSCloudFrontRewriter", notes = "", response = ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.AWSCloudFrontRewriter",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo> comAdobeCqCdnRewriterImplAWSCloudFrontRewriter(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "service.ranking", required = false) Integer serviceRanking,@ApiParam(value = "") @Valid @RequestParam(value = "keypair.id", required = false) String keypairId,@ApiParam(value = "") @Valid @RequestParam(value = "keypair.alias", required = false) String keypairAlias,@ApiParam(value = "") @Valid @RequestParam(value = "cdnrewriter.attributes", required = false) List<String> cdnrewriterAttributes,@ApiParam(value = "") @Valid @RequestParam(value = "cdn.rewriter.distribution.domain", required = false) String cdnRewriterDistributionDomain) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"keypair.alias\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"cdnrewriter.attributes\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"cdn.rewriter.distribution.domain\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"keypair.id\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"service.ranking\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqCdnRewriterImplCDNConfigServiceImpl", notes = "", response = ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNConfigServiceImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo> comAdobeCqCdnRewriterImplCDNConfigServiceImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cdn.config.distribution.domain", required = false) String cdnConfigDistributionDomain,@ApiParam(value = "") @Valid @RequestParam(value = "cdn.config.enable.rewriting", required = false) Boolean cdnConfigEnableRewriting,@ApiParam(value = "") @Valid @RequestParam(value = "cdn.config.path.prefixes", required = false) List<String> cdnConfigPathPrefixes,@ApiParam(value = "") @Valid @RequestParam(value = "cdn.config.cdnttl", required = false) Integer cdnConfigCdnttl,@ApiParam(value = "") @Valid @RequestParam(value = "cdn.config.application.protocol", required = false) String cdnConfigApplicationProtocol) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cdn.config.distribution.domain\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"cdn.config.path.prefixes\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"cdn.config.enable.rewriting\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"cdn.config.cdnttl\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cdn.config.application.protocol\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqCdnRewriterImplCDNRewriter", notes = "", response = ComAdobeCqCdnRewriterImplCDNRewriterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqCdnRewriterImplCDNRewriterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNRewriter",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqCdnRewriterImplCDNRewriterInfo> comAdobeCqCdnRewriterImplCDNRewriter(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "service.ranking", required = false) Integer serviceRanking,@ApiParam(value = "") @Valid @RequestParam(value = "cdnrewriter.attributes", required = false) List<String> cdnrewriterAttributes,@ApiParam(value = "") @Valid @RequestParam(value = "cdn.rewriter.distribution.domain", required = false) String cdnRewriterDistributionDomain) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cdnrewriter.attributes\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"cdn.rewriter.distribution.domain\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"service.ranking\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle", notes = "", response = ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.cloudconfig.core.impl.ConfigurationReplicationEventHandler",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo> comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "flush.agents", required = false) List<String> flushAgents) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"flush.agents\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqCommerceImplAssetDynamicImageHandler", notes = "", response = ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.commerce.impl.asset.DynamicImageHandler",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo> comAdobeCqCommerceImplAssetDynamicImageHandler(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.commerce.asset.handler.active", required = false) Boolean cqCommerceAssetHandlerActive,@ApiParam(value = "") @Valid @RequestParam(value = "cq.commerce.asset.handler.name", required = false) String cqCommerceAssetHandlerName) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.commerce.asset.handler.active\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"cq.commerce.asset.handler.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl", notes = "", response = ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.commerce.impl.asset.ProductAssetHandlerProviderImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo> comAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.commerce.asset.handler.fallback", required = false) String cqCommerceAssetHandlerFallback) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.commerce.asset.handler.fallback\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqCommerceImplAssetStaticImageHandler", notes = "", response = ComAdobeCqCommerceImplAssetStaticImageHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqCommerceImplAssetStaticImageHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.commerce.impl.asset.StaticImageHandler",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqCommerceImplAssetStaticImageHandlerInfo> comAdobeCqCommerceImplAssetStaticImageHandler(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.commerce.asset.handler.active", required = false) Boolean cqCommerceAssetHandlerActive,@ApiParam(value = "") @Valid @RequestParam(value = "cq.commerce.asset.handler.name", required = false) String cqCommerceAssetHandlerName) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.commerce.asset.handler.active\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"cq.commerce.asset.handler.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqCommerceImplAssetVideoHandler", notes = "", response = ComAdobeCqCommerceImplAssetVideoHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqCommerceImplAssetVideoHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.commerce.impl.asset.VideoHandler",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqCommerceImplAssetVideoHandlerInfo> comAdobeCqCommerceImplAssetVideoHandler(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.commerce.asset.handler.active", required = false) Boolean cqCommerceAssetHandlerActive,@ApiParam(value = "") @Valid @RequestParam(value = "cq.commerce.asset.handler.name", required = false) String cqCommerceAssetHandlerName) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.commerce.asset.handler.active\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"cq.commerce.asset.handler.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqCommerceImplPromotionPromotionManagerImpl", notes = "", response = ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.commerce.impl.promotion.PromotionManagerImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo> comAdobeCqCommerceImplPromotionPromotionManagerImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.commerce.promotion.root", required = false) String cqCommercePromotionRoot) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.commerce.promotion.root\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl", notes = "", response = ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.commerce.pim.impl.cataloggenerator.CatalogGeneratorImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo> comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.commerce.cataloggenerator.bucketsize", required = false) Integer cqCommerceCataloggeneratorBucketsize,@ApiParam(value = "") @Valid @RequestParam(value = "cq.commerce.cataloggenerator.bucketname", required = false) String cqCommerceCataloggeneratorBucketname,@ApiParam(value = "") @Valid @RequestParam(value = "cq.commerce.cataloggenerator.excludedtemplateproperties", required = false) List<String> cqCommerceCataloggeneratorExcludedtemplateproperties) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.commerce.cataloggenerator.bucketname\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"cq.commerce.cataloggenerator.bucketsize\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cq.commerce.cataloggenerator.excludedtemplateproperties\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqCommercePimImplPageEventListener", notes = "", response = ComAdobeCqCommercePimImplPageEventListenerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqCommercePimImplPageEventListenerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.commerce.pim.impl.PageEventListener",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqCommercePimImplPageEventListenerInfo> comAdobeCqCommercePimImplPageEventListener(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.commerce.pageeventlistener.enabled", required = false) Boolean cqCommercePageeventlistenerEnabled) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.commerce.pageeventlistener.enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqCommercePimImplProductfeedProductFeedServiceImpl", notes = "", response = ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.commerce.pim.impl.productfeed.ProductFeedServiceImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo> comAdobeCqCommercePimImplProductfeedProductFeedServiceImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "Feed generator algorithm", required = false) String feedGeneratorAlgorithm) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"Feed generator algorithm\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqContentinsightImplReportingServicesSettingsProvider", notes = "", response = ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.contentinsight.impl.ReportingServicesSettingsProvider",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo> comAdobeCqContentinsightImplReportingServicesSettingsProvider(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "reportingservices.url", required = false) String reportingservicesUrl) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"reportingservices.url\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqContentinsightImplServletsBrightEdgeProxyServlet", notes = "", response = ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.BrightEdgeProxyServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo> comAdobeCqContentinsightImplServletsBrightEdgeProxyServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "brightedge.url", required = false) String brightedgeUrl) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"brightedge.url\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqContentinsightImplServletsReportingServicesProxyServle", notes = "", response = ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.ReportingServicesProxyServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo> comAdobeCqContentinsightImplServletsReportingServicesProxyServle(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "reportingservices.proxy.whitelist", required = false) List<String> reportingservicesProxyWhitelist) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"reportingservices.proxy.whitelist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqDamCfmImplComponentComponentConfigImpl", notes = "", response = ComAdobeCqDamCfmImplComponentComponentConfigImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqDamCfmImplComponentComponentConfigImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.dam.cfm.impl.component.ComponentConfigImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqDamCfmImplComponentComponentConfigImplInfo> comAdobeCqDamCfmImplComponentComponentConfigImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "dam.cfm.component.resourceType", required = false) String damCfmComponentResourceType,@ApiParam(value = "") @Valid @RequestParam(value = "dam.cfm.component.fileReferenceProp", required = false) String damCfmComponentFileReferenceProp,@ApiParam(value = "") @Valid @RequestParam(value = "dam.cfm.component.elementsProp", required = false) String damCfmComponentElementsProp,@ApiParam(value = "") @Valid @RequestParam(value = "dam.cfm.component.variationProp", required = false) String damCfmComponentVariationProp) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"dam.cfm.component.variationProp\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"dam.cfm.component.fileReferenceProp\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"dam.cfm.component.resourceType\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"dam.cfm.component.elementsProp\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqDamCfmImplConfFeatureConfigImpl", notes = "", response = ComAdobeCqDamCfmImplConfFeatureConfigImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqDamCfmImplConfFeatureConfigImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.dam.cfm.impl.conf.FeatureConfigImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqDamCfmImplConfFeatureConfigImplInfo> comAdobeCqDamCfmImplConfFeatureConfigImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "dam.cfm.resourceTypes", required = false) List<String> damCfmResourceTypes,@ApiParam(value = "") @Valid @RequestParam(value = "dam.cfm.referenceProperties", required = false) List<String> damCfmReferenceProperties) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"dam.cfm.referenceProperties\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"dam.cfm.resourceTypes\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqDamCfmImplContentRewriterAssetProcessor", notes = "", response = ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.AssetProcessor",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo> comAdobeCqDamCfmImplContentRewriterAssetProcessor(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "pipeline.type", required = false) String pipelineType) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"pipeline.type\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqDamCfmImplContentRewriterParRangeFilter", notes = "", response = ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.ParRangeFilter",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo> comAdobeCqDamCfmImplContentRewriterParRangeFilter(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "pipeline.type", required = false) String pipelineType) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"pipeline.type\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqDamCfmImplContentRewriterPayloadFilter", notes = "", response = ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.PayloadFilter",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo> comAdobeCqDamCfmImplContentRewriterPayloadFilter(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "pipeline.type", required = false) String pipelineType) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"pipeline.type\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqDamDmProcessImagePTiffManagerImpl", notes = "", response = ComAdobeCqDamDmProcessImagePTiffManagerImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqDamDmProcessImagePTiffManagerImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.dam.dm.process.image.PTiffManagerImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqDamDmProcessImagePTiffManagerImplInfo> comAdobeCqDamDmProcessImagePTiffManagerImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "maxMemory", required = false) Integer maxMemory) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"maxMemory\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker", notes = "", response = ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.dam.ips.impl.replication.trigger.ReplicateOnModifyWorker",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo> comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "dmreplicateonmodify.enabled", required = false) Boolean dmreplicateonmodifyEnabled,@ApiParam(value = "") @Valid @RequestParam(value = "dmreplicateonmodify.forcesyncdeletes", required = false) Boolean dmreplicateonmodifyForcesyncdeletes) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"dmreplicateonmodify.enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"dmreplicateonmodify.forcesyncdeletes\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqDamMacSyncHelperImplMACSyncClientImpl", notes = "", response = ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.dam.mac.sync.helper.impl.MACSyncClientImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo> comAdobeCqDamMacSyncHelperImplMACSyncClientImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.dam.mac.sync.client.so.timeout", required = false) Integer comAdobeDamMacSyncClientSoTimeout) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"com.adobe.dam.mac.sync.client.so.timeout\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqDamMacSyncImplDAMSyncServiceImpl", notes = "", response = ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.dam.mac.sync.impl.DAMSyncServiceImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo> comAdobeCqDamMacSyncImplDAMSyncServiceImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.dam.mac.sync.damsyncservice.registered_paths", required = false) List<String> comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.dam.mac.sync.damsyncservice.sync.renditions", required = false) Boolean comAdobeCqDamMacSyncDamsyncserviceSyncRenditions,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.dam.mac.sync.damsyncservice.replicate.thread.wait.ms", required = false) Integer comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.dam.mac.sync.damsyncservice.platform", required = false) String comAdobeCqDamMacSyncDamsyncservicePlatform) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"com.adobe.cq.dam.mac.sync.damsyncservice.replicate.thread.wait.ms\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"com.adobe.cq.dam.mac.sync.damsyncservice.sync.renditions\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"com.adobe.cq.dam.mac.sync.damsyncservice.platform\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"com.adobe.cq.dam.mac.sync.damsyncservice.registered_paths\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqDamProcessorNuiImplNuiAssetProcessor", notes = "", response = ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.dam.processor.nui.impl.NuiAssetProcessor",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo> comAdobeCqDamProcessorNuiImplNuiAssetProcessor(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "nuiEnabled", required = false) Boolean nuiEnabled,@ApiParam(value = "") @Valid @RequestParam(value = "nuiServiceUrl", required = false) String nuiServiceUrl,@ApiParam(value = "") @Valid @RequestParam(value = "nuiApiKey", required = false) String nuiApiKey) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"nuiServiceUrl\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"nuiApiKey\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"nuiEnabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqDamS7imagingImplIsImageServerComponent", notes = "", response = ComAdobeCqDamS7imagingImplIsImageServerComponentInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqDamS7imagingImplIsImageServerComponentInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.dam.s7imaging.impl.is.ImageServerComponent",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqDamS7imagingImplIsImageServerComponentInfo> comAdobeCqDamS7imagingImplIsImageServerComponent(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "TcpPort", required = false) String tcpPort,@ApiParam(value = "") @Valid @RequestParam(value = "AllowRemoteAccess", required = false) Boolean allowRemoteAccess,@ApiParam(value = "") @Valid @RequestParam(value = "MaxRenderRgnPixels", required = false) String maxRenderRgnPixels,@ApiParam(value = "") @Valid @RequestParam(value = "MaxMessageSize", required = false) String maxMessageSize,@ApiParam(value = "") @Valid @RequestParam(value = "RandomAccessUrlTimeout", required = false) Integer randomAccessUrlTimeout,@ApiParam(value = "") @Valid @RequestParam(value = "WorkerThreads", required = false) Integer workerThreads) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"MaxRenderRgnPixels\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"RandomAccessUrlTimeout\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"AllowRemoteAccess\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"TcpPort\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"MaxMessageSize\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"WorkerThreads\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqDamS7imagingImplPsPlatformServerServlet", notes = "", response = ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.dam.s7imaging.impl.ps.PlatformServerServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo> comAdobeCqDamS7imagingImplPsPlatformServerServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cache.enable", required = false) Boolean cacheEnable,@ApiParam(value = "") @Valid @RequestParam(value = "cache.rootPaths", required = false) List<String> cacheRootPaths,@ApiParam(value = "") @Valid @RequestParam(value = "cache.maxSize", required = false) Integer cacheMaxSize,@ApiParam(value = "") @Valid @RequestParam(value = "cache.maxEntries", required = false) Integer cacheMaxEntries) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cache.enable\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"cache.rootPaths\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"cache.maxEntries\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cache.maxSize\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqDamWebdavImplIoAssetIOHandler", notes = "", response = ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.AssetIOHandler",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo> comAdobeCqDamWebdavImplIoAssetIOHandler(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "service.ranking", required = false) Integer serviceRanking,@ApiParam(value = "") @Valid @RequestParam(value = "pathPrefix", required = false) String pathPrefix,@ApiParam(value = "") @Valid @RequestParam(value = "createVersion", required = false) Boolean createVersion) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"createVersion\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"service.ranking\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"pathPrefix\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob", notes = "", response = ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.DamWebdavVersionLinkingJob",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo> comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.webdav.version.linking.enable", required = false) Boolean cqDamWebdavVersionLinkingEnable,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.webdav.version.linking.scheduler.period", required = false) Integer cqDamWebdavVersionLinkingSchedulerPeriod,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.webdav.version.linking.staging.timeout", required = false) Integer cqDamWebdavVersionLinkingStagingTimeout) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.dam.webdav.version.linking.enable\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"cq.dam.webdav.version.linking.scheduler.period\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cq.dam.webdav.version.linking.staging.timeout\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqDamWebdavImplIoSpecialFilesHandler", notes = "", response = ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.SpecialFilesHandler",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo> comAdobeCqDamWebdavImplIoSpecialFilesHandler(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "com.day.cq.dam.core.impl.io.SpecialFilesHandler.filepatters", required = false) List<String> comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"com.day.cq.dam.core.impl.io.SpecialFilesHandler.filepatters\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqDeserfwImplDeserializationFirewallImpl", notes = "", response = ComAdobeCqDeserfwImplDeserializationFirewallImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqDeserfwImplDeserializationFirewallImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.deserfw.impl.DeserializationFirewallImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqDeserfwImplDeserializationFirewallImplInfo> comAdobeCqDeserfwImplDeserializationFirewallImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "firewall.deserialization.whitelist", required = false) List<String> firewallDeserializationWhitelist,@ApiParam(value = "") @Valid @RequestParam(value = "firewall.deserialization.blacklist", required = false) List<String> firewallDeserializationBlacklist,@ApiParam(value = "") @Valid @RequestParam(value = "firewall.deserialization.diagnostics", required = false) String firewallDeserializationDiagnostics) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"firewall.deserialization.blacklist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"firewall.deserialization.whitelist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"firewall.deserialization.diagnostics\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqDtmImplServiceDTMWebServiceImpl", notes = "", response = ComAdobeCqDtmImplServiceDTMWebServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqDtmImplServiceDTMWebServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.dtm.impl.service.DTMWebServiceImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqDtmImplServiceDTMWebServiceImplInfo> comAdobeCqDtmImplServiceDTMWebServiceImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "connection.timeout", required = false) Integer connectionTimeout,@ApiParam(value = "") @Valid @RequestParam(value = "socket.timeout", required = false) Integer socketTimeout) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"connection.timeout\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"socket.timeout\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqDtmImplServletsDTMDeployHookServlet", notes = "", response = ComAdobeCqDtmImplServletsDTMDeployHookServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqDtmImplServletsDTMDeployHookServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.dtm.impl.servlets.DTMDeployHookServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqDtmImplServletsDTMDeployHookServletInfo> comAdobeCqDtmImplServletsDTMDeployHookServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "dtm.staging.ip.whitelist", required = false) List<String> dtmStagingIpWhitelist,@ApiParam(value = "") @Valid @RequestParam(value = "dtm.production.ip.whitelist", required = false) List<String> dtmProductionIpWhitelist) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"dtm.staging.ip.whitelist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"dtm.production.ip.whitelist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqDtmReactorImplServiceWebServiceImpl", notes = "", response = ComAdobeCqDtmReactorImplServiceWebServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqDtmReactorImplServiceWebServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.dtm.reactor.impl.service.WebServiceImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqDtmReactorImplServiceWebServiceImplInfo> comAdobeCqDtmReactorImplServiceWebServiceImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "endpointUri", required = false) String endpointUri,@ApiParam(value = "") @Valid @RequestParam(value = "connectionTimeout", required = false) Integer connectionTimeout,@ApiParam(value = "") @Valid @RequestParam(value = "socketTimeout", required = false) Integer socketTimeout) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"socketTimeout\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"endpointUri\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"connectionTimeout\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqExperiencelogImplExperienceLogConfigServlet", notes = "", response = ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.experiencelog.impl.ExperienceLogConfigServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo> comAdobeCqExperiencelogImplExperienceLogConfigServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "enabled", required = false) Boolean enabled,@ApiParam(value = "") @Valid @RequestParam(value = "disabledForGroups", required = false) List<String> disabledForGroups) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"additionalProperties\" : \"additionalProperties\",  \"title\" : \"title\",  \"properties\" : {    \"enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"disabledForGroups\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqHcContentPackagesHealthCheck", notes = "", response = ComAdobeCqHcContentPackagesHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqHcContentPackagesHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.hc.ContentPackagesHealthCheck",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqHcContentPackagesHealthCheckInfo> comAdobeCqHcContentPackagesHealthCheck(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "hc.name", required = false) String hcName,@ApiParam(value = "") @Valid @RequestParam(value = "hc.tags", required = false) List<String> hcTags,@ApiParam(value = "") @Valid @RequestParam(value = "hc.mbean.name", required = false) String hcMbeanName,@ApiParam(value = "") @Valid @RequestParam(value = "package.names", required = false) List<String> packageNames) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"hc.tags\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"hc.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"package.names\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"hc.mbean.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqHistoryImplHistoryRequestFilter", notes = "", response = ComAdobeCqHistoryImplHistoryRequestFilterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqHistoryImplHistoryRequestFilterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.history.impl.HistoryRequestFilter",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqHistoryImplHistoryRequestFilterInfo> comAdobeCqHistoryImplHistoryRequestFilter(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "history.requestFilter.excludedSelectors", required = false) List<String> historyRequestFilterExcludedSelectors,@ApiParam(value = "") @Valid @RequestParam(value = "history.requestFilter.excludedExtensions", required = false) List<String> historyRequestFilterExcludedExtensions) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"history.requestFilter.excludedExtensions\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"history.requestFilter.excludedSelectors\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqHistoryImplHistoryServiceImpl", notes = "", response = ComAdobeCqHistoryImplHistoryServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqHistoryImplHistoryServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.history.impl.HistoryServiceImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqHistoryImplHistoryServiceImplInfo> comAdobeCqHistoryImplHistoryServiceImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "history.service.resourceTypes", required = false) List<String> historyServiceResourceTypes,@ApiParam(value = "") @Valid @RequestParam(value = "history.service.pathFilter", required = false) List<String> historyServicePathFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"additionalProperties\" : \"additionalProperties\",  \"title\" : \"title\",  \"properties\" : {    \"history.service.resourceTypes\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"history.service.pathFilter\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqInboxImplTypeproviderItemTypeProvider", notes = "", response = ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.inbox.impl.typeprovider.ItemTypeProvider",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo> comAdobeCqInboxImplTypeproviderItemTypeProvider(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "inbox.impl.typeprovider.registrypaths", required = false) List<String> inboxImplTypeproviderRegistrypaths,@ApiParam(value = "") @Valid @RequestParam(value = "inbox.impl.typeprovider.legacypaths", required = false) List<String> inboxImplTypeproviderLegacypaths,@ApiParam(value = "") @Valid @RequestParam(value = "inbox.impl.typeprovider.defaulturl.failureitem", required = false) String inboxImplTypeproviderDefaulturlFailureitem,@ApiParam(value = "") @Valid @RequestParam(value = "inbox.impl.typeprovider.defaulturl.workitem", required = false) String inboxImplTypeproviderDefaulturlWorkitem,@ApiParam(value = "") @Valid @RequestParam(value = "inbox.impl.typeprovider.defaulturl.task", required = false) String inboxImplTypeproviderDefaulturlTask) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"inbox.impl.typeprovider.defaulturl.workitem\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"inbox.impl.typeprovider.defaulturl.task\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"inbox.impl.typeprovider.legacypaths\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"inbox.impl.typeprovider.defaulturl.failureitem\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"inbox.impl.typeprovider.registrypaths\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqProjectsImplServletProjectImageServlet", notes = "", response = ComAdobeCqProjectsImplServletProjectImageServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqProjectsImplServletProjectImageServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.projects.impl.servlet.ProjectImageServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqProjectsImplServletProjectImageServletInfo> comAdobeCqProjectsImplServletProjectImageServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "image.quality", required = false) String imageQuality,@ApiParam(value = "") @Valid @RequestParam(value = "image.supported.resolutions", required = false) String imageSupportedResolutions) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"image.quality\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"image.supported.resolutions\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqProjectsPurgeScheduler", notes = "", response = ComAdobeCqProjectsPurgeSchedulerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqProjectsPurgeSchedulerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.projects.purge.Scheduler",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqProjectsPurgeSchedulerInfo> comAdobeCqProjectsPurgeScheduler(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "scheduledpurge.name", required = false) String scheduledpurgeName,@ApiParam(value = "") @Valid @RequestParam(value = "scheduledpurge.purgeActive", required = false) Boolean scheduledpurgePurgeActive,@ApiParam(value = "") @Valid @RequestParam(value = "scheduledpurge.templates", required = false) List<String> scheduledpurgeTemplates,@ApiParam(value = "") @Valid @RequestParam(value = "scheduledpurge.purgeGroups", required = false) Boolean scheduledpurgePurgeGroups,@ApiParam(value = "") @Valid @RequestParam(value = "scheduledpurge.purgeAssets", required = false) Boolean scheduledpurgePurgeAssets,@ApiParam(value = "") @Valid @RequestParam(value = "scheduledpurge.terminateRunningWorkflows", required = false) Boolean scheduledpurgeTerminateRunningWorkflows,@ApiParam(value = "") @Valid @RequestParam(value = "scheduledpurge.daysold", required = false) Integer scheduledpurgeDaysold,@ApiParam(value = "") @Valid @RequestParam(value = "scheduledpurge.saveThreshold", required = false) Integer scheduledpurgeSaveThreshold) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"scheduledpurge.templates\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"scheduledpurge.terminateRunningWorkflows\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"scheduledpurge.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"scheduledpurge.purgeActive\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"scheduledpurge.purgeAssets\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"scheduledpurge.purgeGroups\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"scheduledpurge.saveThreshold\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"scheduledpurge.daysold\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqScheduledExporterImplScheduledExporterImpl", notes = "", response = ComAdobeCqScheduledExporterImplScheduledExporterImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqScheduledExporterImplScheduledExporterImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.scheduled.exporter.impl.ScheduledExporterImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqScheduledExporterImplScheduledExporterImplInfo> comAdobeCqScheduledExporterImplScheduledExporterImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "include.paths", required = false) List<String> includePaths,@ApiParam(value = "") @Valid @RequestParam(value = "exporter.user", required = false) String exporterUser) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"include.paths\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"exporter.user\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl", notes = "", response = ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.screens.analytics.impl.ScreensAnalyticsServiceImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo> comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.screens.analytics.impl.url", required = false) String comAdobeCqScreensAnalyticsImplUrl,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.screens.analytics.impl.apikey", required = false) String comAdobeCqScreensAnalyticsImplApikey,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.screens.analytics.impl.project", required = false) String comAdobeCqScreensAnalyticsImplProject,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.screens.analytics.impl.environment", required = false) String comAdobeCqScreensAnalyticsImplEnvironment,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.screens.analytics.impl.sendFrequency", required = false) Integer comAdobeCqScreensAnalyticsImplSendFrequency) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"com.adobe.cq.screens.analytics.impl.url\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.screens.analytics.impl.apikey\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.screens.analytics.impl.environment\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"com.adobe.cq.screens.analytics.impl.project\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.screens.analytics.impl.sendFrequency\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqScreensDeviceImplDeviceService", notes = "", response = ComAdobeCqScreensDeviceImplDeviceServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqScreensDeviceImplDeviceServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.screens.device.impl.DeviceService",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqScreensDeviceImplDeviceServiceInfo> comAdobeCqScreensDeviceImplDeviceService(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.aem.screens.player.pingfrequency", required = false) Integer comAdobeAemScreensPlayerPingfrequency,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.aem.screens.device.pasword.specialchars", required = false) String comAdobeAemScreensDevicePaswordSpecialchars,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.aem.screens.device.pasword.minlowercasechars", required = false) Integer comAdobeAemScreensDevicePaswordMinlowercasechars,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.aem.screens.device.pasword.minuppercasechars", required = false) Integer comAdobeAemScreensDevicePaswordMinuppercasechars,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.aem.screens.device.pasword.minnumberchars", required = false) Integer comAdobeAemScreensDevicePaswordMinnumberchars,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.aem.screens.device.pasword.minspecialchars", required = false) Integer comAdobeAemScreensDevicePaswordMinspecialchars,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.aem.screens.device.pasword.minlength", required = false) Integer comAdobeAemScreensDevicePaswordMinlength) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"com.adobe.aem.screens.device.pasword.specialchars\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.aem.screens.device.pasword.minnumberchars\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"com.adobe.aem.screens.device.pasword.minlowercasechars\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"com.adobe.aem.screens.device.pasword.minuppercasechars\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"com.adobe.aem.screens.player.pingfrequency\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"com.adobe.aem.screens.device.pasword.minspecialchars\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"com.adobe.aem.screens.device.pasword.minlength\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl", notes = "", response = ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.screens.device.registration.impl.RegistrationServiceImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo> comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "deviceRegistrationTimeout", required = false) Integer deviceRegistrationTimeout) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"deviceRegistrationTimeout\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqScreensImplHandlerChannelsUpdateHandler", notes = "", response = ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.screens.impl.handler.ChannelsUpdateHandler",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo> comAdobeCqScreensImplHandlerChannelsUpdateHandler(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.pagesupdatehandler.imageresourcetypes", required = false) List<String> cqPagesupdatehandlerImageresourcetypes,@ApiParam(value = "") @Valid @RequestParam(value = "cq.pagesupdatehandler.productresourcetypes", required = false) List<String> cqPagesupdatehandlerProductresourcetypes,@ApiParam(value = "") @Valid @RequestParam(value = "cq.pagesupdatehandler.videoresourcetypes", required = false) List<String> cqPagesupdatehandlerVideoresourcetypes,@ApiParam(value = "") @Valid @RequestParam(value = "cq.pagesupdatehandler.dynamicsequenceresourcetypes", required = false) List<String> cqPagesupdatehandlerDynamicsequenceresourcetypes,@ApiParam(value = "") @Valid @RequestParam(value = "cq.pagesupdatehandler.previewmodepaths", required = false) List<String> cqPagesupdatehandlerPreviewmodepaths) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.pagesupdatehandler.productresourcetypes\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"cq.pagesupdatehandler.dynamicsequenceresourcetypes\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"cq.pagesupdatehandler.videoresourcetypes\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"cq.pagesupdatehandler.imageresourcetypes\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"cq.pagesupdatehandler.previewmodepaths\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob", notes = "", response = ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.screens.impl.jobs.DistributedDevicesStatiUpdateJob",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo> comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "scheduler.expression", required = false) String schedulerExpression) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"scheduler.expression\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqScreensImplRemoteImplDistributedHttpClientImpl", notes = "", response = ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.screens.impl.remote.impl.DistributedHttpClientImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo> comAdobeCqScreensImplRemoteImplDistributedHttpClientImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.aem.screens.impl.remote.request_timeout", required = false) Integer comAdobeAemScreensImplRemoteRequestTimeout) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"com.adobe.aem.screens.impl.remote.request_timeout\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqScreensImplScreensChannelPostProcessor", notes = "", response = ComAdobeCqScreensImplScreensChannelPostProcessorInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqScreensImplScreensChannelPostProcessorInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.screens.impl.ScreensChannelPostProcessor",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqScreensImplScreensChannelPostProcessorInfo> comAdobeCqScreensImplScreensChannelPostProcessor(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "screens.channels.properties.to.remove", required = false) List<String> screensChannelsPropertiesToRemove) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"screens.channels.properties.to.remove\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl", notes = "", response = ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo> comAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.projectPath", required = false) List<String> comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.scheduleFrequency", required = false) String comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.pingTimeout", required = false) Integer comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.recipients", required = false) String comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpserver", required = false) String comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpport", required = false) Integer comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.usetls", required = false) Boolean comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.username", required = false) String comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.password", required = false) String comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.password\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.pingTimeout\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpserver\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.projectPath\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.recipients\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.scheduleFrequency\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpport\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.usetls\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.username\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqScreensMqActivemqImplArtemisJMSProvider", notes = "", response = ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.screens.mq.activemq.impl.ArtemisJMSProvider",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo> comAdobeCqScreensMqActivemqImplArtemisJMSProvider(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "service.ranking", required = false) Integer serviceRanking,@ApiParam(value = "") @Valid @RequestParam(value = "global.size", required = false) Integer globalSize,@ApiParam(value = "") @Valid @RequestParam(value = "max.disk.usage", required = false) Integer maxDiskUsage,@ApiParam(value = "") @Valid @RequestParam(value = "persistence.enabled", required = false) Boolean persistenceEnabled,@ApiParam(value = "") @Valid @RequestParam(value = "thread.pool.max.size", required = false) Integer threadPoolMaxSize,@ApiParam(value = "") @Valid @RequestParam(value = "scheduled.thread.pool.max.size", required = false) Integer scheduledThreadPoolMaxSize,@ApiParam(value = "") @Valid @RequestParam(value = "graceful.shutdown.timeout", required = false) Integer gracefulShutdownTimeout,@ApiParam(value = "") @Valid @RequestParam(value = "queues", required = false) List<String> queues,@ApiParam(value = "") @Valid @RequestParam(value = "topics", required = false) List<String> topics,@ApiParam(value = "") @Valid @RequestParam(value = "addresses.max.delivery.attempts", required = false) Integer addressesMaxDeliveryAttempts,@ApiParam(value = "") @Valid @RequestParam(value = "addresses.expiry.delay", required = false) Integer addressesExpiryDelay,@ApiParam(value = "") @Valid @RequestParam(value = "addresses.address.full.message.policy", required = false) String addressesAddressFullMessagePolicy,@ApiParam(value = "") @Valid @RequestParam(value = "addresses.max.size.bytes", required = false) Integer addressesMaxSizeBytes,@ApiParam(value = "") @Valid @RequestParam(value = "addresses.page.size.bytes", required = false) Integer addressesPageSizeBytes,@ApiParam(value = "") @Valid @RequestParam(value = "addresses.page.cache.max.size", required = false) Integer addressesPageCacheMaxSize,@ApiParam(value = "") @Valid @RequestParam(value = "cluster.user", required = false) String clusterUser,@ApiParam(value = "") @Valid @RequestParam(value = "cluster.password", required = false) String clusterPassword,@ApiParam(value = "") @Valid @RequestParam(value = "cluster.call.timeout", required = false) Integer clusterCallTimeout,@ApiParam(value = "") @Valid @RequestParam(value = "cluster.call.failover.timeout", required = false) Integer clusterCallFailoverTimeout,@ApiParam(value = "") @Valid @RequestParam(value = "cluster.client.failure.check.period", required = false) Integer clusterClientFailureCheckPeriod,@ApiParam(value = "") @Valid @RequestParam(value = "cluster.notification.attempts", required = false) Integer clusterNotificationAttempts,@ApiParam(value = "") @Valid @RequestParam(value = "cluster.notification.interval", required = false) Integer clusterNotificationInterval,@ApiParam(value = "") @Valid @RequestParam(value = "id.cache.size", required = false) Integer idCacheSize,@ApiParam(value = "") @Valid @RequestParam(value = "cluster.confirmation.window.size", required = false) Integer clusterConfirmationWindowSize,@ApiParam(value = "") @Valid @RequestParam(value = "cluster.connection.ttl", required = false) Integer clusterConnectionTtl,@ApiParam(value = "") @Valid @RequestParam(value = "cluster.duplicate.detection", required = false) Boolean clusterDuplicateDetection,@ApiParam(value = "") @Valid @RequestParam(value = "cluster.initial.connect.attempts", required = false) Integer clusterInitialConnectAttempts,@ApiParam(value = "") @Valid @RequestParam(value = "cluster.max.retry.interval", required = false) Integer clusterMaxRetryInterval,@ApiParam(value = "") @Valid @RequestParam(value = "cluster.min.large.message.size", required = false) Integer clusterMinLargeMessageSize,@ApiParam(value = "") @Valid @RequestParam(value = "cluster.producer.window.size", required = false) Integer clusterProducerWindowSize,@ApiParam(value = "") @Valid @RequestParam(value = "cluster.reconnect.attempts", required = false) Integer clusterReconnectAttempts,@ApiParam(value = "") @Valid @RequestParam(value = "cluster.retry.interval", required = false) Integer clusterRetryInterval,@ApiParam(value = "") @Valid @RequestParam(value = "cluster.retry.interval.multiplier", required = false) BigDecimal clusterRetryIntervalMultiplier) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cluster.call.timeout\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cluster.notification.interval\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cluster.confirmation.window.size\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"global.size\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"addresses.address.full.message.policy\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"cluster.producer.window.size\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"addresses.page.size.bytes\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cluster.min.large.message.size\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"scheduled.thread.pool.max.size\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cluster.call.failover.timeout\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cluster.max.retry.interval\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"graceful.shutdown.timeout\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cluster.user\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"cluster.duplicate.detection\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"max.disk.usage\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cluster.initial.connect.attempts\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"id.cache.size\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cluster.retry.interval.multiplier\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : 6.02745618307040320615897144307382404804229736328125    },    \"topics\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"addresses.max.size.bytes\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cluster.client.failure.check.period\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"addresses.page.cache.max.size\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cluster.reconnect.attempts\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cluster.retry.interval\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cluster.connection.ttl\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"queues\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"persistence.enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"addresses.max.delivery.attempts\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cluster.password\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"cluster.notification.attempts\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"addresses.expiry.delay\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"service.ranking\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"thread.pool.max.size\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl", notes = "", response = ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo> comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.projectPath", required = false) List<String> comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.scheduleFrequency", required = false) String comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.projectPath\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.scheduleFrequency\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl", notes = "", response = ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.OfflineContentServiceImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo> comAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "disableSmartSync", required = false) Boolean disableSmartSync) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"disableSmartSync\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqScreensSegmentationImplSegmentationFeatureFlag", notes = "", response = ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.screens.segmentation.impl.SegmentationFeatureFlag",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo> comAdobeCqScreensSegmentationImplSegmentationFeatureFlag(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "enableDataTriggeredContent", required = false) Boolean enableDataTriggeredContent) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"enableDataTriggeredContent\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh", notes = "", response = ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.security.hc.bundles.impl.HtmlLibraryManagerConfigHealthCheck",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo> comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "hc.tags", required = false) List<String> hcTags) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"hc.tags\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck", notes = "", response = ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.security.hc.bundles.impl.WcmFilterHealthCheck",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo> comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "hc.tags", required = false) List<String> hcTags) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"hc.tags\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck", notes = "", response = ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.security.hc.dispatcher.impl.DispatcherAccessHealthCheck",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo> comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "hc.tags", required = false) List<String> hcTags,@ApiParam(value = "") @Valid @RequestParam(value = "dispatcher.address", required = false) String dispatcherAddress,@ApiParam(value = "") @Valid @RequestParam(value = "dispatcher.filter.allowed", required = false) List<String> dispatcherFilterAllowed,@ApiParam(value = "") @Valid @RequestParam(value = "dispatcher.filter.blocked", required = false) List<String> dispatcherFilterBlocked) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"dispatcher.filter.allowed\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"dispatcher.filter.blocked\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"hc.tags\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"dispatcher.address\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSecurityHcPackagesImplExampleContentHealthCheck", notes = "", response = ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.security.hc.packages.impl.ExampleContentHealthCheck",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo> comAdobeCqSecurityHcPackagesImplExampleContentHealthCheck(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "hc.tags", required = false) List<String> hcTags) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"additionalProperties\" : \"additionalProperties\",  \"title\" : \"title\",  \"properties\" : {    \"hc.tags\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSecurityHcWebserverImplClickjackingHealthCheck", notes = "", response = ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.security.hc.webserver.impl.ClickjackingHealthCheck",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo> comAdobeCqSecurityHcWebserverImplClickjackingHealthCheck(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "hc.tags", required = false) List<String> hcTags,@ApiParam(value = "") @Valid @RequestParam(value = "webserver.address", required = false) String webserverAddress) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"webserver.address\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"hc.tags\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialAccountverificationImplAccountManagementConfigIm", notes = "", response = ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.accountverification.impl.AccountManagementConfigImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo> comAdobeCqSocialAccountverificationImplAccountManagementConfigIm(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "enable", required = false) Boolean enable,@ApiParam(value = "") @Valid @RequestParam(value = "ttl1", required = false) Integer ttl1,@ApiParam(value = "") @Valid @RequestParam(value = "ttl2", required = false) Integer ttl2) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"ttl2\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"ttl1\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"enable\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialActivitystreamsClientImplSocialActivityComponen", notes = "", response = ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityComponentFactoryImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo> comAdobeCqSocialActivitystreamsClientImplSocialActivityComponen(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "priority", required = false) Integer priority) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"priority\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo", notes = "", response = ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityStreamComponentFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo> comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "priority", required = false) Integer priority) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"priority\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialActivitystreamsListenerImplEventListenerHandler", notes = "", response = ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.EventListenerHandler",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo> comAdobeCqSocialActivitystreamsListenerImplEventListenerHandler(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "event.topics", required = false) String eventTopics,@ApiParam(value = "") @Valid @RequestParam(value = "event.filter", required = false) String eventFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"event.topics\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"event.filter\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialActivitystreamsListenerImplModerationEventExten", notes = "", response = ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ModerationEventExtension",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo> comAdobeCqSocialActivitystreamsListenerImplModerationEventExten(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "accepted", required = false) Boolean accepted,@ApiParam(value = "") @Valid @RequestParam(value = "ranked", required = false) Integer ranked) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"accepted\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"ranked\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS", notes = "", response = ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.RatingEventActivitySuppressor",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo> comAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "ranking", required = false) Integer ranking,@ApiParam(value = "") @Valid @RequestParam(value = "enable", required = false) Boolean enable) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"enable\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"ranking\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialActivitystreamsListenerImplResourceActivityStre", notes = "", response = ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ResourceActivityStreamProviderFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo> comAdobeCqSocialActivitystreamsListenerImplResourceActivityStre(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "streamPath", required = false) String streamPath,@ApiParam(value = "") @Valid @RequestParam(value = "streamName", required = false) String streamName) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"streamPath\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"streamName\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI", notes = "", response = ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.calendar.client.endpoints.impl.CalendarOperationsImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo> comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "MaxRetry", required = false) Integer maxRetry,@ApiParam(value = "") @Valid @RequestParam(value = "fieldWhitelist", required = false) List<String> fieldWhitelist,@ApiParam(value = "") @Valid @RequestParam(value = "attachmentTypeBlacklist", required = false) List<String> attachmentTypeBlacklist) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"fieldWhitelist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"attachmentTypeBlacklist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"MaxRetry\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialCalendarClientOperationextensionsEventAttachmen", notes = "", response = ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.calendar.client.operationextensions.EventAttachment",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo> comAdobeCqSocialCalendarClientOperationextensionsEventAttachmen(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "attachmentTypeBlacklist", required = false) String attachmentTypeBlacklist,@ApiParam(value = "") @Valid @RequestParam(value = "extension.order", required = false) Integer extensionOrder) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"attachmentTypeBlacklist\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"extension.order\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialCalendarServletsTimeZoneServlet", notes = "", response = ComAdobeCqSocialCalendarServletsTimeZoneServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCalendarServletsTimeZoneServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.calendar.servlets.TimeZoneServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialCalendarServletsTimeZoneServletInfo> comAdobeCqSocialCalendarServletsTimeZoneServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "timezones.expirytime", required = false) Integer timezonesExpirytime) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"timezones.expirytime\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent", notes = "", response = ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentDeleteEventActivitySuppressor",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo> comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "ranking", required = false) Integer ranking) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"ranking\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe", notes = "", response = ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentOperationService",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo> comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "fieldWhitelist", required = false) List<String> fieldWhitelist,@ApiParam(value = "") @Valid @RequestParam(value = "attachmentTypeBlacklist", required = false) List<String> attachmentTypeBlacklist) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"fieldWhitelist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"attachmentTypeBlacklist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati", notes = "", response = ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.TranslationOperationService",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo> comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "fieldWhitelist", required = false) List<String> fieldWhitelist,@ApiParam(value = "") @Valid @RequestParam(value = "attachmentTypeBlacklist", required = false) List<String> attachmentTypeBlacklist) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"fieldWhitelist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"attachmentTypeBlacklist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC", notes = "", response = ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.commons.comments.listing.impl.SearchCommentSocialComponentListProvider",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo> comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "numUserLimit", required = false) Integer numUserLimit) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"numUserLimit\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos", notes = "", response = ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.commons.comments.scheduler.impl.SearchScheduledPosts",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo> comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "enableScheduledPostsSearch", required = false) Boolean enableScheduledPostsSearch,@ApiParam(value = "") @Valid @RequestParam(value = "numberOfMinutes", required = false) Integer numberOfMinutes,@ApiParam(value = "") @Valid @RequestParam(value = "maxSearchLimit", required = false) Integer maxSearchLimit) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"maxSearchLimit\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"enableScheduledPostsSearch\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"numberOfMinutes\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialCommonsCorsCORSAuthenticationFilter", notes = "", response = ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.commons.cors.CORSAuthenticationFilter",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo> comAdobeCqSocialCommonsCorsCORSAuthenticationFilter(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cors.enabling", required = false) Boolean corsEnabling) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cors.enabling\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider", notes = "", response = ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.AndroidEmailClientProvider",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo> comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "priorityOrder", required = false) Integer priorityOrder,@ApiParam(value = "") @Valid @RequestParam(value = "replyEmailPatterns", required = false) List<String> replyEmailPatterns) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"priorityOrder\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"replyEmailPatterns\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl", notes = "", response = ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailBuilderImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo> comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "context.path", required = false) String contextPath) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"context.path\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener", notes = "", response = ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailEventListener",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo> comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "event.topics", required = false) String eventTopics) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"event.topics\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider", notes = "", response = ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CustomEmailClientProvider",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo> comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "priorityOrder", required = false) Integer priorityOrder,@ApiParam(value = "") @Valid @RequestParam(value = "replyEmailPatterns", required = false) List<String> replyEmailPatterns) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"priorityOrder\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"replyEmailPatterns\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp", notes = "", response = ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailQuotedTextPatternsImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo> comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "pattern.time", required = false) String patternTime,@ApiParam(value = "") @Valid @RequestParam(value = "pattern.newline", required = false) String patternNewline,@ApiParam(value = "") @Valid @RequestParam(value = "pattern.dayOfMonth", required = false) String patternDayOfMonth,@ApiParam(value = "") @Valid @RequestParam(value = "pattern.month", required = false) String patternMonth,@ApiParam(value = "") @Valid @RequestParam(value = "pattern.year", required = false) String patternYear,@ApiParam(value = "") @Valid @RequestParam(value = "pattern.date", required = false) String patternDate,@ApiParam(value = "") @Valid @RequestParam(value = "pattern.dateTime", required = false) String patternDateTime,@ApiParam(value = "") @Valid @RequestParam(value = "pattern.email", required = false) String patternEmail) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"pattern.time\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"pattern.email\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"pattern.month\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"pattern.year\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"pattern.dayOfMonth\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"pattern.newline\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"pattern.date\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"pattern.dateTime\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp", notes = "", response = ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyConfigurationImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo> comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "email.name", required = false) String emailName,@ApiParam(value = "") @Valid @RequestParam(value = "email.createPostFromReply", required = false) Boolean emailCreatePostFromReply,@ApiParam(value = "") @Valid @RequestParam(value = "email.addCommentIdTo", required = false) String emailAddCommentIdTo,@ApiParam(value = "") @Valid @RequestParam(value = "email.subjectMaximumLength", required = false) Integer emailSubjectMaximumLength,@ApiParam(value = "") @Valid @RequestParam(value = "email.replyToAddress", required = false) String emailReplyToAddress,@ApiParam(value = "") @Valid @RequestParam(value = "email.replyToDelimiter", required = false) String emailReplyToDelimiter,@ApiParam(value = "") @Valid @RequestParam(value = "email.trackerIdPrefixInSubject", required = false) String emailTrackerIdPrefixInSubject,@ApiParam(value = "") @Valid @RequestParam(value = "email.trackerIdPrefixInBody", required = false) String emailTrackerIdPrefixInBody,@ApiParam(value = "") @Valid @RequestParam(value = "email.asHTML", required = false) Boolean emailAsHTML,@ApiParam(value = "") @Valid @RequestParam(value = "email.defaultUserName", required = false) String emailDefaultUserName,@ApiParam(value = "") @Valid @RequestParam(value = "email.templates.rootPath", required = false) String emailTemplatesRootPath) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"email.subjectMaximumLength\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"email.replyToAddress\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"email.trackerIdPrefixInSubject\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"email.addCommentIdTo\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"email.templates.rootPath\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"email.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"email.asHTML\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"email.createPostFromReply\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"email.trackerIdPrefixInBody\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"email.defaultUserName\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"email.replyToDelimiter\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter", notes = "", response = ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyImporter",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo> comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "connectProtocol", required = false) String connectProtocol) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"connectProtocol\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider", notes = "", response = ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.GmailEmailClientProvider",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo> comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "priorityOrder", required = false) Integer priorityOrder,@ApiParam(value = "") @Valid @RequestParam(value = "replyEmailPatterns", required = false) List<String> replyEmailPatterns) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"priorityOrder\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"replyEmailPatterns\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider", notes = "", response = ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.IOSEmailClientProvider",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo> comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "priorityOrder", required = false) Integer priorityOrder,@ApiParam(value = "") @Valid @RequestParam(value = "replyEmailPatterns", required = false) List<String> replyEmailPatterns) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"priorityOrder\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"replyEmailPatterns\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider", notes = "", response = ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.MacmailEmailClientProvider",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo> comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "priorityOrder", required = false) Integer priorityOrder,@ApiParam(value = "") @Valid @RequestParam(value = "replyEmailPatterns", required = false) List<String> replyEmailPatterns) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"priorityOrder\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"replyEmailPatterns\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider", notes = "", response = ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.OutLookEmailClientProvider",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo> comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "priorityOrder", required = false) Integer priorityOrder,@ApiParam(value = "") @Valid @RequestParam(value = "replyEmailPatterns", required = false) List<String> replyEmailPatterns) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"priorityOrder\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"replyEmailPatterns\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider", notes = "", response = ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.UnknownEmailClientProvider",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo> comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "replyEmailPatterns", required = false) List<String> replyEmailPatterns,@ApiParam(value = "") @Valid @RequestParam(value = "priorityOrder", required = false) Integer priorityOrder) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"priorityOrder\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"replyEmailPatterns\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider", notes = "", response = ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.YahooEmailClientProvider",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo> comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "priorityOrder", required = false) Integer priorityOrder,@ApiParam(value = "") @Valid @RequestParam(value = "replyEmailPatterns", required = false) List<String> replyEmailPatterns) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"priorityOrder\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"replyEmailPatterns\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload", notes = "", response = ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.commons.maintainance.impl.DeleteTempUGCImageUploads",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo> comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "numberOfDays", required = false) Integer numberOfDays,@ApiParam(value = "") @Valid @RequestParam(value = "ageOfFile", required = false) Integer ageOfFile) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"ageOfFile\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"numberOfDays\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl", notes = "", response = ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.commons.ugclimiter.impl.UGCLimiterServiceImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo> comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "event.topics", required = false) String eventTopics,@ApiParam(value = "") @Valid @RequestParam(value = "event.filter", required = false) String eventFilter,@ApiParam(value = "") @Valid @RequestParam(value = "verbs", required = false) List<String> verbs) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"event.topics\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"verbs\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"event.filter\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit", notes = "", response = ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.commons.ugclimitsconfig.impl.CommunityUserUGCLimitsConfigImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo> comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "enable", required = false) Boolean enable,@ApiParam(value = "") @Valid @RequestParam(value = "UGCLimit", required = false) Integer ugCLimit,@ApiParam(value = "") @Valid @RequestParam(value = "ugcLimitDuration", required = false) Integer ugcLimitDuration,@ApiParam(value = "") @Valid @RequestParam(value = "domains", required = false) List<String> domains,@ApiParam(value = "") @Valid @RequestParam(value = "toList", required = false) List<String> toList) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"ugcLimitDuration\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"enable\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"UGCLimit\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"domains\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"toList\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialConnectOauthImplFacebookProviderImpl", notes = "", response = ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.FacebookProviderImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo> comAdobeCqSocialConnectOauthImplFacebookProviderImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "oauth.provider.id", required = false) String oauthProviderId,@ApiParam(value = "") @Valid @RequestParam(value = "oauth.cloud.config.root", required = false) String oauthCloudConfigRoot,@ApiParam(value = "") @Valid @RequestParam(value = "provider.config.root", required = false) String providerConfigRoot,@ApiParam(value = "") @Valid @RequestParam(value = "provider.config.create.tags.enabled", required = false) Boolean providerConfigCreateTagsEnabled,@ApiParam(value = "") @Valid @RequestParam(value = "provider.config.user.folder", required = false) String providerConfigUserFolder,@ApiParam(value = "") @Valid @RequestParam(value = "provider.config.facebook.fetch.fields", required = false) Boolean providerConfigFacebookFetchFields,@ApiParam(value = "") @Valid @RequestParam(value = "provider.config.facebook.fields", required = false) List<String> providerConfigFacebookFields,@ApiParam(value = "") @Valid @RequestParam(value = "provider.config.refresh.userdata.enabled", required = false) Boolean providerConfigRefreshUserdataEnabled) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"provider.config.root\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"provider.config.facebook.fetch.fields\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"oauth.provider.id\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"oauth.cloud.config.root\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"provider.config.user.folder\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"provider.config.facebook.fields\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"provider.config.refresh.userdata.enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"provider.config.create.tags.enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle", notes = "", response = ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthAuthenticationHandler",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo> comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "path", required = false) List<String> path,@ApiParam(value = "") @Valid @RequestParam(value = "service.ranking", required = false) Integer serviceRanking) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"path\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"service.ranking\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper", notes = "", response = ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthUserProfileMapper",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo> comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "facebook", required = false) List<String> facebook,@ApiParam(value = "") @Valid @RequestParam(value = "twitter", required = false) List<String> twitter,@ApiParam(value = "") @Valid @RequestParam(value = "provider.config.user.folder", required = false) String providerConfigUserFolder) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"twitter\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"facebook\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"provider.config.user.folder\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialConnectOauthImplTwitterProviderImpl", notes = "", response = ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.TwitterProviderImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo> comAdobeCqSocialConnectOauthImplTwitterProviderImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "oauth.provider.id", required = false) String oauthProviderId,@ApiParam(value = "") @Valid @RequestParam(value = "oauth.cloud.config.root", required = false) String oauthCloudConfigRoot,@ApiParam(value = "") @Valid @RequestParam(value = "provider.config.root", required = false) String providerConfigRoot,@ApiParam(value = "") @Valid @RequestParam(value = "provider.config.user.folder", required = false) String providerConfigUserFolder,@ApiParam(value = "") @Valid @RequestParam(value = "provider.config.twitter.enable.params", required = false) Boolean providerConfigTwitterEnableParams,@ApiParam(value = "") @Valid @RequestParam(value = "provider.config.twitter.params", required = false) List<String> providerConfigTwitterParams,@ApiParam(value = "") @Valid @RequestParam(value = "provider.config.refresh.userdata.enabled", required = false) Boolean providerConfigRefreshUserdataEnabled) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"provider.config.root\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"provider.config.twitter.enable.params\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"oauth.provider.id\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"provider.config.twitter.params\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"oauth.cloud.config.root\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"provider.config.user.folder\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"provider.config.refresh.userdata.enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen", notes = "", response = ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.content.fragments.services.impl.CommunitiesFragmentCreationServiceImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo> comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.social.content.fragments.services.enabled", required = false) Boolean cqSocialContentFragmentsServicesEnabled,@ApiParam(value = "") @Valid @RequestParam(value = "cq.social.content.fragments.services.waitTimeSeconds", required = false) Integer cqSocialContentFragmentsServicesWaitTimeSeconds) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.social.content.fragments.services.enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"cq.social.content.fragments.services.waitTimeSeconds\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialDatastoreAsImplASResourceProviderFactory", notes = "", response = ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.datastore.as.impl.ASResourceProviderFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo> comAdobeCqSocialDatastoreAsImplASResourceProviderFactory(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "version.id", required = false) String versionId,@ApiParam(value = "") @Valid @RequestParam(value = "cache.on", required = false) Boolean cacheOn,@ApiParam(value = "") @Valid @RequestParam(value = "concurrency.level", required = false) Integer concurrencyLevel,@ApiParam(value = "") @Valid @RequestParam(value = "cache.start.size", required = false) Integer cacheStartSize,@ApiParam(value = "") @Valid @RequestParam(value = "cache.ttl", required = false) Integer cacheTtl,@ApiParam(value = "") @Valid @RequestParam(value = "cache.size", required = false) Integer cacheSize,@ApiParam(value = "") @Valid @RequestParam(value = "time.limit", required = false) Integer timeLimit) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cache.on\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"concurrency.level\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cache.size\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"version.id\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"time.limit\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cache.start.size\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cache.ttl\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory", notes = "", response = ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.datastore.op.impl.SocialMSResourceProviderFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo> comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "solr.zk.timeout", required = false) String solrZkTimeout,@ApiParam(value = "") @Valid @RequestParam(value = "solr.commit", required = false) String solrCommit,@ApiParam(value = "") @Valid @RequestParam(value = "cache.on", required = false) Boolean cacheOn,@ApiParam(value = "") @Valid @RequestParam(value = "concurrency.level", required = false) Integer concurrencyLevel,@ApiParam(value = "") @Valid @RequestParam(value = "cache.start.size", required = false) Integer cacheStartSize,@ApiParam(value = "") @Valid @RequestParam(value = "cache.ttl", required = false) Integer cacheTtl,@ApiParam(value = "") @Valid @RequestParam(value = "cache.size", required = false) Integer cacheSize) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cache.on\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"concurrency.level\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"solr.zk.timeout\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"solr.commit\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"cache.size\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cache.start.size\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cache.ttl\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor", notes = "", response = ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.datastore.rdb.impl.SocialRDBResourceProviderFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo> comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "solr.zk.timeout", required = false) String solrZkTimeout,@ApiParam(value = "") @Valid @RequestParam(value = "solr.commit", required = false) String solrCommit,@ApiParam(value = "") @Valid @RequestParam(value = "cache.on", required = false) Boolean cacheOn,@ApiParam(value = "") @Valid @RequestParam(value = "concurrency.level", required = false) Integer concurrencyLevel,@ApiParam(value = "") @Valid @RequestParam(value = "cache.start.size", required = false) Integer cacheStartSize,@ApiParam(value = "") @Valid @RequestParam(value = "cache.ttl", required = false) Integer cacheTtl,@ApiParam(value = "") @Valid @RequestParam(value = "cache.size", required = false) Integer cacheSize) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cache.on\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"concurrency.level\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"solr.zk.timeout\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"solr.commit\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"cache.size\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cache.start.size\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cache.ttl\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF", notes = "", response = ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementLearningPathAdaptorFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo> comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "isMemberCheck", required = false) Boolean isMemberCheck) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"isMemberCheck\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto", notes = "", response = ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementResourceAdaptorFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo> comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "isMemberCheck", required = false) Boolean isMemberCheck) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"isMemberCheck\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL", notes = "", response = ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.enablement.learningpath.endpoints.impl.EnablementLearningPathModelOperationService",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo> comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "fieldWhitelist", required = false) List<String> fieldWhitelist) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"fieldWhitelist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialEnablementResourceEndpointsImplEnablementResou", notes = "", response = ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.enablement.resource.endpoints.impl.EnablementResourceModelOperationService",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo> comAdobeCqSocialEnablementResourceEndpointsImplEnablementResou(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "fieldWhitelist", required = false) List<String> fieldWhitelist) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"fieldWhitelist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialEnablementServicesImplAuthorMarkerImpl", notes = "", response = ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.enablement.services.impl.AuthorMarkerImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo> comAdobeCqSocialEnablementServicesImplAuthorMarkerImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "service.ranking", required = false) Integer serviceRanking) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"service.ranking\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe", notes = "", response = ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.FilelibraryDownloadGetServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo> comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "sling.servlet.selectors", required = false) String slingServletSelectors,@ApiParam(value = "") @Valid @RequestParam(value = "sling.servlet.extensions", required = false) String slingServletExtensions) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"sling.servlet.extensions\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"sling.servlet.selectors\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera", notes = "", response = ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.impl.FileLibraryOperationsService",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo> comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "fieldWhitelist", required = false) List<String> fieldWhitelist,@ApiParam(value = "") @Valid @RequestParam(value = "attachmentTypeBlacklist", required = false) List<String> attachmentTypeBlacklist) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"fieldWhitelist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"attachmentTypeBlacklist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialForumClientEndpointsImplForumOperationsService", notes = "", response = ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.forum.client.endpoints.impl.ForumOperationsService",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo> comAdobeCqSocialForumClientEndpointsImplForumOperationsService(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "fieldWhitelist", required = false) List<String> fieldWhitelist,@ApiParam(value = "") @Valid @RequestParam(value = "attachmentTypeBlacklist", required = false) List<String> attachmentTypeBlacklist) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"fieldWhitelist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"attachmentTypeBlacklist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialForumDispatcherImplFlushOperations", notes = "", response = ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.forum.dispatcher.impl.FlushOperations",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo> comAdobeCqSocialForumDispatcherImplFlushOperations(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "extension.order", required = false) Integer extensionOrder,@ApiParam(value = "") @Valid @RequestParam(value = "flush.forumontopic", required = false) Boolean flushForumontopic) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"extension.order\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"flush.forumontopic\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen", notes = "", response = ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.group.client.impl.CommunityGroupCollectionComponentFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo> comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "group.listing.pagination.enable", required = false) Boolean groupListingPaginationEnable,@ApiParam(value = "") @Valid @RequestParam(value = "group.listing.lazyloading.enable", required = false) Boolean groupListingLazyloadingEnable,@ApiParam(value = "") @Valid @RequestParam(value = "page.size", required = false) Integer pageSize,@ApiParam(value = "") @Valid @RequestParam(value = "priority", required = false) Integer priority) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"page.size\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"priority\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"group.listing.pagination.enable\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"group.listing.lazyloading.enable\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialGroupImplGroupServiceImpl", notes = "", response = ComAdobeCqSocialGroupImplGroupServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialGroupImplGroupServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.group.impl.GroupServiceImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialGroupImplGroupServiceImplInfo> comAdobeCqSocialGroupImplGroupServiceImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "maxWaitTime", required = false) Integer maxWaitTime,@ApiParam(value = "") @Valid @RequestParam(value = "minWaitBetweenRetries", required = false) Integer minWaitBetweenRetries) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"minWaitBetweenRetries\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"maxWaitTime\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialHandlebarsGuavaTemplateCacheImpl", notes = "", response = ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.handlebars.GuavaTemplateCacheImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo> comAdobeCqSocialHandlebarsGuavaTemplateCacheImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "parameter.guava.cache.enabled", required = false) Boolean parameterGuavaCacheEnabled,@ApiParam(value = "") @Valid @RequestParam(value = "parameter.guava.cache.params", required = false) String parameterGuavaCacheParams,@ApiParam(value = "") @Valid @RequestParam(value = "parameter.guava.cache.reload", required = false) Boolean parameterGuavaCacheReload,@ApiParam(value = "") @Valid @RequestParam(value = "service.ranking", required = false) Integer serviceRanking) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"parameter.guava.cache.reload\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"parameter.guava.cache.params\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"parameter.guava.cache.enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"service.ranking\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS", notes = "", response = ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.ideation.client.endpoints.impl.IdeationOperationsService",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo> comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "fieldWhitelist", required = false) List<String> fieldWhitelist,@ApiParam(value = "") @Valid @RequestParam(value = "attachmentTypeBlacklist", required = false) List<String> attachmentTypeBlacklist) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"fieldWhitelist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"attachmentTypeBlacklist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer", notes = "", response = ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.journal.client.endpoints.impl.JournalOperationsService",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo> comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "fieldWhitelist", required = false) List<String> fieldWhitelist,@ApiParam(value = "") @Valid @RequestParam(value = "attachmentTypeBlacklist", required = false) List<String> attachmentTypeBlacklist) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"fieldWhitelist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"attachmentTypeBlacklist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile", notes = "", response = ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberGroupProfileOperationService",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo> comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "fieldWhitelist", required = false) List<String> fieldWhitelist) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"fieldWhitelist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO", notes = "", response = ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberUserProfileOperationService",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo> comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "fieldWhitelist", required = false) List<String> fieldWhitelist) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"fieldWhitelist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF", notes = "", response = ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.members.impl.CommunityMemberGroupProfileComponentFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo> comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "everyoneLimit", required = false) Integer everyoneLimit,@ApiParam(value = "") @Valid @RequestParam(value = "priority", required = false) Integer priority) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"everyoneLimit\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"priority\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialMessagingClientEndpointsImplMessagingOperation", notes = "", response = ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.messaging.client.endpoints.impl.MessagingOperationsServiceImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo> comAdobeCqSocialMessagingClientEndpointsImplMessagingOperation(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "message.properties", required = false) List<String> messageProperties,@ApiParam(value = "") @Valid @RequestParam(value = "messageBoxSizeLimit", required = false) Integer messageBoxSizeLimit,@ApiParam(value = "") @Valid @RequestParam(value = "messageCountLimit", required = false) Integer messageCountLimit,@ApiParam(value = "") @Valid @RequestParam(value = "notifyFailure", required = false) Boolean notifyFailure,@ApiParam(value = "") @Valid @RequestParam(value = "failureMessageFrom", required = false) String failureMessageFrom,@ApiParam(value = "") @Valid @RequestParam(value = "failureTemplatePath", required = false) String failureTemplatePath,@ApiParam(value = "") @Valid @RequestParam(value = "maxRetries", required = false) Integer maxRetries,@ApiParam(value = "") @Valid @RequestParam(value = "minWaitBetweenRetries", required = false) Integer minWaitBetweenRetries,@ApiParam(value = "") @Valid @RequestParam(value = "countUpdatePoolSize", required = false) Integer countUpdatePoolSize,@ApiParam(value = "") @Valid @RequestParam(value = "inbox.path", required = false) String inboxPath,@ApiParam(value = "") @Valid @RequestParam(value = "sentitems.path", required = false) String sentitemsPath,@ApiParam(value = "") @Valid @RequestParam(value = "supportAttachments", required = false) Boolean supportAttachments,@ApiParam(value = "") @Valid @RequestParam(value = "supportGroupMessaging", required = false) Boolean supportGroupMessaging,@ApiParam(value = "") @Valid @RequestParam(value = "maxTotalRecipients", required = false) Integer maxTotalRecipients,@ApiParam(value = "") @Valid @RequestParam(value = "batchSize", required = false) Integer batchSize,@ApiParam(value = "") @Valid @RequestParam(value = "maxTotalAttachmentSize", required = false) Integer maxTotalAttachmentSize,@ApiParam(value = "") @Valid @RequestParam(value = "attachmentTypeBlacklist", required = false) List<String> attachmentTypeBlacklist,@ApiParam(value = "") @Valid @RequestParam(value = "allowedAttachmentTypes", required = false) List<String> allowedAttachmentTypes,@ApiParam(value = "") @Valid @RequestParam(value = "serviceSelector", required = false) String serviceSelector,@ApiParam(value = "") @Valid @RequestParam(value = "fieldWhitelist", required = false) List<String> fieldWhitelist) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"failureMessageFrom\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"minWaitBetweenRetries\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"allowedAttachmentTypes\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"messageCountLimit\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"sentitems.path\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"countUpdatePoolSize\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"message.properties\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"supportGroupMessaging\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"failureTemplatePath\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"fieldWhitelist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"maxRetries\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"maxTotalAttachmentSize\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"serviceSelector\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"messageBoxSizeLimit\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"maxTotalRecipients\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"attachmentTypeBlacklist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"notifyFailure\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"supportAttachments\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"batchSize\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"inbox.path\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen", notes = "", response = ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.FilterGroupSocialComponentFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo> comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "resourceType.filters", required = false) List<String> resourceTypeFilters,@ApiParam(value = "") @Valid @RequestParam(value = "priority", required = false) Integer priority) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"priority\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"resourceType.filters\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialModerationDashboardApiModerationDashboardSocial", notes = "", response = ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.ModerationDashboardSocialComponentFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo> comAdobeCqSocialModerationDashboardApiModerationDashboardSocial(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "priority", required = false) Integer priority) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"priority\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen", notes = "", response = ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.UserDetailsSocialComponentFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo> comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "priority", required = false) Integer priority) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"priority\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci", notes = "", response = ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.internal.impl.FilterGroupSocialComponentFactoryV2",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo> comAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "resourceType.filters", required = false) List<String> resourceTypeFilters,@ApiParam(value = "") @Valid @RequestParam(value = "priority", required = false) Integer priority) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"priority\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"resourceType.filters\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialNotificationsImplMentionsRouter", notes = "", response = ComAdobeCqSocialNotificationsImplMentionsRouterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialNotificationsImplMentionsRouterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.notifications.impl.MentionsRouter",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialNotificationsImplMentionsRouterInfo> comAdobeCqSocialNotificationsImplMentionsRouter(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "event.topics", required = false) String eventTopics,@ApiParam(value = "") @Valid @RequestParam(value = "event.filter", required = false) String eventFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"event.topics\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"event.filter\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialNotificationsImplNotificationManagerImpl", notes = "", response = ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationManagerImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo> comAdobeCqSocialNotificationsImplNotificationManagerImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "max.unread.notification.count", required = false) Integer maxUnreadNotificationCount) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"max.unread.notification.count\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialNotificationsImplNotificationsRouter", notes = "", response = ComAdobeCqSocialNotificationsImplNotificationsRouterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialNotificationsImplNotificationsRouterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationsRouter",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialNotificationsImplNotificationsRouterInfo> comAdobeCqSocialNotificationsImplNotificationsRouter(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "event.topics", required = false) String eventTopics,@ApiParam(value = "") @Valid @RequestParam(value = "event.filter", required = false) String eventFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"event.topics\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"event.filter\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic", notes = "", response = ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.qna.client.endpoints.impl.QnaForumOperationsService",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo> comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "fieldWhitelist", required = false) List<String> fieldWhitelist,@ApiParam(value = "") @Valid @RequestParam(value = "attachmentTypeBlacklist", required = false) List<String> attachmentTypeBlacklist) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"fieldWhitelist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"attachmentTypeBlacklist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI", notes = "", response = ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportImporterServiceImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo> comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.social.reporting.analytics.polling.importer.interval", required = false) Integer cqSocialReportingAnalyticsPollingImporterInterval,@ApiParam(value = "") @Valid @RequestParam(value = "cq.social.reporting.analytics.polling.importer.pageSize", required = false) Integer cqSocialReportingAnalyticsPollingImporterPageSize) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.social.reporting.analytics.polling.importer.pageSize\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cq.social.reporting.analytics.polling.importer.interval\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM", notes = "", response = ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportManagementServiceImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo> comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "report.fetch.delay", required = false) Integer reportFetchDelay) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"report.fetch.delay\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS", notes = "", response = ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.SiteTrendReportSocialComponentFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo> comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.social.console.analytics.sites.mapping", required = false) List<String> cqSocialConsoleAnalyticsSitesMapping,@ApiParam(value = "") @Valid @RequestParam(value = "priority", required = false) Integer priority) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"priority\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cq.social.console.analytics.sites.mapping\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi", notes = "", response = ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.review.client.endpoints.impl.ReviewOperationsService",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo> comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "fieldWhitelist", required = false) List<String> fieldWhitelist,@ApiParam(value = "") @Valid @RequestParam(value = "attachmentTypeBlacklist", required = false) List<String> attachmentTypeBlacklist) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"fieldWhitelist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"attachmentTypeBlacklist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet", notes = "", response = ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.scf.core.operations.impl.SocialOperationsServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo> comAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "sling.servlet.selectors", required = false) String slingServletSelectors,@ApiParam(value = "") @Valid @RequestParam(value = "sling.servlet.extensions", required = false) String slingServletExtensions) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"sling.servlet.extensions\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"sling.servlet.selectors\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet", notes = "", response = ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.scf.endpoints.impl.DefaultSocialGetServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo> comAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "sling.servlet.selectors", required = false) List<String> slingServletSelectors,@ApiParam(value = "") @Valid @RequestParam(value = "sling.servlet.extensions", required = false) String slingServletExtensions) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"sling.servlet.extensions\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"sling.servlet.selectors\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialScoringImplScoringEventListener", notes = "", response = ComAdobeCqSocialScoringImplScoringEventListenerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialScoringImplScoringEventListenerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.scoring.impl.ScoringEventListener",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialScoringImplScoringEventListenerInfo> comAdobeCqSocialScoringImplScoringEventListener(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "event.topics", required = false) String eventTopics,@ApiParam(value = "") @Valid @RequestParam(value = "event.filter", required = false) String eventFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"event.topics\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"event.filter\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl", notes = "", response = ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.serviceusers.internal.impl.ServiceUserWrapperImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo> comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "enableFallback", required = false) Boolean enableFallback) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"enableFallback\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialSiteEndpointsImplSiteOperationService", notes = "", response = ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.site.endpoints.impl.SiteOperationService",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo> comAdobeCqSocialSiteEndpointsImplSiteOperationService(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "fieldWhitelist", required = false) List<String> fieldWhitelist,@ApiParam(value = "") @Valid @RequestParam(value = "sitePathFilters", required = false) List<String> sitePathFilters,@ApiParam(value = "") @Valid @RequestParam(value = "sitePackageGroup", required = false) String sitePackageGroup) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"sitePathFilters\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"fieldWhitelist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"sitePackageGroup\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm", notes = "", response = ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.site.impl.AnalyticsComponentConfigurationServiceImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo> comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.social.console.analytics.components", required = false) List<String> cqSocialConsoleAnalyticsComponents) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.social.console.analytics.components\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialSiteImplSiteConfiguratorImpl", notes = "", response = ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.site.impl.SiteConfiguratorImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo> comAdobeCqSocialSiteImplSiteConfiguratorImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "componentsUsingTags", required = false) List<String> componentsUsingTags) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"componentsUsingTags\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialSrpImplSocialSolrConnector", notes = "", response = ComAdobeCqSocialSrpImplSocialSolrConnectorInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialSrpImplSocialSolrConnectorInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.srp.impl.SocialSolrConnector",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialSrpImplSocialSolrConnectorInfo> comAdobeCqSocialSrpImplSocialSolrConnector(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "srp.type", required = false) String srpType) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"srp.type\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialSyncImplDiffChangesObserver", notes = "", response = ComAdobeCqSocialSyncImplDiffChangesObserverInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialSyncImplDiffChangesObserverInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.sync.impl.DiffChangesObserver",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialSyncImplDiffChangesObserverInfo> comAdobeCqSocialSyncImplDiffChangesObserver(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "enabled", required = false) Boolean enabled,@ApiParam(value = "") @Valid @RequestParam(value = "agentName", required = false) String agentName,@ApiParam(value = "") @Valid @RequestParam(value = "diffPath", required = false) String diffPath,@ApiParam(value = "") @Valid @RequestParam(value = "propertyNames", required = false) String propertyNames) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"propertyNames\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"agentName\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"diffPath\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialSyncImplGroupSyncListenerImpl", notes = "", response = ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.sync.impl.GroupSyncListenerImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo> comAdobeCqSocialSyncImplGroupSyncListenerImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "nodetypes", required = false) List<String> nodetypes,@ApiParam(value = "") @Valid @RequestParam(value = "ignorableprops", required = false) List<String> ignorableprops,@ApiParam(value = "") @Valid @RequestParam(value = "ignorablenodes", required = false) String ignorablenodes,@ApiParam(value = "") @Valid @RequestParam(value = "enabled", required = false) Boolean enabled,@ApiParam(value = "") @Valid @RequestParam(value = "distfolders", required = false) String distfolders) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"ignorablenodes\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"nodetypes\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"ignorableprops\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"distfolders\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialSyncImplPublisherSyncServiceImpl", notes = "", response = ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.sync.impl.PublisherSyncServiceImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo> comAdobeCqSocialSyncImplPublisherSyncServiceImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "activeRunModes", required = false) List<String> activeRunModes) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"activeRunModes\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialSyncImplUserSyncListenerImpl", notes = "", response = ComAdobeCqSocialSyncImplUserSyncListenerImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialSyncImplUserSyncListenerImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.sync.impl.UserSyncListenerImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialSyncImplUserSyncListenerImplInfo> comAdobeCqSocialSyncImplUserSyncListenerImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "nodetypes", required = false) List<String> nodetypes,@ApiParam(value = "") @Valid @RequestParam(value = "ignorableprops", required = false) List<String> ignorableprops,@ApiParam(value = "") @Valid @RequestParam(value = "ignorablenodes", required = false) List<String> ignorablenodes,@ApiParam(value = "") @Valid @RequestParam(value = "enabled", required = false) Boolean enabled,@ApiParam(value = "") @Valid @RequestParam(value = "distfolders", required = false) List<String> distfolders) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"ignorablenodes\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"nodetypes\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"ignorableprops\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"distfolders\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialTranslationImplTranslationServiceConfigManager", notes = "", response = ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.translation.impl.TranslationServiceConfigManager",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo> comAdobeCqSocialTranslationImplTranslationServiceConfigManager(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "translate.language", required = false) String translateLanguage,@ApiParam(value = "") @Valid @RequestParam(value = "translate.display", required = false) String translateDisplay,@ApiParam(value = "") @Valid @RequestParam(value = "translate.attribution", required = false) Boolean translateAttribution,@ApiParam(value = "") @Valid @RequestParam(value = "translate.caching", required = false) String translateCaching,@ApiParam(value = "") @Valid @RequestParam(value = "translate.smart.rendering", required = false) String translateSmartRendering,@ApiParam(value = "") @Valid @RequestParam(value = "translate.caching.duration", required = false) String translateCachingDuration,@ApiParam(value = "") @Valid @RequestParam(value = "translate.session.save.interval", required = false) String translateSessionSaveInterval,@ApiParam(value = "") @Valid @RequestParam(value = "translate.session.save.batchLimit", required = false) String translateSessionSaveBatchLimit) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"translate.attribution\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"translate.caching.duration\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"translate.session.save.batchLimit\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"translate.language\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"translate.display\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"translate.smart.rendering\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"translate.session.save.interval\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"translate.caching\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialTranslationImplUGCLanguageDetector", notes = "", response = ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.translation.impl.UGCLanguageDetector",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo> comAdobeCqSocialTranslationImplUGCLanguageDetector(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "event.topics", required = false) String eventTopics,@ApiParam(value = "") @Valid @RequestParam(value = "event.filter", required = false) String eventFilter,@ApiParam(value = "") @Valid @RequestParam(value = "translate.listener.type", required = false) List<String> translateListenerType,@ApiParam(value = "") @Valid @RequestParam(value = "translate.property.list", required = false) List<String> translatePropertyList,@ApiParam(value = "") @Valid @RequestParam(value = "poolSize", required = false) Integer poolSize,@ApiParam(value = "") @Valid @RequestParam(value = "maxPoolSize", required = false) Integer maxPoolSize,@ApiParam(value = "") @Valid @RequestParam(value = "queueSize", required = false) Integer queueSize,@ApiParam(value = "") @Valid @RequestParam(value = "keepAliveTime", required = false) Integer keepAliveTime) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"event.topics\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"queueSize\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"keepAliveTime\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"translate.listener.type\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"translate.property.list\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"poolSize\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"event.filter\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"maxPoolSize\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl", notes = "", response = ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.ugcbase.dispatcher.impl.FlushServiceImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo> comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "threadPoolSize", required = false) Integer threadPoolSize,@ApiParam(value = "") @Valid @RequestParam(value = "delayTime", required = false) Integer delayTime,@ApiParam(value = "") @Valid @RequestParam(value = "workerSleepTime", required = false) Integer workerSleepTime) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"threadPoolSize\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"workerSleepTime\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"delayTime\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl", notes = "", response = ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.AysncReverseReplicatorImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo> comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "poolSize", required = false) Integer poolSize,@ApiParam(value = "") @Valid @RequestParam(value = "maxPoolSize", required = false) Integer maxPoolSize,@ApiParam(value = "") @Valid @RequestParam(value = "queueSize", required = false) Integer queueSize,@ApiParam(value = "") @Valid @RequestParam(value = "keepAliveTime", required = false) Integer keepAliveTime) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"queueSize\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"keepAliveTime\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"poolSize\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"maxPoolSize\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialUgcbaseImplPublisherConfigurationImpl", notes = "", response = ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.PublisherConfigurationImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo> comAdobeCqSocialUgcbaseImplPublisherConfigurationImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "isPrimaryPublisher", required = false) Boolean isPrimaryPublisher) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"isPrimaryPublisher\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialUgcbaseImplSocialUtilsImpl", notes = "", response = ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.SocialUtilsImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo> comAdobeCqSocialUgcbaseImplSocialUtilsImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "legacyCloudUGCPathMapping", required = false) Boolean legacyCloudUGCPathMapping) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"legacyCloudUGCPathMapping\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialUgcbaseModerationImplAutoModerationImpl", notes = "", response = ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.AutoModerationImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo> comAdobeCqSocialUgcbaseModerationImplAutoModerationImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "automoderation.sequence", required = false) List<String> automoderationSequence,@ApiParam(value = "") @Valid @RequestParam(value = "automoderation.onfailurestop", required = false) Boolean automoderationOnfailurestop) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"automoderation.onfailurestop\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"automoderation.sequence\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialUgcbaseModerationImplSentimentProcess", notes = "", response = ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.SentimentProcess",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo> comAdobeCqSocialUgcbaseModerationImplSentimentProcess(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "watchwords.positive", required = false) List<String> watchwordsPositive,@ApiParam(value = "") @Valid @RequestParam(value = "watchwords.negative", required = false) List<String> watchwordsNegative,@ApiParam(value = "") @Valid @RequestParam(value = "watchwords.path", required = false) String watchwordsPath,@ApiParam(value = "") @Valid @RequestParam(value = "sentiment.path", required = false) String sentimentPath) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"watchwords.negative\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"watchwords.positive\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"watchwords.path\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"sentiment.path\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli", notes = "", response = ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.DefaultAttachmentTypeBlacklistService",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo> comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "default.attachment.type.blacklist", required = false) List<String> defaultAttachmentTypeBlacklist,@ApiParam(value = "") @Valid @RequestParam(value = "baseline.attachment.type.blacklist", required = false) List<String> baselineAttachmentTypeBlacklist) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"default.attachment.type.blacklist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"baseline.attachment.type.blacklist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl", notes = "", response = ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.SaferSlingPostValidatorImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo> comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "parameter.whitelist", required = false) List<String> parameterWhitelist,@ApiParam(value = "") @Valid @RequestParam(value = "parameter.whitelist.prefixes", required = false) List<String> parameterWhitelistPrefixes,@ApiParam(value = "") @Valid @RequestParam(value = "binary.parameter.whitelist", required = false) List<String> binaryParameterWhitelist,@ApiParam(value = "") @Valid @RequestParam(value = "modifier.whitelist", required = false) List<String> modifierWhitelist,@ApiParam(value = "") @Valid @RequestParam(value = "operation.whitelist", required = false) List<String> operationWhitelist,@ApiParam(value = "") @Valid @RequestParam(value = "operation.whitelist.prefixes", required = false) List<String> operationWhitelistPrefixes,@ApiParam(value = "") @Valid @RequestParam(value = "typehint.whitelist", required = false) List<String> typehintWhitelist,@ApiParam(value = "") @Valid @RequestParam(value = "resourcetype.whitelist", required = false) List<String> resourcetypeWhitelist) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"parameter.whitelist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"resourcetype.whitelist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"modifier.whitelist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"operation.whitelist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"operation.whitelist.prefixes\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"typehint.whitelist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"binary.parameter.whitelist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"parameter.whitelist.prefixes\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet", notes = "", response = ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.user.endpoints.impl.UsersGroupFromPublishServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo> comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "sling.servlet.extensions", required = false) String slingServletExtensions,@ApiParam(value = "") @Valid @RequestParam(value = "sling.servlet.paths", required = false) String slingServletPaths,@ApiParam(value = "") @Valid @RequestParam(value = "sling.servlet.methods", required = false) String slingServletMethods) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"sling.servlet.extensions\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"sling.servlet.paths\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"sling.servlet.methods\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqSocialUserImplTransportHttpToPublisher", notes = "", response = ComAdobeCqSocialUserImplTransportHttpToPublisherInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqSocialUserImplTransportHttpToPublisherInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.social.user.impl.transport.HttpToPublisher",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqSocialUserImplTransportHttpToPublisherInfo> comAdobeCqSocialUserImplTransportHttpToPublisher(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "enable", required = false) Boolean enable,@ApiParam(value = "") @Valid @RequestParam(value = "agent.configuration", required = false) List<String> agentConfiguration,@ApiParam(value = "") @Valid @RequestParam(value = "context.path", required = false) String contextPath,@ApiParam(value = "") @Valid @RequestParam(value = "disabled.cipher.suites", required = false) List<String> disabledCipherSuites,@ApiParam(value = "") @Valid @RequestParam(value = "enabled.cipher.suites", required = false) List<String> enabledCipherSuites) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"agent.configuration\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"enabled.cipher.suites\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"enable\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"disabled.cipher.suites\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"context.path\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact", notes = "", response = ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.ui.wcm.commons.internal.servlets.rte.RTEFilterServletFactory.amended",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo> comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "resource.types", required = false) List<String> resourceTypes) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"resource.types\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqUpgradesCleanupImplUpgradeContentCleanup", notes = "", response = ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeContentCleanup",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo> comAdobeCqUpgradesCleanupImplUpgradeContentCleanup(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "delete.path.regexps", required = false) List<String> deletePathRegexps,@ApiParam(value = "") @Valid @RequestParam(value = "delete.sql2.query", required = false) String deleteSql2Query) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"delete.path.regexps\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"delete.sql2.query\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup", notes = "", response = ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeInstallFolderCleanup",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo> comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "delete.name.regexps", required = false) List<String> deleteNameRegexps) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"delete.name.regexps\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService", notes = "", response = ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncDeleteConfigProviderService",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo> comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "threshold", required = false) Integer threshold,@ApiParam(value = "") @Valid @RequestParam(value = "jobTopicName", required = false) String jobTopicName,@ApiParam(value = "") @Valid @RequestParam(value = "emailEnabled", required = false) Boolean emailEnabled) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"jobTopicName\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"emailEnabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"threshold\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask", notes = "", response = ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncJobCleanUpTask",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo> comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "scheduler.expression", required = false) String schedulerExpression,@ApiParam(value = "") @Valid @RequestParam(value = "job.purge.threshold", required = false) Integer jobPurgeThreshold,@ApiParam(value = "") @Valid @RequestParam(value = "job.purge.max.jobs", required = false) Integer jobPurgeMaxJobs) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"job.purge.threshold\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"scheduler.expression\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"job.purge.max.jobs\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService", notes = "", response = ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncMoveConfigProviderService",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo> comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "threshold", required = false) Integer threshold,@ApiParam(value = "") @Valid @RequestParam(value = "jobTopicName", required = false) String jobTopicName,@ApiParam(value = "") @Valid @RequestParam(value = "emailEnabled", required = false) Boolean emailEnabled) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"jobTopicName\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"emailEnabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"threshold\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService", notes = "", response = ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncPageMoveConfigProviderService",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo> comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "threshold", required = false) Integer threshold,@ApiParam(value = "") @Valid @RequestParam(value = "jobTopicName", required = false) String jobTopicName,@ApiParam(value = "") @Valid @RequestParam(value = "emailEnabled", required = false) Boolean emailEnabled) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"jobTopicName\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"emailEnabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"threshold\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqWcmLaunchesImplLaunchesEventHandler", notes = "", response = ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.wcm.launches.impl.LaunchesEventHandler",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo> comAdobeCqWcmLaunchesImplLaunchesEventHandler(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "event.filter", required = false) String eventFilter,@ApiParam(value = "") @Valid @RequestParam(value = "launches.eventhandler.threadpool.maxsize", required = false) Integer launchesEventhandlerThreadpoolMaxsize,@ApiParam(value = "") @Valid @RequestParam(value = "launches.eventhandler.threadpool.priority", required = false) String launchesEventhandlerThreadpoolPriority,@ApiParam(value = "") @Valid @RequestParam(value = "launches.eventhandler.updatelastmodification", required = false) Boolean launchesEventhandlerUpdatelastmodification) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"launches.eventhandler.threadpool.maxsize\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"launches.eventhandler.updatelastmodification\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"event.filter\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"launches.eventhandler.threadpool.priority\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator", notes = "", response = ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.wcm.mobile.qrcode.servlet.QRCodeImageGenerator",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo> comAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.wcm.qrcode.servlet.whitelist", required = false) List<String> cqWcmQrcodeServletWhitelist) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.wcm.qrcode.servlet.whitelist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl", notes = "", response = ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.wcm.style.internal.ComponentStyleInfoCacheImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo> comAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "size", required = false) Integer size) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"size\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl", notes = "", response = ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.cq.wcm.translation.impl.TranslationPlatformConfigurationImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo> comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "syncTranslationState.schedulingFormat", required = false) String syncTranslationStateSchedulingFormat,@ApiParam(value = "") @Valid @RequestParam(value = "schedulingRepeatTranslation.schedulingFormat", required = false) String schedulingRepeatTranslationSchedulingFormat,@ApiParam(value = "") @Valid @RequestParam(value = "syncTranslationState.lockTimeoutInMinutes", required = false) String syncTranslationStateLockTimeoutInMinutes,@ApiParam(value = "") @Valid @RequestParam(value = "export.format", required = false) String exportFormat) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"syncTranslationState.lockTimeoutInMinutes\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"schedulingRepeatTranslation.schedulingFormat\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"syncTranslationState.schedulingFormat\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"export.format\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService", notes = "", response = ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.fd.fp.config.FormsPortalDraftsandSubmissionConfigService",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo> comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "portal.outboxes", required = false) List<String> portalOutboxes,@ApiParam(value = "") @Valid @RequestParam(value = "draft.data.service", required = false) String draftDataService,@ApiParam(value = "") @Valid @RequestParam(value = "draft.metadata.service", required = false) String draftMetadataService,@ApiParam(value = "") @Valid @RequestParam(value = "submit.data.service", required = false) String submitDataService,@ApiParam(value = "") @Valid @RequestParam(value = "submit.metadata.service", required = false) String submitMetadataService,@ApiParam(value = "") @Valid @RequestParam(value = "pendingSign.data.service", required = false) String pendingSignDataService,@ApiParam(value = "") @Valid @RequestParam(value = "pendingSign.metadata.service", required = false) String pendingSignMetadataService) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"draft.data.service\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"submit.metadata.service\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"pendingSign.metadata.service\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"portal.outboxes\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"submit.data.service\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"pendingSign.data.service\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"draft.metadata.service\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeFdFpConfigFormsPortalSchedulerService", notes = "", response = ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.fd.fp.config.FormsPortalSchedulerService",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo> comAdobeFdFpConfigFormsPortalSchedulerService(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "formportal.interval", required = false) String formportalInterval) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"formportal.interval\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeFormsCommonServiceImplDefaultDataProvider", notes = "", response = ComAdobeFormsCommonServiceImplDefaultDataProviderInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeFormsCommonServiceImplDefaultDataProviderInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.forms.common.service.impl.DefaultDataProvider",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeFormsCommonServiceImplDefaultDataProviderInfo> comAdobeFormsCommonServiceImplDefaultDataProvider(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "alloweddataFileLocations", required = false) List<String> alloweddataFileLocations) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"alloweddataFileLocations\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp", notes = "", response = ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.forms.common.service.impl.FormsCommonConfigurationServiceImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo> comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "tempStorageConfig", required = false) String tempStorageConfig) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"tempStorageConfig\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeFormsCommonServletTempCleanUpTask", notes = "", response = ComAdobeFormsCommonServletTempCleanUpTaskInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeFormsCommonServletTempCleanUpTaskInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.forms.common.servlet.TempCleanUpTask",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeFormsCommonServletTempCleanUpTaskInfo> comAdobeFormsCommonServletTempCleanUpTask(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "scheduler.expression", required = false) String schedulerExpression,@ApiParam(value = "") @Valid @RequestParam(value = "Duration for Temporary Storage", required = false) String durationForTemporaryStorage,@ApiParam(value = "") @Valid @RequestParam(value = "Duration for Anonymous Storage", required = false) String durationForAnonymousStorage) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"scheduler.expression\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"Duration for Temporary Storage\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"Duration for Anonymous Storage\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteAcpPlatformPlatformServlet", notes = "", response = ComAdobeGraniteAcpPlatformPlatformServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAcpPlatformPlatformServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.acp.platform.PlatformServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteAcpPlatformPlatformServletInfo> comAdobeGraniteAcpPlatformPlatformServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "query.limit", required = false) Integer queryLimit,@ApiParam(value = "") @Valid @RequestParam(value = "file.type.extension.map", required = false) List<String> fileTypeExtensionMap) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"file.type.extension.map\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"query.limit\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteActivitystreamsImplActivityManagerImpl", notes = "", response = ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.activitystreams.impl.ActivityManagerImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo> comAdobeGraniteActivitystreamsImplActivityManagerImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "aggregate.relationships", required = false) List<String> aggregateRelationships,@ApiParam(value = "") @Valid @RequestParam(value = "aggregate.descend.virtual", required = false) Boolean aggregateDescendVirtual) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"aggregate.relationships\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"aggregate.descend.virtual\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteAnalyzerBaseSystemStatusServlet", notes = "", response = ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.analyzer.base.SystemStatusServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo> comAdobeGraniteAnalyzerBaseSystemStatusServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "disabled", required = false) Boolean disabled) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"disabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet", notes = "", response = ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.analyzer.scripts.compile.AllScriptsCompilerServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo> comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "disabled", required = false) Boolean disabled) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"disabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteApicontrollerFilterResolverHookFactory", notes = "", response = ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.apicontroller.FilterResolverHookFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo> comAdobeGraniteApicontrollerFilterResolverHookFactory(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.cdn.cdn-rewriter", required = false) String comAdobeCqCdnCdnRewriter,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.cloud-config.components", required = false) String comAdobeCqCloudConfigComponents,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.cloud-config.core", required = false) String comAdobeCqCloudConfigCore,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.cloud-config.ui", required = false) String comAdobeCqCloudConfigUi,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.com.adobe.cq.editor", required = false) String comAdobeCqComAdobeCqEditor,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.com.adobe.cq.projects.core", required = false) String comAdobeCqComAdobeCqProjectsCore,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.com.adobe.cq.projects.wcm.core", required = false) String comAdobeCqComAdobeCqProjectsWcmCore,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.com.adobe.cq.ui.commons", required = false) String comAdobeCqComAdobeCqUiCommons,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.com.adobe.cq.wcm.style", required = false) String comAdobeCqComAdobeCqWcmStyle,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.cq-activitymap-integration", required = false) String comAdobeCqCqActivitymapIntegration,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.cq-contexthub-commons", required = false) String comAdobeCqCqContexthubCommons,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.cq-dtm", required = false) String comAdobeCqCqDtm,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.cq-healthcheck", required = false) String comAdobeCqCqHealthcheck,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.cq-multisite-targeting", required = false) String comAdobeCqCqMultisiteTargeting,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.cq-pre-upgrade-cleanup", required = false) String comAdobeCqCqPreUpgradeCleanup,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.cq-product-info-provider", required = false) String comAdobeCqCqProductInfoProvider,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.cq-rest-sites", required = false) String comAdobeCqCqRestSites,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.cq-security-hc", required = false) String comAdobeCqCqSecurityHc,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.dam.cq-dam-svg-handler", required = false) String comAdobeCqDamCqDamSvgHandler,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.dam.cq-scene7-imaging", required = false) String comAdobeCqDamCqScene7Imaging,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.dtm-reactor.core", required = false) String comAdobeCqDtmReactorCore,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.dtm-reactor.ui", required = false) String comAdobeCqDtmReactorUi,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.exp-jspel-resolver", required = false) String comAdobeCqExpJspelResolver,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.inbox.cq-inbox", required = false) String comAdobeCqInboxCqInbox,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.json-schema-parser", required = false) String comAdobeCqJsonSchemaParser,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.media.cq-media-publishing-dps-fp-core", required = false) String comAdobeCqMediaCqMediaPublishingDpsFpCore,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.mobile.cq-mobile-caas", required = false) String comAdobeCqMobileCqMobileCaas,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.mobile.cq-mobile-index-builder", required = false) String comAdobeCqMobileCqMobileIndexBuilder,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.mobile.cq-mobile-phonegap-build", required = false) String comAdobeCqMobileCqMobilePhonegapBuild,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.myspell", required = false) String comAdobeCqMyspell,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.sample.we.retail.core", required = false) String comAdobeCqSampleWeRetailCore,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.screens.com.adobe.cq.screens.dcc", required = false) String comAdobeCqScreensComAdobeCqScreensDcc,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.screens.com.adobe.cq.screens.mq.core", required = false) String comAdobeCqScreensComAdobeCqScreensMqCore,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.social.cq-social-as-provider", required = false) String comAdobeCqSocialCqSocialAsProvider,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.social.cq-social-badging-basic-impl", required = false) String comAdobeCqSocialCqSocialBadgingBasicImpl,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.social.cq-social-badging-impl", required = false) String comAdobeCqSocialCqSocialBadgingImpl,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.social.cq-social-calendar-impl", required = false) String comAdobeCqSocialCqSocialCalendarImpl,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.social.cq-social-content-fragments-impl", required = false) String comAdobeCqSocialCqSocialContentFragmentsImpl,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.social.cq-social-enablement-impl", required = false) String comAdobeCqSocialCqSocialEnablementImpl,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.social.cq-social-graph-impl", required = false) String comAdobeCqSocialCqSocialGraphImpl,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.social.cq-social-ideation-impl", required = false) String comAdobeCqSocialCqSocialIdeationImpl,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.social.cq-social-jcr-provider", required = false) String comAdobeCqSocialCqSocialJcrProvider,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.social.cq-social-members-impl", required = false) String comAdobeCqSocialCqSocialMembersImpl,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.social.cq-social-ms-provider", required = false) String comAdobeCqSocialCqSocialMsProvider,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.social.cq-social-notifications-channels-web", required = false) String comAdobeCqSocialCqSocialNotificationsChannelsWeb,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.social.cq-social-notifications-impl", required = false) String comAdobeCqSocialCqSocialNotificationsImpl,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.social.cq-social-rdb-provider", required = false) String comAdobeCqSocialCqSocialRdbProvider,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.social.cq-social-scf-impl", required = false) String comAdobeCqSocialCqSocialScfImpl,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.social.cq-social-scoring-basic-impl", required = false) String comAdobeCqSocialCqSocialScoringBasicImpl,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.social.cq-social-scoring-impl", required = false) String comAdobeCqSocialCqSocialScoringImpl,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.social.cq-social-serviceusers-impl", required = false) String comAdobeCqSocialCqSocialServiceusersImpl,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.social.cq-social-srp-impl", required = false) String comAdobeCqSocialCqSocialSrpImpl,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.cq.social.cq-social-ugcbase-impl", required = false) String comAdobeCqSocialCqSocialUgcbaseImpl,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.dam.cq-dam-cfm-impl", required = false) String comAdobeDamCqDamCfmImpl,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.forms.foundation-forms-foundation-base", required = false) String comAdobeFormsFoundationFormsFoundationBase,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.granite.apicontroller", required = false) String comAdobeGraniteApicontroller,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.granite.asset.core", required = false) String comAdobeGraniteAssetCore,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.granite.auth.sso", required = false) String comAdobeGraniteAuthSso,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.granite.bundles.hc.impl", required = false) String comAdobeGraniteBundlesHcImpl,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.granite.compat-router", required = false) String comAdobeGraniteCompatRouter,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.granite.conf", required = false) String comAdobeGraniteConf,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.granite.conf.ui.core", required = false) String comAdobeGraniteConfUiCore,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.granite.cors", required = false) String comAdobeGraniteCors,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.granite.crx-explorer", required = false) String comAdobeGraniteCrxExplorer,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.granite.crxde-lite", required = false) String comAdobeGraniteCrxdeLite,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.granite.crypto.config", required = false) String comAdobeGraniteCryptoConfig,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.granite.crypto.extension", required = false) String comAdobeGraniteCryptoExtension,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.granite.crypto.file", required = false) String comAdobeGraniteCryptoFile,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.granite.crypto.jcr", required = false) String comAdobeGraniteCryptoJcr,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.granite.csrf", required = false) String comAdobeGraniteCsrf,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.granite.distribution.core", required = false) String comAdobeGraniteDistributionCore,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.granite.dropwizard.metrics", required = false) String comAdobeGraniteDropwizardMetrics,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.granite.frags.impl", required = false) String comAdobeGraniteFragsImpl,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.granite.gibson", required = false) String comAdobeGraniteGibson,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.granite.infocollector", required = false) String comAdobeGraniteInfocollector,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.granite.installer.factory.packages", required = false) String comAdobeGraniteInstallerFactoryPackages,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.granite.jetty.ssl", required = false) String comAdobeGraniteJettySsl,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.granite.jobs.async", required = false) String comAdobeGraniteJobsAsync,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.granite.maintenance.oak", required = false) String comAdobeGraniteMaintenanceOak,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.granite.monitoring.core", required = false) String comAdobeGraniteMonitoringCore,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.granite.queries", required = false) String comAdobeGraniteQueries,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.granite.replication.hc.impl", required = false) String comAdobeGraniteReplicationHcImpl,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.granite.repository.checker", required = false) String comAdobeGraniteRepositoryChecker,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.granite.repository.hc.impl", required = false) String comAdobeGraniteRepositoryHcImpl,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.granite.rest.assets", required = false) String comAdobeGraniteRestAssets,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.granite.security.ui", required = false) String comAdobeGraniteSecurityUi,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.granite.startup", required = false) String comAdobeGraniteStartup,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.granite.tagsoup", required = false) String comAdobeGraniteTagsoup,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.granite.taskmanagement.core", required = false) String comAdobeGraniteTaskmanagementCore,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.granite.taskmanagement.workflow", required = false) String comAdobeGraniteTaskmanagementWorkflow,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.granite.ui.clientlibs.compiler.less", required = false) String comAdobeGraniteUiClientlibsCompilerLess,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.granite.ui.clientlibs.processor.gcc", required = false) String comAdobeGraniteUiClientlibsProcessorGcc,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.granite.webconsole.plugins", required = false) String comAdobeGraniteWebconsolePlugins,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.granite.workflow.console", required = false) String comAdobeGraniteWorkflowConsole,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.xmp.worker.files.native.fragment.linux", required = false) String comAdobeXmpWorkerFilesNativeFragmentLinux,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.xmp.worker.files.native.fragment.macosx", required = false) String comAdobeXmpWorkerFilesNativeFragmentMacosx,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.xmp.worker.files.native.fragment.win", required = false) String comAdobeXmpWorkerFilesNativeFragmentWin,@ApiParam(value = "") @Valid @RequestParam(value = "com.day.commons.osgi.wrapper.simple-jndi", required = false) String comDayCommonsOsgiWrapperSimpleJndi,@ApiParam(value = "") @Valid @RequestParam(value = "com.day.cq.cq-authhandler", required = false) String comDayCqCqAuthhandler,@ApiParam(value = "") @Valid @RequestParam(value = "com.day.cq.cq-compat-configupdate", required = false) String comDayCqCqCompatConfigupdate,@ApiParam(value = "") @Valid @RequestParam(value = "com.day.cq.cq-licensebranding", required = false) String comDayCqCqLicensebranding,@ApiParam(value = "") @Valid @RequestParam(value = "com.day.cq.cq-notifcation-impl", required = false) String comDayCqCqNotifcationImpl,@ApiParam(value = "") @Valid @RequestParam(value = "com.day.cq.cq-replication-audit", required = false) String comDayCqCqReplicationAudit,@ApiParam(value = "") @Valid @RequestParam(value = "com.day.cq.cq-search-ext", required = false) String comDayCqCqSearchExt,@ApiParam(value = "") @Valid @RequestParam(value = "com.day.cq.dam.cq-dam-annotation-print", required = false) String comDayCqDamCqDamAnnotationPrint,@ApiParam(value = "") @Valid @RequestParam(value = "com.day.cq.dam.cq-dam-asset-usage", required = false) String comDayCqDamCqDamAssetUsage,@ApiParam(value = "") @Valid @RequestParam(value = "com.day.cq.dam.cq-dam-s7dam", required = false) String comDayCqDamCqDamS7dam,@ApiParam(value = "") @Valid @RequestParam(value = "com.day.cq.dam.cq-dam-similaritysearch", required = false) String comDayCqDamCqDamSimilaritysearch,@ApiParam(value = "") @Valid @RequestParam(value = "com.day.cq.dam.dam-webdav-support", required = false) String comDayCqDamDamWebdavSupport,@ApiParam(value = "") @Valid @RequestParam(value = "com.day.cq.pre-upgrade-tasks", required = false) String comDayCqPreUpgradeTasks,@ApiParam(value = "") @Valid @RequestParam(value = "com.day.cq.replication.extensions", required = false) String comDayCqReplicationExtensions,@ApiParam(value = "") @Valid @RequestParam(value = "com.day.cq.wcm.cq-msm-core", required = false) String comDayCqWcmCqMsmCore,@ApiParam(value = "") @Valid @RequestParam(value = "com.day.cq.wcm.cq-wcm-translation", required = false) String comDayCqWcmCqWcmTranslation,@ApiParam(value = "") @Valid @RequestParam(value = "day-commons-jrawio", required = false) String dayCommonsJrawio,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.aries.jmx.whiteboard", required = false) String orgApacheAriesJmxWhiteboard,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.http.sslfilter", required = false) String orgApacheFelixHttpSslfilter,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.org.apache.felix.threaddump", required = false) String orgApacheFelixOrgApacheFelixThreaddump,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.webconsole.plugins.ds", required = false) String orgApacheFelixWebconsolePluginsDs,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.webconsole.plugins.event", required = false) String orgApacheFelixWebconsolePluginsEvent,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.webconsole.plugins.memoryusage", required = false) String orgApacheFelixWebconsolePluginsMemoryusage,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.webconsole.plugins.packageadmin", required = false) String orgApacheFelixWebconsolePluginsPackageadmin,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.jackrabbit.oak-auth-ldap", required = false) String orgApacheJackrabbitOakAuthLdap,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.jackrabbit.oak-segment-tar", required = false) String orgApacheJackrabbitOakSegmentTar,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.jackrabbit.oak-solr-osgi", required = false) String orgApacheJackrabbitOakSolrOsgi,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.bundleresource.impl", required = false) String orgApacheSlingBundleresourceImpl,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.commons.fsclassloader", required = false) String orgApacheSlingCommonsFsclassloader,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.commons.log.webconsole", required = false) String orgApacheSlingCommonsLogWebconsole,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.datasource", required = false) String orgApacheSlingDatasource,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.discovery.base", required = false) String orgApacheSlingDiscoveryBase,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.discovery.oak", required = false) String orgApacheSlingDiscoveryOak,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.discovery.support", required = false) String orgApacheSlingDiscoverySupport,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.distribution.api", required = false) String orgApacheSlingDistributionApi,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.distribution.core", required = false) String orgApacheSlingDistributionCore,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.extensions.webconsolesecurityprovider", required = false) String orgApacheSlingExtensionsWebconsolesecurityprovider,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.hc.webconsole", required = false) String orgApacheSlingHcWebconsole,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.installer.console", required = false) String orgApacheSlingInstallerConsole,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.installer.provider.file", required = false) String orgApacheSlingInstallerProviderFile,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.installer.provider.jcr", required = false) String orgApacheSlingInstallerProviderJcr,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.jcr.davex", required = false) String orgApacheSlingJcrDavex,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.jcr.resourcesecurity", required = false) String orgApacheSlingJcrResourcesecurity,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.jmx.provider", required = false) String orgApacheSlingJmxProvider,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.launchpad.installer", required = false) String orgApacheSlingLaunchpadInstaller,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.models.impl", required = false) String orgApacheSlingModelsImpl,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.repoinit.parser", required = false) String orgApacheSlingRepoinitParser,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.resource.inventory", required = false) String orgApacheSlingResourceInventory,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.resourceresolver", required = false) String orgApacheSlingResourceresolver,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.scripting.javascript", required = false) String orgApacheSlingScriptingJavascript,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.scripting.jst", required = false) String orgApacheSlingScriptingJst,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.scripting.sightly.js.provider", required = false) String orgApacheSlingScriptingSightlyJsProvider,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.scripting.sightly.models.provider", required = false) String orgApacheSlingScriptingSightlyModelsProvider,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.security", required = false) String orgApacheSlingSecurity,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.servlets.compat", required = false) String orgApacheSlingServletsCompat,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.servlets.get", required = false) String orgApacheSlingServletsGet,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.startupfilter.disabler", required = false) String orgApacheSlingStartupfilterDisabler,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.tracer", required = false) String orgApacheSlingTracer,@ApiParam(value = "") @Valid @RequestParam(value = "we.retail.client.app.core", required = false) String weRetailClientAppCore) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"com.adobe.cq.social.cq-social-serviceusers-impl\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.sling.jcr.davex\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.xmp.worker.files.native.fragment.win\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.media.cq-media-publishing-dps-fp-core\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.exp-jspel-resolver\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.social.cq-social-calendar-impl\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.com.adobe.cq.projects.core\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.sling.models.impl\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.dam.cq-scene7-imaging\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.cloud-config.components\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.cq-pre-upgrade-cleanup\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.social.cq-social-ms-provider\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.day.cq.dam.dam-webdav-support\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.day.cq.cq-licensebranding\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.myspell\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.granite.replication.hc.impl\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.cq-contexthub-commons\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.felix.webconsole.plugins.memoryusage\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.sling.bundleresource.impl\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.sling.distribution.core\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.com.adobe.cq.wcm.style\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.granite.compat-router\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.sling.distribution.api\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.dam.cq-dam-cfm-impl\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.sling.datasource\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.sling.scripting.sightly.models.provider\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.granite.bundles.hc.impl\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.jackrabbit.oak-solr-osgi\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.social.cq-social-scoring-basic-impl\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.com.adobe.cq.editor\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.granite.crypto.config\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.granite.queries\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"we.retail.client.app.core\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.granite.csrf\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.granite.startup\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.sling.tracer\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.sling.servlets.get\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.granite.crxde-lite\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.sample.we.retail.core\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.sling.servlets.compat\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.sling.discovery.base\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.jackrabbit.oak-segment-tar\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.screens.com.adobe.cq.screens.dcc\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.sling.resourceresolver\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.sling.launchpad.installer\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.social.cq-social-badging-impl\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.sling.scripting.sightly.js.provider\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.granite.taskmanagement.workflow\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.social.cq-social-jcr-provider\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.social.cq-social-scoring-impl\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.cloud-config.core\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.social.cq-social-notifications-channels-web\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"day-commons-jrawio\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.granite.crx-explorer\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.granite.rest.assets\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.social.cq-social-badging-basic-impl\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.cq-activitymap-integration\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.sling.installer.provider.jcr\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.granite.auth.sso\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.day.cq.cq-authhandler\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.granite.jetty.ssl\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.cq-rest-sites\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.felix.org.apache.felix.threaddump\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.felix.webconsole.plugins.event\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.sling.scripting.jst\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.granite.jobs.async\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.granite.ui.clientlibs.compiler.less\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.sling.discovery.oak\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.granite.crypto.file\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.social.cq-social-as-provider\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.xmp.worker.files.native.fragment.linux\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.xmp.worker.files.native.fragment.macosx\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.social.cq-social-scf-impl\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.granite.repository.hc.impl\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.sling.security\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.sling.jmx.provider\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.cq-security-hc\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.felix.http.sslfilter\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.sling.extensions.webconsolesecurityprovider\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.sling.hc.webconsole\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.granite.webconsole.plugins\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.day.cq.cq-notifcation-impl\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.social.cq-social-notifications-impl\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.granite.security.ui\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.sling.scripting.javascript\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.granite.maintenance.oak\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.social.cq-social-enablement-impl\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.day.cq.dam.cq-dam-asset-usage\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.social.cq-social-srp-impl\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.day.commons.osgi.wrapper.simple-jndi\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.granite.dropwizard.metrics\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.social.cq-social-members-impl\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.granite.installer.factory.packages\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.granite.ui.clientlibs.processor.gcc\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.sling.startupfilter.disabler\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.cq-healthcheck\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.sling.installer.provider.file\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.dtm-reactor.core\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.cloud-config.ui\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.sling.commons.log.webconsole\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.sling.installer.console\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.felix.webconsole.plugins.packageadmin\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.granite.conf.ui.core\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.social.cq-social-rdb-provider\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.sling.repoinit.parser\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.sling.discovery.support\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.social.cq-social-graph-impl\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.day.cq.dam.cq-dam-s7dam\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.granite.apicontroller\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.jackrabbit.oak-auth-ldap\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.granite.conf\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.day.cq.dam.cq-dam-similaritysearch\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.day.cq.wcm.cq-msm-core\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.granite.frags.impl\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.granite.cors\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.granite.workflow.console\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.day.cq.cq-compat-configupdate\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.granite.crypto.jcr\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.day.cq.replication.extensions\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.forms.foundation-forms-foundation-base\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.sling.commons.fsclassloader\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.granite.gibson\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.granite.infocollector\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.granite.taskmanagement.core\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.cdn.cdn-rewriter\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.granite.tagsoup\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.cq-multisite-targeting\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.social.cq-social-ugcbase-impl\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.json-schema-parser\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.day.cq.pre-upgrade-tasks\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.mobile.cq-mobile-index-builder\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.screens.com.adobe.cq.screens.mq.core\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.mobile.cq-mobile-caas\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.social.cq-social-ideation-impl\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.com.adobe.cq.ui.commons\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.day.cq.cq-search-ext\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.day.cq.dam.cq-dam-annotation-print\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.social.cq-social-content-fragments-impl\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.granite.crypto.extension\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.granite.monitoring.core\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.day.cq.wcm.cq-wcm-translation\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.day.cq.cq-replication-audit\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.inbox.cq-inbox\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.felix.webconsole.plugins.ds\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.sling.resource.inventory\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.dtm-reactor.ui\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.mobile.cq-mobile-phonegap-build\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.granite.repository.checker\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.dam.cq-dam-svg-handler\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.cq-dtm\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.granite.distribution.core\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.aries.jmx.whiteboard\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.com.adobe.cq.projects.wcm.core\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.cq.cq-product-info-provider\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.sling.jcr.resourcesecurity\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.granite.asset.core\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteAuthCertImplClientCertAuthHandler", notes = "", response = ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.auth.cert.impl.ClientCertAuthHandler",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo> comAdobeGraniteAuthCertImplClientCertAuthHandler(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "path", required = false) String path,@ApiParam(value = "") @Valid @RequestParam(value = "service.ranking", required = false) Integer serviceRanking) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"path\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"service.ranking\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteAuthIms", notes = "", response = ComAdobeGraniteAuthImsInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthImsInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.auth.ims",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteAuthImsInfo> comAdobeGraniteAuthIms(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "configid", required = false) String configid,@ApiParam(value = "") @Valid @RequestParam(value = "scope", required = false) String scope) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"configid\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"scope\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension", notes = "", response = ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.auth.ims.impl.ExternalUserIdMappingProviderExtension",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo> comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "oauth.provider.id", required = false) String oauthProviderId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"oauth.provider.id\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl", notes = "", response = ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSAccessTokenRequestCustomizerImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo> comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "auth.ims.client.secret", required = false) String authImsClientSecret,@ApiParam(value = "") @Valid @RequestParam(value = "customizer.type", required = false) String customizerType) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"auth.ims.client.secret\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"customizer.type\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator", notes = "", response = ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSInstanceCredentialsValidator",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo> comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "oauth.provider.id", required = false) String oauthProviderId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"oauth.provider.id\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteAuthImsImplIMSProviderImpl", notes = "", response = ComAdobeGraniteAuthImsImplIMSProviderImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthImsImplIMSProviderImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSProviderImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteAuthImsImplIMSProviderImplInfo> comAdobeGraniteAuthImsImplIMSProviderImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "oauth.provider.id", required = false) String oauthProviderId,@ApiParam(value = "") @Valid @RequestParam(value = "oauth.provider.ims.authorization.url", required = false) String oauthProviderImsAuthorizationUrl,@ApiParam(value = "") @Valid @RequestParam(value = "oauth.provider.ims.token.url", required = false) String oauthProviderImsTokenUrl,@ApiParam(value = "") @Valid @RequestParam(value = "oauth.provider.ims.profile.url", required = false) String oauthProviderImsProfileUrl,@ApiParam(value = "") @Valid @RequestParam(value = "oauth.provider.ims.extended.details.urls", required = false) List<String> oauthProviderImsExtendedDetailsUrls,@ApiParam(value = "") @Valid @RequestParam(value = "oauth.provider.ims.validate.token.url", required = false) String oauthProviderImsValidateTokenUrl,@ApiParam(value = "") @Valid @RequestParam(value = "oauth.provider.ims.session.property", required = false) String oauthProviderImsSessionProperty,@ApiParam(value = "") @Valid @RequestParam(value = "oauth.provider.ims.service.token.client.id", required = false) String oauthProviderImsServiceTokenClientId,@ApiParam(value = "") @Valid @RequestParam(value = "oauth.provider.ims.service.token.client.secret", required = false) String oauthProviderImsServiceTokenClientSecret,@ApiParam(value = "") @Valid @RequestParam(value = "oauth.provider.ims.service.token", required = false) String oauthProviderImsServiceToken,@ApiParam(value = "") @Valid @RequestParam(value = "ims.org.ref", required = false) String imsOrgRef,@ApiParam(value = "") @Valid @RequestParam(value = "ims.group.mapping", required = false) List<String> imsGroupMapping,@ApiParam(value = "") @Valid @RequestParam(value = "oauth.provider.ims.only.license.group", required = false) Boolean oauthProviderImsOnlyLicenseGroup) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"oauth.provider.ims.session.property\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"oauth.provider.ims.extended.details.urls\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"oauth.provider.ims.validate.token.url\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"oauth.provider.id\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"oauth.provider.ims.only.license.group\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"oauth.provider.ims.authorization.url\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"oauth.provider.ims.service.token.client.secret\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"ims.org.ref\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"oauth.provider.ims.profile.url\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"oauth.provider.ims.service.token\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"ims.group.mapping\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"oauth.provider.ims.service.token.client.id\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"oauth.provider.ims.token.url\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteAuthImsImplImsConfigProviderImpl", notes = "", response = ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.auth.ims.impl.ImsConfigProviderImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo> comAdobeGraniteAuthImsImplImsConfigProviderImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "oauth.configmanager.ims.configid", required = false) String oauthConfigmanagerImsConfigid,@ApiParam(value = "") @Valid @RequestParam(value = "ims.owningEntity", required = false) String imsOwningEntity,@ApiParam(value = "") @Valid @RequestParam(value = "aem.instanceId", required = false) String aemInstanceId,@ApiParam(value = "") @Valid @RequestParam(value = "ims.serviceCode", required = false) String imsServiceCode) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"ims.owningEntity\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"oauth.configmanager.ims.configid\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"aem.instanceId\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"ims.serviceCode\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteAuthOauthAccesstokenProvider", notes = "", response = ComAdobeGraniteAuthOauthAccesstokenProviderInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthOauthAccesstokenProviderInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.auth.oauth.accesstoken.provider",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteAuthOauthAccesstokenProviderInfo> comAdobeGraniteAuthOauthAccesstokenProvider(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "name", required = false) String name,@ApiParam(value = "") @Valid @RequestParam(value = "auth.token.provider.title", required = false) String authTokenProviderTitle,@ApiParam(value = "") @Valid @RequestParam(value = "auth.token.provider.default.claims", required = false) List<String> authTokenProviderDefaultClaims,@ApiParam(value = "") @Valid @RequestParam(value = "auth.token.provider.endpoint", required = false) String authTokenProviderEndpoint,@ApiParam(value = "") @Valid @RequestParam(value = "auth.access.token.request", required = false) String authAccessTokenRequest,@ApiParam(value = "") @Valid @RequestParam(value = "auth.token.provider.keypair.alias", required = false) String authTokenProviderKeypairAlias,@ApiParam(value = "") @Valid @RequestParam(value = "auth.token.provider.conn.timeout", required = false) Integer authTokenProviderConnTimeout,@ApiParam(value = "") @Valid @RequestParam(value = "auth.token.provider.so.timeout", required = false) Integer authTokenProviderSoTimeout,@ApiParam(value = "") @Valid @RequestParam(value = "auth.token.provider.client.id", required = false) String authTokenProviderClientId,@ApiParam(value = "") @Valid @RequestParam(value = "auth.token.provider.scope", required = false) String authTokenProviderScope,@ApiParam(value = "") @Valid @RequestParam(value = "auth.token.provider.reuse.access.token", required = false) Boolean authTokenProviderReuseAccessToken,@ApiParam(value = "") @Valid @RequestParam(value = "auth.token.provider.relaxed.ssl", required = false) Boolean authTokenProviderRelaxedSsl,@ApiParam(value = "") @Valid @RequestParam(value = "token.request.customizer.type", required = false) String tokenRequestCustomizerType,@ApiParam(value = "") @Valid @RequestParam(value = "auth.token.validator.type", required = false) String authTokenValidatorType) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"auth.token.provider.relaxed.ssl\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"auth.token.provider.conn.timeout\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"auth.token.provider.client.id\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"auth.token.provider.endpoint\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"token.request.customizer.type\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"auth.token.provider.default.claims\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"auth.token.validator.type\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"auth.token.provider.so.timeout\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"auth.token.provider.title\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"auth.access.token.request\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"auth.token.provider.keypair.alias\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"auth.token.provider.scope\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"auth.token.provider.reuse.access.token\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteAuthOauthImplBearerAuthenticationHandler", notes = "", response = ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.BearerAuthenticationHandler",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo> comAdobeGraniteAuthOauthImplBearerAuthenticationHandler(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "path", required = false) String path,@ApiParam(value = "") @Valid @RequestParam(value = "oauth.clientIds.allowed", required = false) List<String> oauthClientIdsAllowed,@ApiParam(value = "") @Valid @RequestParam(value = "auth.bearer.sync.ims", required = false) Boolean authBearerSyncIms,@ApiParam(value = "") @Valid @RequestParam(value = "auth.tokenRequestParameter", required = false) String authTokenRequestParameter,@ApiParam(value = "") @Valid @RequestParam(value = "oauth.bearer.configid", required = false) String oauthBearerConfigid,@ApiParam(value = "") @Valid @RequestParam(value = "oauth.jwt.support", required = false) Boolean oauthJwtSupport) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"path\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"auth.bearer.sync.ims\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"auth.tokenRequestParameter\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"oauth.clientIds.allowed\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"oauth.jwt.support\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"oauth.bearer.configid\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl", notes = "", response = ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.DefaultTokenValidatorImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo> comAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "auth.token.validator.type", required = false) String authTokenValidatorType) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"auth.token.validator.type\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteAuthOauthImplFacebookProviderImpl", notes = "", response = ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.FacebookProviderImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo> comAdobeGraniteAuthOauthImplFacebookProviderImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "oauth.provider.id", required = false) String oauthProviderId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"oauth.provider.id\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteAuthOauthImplGithubProviderImpl", notes = "", response = ComAdobeGraniteAuthOauthImplGithubProviderImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthOauthImplGithubProviderImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.GithubProviderImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteAuthOauthImplGithubProviderImplInfo> comAdobeGraniteAuthOauthImplGithubProviderImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "oauth.provider.id", required = false) String oauthProviderId,@ApiParam(value = "") @Valid @RequestParam(value = "oauth.provider.github.authorization.url", required = false) String oauthProviderGithubAuthorizationUrl,@ApiParam(value = "") @Valid @RequestParam(value = "oauth.provider.github.token.url", required = false) String oauthProviderGithubTokenUrl,@ApiParam(value = "") @Valid @RequestParam(value = "oauth.provider.github.profile.url", required = false) String oauthProviderGithubProfileUrl) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"oauth.provider.id\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"oauth.provider.github.profile.url\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"oauth.provider.github.authorization.url\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"oauth.provider.github.token.url\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteAuthOauthImplGraniteProvider", notes = "", response = ComAdobeGraniteAuthOauthImplGraniteProviderInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthOauthImplGraniteProviderInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.GraniteProvider",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteAuthOauthImplGraniteProviderInfo> comAdobeGraniteAuthOauthImplGraniteProvider(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "oauth.provider.id", required = false) String oauthProviderId,@ApiParam(value = "") @Valid @RequestParam(value = "oauth.provider.granite.authorization.url", required = false) String oauthProviderGraniteAuthorizationUrl,@ApiParam(value = "") @Valid @RequestParam(value = "oauth.provider.granite.token.url", required = false) String oauthProviderGraniteTokenUrl,@ApiParam(value = "") @Valid @RequestParam(value = "oauth.provider.granite.profile.url", required = false) String oauthProviderGraniteProfileUrl,@ApiParam(value = "") @Valid @RequestParam(value = "oauth.provider.granite.extended.details.urls", required = false) String oauthProviderGraniteExtendedDetailsUrls) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"oauth.provider.granite.authorization.url\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"oauth.provider.id\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"oauth.provider.granite.profile.url\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"oauth.provider.granite.token.url\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"oauth.provider.granite.extended.details.urls\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteAuthOauthImplHelperProviderConfigManager", notes = "", response = ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManager",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo> comAdobeGraniteAuthOauthImplHelperProviderConfigManager(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "oauth.cookie.login.timeout", required = false) String oauthCookieLoginTimeout,@ApiParam(value = "") @Valid @RequestParam(value = "oauth.cookie.max.age", required = false) String oauthCookieMaxAge) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"oauth.cookie.login.timeout\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"oauth.cookie.max.age\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal", notes = "", response = ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManagerInternal",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo> comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "oauth.cookie.login.timeout", required = false) String oauthCookieLoginTimeout,@ApiParam(value = "") @Valid @RequestParam(value = "oauth.cookie.max.age", required = false) String oauthCookieMaxAge) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"oauth.cookie.login.timeout\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"oauth.cookie.max.age\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteAuthOauthImplOAuthAuthenticationHandler", notes = "", response = ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.OAuthAuthenticationHandler",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo> comAdobeGraniteAuthOauthImplOAuthAuthenticationHandler(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "path", required = false) String path) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"path\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteAuthOauthImplTwitterProviderImpl", notes = "", response = ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.TwitterProviderImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo> comAdobeGraniteAuthOauthImplTwitterProviderImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "oauth.provider.id", required = false) String oauthProviderId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"oauth.provider.id\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteAuthOauthProvider", notes = "", response = ComAdobeGraniteAuthOauthProviderInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthOauthProviderInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.auth.oauth.provider",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteAuthOauthProviderInfo> comAdobeGraniteAuthOauthProvider(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "oauth.config.id", required = false) String oauthConfigId,@ApiParam(value = "") @Valid @RequestParam(value = "oauth.client.id", required = false) String oauthClientId,@ApiParam(value = "") @Valid @RequestParam(value = "oauth.client.secret", required = false) String oauthClientSecret,@ApiParam(value = "") @Valid @RequestParam(value = "oauth.scope", required = false) List<String> oauthScope,@ApiParam(value = "") @Valid @RequestParam(value = "oauth.config.provider.id", required = false) String oauthConfigProviderId,@ApiParam(value = "") @Valid @RequestParam(value = "oauth.create.users", required = false) Boolean oauthCreateUsers,@ApiParam(value = "") @Valid @RequestParam(value = "oauth.userid.property", required = false) String oauthUseridProperty,@ApiParam(value = "") @Valid @RequestParam(value = "force.strict.username.matching", required = false) Boolean forceStrictUsernameMatching,@ApiParam(value = "") @Valid @RequestParam(value = "oauth.encode.userids", required = false) Boolean oauthEncodeUserids,@ApiParam(value = "") @Valid @RequestParam(value = "oauth.hash.userids", required = false) Boolean oauthHashUserids,@ApiParam(value = "") @Valid @RequestParam(value = "oauth.callBackUrl", required = false) String oauthCallBackUrl,@ApiParam(value = "") @Valid @RequestParam(value = "oauth.access.token.persist", required = false) Boolean oauthAccessTokenPersist,@ApiParam(value = "") @Valid @RequestParam(value = "oauth.access.token.persist.cookie", required = false) Boolean oauthAccessTokenPersistCookie,@ApiParam(value = "") @Valid @RequestParam(value = "oauth.csrf.state.protection", required = false) Boolean oauthCsrfStateProtection,@ApiParam(value = "") @Valid @RequestParam(value = "oauth.redirect.request.params", required = false) Boolean oauthRedirectRequestParams,@ApiParam(value = "") @Valid @RequestParam(value = "oauth.config.siblings.allow", required = false) Boolean oauthConfigSiblingsAllow) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"oauth.create.users\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"oauth.config.id\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"oauth.userid.property\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"oauth.access.token.persist.cookie\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"force.strict.username.matching\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"oauth.scope\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"oauth.hash.userids\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"oauth.client.id\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"oauth.access.token.persist\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"oauth.client.secret\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"oauth.callBackUrl\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"oauth.redirect.request.params\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"oauth.encode.userids\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"oauth.csrf.state.protection\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"oauth.config.siblings.allow\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"oauth.config.provider.id\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteAuthRequirementImplDefaultRequirementHandler", notes = "", response = ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.auth.requirement.impl.DefaultRequirementHandler",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo> comAdobeGraniteAuthRequirementImplDefaultRequirementHandler(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "supportedPaths", required = false) List<String> supportedPaths) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"supportedPaths\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteAuthSamlSamlAuthenticationHandler", notes = "", response = ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo> comAdobeGraniteAuthSamlSamlAuthenticationHandler(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "path", required = false) List<String> path,@ApiParam(value = "") @Valid @RequestParam(value = "service.ranking", required = false) Integer serviceRanking,@ApiParam(value = "") @Valid @RequestParam(value = "idpUrl", required = false) String idpUrl,@ApiParam(value = "") @Valid @RequestParam(value = "idpCertAlias", required = false) String idpCertAlias,@ApiParam(value = "") @Valid @RequestParam(value = "idpHttpRedirect", required = false) Boolean idpHttpRedirect,@ApiParam(value = "") @Valid @RequestParam(value = "serviceProviderEntityId", required = false) String serviceProviderEntityId,@ApiParam(value = "") @Valid @RequestParam(value = "assertionConsumerServiceURL", required = false) String assertionConsumerServiceURL,@ApiParam(value = "") @Valid @RequestParam(value = "spPrivateKeyAlias", required = false) String spPrivateKeyAlias,@ApiParam(value = "") @Valid @RequestParam(value = "keyStorePassword", required = false) String keyStorePassword,@ApiParam(value = "") @Valid @RequestParam(value = "defaultRedirectUrl", required = false) String defaultRedirectUrl,@ApiParam(value = "") @Valid @RequestParam(value = "userIDAttribute", required = false) String userIDAttribute,@ApiParam(value = "") @Valid @RequestParam(value = "useEncryption", required = false) Boolean useEncryption,@ApiParam(value = "") @Valid @RequestParam(value = "createUser", required = false) Boolean createUser,@ApiParam(value = "") @Valid @RequestParam(value = "userIntermediatePath", required = false) String userIntermediatePath,@ApiParam(value = "") @Valid @RequestParam(value = "addGroupMemberships", required = false) Boolean addGroupMemberships,@ApiParam(value = "") @Valid @RequestParam(value = "groupMembershipAttribute", required = false) String groupMembershipAttribute,@ApiParam(value = "") @Valid @RequestParam(value = "defaultGroups", required = false) List<String> defaultGroups,@ApiParam(value = "") @Valid @RequestParam(value = "nameIdFormat", required = false) String nameIdFormat,@ApiParam(value = "") @Valid @RequestParam(value = "synchronizeAttributes", required = false) List<String> synchronizeAttributes,@ApiParam(value = "") @Valid @RequestParam(value = "handleLogout", required = false) Boolean handleLogout,@ApiParam(value = "") @Valid @RequestParam(value = "logoutUrl", required = false) String logoutUrl,@ApiParam(value = "") @Valid @RequestParam(value = "clockTolerance", required = false) Integer clockTolerance,@ApiParam(value = "") @Valid @RequestParam(value = "digestMethod", required = false) String digestMethod,@ApiParam(value = "") @Valid @RequestParam(value = "signatureMethod", required = false) String signatureMethod,@ApiParam(value = "") @Valid @RequestParam(value = "identitySyncType", required = false) String identitySyncType,@ApiParam(value = "") @Valid @RequestParam(value = "idpIdentifier", required = false) String idpIdentifier) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"groupMembershipAttribute\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"idpHttpRedirect\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"idpCertAlias\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"defaultGroups\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"addGroupMemberships\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"path\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"assertionConsumerServiceURL\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"idpUrl\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"synchronizeAttributes\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"userIntermediatePath\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"serviceProviderEntityId\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"clockTolerance\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"spPrivateKeyAlias\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"keyStorePassword\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"digestMethod\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"signatureMethod\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"defaultRedirectUrl\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"identitySyncType\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"idpIdentifier\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"nameIdFormat\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"logoutUrl\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"useEncryption\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"createUser\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"handleLogout\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"service.ranking\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"userIDAttribute\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteAuthSsoImplSsoAuthenticationHandler", notes = "", response = ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.auth.sso.impl.SsoAuthenticationHandler",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo> comAdobeGraniteAuthSsoImplSsoAuthenticationHandler(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "path", required = false) String path,@ApiParam(value = "") @Valid @RequestParam(value = "service.ranking", required = false) Integer serviceRanking,@ApiParam(value = "") @Valid @RequestParam(value = "jaas.controlFlag", required = false) String jaasControlFlag,@ApiParam(value = "") @Valid @RequestParam(value = "jaas.realmName", required = false) String jaasRealmName,@ApiParam(value = "") @Valid @RequestParam(value = "jaas.ranking", required = false) Integer jaasRanking,@ApiParam(value = "") @Valid @RequestParam(value = "headers", required = false) List<String> headers,@ApiParam(value = "") @Valid @RequestParam(value = "cookies", required = false) List<String> cookies,@ApiParam(value = "") @Valid @RequestParam(value = "parameters", required = false) List<String> parameters,@ApiParam(value = "") @Valid @RequestParam(value = "usermap", required = false) List<String> usermap,@ApiParam(value = "") @Valid @RequestParam(value = "format", required = false) String format,@ApiParam(value = "") @Valid @RequestParam(value = "trustedCredentialsAttribute", required = false) String trustedCredentialsAttribute) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"path\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"headers\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"jaas.controlFlag\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"jaas.realmName\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"format\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"usermap\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"jaas.ranking\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"trustedCredentialsAttribute\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"parameters\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"service.ranking\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cookies\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteBundlesHcImplCodeCacheHealthCheck", notes = "", response = ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.CodeCacheHealthCheck",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo> comAdobeGraniteBundlesHcImplCodeCacheHealthCheck(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "hc.tags", required = false) List<String> hcTags,@ApiParam(value = "") @Valid @RequestParam(value = "minimum.code.cache.size", required = false) Integer minimumCodeCacheSize) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"minimum.code.cache.size\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"hc.tags\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck", notes = "", response = ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.CrxdeSupportBundleHealthCheck",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo> comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "hc.tags", required = false) List<String> hcTags) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"hc.tags\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteBundlesHcImplDavExBundleHealthCheck", notes = "", response = ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.DavExBundleHealthCheck",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo> comAdobeGraniteBundlesHcImplDavExBundleHealthCheck(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "hc.tags", required = false) List<String> hcTags) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"hc.tags\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck", notes = "", response = ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.InactiveBundlesHealthCheck",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo> comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "hc.tags", required = false) List<String> hcTags,@ApiParam(value = "") @Valid @RequestParam(value = "ignored.bundles", required = false) List<String> ignoredBundles) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"ignored.bundles\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"hc.tags\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteBundlesHcImplJobsHealthCheck", notes = "", response = ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.JobsHealthCheck",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo> comAdobeGraniteBundlesHcImplJobsHealthCheck(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "hc.tags", required = false) List<String> hcTags,@ApiParam(value = "") @Valid @RequestParam(value = "max.queued.jobs", required = false) Integer maxQueuedJobs) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"hc.tags\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"max.queued.jobs\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteBundlesHcImplSlingGetServletHealthCheck", notes = "", response = ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingGetServletHealthCheck",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo> comAdobeGraniteBundlesHcImplSlingGetServletHealthCheck(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "hc.tags", required = false) List<String> hcTags) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"hc.tags\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck", notes = "", response = ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJavaScriptHandlerHealthCheck",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo> comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "hc.tags", required = false) List<String> hcTags) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"hc.tags\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck", notes = "", response = ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJspScriptHandlerHealthCheck",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo> comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "hc.tags", required = false) List<String> hcTags) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"hc.tags\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck", notes = "", response = ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingReferrerFilterHealthCheck",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo> comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "hc.tags", required = false) List<String> hcTags) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"hc.tags\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteBundlesHcImplWebDavBundleHealthCheck", notes = "", response = ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.WebDavBundleHealthCheck",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo> comAdobeGraniteBundlesHcImplWebDavBundleHealthCheck(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "hc.tags", required = false) List<String> hcTags) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"hc.tags\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteCommentsInternalCommentReplicationContentFilterFac", notes = "", response = ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.comments.internal.CommentReplicationContentFilterFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo> comAdobeGraniteCommentsInternalCommentReplicationContentFilterFac(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "replicate.comment.resourceTypes", required = false) List<String> replicateCommentResourceTypes) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"replicate.comment.resourceTypes\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl", notes = "", response = ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.compatrouter.impl.CompatSwitchingServiceImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo> comAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "compatgroups", required = false) List<String> compatgroups,@ApiParam(value = "") @Valid @RequestParam(value = "enabled", required = false) Boolean enabled) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"compatgroups\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteCompatrouterImplRoutingConfig", notes = "", response = ComAdobeGraniteCompatrouterImplRoutingConfigInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteCompatrouterImplRoutingConfigInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.compatrouter.impl.RoutingConfig",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteCompatrouterImplRoutingConfigInfo> comAdobeGraniteCompatrouterImplRoutingConfig(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "id", required = false) String id,@ApiParam(value = "") @Valid @RequestParam(value = "compatPath", required = false) String compatPath,@ApiParam(value = "") @Valid @RequestParam(value = "newPath", required = false) String newPath) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"id\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"compatPath\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"newPath\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteCompatrouterImplSwitchMappingConfig", notes = "", response = ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.compatrouter.impl.SwitchMappingConfig",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo> comAdobeGraniteCompatrouterImplSwitchMappingConfig(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "group", required = false) String group,@ApiParam(value = "") @Valid @RequestParam(value = "ids", required = false) List<String> ids) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"ids\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"group\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving", notes = "", response = ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.conf.impl.RuntimeAwareConfigurationResourceResolvingStrategy",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo> comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "enabled", required = false) Boolean enabled,@ApiParam(value = "") @Valid @RequestParam(value = "fallbackPaths", required = false) List<String> fallbackPaths) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"fallbackPaths\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteContexthubImplContextHubImpl", notes = "", response = ComAdobeGraniteContexthubImplContextHubImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteContexthubImplContextHubImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.contexthub.impl.ContextHubImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteContexthubImplContextHubImplInfo> comAdobeGraniteContexthubImplContextHubImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.granite.contexthub.silent_mode", required = false) Boolean comAdobeGraniteContexthubSilentMode,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.granite.contexthub.show_ui", required = false) Boolean comAdobeGraniteContexthubShowUi) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"com.adobe.granite.contexthub.show_ui\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"com.adobe.granite.contexthub.silent_mode\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteCorsImplCORSPolicyImpl", notes = "", response = ComAdobeGraniteCorsImplCORSPolicyImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteCorsImplCORSPolicyImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.cors.impl.CORSPolicyImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteCorsImplCORSPolicyImplInfo> comAdobeGraniteCorsImplCORSPolicyImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "alloworigin", required = false) List<String> alloworigin,@ApiParam(value = "") @Valid @RequestParam(value = "alloworiginregexp", required = false) List<String> alloworiginregexp,@ApiParam(value = "") @Valid @RequestParam(value = "allowedpaths", required = false) List<String> allowedpaths,@ApiParam(value = "") @Valid @RequestParam(value = "exposedheaders", required = false) List<String> exposedheaders,@ApiParam(value = "") @Valid @RequestParam(value = "maxage", required = false) Integer maxage,@ApiParam(value = "") @Valid @RequestParam(value = "supportedheaders", required = false) List<String> supportedheaders,@ApiParam(value = "") @Valid @RequestParam(value = "supportedmethods", required = false) List<String> supportedmethods,@ApiParam(value = "") @Valid @RequestParam(value = "supportscredentials", required = false) Boolean supportscredentials) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"supportedheaders\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"alloworigin\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"maxage\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"allowedpaths\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"alloworiginregexp\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"supportedmethods\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"supportscredentials\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"exposedheaders\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteCsrfImplCSRFFilter", notes = "", response = ComAdobeGraniteCsrfImplCSRFFilterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteCsrfImplCSRFFilterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.csrf.impl.CSRFFilter",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteCsrfImplCSRFFilterInfo> comAdobeGraniteCsrfImplCSRFFilter(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "filter.methods", required = false) List<String> filterMethods,@ApiParam(value = "") @Valid @RequestParam(value = "filter.enable.safe.user.agents", required = false) Boolean filterEnableSafeUserAgents,@ApiParam(value = "") @Valid @RequestParam(value = "filter.safe.user.agents", required = false) List<String> filterSafeUserAgents,@ApiParam(value = "") @Valid @RequestParam(value = "filter.excluded.paths", required = false) List<String> filterExcludedPaths) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"filter.methods\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"filter.excluded.paths\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"filter.safe.user.agents\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"filter.enable.safe.user.agents\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteCsrfImplCSRFServlet", notes = "", response = ComAdobeGraniteCsrfImplCSRFServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteCsrfImplCSRFServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.csrf.impl.CSRFServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteCsrfImplCSRFServletInfo> comAdobeGraniteCsrfImplCSRFServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "csrf.token.expires.in", required = false) Integer csrfTokenExpiresIn,@ApiParam(value = "") @Valid @RequestParam(value = "sling.auth.requirements", required = false) String slingAuthRequirements) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"csrf.token.expires.in\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"sling.auth.requirements\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe", notes = "", response = ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.distribution.core.impl.CryptoDistributionTransportSecretProvider",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo> comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "name", required = false) String name,@ApiParam(value = "") @Valid @RequestParam(value = "username", required = false) String username,@ApiParam(value = "") @Valid @RequestParam(value = "encryptedPassword", required = false) String encryptedPassword) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"username\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"encryptedPassword\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteDistributionCoreImplDiffDiffChangesObserver", notes = "", response = ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffChangesObserver",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo> comAdobeGraniteDistributionCoreImplDiffDiffChangesObserver(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "enabled", required = false) Boolean enabled,@ApiParam(value = "") @Valid @RequestParam(value = "agentName", required = false) String agentName,@ApiParam(value = "") @Valid @RequestParam(value = "diffPath", required = false) String diffPath,@ApiParam(value = "") @Valid @RequestParam(value = "observedPath", required = false) String observedPath,@ApiParam(value = "") @Valid @RequestParam(value = "serviceName", required = false) String serviceName,@ApiParam(value = "") @Valid @RequestParam(value = "propertyNames", required = false) String propertyNames,@ApiParam(value = "") @Valid @RequestParam(value = "distributionDelay", required = false) Integer distributionDelay,@ApiParam(value = "") @Valid @RequestParam(value = "serviceUser.target", required = false) String serviceUserTarget) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"serviceUser.target\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"propertyNames\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"agentName\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"distributionDelay\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"observedPath\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"serviceName\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"diffPath\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteDistributionCoreImplDiffDiffEventListener", notes = "", response = ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffEventListener",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo> comAdobeGraniteDistributionCoreImplDiffDiffEventListener(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "diffPath", required = false) String diffPath,@ApiParam(value = "") @Valid @RequestParam(value = "serviceName", required = false) String serviceName,@ApiParam(value = "") @Valid @RequestParam(value = "serviceUser.target", required = false) String serviceUserTarget) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"serviceUser.target\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"serviceName\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"diffPath\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteDistributionCoreImplDistributionToReplicationEven", notes = "", response = ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.distribution.core.impl.DistributionToReplicationEventTransformer",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo> comAdobeGraniteDistributionCoreImplDistributionToReplicationEven(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "importer.name", required = false) List<String> importerName) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"importer.name\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat", notes = "", response = ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.distribution.core.impl.replication.adapters.ReplicationAgentProvider",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo> comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "providerName", required = false) String providerName,@ApiParam(value = "") @Valid @RequestParam(value = "forward.requests", required = false) Boolean forwardRequests) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"forward.requests\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"providerName\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteDistributionCoreImplReplicationDistributionTrans", notes = "", response = ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.distribution.core.impl.replication.DistributionTransportHandler",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo> comAdobeGraniteDistributionCoreImplReplicationDistributionTrans(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "forward.requests", required = false) Boolean forwardRequests) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"forward.requests\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu", notes = "", response = ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.distribution.core.impl.transport.AccessTokenDistributionTransportSecretProvider",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo> comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "name", required = false) String name,@ApiParam(value = "") @Valid @RequestParam(value = "serviceName", required = false) String serviceName,@ApiParam(value = "") @Valid @RequestParam(value = "userId", required = false) String userId,@ApiParam(value = "") @Valid @RequestParam(value = "accessTokenProvider.target", required = false) String accessTokenProviderTarget) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"accessTokenProvider.target\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"serviceName\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"userId\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteFragsImplCheckHttpHeaderFlag", notes = "", response = ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.frags.impl.CheckHttpHeaderFlag",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo> comAdobeGraniteFragsImplCheckHttpHeaderFlag(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "feature.name", required = false) String featureName,@ApiParam(value = "") @Valid @RequestParam(value = "feature.description", required = false) String featureDescription,@ApiParam(value = "") @Valid @RequestParam(value = "http.header.name", required = false) String httpHeaderName,@ApiParam(value = "") @Valid @RequestParam(value = "http.header.valuepattern", required = false) String httpHeaderValuepattern) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"feature.description\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"http.header.valuepattern\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"http.header.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"feature.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteFragsImplRandomFeature", notes = "", response = ComAdobeGraniteFragsImplRandomFeatureInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteFragsImplRandomFeatureInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.frags.impl.RandomFeature",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteFragsImplRandomFeatureInfo> comAdobeGraniteFragsImplRandomFeature(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "feature.name", required = false) String featureName,@ApiParam(value = "") @Valid @RequestParam(value = "feature.description", required = false) String featureDescription,@ApiParam(value = "") @Valid @RequestParam(value = "active.percentage", required = false) String activePercentage,@ApiParam(value = "") @Valid @RequestParam(value = "cookie.name", required = false) String cookieName,@ApiParam(value = "") @Valid @RequestParam(value = "cookie.maxAge", required = false) Integer cookieMaxAge) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"feature.description\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"cookie.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"cookie.maxAge\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"active.percentage\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"feature.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteHttpcacheFileFileCacheStore", notes = "", response = ComAdobeGraniteHttpcacheFileFileCacheStoreInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteHttpcacheFileFileCacheStoreInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.httpcache.file.FileCacheStore",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteHttpcacheFileFileCacheStoreInfo> comAdobeGraniteHttpcacheFileFileCacheStore(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.granite.httpcache.file.documentRoot", required = false) String comAdobeGraniteHttpcacheFileDocumentRoot,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.granite.httpcache.file.includeHost", required = false) String comAdobeGraniteHttpcacheFileIncludeHost) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"com.adobe.granite.httpcache.file.documentRoot\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.granite.httpcache.file.includeHost\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteHttpcacheImplOuterCacheFilter", notes = "", response = ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.httpcache.impl.OuterCacheFilter",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo> comAdobeGraniteHttpcacheImplOuterCacheFilter(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.granite.httpcache.url.paths", required = false) List<String> comAdobeGraniteHttpcacheUrlPaths) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"com.adobe.granite.httpcache.url.paths\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteI18nImplBundlePseudoTranslations", notes = "", response = ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.i18n.impl.bundle.PseudoTranslations",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo> comAdobeGraniteI18nImplBundlePseudoTranslations(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "pseudo.patterns", required = false) List<String> pseudoPatterns) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"pseudo.patterns\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteI18nImplPreferencesLocaleResolverService", notes = "", response = ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.i18n.impl.PreferencesLocaleResolverService",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo> comAdobeGraniteI18nImplPreferencesLocaleResolverService(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "security.preferences.name", required = false) String securityPreferencesName) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"security.preferences.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteInfocollectorInfoCollector", notes = "", response = ComAdobeGraniteInfocollectorInfoCollectorInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteInfocollectorInfoCollectorInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.infocollector.InfoCollector",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteInfocollectorInfoCollectorInfo> comAdobeGraniteInfocollectorInfoCollector(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "granite.infocollector.includeThreadDumps", required = false) Boolean graniteInfocollectorIncludeThreadDumps,@ApiParam(value = "") @Valid @RequestParam(value = "granite.infocollector.includeHeapDump", required = false) Boolean graniteInfocollectorIncludeHeapDump) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"granite.infocollector.includeThreadDumps\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"granite.infocollector.includeHeapDump\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteJettySslInternalGraniteSslConnectorFactory", notes = "", response = ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.jetty.ssl.internal.GraniteSslConnectorFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo> comAdobeGraniteJettySslInternalGraniteSslConnectorFactory(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.granite.jetty.ssl.port", required = false) Integer comAdobeGraniteJettySslPort,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.granite.jetty.ssl.keystore.user", required = false) String comAdobeGraniteJettySslKeystoreUser,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.granite.jetty.ssl.keystore.password", required = false) String comAdobeGraniteJettySslKeystorePassword,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.granite.jetty.ssl.ciphersuites.excluded", required = false) List<String> comAdobeGraniteJettySslCiphersuitesExcluded,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.granite.jetty.ssl.ciphersuites.included", required = false) List<String> comAdobeGraniteJettySslCiphersuitesIncluded,@ApiParam(value = "") @Valid @RequestParam(value = "com.adobe.granite.jetty.ssl.client.certificate", required = false) String comAdobeGraniteJettySslClientCertificate) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"additionalProperties\" : \"additionalProperties\",  \"title\" : \"title\",  \"properties\" : {    \"com.adobe.granite.jetty.ssl.ciphersuites.included\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"com.adobe.granite.jetty.ssl.keystore.password\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.granite.jetty.ssl.keystore.user\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"com.adobe.granite.jetty.ssl.client.certificate\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"com.adobe.granite.jetty.ssl.ciphersuites.excluded\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"com.adobe.granite.jetty.ssl.port\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteLicenseImplLicenseCheckFilter", notes = "", response = ComAdobeGraniteLicenseImplLicenseCheckFilterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteLicenseImplLicenseCheckFilterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.license.impl.LicenseCheckFilter",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteLicenseImplLicenseCheckFilterInfo> comAdobeGraniteLicenseImplLicenseCheckFilter(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "checkInternval", required = false) Integer checkInternval,@ApiParam(value = "") @Valid @RequestParam(value = "excludeIds", required = false) List<String> excludeIds,@ApiParam(value = "") @Valid @RequestParam(value = "encryptPing", required = false) Boolean encryptPing) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"checkInternval\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"excludeIds\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"encryptPing\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteLoggingImplLogAnalyserImpl", notes = "", response = ComAdobeGraniteLoggingImplLogAnalyserImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteLoggingImplLogAnalyserImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.logging.impl.LogAnalyserImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteLoggingImplLogAnalyserImplInfo> comAdobeGraniteLoggingImplLogAnalyserImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "messages.queue.size", required = false) Integer messagesQueueSize,@ApiParam(value = "") @Valid @RequestParam(value = "logger.config", required = false) List<String> loggerConfig,@ApiParam(value = "") @Valid @RequestParam(value = "messages.size", required = false) Integer messagesSize) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"logger.config\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"messages.size\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"messages.queue.size\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteLoggingImplLogErrorHealthCheck", notes = "", response = ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.logging.impl.LogErrorHealthCheck",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo> comAdobeGraniteLoggingImplLogErrorHealthCheck(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "hc.tags", required = false) List<String> hcTags) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"hc.tags\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask", notes = "", response = ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.DataStoreGarbageCollectionTask",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo> comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "granite.maintenance.mandatory", required = false) Boolean graniteMaintenanceMandatory,@ApiParam(value = "") @Valid @RequestParam(value = "job.topics", required = false) String jobTopics) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"job.topics\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"granite.maintenance.mandatory\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask", notes = "", response = ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.LuceneBinariesCleanupTask",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo> comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "job.topics", required = false) String jobTopics) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"job.topics\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteMaintenanceCrxImplRevisionCleanupTask", notes = "", response = ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.RevisionCleanupTask",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo> comAdobeGraniteMaintenanceCrxImplRevisionCleanupTask(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "full.gc.days", required = false) List<String> fullGcDays) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"full.gc.days\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteMonitoringImplScriptConfigImpl", notes = "", response = ComAdobeGraniteMonitoringImplScriptConfigImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteMonitoringImplScriptConfigImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.monitoring.impl.ScriptConfigImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteMonitoringImplScriptConfigImplInfo> comAdobeGraniteMonitoringImplScriptConfigImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "script.filename", required = false) String scriptFilename,@ApiParam(value = "") @Valid @RequestParam(value = "script.display", required = false) String scriptDisplay,@ApiParam(value = "") @Valid @RequestParam(value = "script.path", required = false) String scriptPath,@ApiParam(value = "") @Valid @RequestParam(value = "script.platform", required = false) List<String> scriptPlatform,@ApiParam(value = "") @Valid @RequestParam(value = "interval", required = false) Integer interval,@ApiParam(value = "") @Valid @RequestParam(value = "jmxdomain", required = false) String jmxdomain) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"script.path\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"interval\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"script.filename\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"script.display\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"script.platform\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"jmxdomain\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan", notes = "", response = ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.oauth.server.auth.impl.OAuth2ServerAuthenticationHandler",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo> comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "path", required = false) String path,@ApiParam(value = "") @Valid @RequestParam(value = "jaas.controlFlag", required = false) String jaasControlFlag,@ApiParam(value = "") @Valid @RequestParam(value = "jaas.realmName", required = false) String jaasRealmName,@ApiParam(value = "") @Valid @RequestParam(value = "jaas.ranking", required = false) Integer jaasRanking,@ApiParam(value = "") @Valid @RequestParam(value = "oauth.offline.validation", required = false) Boolean oauthOfflineValidation) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"oauth.offline.validation\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"path\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"jaas.controlFlag\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"jaas.realmName\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"jaas.ranking\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteOauthServerImplAccessTokenCleanupTask", notes = "", response = ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.oauth.server.impl.AccessTokenCleanupTask",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo> comAdobeGraniteOauthServerImplAccessTokenCleanupTask(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "scheduler.expression", required = false) String schedulerExpression) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"scheduler.expression\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet", notes = "", response = ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2ClientRevocationServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo> comAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "oauth.client.revocation.active", required = false) Boolean oauthClientRevocationActive) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"oauth.client.revocation.active\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet", notes = "", response = ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2RevocationEndpointServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo> comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "sling.servlet.paths", required = false) String slingServletPaths,@ApiParam(value = "") @Valid @RequestParam(value = "oauth.revocation.active", required = false) Boolean oauthRevocationActive) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"oauth.revocation.active\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"sling.servlet.paths\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet", notes = "", response = ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenEndpointServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo> comAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "oauth.issuer", required = false) String oauthIssuer,@ApiParam(value = "") @Valid @RequestParam(value = "oauth.access.token.expires.in", required = false) String oauthAccessTokenExpiresIn,@ApiParam(value = "") @Valid @RequestParam(value = "osgi.http.whiteboard.servlet.pattern", required = false) String osgiHttpWhiteboardServletPattern,@ApiParam(value = "") @Valid @RequestParam(value = "osgi.http.whiteboard.context.select", required = false) String osgiHttpWhiteboardContextSelect) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"oauth.issuer\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"osgi.http.whiteboard.servlet.pattern\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"osgi.http.whiteboard.context.select\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"oauth.access.token.expires.in\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet", notes = "", response = ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenRevocationServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo> comAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "oauth.token.revocation.active", required = false) Boolean oauthTokenRevocationActive) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"oauth.token.revocation.active\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteOffloadingImplOffloadingConfigurator", notes = "", response = ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingConfigurator",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo> comAdobeGraniteOffloadingImplOffloadingConfigurator(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "offloading.transporter", required = false) String offloadingTransporter,@ApiParam(value = "") @Valid @RequestParam(value = "offloading.cleanup.payload", required = false) Boolean offloadingCleanupPayload) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"offloading.cleanup.payload\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"offloading.transporter\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteOffloadingImplOffloadingJobCloner", notes = "", response = ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobCloner",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo> comAdobeGraniteOffloadingImplOffloadingJobCloner(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "offloading.jobcloner.enabled", required = false) Boolean offloadingJobclonerEnabled) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"offloading.jobcloner.enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteOffloadingImplOffloadingJobOffloader", notes = "", response = ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobOffloader",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo> comAdobeGraniteOffloadingImplOffloadingJobOffloader(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "offloading.offloader.enabled", required = false) Boolean offloadingOffloaderEnabled) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"offloading.offloader.enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteOffloadingImplTransporterOffloadingAgentManager", notes = "", response = ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingAgentManager",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo> comAdobeGraniteOffloadingImplTransporterOffloadingAgentManager(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "offloading.agentmanager.enabled", required = false) Boolean offloadingAgentmanagerEnabled) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"offloading.agentmanager.enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo", notes = "", response = ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingDefaultTransporter",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo> comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "default.transport.agent-to-worker.prefix", required = false) String defaultTransportAgentToWorkerPrefix,@ApiParam(value = "") @Valid @RequestParam(value = "default.transport.agent-to-master.prefix", required = false) String defaultTransportAgentToMasterPrefix,@ApiParam(value = "") @Valid @RequestParam(value = "default.transport.input.package", required = false) String defaultTransportInputPackage,@ApiParam(value = "") @Valid @RequestParam(value = "default.transport.output.package", required = false) String defaultTransportOutputPackage,@ApiParam(value = "") @Valid @RequestParam(value = "default.transport.replication.synchronous", required = false) Boolean defaultTransportReplicationSynchronous,@ApiParam(value = "") @Valid @RequestParam(value = "default.transport.contentpackage", required = false) Boolean defaultTransportContentpackage,@ApiParam(value = "") @Valid @RequestParam(value = "offloading.transporter.default.enabled", required = false) Boolean offloadingTransporterDefaultEnabled) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"default.transport.agent-to-worker.prefix\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"default.transport.input.package\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"offloading.transporter.default.enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"default.transport.contentpackage\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"default.transport.agent-to-master.prefix\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"default.transport.output.package\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"default.transport.replication.synchronous\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl", notes = "", response = ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.omnisearch.impl.core.OmniSearchServiceImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo> comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "omnisearch.suggestion.requiretext.min", required = false) Integer omnisearchSuggestionRequiretextMin,@ApiParam(value = "") @Valid @RequestParam(value = "omnisearch.suggestion.spellcheck.require", required = false) Boolean omnisearchSuggestionSpellcheckRequire) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"omnisearch.suggestion.requiretext.min\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"omnisearch.suggestion.spellcheck.require\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteOptoutImplOptOutServiceImpl", notes = "", response = ComAdobeGraniteOptoutImplOptOutServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteOptoutImplOptOutServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.optout.impl.OptOutServiceImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteOptoutImplOptOutServiceImplInfo> comAdobeGraniteOptoutImplOptOutServiceImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "optout.cookies", required = false) List<String> optoutCookies,@ApiParam(value = "") @Valid @RequestParam(value = "optout.headers", required = false) List<String> optoutHeaders,@ApiParam(value = "") @Valid @RequestParam(value = "optout.whitelist.cookies", required = false) List<String> optoutWhitelistCookies) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"optout.headers\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"optout.cookies\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"optout.whitelist.cookies\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteQueriesImplHcAsyncIndexHealthCheck", notes = "", response = ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.queries.impl.hc.AsyncIndexHealthCheck",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo> comAdobeGraniteQueriesImplHcAsyncIndexHealthCheck(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "indexing.critical.threshold", required = false) Integer indexingCriticalThreshold,@ApiParam(value = "") @Valid @RequestParam(value = "indexing.warn.threshold", required = false) Integer indexingWarnThreshold,@ApiParam(value = "") @Valid @RequestParam(value = "hc.tags", required = false) List<String> hcTags) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"indexing.critical.threshold\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"indexing.warn.threshold\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"hc.tags\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteQueriesImplHcLargeIndexHealthCheck", notes = "", response = ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.queries.impl.hc.LargeIndexHealthCheck",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo> comAdobeGraniteQueriesImplHcLargeIndexHealthCheck(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "large.index.critical.threshold", required = false) Integer largeIndexCriticalThreshold,@ApiParam(value = "") @Valid @RequestParam(value = "large.index.warn.threshold", required = false) Integer largeIndexWarnThreshold,@ApiParam(value = "") @Valid @RequestParam(value = "hc.tags", required = false) List<String> hcTags) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"large.index.critical.threshold\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"hc.tags\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"large.index.warn.threshold\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteQueriesImplHcQueriesStatusHealthCheck", notes = "", response = ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueriesStatusHealthCheck",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo> comAdobeGraniteQueriesImplHcQueriesStatusHealthCheck(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "hc.tags", required = false) List<String> hcTags) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"hc.tags\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteQueriesImplHcQueryHealthCheckMetrics", notes = "", response = ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueryHealthCheckMetrics",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo> comAdobeGraniteQueriesImplHcQueryHealthCheckMetrics(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "getPeriod", required = false) Integer getPeriod) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"getPeriod\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteQueriesImplHcQueryLimitsHealthCheck", notes = "", response = ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueryLimitsHealthCheck",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo> comAdobeGraniteQueriesImplHcQueryLimitsHealthCheck(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "hc.tags", required = false) List<String> hcTags) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"hc.tags\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteReplicationHcImplReplicationQueueHealthCheck", notes = "", response = ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationQueueHealthCheck",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo> comAdobeGraniteReplicationHcImplReplicationQueueHealthCheck(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "number.of.retries.allowed", required = false) Integer numberOfRetriesAllowed,@ApiParam(value = "") @Valid @RequestParam(value = "hc.tags", required = false) List<String> hcTags) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"number.of.retries.allowed\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"hc.tags\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC", notes = "", response = ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationTransportUsersHealthCheck",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo> comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "hc.tags", required = false) List<String> hcTags) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"hc.tags\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck", notes = "", response = ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.repository.hc.impl.AuthorizableNodeNameHealthCheck",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo> comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "hc.tags", required = false) List<String> hcTags) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"hc.tags\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC", notes = "", response = ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.repository.hc.impl.content.sling.SlingContentHealthCheck",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo> comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "hc.tags", required = false) List<String> hcTags,@ApiParam(value = "") @Valid @RequestParam(value = "exclude.search.path", required = false) List<String> excludeSearchPath) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"exclude.search.path\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"hc.tags\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck", notes = "", response = ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.repository.hc.impl.ContinuousRGCHealthCheck",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo> comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "hc.tags", required = false) List<String> hcTags) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"hc.tags\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe", notes = "", response = ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultAccessUserProfileHealthCheck",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo> comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "hc.tags", required = false) List<String> hcTags) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"hc.tags\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck", notes = "", response = ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultLoginsHealthCheck",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo> comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "hc.tags", required = false) List<String> hcTags,@ApiParam(value = "") @Valid @RequestParam(value = "account.logins", required = false) List<String> accountLogins,@ApiParam(value = "") @Valid @RequestParam(value = "console.logins", required = false) List<String> consoleLogins) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"account.logins\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"hc.tags\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"console.logins\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck", notes = "", response = ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.repository.hc.impl.DiskSpaceHealthCheck",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo> comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "hc.tags", required = false) List<String> hcTags,@ApiParam(value = "") @Valid @RequestParam(value = "disk.space.warn.threshold", required = false) Integer diskSpaceWarnThreshold,@ApiParam(value = "") @Valid @RequestParam(value = "disk.space.error.threshold", required = false) Integer diskSpaceErrorThreshold) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"disk.space.warn.threshold\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"hc.tags\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"disk.space.error.threshold\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck", notes = "", response = ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.repository.hc.impl.ObservationQueueLengthHealthCheck",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo> comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "hc.tags", required = false) List<String> hcTags) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"hc.tags\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteRepositoryImplCommitStatsConfig", notes = "", response = ComAdobeGraniteRepositoryImplCommitStatsConfigInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteRepositoryImplCommitStatsConfigInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.repository.impl.CommitStatsConfig",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteRepositoryImplCommitStatsConfigInfo> comAdobeGraniteRepositoryImplCommitStatsConfig(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "enabled", required = false) Boolean enabled,@ApiParam(value = "") @Valid @RequestParam(value = "intervalSeconds", required = false) Integer intervalSeconds,@ApiParam(value = "") @Valid @RequestParam(value = "commitsPerIntervalThreshold", required = false) Integer commitsPerIntervalThreshold,@ApiParam(value = "") @Valid @RequestParam(value = "maxLocationLength", required = false) Integer maxLocationLength,@ApiParam(value = "") @Valid @RequestParam(value = "maxDetailsShown", required = false) Integer maxDetailsShown,@ApiParam(value = "") @Valid @RequestParam(value = "minDetailsPercentage", required = false) Integer minDetailsPercentage,@ApiParam(value = "") @Valid @RequestParam(value = "threadMatchers", required = false) List<String> threadMatchers,@ApiParam(value = "") @Valid @RequestParam(value = "maxGreedyDepth", required = false) Integer maxGreedyDepth,@ApiParam(value = "") @Valid @RequestParam(value = "greedyStackMatchers", required = false) String greedyStackMatchers,@ApiParam(value = "") @Valid @RequestParam(value = "stackFilters", required = false) List<String> stackFilters,@ApiParam(value = "") @Valid @RequestParam(value = "stackMatchers", required = false) List<String> stackMatchers,@ApiParam(value = "") @Valid @RequestParam(value = "stackCategorizers", required = false) List<String> stackCategorizers,@ApiParam(value = "") @Valid @RequestParam(value = "stackShorteners", required = false) List<String> stackShorteners) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"threadMatchers\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"greedyStackMatchers\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"minDetailsPercentage\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"maxLocationLength\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"maxDetailsShown\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"commitsPerIntervalThreshold\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"stackShorteners\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"stackFilters\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"stackCategorizers\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"maxGreedyDepth\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"stackMatchers\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"intervalSeconds\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteRepositoryServiceUserConfiguration", notes = "", response = ComAdobeGraniteRepositoryServiceUserConfigurationInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteRepositoryServiceUserConfigurationInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.repository.ServiceUserConfiguration",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteRepositoryServiceUserConfigurationInfo> comAdobeGraniteRepositoryServiceUserConfiguration(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "service.ranking", required = false) Integer serviceRanking,@ApiParam(value = "") @Valid @RequestParam(value = "serviceusers.simpleSubjectPopulation", required = false) Boolean serviceusersSimpleSubjectPopulation,@ApiParam(value = "") @Valid @RequestParam(value = "serviceusers.list", required = false) List<String> serviceusersList) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"serviceusers.list\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"serviceusers.simpleSubjectPopulation\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"service.ranking\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm", notes = "", response = ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.requests.logging.impl.hc.RequestsStatusHealthCheckImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo> comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "hc.tags", required = false) List<String> hcTags) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"hc.tags\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteResourcestatusImplCompositeStatusType", notes = "", response = ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.resourcestatus.impl.CompositeStatusType",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo> comAdobeGraniteResourcestatusImplCompositeStatusType(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "name", required = false) String name,@ApiParam(value = "") @Valid @RequestParam(value = "types", required = false) List<String> types) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"types\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteResourcestatusImplStatusResourceProviderImpl", notes = "", response = ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.resourcestatus.impl.StatusResourceProviderImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo> comAdobeGraniteResourcestatusImplStatusResourceProviderImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "provider.root", required = false) String providerRoot) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"provider.root\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteRestAssetsImplAssetContentDispositionFilter", notes = "", response = ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.rest.assets.impl.AssetContentDispositionFilter",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo> comAdobeGraniteRestAssetsImplAssetContentDispositionFilter(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "mime.allowEmpty", required = false) Boolean mimeAllowEmpty,@ApiParam(value = "") @Valid @RequestParam(value = "mime.allowed", required = false) List<String> mimeAllowed) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"mime.allowed\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"mime.allowEmpty\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl", notes = "", response = ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.rest.impl.ApiEndpointResourceProviderFactoryImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo> comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "provider.roots", required = false) String providerRoots) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"provider.roots\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteRestImplServletDefaultGETServlet", notes = "", response = ComAdobeGraniteRestImplServletDefaultGETServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteRestImplServletDefaultGETServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.rest.impl.servlet.DefaultGETServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteRestImplServletDefaultGETServletInfo> comAdobeGraniteRestImplServletDefaultGETServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "default.limit", required = false) Integer defaultLimit,@ApiParam(value = "") @Valid @RequestParam(value = "use.absolute.uri", required = false) Boolean useAbsoluteUri) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"use.absolute.uri\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"default.limit\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS", notes = "", response = ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.security.user.ui.internal.servlets.SSLConfigurationServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo> comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "hc.tags", required = false) List<String> hcTags) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"hc.tags\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteSecurityUserUserPropertiesService", notes = "", response = ComAdobeGraniteSecurityUserUserPropertiesServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteSecurityUserUserPropertiesServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.security.user.UserPropertiesService",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteSecurityUserUserPropertiesServiceInfo> comAdobeGraniteSecurityUserUserPropertiesService(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "adapter.condition", required = false) String adapterCondition,@ApiParam(value = "") @Valid @RequestParam(value = "granite.userproperties.nodetypes", required = false) List<String> graniteUserpropertiesNodetypes,@ApiParam(value = "") @Valid @RequestParam(value = "granite.userproperties.resourcetypes", required = false) List<String> graniteUserpropertiesResourcetypes) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"granite.userproperties.resourcetypes\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"granite.userproperties.nodetypes\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"adapter.condition\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteSocialgraphImplSocialGraphFactoryImpl", notes = "", response = ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.socialgraph.impl.SocialGraphFactoryImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo> comAdobeGraniteSocialgraphImplSocialGraphFactoryImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "group2member.relationship.outgoing", required = false) String group2memberRelationshipOutgoing,@ApiParam(value = "") @Valid @RequestParam(value = "group2member.excluded.outgoing", required = false) List<String> group2memberExcludedOutgoing,@ApiParam(value = "") @Valid @RequestParam(value = "group2member.relationship.incoming", required = false) String group2memberRelationshipIncoming,@ApiParam(value = "") @Valid @RequestParam(value = "group2member.excluded.incoming", required = false) List<String> group2memberExcludedIncoming) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"group2member.relationship.outgoing\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"group2member.excluded.incoming\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"group2member.relationship.incoming\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"group2member.excluded.outgoing\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl", notes = "", response = ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.system.monitoring.impl.SystemStatsMBeanImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo> comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "scheduler.expression", required = false) String schedulerExpression,@ApiParam(value = "") @Valid @RequestParam(value = "jmx.objectname", required = false) String jmxObjectname) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"scheduler.expression\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"jmx.objectname\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory", notes = "", response = ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskAdapterFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo> comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "adapter.condition", required = false) String adapterCondition) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"adapter.condition\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteTaskmanagementImplJcrTaskArchiveService", notes = "", response = ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskArchiveService",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo> comAdobeGraniteTaskmanagementImplJcrTaskArchiveService(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "archiving.enabled", required = false) Boolean archivingEnabled,@ApiParam(value = "") @Valid @RequestParam(value = "scheduler.expression", required = false) String schedulerExpression,@ApiParam(value = "") @Valid @RequestParam(value = "archive.since.days.completed", required = false) Integer archiveSinceDaysCompleted) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"archive.since.days.completed\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"archiving.enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"scheduler.expression\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask", notes = "", response = ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.taskmanagement.impl.purge.TaskPurgeMaintenanceTask",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo> comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "purgeCompleted", required = false) Boolean purgeCompleted,@ApiParam(value = "") @Valid @RequestParam(value = "completedAge", required = false) Integer completedAge,@ApiParam(value = "") @Valid @RequestParam(value = "purgeActive", required = false) Boolean purgeActive,@ApiParam(value = "") @Valid @RequestParam(value = "activeAge", required = false) Integer activeAge,@ApiParam(value = "") @Valid @RequestParam(value = "saveThreshold", required = false) Integer saveThreshold) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"completedAge\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"purgeCompleted\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"activeAge\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"purgeActive\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"saveThreshold\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor", notes = "", response = ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.taskmanagement.impl.service.TaskManagerAdapterFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo> comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "adapter.condition", required = false) String adapterCondition,@ApiParam(value = "") @Valid @RequestParam(value = "taskmanager.admingroups", required = false) List<String> taskmanagerAdmingroups) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"adapter.condition\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"taskmanager.admingroups\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteThreaddumpThreadDumpCollector", notes = "", response = ComAdobeGraniteThreaddumpThreadDumpCollectorInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteThreaddumpThreadDumpCollectorInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.threaddump.ThreadDumpCollector",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteThreaddumpThreadDumpCollectorInfo> comAdobeGraniteThreaddumpThreadDumpCollector(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "scheduler.period", required = false) Integer schedulerPeriod,@ApiParam(value = "") @Valid @RequestParam(value = "scheduler.runOn", required = false) String schedulerRunOn,@ApiParam(value = "") @Valid @RequestParam(value = "granite.threaddump.enabled", required = false) Boolean graniteThreaddumpEnabled,@ApiParam(value = "") @Valid @RequestParam(value = "granite.threaddump.dumpsPerFile", required = false) Integer graniteThreaddumpDumpsPerFile,@ApiParam(value = "") @Valid @RequestParam(value = "granite.threaddump.enableGzipCompression", required = false) Boolean graniteThreaddumpEnableGzipCompression,@ApiParam(value = "") @Valid @RequestParam(value = "granite.threaddump.enableDirectoriesCompression", required = false) Boolean graniteThreaddumpEnableDirectoriesCompression,@ApiParam(value = "") @Valid @RequestParam(value = "granite.threaddump.enableJStack", required = false) Boolean graniteThreaddumpEnableJStack,@ApiParam(value = "") @Valid @RequestParam(value = "granite.threaddump.maxBackupDays", required = false) Integer graniteThreaddumpMaxBackupDays,@ApiParam(value = "") @Valid @RequestParam(value = "granite.threaddump.backupCleanTrigger", required = false) String graniteThreaddumpBackupCleanTrigger) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"scheduler.runOn\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"granite.threaddump.backupCleanTrigger\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"granite.threaddump.enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"granite.threaddump.enableGzipCompression\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"granite.threaddump.dumpsPerFile\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"scheduler.period\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"granite.threaddump.enableJStack\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"granite.threaddump.enableDirectoriesCompression\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"granite.threaddump.maxBackupDays\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl", notes = "", response = ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.translation.connector.msft.core.impl.MicrosoftTranslationServiceFactoryImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo> comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "translationFactory", required = false) String translationFactory,@ApiParam(value = "") @Valid @RequestParam(value = "defaultConnectorLabel", required = false) String defaultConnectorLabel,@ApiParam(value = "") @Valid @RequestParam(value = "defaultConnectorAttribution", required = false) String defaultConnectorAttribution,@ApiParam(value = "") @Valid @RequestParam(value = "defaultConnectorWorkspaceId", required = false) String defaultConnectorWorkspaceId,@ApiParam(value = "") @Valid @RequestParam(value = "defaultConnectorSubscriptionKey", required = false) String defaultConnectorSubscriptionKey,@ApiParam(value = "") @Valid @RequestParam(value = "languageMapLocation", required = false) String languageMapLocation,@ApiParam(value = "") @Valid @RequestParam(value = "categoryMapLocation", required = false) String categoryMapLocation,@ApiParam(value = "") @Valid @RequestParam(value = "retryAttempts", required = false) Integer retryAttempts,@ApiParam(value = "") @Valid @RequestParam(value = "timeoutCount", required = false) Integer timeoutCount) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"defaultConnectorWorkspaceId\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"defaultConnectorSubscriptionKey\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"languageMapLocation\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"categoryMapLocation\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"defaultConnectorLabel\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"translationFactory\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"timeoutCount\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"defaultConnectorAttribution\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"retryAttempts\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteTranslationCoreImplTranslationManagerImpl", notes = "", response = ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.translation.core.impl.TranslationManagerImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo> comAdobeGraniteTranslationCoreImplTranslationManagerImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "defaultConnectorName", required = false) String defaultConnectorName,@ApiParam(value = "") @Valid @RequestParam(value = "defaultCategory", required = false) String defaultCategory) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"defaultCategory\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"defaultConnectorName\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl", notes = "", response = ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.ui.clientlibs.impl.HtmlLibraryManagerImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo> comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "htmllibmanager.timing", required = false) Boolean htmllibmanagerTiming,@ApiParam(value = "") @Valid @RequestParam(value = "htmllibmanager.debug.init.js", required = false) String htmllibmanagerDebugInitJs,@ApiParam(value = "") @Valid @RequestParam(value = "htmllibmanager.minify", required = false) Boolean htmllibmanagerMinify,@ApiParam(value = "") @Valid @RequestParam(value = "htmllibmanager.debug", required = false) Boolean htmllibmanagerDebug,@ApiParam(value = "") @Valid @RequestParam(value = "htmllibmanager.gzip", required = false) Boolean htmllibmanagerGzip,@ApiParam(value = "") @Valid @RequestParam(value = "htmllibmanager.maxDataUriSize", required = false) Integer htmllibmanagerMaxDataUriSize,@ApiParam(value = "") @Valid @RequestParam(value = "htmllibmanager.maxage", required = false) Integer htmllibmanagerMaxage,@ApiParam(value = "") @Valid @RequestParam(value = "htmllibmanager.forceCQUrlInfo", required = false) Boolean htmllibmanagerForceCQUrlInfo,@ApiParam(value = "") @Valid @RequestParam(value = "htmllibmanager.defaultthemename", required = false) String htmllibmanagerDefaultthemename,@ApiParam(value = "") @Valid @RequestParam(value = "htmllibmanager.defaultuserthemename", required = false) String htmllibmanagerDefaultuserthemename,@ApiParam(value = "") @Valid @RequestParam(value = "htmllibmanager.clientmanager", required = false) String htmllibmanagerClientmanager,@ApiParam(value = "") @Valid @RequestParam(value = "htmllibmanager.path.list", required = false) List<String> htmllibmanagerPathList,@ApiParam(value = "") @Valid @RequestParam(value = "htmllibmanager.excluded.path.list", required = false) List<String> htmllibmanagerExcludedPathList,@ApiParam(value = "") @Valid @RequestParam(value = "htmllibmanager.processor.js", required = false) List<String> htmllibmanagerProcessorJs,@ApiParam(value = "") @Valid @RequestParam(value = "htmllibmanager.processor.css", required = false) List<String> htmllibmanagerProcessorCss,@ApiParam(value = "") @Valid @RequestParam(value = "htmllibmanager.longcache.patterns", required = false) List<String> htmllibmanagerLongcachePatterns,@ApiParam(value = "") @Valid @RequestParam(value = "htmllibmanager.longcache.format", required = false) String htmllibmanagerLongcacheFormat,@ApiParam(value = "") @Valid @RequestParam(value = "htmllibmanager.useFileSystemOutputCache", required = false) Boolean htmllibmanagerUseFileSystemOutputCache,@ApiParam(value = "") @Valid @RequestParam(value = "htmllibmanager.fileSystemOutputCacheLocation", required = false) String htmllibmanagerFileSystemOutputCacheLocation,@ApiParam(value = "") @Valid @RequestParam(value = "htmllibmanager.disable.replacement", required = false) List<String> htmllibmanagerDisableReplacement) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"htmllibmanager.gzip\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"htmllibmanager.defaultuserthemename\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"htmllibmanager.clientmanager\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"htmllibmanager.longcache.format\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"htmllibmanager.debug\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"htmllibmanager.maxage\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"htmllibmanager.minify\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"htmllibmanager.disable.replacement\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"htmllibmanager.defaultthemename\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"htmllibmanager.useFileSystemOutputCache\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"htmllibmanager.longcache.patterns\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"htmllibmanager.processor.css\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"htmllibmanager.path.list\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"htmllibmanager.excluded.path.list\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"htmllibmanager.fileSystemOutputCacheLocation\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"htmllibmanager.debug.init.js\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"htmllibmanager.processor.js\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"htmllibmanager.maxDataUriSize\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"htmllibmanager.forceCQUrlInfo\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"htmllibmanager.timing\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature", notes = "", response = ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.workflow.console.frags.WorkflowWithdrawFeature",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo> comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "enabled", required = false) Boolean enabled) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService", notes = "", response = ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.workflow.console.publish.WorkflowPublishEventService",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo> comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "granite.workflow.WorkflowPublishEventService.enabled", required = false) Boolean graniteWorkflowWorkflowPublishEventServiceEnabled) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"granite.workflow.WorkflowPublishEventService.enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteWorkflowCoreJcrWorkflowBucketManager", notes = "", response = ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.workflow.core.jcr.WorkflowBucketManager",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo> comAdobeGraniteWorkflowCoreJcrWorkflowBucketManager(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "bucketSize", required = false) Integer bucketSize) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"bucketSize\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteWorkflowCoreJobExternalProcessJobHandler", notes = "", response = ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.workflow.core.job.ExternalProcessJobHandler",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo> comAdobeGraniteWorkflowCoreJobExternalProcessJobHandler(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "default.timeout", required = false) Integer defaultTimeout,@ApiParam(value = "") @Valid @RequestParam(value = "max.timeout", required = false) Integer maxTimeout,@ApiParam(value = "") @Valid @RequestParam(value = "default.period", required = false) Integer defaultPeriod) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"default.period\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"default.timeout\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"max.timeout\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteWorkflowCoreJobJobHandler", notes = "", response = ComAdobeGraniteWorkflowCoreJobJobHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteWorkflowCoreJobJobHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.workflow.core.job.JobHandler",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteWorkflowCoreJobJobHandlerInfo> comAdobeGraniteWorkflowCoreJobJobHandler(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "job.topics", required = false) List<String> jobTopics,@ApiParam(value = "") @Valid @RequestParam(value = "allow.self.process.termination", required = false) Boolean allowSelfProcessTermination) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"allow.self.process.termination\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"job.topics\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum", notes = "", response = ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.workflow.core.offloading.WorkflowOffloadingJobConsumer",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo> comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "job.topics", required = false) String jobTopics) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"job.topics\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteWorkflowCorePayloadMapCache", notes = "", response = ComAdobeGraniteWorkflowCorePayloadMapCacheInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteWorkflowCorePayloadMapCacheInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.workflow.core.PayloadMapCache",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteWorkflowCorePayloadMapCacheInfo> comAdobeGraniteWorkflowCorePayloadMapCache(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "getSystemWorkflowModels", required = false) List<String> getSystemWorkflowModels,@ApiParam(value = "") @Valid @RequestParam(value = "getPackageRootPath", required = false) String getPackageRootPath) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"getSystemWorkflowModels\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"getPackageRootPath\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener", notes = "", response = ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.workflow.core.payloadmap.PayloadMoveListener",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo> comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "payload.move.white.list", required = false) List<String> payloadMoveWhiteList,@ApiParam(value = "") @Valid @RequestParam(value = "payload.move.handle.from.workflow.process", required = false) Boolean payloadMoveHandleFromWorkflowProcess) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"payload.move.white.list\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"payload.move.handle.from.workflow.process\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteWorkflowCoreWorkflowConfig", notes = "", response = ComAdobeGraniteWorkflowCoreWorkflowConfigInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteWorkflowCoreWorkflowConfigInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.workflow.core.WorkflowConfig",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteWorkflowCoreWorkflowConfigInfo> comAdobeGraniteWorkflowCoreWorkflowConfig(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.workflow.config.workflow.packages.root.path", required = false) List<String> cqWorkflowConfigWorkflowPackagesRootPath,@ApiParam(value = "") @Valid @RequestParam(value = "cq.workflow.config.workflow.process.legacy.mode", required = false) Boolean cqWorkflowConfigWorkflowProcessLegacyMode,@ApiParam(value = "") @Valid @RequestParam(value = "cq.workflow.config.allow.locking", required = false) Boolean cqWorkflowConfigAllowLocking) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.workflow.config.workflow.process.legacy.mode\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"cq.workflow.config.allow.locking\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"cq.workflow.config.workflow.packages.root.path\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteWorkflowCoreWorkflowSessionFactory", notes = "", response = ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.workflow.core.WorkflowSessionFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo> comAdobeGraniteWorkflowCoreWorkflowSessionFactory(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "granite.workflowinbox.sort.propertyName", required = false) String graniteWorkflowinboxSortPropertyName,@ApiParam(value = "") @Valid @RequestParam(value = "granite.workflowinbox.sort.order", required = false) String graniteWorkflowinboxSortOrder,@ApiParam(value = "") @Valid @RequestParam(value = "cq.workflow.job.retry", required = false) Integer cqWorkflowJobRetry,@ApiParam(value = "") @Valid @RequestParam(value = "cq.workflow.superuser", required = false) List<String> cqWorkflowSuperuser,@ApiParam(value = "") @Valid @RequestParam(value = "granite.workflow.inboxQuerySize", required = false) Integer graniteWorkflowInboxQuerySize,@ApiParam(value = "") @Valid @RequestParam(value = "granite.workflow.adminUserGroupFilter", required = false) Boolean graniteWorkflowAdminUserGroupFilter,@ApiParam(value = "") @Valid @RequestParam(value = "granite.workflow.enforceWorkitemAssigneePermissions", required = false) Boolean graniteWorkflowEnforceWorkitemAssigneePermissions,@ApiParam(value = "") @Valid @RequestParam(value = "granite.workflow.enforceWorkflowInitiatorPermissions", required = false) Boolean graniteWorkflowEnforceWorkflowInitiatorPermissions,@ApiParam(value = "") @Valid @RequestParam(value = "granite.workflow.injectTenantIdInJobTopics", required = false) Boolean graniteWorkflowInjectTenantIdInJobTopics,@ApiParam(value = "") @Valid @RequestParam(value = "granite.workflow.maxPurgeSaveThreshold", required = false) Integer graniteWorkflowMaxPurgeSaveThreshold,@ApiParam(value = "") @Valid @RequestParam(value = "granite.workflow.maxPurgeQueryCount", required = false) Integer graniteWorkflowMaxPurgeQueryCount) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"granite.workflow.maxPurgeQueryCount\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"granite.workflow.enforceWorkitemAssigneePermissions\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"granite.workflowinbox.sort.propertyName\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"granite.workflowinbox.sort.order\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"granite.workflow.enforceWorkflowInitiatorPermissions\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"granite.workflow.injectTenantIdInJobTopics\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"cq.workflow.job.retry\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cq.workflow.superuser\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"granite.workflow.maxPurgeSaveThreshold\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"granite.workflow.inboxQuerySize\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"granite.workflow.adminUserGroupFilter\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeGraniteWorkflowPurgeScheduler", notes = "", response = ComAdobeGraniteWorkflowPurgeSchedulerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeGraniteWorkflowPurgeSchedulerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.granite.workflow.purge.Scheduler",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeGraniteWorkflowPurgeSchedulerInfo> comAdobeGraniteWorkflowPurgeScheduler(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "scheduledpurge.name", required = false) String scheduledpurgeName,@ApiParam(value = "") @Valid @RequestParam(value = "scheduledpurge.workflowStatus", required = false) String scheduledpurgeWorkflowStatus,@ApiParam(value = "") @Valid @RequestParam(value = "scheduledpurge.modelIds", required = false) List<String> scheduledpurgeModelIds,@ApiParam(value = "") @Valid @RequestParam(value = "scheduledpurge.daysold", required = false) Integer scheduledpurgeDaysold) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"scheduledpurge.modelIds\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"scheduledpurge.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"scheduledpurge.workflowStatus\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"scheduledpurge.daysold\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeOctopusNcommBootstrap", notes = "", response = ComAdobeOctopusNcommBootstrapInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeOctopusNcommBootstrapInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.octopus.ncomm.bootstrap",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeOctopusNcommBootstrapInfo> comAdobeOctopusNcommBootstrap(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "maxConnections", required = false) Integer maxConnections,@ApiParam(value = "") @Valid @RequestParam(value = "maxRequests", required = false) Integer maxRequests,@ApiParam(value = "") @Valid @RequestParam(value = "requestTimeout", required = false) Integer requestTimeout,@ApiParam(value = "") @Valid @RequestParam(value = "requestRetries", required = false) Integer requestRetries,@ApiParam(value = "") @Valid @RequestParam(value = "launchTimeout", required = false) Integer launchTimeout) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"requestRetries\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"maxRequests\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"launchTimeout\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"requestTimeout\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"maxConnections\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS", notes = "", response = ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.social.integrations.livefyre.user.pingforpull.impl.PingPullServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo> comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "communities.integration.livefyre.sling.event.filter", required = false) String communitiesIntegrationLivefyreSlingEventFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"communities.integration.livefyre.sling.event.filter\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comAdobeXmpWorkerFilesNcommXMPFilesNComm", notes = "", response = ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.adobe.xmp.worker.files.ncomm.XMPFilesNComm",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo> comAdobeXmpWorkerFilesNcommXMPFilesNComm(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "maxConnections", required = false) String maxConnections,@ApiParam(value = "") @Valid @RequestParam(value = "maxRequests", required = false) String maxRequests,@ApiParam(value = "") @Valid @RequestParam(value = "requestTimeout", required = false) String requestTimeout,@ApiParam(value = "") @Valid @RequestParam(value = "logDir", required = false) String logDir) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"maxRequests\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"requestTimeout\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"logDir\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"maxConnections\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCommonsDatasourceJdbcpoolJdbcPoolService", notes = "", response = ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.commons.datasource.jdbcpool.JdbcPoolService",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo> comDayCommonsDatasourceJdbcpoolJdbcPoolService(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "jdbc.driver.class", required = false) String jdbcDriverClass,@ApiParam(value = "") @Valid @RequestParam(value = "jdbc.connection.uri", required = false) String jdbcConnectionUri,@ApiParam(value = "") @Valid @RequestParam(value = "jdbc.username", required = false) String jdbcUsername,@ApiParam(value = "") @Valid @RequestParam(value = "jdbc.password", required = false) String jdbcPassword,@ApiParam(value = "") @Valid @RequestParam(value = "jdbc.validation.query", required = false) String jdbcValidationQuery,@ApiParam(value = "") @Valid @RequestParam(value = "default.readonly", required = false) Boolean defaultReadonly,@ApiParam(value = "") @Valid @RequestParam(value = "default.autocommit", required = false) Boolean defaultAutocommit,@ApiParam(value = "") @Valid @RequestParam(value = "pool.size", required = false) Integer poolSize,@ApiParam(value = "") @Valid @RequestParam(value = "pool.max.wait.msec", required = false) Integer poolMaxWaitMsec,@ApiParam(value = "") @Valid @RequestParam(value = "datasource.name", required = false) String datasourceName,@ApiParam(value = "") @Valid @RequestParam(value = "datasource.svc.properties", required = false) List<String> datasourceSvcProperties) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"jdbc.password\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"default.autocommit\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"pool.max.wait.msec\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"datasource.svc.properties\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"jdbc.driver.class\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"pool.size\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"jdbc.username\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"jdbc.connection.uri\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"datasource.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"default.readonly\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"jdbc.validation.query\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCommonsHttpclient", notes = "", response = ComDayCommonsHttpclientInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCommonsHttpclientInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.commons.httpclient",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCommonsHttpclientInfo> comDayCommonsHttpclient(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "proxy.enabled", required = false) Boolean proxyEnabled,@ApiParam(value = "") @Valid @RequestParam(value = "proxy.host", required = false) String proxyHost,@ApiParam(value = "") @Valid @RequestParam(value = "proxy.user", required = false) String proxyUser,@ApiParam(value = "") @Valid @RequestParam(value = "proxy.password", required = false) String proxyPassword,@ApiParam(value = "") @Valid @RequestParam(value = "proxy.ntlm.host", required = false) String proxyNtlmHost,@ApiParam(value = "") @Valid @RequestParam(value = "proxy.ntlm.domain", required = false) String proxyNtlmDomain,@ApiParam(value = "") @Valid @RequestParam(value = "proxy.exceptions", required = false) List<String> proxyExceptions) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"proxy.exceptions\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"proxy.enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"proxy.ntlm.host\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"proxy.host\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"proxy.user\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"proxy.password\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"proxy.ntlm.domain\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqAnalyticsImplStorePropertiesChangeListener", notes = "", response = ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.analytics.impl.StorePropertiesChangeListener",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo> comDayCqAnalyticsImplStorePropertiesChangeListener(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.store.listener.additionalStorePaths", required = false) List<String> cqStoreListenerAdditionalStorePaths) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.store.listener.additionalStorePaths\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqAnalyticsSitecatalystImplExporterClassificationsExporte", notes = "", response = ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.exporter.ClassificationsExporter",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo> comDayCqAnalyticsSitecatalystImplExporterClassificationsExporte(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "allowed.paths", required = false) List<String> allowedPaths,@ApiParam(value = "") @Valid @RequestParam(value = "cq.analytics.saint.exporter.pagesize", required = false) Integer cqAnalyticsSaintExporterPagesize) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.analytics.saint.exporter.pagesize\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"allowed.paths\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqAnalyticsSitecatalystImplImporterReportImporter", notes = "", response = ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.importer.ReportImporter",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo> comDayCqAnalyticsSitecatalystImplImporterReportImporter(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "report.fetch.attempts", required = false) Integer reportFetchAttempts,@ApiParam(value = "") @Valid @RequestParam(value = "report.fetch.delay", required = false) Integer reportFetchDelay) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"report.fetch.delay\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"report.fetch.attempts\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory", notes = "", response = ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystAdapterFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo> comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.analytics.adapterfactory.contextstores", required = false) List<String> cqAnalyticsAdapterfactoryContextstores) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.analytics.adapterfactory.contextstores\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl", notes = "", response = ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystHttpClientImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo> comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.analytics.sitecatalyst.service.datacenter.url", required = false) List<String> cqAnalyticsSitecatalystServiceDatacenterUrl,@ApiParam(value = "") @Valid @RequestParam(value = "devhostnamepatterns", required = false) List<String> devhostnamepatterns,@ApiParam(value = "") @Valid @RequestParam(value = "connection.timeout", required = false) Integer connectionTimeout,@ApiParam(value = "") @Valid @RequestParam(value = "socket.timeout", required = false) Integer socketTimeout) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"additionalProperties\" : \"additionalProperties\",  \"title\" : \"title\",  \"properties\" : {    \"connection.timeout\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cq.analytics.sitecatalyst.service.datacenter.url\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"socket.timeout\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"devhostnamepatterns\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqAnalyticsTestandtargetImplAccountOptionsUpdater", notes = "", response = ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.AccountOptionsUpdater",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo> comDayCqAnalyticsTestandtargetImplAccountOptionsUpdater(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.analytics.testandtarget.accountoptionsupdater.enabled", required = false) Boolean cqAnalyticsTestandtargetAccountoptionsupdaterEnabled) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.analytics.testandtarget.accountoptionsupdater.enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener", notes = "", response = ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.DeleteAuthorActivityListener",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo> comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.analytics.testandtarget.deleteauthoractivitylistener.enabled", required = false) Boolean cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.analytics.testandtarget.deleteauthoractivitylistener.enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener", notes = "", response = ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.PushAuthorCampaignPageListener",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo> comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.analytics.testandtarget.pushauthorcampaignpagelistener.enabled", required = false) Boolean cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.analytics.testandtarget.pushauthorcampaignpagelistener.enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqAnalyticsTestandtargetImplSegmentImporter", notes = "", response = ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.SegmentImporter",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo> comDayCqAnalyticsTestandtargetImplSegmentImporter(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.analytics.testandtarget.segmentimporter.enabled", required = false) Boolean cqAnalyticsTestandtargetSegmentimporterEnabled) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.analytics.testandtarget.segmentimporter.enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqAnalyticsTestandtargetImplServiceWebServiceImpl", notes = "", response = ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.service.WebServiceImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo> comDayCqAnalyticsTestandtargetImplServiceWebServiceImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "endpointUri", required = false) String endpointUri,@ApiParam(value = "") @Valid @RequestParam(value = "connectionTimeout", required = false) Integer connectionTimeout,@ApiParam(value = "") @Valid @RequestParam(value = "socketTimeout", required = false) Integer socketTimeout) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"socketTimeout\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"endpointUri\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"connectionTimeout\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqAnalyticsTestandtargetImplServletsAdminServerServlet", notes = "", response = ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.servlets.AdminServerServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo> comDayCqAnalyticsTestandtargetImplServletsAdminServerServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "testandtarget.endpoint.url", required = false) String testandtargetEndpointUrl) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"testandtarget.endpoint.url\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl", notes = "", response = ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.TestandtargetHttpClientImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo> comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.analytics.testandtarget.api.url", required = false) String cqAnalyticsTestandtargetApiUrl,@ApiParam(value = "") @Valid @RequestParam(value = "cq.analytics.testandtarget.timeout", required = false) Integer cqAnalyticsTestandtargetTimeout,@ApiParam(value = "") @Valid @RequestParam(value = "cq.analytics.testandtarget.sockettimeout", required = false) Integer cqAnalyticsTestandtargetSockettimeout,@ApiParam(value = "") @Valid @RequestParam(value = "cq.analytics.testandtarget.recommendations.url.replace", required = false) String cqAnalyticsTestandtargetRecommendationsUrlReplace,@ApiParam(value = "") @Valid @RequestParam(value = "cq.analytics.testandtarget.recommendations.url.replacewith", required = false) String cqAnalyticsTestandtargetRecommendationsUrlReplacewith) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.analytics.testandtarget.sockettimeout\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cq.analytics.testandtarget.api.url\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"cq.analytics.testandtarget.recommendations.url.replacewith\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"cq.analytics.testandtarget.recommendations.url.replace\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"cq.analytics.testandtarget.timeout\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqAuthImplCugCugSupportImpl", notes = "", response = ComDayCqAuthImplCugCugSupportImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqAuthImplCugCugSupportImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.auth.impl.cug.CugSupportImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqAuthImplCugCugSupportImplInfo> comDayCqAuthImplCugCugSupportImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cug.exempted.principals", required = false) List<String> cugExemptedPrincipals,@ApiParam(value = "") @Valid @RequestParam(value = "cug.enabled", required = false) Boolean cugEnabled,@ApiParam(value = "") @Valid @RequestParam(value = "cug.principals.regex", required = false) String cugPrincipalsRegex,@ApiParam(value = "") @Valid @RequestParam(value = "cug.principals.replacement", required = false) String cugPrincipalsReplacement) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cug.principals.regex\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"cug.principals.replacement\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"cug.enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"cug.exempted.principals\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqAuthImplLoginSelectorHandler", notes = "", response = ComDayCqAuthImplLoginSelectorHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqAuthImplLoginSelectorHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.auth.impl.LoginSelectorHandler",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqAuthImplLoginSelectorHandlerInfo> comDayCqAuthImplLoginSelectorHandler(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "path", required = false) String path,@ApiParam(value = "") @Valid @RequestParam(value = "service.ranking", required = false) Integer serviceRanking,@ApiParam(value = "") @Valid @RequestParam(value = "auth.loginselector.mappings", required = false) List<String> authLoginselectorMappings,@ApiParam(value = "") @Valid @RequestParam(value = "auth.loginselector.changepw.mappings", required = false) List<String> authLoginselectorChangepwMappings,@ApiParam(value = "") @Valid @RequestParam(value = "auth.loginselector.defaultloginpage", required = false) String authLoginselectorDefaultloginpage,@ApiParam(value = "") @Valid @RequestParam(value = "auth.loginselector.defaultchangepwpage", required = false) String authLoginselectorDefaultchangepwpage,@ApiParam(value = "") @Valid @RequestParam(value = "auth.loginselector.handle", required = false) List<String> authLoginselectorHandle,@ApiParam(value = "") @Valid @RequestParam(value = "auth.loginselector.handle.all.extensions", required = false) Boolean authLoginselectorHandleAllExtensions) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"auth.loginselector.handle.all.extensions\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"path\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"auth.loginselector.changepw.mappings\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"auth.loginselector.defaultloginpage\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"auth.loginselector.handle\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"auth.loginselector.mappings\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"service.ranking\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"auth.loginselector.defaultchangepwpage\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqCommonsImplExternalizerImpl", notes = "", response = ComDayCqCommonsImplExternalizerImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqCommonsImplExternalizerImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.commons.impl.ExternalizerImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqCommonsImplExternalizerImplInfo> comDayCqCommonsImplExternalizerImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "externalizer.domains", required = false) List<String> externalizerDomains,@ApiParam(value = "") @Valid @RequestParam(value = "externalizer.host", required = false) String externalizerHost,@ApiParam(value = "") @Valid @RequestParam(value = "externalizer.contextpath", required = false) String externalizerContextpath,@ApiParam(value = "") @Valid @RequestParam(value = "externalizer.encodedpath", required = false) Boolean externalizerEncodedpath) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"externalizer.contextpath\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"externalizer.domains\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"externalizer.host\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"externalizer.encodedpath\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqCommonsServletsRootMappingServlet", notes = "", response = ComDayCqCommonsServletsRootMappingServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqCommonsServletsRootMappingServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.commons.servlets.RootMappingServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqCommonsServletsRootMappingServletInfo> comDayCqCommonsServletsRootMappingServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "rootmapping.target", required = false) String rootmappingTarget) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"rootmapping.target\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke", notes = "", response = ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.CodeUpgradeExecutionConditionChecker",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo> comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "codeupgradetasks", required = false) List<String> codeupgradetasks,@ApiParam(value = "") @Valid @RequestParam(value = "codeupgradetaskfilters", required = false) List<String> codeupgradetaskfilters) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"codeupgradetaskfilters\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"codeupgradetasks\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList", notes = "", response = ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.UpgradeTaskIgnoreList",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo> comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "upgradeTaskIgnoreList", required = false) List<String> upgradeTaskIgnoreList) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"upgradeTaskIgnoreList\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist", notes = "", response = ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.VersionRangeTaskIgnorelist",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo> comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "effectiveBundleListPath", required = false) String effectiveBundleListPath) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"effectiveBundleListPath\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqContentsyncImplContentSyncManagerImpl", notes = "", response = ComDayCqContentsyncImplContentSyncManagerImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqContentsyncImplContentSyncManagerImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.contentsync.impl.ContentSyncManagerImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqContentsyncImplContentSyncManagerImplInfo> comDayCqContentsyncImplContentSyncManagerImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "contentsync.fallback.authorizable", required = false) String contentsyncFallbackAuthorizable,@ApiParam(value = "") @Valid @RequestParam(value = "contentsync.fallback.updateuser", required = false) String contentsyncFallbackUpdateuser) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"contentsync.fallback.authorizable\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"contentsync.fallback.updateuser\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamCommonsHandlerStandardImageHandler", notes = "", response = ComDayCqDamCommonsHandlerStandardImageHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCommonsHandlerStandardImageHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.commons.handler.StandardImageHandler",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamCommonsHandlerStandardImageHandlerInfo> comDayCqDamCommonsHandlerStandardImageHandler(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "large_file_threshold", required = false) Integer largeFileThreshold,@ApiParam(value = "") @Valid @RequestParam(value = "large_comment_threshold", required = false) Integer largeCommentThreshold,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.enable.ext.meta.extraction", required = false) Boolean cqDamEnableExtMetaExtraction) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"large_comment_threshold\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"large_file_threshold\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cq.dam.enable.ext.meta.extraction\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamCommonsMetadataXmpFilterBlackWhite", notes = "", response = ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.commons.metadata.XmpFilterBlackWhite",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo> comDayCqDamCommonsMetadataXmpFilterBlackWhite(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "xmp.filter.apply_whitelist", required = false) Boolean xmpFilterApplyWhitelist,@ApiParam(value = "") @Valid @RequestParam(value = "xmp.filter.whitelist", required = false) List<String> xmpFilterWhitelist,@ApiParam(value = "") @Valid @RequestParam(value = "xmp.filter.apply_blacklist", required = false) Boolean xmpFilterApplyBlacklist,@ApiParam(value = "") @Valid @RequestParam(value = "xmp.filter.blacklist", required = false) List<String> xmpFilterBlacklist) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"xmp.filter.apply_whitelist\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"xmp.filter.apply_blacklist\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"xmp.filter.blacklist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"xmp.filter.whitelist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamCommonsUtilImplAssetCacheImpl", notes = "", response = ComDayCqDamCommonsUtilImplAssetCacheImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCommonsUtilImplAssetCacheImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.commons.util.impl.AssetCacheImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamCommonsUtilImplAssetCacheImplInfo> comDayCqDamCommonsUtilImplAssetCacheImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "large.file.min", required = false) Integer largeFileMin,@ApiParam(value = "") @Valid @RequestParam(value = "cache.apply", required = false) Boolean cacheApply,@ApiParam(value = "") @Valid @RequestParam(value = "mime.types", required = false) List<String> mimeTypes) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"large.file.min\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cache.apply\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"mime.types\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig", notes = "", response = ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.core.impl.annotation.pdf.AnnotationPdfConfig",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo> comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.config.annotation.pdf.document.width", required = false) Integer cqDamConfigAnnotationPdfDocumentWidth,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.config.annotation.pdf.document.height", required = false) Integer cqDamConfigAnnotationPdfDocumentHeight,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.config.annotation.pdf.document.padding.horizontal", required = false) Integer cqDamConfigAnnotationPdfDocumentPaddingHorizontal,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.config.annotation.pdf.document.padding.vertical", required = false) Integer cqDamConfigAnnotationPdfDocumentPaddingVertical,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.config.annotation.pdf.font.size", required = false) Integer cqDamConfigAnnotationPdfFontSize,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.config.annotation.pdf.font.color", required = false) String cqDamConfigAnnotationPdfFontColor,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.config.annotation.pdf.font.family", required = false) String cqDamConfigAnnotationPdfFontFamily,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.config.annotation.pdf.font.light", required = false) String cqDamConfigAnnotationPdfFontLight,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.config.annotation.pdf.marginTextImage", required = false) Integer cqDamConfigAnnotationPdfMarginTextImage,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.config.annotation.pdf.minImageHeight", required = false) Integer cqDamConfigAnnotationPdfMinImageHeight,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.config.annotation.pdf.reviewStatus.width", required = false) Integer cqDamConfigAnnotationPdfReviewStatusWidth,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.config.annotation.pdf.reviewStatus.color.approved", required = false) String cqDamConfigAnnotationPdfReviewStatusColorApproved,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.config.annotation.pdf.reviewStatus.color.rejected", required = false) String cqDamConfigAnnotationPdfReviewStatusColorRejected,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.config.annotation.pdf.reviewStatus.color.changesRequested", required = false) String cqDamConfigAnnotationPdfReviewStatusColorChangesRequested,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.config.annotation.pdf.annotationMarker.width", required = false) Integer cqDamConfigAnnotationPdfAnnotationMarkerWidth,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.config.annotation.pdf.asset.minheight", required = false) Integer cqDamConfigAnnotationPdfAssetMinheight) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.dam.config.annotation.pdf.font.family\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"cq.dam.config.annotation.pdf.reviewStatus.color.approved\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"cq.dam.config.annotation.pdf.font.color\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"cq.dam.config.annotation.pdf.asset.minheight\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cq.dam.config.annotation.pdf.document.padding.horizontal\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cq.dam.config.annotation.pdf.font.light\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"cq.dam.config.annotation.pdf.reviewStatus.width\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cq.dam.config.annotation.pdf.reviewStatus.color.changesRequested\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"cq.dam.config.annotation.pdf.marginTextImage\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cq.dam.config.annotation.pdf.reviewStatus.color.rejected\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"cq.dam.config.annotation.pdf.document.width\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cq.dam.config.annotation.pdf.minImageHeight\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cq.dam.config.annotation.pdf.document.height\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cq.dam.config.annotation.pdf.font.size\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cq.dam.config.annotation.pdf.annotationMarker.width\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cq.dam.config.annotation.pdf.document.padding.vertical\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamCoreImplAssetMoveListener", notes = "", response = ComDayCqDamCoreImplAssetMoveListenerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplAssetMoveListenerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.core.impl.AssetMoveListener",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamCoreImplAssetMoveListenerInfo> comDayCqDamCoreImplAssetMoveListener(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "enabled", required = false) Boolean enabled) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamCoreImplAssethomeAssetHomePageConfiguration", notes = "", response = ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.core.impl.assethome.AssetHomePageConfiguration",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo> comDayCqDamCoreImplAssethomeAssetHomePageConfiguration(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "isEnabled", required = false) Boolean isEnabled) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"isEnabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet", notes = "", response = ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.core.impl.assetlinkshare.AdhocAssetShareProxyServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo> comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.adhoc.asset.share.prezip.maxcontentsize", required = false) Integer cqDamAdhocAssetSharePrezipMaxcontentsize) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.dam.adhoc.asset.share.prezip.maxcontentsize\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamCoreImplCacheCQBufferedImageCache", notes = "", response = ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.core.impl.cache.CQBufferedImageCache",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo> comDayCqDamCoreImplCacheCQBufferedImageCache(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.image.cache.max.memory", required = false) Integer cqDamImageCacheMaxMemory,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.image.cache.max.age", required = false) Integer cqDamImageCacheMaxAge,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.image.cache.max.dimension", required = false) String cqDamImageCacheMaxDimension) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.dam.image.cache.max.memory\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cq.dam.image.cache.max.dimension\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"cq.dam.image.cache.max.age\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamCoreImplDamChangeEventListener", notes = "", response = ComDayCqDamCoreImplDamChangeEventListenerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplDamChangeEventListenerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.core.impl.DamChangeEventListener",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamCoreImplDamChangeEventListenerInfo> comDayCqDamCoreImplDamChangeEventListener(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "changeeventlistener.observed.paths", required = false) List<String> changeeventlistenerObservedPaths) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"changeeventlistener.observed.paths\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamCoreImplDamEventPurgeService", notes = "", response = ComDayCqDamCoreImplDamEventPurgeServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplDamEventPurgeServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.core.impl.DamEventPurgeService",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamCoreImplDamEventPurgeServiceInfo> comDayCqDamCoreImplDamEventPurgeService(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "scheduler.expression", required = false) String schedulerExpression,@ApiParam(value = "") @Valid @RequestParam(value = "maxSavedActivities", required = false) Integer maxSavedActivities,@ApiParam(value = "") @Valid @RequestParam(value = "saveInterval", required = false) Integer saveInterval,@ApiParam(value = "") @Valid @RequestParam(value = "enableActivityPurge", required = false) Boolean enableActivityPurge,@ApiParam(value = "") @Valid @RequestParam(value = "eventTypes", required = false) String eventTypes) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"maxSavedActivities\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"scheduler.expression\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"saveInterval\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"eventTypes\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"enableActivityPurge\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamCoreImplDamEventRecorderImpl", notes = "", response = ComDayCqDamCoreImplDamEventRecorderImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplDamEventRecorderImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.core.impl.DamEventRecorderImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamCoreImplDamEventRecorderImplInfo> comDayCqDamCoreImplDamEventRecorderImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "event.filter", required = false) String eventFilter,@ApiParam(value = "") @Valid @RequestParam(value = "event.queue.length", required = false) Integer eventQueueLength,@ApiParam(value = "") @Valid @RequestParam(value = "eventrecorder.enabled", required = false) Boolean eventrecorderEnabled,@ApiParam(value = "") @Valid @RequestParam(value = "eventrecorder.blacklist", required = false) List<String> eventrecorderBlacklist,@ApiParam(value = "") @Valid @RequestParam(value = "eventrecorder.eventtypes", required = false) String eventrecorderEventtypes) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"eventrecorder.eventtypes\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"event.queue.length\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"event.filter\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"eventrecorder.enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"eventrecorder.blacklist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamCoreImplEventDamEventAuditListener", notes = "", response = ComDayCqDamCoreImplEventDamEventAuditListenerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplEventDamEventAuditListenerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.core.impl.event.DamEventAuditListener",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamCoreImplEventDamEventAuditListenerInfo> comDayCqDamCoreImplEventDamEventAuditListener(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "event.filter", required = false) String eventFilter,@ApiParam(value = "") @Valid @RequestParam(value = "enabled", required = false) Boolean enabled) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"event.filter\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamCoreImplExpiryNotificationJobImpl", notes = "", response = ComDayCqDamCoreImplExpiryNotificationJobImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplExpiryNotificationJobImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.core.impl.ExpiryNotificationJobImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamCoreImplExpiryNotificationJobImplInfo> comDayCqDamCoreImplExpiryNotificationJobImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.expiry.notification.scheduler.istimebased", required = false) Boolean cqDamExpiryNotificationSchedulerIstimebased,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.expiry.notification.scheduler.timebased.rule", required = false) String cqDamExpiryNotificationSchedulerTimebasedRule,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.expiry.notification.scheduler.period.rule", required = false) Integer cqDamExpiryNotificationSchedulerPeriodRule,@ApiParam(value = "") @Valid @RequestParam(value = "send_email", required = false) Boolean sendEmail,@ApiParam(value = "") @Valid @RequestParam(value = "asset_expired_limit", required = false) Integer assetExpiredLimit,@ApiParam(value = "") @Valid @RequestParam(value = "prior_notification_seconds", required = false) Integer priorNotificationSeconds,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.expiry.notification.url.protocol", required = false) String cqDamExpiryNotificationUrlProtocol) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"asset_expired_limit\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cq.dam.expiry.notification.scheduler.istimebased\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"cq.dam.expiry.notification.url.protocol\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"send_email\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"cq.dam.expiry.notification.scheduler.period.rule\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cq.dam.expiry.notification.scheduler.timebased.rule\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"prior_notification_seconds\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat", notes = "", response = ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.core.impl.foldermetadataschema.FolderMetadataSchemaFeatureFlag",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo> comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "isEnabled", required = false) Boolean isEnabled) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"isEnabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamCoreImplGfxCommonsGfxRenderer", notes = "", response = ComDayCqDamCoreImplGfxCommonsGfxRendererInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplGfxCommonsGfxRendererInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.core.impl.gfx.CommonsGfxRenderer",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamCoreImplGfxCommonsGfxRendererInfo> comDayCqDamCoreImplGfxCommonsGfxRenderer(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "skip.bufferedcache", required = false) Boolean skipBufferedcache) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"skip.bufferedcache\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamCoreImplHandlerEPSFormatHandler", notes = "", response = ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.core.impl.handler.EPSFormatHandler",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo> comDayCqDamCoreImplHandlerEPSFormatHandler(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "mimetype", required = false) String mimetype) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"mimetype\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamCoreImplHandlerIndesignFormatHandler", notes = "", response = ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.core.impl.handler.IndesignFormatHandler",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo> comDayCqDamCoreImplHandlerIndesignFormatHandler(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "mimetype", required = false) List<String> mimetype) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"mimetype\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamCoreImplHandlerJpegHandler", notes = "", response = ComDayCqDamCoreImplHandlerJpegHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplHandlerJpegHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.core.impl.handler.JpegHandler",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamCoreImplHandlerJpegHandlerInfo> comDayCqDamCoreImplHandlerJpegHandler(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.enable.ext.meta.extraction", required = false) Boolean cqDamEnableExtMetaExtraction,@ApiParam(value = "") @Valid @RequestParam(value = "large_file_threshold", required = false) Integer largeFileThreshold,@ApiParam(value = "") @Valid @RequestParam(value = "large_comment_threshold", required = false) Integer largeCommentThreshold) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"large_comment_threshold\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"large_file_threshold\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cq.dam.enable.ext.meta.extraction\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamCoreImplHandlerXmpNCommXMPHandler", notes = "", response = ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.core.impl.handler.xmp.NCommXMPHandler",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo> comDayCqDamCoreImplHandlerXmpNCommXMPHandler(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "xmphandler.cq.formats", required = false) List<String> xmphandlerCqFormats) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"xmphandler.cq.formats\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamCoreImplJmxAssetIndexUpdateMonitor", notes = "", response = ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetIndexUpdateMonitor",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo> comDayCqDamCoreImplJmxAssetIndexUpdateMonitor(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "jmx.objectname", required = false) String jmxObjectname,@ApiParam(value = "") @Valid @RequestParam(value = "property.measure.enabled", required = false) Boolean propertyMeasureEnabled,@ApiParam(value = "") @Valid @RequestParam(value = "property.name", required = false) String propertyName,@ApiParam(value = "") @Valid @RequestParam(value = "property.max.wait.ms", required = false) Integer propertyMaxWaitMs,@ApiParam(value = "") @Valid @RequestParam(value = "property.max.rate", required = false) BigDecimal propertyMaxRate,@ApiParam(value = "") @Valid @RequestParam(value = "fulltext.measure.enabled", required = false) Boolean fulltextMeasureEnabled,@ApiParam(value = "") @Valid @RequestParam(value = "fulltext.name", required = false) String fulltextName,@ApiParam(value = "") @Valid @RequestParam(value = "fulltext.max.wait.ms", required = false) Integer fulltextMaxWaitMs,@ApiParam(value = "") @Valid @RequestParam(value = "fulltext.max.rate", required = false) BigDecimal fulltextMaxRate) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"property.max.rate\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : 6.02745618307040320615897144307382404804229736328125    },    \"fulltext.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"fulltext.max.wait.ms\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"property.measure.enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"fulltext.measure.enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"fulltext.max.rate\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : 6.02745618307040320615897144307382404804229736328125    },    \"jmx.objectname\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"property.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"property.max.wait.ms\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamCoreImplJmxAssetMigrationMBeanImpl", notes = "", response = ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetMigrationMBeanImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo> comDayCqDamCoreImplJmxAssetMigrationMBeanImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "jmx.objectname", required = false) String jmxObjectname) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"jmx.objectname\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamCoreImplJmxAssetUpdateMonitorImpl", notes = "", response = ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetUpdateMonitorImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo> comDayCqDamCoreImplJmxAssetUpdateMonitorImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "jmx.objectname", required = false) String jmxObjectname,@ApiParam(value = "") @Valid @RequestParam(value = "active", required = false) Boolean active) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"active\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"jmx.objectname\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig", notes = "", response = ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataexport.AsyncMetadataExportConfigProviderService",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo> comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "operation", required = false) String operation,@ApiParam(value = "") @Valid @RequestParam(value = "emailEnabled", required = false) Boolean emailEnabled) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"emailEnabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"operation\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig", notes = "", response = ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataimport.AsyncMetadataImportConfigProviderService",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo> comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "operation", required = false) String operation,@ApiParam(value = "") @Valid @RequestParam(value = "operationIcon", required = false) String operationIcon,@ApiParam(value = "") @Valid @RequestParam(value = "topicName", required = false) String topicName,@ApiParam(value = "") @Valid @RequestParam(value = "emailEnabled", required = false) Boolean emailEnabled) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"operationIcon\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"emailEnabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"topicName\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"operation\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamCoreImplLightboxLightboxServlet", notes = "", response = ComDayCqDamCoreImplLightboxLightboxServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplLightboxLightboxServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.core.impl.lightbox.LightboxServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamCoreImplLightboxLightboxServletInfo> comDayCqDamCoreImplLightboxLightboxServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "sling.servlet.paths", required = false) String slingServletPaths,@ApiParam(value = "") @Valid @RequestParam(value = "sling.servlet.methods", required = false) List<String> slingServletMethods,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.enable.anonymous", required = false) Boolean cqDamEnableAnonymous) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"sling.servlet.paths\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"cq.dam.enable.anonymous\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"sling.servlet.methods\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamCoreImplMetadataEditorSelectComponentHandler", notes = "", response = ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.core.impl.metadata.editor.SelectComponentHandler",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo> comDayCqDamCoreImplMetadataEditorSelectComponentHandler(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "granite:data", required = false) List<String> graniteColonData) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"granite:data\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper", notes = "", response = ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.core.impl.mimeType.AssetUploadRestrictionHelper",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo> comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.allow.all.mime", required = false) Boolean cqDamAllowAllMime,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.allowed.asset.mimes", required = false) List<String> cqDamAllowedAssetMimes) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.dam.allowed.asset.mimes\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"cq.dam.allow.all.mime\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl", notes = "", response = ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.core.impl.mimeType.DamMimeTypeServiceImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo> comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.detect.asset.mime.from.content", required = false) Boolean cqDamDetectAssetMimeFromContent) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.dam.detect.asset.mime.from.content\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamCoreImplMissingMetadataNotificationJob", notes = "", response = ComDayCqDamCoreImplMissingMetadataNotificationJobInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplMissingMetadataNotificationJobInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.core.impl.MissingMetadataNotificationJob",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamCoreImplMissingMetadataNotificationJobInfo> comDayCqDamCoreImplMissingMetadataNotificationJob(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.missingmetadata.notification.scheduler.istimebased", required = false) Boolean cqDamMissingmetadataNotificationSchedulerIstimebased,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.missingmetadata.notification.scheduler.timebased.rule", required = false) String cqDamMissingmetadataNotificationSchedulerTimebasedRule,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.missingmetadata.notification.scheduler.period.rule", required = false) Integer cqDamMissingmetadataNotificationSchedulerPeriodRule,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.missingmetadata.notification.recipient", required = false) String cqDamMissingmetadataNotificationRecipient) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.dam.missingmetadata.notification.scheduler.period.rule\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cq.dam.missingmetadata.notification.scheduler.istimebased\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"cq.dam.missingmetadata.notification.scheduler.timebased.rule\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"cq.dam.missingmetadata.notification.recipient\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr", notes = "", response = ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.core.impl.process.SendTransientWorkflowCompletedEmailProcess",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo> comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "process.label", required = false) String processLabel,@ApiParam(value = "") @Valid @RequestParam(value = "Notify on Complete", required = false) Boolean notifyOnComplete) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"Notify on Complete\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"process.label\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamCoreImplProcessTextExtractionProcess", notes = "", response = ComDayCqDamCoreImplProcessTextExtractionProcessInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplProcessTextExtractionProcessInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.core.impl.process.TextExtractionProcess",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamCoreImplProcessTextExtractionProcessInfo> comDayCqDamCoreImplProcessTextExtractionProcess(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "mimeTypes", required = false) List<String> mimeTypes,@ApiParam(value = "") @Valid @RequestParam(value = "maxExtract", required = false) Integer maxExtract) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"mimeTypes\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"maxExtract\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamCoreImplRenditionMakerImpl", notes = "", response = ComDayCqDamCoreImplRenditionMakerImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplRenditionMakerImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.core.impl.RenditionMakerImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamCoreImplRenditionMakerImplInfo> comDayCqDamCoreImplRenditionMakerImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "xmp.propagate", required = false) Boolean xmpPropagate,@ApiParam(value = "") @Valid @RequestParam(value = "xmp.excludes", required = false) List<String> xmpExcludes) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"xmp.excludes\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"xmp.propagate\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamCoreImplReportsReportExportService", notes = "", response = ComDayCqDamCoreImplReportsReportExportServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplReportsReportExportServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.core.impl.reports.ReportExportService",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamCoreImplReportsReportExportServiceInfo> comDayCqDamCoreImplReportsReportExportService(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "queryBatchSize", required = false) Integer queryBatchSize) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"queryBatchSize\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamCoreImplReportsReportPurgeService", notes = "", response = ComDayCqDamCoreImplReportsReportPurgeServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplReportsReportPurgeServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.core.impl.reports.ReportPurgeService",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamCoreImplReportsReportPurgeServiceInfo> comDayCqDamCoreImplReportsReportPurgeService(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "scheduler.expression", required = false) String schedulerExpression,@ApiParam(value = "") @Valid @RequestParam(value = "maxSavedReports", required = false) Integer maxSavedReports,@ApiParam(value = "") @Valid @RequestParam(value = "timeDuration", required = false) Integer timeDuration,@ApiParam(value = "") @Valid @RequestParam(value = "enableReportPurge", required = false) Boolean enableReportPurge) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"scheduler.expression\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"enableReportPurge\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"maxSavedReports\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"timeDuration\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamCoreImplServletAssetDownloadServlet", notes = "", response = ComDayCqDamCoreImplServletAssetDownloadServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplServletAssetDownloadServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetDownloadServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamCoreImplServletAssetDownloadServletInfo> comDayCqDamCoreImplServletAssetDownloadServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "enabled", required = false) Boolean enabled) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamCoreImplServletAssetStatusServlet", notes = "", response = ComDayCqDamCoreImplServletAssetStatusServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplServletAssetStatusServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetStatusServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamCoreImplServletAssetStatusServletInfo> comDayCqDamCoreImplServletAssetStatusServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.batch.status.maxassets", required = false) Integer cqDamBatchStatusMaxassets) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.dam.batch.status.maxassets\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamCoreImplServletAssetXMPSearchServlet", notes = "", response = ComDayCqDamCoreImplServletAssetXMPSearchServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplServletAssetXMPSearchServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetXMPSearchServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamCoreImplServletAssetXMPSearchServletInfo> comDayCqDamCoreImplServletAssetXMPSearchServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.batch.indesign.maxassets", required = false) Integer cqDamBatchIndesignMaxassets) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.dam.batch.indesign.maxassets\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamCoreImplServletBatchMetadataServlet", notes = "", response = ComDayCqDamCoreImplServletBatchMetadataServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplServletBatchMetadataServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.BatchMetadataServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamCoreImplServletBatchMetadataServletInfo> comDayCqDamCoreImplServletBatchMetadataServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.batch.metadata.asset.default", required = false) List<String> cqDamBatchMetadataAssetDefault,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.batch.metadata.collection.default", required = false) List<String> cqDamBatchMetadataCollectionDefault,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.batch.metadata.maxresources", required = false) Integer cqDamBatchMetadataMaxresources) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.dam.batch.metadata.collection.default\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"cq.dam.batch.metadata.maxresources\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cq.dam.batch.metadata.asset.default\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamCoreImplServletBinaryProviderServlet", notes = "", response = ComDayCqDamCoreImplServletBinaryProviderServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplServletBinaryProviderServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.BinaryProviderServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamCoreImplServletBinaryProviderServletInfo> comDayCqDamCoreImplServletBinaryProviderServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "sling.servlet.resourceTypes", required = false) List<String> slingServletResourceTypes,@ApiParam(value = "") @Valid @RequestParam(value = "sling.servlet.methods", required = false) List<String> slingServletMethods,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.drm.enable", required = false) Boolean cqDamDrmEnable) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.dam.drm.enable\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"sling.servlet.resourceTypes\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"sling.servlet.methods\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamCoreImplServletCollectionServlet", notes = "", response = ComDayCqDamCoreImplServletCollectionServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplServletCollectionServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamCoreImplServletCollectionServletInfo> comDayCqDamCoreImplServletCollectionServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.batch.collection.properties", required = false) List<String> cqDamBatchCollectionProperties,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.batch.collection.maxcollections", required = false) Integer cqDamBatchCollectionMaxcollections) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.dam.batch.collection.properties\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"cq.dam.batch.collection.maxcollections\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamCoreImplServletCollectionsServlet", notes = "", response = ComDayCqDamCoreImplServletCollectionsServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplServletCollectionsServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionsServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamCoreImplServletCollectionsServletInfo> comDayCqDamCoreImplServletCollectionsServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.batch.collections.properties", required = false) List<String> cqDamBatchCollectionsProperties,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.batch.collections.limit", required = false) Integer cqDamBatchCollectionsLimit) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.dam.batch.collections.limit\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cq.dam.batch.collections.properties\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamCoreImplServletCompanionServlet", notes = "", response = ComDayCqDamCoreImplServletCompanionServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplServletCompanionServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CompanionServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamCoreImplServletCompanionServletInfo> comDayCqDamCoreImplServletCompanionServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "More Info", required = false) String moreInfo,@ApiParam(value = "") @Valid @RequestParam(value = "/mnt/overlay/dam/gui/content/assets/moreinfo.html/${path}", required = false) String slashMntSlashOverlaySlashDamSlashGuiSlashContentSlashAssetsSlashMoreinfoHtmlSlash$LeftCurlyBracketPathRightCurlyBracket) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"More Info\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"/mnt/overlay/dam/gui/content/assets/moreinfo.html/${path}\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamCoreImplServletCreateAssetServlet", notes = "", response = ComDayCqDamCoreImplServletCreateAssetServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplServletCreateAssetServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CreateAssetServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamCoreImplServletCreateAssetServletInfo> comDayCqDamCoreImplServletCreateAssetServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "detect_duplicate", required = false) Boolean detectDuplicate) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"detect_duplicate\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamCoreImplServletDamContentDispositionFilter", notes = "", response = ComDayCqDamCoreImplServletDamContentDispositionFilterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplServletDamContentDispositionFilterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.DamContentDispositionFilter",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamCoreImplServletDamContentDispositionFilterInfo> comDayCqDamCoreImplServletDamContentDispositionFilter(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.mime.type.blacklist", required = false) List<String> cqMimeTypeBlacklist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.empty.mime", required = false) Boolean cqDamEmptyMime) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.mime.type.blacklist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"cq.dam.empty.mime\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamCoreImplServletGuidLookupFilter", notes = "", response = ComDayCqDamCoreImplServletGuidLookupFilterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplServletGuidLookupFilterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.GuidLookupFilter",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamCoreImplServletGuidLookupFilterInfo> comDayCqDamCoreImplServletGuidLookupFilter(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.core.guidlookupfilter.enabled", required = false) Boolean cqDamCoreGuidlookupfilterEnabled) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.dam.core.guidlookupfilter.enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamCoreImplServletHealthCheckServlet", notes = "", response = ComDayCqDamCoreImplServletHealthCheckServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplServletHealthCheckServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.HealthCheckServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamCoreImplServletHealthCheckServletInfo> comDayCqDamCoreImplServletHealthCheckServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.sync.workflow.id", required = false) String cqDamSyncWorkflowId,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.sync.folder.types", required = false) List<String> cqDamSyncFolderTypes) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.dam.sync.workflow.id\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"cq.dam.sync.folder.types\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamCoreImplServletMetadataGetServlet", notes = "", response = ComDayCqDamCoreImplServletMetadataGetServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplServletMetadataGetServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.MetadataGetServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamCoreImplServletMetadataGetServletInfo> comDayCqDamCoreImplServletMetadataGetServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "sling.servlet.resourceTypes", required = false) String slingServletResourceTypes,@ApiParam(value = "") @Valid @RequestParam(value = "sling.servlet.methods", required = false) String slingServletMethods,@ApiParam(value = "") @Valid @RequestParam(value = "sling.servlet.extensions", required = false) String slingServletExtensions,@ApiParam(value = "") @Valid @RequestParam(value = "sling.servlet.selectors", required = false) String slingServletSelectors) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"sling.servlet.extensions\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"sling.servlet.selectors\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"sling.servlet.resourceTypes\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"sling.servlet.methods\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamCoreImplServletMultipleLicenseAcceptServlet", notes = "", response = ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.MultipleLicenseAcceptServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo> comDayCqDamCoreImplServletMultipleLicenseAcceptServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.drm.enable", required = false) Boolean cqDamDrmEnable) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.dam.drm.enable\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamCoreImplServletResourceCollectionServlet", notes = "", response = ComDayCqDamCoreImplServletResourceCollectionServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplServletResourceCollectionServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.ResourceCollectionServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamCoreImplServletResourceCollectionServletInfo> comDayCqDamCoreImplServletResourceCollectionServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "sling.servlet.resourceTypes", required = false) List<String> slingServletResourceTypes,@ApiParam(value = "") @Valid @RequestParam(value = "sling.servlet.methods", required = false) String slingServletMethods,@ApiParam(value = "") @Valid @RequestParam(value = "sling.servlet.selectors", required = false) String slingServletSelectors,@ApiParam(value = "") @Valid @RequestParam(value = "download.config", required = false) String downloadConfig,@ApiParam(value = "") @Valid @RequestParam(value = "view.selector", required = false) String viewSelector,@ApiParam(value = "") @Valid @RequestParam(value = "send_email", required = false) Boolean sendEmail) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"sling.servlet.selectors\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"sling.servlet.resourceTypes\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"view.selector\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"send_email\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"download.config\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"sling.servlet.methods\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl", notes = "", response = ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.core.impl.ui.preview.FolderPreviewUpdaterImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo> comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "createPreviewEnabled", required = false) Boolean createPreviewEnabled,@ApiParam(value = "") @Valid @RequestParam(value = "updatePreviewEnabled", required = false) Boolean updatePreviewEnabled,@ApiParam(value = "") @Valid @RequestParam(value = "queueSize", required = false) Integer queueSize,@ApiParam(value = "") @Valid @RequestParam(value = "folderPreviewRenditionRegex", required = false) String folderPreviewRenditionRegex) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"createPreviewEnabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"updatePreviewEnabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"queueSize\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"folderPreviewRenditionRegex\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamCoreImplUnzipUnzipConfig", notes = "", response = ComDayCqDamCoreImplUnzipUnzipConfigInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreImplUnzipUnzipConfigInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.core.impl.unzip.UnzipConfig",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamCoreImplUnzipUnzipConfigInfo> comDayCqDamCoreImplUnzipUnzipConfig(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.config.unzip.maxuncompressedsize", required = false) Integer cqDamConfigUnzipMaxuncompressedsize,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.config.unzip.encoding", required = false) String cqDamConfigUnzipEncoding) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.dam.config.unzip.encoding\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"cq.dam.config.unzip.maxuncompressedsize\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamCoreProcessExifToolExtractMetadataProcess", notes = "", response = ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.core.process.ExifToolExtractMetadataProcess",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo> comDayCqDamCoreProcessExifToolExtractMetadataProcess(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "process.label", required = false) String processLabel,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.enable.sha1", required = false) Boolean cqDamEnableSha1) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.dam.enable.sha1\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"process.label\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamCoreProcessExtractMetadataProcess", notes = "", response = ComDayCqDamCoreProcessExtractMetadataProcessInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreProcessExtractMetadataProcessInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.core.process.ExtractMetadataProcess",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamCoreProcessExtractMetadataProcessInfo> comDayCqDamCoreProcessExtractMetadataProcess(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "process.label", required = false) String processLabel,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.enable.sha1", required = false) Boolean cqDamEnableSha1) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.dam.enable.sha1\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"process.label\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamCoreProcessMetadataProcessorProcess", notes = "", response = ComDayCqDamCoreProcessMetadataProcessorProcessInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamCoreProcessMetadataProcessorProcessInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.core.process.MetadataProcessorProcess",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamCoreProcessMetadataProcessorProcessInfo> comDayCqDamCoreProcessMetadataProcessorProcess(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "process.label", required = false) String processLabel,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.enable.sha1", required = false) Boolean cqDamEnableSha1,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.metadata.xssprotected.properties", required = false) List<String> cqDamMetadataXssprotectedProperties) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.dam.enable.sha1\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"process.label\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"cq.dam.metadata.xssprotected.properties\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamHandlerFfmpegLocatorImpl", notes = "", response = ComDayCqDamHandlerFfmpegLocatorImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamHandlerFfmpegLocatorImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.handler.ffmpeg.LocatorImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamHandlerFfmpegLocatorImplInfo> comDayCqDamHandlerFfmpegLocatorImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "executable.searchpath", required = false) List<String> executableSearchpath) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"executable.searchpath\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl", notes = "", response = ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.handler.gibson.fontmanager.impl.FontManagerServiceImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo> comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "event.filter", required = false) String eventFilter,@ApiParam(value = "") @Valid @RequestParam(value = "fontmgr.system.font.dir", required = false) List<String> fontmgrSystemFontDir,@ApiParam(value = "") @Valid @RequestParam(value = "fontmgr.adobe.font.dir", required = false) String fontmgrAdobeFontDir,@ApiParam(value = "") @Valid @RequestParam(value = "fontmgr.customer.font.dir", required = false) String fontmgrCustomerFontDir) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"fontmgr.customer.font.dir\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"fontmgr.system.font.dir\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"fontmgr.adobe.font.dir\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"event.filter\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamHandlerStandardPdfPdfHandler", notes = "", response = ComDayCqDamHandlerStandardPdfPdfHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamHandlerStandardPdfPdfHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.handler.standard.pdf.PdfHandler",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamHandlerStandardPdfPdfHandlerInfo> comDayCqDamHandlerStandardPdfPdfHandler(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "raster.annotation", required = false) Boolean rasterAnnotation) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"raster.annotation\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamHandlerStandardPsPostScriptHandler", notes = "", response = ComDayCqDamHandlerStandardPsPostScriptHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamHandlerStandardPsPostScriptHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.handler.standard.ps.PostScriptHandler",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamHandlerStandardPsPostScriptHandlerInfo> comDayCqDamHandlerStandardPsPostScriptHandler(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "raster.annotation", required = false) Boolean rasterAnnotation) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"raster.annotation\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamHandlerStandardPsdPsdHandler", notes = "", response = ComDayCqDamHandlerStandardPsdPsdHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamHandlerStandardPsdPsdHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.handler.standard.psd.PsdHandler",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamHandlerStandardPsdPsdHandlerInfo> comDayCqDamHandlerStandardPsdPsdHandler(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "large_file_threshold", required = false) Integer largeFileThreshold) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"large_file_threshold\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamIdsImplIDSJobProcessor", notes = "", response = ComDayCqDamIdsImplIDSJobProcessorInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamIdsImplIDSJobProcessorInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.ids.impl.IDSJobProcessor",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamIdsImplIDSJobProcessorInfo> comDayCqDamIdsImplIDSJobProcessor(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "enable.multisession", required = false) Boolean enableMultisession,@ApiParam(value = "") @Valid @RequestParam(value = "ids.cc.enable", required = false) Boolean idsCcEnable,@ApiParam(value = "") @Valid @RequestParam(value = "enable.retry", required = false) Boolean enableRetry,@ApiParam(value = "") @Valid @RequestParam(value = "enable.retry.scripterror", required = false) Boolean enableRetryScripterror,@ApiParam(value = "") @Valid @RequestParam(value = "externalizer.domain.cqhost", required = false) String externalizerDomainCqhost,@ApiParam(value = "") @Valid @RequestParam(value = "externalizer.domain.http", required = false) String externalizerDomainHttp) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"externalizer.domain.cqhost\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"enable.multisession\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"ids.cc.enable\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"enable.retry\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"enable.retry.scripterror\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"externalizer.domain.http\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamIdsImplIDSPoolManagerImpl", notes = "", response = ComDayCqDamIdsImplIDSPoolManagerImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamIdsImplIDSPoolManagerImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.ids.impl.IDSPoolManagerImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamIdsImplIDSPoolManagerImplInfo> comDayCqDamIdsImplIDSPoolManagerImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "max.errors.to.blacklist", required = false) Integer maxErrorsToBlacklist,@ApiParam(value = "") @Valid @RequestParam(value = "retry.interval.to.whitelist", required = false) Integer retryIntervalToWhitelist,@ApiParam(value = "") @Valid @RequestParam(value = "connect.timeout", required = false) Integer connectTimeout,@ApiParam(value = "") @Valid @RequestParam(value = "socket.timeout", required = false) Integer socketTimeout,@ApiParam(value = "") @Valid @RequestParam(value = "process.label", required = false) String processLabel,@ApiParam(value = "") @Valid @RequestParam(value = "connection.use.max", required = false) Integer connectionUseMax) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"retry.interval.to.whitelist\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"connect.timeout\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"process.label\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"max.errors.to.blacklist\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"socket.timeout\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"connection.use.max\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamInddImplHandlerIndesignXMPHandler", notes = "", response = ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.indd.impl.handler.IndesignXMPHandler",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo> comDayCqDamInddImplHandlerIndesignXMPHandler(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "process.label", required = false) String processLabel,@ApiParam(value = "") @Valid @RequestParam(value = "extract.pages", required = false) Boolean extractPages) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"process.label\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"extract.pages\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamInddImplServletSnippetCreationServlet", notes = "", response = ComDayCqDamInddImplServletSnippetCreationServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamInddImplServletSnippetCreationServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.indd.impl.servlet.SnippetCreationServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamInddImplServletSnippetCreationServletInfo> comDayCqDamInddImplServletSnippetCreationServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "snippetcreation.maxcollections", required = false) Integer snippetcreationMaxcollections) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"snippetcreation.maxcollections\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamInddProcessINDDMediaExtractProcess", notes = "", response = ComDayCqDamInddProcessINDDMediaExtractProcessInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamInddProcessINDDMediaExtractProcessInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.indd.process.INDDMediaExtractProcess",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamInddProcessINDDMediaExtractProcessInfo> comDayCqDamInddProcessINDDMediaExtractProcess(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "process.label", required = false) String processLabel,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.indd.pages.regex", required = false) String cqDamInddPagesRegex,@ApiParam(value = "") @Valid @RequestParam(value = "ids.job.decoupled", required = false) Boolean idsJobDecoupled,@ApiParam(value = "") @Valid @RequestParam(value = "ids.job.workflow.model", required = false) String idsJobWorkflowModel) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"process.label\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"cq.dam.indd.pages.regex\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"ids.job.workflow.model\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"ids.job.decoupled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl", notes = "", response = ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceDataHandlerImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo> comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "batch.commit.size", required = false) Integer batchCommitSize) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"batch.commit.size\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamPerformanceInternalAssetPerformanceReportSyncJob", notes = "", response = ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceReportSyncJob",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo> comDayCqDamPerformanceInternalAssetPerformanceReportSyncJob(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "scheduler.expression", required = false) String schedulerExpression) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"scheduler.expression\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro", notes = "", response = ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.pim.impl.sourcing.upload.process.ProductAssetsUploadProcess",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo> comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "delete.zip.file", required = false) Boolean deleteZipFile) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"delete.zip.file\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven", notes = "", response = ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.S7damDynamicMediaConfigEventListener",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo> comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.s7dam.dynamicmediaconfigeventlistener.enabled", required = false) Boolean cqDamS7damDynamicmediaconfigeventlistenerEnabled) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.dam.s7dam.dynamicmediaconfigeventlistener.enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner", notes = "", response = ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.SiteCatalystReportRunner",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo> comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "scheduler.expression", required = false) String schedulerExpression,@ApiParam(value = "") @Valid @RequestParam(value = "scheduler.concurrent", required = false) Boolean schedulerConcurrent) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"scheduler.concurrent\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"scheduler.expression\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamS7damCommonPostServletsSetCreateHandler", notes = "", response = ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetCreateHandler",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo> comDayCqDamS7damCommonPostServletsSetCreateHandler(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "sling.post.operation", required = false) String slingPostOperation,@ApiParam(value = "") @Valid @RequestParam(value = "sling.servlet.methods", required = false) String slingServletMethods) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"sling.post.operation\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"sling.servlet.methods\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamS7damCommonPostServletsSetModifyHandler", notes = "", response = ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetModifyHandler",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo> comDayCqDamS7damCommonPostServletsSetModifyHandler(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "sling.post.operation", required = false) String slingPostOperation,@ApiParam(value = "") @Valid @RequestParam(value = "sling.servlet.methods", required = false) String slingServletMethods) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"sling.post.operation\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"sling.servlet.methods\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess", notes = "", response = ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.s7dam.common.process.VideoThumbnailDownloadProcess",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo> comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "process.label", required = false) String processLabel) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"process.label\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamS7damCommonS7damDamChangeEventListener", notes = "", response = ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.s7dam.common.S7damDamChangeEventListener",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo> comDayCqDamS7damCommonS7damDamChangeEventListener(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.s7dam.damchangeeventlistener.enabled", required = false) Boolean cqDamS7damDamchangeeventlistenerEnabled) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.dam.s7dam.damchangeeventlistener.enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamS7damCommonServletsS7damProductInfoServlet", notes = "", response = ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.s7dam.common.servlets.S7damProductInfoServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo> comDayCqDamS7damCommonServletsS7damProductInfoServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "sling.servlet.paths", required = false) String slingServletPaths,@ApiParam(value = "") @Valid @RequestParam(value = "sling.servlet.methods", required = false) String slingServletMethods) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"sling.servlet.paths\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"sling.servlet.methods\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl", notes = "", response = ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.s7dam.common.video.impl.VideoProxyClientServiceImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo> comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.s7dam.videoproxyclientservice.multipartupload.minsize.name", required = false) Integer cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.s7dam.videoproxyclientservice.multipartupload.partsize.name", required = false) Integer cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.s7dam.videoproxyclientservice.multipartupload.numthread.name", required = false) Integer cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.s7dam.videoproxyclientservice.http.readtimeout.name", required = false) Integer cqDamS7damVideoproxyclientserviceHttpReadtimeoutName,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.s7dam.videoproxyclientservice.http.connectiontimeout.name", required = false) Integer cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.s7dam.videoproxyclientservice.http.maxretrycount.name", required = false) Integer cqDamS7damVideoproxyclientserviceHttpMaxretrycountName,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.s7dam.videoproxyclientservice.uploadprogress.interval.name", required = false) Integer cqDamS7damVideoproxyclientserviceUploadprogressIntervalName) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.dam.s7dam.videoproxyclientservice.multipartupload.minsize.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cq.dam.s7dam.videoproxyclientservice.http.maxretrycount.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cq.dam.s7dam.videoproxyclientservice.uploadprogress.interval.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cq.dam.s7dam.videoproxyclientservice.http.connectiontimeout.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cq.dam.s7dam.videoproxyclientservice.multipartupload.partsize.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cq.dam.s7dam.videoproxyclientservice.multipartupload.numthread.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cq.dam.s7dam.videoproxyclientservice.http.readtimeout.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamScene7ImplScene7APIClientImpl", notes = "", response = ComDayCqDamScene7ImplScene7APIClientImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamScene7ImplScene7APIClientImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7APIClientImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamScene7ImplScene7APIClientImplInfo> comDayCqDamScene7ImplScene7APIClientImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.scene7.apiclient.recordsperpage.nofilter.name", required = false) Integer cqDamScene7ApiclientRecordsperpageNofilterName,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.scene7.apiclient.recordsperpage.withfilter.name", required = false) Integer cqDamScene7ApiclientRecordsperpageWithfilterName) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.dam.scene7.apiclient.recordsperpage.withfilter.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cq.dam.scene7.apiclient.recordsperpage.nofilter.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl", notes = "", response = ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7AssetMimeTypeServiceImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo> comDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.scene7.assetmimetypeservice.mapping", required = false) List<String> cqDamScene7AssetmimetypeserviceMapping) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.dam.scene7.assetmimetypeservice.mapping\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamScene7ImplScene7ConfigurationEventListener", notes = "", response = ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7ConfigurationEventListener",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo> comDayCqDamScene7ImplScene7ConfigurationEventListener(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.scene7.configurationeventlistener.enabled", required = false) Boolean cqDamScene7ConfigurationeventlistenerEnabled) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.dam.scene7.configurationeventlistener.enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamScene7ImplScene7DamChangeEventListener", notes = "", response = ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7DamChangeEventListener",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo> comDayCqDamScene7ImplScene7DamChangeEventListener(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.scene7.damchangeeventlistener.enabled", required = false) Boolean cqDamScene7DamchangeeventlistenerEnabled,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.scene7.damchangeeventlistener.observed.paths", required = false) List<String> cqDamScene7DamchangeeventlistenerObservedPaths) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.dam.scene7.damchangeeventlistener.enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"cq.dam.scene7.damchangeeventlistener.observed.paths\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamScene7ImplScene7FlashTemplatesServiceImpl", notes = "", response = ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7FlashTemplatesServiceImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo> comDayCqDamScene7ImplScene7FlashTemplatesServiceImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "scene7FlashTemplates.rti", required = false) String scene7FlashTemplatesRti,@ApiParam(value = "") @Valid @RequestParam(value = "scene7FlashTemplates.rsi", required = false) String scene7FlashTemplatesRsi,@ApiParam(value = "") @Valid @RequestParam(value = "scene7FlashTemplates.rb", required = false) String scene7FlashTemplatesRb,@ApiParam(value = "") @Valid @RequestParam(value = "scene7FlashTemplates.rurl", required = false) String scene7FlashTemplatesRurl,@ApiParam(value = "") @Valid @RequestParam(value = "scene7FlashTemplate.urlFormatParameter", required = false) String scene7FlashTemplateUrlFormatParameter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"scene7FlashTemplates.rti\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"scene7FlashTemplates.rb\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"scene7FlashTemplates.rurl\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"scene7FlashTemplates.rsi\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"scene7FlashTemplate.urlFormatParameter\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamScene7ImplScene7UploadServiceImpl", notes = "", response = ComDayCqDamScene7ImplScene7UploadServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamScene7ImplScene7UploadServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7UploadServiceImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamScene7ImplScene7UploadServiceImplInfo> comDayCqDamScene7ImplScene7UploadServiceImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.scene7.uploadservice.activejobtimeout.label", required = false) Integer cqDamScene7UploadserviceActivejobtimeoutLabel,@ApiParam(value = "") @Valid @RequestParam(value = "cq.dam.scene7.uploadservice.connectionmaxperroute.label", required = false) Integer cqDamScene7UploadserviceConnectionmaxperrouteLabel) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.dam.scene7.uploadservice.connectionmaxperroute.label\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cq.dam.scene7.uploadservice.activejobtimeout.label\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer", notes = "", response = ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.stock.integration.impl.cache.StockCacheConfigurationServiceImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo> comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "getCacheExpirationUnit", required = false) String getCacheExpirationUnit,@ApiParam(value = "") @Valid @RequestParam(value = "getCacheExpirationValue", required = false) Integer getCacheExpirationValue) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"getCacheExpirationUnit\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"getCacheExpirationValue\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamStockIntegrationImplConfigurationStockConfiguration", notes = "", response = ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.stock.integration.impl.configuration.StockConfigurationImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo> comDayCqDamStockIntegrationImplConfigurationStockConfiguration(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "name", required = false) String name,@ApiParam(value = "") @Valid @RequestParam(value = "locale", required = false) String locale,@ApiParam(value = "") @Valid @RequestParam(value = "imsConfig", required = false) String imsConfig) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"imsConfig\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"locale\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqDamVideoImplServletVideoTestServlet", notes = "", response = ComDayCqDamVideoImplServletVideoTestServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqDamVideoImplServletVideoTestServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.dam.video.impl.servlet.VideoTestServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqDamVideoImplServletVideoTestServletInfo> comDayCqDamVideoImplServletVideoTestServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "enabled", required = false) Boolean enabled) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqExtwidgetServletsImageSpriteServlet", notes = "", response = ComDayCqExtwidgetServletsImageSpriteServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqExtwidgetServletsImageSpriteServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.extwidget.servlets.ImageSpriteServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqExtwidgetServletsImageSpriteServletInfo> comDayCqExtwidgetServletsImageSpriteServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "maxWidth", required = false) Integer maxWidth,@ApiParam(value = "") @Valid @RequestParam(value = "maxHeight", required = false) Integer maxHeight) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"maxHeight\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"maxWidth\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqImageInternalFontFontHelper", notes = "", response = ComDayCqImageInternalFontFontHelperInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqImageInternalFontFontHelperInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.image.internal.font.FontHelper",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqImageInternalFontFontHelperInfo> comDayCqImageInternalFontFontHelper(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "fontpath", required = false) List<String> fontpath,@ApiParam(value = "") @Valid @RequestParam(value = "oversamplingFactor", required = false) Integer oversamplingFactor) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"fontpath\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"oversamplingFactor\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqJcrclustersupportClusterStartLevelController", notes = "", response = ComDayCqJcrclustersupportClusterStartLevelControllerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqJcrclustersupportClusterStartLevelControllerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.jcrclustersupport.ClusterStartLevelController",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqJcrclustersupportClusterStartLevelControllerInfo> comDayCqJcrclustersupportClusterStartLevelController(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cluster.level.enable", required = false) Boolean clusterLevelEnable,@ApiParam(value = "") @Valid @RequestParam(value = "cluster.master.level", required = false) Integer clusterMasterLevel,@ApiParam(value = "") @Valid @RequestParam(value = "cluster.slave.level", required = false) Integer clusterSlaveLevel) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cluster.level.enable\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"cluster.slave.level\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cluster.master.level\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqMailerDefaultMailService", notes = "", response = ComDayCqMailerDefaultMailServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqMailerDefaultMailServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.mailer.DefaultMailService",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqMailerDefaultMailServiceInfo> comDayCqMailerDefaultMailService(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "smtp.host", required = false) String smtpHost,@ApiParam(value = "") @Valid @RequestParam(value = "smtp.port", required = false) Integer smtpPort,@ApiParam(value = "") @Valid @RequestParam(value = "smtp.user", required = false) String smtpUser,@ApiParam(value = "") @Valid @RequestParam(value = "smtp.password", required = false) String smtpPassword,@ApiParam(value = "") @Valid @RequestParam(value = "from.address", required = false) String fromAddress,@ApiParam(value = "") @Valid @RequestParam(value = "smtp.ssl", required = false) Boolean smtpSsl,@ApiParam(value = "") @Valid @RequestParam(value = "smtp.starttls", required = false) Boolean smtpStarttls,@ApiParam(value = "") @Valid @RequestParam(value = "debug.email", required = false) Boolean debugEmail) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"smtp.password\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"smtp.port\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"smtp.ssl\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"smtp.host\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"from.address\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"smtp.starttls\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"smtp.user\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"debug.email\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqMailerImplCqMailingService", notes = "", response = ComDayCqMailerImplCqMailingServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqMailerImplCqMailingServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.mailer.impl.CqMailingService",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqMailerImplCqMailingServiceInfo> comDayCqMailerImplCqMailingService(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "max.recipient.count", required = false) String maxRecipientCount) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"max.recipient.count\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqMailerImplEmailCqEmailTemplateFactory", notes = "", response = ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.mailer.impl.email.CqEmailTemplateFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo> comDayCqMailerImplEmailCqEmailTemplateFactory(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "mailer.email.charset", required = false) String mailerEmailCharset) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"mailer.email.charset\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqMailerImplEmailCqRetrieverTemplateFactory", notes = "", response = ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.mailer.impl.email.CqRetrieverTemplateFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo> comDayCqMailerImplEmailCqRetrieverTemplateFactory(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "mailer.email.embed", required = false) Boolean mailerEmailEmbed,@ApiParam(value = "") @Valid @RequestParam(value = "mailer.email.charset", required = false) String mailerEmailCharset,@ApiParam(value = "") @Valid @RequestParam(value = "mailer.email.retrieverUserID", required = false) String mailerEmailRetrieverUserID,@ApiParam(value = "") @Valid @RequestParam(value = "mailer.email.retrieverUserPWD", required = false) String mailerEmailRetrieverUserPWD) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"mailer.email.charset\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"mailer.email.embed\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"mailer.email.retrieverUserPWD\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"mailer.email.retrieverUserID\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqMcmCampaignImplIntegrationConfigImpl", notes = "", response = ComDayCqMcmCampaignImplIntegrationConfigImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqMcmCampaignImplIntegrationConfigImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.mcm.campaign.impl.IntegrationConfigImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqMcmCampaignImplIntegrationConfigImplInfo> comDayCqMcmCampaignImplIntegrationConfigImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "aem.mcm.campaign.formConstraints", required = false) List<String> aemMcmCampaignFormConstraints,@ApiParam(value = "") @Valid @RequestParam(value = "aem.mcm.campaign.publicUrl", required = false) String aemMcmCampaignPublicUrl,@ApiParam(value = "") @Valid @RequestParam(value = "aem.mcm.campaign.relaxedSSL", required = false) Boolean aemMcmCampaignRelaxedSSL) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"aem.mcm.campaign.formConstraints\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"aem.mcm.campaign.relaxedSSL\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"aem.mcm.campaign.publicUrl\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqMcmCampaignImporterPersonalizedTextHandlerFactory", notes = "", response = ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.mcm.campaign.importer.PersonalizedTextHandlerFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo> comDayCqMcmCampaignImporterPersonalizedTextHandlerFactory(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "service.ranking", required = false) Integer serviceRanking,@ApiParam(value = "") @Valid @RequestParam(value = "tagpattern", required = false) String tagpattern) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"tagpattern\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"service.ranking\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqMcmCoreNewsletterNewsletterEmailServiceImpl", notes = "", response = ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.mcm.core.newsletter.NewsletterEmailServiceImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo> comDayCqMcmCoreNewsletterNewsletterEmailServiceImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "from.address", required = false) String fromAddress,@ApiParam(value = "") @Valid @RequestParam(value = "sender.host", required = false) String senderHost,@ApiParam(value = "") @Valid @RequestParam(value = "max.bounce.count", required = false) String maxBounceCount) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"max.bounce.count\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"from.address\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"sender.host\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqMcmImplMCMConfiguration", notes = "", response = ComDayCqMcmImplMCMConfigurationInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqMcmImplMCMConfigurationInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.mcm.impl.MCMConfiguration",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqMcmImplMCMConfigurationInfo> comDayCqMcmImplMCMConfiguration(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "experience.indirection", required = false) List<String> experienceIndirection,@ApiParam(value = "") @Valid @RequestParam(value = "touchpoint.indirection", required = false) List<String> touchpointIndirection) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"touchpoint.indirection\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"experience.indirection\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen", notes = "", response = ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.ClickThroughComponentTagHandlerFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo> comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "service.ranking", required = false) Integer serviceRanking,@ApiParam(value = "") @Valid @RequestParam(value = "tagpattern", required = false) String tagpattern,@ApiParam(value = "") @Valid @RequestParam(value = "component.resourceType", required = false) String componentResourceType) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"tagpattern\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"component.resourceType\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"service.ranking\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug", notes = "", response = ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.GraphicalClickThroughComponentTagHandlerFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo> comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "service.ranking", required = false) Integer serviceRanking,@ApiParam(value = "") @Valid @RequestParam(value = "tagpattern", required = false) String tagpattern,@ApiParam(value = "") @Valid @RequestParam(value = "component.resourceType", required = false) String componentResourceType) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"tagpattern\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"component.resourceType\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"service.ranking\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent", notes = "", response = ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.LeadFormCTAComponentTagHandlerFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo> comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "service.ranking", required = false) Integer serviceRanking,@ApiParam(value = "") @Valid @RequestParam(value = "tagpattern", required = false) String tagpattern) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"tagpattern\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"service.ranking\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa", notes = "", response = ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.MBoxExperienceTagHandlerFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo> comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "service.ranking", required = false) Integer serviceRanking,@ApiParam(value = "") @Valid @RequestParam(value = "tagpattern", required = false) String tagpattern) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"tagpattern\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"service.ranking\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH", notes = "", response = ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.TargetComponentTagHandlerFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo> comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "service.ranking", required = false) Integer serviceRanking,@ApiParam(value = "") @Valid @RequestParam(value = "tagpattern", required = false) String tagpattern,@ApiParam(value = "") @Valid @RequestParam(value = "component.resourceType", required = false) String componentResourceType) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"tagpattern\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"component.resourceType\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"service.ranking\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqNotificationImplNotificationServiceImpl", notes = "", response = ComDayCqNotificationImplNotificationServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqNotificationImplNotificationServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.notification.impl.NotificationServiceImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqNotificationImplNotificationServiceImplInfo> comDayCqNotificationImplNotificationServiceImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "event.filter", required = false) String eventFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"event.filter\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqPersonalizationImplServletsTargetingConfigurationServlet", notes = "", response = ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.personalization.impl.servlets.TargetingConfigurationServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo> comDayCqPersonalizationImplServletsTargetingConfigurationServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "forcelocation", required = false) Boolean forcelocation) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"forcelocation\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqPollingImporterImplManagedPollConfigImpl", notes = "", response = ComDayCqPollingImporterImplManagedPollConfigImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqPollingImporterImplManagedPollConfigImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollConfigImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqPollingImporterImplManagedPollConfigImplInfo> comDayCqPollingImporterImplManagedPollConfigImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "id", required = false) String id,@ApiParam(value = "") @Valid @RequestParam(value = "enabled", required = false) Boolean enabled,@ApiParam(value = "") @Valid @RequestParam(value = "reference", required = false) Boolean reference,@ApiParam(value = "") @Valid @RequestParam(value = "interval", required = false) Integer interval,@ApiParam(value = "") @Valid @RequestParam(value = "expression", required = false) String expression,@ApiParam(value = "") @Valid @RequestParam(value = "source", required = false) String source,@ApiParam(value = "") @Valid @RequestParam(value = "target", required = false) String target,@ApiParam(value = "") @Valid @RequestParam(value = "login", required = false) String login,@ApiParam(value = "") @Valid @RequestParam(value = "password", required = false) String password) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"reference\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"password\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"expression\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"interval\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"id\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"source\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"login\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"target\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqPollingImporterImplManagedPollingImporterImpl", notes = "", response = ComDayCqPollingImporterImplManagedPollingImporterImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqPollingImporterImplManagedPollingImporterImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollingImporterImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqPollingImporterImplManagedPollingImporterImplInfo> comDayCqPollingImporterImplManagedPollingImporterImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "importer.user", required = false) String importerUser) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"importer.user\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqPollingImporterImplPollingImporterImpl", notes = "", response = ComDayCqPollingImporterImplPollingImporterImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqPollingImporterImplPollingImporterImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.polling.importer.impl.PollingImporterImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqPollingImporterImplPollingImporterImplInfo> comDayCqPollingImporterImplPollingImporterImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "importer.min.interval", required = false) Integer importerMinInterval,@ApiParam(value = "") @Valid @RequestParam(value = "importer.user", required = false) String importerUser,@ApiParam(value = "") @Valid @RequestParam(value = "exclude.paths", required = false) List<String> excludePaths,@ApiParam(value = "") @Valid @RequestParam(value = "include.paths", required = false) List<String> includePaths) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"include.paths\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"importer.user\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"importer.min.interval\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"exclude.paths\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqReplicationAuditReplicationEventListener", notes = "", response = ComDayCqReplicationAuditReplicationEventListenerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqReplicationAuditReplicationEventListenerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.replication.audit.ReplicationEventListener",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqReplicationAuditReplicationEventListenerInfo> comDayCqReplicationAuditReplicationEventListener(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "service.ranking", required = false) Integer serviceRanking) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"service.ranking\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqReplicationContentStaticContentBuilder", notes = "", response = ComDayCqReplicationContentStaticContentBuilderInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqReplicationContentStaticContentBuilderInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.replication.content.StaticContentBuilder",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqReplicationContentStaticContentBuilderInfo> comDayCqReplicationContentStaticContentBuilder(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "host", required = false) String host,@ApiParam(value = "") @Valid @RequestParam(value = "port", required = false) Integer port) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"port\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"host\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqReplicationImplAgentManagerImpl", notes = "", response = ComDayCqReplicationImplAgentManagerImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqReplicationImplAgentManagerImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.replication.impl.AgentManagerImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqReplicationImplAgentManagerImplInfo> comDayCqReplicationImplAgentManagerImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "job.topics", required = false) String jobTopics,@ApiParam(value = "") @Valid @RequestParam(value = "serviceUser.target", required = false) String serviceUserTarget,@ApiParam(value = "") @Valid @RequestParam(value = "agentProvider.target", required = false) String agentProviderTarget) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"serviceUser.target\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"agentProvider.target\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"job.topics\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqReplicationImplContentDurboBinaryLessContentBuilder", notes = "", response = ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.replication.impl.content.durbo.BinaryLessContentBuilder",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo> comDayCqReplicationImplContentDurboBinaryLessContentBuilder(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "binary.threshold", required = false) Integer binaryThreshold) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"binary.threshold\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqReplicationImplContentDurboDurboImportConfigurationProv", notes = "", response = ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.replication.impl.content.durbo.DurboImportConfigurationProviderService",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo> comDayCqReplicationImplContentDurboDurboImportConfigurationProv(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "preserve.hierarchy.nodes", required = false) Boolean preserveHierarchyNodes,@ApiParam(value = "") @Valid @RequestParam(value = "ignore.versioning", required = false) Boolean ignoreVersioning,@ApiParam(value = "") @Valid @RequestParam(value = "import.acl", required = false) Boolean importAcl,@ApiParam(value = "") @Valid @RequestParam(value = "save.threshold", required = false) Integer saveThreshold,@ApiParam(value = "") @Valid @RequestParam(value = "preserve.user.paths", required = false) Boolean preserveUserPaths,@ApiParam(value = "") @Valid @RequestParam(value = "preserve.uuid", required = false) Boolean preserveUuid,@ApiParam(value = "") @Valid @RequestParam(value = "preserve.uuid.nodetypes", required = false) List<String> preserveUuidNodetypes,@ApiParam(value = "") @Valid @RequestParam(value = "preserve.uuid.subtrees", required = false) List<String> preserveUuidSubtrees,@ApiParam(value = "") @Valid @RequestParam(value = "auto.commit", required = false) Boolean autoCommit) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"preserve.hierarchy.nodes\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"save.threshold\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"preserve.uuid.nodetypes\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"ignore.versioning\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"preserve.uuid\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"import.acl\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"preserve.user.paths\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"preserve.uuid.subtrees\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"auto.commit\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqReplicationImplReplicationContentFactoryProviderImpl", notes = "", response = ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.replication.impl.ReplicationContentFactoryProviderImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo> comDayCqReplicationImplReplicationContentFactoryProviderImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "replication.content.useFileStorage", required = false) Boolean replicationContentUseFileStorage,@ApiParam(value = "") @Valid @RequestParam(value = "replication.content.maxCommitAttempts", required = false) Integer replicationContentMaxCommitAttempts) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"replication.content.maxCommitAttempts\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"replication.content.useFileStorage\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqReplicationImplReplicationReceiverImpl", notes = "", response = ComDayCqReplicationImplReplicationReceiverImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqReplicationImplReplicationReceiverImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.replication.impl.ReplicationReceiverImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqReplicationImplReplicationReceiverImplInfo> comDayCqReplicationImplReplicationReceiverImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "receiver.tmpfile.threshold", required = false) Integer receiverTmpfileThreshold,@ApiParam(value = "") @Valid @RequestParam(value = "receiver.packages.use.install", required = false) Boolean receiverPackagesUseInstall) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"receiver.packages.use.install\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"receiver.tmpfile.threshold\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqReplicationImplReplicatorImpl", notes = "", response = ComDayCqReplicationImplReplicatorImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqReplicationImplReplicatorImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.replication.impl.ReplicatorImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqReplicationImplReplicatorImplInfo> comDayCqReplicationImplReplicatorImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "distribute_events", required = false) Boolean distributeEvents) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"distribute_events\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqReplicationImplReverseReplicator", notes = "", response = ComDayCqReplicationImplReverseReplicatorInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqReplicationImplReverseReplicatorInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.replication.impl.ReverseReplicator",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqReplicationImplReverseReplicatorInfo> comDayCqReplicationImplReverseReplicator(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "scheduler.period", required = false) Integer schedulerPeriod) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"additionalProperties\" : \"additionalProperties\",  \"title\" : \"title\",  \"properties\" : {    \"scheduler.period\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqReplicationImplTransportBinaryLessTransportHandler", notes = "", response = ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.replication.impl.transport.BinaryLessTransportHandler",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo> comDayCqReplicationImplTransportBinaryLessTransportHandler(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "disabled.cipher.suites", required = false) List<String> disabledCipherSuites,@ApiParam(value = "") @Valid @RequestParam(value = "enabled.cipher.suites", required = false) List<String> enabledCipherSuites) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"enabled.cipher.suites\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"disabled.cipher.suites\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqReplicationImplTransportHttp", notes = "", response = ComDayCqReplicationImplTransportHttpInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqReplicationImplTransportHttpInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.replication.impl.transport.Http",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqReplicationImplTransportHttpInfo> comDayCqReplicationImplTransportHttp(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "disabled.cipher.suites", required = false) List<String> disabledCipherSuites,@ApiParam(value = "") @Valid @RequestParam(value = "enabled.cipher.suites", required = false) List<String> enabledCipherSuites) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"enabled.cipher.suites\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"disabled.cipher.suites\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqReportingImplCacheCacheImpl", notes = "", response = ComDayCqReportingImplCacheCacheImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqReportingImplCacheCacheImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.reporting.impl.cache.CacheImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqReportingImplCacheCacheImplInfo> comDayCqReportingImplCacheCacheImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "repcache.enable", required = false) Boolean repcacheEnable,@ApiParam(value = "") @Valid @RequestParam(value = "repcache.ttl", required = false) Integer repcacheTtl,@ApiParam(value = "") @Valid @RequestParam(value = "repcache.max", required = false) Integer repcacheMax) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"repcache.ttl\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"repcache.max\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"repcache.enable\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqReportingImplConfigServiceImpl", notes = "", response = ComDayCqReportingImplConfigServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqReportingImplConfigServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.reporting.impl.ConfigServiceImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqReportingImplConfigServiceImplInfo> comDayCqReportingImplConfigServiceImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "repconf.timezone", required = false) String repconfTimezone,@ApiParam(value = "") @Valid @RequestParam(value = "repconf.locale", required = false) String repconfLocale,@ApiParam(value = "") @Valid @RequestParam(value = "repconf.snapshots", required = false) String repconfSnapshots,@ApiParam(value = "") @Valid @RequestParam(value = "repconf.repdir", required = false) String repconfRepdir,@ApiParam(value = "") @Valid @RequestParam(value = "repconf.hourofday", required = false) Integer repconfHourofday,@ApiParam(value = "") @Valid @RequestParam(value = "repconf.minofhour", required = false) Integer repconfMinofhour,@ApiParam(value = "") @Valid @RequestParam(value = "repconf.maxrows", required = false) Integer repconfMaxrows,@ApiParam(value = "") @Valid @RequestParam(value = "repconf.fakedata", required = false) Boolean repconfFakedata,@ApiParam(value = "") @Valid @RequestParam(value = "repconf.snapshotuser", required = false) String repconfSnapshotuser,@ApiParam(value = "") @Valid @RequestParam(value = "repconf.enforcesnapshotuser", required = false) Boolean repconfEnforcesnapshotuser) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"repconf.fakedata\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"repconf.timezone\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"repconf.snapshots\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"repconf.maxrows\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"repconf.snapshotuser\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"repconf.locale\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"repconf.repdir\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"repconf.hourofday\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"repconf.minofhour\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"repconf.enforcesnapshotuser\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqReportingImplRLogAnalyzer", notes = "", response = ComDayCqReportingImplRLogAnalyzerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqReportingImplRLogAnalyzerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.reporting.impl.RLogAnalyzer",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqReportingImplRLogAnalyzerInfo> comDayCqReportingImplRLogAnalyzer(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "request.log.output", required = false) String requestLogOutput) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"request.log.output\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqRewriterLinkcheckerImplLinkCheckerImpl", notes = "", response = ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo> comDayCqRewriterLinkcheckerImplLinkCheckerImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "scheduler.period", required = false) Integer schedulerPeriod,@ApiParam(value = "") @Valid @RequestParam(value = "scheduler.concurrent", required = false) Boolean schedulerConcurrent,@ApiParam(value = "") @Valid @RequestParam(value = "service.bad_link_tolerance_interval", required = false) Integer serviceBadLinkToleranceInterval,@ApiParam(value = "") @Valid @RequestParam(value = "service.check_override_patterns", required = false) List<String> serviceCheckOverridePatterns,@ApiParam(value = "") @Valid @RequestParam(value = "service.cache_broken_internal_links", required = false) Boolean serviceCacheBrokenInternalLinks,@ApiParam(value = "") @Valid @RequestParam(value = "service.special_link_prefix", required = false) List<String> serviceSpecialLinkPrefix,@ApiParam(value = "") @Valid @RequestParam(value = "service.special_link_patterns", required = false) List<String> serviceSpecialLinkPatterns) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"service.special_link_prefix\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"scheduler.concurrent\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"service.special_link_patterns\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"service.check_override_patterns\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"service.cache_broken_internal_links\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"scheduler.period\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"service.bad_link_tolerance_interval\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqRewriterLinkcheckerImplLinkCheckerTask", notes = "", response = ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTask",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo> comDayCqRewriterLinkcheckerImplLinkCheckerTask(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "scheduler.period", required = false) Integer schedulerPeriod,@ApiParam(value = "") @Valid @RequestParam(value = "scheduler.concurrent", required = false) Boolean schedulerConcurrent,@ApiParam(value = "") @Valid @RequestParam(value = "good_link_test_interval", required = false) Integer goodLinkTestInterval,@ApiParam(value = "") @Valid @RequestParam(value = "bad_link_test_interval", required = false) Integer badLinkTestInterval,@ApiParam(value = "") @Valid @RequestParam(value = "link_unused_interval", required = false) Integer linkUnusedInterval,@ApiParam(value = "") @Valid @RequestParam(value = "connection.timeout", required = false) Integer connectionTimeout) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"scheduler.concurrent\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"good_link_test_interval\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"link_unused_interval\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"connection.timeout\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"bad_link_test_interval\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"scheduler.period\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory", notes = "", response = ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTransformerFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo> comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "linkcheckertransformer.disableRewriting", required = false) Boolean linkcheckertransformerDisableRewriting,@ApiParam(value = "") @Valid @RequestParam(value = "linkcheckertransformer.disableChecking", required = false) Boolean linkcheckertransformerDisableChecking,@ApiParam(value = "") @Valid @RequestParam(value = "linkcheckertransformer.mapCacheSize", required = false) Integer linkcheckertransformerMapCacheSize,@ApiParam(value = "") @Valid @RequestParam(value = "linkcheckertransformer.strictExtensionCheck", required = false) Boolean linkcheckertransformerStrictExtensionCheck,@ApiParam(value = "") @Valid @RequestParam(value = "linkcheckertransformer.stripHtmltExtension", required = false) Boolean linkcheckertransformerStripHtmltExtension,@ApiParam(value = "") @Valid @RequestParam(value = "linkcheckertransformer.rewriteElements", required = false) List<String> linkcheckertransformerRewriteElements,@ApiParam(value = "") @Valid @RequestParam(value = "linkcheckertransformer.stripExtensionPathBlacklist", required = false) List<String> linkcheckertransformerStripExtensionPathBlacklist) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"linkcheckertransformer.rewriteElements\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"linkcheckertransformer.mapCacheSize\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"linkcheckertransformer.stripExtensionPathBlacklist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"linkcheckertransformer.strictExtensionCheck\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"linkcheckertransformer.stripHtmltExtension\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"linkcheckertransformer.disableChecking\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"linkcheckertransformer.disableRewriting\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqRewriterLinkcheckerImplLinkInfoStorageImpl", notes = "", response = ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkInfoStorageImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo> comDayCqRewriterLinkcheckerImplLinkInfoStorageImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "service.max_links_per_host", required = false) Integer serviceMaxLinksPerHost,@ApiParam(value = "") @Valid @RequestParam(value = "service.save_external_link_references", required = false) Boolean serviceSaveExternalLinkReferences) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"service.max_links_per_host\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"service.save_external_link_references\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqRewriterProcessorImplHtmlParserFactory", notes = "", response = ComDayCqRewriterProcessorImplHtmlParserFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqRewriterProcessorImplHtmlParserFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.rewriter.processor.impl.HtmlParserFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqRewriterProcessorImplHtmlParserFactoryInfo> comDayCqRewriterProcessorImplHtmlParserFactory(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "htmlparser.processTags", required = false) List<String> htmlparserProcessTags,@ApiParam(value = "") @Valid @RequestParam(value = "htmlparser.preserveCamelCase", required = false) Boolean htmlparserPreserveCamelCase) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"htmlparser.preserveCamelCase\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"htmlparser.processTags\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqSearchImplBuilderQueryBuilderImpl", notes = "", response = ComDayCqSearchImplBuilderQueryBuilderImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqSearchImplBuilderQueryBuilderImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.search.impl.builder.QueryBuilderImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqSearchImplBuilderQueryBuilderImplInfo> comDayCqSearchImplBuilderQueryBuilderImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "excerpt.properties", required = false) List<String> excerptProperties,@ApiParam(value = "") @Valid @RequestParam(value = "cache.max.entries", required = false) Integer cacheMaxEntries,@ApiParam(value = "") @Valid @RequestParam(value = "cache.entry.lifetime", required = false) Integer cacheEntryLifetime,@ApiParam(value = "") @Valid @RequestParam(value = "xpath.union", required = false) Boolean xpathUnion) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"excerpt.properties\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"cache.entry.lifetime\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"xpath.union\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"cache.max.entries\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqSearchSuggestImplSuggestionIndexManagerImpl", notes = "", response = ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.search.suggest.impl.SuggestionIndexManagerImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo> comDayCqSearchSuggestImplSuggestionIndexManagerImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "pathBuilder.target", required = false) String pathBuilderTarget,@ApiParam(value = "") @Valid @RequestParam(value = "suggest.basepath", required = false) String suggestBasepath) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"suggest.basepath\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"pathBuilder.target\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqSearchpromoteImplPublishSearchPromoteConfigHandler", notes = "", response = ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.searchpromote.impl.PublishSearchPromoteConfigHandler",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo> comDayCqSearchpromoteImplPublishSearchPromoteConfigHandler(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.searchpromote.confighandler.enabled", required = false) Boolean cqSearchpromoteConfighandlerEnabled) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.searchpromote.confighandler.enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqSearchpromoteImplSearchPromoteServiceImpl", notes = "", response = ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.searchpromote.impl.SearchPromoteServiceImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo> comDayCqSearchpromoteImplSearchPromoteServiceImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.searchpromote.configuration.server.uri", required = false) String cqSearchpromoteConfigurationServerUri,@ApiParam(value = "") @Valid @RequestParam(value = "cq.searchpromote.configuration.environment", required = false) String cqSearchpromoteConfigurationEnvironment,@ApiParam(value = "") @Valid @RequestParam(value = "connection.timeout", required = false) Integer connectionTimeout,@ApiParam(value = "") @Valid @RequestParam(value = "socket.timeout", required = false) Integer socketTimeout) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.searchpromote.configuration.environment\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"connection.timeout\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"socket.timeout\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cq.searchpromote.configuration.server.uri\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqSecurityACLSetup", notes = "", response = ComDayCqSecurityACLSetupInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqSecurityACLSetupInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.security.ACLSetup",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqSecurityACLSetupInfo> comDayCqSecurityACLSetup(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.aclsetup.rules", required = false) List<String> cqAclsetupRules) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.aclsetup.rules\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqStatisticsImplStatisticsServiceImpl", notes = "", response = ComDayCqStatisticsImplStatisticsServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqStatisticsImplStatisticsServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.statistics.impl.StatisticsServiceImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqStatisticsImplStatisticsServiceImplInfo> comDayCqStatisticsImplStatisticsServiceImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "scheduler.period", required = false) Integer schedulerPeriod,@ApiParam(value = "") @Valid @RequestParam(value = "scheduler.concurrent", required = false) Boolean schedulerConcurrent,@ApiParam(value = "") @Valid @RequestParam(value = "path", required = false) String path,@ApiParam(value = "") @Valid @RequestParam(value = "workspace", required = false) String workspace,@ApiParam(value = "") @Valid @RequestParam(value = "keywordsPath", required = false) String keywordsPath,@ApiParam(value = "") @Valid @RequestParam(value = "asyncEntries", required = false) Boolean asyncEntries) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"path\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"scheduler.concurrent\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"workspace\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"keywordsPath\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"asyncEntries\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"scheduler.period\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqTaggingImplJcrTagManagerFactoryImpl", notes = "", response = ComDayCqTaggingImplJcrTagManagerFactoryImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqTaggingImplJcrTagManagerFactoryImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.tagging.impl.JcrTagManagerFactoryImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqTaggingImplJcrTagManagerFactoryImplInfo> comDayCqTaggingImplJcrTagManagerFactoryImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "validation.enabled", required = false) Boolean validationEnabled) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"validation.enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqTaggingImplSearchTagPredicateEvaluator", notes = "", response = ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.tagging.impl.search.TagPredicateEvaluator",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo> comDayCqTaggingImplSearchTagPredicateEvaluator(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "ignore_path", required = false) Boolean ignorePath) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"ignore_path\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqTaggingImplTagGarbageCollector", notes = "", response = ComDayCqTaggingImplTagGarbageCollectorInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqTaggingImplTagGarbageCollectorInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.tagging.impl.TagGarbageCollector",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqTaggingImplTagGarbageCollectorInfo> comDayCqTaggingImplTagGarbageCollector(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "scheduler.expression", required = false) String schedulerExpression) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"scheduler.expression\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmContentsyncImplHandlerPagesUpdateHandler", notes = "", response = ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.contentsync.impl.handler.PagesUpdateHandler",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo> comDayCqWcmContentsyncImplHandlerPagesUpdateHandler(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.pagesupdatehandler.imageresourcetypes", required = false) List<String> cqPagesupdatehandlerImageresourcetypes) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.pagesupdatehandler.imageresourcetypes\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor", notes = "", response = ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.contentsync.impl.rewriter.PathRewriterTransformerFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo> comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.contentsync.pathrewritertransformer.mapping.links", required = false) List<String> cqContentsyncPathrewritertransformerMappingLinks,@ApiParam(value = "") @Valid @RequestParam(value = "cq.contentsync.pathrewritertransformer.mapping.clientlibs", required = false) List<String> cqContentsyncPathrewritertransformerMappingClientlibs,@ApiParam(value = "") @Valid @RequestParam(value = "cq.contentsync.pathrewritertransformer.mapping.images", required = false) List<String> cqContentsyncPathrewritertransformerMappingImages,@ApiParam(value = "") @Valid @RequestParam(value = "cq.contentsync.pathrewritertransformer.attribute.pattern", required = false) String cqContentsyncPathrewritertransformerAttributePattern,@ApiParam(value = "") @Valid @RequestParam(value = "cq.contentsync.pathrewritertransformer.clientlibrary.pattern", required = false) String cqContentsyncPathrewritertransformerClientlibraryPattern,@ApiParam(value = "") @Valid @RequestParam(value = "cq.contentsync.pathrewritertransformer.clientlibrary.replace", required = false) String cqContentsyncPathrewritertransformerClientlibraryReplace) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.contentsync.pathrewritertransformer.mapping.links\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"cq.contentsync.pathrewritertransformer.clientlibrary.pattern\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"cq.contentsync.pathrewritertransformer.clientlibrary.replace\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"cq.contentsync.pathrewritertransformer.mapping.images\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"cq.contentsync.pathrewritertransformer.attribute.pattern\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"cq.contentsync.pathrewritertransformer.mapping.clientlibs\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmCoreImplAuthoringUIModeServiceImpl", notes = "", response = ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.core.impl.AuthoringUIModeServiceImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo> comDayCqWcmCoreImplAuthoringUIModeServiceImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "authoringUIModeService.default", required = false) String authoringUIModeServiceDefault) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"additionalProperties\" : \"additionalProperties\",  \"title\" : \"title\",  \"properties\" : {    \"authoringUIModeService.default\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmCoreImplCommandsWCMCommandServlet", notes = "", response = ComDayCqWcmCoreImplCommandsWCMCommandServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplCommandsWCMCommandServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.core.impl.commands.WCMCommandServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmCoreImplCommandsWCMCommandServletInfo> comDayCqWcmCoreImplCommandsWCMCommandServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "wcmcommandservlet.delete_whitelist", required = false) List<String> wcmcommandservletDeleteWhitelist) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"wcmcommandservlet.delete_whitelist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl", notes = "", response = ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.core.impl.devicedetection.DeviceIdentificationModeImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo> comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "dim.default.mode", required = false) String dimDefaultMode,@ApiParam(value = "") @Valid @RequestParam(value = "dim.appcache.enabled", required = false) Boolean dimAppcacheEnabled) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"dim.appcache.enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"dim.default.mode\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmCoreImplEventPageEventAuditListener", notes = "", response = ComDayCqWcmCoreImplEventPageEventAuditListenerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplEventPageEventAuditListenerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.core.impl.event.PageEventAuditListener",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmCoreImplEventPageEventAuditListenerInfo> comDayCqWcmCoreImplEventPageEventAuditListener(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "configured", required = false) String configured) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"configured\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmCoreImplEventPagePostProcessor", notes = "", response = ComDayCqWcmCoreImplEventPagePostProcessorInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplEventPagePostProcessorInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.core.impl.event.PagePostProcessor",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmCoreImplEventPagePostProcessorInfo> comDayCqWcmCoreImplEventPagePostProcessor(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "paths", required = false) List<String> paths) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"paths\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmCoreImplEventRepositoryChangeEventListener", notes = "", response = ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.core.impl.event.RepositoryChangeEventListener",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo> comDayCqWcmCoreImplEventRepositoryChangeEventListener(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "paths", required = false) List<String> paths,@ApiParam(value = "") @Valid @RequestParam(value = "excludedPaths", required = false) List<String> excludedPaths) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"paths\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"excludedPaths\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmCoreImplEventTemplatePostProcessor", notes = "", response = ComDayCqWcmCoreImplEventTemplatePostProcessorInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplEventTemplatePostProcessorInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.core.impl.event.TemplatePostProcessor",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmCoreImplEventTemplatePostProcessorInfo> comDayCqWcmCoreImplEventTemplatePostProcessor(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "paths", required = false) String paths) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"paths\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmCoreImplLanguageManagerImpl", notes = "", response = ComDayCqWcmCoreImplLanguageManagerImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplLanguageManagerImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.core.impl.LanguageManagerImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmCoreImplLanguageManagerImplInfo> comDayCqWcmCoreImplLanguageManagerImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "langmgr.list.path", required = false) String langmgrListPath,@ApiParam(value = "") @Valid @RequestParam(value = "langmgr.country.default", required = false) List<String> langmgrCountryDefault) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"langmgr.list.path\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"langmgr.country.default\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl", notes = "", response = ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.core.impl.LinkCheckerConfigurationFactoryImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo> comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "link.expired.prefix", required = false) String linkExpiredPrefix,@ApiParam(value = "") @Valid @RequestParam(value = "link.expired.remove", required = false) Boolean linkExpiredRemove,@ApiParam(value = "") @Valid @RequestParam(value = "link.expired.suffix", required = false) String linkExpiredSuffix,@ApiParam(value = "") @Valid @RequestParam(value = "link.invalid.prefix", required = false) String linkInvalidPrefix,@ApiParam(value = "") @Valid @RequestParam(value = "link.invalid.remove", required = false) Boolean linkInvalidRemove,@ApiParam(value = "") @Valid @RequestParam(value = "link.invalid.suffix", required = false) String linkInvalidSuffix,@ApiParam(value = "") @Valid @RequestParam(value = "link.predated.prefix", required = false) String linkPredatedPrefix,@ApiParam(value = "") @Valid @RequestParam(value = "link.predated.remove", required = false) Boolean linkPredatedRemove,@ApiParam(value = "") @Valid @RequestParam(value = "link.predated.suffix", required = false) String linkPredatedSuffix,@ApiParam(value = "") @Valid @RequestParam(value = "link.wcmmodes", required = false) List<String> linkWcmmodes) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"link.invalid.prefix\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"link.predated.prefix\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"link.expired.prefix\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"link.predated.remove\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"link.invalid.remove\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"link.invalid.suffix\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"link.expired.remove\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"link.wcmmodes\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"link.expired.suffix\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"link.predated.suffix\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmCoreImplPagePageInfoAggregatorImpl", notes = "", response = ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.core.impl.page.PageInfoAggregatorImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo> comDayCqWcmCoreImplPagePageInfoAggregatorImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "page.info.provider.property.regex.default", required = false) String pageInfoProviderPropertyRegexDefault,@ApiParam(value = "") @Valid @RequestParam(value = "page.info.provider.property.name", required = false) String pageInfoProviderPropertyName) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"page.info.provider.property.regex.default\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"page.info.provider.property.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmCoreImplPagePageManagerFactoryImpl", notes = "", response = ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.core.impl.page.PageManagerFactoryImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo> comDayCqWcmCoreImplPagePageManagerFactoryImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "illegalCharMapping", required = false) String illegalCharMapping,@ApiParam(value = "") @Valid @RequestParam(value = "pageSubTreeActivationCheck", required = false) Boolean pageSubTreeActivationCheck) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"illegalCharMapping\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"pageSubTreeActivationCheck\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmCoreImplReferencesContentContentReferenceConfig", notes = "", response = ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.core.impl.references.content.ContentReferenceConfig",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo> comDayCqWcmCoreImplReferencesContentContentReferenceConfig(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "contentReferenceConfig.resourceTypes", required = false) List<String> contentReferenceConfigResourceTypes) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"contentReferenceConfig.resourceTypes\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmCoreImplServletsContentfinderAssetViewHandler", notes = "", response = ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.AssetViewHandler",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo> comDayCqWcmCoreImplServletsContentfinderAssetViewHandler(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "dam.showexpired", required = false) Boolean damShowexpired,@ApiParam(value = "") @Valid @RequestParam(value = "dam.showhidden", required = false) Boolean damShowhidden,@ApiParam(value = "") @Valid @RequestParam(value = "tagTitleSearch", required = false) Boolean tagTitleSearch,@ApiParam(value = "") @Valid @RequestParam(value = "guessTotal", required = false) String guessTotal,@ApiParam(value = "") @Valid @RequestParam(value = "dam.expiryProperty", required = false) String damExpiryProperty) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"dam.showhidden\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"tagTitleSearch\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"guessTotal\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"dam.expiryProperty\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"dam.showexpired\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie", notes = "", response = ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.connector.ConnectorViewHandler",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo> comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "item.resource.types", required = false) List<String> itemResourceTypes) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"item.resource.types\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmCoreImplServletsContentfinderPageViewHandler", notes = "", response = ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.PageViewHandler",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo> comDayCqWcmCoreImplServletsContentfinderPageViewHandler(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "guessTotal", required = false) String guessTotal,@ApiParam(value = "") @Valid @RequestParam(value = "tagTitleSearch", required = false) Boolean tagTitleSearch) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"tagTitleSearch\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"guessTotal\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmCoreImplServletsFindReplaceServlet", notes = "", response = ComDayCqWcmCoreImplServletsFindReplaceServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplServletsFindReplaceServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.FindReplaceServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmCoreImplServletsFindReplaceServletInfo> comDayCqWcmCoreImplServletsFindReplaceServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "scope", required = false) List<String> scope) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"scope\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmCoreImplServletsReferenceSearchServlet", notes = "", response = ComDayCqWcmCoreImplServletsReferenceSearchServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplServletsReferenceSearchServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.ReferenceSearchServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmCoreImplServletsReferenceSearchServletInfo> comDayCqWcmCoreImplServletsReferenceSearchServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "referencesearchservlet.maxReferencesPerPage", required = false) Integer referencesearchservletMaxReferencesPerPage,@ApiParam(value = "") @Valid @RequestParam(value = "referencesearchservlet.maxPages", required = false) Integer referencesearchservletMaxPages) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"referencesearchservlet.maxPages\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"referencesearchservlet.maxReferencesPerPage\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmCoreImplServletsThumbnailServlet", notes = "", response = ComDayCqWcmCoreImplServletsThumbnailServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplServletsThumbnailServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.ThumbnailServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmCoreImplServletsThumbnailServletInfo> comDayCqWcmCoreImplServletsThumbnailServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "workspace", required = false) String workspace,@ApiParam(value = "") @Valid @RequestParam(value = "dimensions", required = false) List<String> dimensions) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"workspace\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"dimensions\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmCoreImplUtilsDefaultPageNameValidator", notes = "", response = ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.core.impl.utils.DefaultPageNameValidator",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo> comDayCqWcmCoreImplUtilsDefaultPageNameValidator(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "nonValidChars", required = false) String nonValidChars) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"nonValidChars\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmCoreImplVariantsPageVariantsProviderImpl", notes = "", response = ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.core.impl.variants.PageVariantsProviderImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo> comDayCqWcmCoreImplVariantsPageVariantsProviderImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "default.externalizer.domain", required = false) String defaultExternalizerDomain) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"default.externalizer.domain\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmCoreImplVersionManagerImpl", notes = "", response = ComDayCqWcmCoreImplVersionManagerImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplVersionManagerImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.core.impl.VersionManagerImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmCoreImplVersionManagerImplInfo> comDayCqWcmCoreImplVersionManagerImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "versionmanager.createVersionOnActivation", required = false) Boolean versionmanagerCreateVersionOnActivation,@ApiParam(value = "") @Valid @RequestParam(value = "versionmanager.purgingEnabled", required = false) Boolean versionmanagerPurgingEnabled,@ApiParam(value = "") @Valid @RequestParam(value = "versionmanager.purgePaths", required = false) List<String> versionmanagerPurgePaths,@ApiParam(value = "") @Valid @RequestParam(value = "versionmanager.ivPaths", required = false) List<String> versionmanagerIvPaths,@ApiParam(value = "") @Valid @RequestParam(value = "versionmanager.maxAgeDays", required = false) Integer versionmanagerMaxAgeDays,@ApiParam(value = "") @Valid @RequestParam(value = "versionmanager.maxNumberVersions", required = false) Integer versionmanagerMaxNumberVersions,@ApiParam(value = "") @Valid @RequestParam(value = "versionmanager.minNumberVersions", required = false) Integer versionmanagerMinNumberVersions) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"versionmanager.createVersionOnActivation\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"versionmanager.minNumberVersions\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"versionmanager.maxAgeDays\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"versionmanager.purgingEnabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"versionmanager.ivPaths\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"versionmanager.maxNumberVersions\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"versionmanager.purgePaths\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmCoreImplVersionPurgeTask", notes = "", response = ComDayCqWcmCoreImplVersionPurgeTaskInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplVersionPurgeTaskInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.core.impl.VersionPurgeTask",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmCoreImplVersionPurgeTaskInfo> comDayCqWcmCoreImplVersionPurgeTask(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "versionpurge.paths", required = false) List<String> versionpurgePaths,@ApiParam(value = "") @Valid @RequestParam(value = "versionpurge.recursive", required = false) Boolean versionpurgeRecursive,@ApiParam(value = "") @Valid @RequestParam(value = "versionpurge.maxVersions", required = false) Integer versionpurgeMaxVersions,@ApiParam(value = "") @Valid @RequestParam(value = "versionpurge.minVersions", required = false) Integer versionpurgeMinVersions,@ApiParam(value = "") @Valid @RequestParam(value = "versionpurge.maxAgeDays", required = false) Integer versionpurgeMaxAgeDays) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"versionpurge.paths\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"versionpurge.minVersions\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"versionpurge.maxAgeDays\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"versionpurge.maxVersions\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"versionpurge.recursive\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmCoreImplWCMDebugFilter", notes = "", response = ComDayCqWcmCoreImplWCMDebugFilterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplWCMDebugFilterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.core.impl.WCMDebugFilter",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmCoreImplWCMDebugFilterInfo> comDayCqWcmCoreImplWCMDebugFilter(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "wcmdbgfilter.enabled", required = false) Boolean wcmdbgfilterEnabled,@ApiParam(value = "") @Valid @RequestParam(value = "wcmdbgfilter.jspDebug", required = false) Boolean wcmdbgfilterJspDebug) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"wcmdbgfilter.jspDebug\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"wcmdbgfilter.enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmCoreImplWCMDeveloperModeFilter", notes = "", response = ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.core.impl.WCMDeveloperModeFilter",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo> comDayCqWcmCoreImplWCMDeveloperModeFilter(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "wcmdevmodefilter.enabled", required = false) Boolean wcmdevmodefilterEnabled) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"additionalProperties\" : \"additionalProperties\",  \"title\" : \"title\",  \"properties\" : {    \"wcmdevmodefilter.enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmCoreImplWarpTimeWarpFilter", notes = "", response = ComDayCqWcmCoreImplWarpTimeWarpFilterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreImplWarpTimeWarpFilterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.core.impl.warp.TimeWarpFilter",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmCoreImplWarpTimeWarpFilterInfo> comDayCqWcmCoreImplWarpTimeWarpFilter(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "filter.order", required = false) String filterOrder,@ApiParam(value = "") @Valid @RequestParam(value = "filter.scope", required = false) String filterScope) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"filter.order\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"filter.scope\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmCoreMvtMVTStatisticsImpl", notes = "", response = ComDayCqWcmCoreMvtMVTStatisticsImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreMvtMVTStatisticsImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.core.mvt.MVTStatisticsImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmCoreMvtMVTStatisticsImplInfo> comDayCqWcmCoreMvtMVTStatisticsImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "mvtstatistics.trackingurl", required = false) String mvtstatisticsTrackingurl) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"mvtstatistics.trackingurl\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmCoreStatsPageViewStatisticsImpl", notes = "", response = ComDayCqWcmCoreStatsPageViewStatisticsImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreStatsPageViewStatisticsImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.core.stats.PageViewStatisticsImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmCoreStatsPageViewStatisticsImplInfo> comDayCqWcmCoreStatsPageViewStatisticsImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "pageviewstatistics.trackingurl", required = false) String pageviewstatisticsTrackingurl,@ApiParam(value = "") @Valid @RequestParam(value = "pageviewstatistics.trackingscript.enabled", required = false) String pageviewstatisticsTrackingscriptEnabled) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"pageviewstatistics.trackingscript.enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"pageviewstatistics.trackingurl\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmCoreWCMRequestFilter", notes = "", response = ComDayCqWcmCoreWCMRequestFilterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmCoreWCMRequestFilterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.core.WCMRequestFilter",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmCoreWCMRequestFilterInfo> comDayCqWcmCoreWCMRequestFilter(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "wcmfilter.mode", required = false) String wcmfilterMode) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"wcmfilter.mode\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmDesignimporterDesignPackageImporter", notes = "", response = ComDayCqWcmDesignimporterDesignPackageImporterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterDesignPackageImporterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.designimporter.DesignPackageImporter",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmDesignimporterDesignPackageImporterInfo> comDayCqWcmDesignimporterDesignPackageImporter(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "extract.filter", required = false) List<String> extractFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"extract.filter\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmDesignimporterImplCanvasBuilderImpl", notes = "", response = ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasBuilderImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo> comDayCqWcmDesignimporterImplCanvasBuilderImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "filepattern", required = false) String filepattern,@ApiParam(value = "") @Valid @RequestParam(value = "build.page.nodes", required = false) Boolean buildPageNodes,@ApiParam(value = "") @Valid @RequestParam(value = "build.client.libs", required = false) Boolean buildClientLibs,@ApiParam(value = "") @Valid @RequestParam(value = "build.canvas.component", required = false) Boolean buildCanvasComponent) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"filepattern\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"build.page.nodes\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"build.client.libs\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"build.canvas.component\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmDesignimporterImplCanvasPageDeleteHandler", notes = "", response = ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasPageDeleteHandler",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo> comDayCqWcmDesignimporterImplCanvasPageDeleteHandler(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "minThreadPoolSize", required = false) Integer minThreadPoolSize,@ApiParam(value = "") @Valid @RequestParam(value = "maxThreadPoolSize", required = false) Integer maxThreadPoolSize) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"minThreadPoolSize\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"maxThreadPoolSize\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmDesignimporterImplEntryPreprocessorImpl", notes = "", response = ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.designimporter.impl.EntryPreprocessorImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo> comDayCqWcmDesignimporterImplEntryPreprocessorImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "search.pattern", required = false) String searchPattern,@ApiParam(value = "") @Valid @RequestParam(value = "replace.pattern", required = false) String replacePattern) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"replace.pattern\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"search.pattern\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmDesignimporterImplMobileCanvasBuilderImpl", notes = "", response = ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.designimporter.impl.MobileCanvasBuilderImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo> comDayCqWcmDesignimporterImplMobileCanvasBuilderImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "filepattern", required = false) String filepattern,@ApiParam(value = "") @Valid @RequestParam(value = "device.groups", required = false) List<String> deviceGroups,@ApiParam(value = "") @Valid @RequestParam(value = "build.page.nodes", required = false) Boolean buildPageNodes,@ApiParam(value = "") @Valid @RequestParam(value = "build.client.libs", required = false) Boolean buildClientLibs,@ApiParam(value = "") @Valid @RequestParam(value = "build.canvas.component", required = false) Boolean buildCanvasComponent) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"device.groups\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"filepattern\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"build.page.nodes\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"build.client.libs\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"build.canvas.component\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone", notes = "", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.CanvasComponentTagHandlerFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo> comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "service.ranking", required = false) Integer serviceRanking,@ApiParam(value = "") @Valid @RequestParam(value = "tagpattern", required = false) String tagpattern) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"tagpattern\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"service.ranking\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon", notes = "", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultComponentTagHandlerFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo> comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "service.ranking", required = false) Integer serviceRanking,@ApiParam(value = "") @Valid @RequestParam(value = "tagpattern", required = false) String tagpattern) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"tagpattern\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"service.ranking\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan", notes = "", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultTagHandlerFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo> comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "service.ranking", required = false) Integer serviceRanking,@ApiParam(value = "") @Valid @RequestParam(value = "tagpattern", required = false) String tagpattern) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"tagpattern\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"service.ranking\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle", notes = "", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.HeadTagHandlerFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo> comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "service.ranking", required = false) Integer serviceRanking,@ApiParam(value = "") @Valid @RequestParam(value = "tagpattern", required = false) String tagpattern) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"tagpattern\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"service.ranking\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand", notes = "", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.IFrameTagHandlerFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo> comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "service.ranking", required = false) Integer serviceRanking,@ApiParam(value = "") @Valid @RequestParam(value = "tagpattern", required = false) String tagpattern) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"tagpattern\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"service.ranking\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen", notes = "", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImageComponentTagHandlerFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo> comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "service.ranking", required = false) Integer serviceRanking,@ApiParam(value = "") @Valid @RequestParam(value = "tagpattern", required = false) String tagpattern,@ApiParam(value = "") @Valid @RequestParam(value = "component.resourceType", required = false) String componentResourceType) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"tagpattern\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"component.resourceType\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"service.ranking\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler", notes = "", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImgTagHandlerFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo> comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "service.ranking", required = false) Integer serviceRanking,@ApiParam(value = "") @Valid @RequestParam(value = "tagpattern", required = false) String tagpattern) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"tagpattern\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"service.ranking\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT", notes = "", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.InlineScriptTagHandlerFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo> comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "service.ranking", required = false) Integer serviceRanking,@ApiParam(value = "") @Valid @RequestParam(value = "tagpattern", required = false) String tagpattern) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"tagpattern\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"service.ranking\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle", notes = "", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.LinkTagHandlerFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo> comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "service.ranking", required = false) Integer serviceRanking,@ApiParam(value = "") @Valid @RequestParam(value = "tagpattern", required = false) String tagpattern) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"tagpattern\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"service.ranking\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle", notes = "", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.MetaTagHandlerFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo> comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "service.ranking", required = false) Integer serviceRanking,@ApiParam(value = "") @Valid @RequestParam(value = "tagpattern", required = false) String tagpattern) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"tagpattern\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"service.ranking\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH", notes = "", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.NonScriptTagHandlerFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo> comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "service.ranking", required = false) Integer serviceRanking,@ApiParam(value = "") @Valid @RequestParam(value = "tagpattern", required = false) String tagpattern) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"tagpattern\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"service.ranking\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone", notes = "", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ParsysComponentTagHandlerFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo> comDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "service.ranking", required = false) Integer serviceRanking,@ApiParam(value = "") @Valid @RequestParam(value = "tagpattern", required = false) String tagpattern,@ApiParam(value = "") @Valid @RequestParam(value = "component.resourceType", required = false) String componentResourceType) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"tagpattern\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"component.resourceType\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"service.ranking\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand", notes = "", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ScriptTagHandlerFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo> comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "service.ranking", required = false) Integer serviceRanking,@ApiParam(value = "") @Valid @RequestParam(value = "tagpattern", required = false) String tagpattern) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"tagpattern\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"service.ranking\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl", notes = "", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.StyleTagHandlerFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo> comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "service.ranking", required = false) Integer serviceRanking,@ApiParam(value = "") @Valid @RequestParam(value = "tagpattern", required = false) String tagpattern) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"tagpattern\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"service.ranking\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent", notes = "", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TextComponentTagHandlerFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo> comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "service.ranking", required = false) Integer serviceRanking,@ApiParam(value = "") @Valid @RequestParam(value = "tagpattern", required = false) String tagpattern,@ApiParam(value = "") @Valid @RequestParam(value = "component.resourceType", required = false) String componentResourceType) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"tagpattern\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"component.resourceType\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"service.ranking\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen", notes = "", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleComponentTagHandlerFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo> comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "service.ranking", required = false) Integer serviceRanking,@ApiParam(value = "") @Valid @RequestParam(value = "tagpattern", required = false) String tagpattern,@ApiParam(value = "") @Valid @RequestParam(value = "component.resourceType", required = false) String componentResourceType) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"tagpattern\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"component.resourceType\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"service.ranking\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl", notes = "", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleTagHandlerFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo> comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "service.ranking", required = false) Integer serviceRanking,@ApiParam(value = "") @Valid @RequestParam(value = "tagpattern", required = false) String tagpattern) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"tagpattern\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"service.ranking\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmFoundationFormsImplFormChooserServlet", notes = "", response = ComDayCqWcmFoundationFormsImplFormChooserServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmFoundationFormsImplFormChooserServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormChooserServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmFoundationFormsImplFormChooserServletInfo> comDayCqWcmFoundationFormsImplFormChooserServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "service.name", required = false) String serviceName,@ApiParam(value = "") @Valid @RequestParam(value = "sling.servlet.resourceTypes", required = false) String slingServletResourceTypes,@ApiParam(value = "") @Valid @RequestParam(value = "sling.servlet.selectors", required = false) String slingServletSelectors,@ApiParam(value = "") @Valid @RequestParam(value = "sling.servlet.methods", required = false) List<String> slingServletMethods,@ApiParam(value = "") @Valid @RequestParam(value = "forms.formchooserservlet.advansesearch.require", required = false) Boolean formsFormchooserservletAdvansesearchRequire) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"service.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"sling.servlet.selectors\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"sling.servlet.resourceTypes\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"sling.servlet.methods\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"forms.formchooserservlet.advansesearch.require\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmFoundationFormsImplFormParagraphPostProcessor", notes = "", response = ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormParagraphPostProcessor",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo> comDayCqWcmFoundationFormsImplFormParagraphPostProcessor(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "forms.formparagraphpostprocessor.enabled", required = false) Boolean formsFormparagraphpostprocessorEnabled,@ApiParam(value = "") @Valid @RequestParam(value = "forms.formparagraphpostprocessor.formresourcetypes", required = false) List<String> formsFormparagraphpostprocessorFormresourcetypes) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"forms.formparagraphpostprocessor.formresourcetypes\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"forms.formparagraphpostprocessor.enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmFoundationFormsImplFormsHandlingServlet", notes = "", response = ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormsHandlingServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo> comDayCqWcmFoundationFormsImplFormsHandlingServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "name.whitelist", required = false) String nameWhitelist,@ApiParam(value = "") @Valid @RequestParam(value = "allow.expressions", required = false) Boolean allowExpressions) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"name.whitelist\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"allow.expressions\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmFoundationFormsImplMailServlet", notes = "", response = ComDayCqWcmFoundationFormsImplMailServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmFoundationFormsImplMailServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.MailServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmFoundationFormsImplMailServletInfo> comDayCqWcmFoundationFormsImplMailServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "sling.servlet.resourceTypes", required = false) String slingServletResourceTypes,@ApiParam(value = "") @Valid @RequestParam(value = "sling.servlet.selectors", required = false) String slingServletSelectors,@ApiParam(value = "") @Valid @RequestParam(value = "resource.whitelist", required = false) List<String> resourceWhitelist,@ApiParam(value = "") @Valid @RequestParam(value = "resource.blacklist", required = false) String resourceBlacklist) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"resource.whitelist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"resource.blacklist\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"sling.servlet.selectors\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"sling.servlet.resourceTypes\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmFoundationImplAdaptiveImageComponentServlet", notes = "", response = ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.foundation.impl.AdaptiveImageComponentServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo> comDayCqWcmFoundationImplAdaptiveImageComponentServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "adapt.supported.widths", required = false) List<String> adaptSupportedWidths) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"adapt.supported.widths\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmFoundationImplHTTPAuthHandler", notes = "", response = ComDayCqWcmFoundationImplHTTPAuthHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmFoundationImplHTTPAuthHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.foundation.impl.HTTPAuthHandler",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmFoundationImplHTTPAuthHandlerInfo> comDayCqWcmFoundationImplHTTPAuthHandler(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "path", required = false) String path,@ApiParam(value = "") @Valid @RequestParam(value = "auth.http.nologin", required = false) Boolean authHttpNologin,@ApiParam(value = "") @Valid @RequestParam(value = "auth.http.realm", required = false) String authHttpRealm,@ApiParam(value = "") @Valid @RequestParam(value = "auth.default.loginpage", required = false) String authDefaultLoginpage,@ApiParam(value = "") @Valid @RequestParam(value = "auth.cred.form", required = false) List<String> authCredForm,@ApiParam(value = "") @Valid @RequestParam(value = "auth.cred.utf8", required = false) List<String> authCredUtf8) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"auth.cred.utf8\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"path\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"auth.http.nologin\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"auth.default.loginpage\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"auth.cred.form\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"auth.http.realm\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmFoundationImplPageImpressionsTracker", notes = "", response = ComDayCqWcmFoundationImplPageImpressionsTrackerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmFoundationImplPageImpressionsTrackerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.foundation.impl.PageImpressionsTracker",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmFoundationImplPageImpressionsTrackerInfo> comDayCqWcmFoundationImplPageImpressionsTracker(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "sling.auth.requirements", required = false) String slingAuthRequirements) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"sling.auth.requirements\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmFoundationImplPageRedirectServlet", notes = "", response = ComDayCqWcmFoundationImplPageRedirectServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmFoundationImplPageRedirectServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.foundation.impl.PageRedirectServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmFoundationImplPageRedirectServletInfo> comDayCqWcmFoundationImplPageRedirectServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "excluded.resource.types", required = false) List<String> excludedResourceTypes) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"excluded.resource.types\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist", notes = "", response = ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.foundation.security.impl.DefaultAttachmentTypeBlacklistService",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo> comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "default.attachment.type.blacklist", required = false) List<String> defaultAttachmentTypeBlacklist,@ApiParam(value = "") @Valid @RequestParam(value = "baseline.attachment.type.blacklist", required = false) List<String> baselineAttachmentTypeBlacklist) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"default.attachment.type.blacklist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"baseline.attachment.type.blacklist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl", notes = "", response = ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.foundation.security.impl.SaferSlingPostValidatorImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo> comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "parameter.whitelist", required = false) List<String> parameterWhitelist,@ApiParam(value = "") @Valid @RequestParam(value = "parameter.whitelist.prefixes", required = false) List<String> parameterWhitelistPrefixes,@ApiParam(value = "") @Valid @RequestParam(value = "binary.parameter.whitelist", required = false) List<String> binaryParameterWhitelist,@ApiParam(value = "") @Valid @RequestParam(value = "modifier.whitelist", required = false) List<String> modifierWhitelist,@ApiParam(value = "") @Valid @RequestParam(value = "operation.whitelist", required = false) List<String> operationWhitelist,@ApiParam(value = "") @Valid @RequestParam(value = "operation.whitelist.prefixes", required = false) List<String> operationWhitelistPrefixes,@ApiParam(value = "") @Valid @RequestParam(value = "typehint.whitelist", required = false) List<String> typehintWhitelist,@ApiParam(value = "") @Valid @RequestParam(value = "resourcetype.whitelist", required = false) List<String> resourcetypeWhitelist) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"parameter.whitelist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"resourcetype.whitelist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"modifier.whitelist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"operation.whitelist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"operation.whitelist.prefixes\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"typehint.whitelist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"binary.parameter.whitelist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"parameter.whitelist.prefixes\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory", notes = "", response = ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.mobile.core.impl.device.DeviceInfoTransformerFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo> comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "device.info.transformer.enabled", required = false) Boolean deviceInfoTransformerEnabled,@ApiParam(value = "") @Valid @RequestParam(value = "device.info.transformer.css.style", required = false) String deviceInfoTransformerCssStyle) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"device.info.transformer.css.style\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"device.info.transformer.enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmMobileCoreImplRedirectRedirectFilter", notes = "", response = ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.mobile.core.impl.redirect.RedirectFilter",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo> comDayCqWcmMobileCoreImplRedirectRedirectFilter(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "redirect.enabled", required = false) Boolean redirectEnabled,@ApiParam(value = "") @Valid @RequestParam(value = "redirect.stats.enabled", required = false) Boolean redirectStatsEnabled,@ApiParam(value = "") @Valid @RequestParam(value = "redirect.extensions", required = false) List<String> redirectExtensions,@ApiParam(value = "") @Valid @RequestParam(value = "redirect.paths", required = false) List<String> redirectPaths) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"redirect.enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"redirect.paths\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"redirect.stats.enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"redirect.extensions\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmMsmImplActionsContentCopyActionFactory", notes = "", response = ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentCopyActionFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo> comDayCqWcmMsmImplActionsContentCopyActionFactory(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.wcm.msm.action.excludednodetypes", required = false) List<String> cqWcmMsmActionExcludednodetypes,@ApiParam(value = "") @Valid @RequestParam(value = "cq.wcm.msm.action.excludedparagraphitems", required = false) List<String> cqWcmMsmActionExcludedparagraphitems,@ApiParam(value = "") @Valid @RequestParam(value = "cq.wcm.msm.action.excludedprops", required = false) List<String> cqWcmMsmActionExcludedprops,@ApiParam(value = "") @Valid @RequestParam(value = "contentcopyaction.order.style", required = false) String contentcopyactionOrderStyle) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.wcm.msm.action.excludedparagraphitems\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"cq.wcm.msm.action.excludedprops\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"cq.wcm.msm.action.excludednodetypes\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"contentcopyaction.order.style\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmMsmImplActionsContentDeleteActionFactory", notes = "", response = ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentDeleteActionFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo> comDayCqWcmMsmImplActionsContentDeleteActionFactory(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.wcm.msm.action.excludednodetypes", required = false) List<String> cqWcmMsmActionExcludednodetypes,@ApiParam(value = "") @Valid @RequestParam(value = "cq.wcm.msm.action.excludedparagraphitems", required = false) List<String> cqWcmMsmActionExcludedparagraphitems,@ApiParam(value = "") @Valid @RequestParam(value = "cq.wcm.msm.action.excludedprops", required = false) List<String> cqWcmMsmActionExcludedprops) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.wcm.msm.action.excludedparagraphitems\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"cq.wcm.msm.action.excludedprops\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"cq.wcm.msm.action.excludednodetypes\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmMsmImplActionsContentUpdateActionFactory", notes = "", response = ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentUpdateActionFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo> comDayCqWcmMsmImplActionsContentUpdateActionFactory(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.wcm.msm.action.excludednodetypes", required = false) List<String> cqWcmMsmActionExcludednodetypes,@ApiParam(value = "") @Valid @RequestParam(value = "cq.wcm.msm.action.excludedparagraphitems", required = false) List<String> cqWcmMsmActionExcludedparagraphitems,@ApiParam(value = "") @Valid @RequestParam(value = "cq.wcm.msm.action.excludedprops", required = false) List<String> cqWcmMsmActionExcludedprops,@ApiParam(value = "") @Valid @RequestParam(value = "cq.wcm.msm.action.ignoredMixin", required = false) List<String> cqWcmMsmActionIgnoredMixin) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.wcm.msm.action.excludedparagraphitems\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"cq.wcm.msm.action.excludedprops\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"cq.wcm.msm.action.excludednodetypes\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"cq.wcm.msm.action.ignoredMixin\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmMsmImplActionsOrderChildrenActionFactory", notes = "", response = ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.OrderChildrenActionFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo> comDayCqWcmMsmImplActionsOrderChildrenActionFactory(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.wcm.msm.action.excludednodetypes", required = false) List<String> cqWcmMsmActionExcludednodetypes,@ApiParam(value = "") @Valid @RequestParam(value = "cq.wcm.msm.action.excludedparagraphitems", required = false) List<String> cqWcmMsmActionExcludedparagraphitems,@ApiParam(value = "") @Valid @RequestParam(value = "cq.wcm.msm.action.excludedprops", required = false) List<String> cqWcmMsmActionExcludedprops) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.wcm.msm.action.excludedparagraphitems\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"cq.wcm.msm.action.excludedprops\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"cq.wcm.msm.action.excludednodetypes\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmMsmImplActionsPageMoveActionFactory", notes = "", response = ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.PageMoveActionFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo> comDayCqWcmMsmImplActionsPageMoveActionFactory(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.wcm.msm.action.excludednodetypes", required = false) List<String> cqWcmMsmActionExcludednodetypes,@ApiParam(value = "") @Valid @RequestParam(value = "cq.wcm.msm.action.excludedparagraphitems", required = false) List<String> cqWcmMsmActionExcludedparagraphitems,@ApiParam(value = "") @Valid @RequestParam(value = "cq.wcm.msm.action.excludedprops", required = false) List<String> cqWcmMsmActionExcludedprops,@ApiParam(value = "") @Valid @RequestParam(value = "cq.wcm.msm.impl.actions.pagemove.prop_referenceUpdate", required = false) Boolean cqWcmMsmImplActionsPagemovePropReferenceUpdate) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.wcm.msm.impl.actions.pagemove.prop_referenceUpdate\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"cq.wcm.msm.action.excludedparagraphitems\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"cq.wcm.msm.action.excludedprops\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"cq.wcm.msm.action.excludednodetypes\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmMsmImplActionsReferencesUpdateActionFactory", notes = "", response = ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ReferencesUpdateActionFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo> comDayCqWcmMsmImplActionsReferencesUpdateActionFactory(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.wcm.msm.action.excludednodetypes", required = false) List<String> cqWcmMsmActionExcludednodetypes,@ApiParam(value = "") @Valid @RequestParam(value = "cq.wcm.msm.action.excludedparagraphitems", required = false) List<String> cqWcmMsmActionExcludedparagraphitems,@ApiParam(value = "") @Valid @RequestParam(value = "cq.wcm.msm.action.excludedprops", required = false) List<String> cqWcmMsmActionExcludedprops,@ApiParam(value = "") @Valid @RequestParam(value = "cq.wcm.msm.impl.action.referencesupdate.prop_updateNested", required = false) Boolean cqWcmMsmImplActionReferencesupdatePropUpdateNested) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.wcm.msm.impl.action.referencesupdate.prop_updateNested\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"cq.wcm.msm.action.excludedparagraphitems\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"cq.wcm.msm.action.excludedprops\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"cq.wcm.msm.action.excludednodetypes\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmMsmImplActionsVersionCopyActionFactory", notes = "", response = ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.VersionCopyActionFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo> comDayCqWcmMsmImplActionsVersionCopyActionFactory(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.wcm.msm.action.excludednodetypes", required = false) List<String> cqWcmMsmActionExcludednodetypes,@ApiParam(value = "") @Valid @RequestParam(value = "cq.wcm.msm.action.excludedparagraphitems", required = false) List<String> cqWcmMsmActionExcludedparagraphitems,@ApiParam(value = "") @Valid @RequestParam(value = "cq.wcm.msm.action.excludedprops", required = false) List<String> cqWcmMsmActionExcludedprops) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.wcm.msm.action.excludedparagraphitems\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"cq.wcm.msm.action.excludedprops\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"cq.wcm.msm.action.excludednodetypes\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmMsmImplLiveRelationshipManagerImpl", notes = "", response = ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.msm.impl.LiveRelationshipManagerImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo> comDayCqWcmMsmImplLiveRelationshipManagerImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "liverelationshipmgr.relationsconfig.default", required = false) String liverelationshipmgrRelationsconfigDefault) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"liverelationshipmgr.relationsconfig.default\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmMsmImplRolloutManagerImpl", notes = "", response = ComDayCqWcmMsmImplRolloutManagerImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmMsmImplRolloutManagerImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.msm.impl.RolloutManagerImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmMsmImplRolloutManagerImplInfo> comDayCqWcmMsmImplRolloutManagerImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "event.filter", required = false) String eventFilter,@ApiParam(value = "") @Valid @RequestParam(value = "rolloutmgr.excludedprops.default", required = false) List<String> rolloutmgrExcludedpropsDefault,@ApiParam(value = "") @Valid @RequestParam(value = "rolloutmgr.excludedparagraphprops.default", required = false) List<String> rolloutmgrExcludedparagraphpropsDefault,@ApiParam(value = "") @Valid @RequestParam(value = "rolloutmgr.excludednodetypes.default", required = false) List<String> rolloutmgrExcludednodetypesDefault,@ApiParam(value = "") @Valid @RequestParam(value = "rolloutmgr.threadpool.maxsize", required = false) Integer rolloutmgrThreadpoolMaxsize,@ApiParam(value = "") @Valid @RequestParam(value = "rolloutmgr.threadpool.maxshutdowntime", required = false) Integer rolloutmgrThreadpoolMaxshutdowntime,@ApiParam(value = "") @Valid @RequestParam(value = "rolloutmgr.threadpool.priority", required = false) String rolloutmgrThreadpoolPriority,@ApiParam(value = "") @Valid @RequestParam(value = "rolloutmgr.commit.size", required = false) Integer rolloutmgrCommitSize,@ApiParam(value = "") @Valid @RequestParam(value = "rolloutmgr.conflicthandling.enabled", required = false) Boolean rolloutmgrConflicthandlingEnabled) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"additionalProperties\" : \"additionalProperties\",  \"title\" : \"title\",  \"properties\" : {    \"rolloutmgr.excludedprops.default\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"rolloutmgr.excludednodetypes.default\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"rolloutmgr.conflicthandling.enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"rolloutmgr.threadpool.maxshutdowntime\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"rolloutmgr.commit.size\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"rolloutmgr.threadpool.priority\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"event.filter\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"rolloutmgr.excludedparagraphprops.default\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"rolloutmgr.threadpool.maxsize\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmMsmImplServletsAuditLogServlet", notes = "", response = ComDayCqWcmMsmImplServletsAuditLogServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmMsmImplServletsAuditLogServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.msm.impl.servlets.AuditLogServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmMsmImplServletsAuditLogServletInfo> comDayCqWcmMsmImplServletsAuditLogServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "auditlogservlet.default.events.count", required = false) Integer auditlogservletDefaultEventsCount,@ApiParam(value = "") @Valid @RequestParam(value = "auditlogservlet.default.path", required = false) String auditlogservletDefaultPath) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"auditlogservlet.default.events.count\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"auditlogservlet.default.path\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmNotificationEmailImplEmailChannel", notes = "", response = ComDayCqWcmNotificationEmailImplEmailChannelInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmNotificationEmailImplEmailChannelInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.notification.email.impl.EmailChannel",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmNotificationEmailImplEmailChannelInfo> comDayCqWcmNotificationEmailImplEmailChannel(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "email.from", required = false) String emailFrom) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"email.from\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmNotificationImplNotificationManagerImpl", notes = "", response = ComDayCqWcmNotificationImplNotificationManagerImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmNotificationImplNotificationManagerImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.notification.impl.NotificationManagerImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmNotificationImplNotificationManagerImplInfo> comDayCqWcmNotificationImplNotificationManagerImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "event.topics", required = false) List<String> eventTopics) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"event.topics\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmScriptingImplBVPManager", notes = "", response = ComDayCqWcmScriptingImplBVPManagerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmScriptingImplBVPManagerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.scripting.impl.BVPManager",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmScriptingImplBVPManagerInfo> comDayCqWcmScriptingImplBVPManager(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "com.day.cq.wcm.scripting.bvp.script.engines", required = false) List<String> comDayCqWcmScriptingBvpScriptEngines) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"com.day.cq.wcm.scripting.bvp.script.engines\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmUndoUndoConfig", notes = "", response = ComDayCqWcmUndoUndoConfigInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmUndoUndoConfigInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.undo.UndoConfig",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmUndoUndoConfigInfo> comDayCqWcmUndoUndoConfig(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.wcm.undo.enabled", required = false) Boolean cqWcmUndoEnabled,@ApiParam(value = "") @Valid @RequestParam(value = "cq.wcm.undo.path", required = false) String cqWcmUndoPath,@ApiParam(value = "") @Valid @RequestParam(value = "cq.wcm.undo.validity", required = false) Integer cqWcmUndoValidity,@ApiParam(value = "") @Valid @RequestParam(value = "cq.wcm.undo.steps", required = false) Integer cqWcmUndoSteps,@ApiParam(value = "") @Valid @RequestParam(value = "cq.wcm.undo.persistence", required = false) String cqWcmUndoPersistence,@ApiParam(value = "") @Valid @RequestParam(value = "cq.wcm.undo.persistence.mode", required = false) Boolean cqWcmUndoPersistenceMode,@ApiParam(value = "") @Valid @RequestParam(value = "cq.wcm.undo.markermode", required = false) String cqWcmUndoMarkermode,@ApiParam(value = "") @Valid @RequestParam(value = "cq.wcm.undo.whitelist", required = false) List<String> cqWcmUndoWhitelist,@ApiParam(value = "") @Valid @RequestParam(value = "cq.wcm.undo.blacklist", required = false) List<String> cqWcmUndoBlacklist) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.wcm.undo.steps\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cq.wcm.undo.persistence.mode\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"cq.wcm.undo.path\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"cq.wcm.undo.markermode\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"cq.wcm.undo.persistence\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"cq.wcm.undo.enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"cq.wcm.undo.blacklist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"cq.wcm.undo.validity\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cq.wcm.undo.whitelist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmWebservicesupportImplReplicationEventListener", notes = "", response = ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.webservicesupport.impl.ReplicationEventListener",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo> comDayCqWcmWebservicesupportImplReplicationEventListener(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "Flush agents", required = false) List<String> flushAgents) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"Flush agents\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmWorkflowImplWcmWorkflowServiceImpl", notes = "", response = ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.workflow.impl.WcmWorkflowServiceImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo> comDayCqWcmWorkflowImplWcmWorkflowServiceImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "event.filter", required = false) String eventFilter,@ApiParam(value = "") @Valid @RequestParam(value = "minThreadPoolSize", required = false) Integer minThreadPoolSize,@ApiParam(value = "") @Valid @RequestParam(value = "maxThreadPoolSize", required = false) Integer maxThreadPoolSize,@ApiParam(value = "") @Valid @RequestParam(value = "cq.wcm.workflow.terminate.on.activate", required = false) Boolean cqWcmWorkflowTerminateOnActivate,@ApiParam(value = "") @Valid @RequestParam(value = "cq.wcm.worklfow.terminate.exclusion.list", required = false) List<String> cqWcmWorklfowTerminateExclusionList) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cq.wcm.worklfow.terminate.exclusion.list\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"minThreadPoolSize\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"maxThreadPoolSize\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cq.wcm.workflow.terminate.on.activate\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"event.filter\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWcmWorkflowImplWorkflowPackageInfoProvider", notes = "", response = ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.wcm.workflow.impl.WorkflowPackageInfoProvider",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo> comDayCqWcmWorkflowImplWorkflowPackageInfoProvider(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "workflowpackageinfoprovider.filter", required = false) List<String> workflowpackageinfoproviderFilter,@ApiParam(value = "") @Valid @RequestParam(value = "workflowpackageinfoprovider.filter.rootpath", required = false) String workflowpackageinfoproviderFilterRootpath) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"workflowpackageinfoprovider.filter.rootpath\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"workflowpackageinfoprovider.filter\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWidgetImplHtmlLibraryManagerImpl", notes = "", response = ComDayCqWidgetImplHtmlLibraryManagerImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWidgetImplHtmlLibraryManagerImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.widget.impl.HtmlLibraryManagerImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWidgetImplHtmlLibraryManagerImplInfo> comDayCqWidgetImplHtmlLibraryManagerImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "htmllibmanager.clientmanager", required = false) String htmllibmanagerClientmanager,@ApiParam(value = "") @Valid @RequestParam(value = "htmllibmanager.debug", required = false) Boolean htmllibmanagerDebug,@ApiParam(value = "") @Valid @RequestParam(value = "htmllibmanager.debug.console", required = false) Boolean htmllibmanagerDebugConsole,@ApiParam(value = "") @Valid @RequestParam(value = "htmllibmanager.debug.init.js", required = false) String htmllibmanagerDebugInitJs,@ApiParam(value = "") @Valid @RequestParam(value = "htmllibmanager.defaultthemename", required = false) String htmllibmanagerDefaultthemename,@ApiParam(value = "") @Valid @RequestParam(value = "htmllibmanager.defaultuserthemename", required = false) String htmllibmanagerDefaultuserthemename,@ApiParam(value = "") @Valid @RequestParam(value = "htmllibmanager.firebuglite.path", required = false) String htmllibmanagerFirebuglitePath,@ApiParam(value = "") @Valid @RequestParam(value = "htmllibmanager.forceCQUrlInfo", required = false) Boolean htmllibmanagerForceCQUrlInfo,@ApiParam(value = "") @Valid @RequestParam(value = "htmllibmanager.gzip", required = false) Boolean htmllibmanagerGzip,@ApiParam(value = "") @Valid @RequestParam(value = "htmllibmanager.maxage", required = false) Integer htmllibmanagerMaxage,@ApiParam(value = "") @Valid @RequestParam(value = "htmllibmanager.maxDataUriSize", required = false) Integer htmllibmanagerMaxDataUriSize,@ApiParam(value = "") @Valid @RequestParam(value = "htmllibmanager.minify", required = false) Boolean htmllibmanagerMinify,@ApiParam(value = "") @Valid @RequestParam(value = "htmllibmanager.path.list", required = false) List<String> htmllibmanagerPathList,@ApiParam(value = "") @Valid @RequestParam(value = "htmllibmanager.timing", required = false) Boolean htmllibmanagerTiming) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"htmllibmanager.defaultuserthemename\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"htmllibmanager.gzip\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"htmllibmanager.clientmanager\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"htmllibmanager.debug\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"htmllibmanager.maxage\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"htmllibmanager.minify\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"htmllibmanager.defaultthemename\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"htmllibmanager.path.list\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"htmllibmanager.firebuglite.path\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"htmllibmanager.debug.init.js\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"htmllibmanager.maxDataUriSize\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"htmllibmanager.debug.console\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"htmllibmanager.forceCQUrlInfo\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"htmllibmanager.timing\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWidgetImplWidgetExtensionProviderImpl", notes = "", response = ComDayCqWidgetImplWidgetExtensionProviderImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWidgetImplWidgetExtensionProviderImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.widget.impl.WidgetExtensionProviderImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWidgetImplWidgetExtensionProviderImplInfo> comDayCqWidgetImplWidgetExtensionProviderImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "extendable.widgets", required = false) List<String> extendableWidgets,@ApiParam(value = "") @Valid @RequestParam(value = "widgetextensionprovider.debug", required = false) Boolean widgetextensionproviderDebug) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"extendable.widgets\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"widgetextensionprovider.debug\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWorkflowImplEmailEMailNotificationService", notes = "", response = ComDayCqWorkflowImplEmailEMailNotificationServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWorkflowImplEmailEMailNotificationServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.workflow.impl.email.EMailNotificationService",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWorkflowImplEmailEMailNotificationServiceInfo> comDayCqWorkflowImplEmailEMailNotificationService(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "from.address", required = false) String fromAddress,@ApiParam(value = "") @Valid @RequestParam(value = "host.prefix", required = false) String hostPrefix,@ApiParam(value = "") @Valid @RequestParam(value = "notify.onabort", required = false) Boolean notifyOnabort,@ApiParam(value = "") @Valid @RequestParam(value = "notify.oncomplete", required = false) Boolean notifyOncomplete,@ApiParam(value = "") @Valid @RequestParam(value = "notify.oncontainercomplete", required = false) Boolean notifyOncontainercomplete,@ApiParam(value = "") @Valid @RequestParam(value = "notify.useronly", required = false) Boolean notifyUseronly) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"host.prefix\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"notify.onabort\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"notify.oncomplete\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"notify.useronly\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"from.address\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"notify.oncontainercomplete\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCqWorkflowImplEmailTaskEMailNotificationService", notes = "", response = ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.cq.workflow.impl.email.TaskEMailNotificationService",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo> comDayCqWorkflowImplEmailTaskEMailNotificationService(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "notify.onupdate", required = false) Boolean notifyOnupdate,@ApiParam(value = "") @Valid @RequestParam(value = "notify.oncomplete", required = false) Boolean notifyOncomplete) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"notify.onupdate\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"notify.oncomplete\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCrxSecurityTokenImplImplTokenAuthenticationHandler", notes = "", response = ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.crx.security.token.impl.impl.TokenAuthenticationHandler",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo> comDayCrxSecurityTokenImplImplTokenAuthenticationHandler(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "path", required = false) String path,@ApiParam(value = "") @Valid @RequestParam(value = "token.required.attr", required = false) String tokenRequiredAttr,@ApiParam(value = "") @Valid @RequestParam(value = "token.alternate.url", required = false) String tokenAlternateUrl,@ApiParam(value = "") @Valid @RequestParam(value = "token.encapsulated", required = false) Boolean tokenEncapsulated,@ApiParam(value = "") @Valid @RequestParam(value = "skip.token.refresh", required = false) List<String> skipTokenRefresh) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"path\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"token.encapsulated\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"token.alternate.url\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"token.required.attr\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"skip.token.refresh\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "comDayCrxSecurityTokenImplTokenCleanupTask", notes = "", response = ComDayCrxSecurityTokenImplTokenCleanupTaskInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = ComDayCrxSecurityTokenImplTokenCleanupTaskInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/com.day.crx.security.token.impl.TokenCleanupTask",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ComDayCrxSecurityTokenImplTokenCleanupTaskInfo> comDayCrxSecurityTokenImplTokenCleanupTask(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "enable.token.cleanup.task", required = false) Boolean enableTokenCleanupTask,@ApiParam(value = "") @Valid @RequestParam(value = "scheduler.expression", required = false) String schedulerExpression,@ApiParam(value = "") @Valid @RequestParam(value = "batch.size", required = false) Integer batchSize) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"batch.size\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"scheduler.expression\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"enable.token.cleanup.task\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "guideLocalizationService", notes = "", response = GuideLocalizationServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = GuideLocalizationServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/Guide Localization Service",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<GuideLocalizationServiceInfo> guideLocalizationService(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "supportedLocales", required = false) List<String> supportedLocales,@ApiParam(value = "") @Valid @RequestParam(value = "Localizable Properties", required = false) List<String> localizableProperties) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"supportedLocales\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"Localizable Properties\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "messagingUserComponentFactory", notes = "", response = MessagingUserComponentFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = MessagingUserComponentFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/MessagingUserComponentFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<MessagingUserComponentFactoryInfo> messagingUserComponentFactory(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "priority", required = false) Integer priority) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"priority\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheAriesJmxFrameworkStateConfig", notes = "", response = OrgApacheAriesJmxFrameworkStateConfigInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheAriesJmxFrameworkStateConfigInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.aries.jmx.framework.StateConfig",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheAriesJmxFrameworkStateConfigInfo> orgApacheAriesJmxFrameworkStateConfig(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "attributeChangeNotificationEnabled", required = false) Boolean attributeChangeNotificationEnabled) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"attributeChangeNotificationEnabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheFelixEventadminImplEventAdmin", notes = "", response = OrgApacheFelixEventadminImplEventAdminInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheFelixEventadminImplEventAdminInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.felix.eventadmin.impl.EventAdmin",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheFelixEventadminImplEventAdminInfo> orgApacheFelixEventadminImplEventAdmin(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.eventadmin.ThreadPoolSize", required = false) Integer orgApacheFelixEventadminThreadPoolSize,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.eventadmin.AsyncToSyncThreadRatio", required = false) BigDecimal orgApacheFelixEventadminAsyncToSyncThreadRatio,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.eventadmin.Timeout", required = false) Integer orgApacheFelixEventadminTimeout,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.eventadmin.RequireTopic", required = false) Boolean orgApacheFelixEventadminRequireTopic,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.eventadmin.IgnoreTimeout", required = false) List<String> orgApacheFelixEventadminIgnoreTimeout,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.eventadmin.IgnoreTopic", required = false) List<String> orgApacheFelixEventadminIgnoreTopic) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"org.apache.felix.eventadmin.IgnoreTopic\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"org.apache.felix.eventadmin.IgnoreTimeout\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"org.apache.felix.eventadmin.AsyncToSyncThreadRatio\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : 6.02745618307040320615897144307382404804229736328125    },    \"org.apache.felix.eventadmin.Timeout\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"org.apache.felix.eventadmin.RequireTopic\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"org.apache.felix.eventadmin.ThreadPoolSize\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheFelixHttp", notes = "", response = OrgApacheFelixHttpInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheFelixHttpInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.felix.http",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheFelixHttpInfo> orgApacheFelixHttp(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.http.host", required = false) String orgApacheFelixHttpHost,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.http.enable", required = false) Boolean orgApacheFelixHttpEnable,@ApiParam(value = "") @Valid @RequestParam(value = "org.osgi.service.http.port", required = false) Integer orgOsgiServiceHttpPort,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.http.timeout", required = false) Integer orgApacheFelixHttpTimeout,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.https.enable", required = false) Boolean orgApacheFelixHttpsEnable,@ApiParam(value = "") @Valid @RequestParam(value = "org.osgi.service.http.port.secure", required = false) Integer orgOsgiServiceHttpPortSecure,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.https.keystore", required = false) String orgApacheFelixHttpsKeystore,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.https.keystore.password", required = false) String orgApacheFelixHttpsKeystorePassword,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.https.keystore.key.password", required = false) String orgApacheFelixHttpsKeystoreKeyPassword,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.https.truststore", required = false) String orgApacheFelixHttpsTruststore,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.https.truststore.password", required = false) String orgApacheFelixHttpsTruststorePassword,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.https.clientcertificate", required = false) String orgApacheFelixHttpsClientcertificate,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.http.context_path", required = false) String orgApacheFelixHttpContextPath,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.http.mbeans", required = false) Boolean orgApacheFelixHttpMbeans,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.http.session.timeout", required = false) Integer orgApacheFelixHttpSessionTimeout,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.http.jetty.threadpool.max", required = false) Integer orgApacheFelixHttpJettyThreadpoolMax,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.http.jetty.acceptors", required = false) Integer orgApacheFelixHttpJettyAcceptors,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.http.jetty.selectors", required = false) Integer orgApacheFelixHttpJettySelectors,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.http.jetty.headerBufferSize", required = false) Integer orgApacheFelixHttpJettyHeaderBufferSize,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.http.jetty.requestBufferSize", required = false) Integer orgApacheFelixHttpJettyRequestBufferSize,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.http.jetty.responseBufferSize", required = false) Integer orgApacheFelixHttpJettyResponseBufferSize,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.http.jetty.maxFormSize", required = false) Integer orgApacheFelixHttpJettyMaxFormSize,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.http.path_exclusions", required = false) List<String> orgApacheFelixHttpPathExclusions,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.https.jetty.ciphersuites.excluded", required = false) List<String> orgApacheFelixHttpsJettyCiphersuitesExcluded,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.https.jetty.ciphersuites.included", required = false) List<String> orgApacheFelixHttpsJettyCiphersuitesIncluded,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.http.jetty.sendServerHeader", required = false) Boolean orgApacheFelixHttpJettySendServerHeader,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.https.jetty.protocols.included", required = false) List<String> orgApacheFelixHttpsJettyProtocolsIncluded,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.https.jetty.protocols.excluded", required = false) List<String> orgApacheFelixHttpsJettyProtocolsExcluded,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.proxy.load.balancer.connection.enable", required = false) Boolean orgApacheFelixProxyLoadBalancerConnectionEnable,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.https.jetty.renegotiateAllowed", required = false) Boolean orgApacheFelixHttpsJettyRenegotiateAllowed,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.https.jetty.session.cookie.httpOnly", required = false) Boolean orgApacheFelixHttpsJettySessionCookieHttpOnly,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.https.jetty.session.cookie.secure", required = false) Boolean orgApacheFelixHttpsJettySessionCookieSecure,@ApiParam(value = "") @Valid @RequestParam(value = "org.eclipse.jetty.servlet.SessionIdPathParameterName", required = false) String orgEclipseJettyServletSessionIdPathParameterName,@ApiParam(value = "") @Valid @RequestParam(value = "org.eclipse.jetty.servlet.CheckingRemoteSessionIdEncoding", required = false) Boolean orgEclipseJettyServletCheckingRemoteSessionIdEncoding,@ApiParam(value = "") @Valid @RequestParam(value = "org.eclipse.jetty.servlet.SessionCookie", required = false) String orgEclipseJettyServletSessionCookie,@ApiParam(value = "") @Valid @RequestParam(value = "org.eclipse.jetty.servlet.SessionDomain", required = false) String orgEclipseJettyServletSessionDomain,@ApiParam(value = "") @Valid @RequestParam(value = "org.eclipse.jetty.servlet.SessionPath", required = false) String orgEclipseJettyServletSessionPath,@ApiParam(value = "") @Valid @RequestParam(value = "org.eclipse.jetty.servlet.MaxAge", required = false) Integer orgEclipseJettyServletMaxAge,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.http.name", required = false) String orgApacheFelixHttpName,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.jetty.gziphandler.enable", required = false) Boolean orgApacheFelixJettyGziphandlerEnable,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.jetty.gzip.minGzipSize", required = false) Integer orgApacheFelixJettyGzipMinGzipSize,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.jetty.gzip.compressionLevel", required = false) Integer orgApacheFelixJettyGzipCompressionLevel,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.jetty.gzip.inflateBufferSize", required = false) Integer orgApacheFelixJettyGzipInflateBufferSize,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.jetty.gzip.syncFlush", required = false) Boolean orgApacheFelixJettyGzipSyncFlush,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.jetty.gzip.excludedUserAgents", required = false) List<String> orgApacheFelixJettyGzipExcludedUserAgents,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.jetty.gzip.includedMethods", required = false) List<String> orgApacheFelixJettyGzipIncludedMethods,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.jetty.gzip.excludedMethods", required = false) List<String> orgApacheFelixJettyGzipExcludedMethods,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.jetty.gzip.includedPaths", required = false) List<String> orgApacheFelixJettyGzipIncludedPaths,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.jetty.gzip.excludedPaths", required = false) List<String> orgApacheFelixJettyGzipExcludedPaths,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.jetty.gzip.includedMimeTypes", required = false) List<String> orgApacheFelixJettyGzipIncludedMimeTypes,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.jetty.gzip.excludedMimeTypes", required = false) List<String> orgApacheFelixJettyGzipExcludedMimeTypes,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.http.session.invalidate", required = false) Boolean orgApacheFelixHttpSessionInvalidate,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.http.session.uniqueid", required = false) Boolean orgApacheFelixHttpSessionUniqueid) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"org.apache.felix.http.jetty.sendServerHeader\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"org.apache.felix.jetty.gzip.includedPaths\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"org.apache.felix.http.enable\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"org.osgi.service.http.port\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"org.apache.felix.http.jetty.selectors\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"org.apache.felix.http.jetty.maxFormSize\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"org.apache.felix.jetty.gzip.minGzipSize\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"org.apache.felix.jetty.gzip.compressionLevel\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"org.apache.felix.http.host\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.felix.http.session.timeout\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"org.apache.felix.jetty.gziphandler.enable\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"org.apache.felix.https.truststore.password\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.eclipse.jetty.servlet.SessionIdPathParameterName\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.felix.http.timeout\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"org.eclipse.jetty.servlet.SessionCookie\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.felix.jetty.gzip.inflateBufferSize\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"org.apache.felix.jetty.gzip.includedMimeTypes\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"org.apache.felix.jetty.gzip.includedMethods\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"org.apache.felix.jetty.gzip.excludedMimeTypes\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"org.apache.felix.http.jetty.headerBufferSize\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"org.apache.felix.https.jetty.ciphersuites.excluded\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"org.apache.felix.https.truststore\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.felix.jetty.gzip.excludedMethods\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"org.apache.felix.https.keystore.password\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.felix.http.mbeans\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"org.apache.felix.jetty.gzip.excludedPaths\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"org.apache.felix.http.context_path\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.felix.http.session.invalidate\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"org.apache.felix.https.jetty.ciphersuites.included\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"org.apache.felix.http.session.uniqueid\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"org.eclipse.jetty.servlet.SessionDomain\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.felix.http.jetty.responseBufferSize\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"org.apache.felix.http.path_exclusions\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"org.eclipse.jetty.servlet.MaxAge\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"org.apache.felix.http.jetty.threadpool.max\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"org.osgi.service.http.port.secure\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"org.apache.felix.jetty.gzip.excludedUserAgents\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"org.apache.felix.http.jetty.requestBufferSize\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"org.apache.felix.https.enable\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"org.apache.felix.https.jetty.session.cookie.httpOnly\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"org.apache.felix.https.keystore.key.password\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.felix.http.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.felix.jetty.gzip.syncFlush\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"org.eclipse.jetty.servlet.CheckingRemoteSessionIdEncoding\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"org.apache.felix.https.jetty.protocols.excluded\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"org.eclipse.jetty.servlet.SessionPath\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.felix.https.keystore\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.felix.http.jetty.acceptors\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"org.apache.felix.https.jetty.renegotiateAllowed\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"org.apache.felix.https.jetty.session.cookie.secure\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"org.apache.felix.https.clientcertificate\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"org.apache.felix.proxy.load.balancer.connection.enable\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"org.apache.felix.https.jetty.protocols.included\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheFelixHttpSslfilterSslFilter", notes = "", response = OrgApacheFelixHttpSslfilterSslFilterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheFelixHttpSslfilterSslFilterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.felix.http.sslfilter.SslFilter",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheFelixHttpSslfilterSslFilterInfo> orgApacheFelixHttpSslfilterSslFilter(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "ssl-forward.header", required = false) String sslForwardHeader,@ApiParam(value = "") @Valid @RequestParam(value = "ssl-forward.value", required = false) String sslForwardValue,@ApiParam(value = "") @Valid @RequestParam(value = "ssl-forward-cert.header", required = false) String sslForwardCertHeader,@ApiParam(value = "") @Valid @RequestParam(value = "rewrite.absolute.urls", required = false) Boolean rewriteAbsoluteUrls) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"ssl-forward.value\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"ssl-forward-cert.header\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"ssl-forward.header\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"rewrite.absolute.urls\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheFelixJaasConfigurationFactory", notes = "", response = OrgApacheFelixJaasConfigurationFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheFelixJaasConfigurationFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.felix.jaas.Configuration.factory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheFelixJaasConfigurationFactoryInfo> orgApacheFelixJaasConfigurationFactory(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "jaas.controlFlag", required = false) String jaasControlFlag,@ApiParam(value = "") @Valid @RequestParam(value = "jaas.ranking", required = false) Integer jaasRanking,@ApiParam(value = "") @Valid @RequestParam(value = "jaas.realmName", required = false) String jaasRealmName,@ApiParam(value = "") @Valid @RequestParam(value = "jaas.classname", required = false) String jaasClassname,@ApiParam(value = "") @Valid @RequestParam(value = "jaas.options", required = false) List<String> jaasOptions) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"jaas.controlFlag\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"jaas.realmName\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"jaas.ranking\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"jaas.options\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"jaas.classname\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheFelixJaasConfigurationSpi", notes = "", response = OrgApacheFelixJaasConfigurationSpiInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheFelixJaasConfigurationSpiInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.felix.jaas.ConfigurationSpi",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheFelixJaasConfigurationSpiInfo> orgApacheFelixJaasConfigurationSpi(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "jaas.defaultRealmName", required = false) String jaasDefaultRealmName,@ApiParam(value = "") @Valid @RequestParam(value = "jaas.configProviderName", required = false) String jaasConfigProviderName,@ApiParam(value = "") @Valid @RequestParam(value = "jaas.globalConfigPolicy", required = false) String jaasGlobalConfigPolicy) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"jaas.configProviderName\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"jaas.globalConfigPolicy\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"jaas.defaultRealmName\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheFelixScrScrService", notes = "", response = OrgApacheFelixScrScrServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheFelixScrScrServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.felix.scr.ScrService",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheFelixScrScrServiceInfo> orgApacheFelixScrScrService(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "ds.loglevel", required = false) Integer dsLoglevel,@ApiParam(value = "") @Valid @RequestParam(value = "ds.factory.enabled", required = false) Boolean dsFactoryEnabled,@ApiParam(value = "") @Valid @RequestParam(value = "ds.delayed.keepInstances", required = false) Boolean dsDelayedKeepInstances,@ApiParam(value = "") @Valid @RequestParam(value = "ds.lock.timeout.milliseconds", required = false) Integer dsLockTimeoutMilliseconds,@ApiParam(value = "") @Valid @RequestParam(value = "ds.stop.timeout.milliseconds", required = false) Integer dsStopTimeoutMilliseconds,@ApiParam(value = "") @Valid @RequestParam(value = "ds.global.extender", required = false) Boolean dsGlobalExtender) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"ds.global.extender\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"ds.factory.enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"ds.delayed.keepInstances\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"ds.loglevel\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"ds.lock.timeout.milliseconds\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"ds.stop.timeout.milliseconds\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheFelixSystemreadyImplComponentsCheck", notes = "", response = OrgApacheFelixSystemreadyImplComponentsCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheFelixSystemreadyImplComponentsCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.felix.systemready.impl.ComponentsCheck",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheFelixSystemreadyImplComponentsCheckInfo> orgApacheFelixSystemreadyImplComponentsCheck(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "components.list", required = false) List<String> componentsList,@ApiParam(value = "") @Valid @RequestParam(value = "type", required = false) String type) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"components.list\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"type\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheFelixSystemreadyImplFrameworkStartCheck", notes = "", response = OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.felix.systemready.impl.FrameworkStartCheck",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo> orgApacheFelixSystemreadyImplFrameworkStartCheck(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "timeout", required = false) Integer timeout,@ApiParam(value = "") @Valid @RequestParam(value = "target.start.level", required = false) Integer targetStartLevel,@ApiParam(value = "") @Valid @RequestParam(value = "target.start.level.prop.name", required = false) String targetStartLevelPropName,@ApiParam(value = "") @Valid @RequestParam(value = "type", required = false) String type) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"target.start.level\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"target.start.level.prop.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"type\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"timeout\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheFelixSystemreadyImplServicesCheck", notes = "", response = OrgApacheFelixSystemreadyImplServicesCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheFelixSystemreadyImplServicesCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.felix.systemready.impl.ServicesCheck",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheFelixSystemreadyImplServicesCheckInfo> orgApacheFelixSystemreadyImplServicesCheck(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "services.list", required = false) List<String> servicesList,@ApiParam(value = "") @Valid @RequestParam(value = "type", required = false) String type) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"services.list\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"type\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheFelixSystemreadyImplServletSystemAliveServlet", notes = "", response = OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemAliveServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo> orgApacheFelixSystemreadyImplServletSystemAliveServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "osgi.http.whiteboard.servlet.pattern", required = false) String osgiHttpWhiteboardServletPattern,@ApiParam(value = "") @Valid @RequestParam(value = "osgi.http.whiteboard.context.select", required = false) String osgiHttpWhiteboardContextSelect) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"osgi.http.whiteboard.servlet.pattern\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"osgi.http.whiteboard.context.select\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheFelixSystemreadyImplServletSystemReadyServlet", notes = "", response = OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemReadyServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo> orgApacheFelixSystemreadyImplServletSystemReadyServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "osgi.http.whiteboard.servlet.pattern", required = false) String osgiHttpWhiteboardServletPattern,@ApiParam(value = "") @Valid @RequestParam(value = "osgi.http.whiteboard.context.select", required = false) String osgiHttpWhiteboardContextSelect) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"osgi.http.whiteboard.servlet.pattern\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"osgi.http.whiteboard.context.select\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheFelixSystemreadySystemReadyMonitor", notes = "", response = OrgApacheFelixSystemreadySystemReadyMonitorInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheFelixSystemreadySystemReadyMonitorInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.felix.systemready.SystemReadyMonitor",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheFelixSystemreadySystemReadyMonitorInfo> orgApacheFelixSystemreadySystemReadyMonitor(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "poll.interval", required = false) Integer pollInterval) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"poll.interval\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheFelixWebconsoleInternalServletOsgiManager", notes = "", response = OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.felix.webconsole.internal.servlet.OsgiManager",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo> orgApacheFelixWebconsoleInternalServletOsgiManager(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "manager.root", required = false) String managerRoot,@ApiParam(value = "") @Valid @RequestParam(value = "http.service.filter", required = false) String httpServiceFilter,@ApiParam(value = "") @Valid @RequestParam(value = "default.render", required = false) String defaultRender,@ApiParam(value = "") @Valid @RequestParam(value = "realm", required = false) String realm,@ApiParam(value = "") @Valid @RequestParam(value = "username", required = false) String username,@ApiParam(value = "") @Valid @RequestParam(value = "password", required = false) String password,@ApiParam(value = "") @Valid @RequestParam(value = "category", required = false) String category,@ApiParam(value = "") @Valid @RequestParam(value = "locale", required = false) String locale,@ApiParam(value = "") @Valid @RequestParam(value = "loglevel", required = false) Integer loglevel,@ApiParam(value = "") @Valid @RequestParam(value = "plugins", required = false) String plugins) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"http.service.filter\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"password\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"default.render\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"plugins\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"loglevel\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"realm\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"category\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"locale\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"manager.root\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"username\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheFelixWebconsolePluginsEventInternalPluginServlet", notes = "", response = OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.felix.webconsole.plugins.event.internal.PluginServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo> orgApacheFelixWebconsolePluginsEventInternalPluginServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "max.size", required = false) Integer maxSize) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"max.size\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo", notes = "", response = OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.felix.webconsole.plugins.memoryusage.internal.MemoryUsageConfigurator",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo> orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "felix.memoryusage.dump.threshold", required = false) Integer felixMemoryusageDumpThreshold,@ApiParam(value = "") @Valid @RequestParam(value = "felix.memoryusage.dump.interval", required = false) Integer felixMemoryusageDumpInterval,@ApiParam(value = "") @Valid @RequestParam(value = "felix.memoryusage.dump.location", required = false) String felixMemoryusageDumpLocation) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"felix.memoryusage.dump.interval\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"felix.memoryusage.dump.location\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"felix.memoryusage.dump.threshold\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheHttpProxyconfigurator", notes = "", response = OrgApacheHttpProxyconfiguratorInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheHttpProxyconfiguratorInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.http.proxyconfigurator",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheHttpProxyconfiguratorInfo> orgApacheHttpProxyconfigurator(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "proxy.enabled", required = false) Boolean proxyEnabled,@ApiParam(value = "") @Valid @RequestParam(value = "proxy.host", required = false) String proxyHost,@ApiParam(value = "") @Valid @RequestParam(value = "proxy.port", required = false) Integer proxyPort,@ApiParam(value = "") @Valid @RequestParam(value = "proxy.user", required = false) String proxyUser,@ApiParam(value = "") @Valid @RequestParam(value = "proxy.password", required = false) String proxyPassword,@ApiParam(value = "") @Valid @RequestParam(value = "proxy.exceptions", required = false) List<String> proxyExceptions) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"proxy.port\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"proxy.exceptions\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"proxy.enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"proxy.host\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"proxy.user\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"proxy.password\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider", notes = "", response = OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreTextProviderService",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo> orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "dir", required = false) String dir) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"dir\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore", notes = "", response = OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.FileDataStore",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo> orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "path", required = false) String path) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"path\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService", notes = "", response = OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreService",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo> orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "mongouri", required = false) String mongouri,@ApiParam(value = "") @Valid @RequestParam(value = "db", required = false) String db,@ApiParam(value = "") @Valid @RequestParam(value = "socketKeepAlive", required = false) Boolean socketKeepAlive,@ApiParam(value = "") @Valid @RequestParam(value = "cache", required = false) Integer cache,@ApiParam(value = "") @Valid @RequestParam(value = "nodeCachePercentage", required = false) Integer nodeCachePercentage,@ApiParam(value = "") @Valid @RequestParam(value = "prevDocCachePercentage", required = false) Integer prevDocCachePercentage,@ApiParam(value = "") @Valid @RequestParam(value = "childrenCachePercentage", required = false) Integer childrenCachePercentage,@ApiParam(value = "") @Valid @RequestParam(value = "diffCachePercentage", required = false) Integer diffCachePercentage,@ApiParam(value = "") @Valid @RequestParam(value = "cacheSegmentCount", required = false) Integer cacheSegmentCount,@ApiParam(value = "") @Valid @RequestParam(value = "cacheStackMoveDistance", required = false) Integer cacheStackMoveDistance,@ApiParam(value = "") @Valid @RequestParam(value = "blobCacheSize", required = false) Integer blobCacheSize,@ApiParam(value = "") @Valid @RequestParam(value = "persistentCache", required = false) String persistentCache,@ApiParam(value = "") @Valid @RequestParam(value = "journalCache", required = false) String journalCache,@ApiParam(value = "") @Valid @RequestParam(value = "customBlobStore", required = false) Boolean customBlobStore,@ApiParam(value = "") @Valid @RequestParam(value = "journalGCInterval", required = false) Integer journalGCInterval,@ApiParam(value = "") @Valid @RequestParam(value = "journalGCMaxAge", required = false) Integer journalGCMaxAge,@ApiParam(value = "") @Valid @RequestParam(value = "prefetchExternalChanges", required = false) Boolean prefetchExternalChanges,@ApiParam(value = "") @Valid @RequestParam(value = "role", required = false) String role,@ApiParam(value = "") @Valid @RequestParam(value = "versionGcMaxAgeInSecs", required = false) Integer versionGcMaxAgeInSecs,@ApiParam(value = "") @Valid @RequestParam(value = "versionGCExpression", required = false) String versionGCExpression,@ApiParam(value = "") @Valid @RequestParam(value = "versionGCTimeLimitInSecs", required = false) Integer versionGCTimeLimitInSecs,@ApiParam(value = "") @Valid @RequestParam(value = "blobGcMaxAgeInSecs", required = false) Integer blobGcMaxAgeInSecs,@ApiParam(value = "") @Valid @RequestParam(value = "blobTrackSnapshotIntervalInSecs", required = false) Integer blobTrackSnapshotIntervalInSecs,@ApiParam(value = "") @Valid @RequestParam(value = "repository.home", required = false) String repositoryHome,@ApiParam(value = "") @Valid @RequestParam(value = "maxReplicationLagInSecs", required = false) Integer maxReplicationLagInSecs,@ApiParam(value = "") @Valid @RequestParam(value = "documentStoreType", required = false) String documentStoreType,@ApiParam(value = "") @Valid @RequestParam(value = "bundlingDisabled", required = false) Boolean bundlingDisabled,@ApiParam(value = "") @Valid @RequestParam(value = "updateLimit", required = false) Integer updateLimit,@ApiParam(value = "") @Valid @RequestParam(value = "persistentCacheIncludes", required = false) List<String> persistentCacheIncludes,@ApiParam(value = "") @Valid @RequestParam(value = "leaseCheckMode", required = false) String leaseCheckMode) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"prefetchExternalChanges\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"role\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"cacheSegmentCount\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"versionGCExpression\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"repository.home\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"journalGCMaxAge\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"persistentCacheIncludes\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"prevDocCachePercentage\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"maxReplicationLagInSecs\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"socketKeepAlive\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"blobCacheSize\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"blobTrackSnapshotIntervalInSecs\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"blobGcMaxAgeInSecs\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"childrenCachePercentage\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"nodeCachePercentage\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cache\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"journalGCInterval\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"journalCache\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"leaseCheckMode\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"customBlobStore\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"documentStoreType\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"versionGcMaxAgeInSecs\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"bundlingDisabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"persistentCache\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"diffCachePercentage\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"mongouri\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"cacheStackMoveDistance\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"updateLimit\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"versionGCTimeLimitInSecs\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"db\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre", notes = "", response = OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreServicePreset",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo> orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "persistentCacheIncludes", required = false) List<String> persistentCacheIncludes) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"persistentCacheIncludes\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac", notes = "", response = OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.secondary.SecondaryStoreCacheService",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo> orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "includedPaths", required = false) List<String> includedPaths,@ApiParam(value = "") @Valid @RequestParam(value = "enableAsyncObserver", required = false) Boolean enableAsyncObserver,@ApiParam(value = "") @Valid @RequestParam(value = "observerQueueSize", required = false) Integer observerQueueSize) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"enableAsyncObserver\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"observerQueueSize\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"includedPaths\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheJackrabbitOakPluginsIndexAsyncIndexerService", notes = "", response = OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.AsyncIndexerService",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo> orgApacheJackrabbitOakPluginsIndexAsyncIndexerService(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "asyncConfigs", required = false) List<String> asyncConfigs,@ApiParam(value = "") @Valid @RequestParam(value = "leaseTimeOutMinutes", required = false) Integer leaseTimeOutMinutes,@ApiParam(value = "") @Valid @RequestParam(value = "failingIndexTimeoutSeconds", required = false) Integer failingIndexTimeoutSeconds,@ApiParam(value = "") @Valid @RequestParam(value = "errorWarnIntervalSeconds", required = false) Integer errorWarnIntervalSeconds) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"errorWarnIntervalSeconds\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"asyncConfigs\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"failingIndexTimeoutSeconds\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"leaseTimeOutMinutes\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ", notes = "", response = OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexProviderService",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo> orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "disabled", required = false) Boolean disabled,@ApiParam(value = "") @Valid @RequestParam(value = "debug", required = false) Boolean debug,@ApiParam(value = "") @Valid @RequestParam(value = "localIndexDir", required = false) String localIndexDir,@ApiParam(value = "") @Valid @RequestParam(value = "enableOpenIndexAsync", required = false) Boolean enableOpenIndexAsync,@ApiParam(value = "") @Valid @RequestParam(value = "threadPoolSize", required = false) Integer threadPoolSize,@ApiParam(value = "") @Valid @RequestParam(value = "prefetchIndexFiles", required = false) Boolean prefetchIndexFiles,@ApiParam(value = "") @Valid @RequestParam(value = "extractedTextCacheSizeInMB", required = false) Integer extractedTextCacheSizeInMB,@ApiParam(value = "") @Valid @RequestParam(value = "extractedTextCacheExpiryInSecs", required = false) Integer extractedTextCacheExpiryInSecs,@ApiParam(value = "") @Valid @RequestParam(value = "alwaysUsePreExtractedCache", required = false) Boolean alwaysUsePreExtractedCache,@ApiParam(value = "") @Valid @RequestParam(value = "booleanClauseLimit", required = false) Integer booleanClauseLimit,@ApiParam(value = "") @Valid @RequestParam(value = "enableHybridIndexing", required = false) Boolean enableHybridIndexing,@ApiParam(value = "") @Valid @RequestParam(value = "hybridQueueSize", required = false) Integer hybridQueueSize,@ApiParam(value = "") @Valid @RequestParam(value = "disableStoredIndexDefinition", required = false) Boolean disableStoredIndexDefinition,@ApiParam(value = "") @Valid @RequestParam(value = "deletedBlobsCollectionEnabled", required = false) Boolean deletedBlobsCollectionEnabled,@ApiParam(value = "") @Valid @RequestParam(value = "propIndexCleanerIntervalInSecs", required = false) Integer propIndexCleanerIntervalInSecs,@ApiParam(value = "") @Valid @RequestParam(value = "enableSingleBlobIndexFiles", required = false) Boolean enableSingleBlobIndexFiles) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"additionalProperties\" : \"additionalProperties\",  \"title\" : \"title\",  \"properties\" : {    \"alwaysUsePreExtractedCache\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"enableSingleBlobIndexFiles\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"debug\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"localIndexDir\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"enableHybridIndexing\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"propIndexCleanerIntervalInSecs\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"hybridQueueSize\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"disableStoredIndexDefinition\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"extractedTextCacheSizeInMB\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"threadPoolSize\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"deletedBlobsCollectionEnabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"extractedTextCacheExpiryInSecs\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"disabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"booleanClauseLimit\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"prefetchIndexFiles\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"enableOpenIndexAsync\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo", notes = "", response = OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.EmbeddedSolrServerConfigurationProvider",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo> orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "solr.home.path", required = false) String solrHomePath,@ApiParam(value = "") @Valid @RequestParam(value = "solr.core.name", required = false) String solrCoreName) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"solr.home.path\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"solr.core.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers", notes = "", response = OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.NodeStateSolrServersObserverService",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo> orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "enabled", required = false) Boolean enabled) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration", notes = "", response = OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.OakSolrConfigurationProviderService",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo> orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "path.desc.field", required = false) String pathDescField,@ApiParam(value = "") @Valid @RequestParam(value = "path.child.field", required = false) String pathChildField,@ApiParam(value = "") @Valid @RequestParam(value = "path.parent.field", required = false) String pathParentField,@ApiParam(value = "") @Valid @RequestParam(value = "path.exact.field", required = false) String pathExactField,@ApiParam(value = "") @Valid @RequestParam(value = "catch.all.field", required = false) String catchAllField,@ApiParam(value = "") @Valid @RequestParam(value = "collapsed.path.field", required = false) String collapsedPathField,@ApiParam(value = "") @Valid @RequestParam(value = "path.depth.field", required = false) String pathDepthField,@ApiParam(value = "") @Valid @RequestParam(value = "commit.policy", required = false) String commitPolicy,@ApiParam(value = "") @Valid @RequestParam(value = "rows", required = false) Integer rows,@ApiParam(value = "") @Valid @RequestParam(value = "path.restrictions", required = false) Boolean pathRestrictions,@ApiParam(value = "") @Valid @RequestParam(value = "property.restrictions", required = false) Boolean propertyRestrictions,@ApiParam(value = "") @Valid @RequestParam(value = "primarytypes.restrictions", required = false) Boolean primarytypesRestrictions,@ApiParam(value = "") @Valid @RequestParam(value = "ignored.properties", required = false) List<String> ignoredProperties,@ApiParam(value = "") @Valid @RequestParam(value = "used.properties", required = false) List<String> usedProperties,@ApiParam(value = "") @Valid @RequestParam(value = "type.mappings", required = false) List<String> typeMappings,@ApiParam(value = "") @Valid @RequestParam(value = "property.mappings", required = false) List<String> propertyMappings,@ApiParam(value = "") @Valid @RequestParam(value = "collapse.jcrcontent.nodes", required = false) Boolean collapseJcrcontentNodes) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"used.properties\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"path.parent.field\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"property.restrictions\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"collapsed.path.field\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"path.restrictions\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"path.exact.field\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"property.mappings\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"rows\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"collapse.jcrcontent.nodes\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"path.desc.field\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"path.child.field\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"catch.all.field\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"ignored.properties\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"commit.policy\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"primarytypes.restrictions\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"type.mappings\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"path.depth.field\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf", notes = "", response = OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.RemoteSolrServerConfigurationProvider",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo> orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "solr.http.url", required = false) String solrHttpUrl,@ApiParam(value = "") @Valid @RequestParam(value = "solr.zk.host", required = false) String solrZkHost,@ApiParam(value = "") @Valid @RequestParam(value = "solr.collection", required = false) String solrCollection,@ApiParam(value = "") @Valid @RequestParam(value = "solr.socket.timeout", required = false) Integer solrSocketTimeout,@ApiParam(value = "") @Valid @RequestParam(value = "solr.connection.timeout", required = false) Integer solrConnectionTimeout,@ApiParam(value = "") @Valid @RequestParam(value = "solr.shards.no", required = false) Integer solrShardsNo,@ApiParam(value = "") @Valid @RequestParam(value = "solr.replication.factor", required = false) Integer solrReplicationFactor,@ApiParam(value = "") @Valid @RequestParam(value = "solr.conf.dir", required = false) String solrConfDir) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"solr.zk.host\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"solr.socket.timeout\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"solr.conf.dir\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"solr.collection\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"solr.connection.timeout\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"solr.replication.factor\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"solr.http.url\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"solr.shards.no\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid", notes = "", response = OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrQueryIndexProviderService",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo> orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "query.aggregation", required = false) Boolean queryAggregation) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"query.aggregation\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe", notes = "", response = OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrServerProviderService",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo> orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "server.type", required = false) String serverType) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"server.type\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory", notes = "", response = OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.metric.StatisticsProviderFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo> orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "providerType", required = false) String providerType) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"providerType\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheJackrabbitOakPluginsObservationChangeCollectorProvider", notes = "", response = OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.observation.ChangeCollectorProvider",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo> orgApacheJackrabbitOakPluginsObservationChangeCollectorProvider(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "maxItems", required = false) Integer maxItems,@ApiParam(value = "") @Valid @RequestParam(value = "maxPathDepth", required = false) Integer maxPathDepth,@ApiParam(value = "") @Valid @RequestParam(value = "enabled", required = false) Boolean enabled) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"maxItems\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"maxPathDepth\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheJackrabbitOakQueryQueryEngineSettingsService", notes = "", response = OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.jackrabbit.oak.query.QueryEngineSettingsService",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo> orgApacheJackrabbitOakQueryQueryEngineSettingsService(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "queryLimitInMemory", required = false) Integer queryLimitInMemory,@ApiParam(value = "") @Valid @RequestParam(value = "queryLimitReads", required = false) Integer queryLimitReads,@ApiParam(value = "") @Valid @RequestParam(value = "queryFailTraversal", required = false) Boolean queryFailTraversal,@ApiParam(value = "") @Valid @RequestParam(value = "fastQuerySize", required = false) Boolean fastQuerySize) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"queryLimitInMemory\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"queryLimitReads\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"queryFailTraversal\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"fastQuerySize\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig", notes = "", response = OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.AuthenticationConfigurationImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo> orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.jackrabbit.oak.authentication.appName", required = false) String orgApacheJackrabbitOakAuthenticationAppName,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.jackrabbit.oak.authentication.configSpiName", required = false) String orgApacheJackrabbitOakAuthenticationConfigSpiName) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"org.apache.jackrabbit.oak.authentication.configSpiName\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.jackrabbit.oak.authentication.appName\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti", notes = "", response = OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.ldap.impl.LdapIdentityProvider",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo> orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "provider.name", required = false) String providerName,@ApiParam(value = "") @Valid @RequestParam(value = "host.name", required = false) String hostName,@ApiParam(value = "") @Valid @RequestParam(value = "host.port", required = false) Integer hostPort,@ApiParam(value = "") @Valid @RequestParam(value = "host.ssl", required = false) Boolean hostSsl,@ApiParam(value = "") @Valid @RequestParam(value = "host.tls", required = false) Boolean hostTls,@ApiParam(value = "") @Valid @RequestParam(value = "host.noCertCheck", required = false) Boolean hostNoCertCheck,@ApiParam(value = "") @Valid @RequestParam(value = "bind.dn", required = false) String bindDn,@ApiParam(value = "") @Valid @RequestParam(value = "bind.password", required = false) String bindPassword,@ApiParam(value = "") @Valid @RequestParam(value = "searchTimeout", required = false) String searchTimeout,@ApiParam(value = "") @Valid @RequestParam(value = "adminPool.maxActive", required = false) Integer adminPoolMaxActive,@ApiParam(value = "") @Valid @RequestParam(value = "adminPool.lookupOnValidate", required = false) Boolean adminPoolLookupOnValidate,@ApiParam(value = "") @Valid @RequestParam(value = "userPool.maxActive", required = false) Integer userPoolMaxActive,@ApiParam(value = "") @Valid @RequestParam(value = "userPool.lookupOnValidate", required = false) Boolean userPoolLookupOnValidate,@ApiParam(value = "") @Valid @RequestParam(value = "user.baseDN", required = false) String userBaseDN,@ApiParam(value = "") @Valid @RequestParam(value = "user.objectclass", required = false) List<String> userObjectclass,@ApiParam(value = "") @Valid @RequestParam(value = "user.idAttribute", required = false) String userIdAttribute,@ApiParam(value = "") @Valid @RequestParam(value = "user.extraFilter", required = false) String userExtraFilter,@ApiParam(value = "") @Valid @RequestParam(value = "user.makeDnPath", required = false) Boolean userMakeDnPath,@ApiParam(value = "") @Valid @RequestParam(value = "group.baseDN", required = false) String groupBaseDN,@ApiParam(value = "") @Valid @RequestParam(value = "group.objectclass", required = false) List<String> groupObjectclass,@ApiParam(value = "") @Valid @RequestParam(value = "group.nameAttribute", required = false) String groupNameAttribute,@ApiParam(value = "") @Valid @RequestParam(value = "group.extraFilter", required = false) String groupExtraFilter,@ApiParam(value = "") @Valid @RequestParam(value = "group.makeDnPath", required = false) Boolean groupMakeDnPath,@ApiParam(value = "") @Valid @RequestParam(value = "group.memberAttribute", required = false) String groupMemberAttribute,@ApiParam(value = "") @Valid @RequestParam(value = "useUidForExtId", required = false) Boolean useUidForExtId,@ApiParam(value = "") @Valid @RequestParam(value = "customattributes", required = false) List<String> customattributes) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"host.ssl\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"group.objectclass\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"group.makeDnPath\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"host.port\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"customattributes\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"bind.dn\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"user.makeDnPath\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"adminPool.lookupOnValidate\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"host.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"group.extraFilter\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"user.extraFilter\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"user.objectclass\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"bind.password\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"group.memberAttribute\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"adminPool.maxActive\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"userPool.maxActive\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"user.idAttribute\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"userPool.lookupOnValidate\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"useUidForExtId\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"host.tls\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"user.baseDN\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"group.baseDN\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"provider.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"host.noCertCheck\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"group.nameAttribute\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"searchTimeout\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura", notes = "", response = OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.token.TokenConfigurationImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo> orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "tokenExpiration", required = false) String tokenExpiration,@ApiParam(value = "") @Valid @RequestParam(value = "tokenLength", required = false) String tokenLength,@ApiParam(value = "") @Valid @RequestParam(value = "tokenRefresh", required = false) Boolean tokenRefresh,@ApiParam(value = "") @Valid @RequestParam(value = "tokenCleanupThreshold", required = false) Integer tokenCleanupThreshold,@ApiParam(value = "") @Valid @RequestParam(value = "passwordHashAlgorithm", required = false) String passwordHashAlgorithm,@ApiParam(value = "") @Valid @RequestParam(value = "passwordHashIterations", required = false) Integer passwordHashIterations,@ApiParam(value = "") @Valid @RequestParam(value = "passwordSaltSize", required = false) Integer passwordSaltSize) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"passwordSaltSize\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"tokenCleanupThreshold\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"passwordHashIterations\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"tokenExpiration\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"tokenRefresh\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"tokenLength\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"passwordHashAlgorithm\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur", notes = "", response = OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.jackrabbit.oak.security.authorization.AuthorizationConfigurationImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo> orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "permissionsJr2", required = false) String permissionsJr2,@ApiParam(value = "") @Valid @RequestParam(value = "importBehavior", required = false) String importBehavior,@ApiParam(value = "") @Valid @RequestParam(value = "readPaths", required = false) List<String> readPaths,@ApiParam(value = "") @Valid @RequestParam(value = "administrativePrincipals", required = false) List<String> administrativePrincipals,@ApiParam(value = "") @Valid @RequestParam(value = "configurationRanking", required = false) Integer configurationRanking) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"permissionsJr2\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"importBehavior\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"administrativePrincipals\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"configurationRanking\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"readPaths\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati", notes = "", response = OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.jackrabbit.oak.security.internal.SecurityProviderRegistration",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo> orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "requiredServicePids", required = false) List<String> requiredServicePids,@ApiParam(value = "") @Valid @RequestParam(value = "authorizationCompositionType", required = false) String authorizationCompositionType) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"requiredServicePids\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"authorizationCompositionType\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName", notes = "", response = OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.jackrabbit.oak.security.user.RandomAuthorizableNodeName",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo> orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "length", required = false) Integer length) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"length\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheJackrabbitOakSecurityUserUserConfigurationImpl", notes = "", response = OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.jackrabbit.oak.security.user.UserConfigurationImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo> orgApacheJackrabbitOakSecurityUserUserConfigurationImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "usersPath", required = false) String usersPath,@ApiParam(value = "") @Valid @RequestParam(value = "groupsPath", required = false) String groupsPath,@ApiParam(value = "") @Valid @RequestParam(value = "systemRelativePath", required = false) String systemRelativePath,@ApiParam(value = "") @Valid @RequestParam(value = "defaultDepth", required = false) Integer defaultDepth,@ApiParam(value = "") @Valid @RequestParam(value = "importBehavior", required = false) String importBehavior,@ApiParam(value = "") @Valid @RequestParam(value = "passwordHashAlgorithm", required = false) String passwordHashAlgorithm,@ApiParam(value = "") @Valid @RequestParam(value = "passwordHashIterations", required = false) Integer passwordHashIterations,@ApiParam(value = "") @Valid @RequestParam(value = "passwordSaltSize", required = false) Integer passwordSaltSize,@ApiParam(value = "") @Valid @RequestParam(value = "omitAdminPw", required = false) Boolean omitAdminPw,@ApiParam(value = "") @Valid @RequestParam(value = "supportAutoSave", required = false) Boolean supportAutoSave,@ApiParam(value = "") @Valid @RequestParam(value = "passwordMaxAge", required = false) Integer passwordMaxAge,@ApiParam(value = "") @Valid @RequestParam(value = "initialPasswordChange", required = false) Boolean initialPasswordChange,@ApiParam(value = "") @Valid @RequestParam(value = "passwordHistorySize", required = false) Integer passwordHistorySize,@ApiParam(value = "") @Valid @RequestParam(value = "passwordExpiryForAdmin", required = false) Boolean passwordExpiryForAdmin,@ApiParam(value = "") @Valid @RequestParam(value = "cacheExpiration", required = false) Integer cacheExpiration,@ApiParam(value = "") @Valid @RequestParam(value = "enableRFC7613UsercaseMappedProfile", required = false) Boolean enableRFC7613UsercaseMappedProfile) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"passwordSaltSize\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"systemRelativePath\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"enableRFC7613UsercaseMappedProfile\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"groupsPath\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"passwordHashIterations\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cacheExpiration\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"usersPath\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"initialPasswordChange\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"passwordHistorySize\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"supportAutoSave\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"importBehavior\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"defaultDepth\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"passwordMaxAge\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"passwordHashAlgorithm\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"omitAdminPw\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"passwordExpiryForAdmin\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService", notes = "", response = OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.jackrabbit.oak.segment.azure.AzureSegmentStoreService",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo> orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "accountName", required = false) String accountName,@ApiParam(value = "") @Valid @RequestParam(value = "containerName", required = false) String containerName,@ApiParam(value = "") @Valid @RequestParam(value = "accessKey", required = false) String accessKey,@ApiParam(value = "") @Valid @RequestParam(value = "rootPath", required = false) String rootPath,@ApiParam(value = "") @Valid @RequestParam(value = "connectionURL", required = false) String connectionURL) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"accountName\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"accessKey\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"containerName\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"connectionURL\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"rootPath\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheJackrabbitOakSegmentSegmentNodeStoreFactory", notes = "", response = OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo> orgApacheJackrabbitOakSegmentSegmentNodeStoreFactory(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "repository.home", required = false) String repositoryHome,@ApiParam(value = "") @Valid @RequestParam(value = "tarmk.mode", required = false) String tarmkMode,@ApiParam(value = "") @Valid @RequestParam(value = "tarmk.size", required = false) Integer tarmkSize,@ApiParam(value = "") @Valid @RequestParam(value = "segmentCache.size", required = false) Integer segmentCacheSize,@ApiParam(value = "") @Valid @RequestParam(value = "stringCache.size", required = false) Integer stringCacheSize,@ApiParam(value = "") @Valid @RequestParam(value = "templateCache.size", required = false) Integer templateCacheSize,@ApiParam(value = "") @Valid @RequestParam(value = "stringDeduplicationCache.size", required = false) Integer stringDeduplicationCacheSize,@ApiParam(value = "") @Valid @RequestParam(value = "templateDeduplicationCache.size", required = false) Integer templateDeduplicationCacheSize,@ApiParam(value = "") @Valid @RequestParam(value = "nodeDeduplicationCache.size", required = false) Integer nodeDeduplicationCacheSize,@ApiParam(value = "") @Valid @RequestParam(value = "pauseCompaction", required = false) Boolean pauseCompaction,@ApiParam(value = "") @Valid @RequestParam(value = "compaction.retryCount", required = false) Integer compactionRetryCount,@ApiParam(value = "") @Valid @RequestParam(value = "compaction.force.timeout", required = false) Integer compactionForceTimeout,@ApiParam(value = "") @Valid @RequestParam(value = "compaction.sizeDeltaEstimation", required = false) Integer compactionSizeDeltaEstimation,@ApiParam(value = "") @Valid @RequestParam(value = "compaction.disableEstimation", required = false) Boolean compactionDisableEstimation,@ApiParam(value = "") @Valid @RequestParam(value = "compaction.retainedGenerations", required = false) Integer compactionRetainedGenerations,@ApiParam(value = "") @Valid @RequestParam(value = "compaction.memoryThreshold", required = false) Integer compactionMemoryThreshold,@ApiParam(value = "") @Valid @RequestParam(value = "compaction.progressLog", required = false) Integer compactionProgressLog,@ApiParam(value = "") @Valid @RequestParam(value = "standby", required = false) Boolean standby,@ApiParam(value = "") @Valid @RequestParam(value = "customBlobStore", required = false) Boolean customBlobStore,@ApiParam(value = "") @Valid @RequestParam(value = "customSegmentStore", required = false) Boolean customSegmentStore,@ApiParam(value = "") @Valid @RequestParam(value = "splitPersistence", required = false) Boolean splitPersistence,@ApiParam(value = "") @Valid @RequestParam(value = "repository.backup.dir", required = false) String repositoryBackupDir,@ApiParam(value = "") @Valid @RequestParam(value = "blobGcMaxAgeInSecs", required = false) Integer blobGcMaxAgeInSecs,@ApiParam(value = "") @Valid @RequestParam(value = "blobTrackSnapshotIntervalInSecs", required = false) Integer blobTrackSnapshotIntervalInSecs,@ApiParam(value = "") @Valid @RequestParam(value = "role", required = false) String role,@ApiParam(value = "") @Valid @RequestParam(value = "registerDescriptors", required = false) Boolean registerDescriptors,@ApiParam(value = "") @Valid @RequestParam(value = "dispatchChanges", required = false) Boolean dispatchChanges) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"compaction.force.timeout\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"role\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"templateCache.size\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"pauseCompaction\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"standby\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"splitPersistence\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"repository.home\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"customSegmentStore\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"dispatchChanges\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"segmentCache.size\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"registerDescriptors\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"stringDeduplicationCache.size\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"blobTrackSnapshotIntervalInSecs\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"tarmk.size\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"nodeDeduplicationCache.size\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"compaction.sizeDeltaEstimation\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"blobGcMaxAgeInSecs\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"repository.backup.dir\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"compaction.retryCount\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"customBlobStore\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"compaction.disableEstimation\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"compaction.progressLog\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"templateDeduplicationCache.size\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"compaction.memoryThreshold\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"stringCache.size\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"tarmk.mode\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"compaction.retainedGenerations\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService", notes = "", response = OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreMonitorService",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo> orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "commitsTrackerWriterGroups", required = false) List<String> commitsTrackerWriterGroups) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"commitsTrackerWriterGroups\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheJackrabbitOakSegmentSegmentNodeStoreService", notes = "", response = OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreService",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo> orgApacheJackrabbitOakSegmentSegmentNodeStoreService(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "repository.home", required = false) String repositoryHome,@ApiParam(value = "") @Valid @RequestParam(value = "tarmk.mode", required = false) String tarmkMode,@ApiParam(value = "") @Valid @RequestParam(value = "tarmk.size", required = false) Integer tarmkSize,@ApiParam(value = "") @Valid @RequestParam(value = "segmentCache.size", required = false) Integer segmentCacheSize,@ApiParam(value = "") @Valid @RequestParam(value = "stringCache.size", required = false) Integer stringCacheSize,@ApiParam(value = "") @Valid @RequestParam(value = "templateCache.size", required = false) Integer templateCacheSize,@ApiParam(value = "") @Valid @RequestParam(value = "stringDeduplicationCache.size", required = false) Integer stringDeduplicationCacheSize,@ApiParam(value = "") @Valid @RequestParam(value = "templateDeduplicationCache.size", required = false) Integer templateDeduplicationCacheSize,@ApiParam(value = "") @Valid @RequestParam(value = "nodeDeduplicationCache.size", required = false) Integer nodeDeduplicationCacheSize,@ApiParam(value = "") @Valid @RequestParam(value = "pauseCompaction", required = false) Boolean pauseCompaction,@ApiParam(value = "") @Valid @RequestParam(value = "compaction.retryCount", required = false) Integer compactionRetryCount,@ApiParam(value = "") @Valid @RequestParam(value = "compaction.force.timeout", required = false) Integer compactionForceTimeout,@ApiParam(value = "") @Valid @RequestParam(value = "compaction.sizeDeltaEstimation", required = false) Integer compactionSizeDeltaEstimation,@ApiParam(value = "") @Valid @RequestParam(value = "compaction.disableEstimation", required = false) Boolean compactionDisableEstimation,@ApiParam(value = "") @Valid @RequestParam(value = "compaction.retainedGenerations", required = false) Integer compactionRetainedGenerations,@ApiParam(value = "") @Valid @RequestParam(value = "compaction.memoryThreshold", required = false) Integer compactionMemoryThreshold,@ApiParam(value = "") @Valid @RequestParam(value = "compaction.progressLog", required = false) Integer compactionProgressLog,@ApiParam(value = "") @Valid @RequestParam(value = "standby", required = false) Boolean standby,@ApiParam(value = "") @Valid @RequestParam(value = "customBlobStore", required = false) Boolean customBlobStore,@ApiParam(value = "") @Valid @RequestParam(value = "customSegmentStore", required = false) Boolean customSegmentStore,@ApiParam(value = "") @Valid @RequestParam(value = "splitPersistence", required = false) Boolean splitPersistence,@ApiParam(value = "") @Valid @RequestParam(value = "repository.backup.dir", required = false) String repositoryBackupDir,@ApiParam(value = "") @Valid @RequestParam(value = "blobGcMaxAgeInSecs", required = false) Integer blobGcMaxAgeInSecs,@ApiParam(value = "") @Valid @RequestParam(value = "blobTrackSnapshotIntervalInSecs", required = false) Integer blobTrackSnapshotIntervalInSecs) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"additionalProperties\" : \"additionalProperties\",  \"title\" : \"title\",  \"properties\" : {    \"compaction.force.timeout\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"repository.backup.dir\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"templateCache.size\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"pauseCompaction\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"standby\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"splitPersistence\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"compaction.retryCount\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"customBlobStore\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"repository.home\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"customSegmentStore\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"compaction.disableEstimation\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"compaction.progressLog\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"segmentCache.size\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"templateDeduplicationCache.size\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"compaction.memoryThreshold\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"stringCache.size\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"stringDeduplicationCache.size\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"blobTrackSnapshotIntervalInSecs\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"tarmk.mode\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"tarmk.size\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"nodeDeduplicationCache.size\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"compaction.sizeDeltaEstimation\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"blobGcMaxAgeInSecs\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"compaction.retainedGenerations\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService", notes = "", response = OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.jackrabbit.oak.segment.standby.store.StandbyStoreService",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo> orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.installer.configuration.persist", required = false) Boolean orgApacheSlingInstallerConfigurationPersist,@ApiParam(value = "") @Valid @RequestParam(value = "mode", required = false) String mode,@ApiParam(value = "") @Valid @RequestParam(value = "port", required = false) Integer port,@ApiParam(value = "") @Valid @RequestParam(value = "primary.host", required = false) String primaryHost,@ApiParam(value = "") @Valid @RequestParam(value = "interval", required = false) Integer interval,@ApiParam(value = "") @Valid @RequestParam(value = "primary.allowed-client-ip-ranges", required = false) List<String> primaryAllowedClientIpRanges,@ApiParam(value = "") @Valid @RequestParam(value = "secure", required = false) Boolean secure,@ApiParam(value = "") @Valid @RequestParam(value = "standby.readtimeout", required = false) Integer standbyReadtimeout,@ApiParam(value = "") @Valid @RequestParam(value = "standby.autoclean", required = false) Boolean standbyAutoclean) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"mode\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"standby.autoclean\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"standby.readtimeout\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"port\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"primary.allowed-client-ip-ranges\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"primary.host\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"interval\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"secure\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"org.apache.sling.installer.configuration.persist\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe", notes = "", response = OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.DefaultSyncHandler",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo> orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "handler.name", required = false) String handlerName,@ApiParam(value = "") @Valid @RequestParam(value = "user.expirationTime", required = false) String userExpirationTime,@ApiParam(value = "") @Valid @RequestParam(value = "user.autoMembership", required = false) List<String> userAutoMembership,@ApiParam(value = "") @Valid @RequestParam(value = "user.propertyMapping", required = false) List<String> userPropertyMapping,@ApiParam(value = "") @Valid @RequestParam(value = "user.pathPrefix", required = false) String userPathPrefix,@ApiParam(value = "") @Valid @RequestParam(value = "user.membershipExpTime", required = false) String userMembershipExpTime,@ApiParam(value = "") @Valid @RequestParam(value = "user.membershipNestingDepth", required = false) Integer userMembershipNestingDepth,@ApiParam(value = "") @Valid @RequestParam(value = "user.dynamicMembership", required = false) Boolean userDynamicMembership,@ApiParam(value = "") @Valid @RequestParam(value = "user.disableMissing", required = false) Boolean userDisableMissing,@ApiParam(value = "") @Valid @RequestParam(value = "group.expirationTime", required = false) String groupExpirationTime,@ApiParam(value = "") @Valid @RequestParam(value = "group.autoMembership", required = false) List<String> groupAutoMembership,@ApiParam(value = "") @Valid @RequestParam(value = "group.propertyMapping", required = false) List<String> groupPropertyMapping,@ApiParam(value = "") @Valid @RequestParam(value = "group.pathPrefix", required = false) String groupPathPrefix,@ApiParam(value = "") @Valid @RequestParam(value = "enableRFC7613UsercaseMappedProfile", required = false) Boolean enableRFC7613UsercaseMappedProfile) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"user.membershipExpTime\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"enableRFC7613UsercaseMappedProfile\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"group.expirationTime\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"user.expirationTime\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"user.disableMissing\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"user.propertyMapping\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"user.membershipNestingDepth\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"user.pathPrefix\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"group.propertyMapping\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"group.autoMembership\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"user.autoMembership\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"handler.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"group.pathPrefix\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"user.dynamicMembership\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx", notes = "", response = OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.ExternalLoginModuleFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo> orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "jaas.ranking", required = false) Integer jaasRanking,@ApiParam(value = "") @Valid @RequestParam(value = "jaas.controlFlag", required = false) String jaasControlFlag,@ApiParam(value = "") @Valid @RequestParam(value = "jaas.realmName", required = false) String jaasRealmName,@ApiParam(value = "") @Valid @RequestParam(value = "idp.name", required = false) String idpName,@ApiParam(value = "") @Valid @RequestParam(value = "sync.handlerName", required = false) String syncHandlerName) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"idp.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"jaas.controlFlag\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"jaas.realmName\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"jaas.ranking\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"sync.handlerName\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr", notes = "", response = OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.principal.ExternalPrincipalConfiguration",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo> orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "protectExternalId", required = false) Boolean protectExternalId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"protectExternalId\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi", notes = "", response = OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugConfiguration",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo> orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "cugSupportedPaths", required = false) List<String> cugSupportedPaths,@ApiParam(value = "") @Valid @RequestParam(value = "cugEnabled", required = false) Boolean cugEnabled,@ApiParam(value = "") @Valid @RequestParam(value = "configurationRanking", required = false) Integer configurationRanking) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cugEnabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"configurationRanking\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cugSupportedPaths\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu", notes = "", response = OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugExcludeImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo> orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "principalNames", required = false) List<String> principalNames) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"principalNames\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable", notes = "", response = OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.user.action.DefaultAuthorizableActionProvider",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo> orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "enabledActions", required = false) String enabledActions,@ApiParam(value = "") @Valid @RequestParam(value = "userPrivilegeNames", required = false) List<String> userPrivilegeNames,@ApiParam(value = "") @Valid @RequestParam(value = "groupPrivilegeNames", required = false) List<String> groupPrivilegeNames,@ApiParam(value = "") @Valid @RequestParam(value = "constraint", required = false) String constraint) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"userPrivilegeNames\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"groupPrivilegeNames\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"constraint\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"enabledActions\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheJackrabbitVaultPackagingImplPackagingImpl", notes = "", response = OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.jackrabbit.vault.packaging.impl.PackagingImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo> orgApacheJackrabbitVaultPackagingImplPackagingImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "packageRoots", required = false) List<String> packageRoots) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"packageRoots\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry", notes = "", response = OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.jackrabbit.vault.packaging.registry.impl.FSPackageRegistry",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo> orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "homePath", required = false) String homePath) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"homePath\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingAuthCoreImplLogoutServlet", notes = "", response = OrgApacheSlingAuthCoreImplLogoutServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingAuthCoreImplLogoutServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.auth.core.impl.LogoutServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingAuthCoreImplLogoutServletInfo> orgApacheSlingAuthCoreImplLogoutServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "sling.servlet.methods", required = false) List<String> slingServletMethods,@ApiParam(value = "") @Valid @RequestParam(value = "sling.servlet.paths", required = false) String slingServletPaths) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"sling.servlet.paths\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"sling.servlet.methods\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingCaconfigImplConfigurationBindingsValueProvider", notes = "", response = OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationBindingsValueProvider",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo> orgApacheSlingCaconfigImplConfigurationBindingsValueProvider(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "enabled", required = false) Boolean enabled) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingCaconfigImplConfigurationResolverImpl", notes = "", response = OrgApacheSlingCaconfigImplConfigurationResolverImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingCaconfigImplConfigurationResolverImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationResolverImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingCaconfigImplConfigurationResolverImplInfo> orgApacheSlingCaconfigImplConfigurationResolverImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "configBucketNames", required = false) List<String> configBucketNames) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"configBucketNames\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra", notes = "", response = OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationInheritanceStrategy",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo> orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "enabled", required = false) Boolean enabled,@ApiParam(value = "") @Valid @RequestParam(value = "configPropertyInheritancePropertyNames", required = false) List<String> configPropertyInheritancePropertyNames) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"configPropertyInheritancePropertyNames\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra", notes = "", response = OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationPersistenceStrategy",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo> orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "enabled", required = false) Boolean enabled) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi", notes = "", response = OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.caconfig.impl.override.OsgiConfigurationOverrideProvider",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo> orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "description", required = false) String description,@ApiParam(value = "") @Valid @RequestParam(value = "overrides", required = false) List<String> overrides,@ApiParam(value = "") @Valid @RequestParam(value = "enabled", required = false) Boolean enabled,@ApiParam(value = "") @Valid @RequestParam(value = "service.ranking", required = false) Integer serviceRanking) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"description\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"overrides\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"service.ranking\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve", notes = "", response = OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.caconfig.impl.override.SystemPropertyConfigurationOverrideProvider",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo> orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "enabled", required = false) Boolean enabled,@ApiParam(value = "") @Valid @RequestParam(value = "service.ranking", required = false) Integer serviceRanking) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"service.ranking\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingCaconfigManagementImplConfigurationManagementSetti", notes = "", response = OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.caconfig.management.impl.ConfigurationManagementSettingsImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo> orgApacheSlingCaconfigManagementImplConfigurationManagementSetti(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "ignorePropertyNameRegex", required = false) List<String> ignorePropertyNameRegex,@ApiParam(value = "") @Valid @RequestParam(value = "configCollectionPropertiesResourceNames", required = false) List<String> configCollectionPropertiesResourceNames) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"ignorePropertyNameRegex\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"configCollectionPropertiesResourceNames\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour", notes = "", response = OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultConfigurationResourceResolvingStrategy",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo> orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "enabled", required = false) Boolean enabled,@ApiParam(value = "") @Valid @RequestParam(value = "configPath", required = false) String configPath,@ApiParam(value = "") @Valid @RequestParam(value = "fallbackPaths", required = false) List<String> fallbackPaths,@ApiParam(value = "") @Valid @RequestParam(value = "configCollectionInheritancePropertyNames", required = false) List<String> configCollectionInheritancePropertyNames) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"configCollectionInheritancePropertyNames\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"fallbackPaths\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"configPath\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy", notes = "", response = OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultContextPathStrategy",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo> orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "enabled", required = false) Boolean enabled,@ApiParam(value = "") @Valid @RequestParam(value = "configRefResourceNames", required = false) List<String> configRefResourceNames,@ApiParam(value = "") @Valid @RequestParam(value = "configRefPropertyNames", required = false) List<String> configRefPropertyNames,@ApiParam(value = "") @Valid @RequestParam(value = "service.ranking", required = false) Integer serviceRanking) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"configRefPropertyNames\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"configRefResourceNames\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"service.ranking\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingCommonsHtmlInternalTagsoupHtmlParser", notes = "", response = OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.commons.html.internal.TagsoupHtmlParser",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo> orgApacheSlingCommonsHtmlInternalTagsoupHtmlParser(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "parser.features", required = false) List<String> parserFeatures) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"parser.features\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingCommonsLogLogManager", notes = "", response = OrgApacheSlingCommonsLogLogManagerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingCommonsLogLogManagerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.commons.log.LogManager",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingCommonsLogLogManagerInfo> orgApacheSlingCommonsLogLogManager(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.commons.log.level", required = false) String orgApacheSlingCommonsLogLevel,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.commons.log.file", required = false) String orgApacheSlingCommonsLogFile,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.commons.log.file.number", required = false) Integer orgApacheSlingCommonsLogFileNumber,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.commons.log.file.size", required = false) String orgApacheSlingCommonsLogFileSize,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.commons.log.pattern", required = false) String orgApacheSlingCommonsLogPattern,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.commons.log.configurationFile", required = false) String orgApacheSlingCommonsLogConfigurationFile,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.commons.log.packagingDataEnabled", required = false) Boolean orgApacheSlingCommonsLogPackagingDataEnabled,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.commons.log.maxCallerDataDepth", required = false) Integer orgApacheSlingCommonsLogMaxCallerDataDepth,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.commons.log.maxOldFileCountInDump", required = false) Integer orgApacheSlingCommonsLogMaxOldFileCountInDump,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.commons.log.numOfLines", required = false) Integer orgApacheSlingCommonsLogNumOfLines) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"org.apache.sling.commons.log.file.number\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"org.apache.sling.commons.log.maxCallerDataDepth\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"org.apache.sling.commons.log.file.size\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.sling.commons.log.packagingDataEnabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"org.apache.sling.commons.log.numOfLines\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"org.apache.sling.commons.log.level\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"org.apache.sling.commons.log.maxOldFileCountInDump\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"org.apache.sling.commons.log.pattern\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.sling.commons.log.configurationFile\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.sling.commons.log.file\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingCommonsLogLogManagerFactoryConfig", notes = "", response = OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.commons.log.LogManager.factory.config",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo> orgApacheSlingCommonsLogLogManagerFactoryConfig(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.commons.log.level", required = false) String orgApacheSlingCommonsLogLevel,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.commons.log.file", required = false) String orgApacheSlingCommonsLogFile,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.commons.log.pattern", required = false) String orgApacheSlingCommonsLogPattern,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.commons.log.names", required = false) List<String> orgApacheSlingCommonsLogNames,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.commons.log.additiv", required = false) Boolean orgApacheSlingCommonsLogAdditiv) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"org.apache.sling.commons.log.names\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"org.apache.sling.commons.log.additiv\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"org.apache.sling.commons.log.level\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"org.apache.sling.commons.log.pattern\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.sling.commons.log.file\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingCommonsLogLogManagerFactoryWriter", notes = "", response = OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.commons.log.LogManager.factory.writer",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo> orgApacheSlingCommonsLogLogManagerFactoryWriter(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.commons.log.file", required = false) String orgApacheSlingCommonsLogFile,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.commons.log.file.number", required = false) Integer orgApacheSlingCommonsLogFileNumber,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.commons.log.file.size", required = false) String orgApacheSlingCommonsLogFileSize,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.commons.log.file.buffered", required = false) Boolean orgApacheSlingCommonsLogFileBuffered) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"org.apache.sling.commons.log.file.number\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"org.apache.sling.commons.log.file.buffered\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"org.apache.sling.commons.log.file.size\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.sling.commons.log.file\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingCommonsMetricsInternalLogReporter", notes = "", response = OrgApacheSlingCommonsMetricsInternalLogReporterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingCommonsMetricsInternalLogReporterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.commons.metrics.internal.LogReporter",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingCommonsMetricsInternalLogReporterInfo> orgApacheSlingCommonsMetricsInternalLogReporter(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "period", required = false) Integer period,@ApiParam(value = "") @Valid @RequestParam(value = "timeUnit", required = false) String timeUnit,@ApiParam(value = "") @Valid @RequestParam(value = "level", required = false) String level,@ApiParam(value = "") @Valid @RequestParam(value = "loggerName", required = false) String loggerName,@ApiParam(value = "") @Valid @RequestParam(value = "prefix", required = false) String prefix,@ApiParam(value = "") @Valid @RequestParam(value = "pattern", required = false) String pattern,@ApiParam(value = "") @Valid @RequestParam(value = "registryName", required = false) String registryName) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"period\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"level\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"prefix\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"pattern\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"loggerName\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"registryName\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"timeUnit\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter", notes = "", response = OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.commons.metrics.rrd4j.impl.CodahaleMetricsReporter",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo> orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "datasources", required = false) List<String> datasources,@ApiParam(value = "") @Valid @RequestParam(value = "step", required = false) Integer step,@ApiParam(value = "") @Valid @RequestParam(value = "archives", required = false) List<String> archives,@ApiParam(value = "") @Valid @RequestParam(value = "path", required = false) String path) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"path\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"archives\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"datasources\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"step\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingCommonsMimeInternalMimeTypeServiceImpl", notes = "", response = OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.commons.mime.internal.MimeTypeServiceImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo> orgApacheSlingCommonsMimeInternalMimeTypeServiceImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "mime.types", required = false) List<String> mimeTypes) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"mime.types\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingCommonsSchedulerImplQuartzScheduler", notes = "", response = OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.commons.scheduler.impl.QuartzScheduler",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo> orgApacheSlingCommonsSchedulerImplQuartzScheduler(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "poolName", required = false) String poolName,@ApiParam(value = "") @Valid @RequestParam(value = "allowedPoolNames", required = false) List<String> allowedPoolNames,@ApiParam(value = "") @Valid @RequestParam(value = "scheduler.useleaderforsingle", required = false) Boolean schedulerUseleaderforsingle,@ApiParam(value = "") @Valid @RequestParam(value = "metrics.filters", required = false) List<String> metricsFilters,@ApiParam(value = "") @Valid @RequestParam(value = "slowThresholdMillis", required = false) Integer slowThresholdMillis) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"metrics.filters\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"allowedPoolNames\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"scheduler.useleaderforsingle\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"slowThresholdMillis\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"poolName\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingCommonsSchedulerImplSchedulerHealthCheck", notes = "", response = OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.commons.scheduler.impl.SchedulerHealthCheck",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo> orgApacheSlingCommonsSchedulerImplSchedulerHealthCheck(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "max.quartzJob.duration.acceptable", required = false) Integer maxQuartzJobDurationAcceptable) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"max.quartzJob.duration.acceptable\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory", notes = "", response = OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.commons.threads.impl.DefaultThreadPool.factory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo> orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "name", required = false) String name,@ApiParam(value = "") @Valid @RequestParam(value = "minPoolSize", required = false) Integer minPoolSize,@ApiParam(value = "") @Valid @RequestParam(value = "maxPoolSize", required = false) Integer maxPoolSize,@ApiParam(value = "") @Valid @RequestParam(value = "queueSize", required = false) Integer queueSize,@ApiParam(value = "") @Valid @RequestParam(value = "maxThreadAge", required = false) Integer maxThreadAge,@ApiParam(value = "") @Valid @RequestParam(value = "keepAliveTime", required = false) Integer keepAliveTime,@ApiParam(value = "") @Valid @RequestParam(value = "blockPolicy", required = false) String blockPolicy,@ApiParam(value = "") @Valid @RequestParam(value = "shutdownGraceful", required = false) Boolean shutdownGraceful,@ApiParam(value = "") @Valid @RequestParam(value = "daemon", required = false) Boolean daemon,@ApiParam(value = "") @Valid @RequestParam(value = "shutdownWaitTime", required = false) Integer shutdownWaitTime,@ApiParam(value = "") @Valid @RequestParam(value = "priority", required = false) String priority) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"shutdownWaitTime\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"minPoolSize\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"queueSize\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"keepAliveTime\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"blockPolicy\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"shutdownGraceful\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"priority\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"maxPoolSize\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"maxThreadAge\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"daemon\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingDatasourceDataSourceFactory", notes = "", response = OrgApacheSlingDatasourceDataSourceFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDatasourceDataSourceFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.datasource.DataSourceFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingDatasourceDataSourceFactoryInfo> orgApacheSlingDatasourceDataSourceFactory(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "datasource.name", required = false) String datasourceName,@ApiParam(value = "") @Valid @RequestParam(value = "datasource.svc.prop.name", required = false) String datasourceSvcPropName,@ApiParam(value = "") @Valid @RequestParam(value = "driverClassName", required = false) String driverClassName,@ApiParam(value = "") @Valid @RequestParam(value = "url", required = false) String url,@ApiParam(value = "") @Valid @RequestParam(value = "username", required = false) String username,@ApiParam(value = "") @Valid @RequestParam(value = "password", required = false) String password,@ApiParam(value = "") @Valid @RequestParam(value = "defaultAutoCommit", required = false) String defaultAutoCommit,@ApiParam(value = "") @Valid @RequestParam(value = "defaultReadOnly", required = false) String defaultReadOnly,@ApiParam(value = "") @Valid @RequestParam(value = "defaultTransactionIsolation", required = false) String defaultTransactionIsolation,@ApiParam(value = "") @Valid @RequestParam(value = "defaultCatalog", required = false) String defaultCatalog,@ApiParam(value = "") @Valid @RequestParam(value = "maxActive", required = false) Integer maxActive,@ApiParam(value = "") @Valid @RequestParam(value = "maxIdle", required = false) Integer maxIdle,@ApiParam(value = "") @Valid @RequestParam(value = "minIdle", required = false) Integer minIdle,@ApiParam(value = "") @Valid @RequestParam(value = "initialSize", required = false) Integer initialSize,@ApiParam(value = "") @Valid @RequestParam(value = "maxWait", required = false) Integer maxWait,@ApiParam(value = "") @Valid @RequestParam(value = "maxAge", required = false) Integer maxAge,@ApiParam(value = "") @Valid @RequestParam(value = "testOnBorrow", required = false) Boolean testOnBorrow,@ApiParam(value = "") @Valid @RequestParam(value = "testOnReturn", required = false) Boolean testOnReturn,@ApiParam(value = "") @Valid @RequestParam(value = "testWhileIdle", required = false) Boolean testWhileIdle,@ApiParam(value = "") @Valid @RequestParam(value = "validationQuery", required = false) String validationQuery,@ApiParam(value = "") @Valid @RequestParam(value = "validationQueryTimeout", required = false) Integer validationQueryTimeout,@ApiParam(value = "") @Valid @RequestParam(value = "timeBetweenEvictionRunsMillis", required = false) Integer timeBetweenEvictionRunsMillis,@ApiParam(value = "") @Valid @RequestParam(value = "minEvictableIdleTimeMillis", required = false) Integer minEvictableIdleTimeMillis,@ApiParam(value = "") @Valid @RequestParam(value = "connectionProperties", required = false) String connectionProperties,@ApiParam(value = "") @Valid @RequestParam(value = "initSQL", required = false) String initSQL,@ApiParam(value = "") @Valid @RequestParam(value = "jdbcInterceptors", required = false) String jdbcInterceptors,@ApiParam(value = "") @Valid @RequestParam(value = "validationInterval", required = false) Integer validationInterval,@ApiParam(value = "") @Valid @RequestParam(value = "logValidationErrors", required = false) Boolean logValidationErrors,@ApiParam(value = "") @Valid @RequestParam(value = "datasource.svc.properties", required = false) List<String> datasourceSvcProperties) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"connectionProperties\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"validationQuery\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"defaultCatalog\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"datasource.svc.prop.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"validationInterval\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"datasource.svc.properties\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"password\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"maxIdle\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"testWhileIdle\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"defaultAutoCommit\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"minIdle\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"jdbcInterceptors\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"defaultReadOnly\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"initialSize\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"maxWait\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"defaultTransactionIsolation\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"url\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"testOnBorrow\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"logValidationErrors\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"maxAge\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"timeBetweenEvictionRunsMillis\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"minEvictableIdleTimeMillis\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"testOnReturn\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"datasource.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"driverClassName\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"username\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"maxActive\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"validationQueryTimeout\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"initSQL\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingDatasourceJNDIDataSourceFactory", notes = "", response = OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.datasource.JNDIDataSourceFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo> orgApacheSlingDatasourceJNDIDataSourceFactory(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "datasource.name", required = false) String datasourceName,@ApiParam(value = "") @Valid @RequestParam(value = "datasource.svc.prop.name", required = false) String datasourceSvcPropName,@ApiParam(value = "") @Valid @RequestParam(value = "datasource.jndi.name", required = false) String datasourceJndiName,@ApiParam(value = "") @Valid @RequestParam(value = "jndi.properties", required = false) List<String> jndiProperties) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"datasource.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"datasource.jndi.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"datasource.svc.prop.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"jndi.properties\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingDiscoveryOakConfig", notes = "", response = OrgApacheSlingDiscoveryOakConfigInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDiscoveryOakConfigInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.discovery.oak.Config",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingDiscoveryOakConfigInfo> orgApacheSlingDiscoveryOakConfig(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "connectorPingTimeout", required = false) Integer connectorPingTimeout,@ApiParam(value = "") @Valid @RequestParam(value = "connectorPingInterval", required = false) Integer connectorPingInterval,@ApiParam(value = "") @Valid @RequestParam(value = "discoveryLiteCheckInterval", required = false) Integer discoveryLiteCheckInterval,@ApiParam(value = "") @Valid @RequestParam(value = "clusterSyncServiceTimeout", required = false) Integer clusterSyncServiceTimeout,@ApiParam(value = "") @Valid @RequestParam(value = "clusterSyncServiceInterval", required = false) Integer clusterSyncServiceInterval,@ApiParam(value = "") @Valid @RequestParam(value = "enableSyncToken", required = false) Boolean enableSyncToken,@ApiParam(value = "") @Valid @RequestParam(value = "minEventDelay", required = false) Integer minEventDelay,@ApiParam(value = "") @Valid @RequestParam(value = "socketConnectTimeout", required = false) Integer socketConnectTimeout,@ApiParam(value = "") @Valid @RequestParam(value = "soTimeout", required = false) Integer soTimeout,@ApiParam(value = "") @Valid @RequestParam(value = "topologyConnectorUrls", required = false) List<String> topologyConnectorUrls,@ApiParam(value = "") @Valid @RequestParam(value = "topologyConnectorWhitelist", required = false) List<String> topologyConnectorWhitelist,@ApiParam(value = "") @Valid @RequestParam(value = "autoStopLocalLoopEnabled", required = false) Boolean autoStopLocalLoopEnabled,@ApiParam(value = "") @Valid @RequestParam(value = "gzipConnectorRequestsEnabled", required = false) Boolean gzipConnectorRequestsEnabled,@ApiParam(value = "") @Valid @RequestParam(value = "hmacEnabled", required = false) Boolean hmacEnabled,@ApiParam(value = "") @Valid @RequestParam(value = "enableEncryption", required = false) Boolean enableEncryption,@ApiParam(value = "") @Valid @RequestParam(value = "sharedKey", required = false) String sharedKey,@ApiParam(value = "") @Valid @RequestParam(value = "hmacSharedKeyTTL", required = false) Integer hmacSharedKeyTTL,@ApiParam(value = "") @Valid @RequestParam(value = "backoffStandbyFactor", required = false) String backoffStandbyFactor,@ApiParam(value = "") @Valid @RequestParam(value = "backoffStableFactor", required = false) String backoffStableFactor) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"sharedKey\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"hmacEnabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"hmacSharedKeyTTL\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"socketConnectTimeout\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"topologyConnectorWhitelist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"soTimeout\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"autoStopLocalLoopEnabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"gzipConnectorRequestsEnabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"clusterSyncServiceTimeout\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"topologyConnectorUrls\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"connectorPingInterval\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"enableSyncToken\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"clusterSyncServiceInterval\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"discoveryLiteCheckInterval\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"backoffStandbyFactor\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"connectorPingTimeout\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"backoffStableFactor\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"minEventDelay\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"enableEncryption\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck", notes = "", response = OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.discovery.oak.SynchronizedClocksHealthCheck",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo> orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "hc.name", required = false) String hcName,@ApiParam(value = "") @Valid @RequestParam(value = "hc.tags", required = false) List<String> hcTags,@ApiParam(value = "") @Valid @RequestParam(value = "hc.mbean.name", required = false) String hcMbeanName) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"hc.tags\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"hc.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"hc.mbean.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingDistributionAgentImplForwardDistributionAgentFacto", notes = "", response = OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.distribution.agent.impl.ForwardDistributionAgentFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo> orgApacheSlingDistributionAgentImplForwardDistributionAgentFacto(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "name", required = false) String name,@ApiParam(value = "") @Valid @RequestParam(value = "title", required = false) String title,@ApiParam(value = "") @Valid @RequestParam(value = "details", required = false) String details,@ApiParam(value = "") @Valid @RequestParam(value = "enabled", required = false) Boolean enabled,@ApiParam(value = "") @Valid @RequestParam(value = "serviceName", required = false) String serviceName,@ApiParam(value = "") @Valid @RequestParam(value = "log.level", required = false) String logLevel,@ApiParam(value = "") @Valid @RequestParam(value = "allowed.roots", required = false) List<String> allowedRoots,@ApiParam(value = "") @Valid @RequestParam(value = "queue.processing.enabled", required = false) Boolean queueProcessingEnabled,@ApiParam(value = "") @Valid @RequestParam(value = "packageImporter.endpoints", required = false) List<String> packageImporterEndpoints,@ApiParam(value = "") @Valid @RequestParam(value = "passiveQueues", required = false) List<String> passiveQueues,@ApiParam(value = "") @Valid @RequestParam(value = "priorityQueues", required = false) List<String> priorityQueues,@ApiParam(value = "") @Valid @RequestParam(value = "retry.strategy", required = false) String retryStrategy,@ApiParam(value = "") @Valid @RequestParam(value = "retry.attempts", required = false) Integer retryAttempts,@ApiParam(value = "") @Valid @RequestParam(value = "requestAuthorizationStrategy.target", required = false) String requestAuthorizationStrategyTarget,@ApiParam(value = "") @Valid @RequestParam(value = "transportSecretProvider.target", required = false) String transportSecretProviderTarget,@ApiParam(value = "") @Valid @RequestParam(value = "packageBuilder.target", required = false) String packageBuilderTarget,@ApiParam(value = "") @Valid @RequestParam(value = "triggers.target", required = false) String triggersTarget,@ApiParam(value = "") @Valid @RequestParam(value = "queue.provider", required = false) String queueProvider,@ApiParam(value = "") @Valid @RequestParam(value = "async.delivery", required = false) Boolean asyncDelivery,@ApiParam(value = "") @Valid @RequestParam(value = "http.conn.timeout", required = false) Integer httpConnTimeout) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"queue.processing.enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"queue.provider\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"retry.strategy\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"priorityQueues\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"triggers.target\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"retry.attempts\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"title\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"serviceName\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"passiveQueues\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"async.delivery\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"allowed.roots\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"requestAuthorizationStrategy.target\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"http.conn.timeout\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"log.level\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"details\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"transportSecretProvider.target\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"packageBuilder.target\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"packageImporter.endpoints\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA", notes = "", response = OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.distribution.agent.impl.PrivilegeDistributionRequestAuthorizationStrategyFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo> orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "name", required = false) String name,@ApiParam(value = "") @Valid @RequestParam(value = "jcrPrivilege", required = false) String jcrPrivilege) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"jcrPrivilege\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingDistributionAgentImplQueueDistributionAgentFactory", notes = "", response = OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.distribution.agent.impl.QueueDistributionAgentFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo> orgApacheSlingDistributionAgentImplQueueDistributionAgentFactory(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "name", required = false) String name,@ApiParam(value = "") @Valid @RequestParam(value = "title", required = false) String title,@ApiParam(value = "") @Valid @RequestParam(value = "details", required = false) String details,@ApiParam(value = "") @Valid @RequestParam(value = "enabled", required = false) Boolean enabled,@ApiParam(value = "") @Valid @RequestParam(value = "serviceName", required = false) String serviceName,@ApiParam(value = "") @Valid @RequestParam(value = "log.level", required = false) String logLevel,@ApiParam(value = "") @Valid @RequestParam(value = "allowed.roots", required = false) List<String> allowedRoots,@ApiParam(value = "") @Valid @RequestParam(value = "requestAuthorizationStrategy.target", required = false) String requestAuthorizationStrategyTarget,@ApiParam(value = "") @Valid @RequestParam(value = "queueProviderFactory.target", required = false) String queueProviderFactoryTarget,@ApiParam(value = "") @Valid @RequestParam(value = "packageBuilder.target", required = false) String packageBuilderTarget,@ApiParam(value = "") @Valid @RequestParam(value = "triggers.target", required = false) String triggersTarget,@ApiParam(value = "") @Valid @RequestParam(value = "priorityQueues", required = false) List<String> priorityQueues) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"allowed.roots\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"triggers.target\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"priorityQueues\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"requestAuthorizationStrategy.target\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"log.level\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"details\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"title\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"serviceName\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"queueProviderFactory.target\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"packageBuilder.target\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingDistributionAgentImplReverseDistributionAgentFacto", notes = "", response = OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.distribution.agent.impl.ReverseDistributionAgentFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo> orgApacheSlingDistributionAgentImplReverseDistributionAgentFacto(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "name", required = false) String name,@ApiParam(value = "") @Valid @RequestParam(value = "title", required = false) String title,@ApiParam(value = "") @Valid @RequestParam(value = "details", required = false) String details,@ApiParam(value = "") @Valid @RequestParam(value = "enabled", required = false) Boolean enabled,@ApiParam(value = "") @Valid @RequestParam(value = "serviceName", required = false) String serviceName,@ApiParam(value = "") @Valid @RequestParam(value = "log.level", required = false) String logLevel,@ApiParam(value = "") @Valid @RequestParam(value = "queue.processing.enabled", required = false) Boolean queueProcessingEnabled,@ApiParam(value = "") @Valid @RequestParam(value = "packageExporter.endpoints", required = false) List<String> packageExporterEndpoints,@ApiParam(value = "") @Valid @RequestParam(value = "pull.items", required = false) Integer pullItems,@ApiParam(value = "") @Valid @RequestParam(value = "http.conn.timeout", required = false) Integer httpConnTimeout,@ApiParam(value = "") @Valid @RequestParam(value = "requestAuthorizationStrategy.target", required = false) String requestAuthorizationStrategyTarget,@ApiParam(value = "") @Valid @RequestParam(value = "transportSecretProvider.target", required = false) String transportSecretProviderTarget,@ApiParam(value = "") @Valid @RequestParam(value = "packageBuilder.target", required = false) String packageBuilderTarget,@ApiParam(value = "") @Valid @RequestParam(value = "triggers.target", required = false) String triggersTarget) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"queue.processing.enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"triggers.target\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"packageExporter.endpoints\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"title\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"serviceName\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"pull.items\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"http.conn.timeout\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"requestAuthorizationStrategy.target\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"log.level\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"details\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"transportSecretProvider.target\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"packageBuilder.target\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor", notes = "", response = OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.distribution.agent.impl.SimpleDistributionAgentFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo> orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "name", required = false) String name,@ApiParam(value = "") @Valid @RequestParam(value = "title", required = false) String title,@ApiParam(value = "") @Valid @RequestParam(value = "details", required = false) String details,@ApiParam(value = "") @Valid @RequestParam(value = "enabled", required = false) Boolean enabled,@ApiParam(value = "") @Valid @RequestParam(value = "serviceName", required = false) String serviceName,@ApiParam(value = "") @Valid @RequestParam(value = "log.level", required = false) String logLevel,@ApiParam(value = "") @Valid @RequestParam(value = "queue.processing.enabled", required = false) Boolean queueProcessingEnabled,@ApiParam(value = "") @Valid @RequestParam(value = "packageExporter.target", required = false) String packageExporterTarget,@ApiParam(value = "") @Valid @RequestParam(value = "packageImporter.target", required = false) String packageImporterTarget,@ApiParam(value = "") @Valid @RequestParam(value = "requestAuthorizationStrategy.target", required = false) String requestAuthorizationStrategyTarget,@ApiParam(value = "") @Valid @RequestParam(value = "triggers.target", required = false) String triggersTarget) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"queue.processing.enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"triggers.target\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"requestAuthorizationStrategy.target\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"log.level\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"details\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"title\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"serviceName\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"packageExporter.target\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"packageImporter.target\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingDistributionAgentImplSyncDistributionAgentFactory", notes = "", response = OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.distribution.agent.impl.SyncDistributionAgentFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo> orgApacheSlingDistributionAgentImplSyncDistributionAgentFactory(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "name", required = false) String name,@ApiParam(value = "") @Valid @RequestParam(value = "title", required = false) String title,@ApiParam(value = "") @Valid @RequestParam(value = "details", required = false) String details,@ApiParam(value = "") @Valid @RequestParam(value = "enabled", required = false) Boolean enabled,@ApiParam(value = "") @Valid @RequestParam(value = "serviceName", required = false) String serviceName,@ApiParam(value = "") @Valid @RequestParam(value = "log.level", required = false) String logLevel,@ApiParam(value = "") @Valid @RequestParam(value = "queue.processing.enabled", required = false) Boolean queueProcessingEnabled,@ApiParam(value = "") @Valid @RequestParam(value = "passiveQueues", required = false) List<String> passiveQueues,@ApiParam(value = "") @Valid @RequestParam(value = "packageExporter.endpoints", required = false) List<String> packageExporterEndpoints,@ApiParam(value = "") @Valid @RequestParam(value = "packageImporter.endpoints", required = false) List<String> packageImporterEndpoints,@ApiParam(value = "") @Valid @RequestParam(value = "retry.strategy", required = false) String retryStrategy,@ApiParam(value = "") @Valid @RequestParam(value = "retry.attempts", required = false) Integer retryAttempts,@ApiParam(value = "") @Valid @RequestParam(value = "pull.items", required = false) Integer pullItems,@ApiParam(value = "") @Valid @RequestParam(value = "http.conn.timeout", required = false) Integer httpConnTimeout,@ApiParam(value = "") @Valid @RequestParam(value = "requestAuthorizationStrategy.target", required = false) String requestAuthorizationStrategyTarget,@ApiParam(value = "") @Valid @RequestParam(value = "transportSecretProvider.target", required = false) String transportSecretProviderTarget,@ApiParam(value = "") @Valid @RequestParam(value = "packageBuilder.target", required = false) String packageBuilderTarget,@ApiParam(value = "") @Valid @RequestParam(value = "triggers.target", required = false) String triggersTarget) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"queue.processing.enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"retry.strategy\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"triggers.target\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"packageExporter.endpoints\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"retry.attempts\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"title\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"serviceName\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"passiveQueues\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"pull.items\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"http.conn.timeout\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"requestAuthorizationStrategy.target\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"log.level\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"details\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"transportSecretProvider.target\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"packageBuilder.target\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"packageImporter.endpoints\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingDistributionMonitorDistributionQueueHealthCheck", notes = "", response = OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.distribution.monitor.DistributionQueueHealthCheck",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo> orgApacheSlingDistributionMonitorDistributionQueueHealthCheck(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "hc.name", required = false) String hcName,@ApiParam(value = "") @Valid @RequestParam(value = "hc.tags", required = false) List<String> hcTags,@ApiParam(value = "") @Valid @RequestParam(value = "hc.mbean.name", required = false) String hcMbeanName,@ApiParam(value = "") @Valid @RequestParam(value = "numberOfRetriesAllowed", required = false) Integer numberOfRetriesAllowed) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"numberOfRetriesAllowed\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"hc.tags\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"hc.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"hc.mbean.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingDistributionPackagingImplExporterAgentDistributio", notes = "", response = OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.AgentDistributionPackageExporterFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo> orgApacheSlingDistributionPackagingImplExporterAgentDistributio(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "name", required = false) String name,@ApiParam(value = "") @Valid @RequestParam(value = "queue", required = false) String queue,@ApiParam(value = "") @Valid @RequestParam(value = "drop.invalid.items", required = false) Boolean dropInvalidItems,@ApiParam(value = "") @Valid @RequestParam(value = "agent.target", required = false) String agentTarget) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"agent.target\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"drop.invalid.items\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"queue\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingDistributionPackagingImplExporterLocalDistributio", notes = "", response = OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.LocalDistributionPackageExporterFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo> orgApacheSlingDistributionPackagingImplExporterLocalDistributio(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "name", required = false) String name,@ApiParam(value = "") @Valid @RequestParam(value = "packageBuilder.target", required = false) String packageBuilderTarget) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"packageBuilder.target\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingDistributionPackagingImplExporterRemoteDistributi", notes = "", response = OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.RemoteDistributionPackageExporterFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo> orgApacheSlingDistributionPackagingImplExporterRemoteDistributi(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "name", required = false) String name,@ApiParam(value = "") @Valid @RequestParam(value = "endpoints", required = false) List<String> endpoints,@ApiParam(value = "") @Valid @RequestParam(value = "pull.items", required = false) Integer pullItems,@ApiParam(value = "") @Valid @RequestParam(value = "packageBuilder.target", required = false) String packageBuilderTarget,@ApiParam(value = "") @Valid @RequestParam(value = "transportSecretProvider.target", required = false) String transportSecretProviderTarget) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"endpoints\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"pull.items\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"transportSecretProvider.target\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"packageBuilder.target\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingDistributionPackagingImplImporterLocalDistributio", notes = "", response = OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.LocalDistributionPackageImporterFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo> orgApacheSlingDistributionPackagingImplImporterLocalDistributio(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "name", required = false) String name,@ApiParam(value = "") @Valid @RequestParam(value = "packageBuilder.target", required = false) String packageBuilderTarget) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"packageBuilder.target\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingDistributionPackagingImplImporterRemoteDistributi", notes = "", response = OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RemoteDistributionPackageImporterFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo> orgApacheSlingDistributionPackagingImplImporterRemoteDistributi(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "name", required = false) String name,@ApiParam(value = "") @Valid @RequestParam(value = "endpoints", required = false) List<String> endpoints,@ApiParam(value = "") @Valid @RequestParam(value = "transportSecretProvider.target", required = false) String transportSecretProviderTarget) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"endpoints\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"transportSecretProvider.target\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingDistributionPackagingImplImporterRepositoryDistri", notes = "", response = OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RepositoryDistributionPackageImporterFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo> orgApacheSlingDistributionPackagingImplImporterRepositoryDistri(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "name", required = false) String name,@ApiParam(value = "") @Valid @RequestParam(value = "service.name", required = false) String serviceName,@ApiParam(value = "") @Valid @RequestParam(value = "path", required = false) String path,@ApiParam(value = "") @Valid @RequestParam(value = "privilege.name", required = false) String privilegeName) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"path\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"service.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"privilege.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingDistributionResourcesImplDistributionConfiguration", notes = "", response = OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionConfigurationResourceProviderFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo> orgApacheSlingDistributionResourcesImplDistributionConfiguration(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "provider.roots", required = false) String providerRoots,@ApiParam(value = "") @Valid @RequestParam(value = "kind", required = false) String kind) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"kind\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"provider.roots\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingDistributionResourcesImplDistributionServiceResour", notes = "", response = OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionServiceResourceProviderFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo> orgApacheSlingDistributionResourcesImplDistributionServiceResour(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "provider.roots", required = false) String providerRoots,@ApiParam(value = "") @Valid @RequestParam(value = "kind", required = false) String kind) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"kind\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"provider.roots\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingDistributionSerializationImplDistributionPackageBu", notes = "", response = OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.distribution.serialization.impl.DistributionPackageBuilderFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo> orgApacheSlingDistributionSerializationImplDistributionPackageBu(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "name", required = false) String name,@ApiParam(value = "") @Valid @RequestParam(value = "type", required = false) String type,@ApiParam(value = "") @Valid @RequestParam(value = "format.target", required = false) String formatTarget,@ApiParam(value = "") @Valid @RequestParam(value = "tempFsFolder", required = false) String tempFsFolder,@ApiParam(value = "") @Valid @RequestParam(value = "fileThreshold", required = false) Integer fileThreshold,@ApiParam(value = "") @Valid @RequestParam(value = "memoryUnit", required = false) String memoryUnit,@ApiParam(value = "") @Valid @RequestParam(value = "useOffHeapMemory", required = false) Boolean useOffHeapMemory,@ApiParam(value = "") @Valid @RequestParam(value = "digestAlgorithm", required = false) String digestAlgorithm,@ApiParam(value = "") @Valid @RequestParam(value = "monitoringQueueSize", required = false) Integer monitoringQueueSize,@ApiParam(value = "") @Valid @RequestParam(value = "cleanupDelay", required = false) Integer cleanupDelay,@ApiParam(value = "") @Valid @RequestParam(value = "package.filters", required = false) List<String> packageFilters,@ApiParam(value = "") @Valid @RequestParam(value = "property.filters", required = false) List<String> propertyFilters) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"format.target\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"cleanupDelay\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"fileThreshold\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"monitoringQueueSize\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"property.filters\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"memoryUnit\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"useOffHeapMemory\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"digestAlgorithm\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"type\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"package.filters\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"tempFsFolder\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingDistributionSerializationImplVltVaultDistribution", notes = "", response = OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.distribution.serialization.impl.vlt.VaultDistributionPackageBuilderFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo> orgApacheSlingDistributionSerializationImplVltVaultDistribution(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "name", required = false) String name,@ApiParam(value = "") @Valid @RequestParam(value = "type", required = false) String type,@ApiParam(value = "") @Valid @RequestParam(value = "importMode", required = false) String importMode,@ApiParam(value = "") @Valid @RequestParam(value = "aclHandling", required = false) String aclHandling,@ApiParam(value = "") @Valid @RequestParam(value = "package.roots", required = false) String packageRoots,@ApiParam(value = "") @Valid @RequestParam(value = "package.filters", required = false) List<String> packageFilters,@ApiParam(value = "") @Valid @RequestParam(value = "property.filters", required = false) List<String> propertyFilters,@ApiParam(value = "") @Valid @RequestParam(value = "tempFsFolder", required = false) String tempFsFolder,@ApiParam(value = "") @Valid @RequestParam(value = "useBinaryReferences", required = false) Boolean useBinaryReferences,@ApiParam(value = "") @Valid @RequestParam(value = "autoSaveThreshold", required = false) Integer autoSaveThreshold,@ApiParam(value = "") @Valid @RequestParam(value = "cleanupDelay", required = false) Integer cleanupDelay,@ApiParam(value = "") @Valid @RequestParam(value = "fileThreshold", required = false) Integer fileThreshold,@ApiParam(value = "") @Valid @RequestParam(value = "MEGA_BYTES", required = false) String MEGA_BYTES,@ApiParam(value = "") @Valid @RequestParam(value = "useOffHeapMemory", required = false) Boolean useOffHeapMemory,@ApiParam(value = "") @Valid @RequestParam(value = "digestAlgorithm", required = false) String digestAlgorithm,@ApiParam(value = "") @Valid @RequestParam(value = "monitoringQueueSize", required = false) Integer monitoringQueueSize,@ApiParam(value = "") @Valid @RequestParam(value = "pathsMapping", required = false) List<String> pathsMapping,@ApiParam(value = "") @Valid @RequestParam(value = "strictImport", required = false) Boolean strictImport) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"pathsMapping\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"importMode\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"cleanupDelay\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"MEGA_BYTES\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"aclHandling\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"digestAlgorithm\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"type\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"strictImport\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"package.roots\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"property.filters\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"fileThreshold\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"monitoringQueueSize\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"useOffHeapMemory\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"useBinaryReferences\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"package.filters\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"tempFsFolder\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"autoSaveThreshold\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingDistributionTransportImplUserCredentialsDistributi", notes = "", response = OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.distribution.transport.impl.UserCredentialsDistributionTransportSecretProvider",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo> orgApacheSlingDistributionTransportImplUserCredentialsDistributi(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "name", required = false) String name,@ApiParam(value = "") @Valid @RequestParam(value = "username", required = false) String username,@ApiParam(value = "") @Valid @RequestParam(value = "password", required = false) String password) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"password\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"username\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingDistributionTriggerImplDistributionEventDistribute", notes = "", response = OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.distribution.trigger.impl.DistributionEventDistributeDistributionTriggerFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo> orgApacheSlingDistributionTriggerImplDistributionEventDistribute(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "name", required = false) String name,@ApiParam(value = "") @Valid @RequestParam(value = "path", required = false) String path) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"path\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger", notes = "", response = OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.distribution.trigger.impl.JcrEventDistributionTriggerFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo> orgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "name", required = false) String name,@ApiParam(value = "") @Valid @RequestParam(value = "path", required = false) String path,@ApiParam(value = "") @Valid @RequestParam(value = "ignoredPathsPatterns", required = false) List<String> ignoredPathsPatterns,@ApiParam(value = "") @Valid @RequestParam(value = "serviceName", required = false) String serviceName,@ApiParam(value = "") @Valid @RequestParam(value = "deep", required = false) Boolean deep) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"path\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"deep\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"serviceName\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"ignoredPathsPatterns\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi", notes = "", response = OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.distribution.trigger.impl.PersistedJcrEventDistributionTriggerFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo> orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "name", required = false) String name,@ApiParam(value = "") @Valid @RequestParam(value = "path", required = false) String path,@ApiParam(value = "") @Valid @RequestParam(value = "serviceName", required = false) String serviceName,@ApiParam(value = "") @Valid @RequestParam(value = "nuggetsPath", required = false) String nuggetsPath) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"path\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"nuggetsPath\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"serviceName\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig", notes = "", response = OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.distribution.trigger.impl.RemoteEventDistributionTriggerFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo> orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "name", required = false) String name,@ApiParam(value = "") @Valid @RequestParam(value = "endpoint", required = false) String endpoint,@ApiParam(value = "") @Valid @RequestParam(value = "transportSecretProvider.target", required = false) String transportSecretProviderTarget) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"endpoint\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"transportSecretProvider.target\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingDistributionTriggerImplResourceEventDistributionTr", notes = "", response = OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.distribution.trigger.impl.ResourceEventDistributionTriggerFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo> orgApacheSlingDistributionTriggerImplResourceEventDistributionTr(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "name", required = false) String name,@ApiParam(value = "") @Valid @RequestParam(value = "path", required = false) String path) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"path\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingDistributionTriggerImplScheduledDistributionTrigge", notes = "", response = OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.distribution.trigger.impl.ScheduledDistributionTriggerFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo> orgApacheSlingDistributionTriggerImplScheduledDistributionTrigge(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "name", required = false) String name,@ApiParam(value = "") @Valid @RequestParam(value = "path", required = false) String path,@ApiParam(value = "") @Valid @RequestParam(value = "seconds", required = false) String seconds,@ApiParam(value = "") @Valid @RequestParam(value = "serviceName", required = false) String serviceName) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"path\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"seconds\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"serviceName\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingEngineImplAuthSlingAuthenticator", notes = "", response = OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.engine.impl.auth.SlingAuthenticator",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo> orgApacheSlingEngineImplAuthSlingAuthenticator(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "osgi.http.whiteboard.context.select", required = false) String osgiHttpWhiteboardContextSelect,@ApiParam(value = "") @Valid @RequestParam(value = "osgi.http.whiteboard.listener", required = false) String osgiHttpWhiteboardListener,@ApiParam(value = "") @Valid @RequestParam(value = "auth.sudo.cookie", required = false) String authSudoCookie,@ApiParam(value = "") @Valid @RequestParam(value = "auth.sudo.parameter", required = false) String authSudoParameter,@ApiParam(value = "") @Valid @RequestParam(value = "auth.annonymous", required = false) Boolean authAnnonymous,@ApiParam(value = "") @Valid @RequestParam(value = "sling.auth.requirements", required = false) List<String> slingAuthRequirements,@ApiParam(value = "") @Valid @RequestParam(value = "sling.auth.anonymous.user", required = false) String slingAuthAnonymousUser,@ApiParam(value = "") @Valid @RequestParam(value = "sling.auth.anonymous.password", required = false) String slingAuthAnonymousPassword,@ApiParam(value = "") @Valid @RequestParam(value = "auth.http", required = false) String authHttp,@ApiParam(value = "") @Valid @RequestParam(value = "auth.http.realm", required = false) String authHttpRealm,@ApiParam(value = "") @Valid @RequestParam(value = "auth.uri.suffix", required = false) List<String> authUriSuffix) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"sling.auth.anonymous.user\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"auth.sudo.cookie\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"sling.auth.anonymous.password\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"auth.http\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"osgi.http.whiteboard.listener\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"sling.auth.requirements\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"osgi.http.whiteboard.context.select\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"auth.sudo.parameter\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"auth.annonymous\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"auth.uri.suffix\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"auth.http.realm\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter", notes = "", response = OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.engine.impl.debug.RequestProgressTrackerLogFilter",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo> orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "extensions", required = false) List<String> extensions,@ApiParam(value = "") @Valid @RequestParam(value = "minDurationMs", required = false) Integer minDurationMs,@ApiParam(value = "") @Valid @RequestParam(value = "maxDurationMs", required = false) Integer maxDurationMs,@ApiParam(value = "") @Valid @RequestParam(value = "compactLogFormat", required = false) Boolean compactLogFormat) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"extensions\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"compactLogFormat\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"minDurationMs\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"maxDurationMs\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingEngineImplLogRequestLogger", notes = "", response = OrgApacheSlingEngineImplLogRequestLoggerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingEngineImplLogRequestLoggerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.engine.impl.log.RequestLogger",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingEngineImplLogRequestLoggerInfo> orgApacheSlingEngineImplLogRequestLogger(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "request.log.output", required = false) String requestLogOutput,@ApiParam(value = "") @Valid @RequestParam(value = "request.log.outputtype", required = false) Integer requestLogOutputtype,@ApiParam(value = "") @Valid @RequestParam(value = "request.log.enabled", required = false) Boolean requestLogEnabled,@ApiParam(value = "") @Valid @RequestParam(value = "access.log.output", required = false) String accessLogOutput,@ApiParam(value = "") @Valid @RequestParam(value = "access.log.outputtype", required = false) Integer accessLogOutputtype,@ApiParam(value = "") @Valid @RequestParam(value = "access.log.enabled", required = false) Boolean accessLogEnabled) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"access.log.enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"request.log.output\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"access.log.output\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"request.log.enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"access.log.outputtype\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"request.log.outputtype\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingEngineImplLogRequestLoggerService", notes = "", response = OrgApacheSlingEngineImplLogRequestLoggerServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingEngineImplLogRequestLoggerServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.engine.impl.log.RequestLoggerService",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingEngineImplLogRequestLoggerServiceInfo> orgApacheSlingEngineImplLogRequestLoggerService(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "request.log.service.format", required = false) String requestLogServiceFormat,@ApiParam(value = "") @Valid @RequestParam(value = "request.log.service.output", required = false) String requestLogServiceOutput,@ApiParam(value = "") @Valid @RequestParam(value = "request.log.service.outputtype", required = false) Integer requestLogServiceOutputtype,@ApiParam(value = "") @Valid @RequestParam(value = "request.log.service.onentry", required = false) Boolean requestLogServiceOnentry) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"request.log.service.output\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"request.log.service.outputtype\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"request.log.service.format\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"request.log.service.onentry\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingEngineImplSlingMainServlet", notes = "", response = OrgApacheSlingEngineImplSlingMainServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingEngineImplSlingMainServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.engine.impl.SlingMainServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingEngineImplSlingMainServletInfo> orgApacheSlingEngineImplSlingMainServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "sling.max.calls", required = false) Integer slingMaxCalls,@ApiParam(value = "") @Valid @RequestParam(value = "sling.max.inclusions", required = false) Integer slingMaxInclusions,@ApiParam(value = "") @Valid @RequestParam(value = "sling.trace.allow", required = false) Boolean slingTraceAllow,@ApiParam(value = "") @Valid @RequestParam(value = "sling.max.record.requests", required = false) Integer slingMaxRecordRequests,@ApiParam(value = "") @Valid @RequestParam(value = "sling.store.pattern.requests", required = false) List<String> slingStorePatternRequests,@ApiParam(value = "") @Valid @RequestParam(value = "sling.serverinfo", required = false) String slingServerinfo,@ApiParam(value = "") @Valid @RequestParam(value = "sling.additional.response.headers", required = false) List<String> slingAdditionalResponseHeaders) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"sling.max.inclusions\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"sling.trace.allow\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"sling.store.pattern.requests\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"sling.serverinfo\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"sling.max.record.requests\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"sling.additional.response.headers\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"sling.max.calls\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingEngineParameters", notes = "", response = OrgApacheSlingEngineParametersInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingEngineParametersInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.engine.parameters",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingEngineParametersInfo> orgApacheSlingEngineParameters(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "sling.default.parameter.encoding", required = false) String slingDefaultParameterEncoding,@ApiParam(value = "") @Valid @RequestParam(value = "sling.default.max.parameters", required = false) Integer slingDefaultMaxParameters,@ApiParam(value = "") @Valid @RequestParam(value = "file.location", required = false) String fileLocation,@ApiParam(value = "") @Valid @RequestParam(value = "file.threshold", required = false) Integer fileThreshold,@ApiParam(value = "") @Valid @RequestParam(value = "file.max", required = false) Integer fileMax,@ApiParam(value = "") @Valid @RequestParam(value = "request.max", required = false) Integer requestMax,@ApiParam(value = "") @Valid @RequestParam(value = "sling.default.parameter.checkForAdditionalContainerParameters", required = false) Boolean slingDefaultParameterCheckForAdditionalContainerParameters) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"sling.default.parameter.encoding\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"file.location\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"file.threshold\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"file.max\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"sling.default.max.parameters\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"sling.default.parameter.checkForAdditionalContainerParameters\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"request.max\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingEventImplEventingThreadPool", notes = "", response = OrgApacheSlingEventImplEventingThreadPoolInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingEventImplEventingThreadPoolInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.event.impl.EventingThreadPool",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingEventImplEventingThreadPoolInfo> orgApacheSlingEventImplEventingThreadPool(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "minPoolSize", required = false) Integer minPoolSize) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"minPoolSize\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingEventImplJobsDefaultJobManager", notes = "", response = OrgApacheSlingEventImplJobsDefaultJobManagerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingEventImplJobsDefaultJobManagerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.event.impl.jobs.DefaultJobManager",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingEventImplJobsDefaultJobManagerInfo> orgApacheSlingEventImplJobsDefaultJobManager(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "queue.priority", required = false) String queuePriority,@ApiParam(value = "") @Valid @RequestParam(value = "queue.retries", required = false) Integer queueRetries,@ApiParam(value = "") @Valid @RequestParam(value = "queue.retrydelay", required = false) Integer queueRetrydelay,@ApiParam(value = "") @Valid @RequestParam(value = "queue.maxparallel", required = false) Integer queueMaxparallel) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"queue.priority\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"queue.retrydelay\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"queue.maxparallel\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"queue.retries\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingEventImplJobsJcrPersistenceHandler", notes = "", response = OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.event.impl.jobs.jcr.PersistenceHandler",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo> orgApacheSlingEventImplJobsJcrPersistenceHandler(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "job.consumermanager.disableDistribution", required = false) Boolean jobConsumermanagerDisableDistribution,@ApiParam(value = "") @Valid @RequestParam(value = "startup.delay", required = false) Integer startupDelay,@ApiParam(value = "") @Valid @RequestParam(value = "cleanup.period", required = false) Integer cleanupPeriod) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"job.consumermanager.disableDistribution\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"startup.delay\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"cleanup.period\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingEventImplJobsJobConsumerManager", notes = "", response = OrgApacheSlingEventImplJobsJobConsumerManagerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingEventImplJobsJobConsumerManagerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.event.impl.jobs.JobConsumerManager",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingEventImplJobsJobConsumerManagerInfo> orgApacheSlingEventImplJobsJobConsumerManager(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.installer.configuration.persist", required = false) Boolean orgApacheSlingInstallerConfigurationPersist,@ApiParam(value = "") @Valid @RequestParam(value = "job.consumermanager.whitelist", required = false) List<String> jobConsumermanagerWhitelist,@ApiParam(value = "") @Valid @RequestParam(value = "job.consumermanager.blacklist", required = false) List<String> jobConsumermanagerBlacklist) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"job.consumermanager.whitelist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"job.consumermanager.blacklist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"org.apache.sling.installer.configuration.persist\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingEventJobsQueueConfiguration", notes = "", response = OrgApacheSlingEventJobsQueueConfigurationInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingEventJobsQueueConfigurationInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.event.jobs.QueueConfiguration",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingEventJobsQueueConfigurationInfo> orgApacheSlingEventJobsQueueConfiguration(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "queue.name", required = false) String queueName,@ApiParam(value = "") @Valid @RequestParam(value = "queue.topics", required = false) List<String> queueTopics,@ApiParam(value = "") @Valid @RequestParam(value = "queue.type", required = false) String queueType,@ApiParam(value = "") @Valid @RequestParam(value = "queue.priority", required = false) String queuePriority,@ApiParam(value = "") @Valid @RequestParam(value = "queue.retries", required = false) Integer queueRetries,@ApiParam(value = "") @Valid @RequestParam(value = "queue.retrydelay", required = false) Integer queueRetrydelay,@ApiParam(value = "") @Valid @RequestParam(value = "queue.maxparallel", required = false) BigDecimal queueMaxparallel,@ApiParam(value = "") @Valid @RequestParam(value = "queue.keepJobs", required = false) Boolean queueKeepJobs,@ApiParam(value = "") @Valid @RequestParam(value = "queue.preferRunOnCreationInstance", required = false) Boolean queuePreferRunOnCreationInstance,@ApiParam(value = "") @Valid @RequestParam(value = "queue.threadPoolSize", required = false) Integer queueThreadPoolSize,@ApiParam(value = "") @Valid @RequestParam(value = "service.ranking", required = false) Integer serviceRanking) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"queue.priority\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"queue.retrydelay\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"queue.maxparallel\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : 6.02745618307040320615897144307382404804229736328125    },    \"queue.retries\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"queue.threadPoolSize\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"queue.topics\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"queue.keepJobs\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"queue.preferRunOnCreationInstance\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"queue.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"queue.type\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : {        \"values\" : \"\",        \"labels\" : \"\"      },      \"value\" : \"\"    },    \"service.ranking\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW", notes = "", response = OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.extensions.webconsolesecurityprovider.internal.SlingWebConsoleSecurityProvider",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo> orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "users", required = false) List<String> users,@ApiParam(value = "") @Valid @RequestParam(value = "groups", required = false) List<String> groups) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"groups\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"users\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingFeatureflagsFeature", notes = "", response = OrgApacheSlingFeatureflagsFeatureInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingFeatureflagsFeatureInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.featureflags.Feature",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingFeatureflagsFeatureInfo> orgApacheSlingFeatureflagsFeature(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "name", required = false) String name,@ApiParam(value = "") @Valid @RequestParam(value = "description", required = false) String description,@ApiParam(value = "") @Valid @RequestParam(value = "enabled", required = false) Boolean enabled) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"description\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingFeatureflagsImplConfiguredFeature", notes = "", response = OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.featureflags.impl.ConfiguredFeature",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo> orgApacheSlingFeatureflagsImplConfiguredFeature(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "name", required = false) String name,@ApiParam(value = "") @Valid @RequestParam(value = "description", required = false) String description,@ApiParam(value = "") @Valid @RequestParam(value = "enabled", required = false) Boolean enabled) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"description\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingHapiImplHApiUtilImpl", notes = "", response = OrgApacheSlingHapiImplHApiUtilImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingHapiImplHApiUtilImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.hapi.impl.HApiUtilImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingHapiImplHApiUtilImplInfo> orgApacheSlingHapiImplHApiUtilImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.hapi.tools.resourcetype", required = false) String orgApacheSlingHapiToolsResourcetype,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.hapi.tools.collectionresourcetype", required = false) String orgApacheSlingHapiToolsCollectionresourcetype,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.hapi.tools.searchpaths", required = false) List<String> orgApacheSlingHapiToolsSearchpaths,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.hapi.tools.externalurl", required = false) String orgApacheSlingHapiToolsExternalurl,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.hapi.tools.enabled", required = false) Boolean orgApacheSlingHapiToolsEnabled) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"org.apache.sling.hapi.tools.externalurl\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.sling.hapi.tools.collectionresourcetype\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.sling.hapi.tools.enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"org.apache.sling.hapi.tools.resourcetype\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"org.apache.sling.hapi.tools.searchpaths\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingHcCoreImplCompositeHealthCheck", notes = "", response = OrgApacheSlingHcCoreImplCompositeHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingHcCoreImplCompositeHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.hc.core.impl.CompositeHealthCheck",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingHcCoreImplCompositeHealthCheckInfo> orgApacheSlingHcCoreImplCompositeHealthCheck(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "hc.name", required = false) String hcName,@ApiParam(value = "") @Valid @RequestParam(value = "hc.tags", required = false) List<String> hcTags,@ApiParam(value = "") @Valid @RequestParam(value = "hc.mbean.name", required = false) String hcMbeanName,@ApiParam(value = "") @Valid @RequestParam(value = "filter.tags", required = false) List<String> filterTags,@ApiParam(value = "") @Valid @RequestParam(value = "filter.combineTagsWithOr", required = false) Boolean filterCombineTagsWithOr) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"hc.tags\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"filter.combineTagsWithOr\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"hc.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"filter.tags\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"hc.mbean.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl", notes = "", response = OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.hc.core.impl.executor.HealthCheckExecutorImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo> orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "timeoutInMs", required = false) Integer timeoutInMs,@ApiParam(value = "") @Valid @RequestParam(value = "longRunningFutureThresholdForCriticalMs", required = false) Integer longRunningFutureThresholdForCriticalMs,@ApiParam(value = "") @Valid @RequestParam(value = "resultCacheTtlInMs", required = false) Integer resultCacheTtlInMs) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"longRunningFutureThresholdForCriticalMs\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"timeoutInMs\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"resultCacheTtlInMs\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingHcCoreImplJmxAttributeHealthCheck", notes = "", response = OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.hc.core.impl.JmxAttributeHealthCheck",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo> orgApacheSlingHcCoreImplJmxAttributeHealthCheck(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "hc.name", required = false) String hcName,@ApiParam(value = "") @Valid @RequestParam(value = "hc.tags", required = false) List<String> hcTags,@ApiParam(value = "") @Valid @RequestParam(value = "hc.mbean.name", required = false) String hcMbeanName,@ApiParam(value = "") @Valid @RequestParam(value = "mbean.name", required = false) String mbeanName,@ApiParam(value = "") @Valid @RequestParam(value = "attribute.name", required = false) String attributeName,@ApiParam(value = "") @Valid @RequestParam(value = "attribute.value.constraint", required = false) String attributeValueConstraint) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"mbean.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"attribute.value.constraint\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"hc.tags\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"hc.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"hc.mbean.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"attribute.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingHcCoreImplScriptableHealthCheck", notes = "", response = OrgApacheSlingHcCoreImplScriptableHealthCheckInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingHcCoreImplScriptableHealthCheckInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.hc.core.impl.ScriptableHealthCheck",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingHcCoreImplScriptableHealthCheckInfo> orgApacheSlingHcCoreImplScriptableHealthCheck(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "hc.name", required = false) String hcName,@ApiParam(value = "") @Valid @RequestParam(value = "hc.tags", required = false) List<String> hcTags,@ApiParam(value = "") @Valid @RequestParam(value = "hc.mbean.name", required = false) String hcMbeanName,@ApiParam(value = "") @Valid @RequestParam(value = "expression", required = false) String expression,@ApiParam(value = "") @Valid @RequestParam(value = "language.extension", required = false) String languageExtension) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"expression\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"hc.tags\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"language.extension\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"hc.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"hc.mbean.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingHcCoreImplServletHealthCheckExecutorServlet", notes = "", response = OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.hc.core.impl.servlet.HealthCheckExecutorServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo> orgApacheSlingHcCoreImplServletHealthCheckExecutorServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "servletPath", required = false) String servletPath,@ApiParam(value = "") @Valid @RequestParam(value = "disabled", required = false) Boolean disabled,@ApiParam(value = "") @Valid @RequestParam(value = "cors.accessControlAllowOrigin", required = false) String corsAccessControlAllowOrigin) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"servletPath\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"cors.accessControlAllowOrigin\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"disabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingHcCoreImplServletResultTxtVerboseSerializer", notes = "", response = OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.hc.core.impl.servlet.ResultTxtVerboseSerializer",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo> orgApacheSlingHcCoreImplServletResultTxtVerboseSerializer(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "totalWidth", required = false) Integer totalWidth,@ApiParam(value = "") @Valid @RequestParam(value = "colWidthName", required = false) Integer colWidthName,@ApiParam(value = "") @Valid @RequestParam(value = "colWidthResult", required = false) Integer colWidthResult,@ApiParam(value = "") @Valid @RequestParam(value = "colWidthTiming", required = false) Integer colWidthTiming) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"colWidthName\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"totalWidth\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"colWidthTiming\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"colWidthResult\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingI18nImplI18NFilter", notes = "", response = OrgApacheSlingI18nImplI18NFilterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingI18nImplI18NFilterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.i18n.impl.I18NFilter",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingI18nImplI18NFilterInfo> orgApacheSlingI18nImplI18NFilter(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "service.ranking", required = false) Integer serviceRanking,@ApiParam(value = "") @Valid @RequestParam(value = "sling.filter.scope", required = false) List<String> slingFilterScope) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"sling.filter.scope\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"service.ranking\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingI18nImplJcrResourceBundleProvider", notes = "", response = OrgApacheSlingI18nImplJcrResourceBundleProviderInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingI18nImplJcrResourceBundleProviderInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.i18n.impl.JcrResourceBundleProvider",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingI18nImplJcrResourceBundleProviderInfo> orgApacheSlingI18nImplJcrResourceBundleProvider(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "locale.default", required = false) String localeDefault,@ApiParam(value = "") @Valid @RequestParam(value = "preload.bundles", required = false) Boolean preloadBundles,@ApiParam(value = "") @Valid @RequestParam(value = "invalidation.delay", required = false) Integer invalidationDelay) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"additionalProperties\" : \"additionalProperties\",  \"title\" : \"title\",  \"properties\" : {    \"invalidation.delay\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"preload.bundles\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"locale.default\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingInstallerProviderJcrImplJcrInstaller", notes = "", response = OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.installer.provider.jcr.impl.JcrInstaller",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo> orgApacheSlingInstallerProviderJcrImplJcrInstaller(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "handler.schemes", required = false) List<String> handlerSchemes,@ApiParam(value = "") @Valid @RequestParam(value = "sling.jcrinstall.folder.name.regexp", required = false) String slingJcrinstallFolderNameRegexp,@ApiParam(value = "") @Valid @RequestParam(value = "sling.jcrinstall.folder.max.depth", required = false) Integer slingJcrinstallFolderMaxDepth,@ApiParam(value = "") @Valid @RequestParam(value = "sling.jcrinstall.search.path", required = false) List<String> slingJcrinstallSearchPath,@ApiParam(value = "") @Valid @RequestParam(value = "sling.jcrinstall.new.config.path", required = false) String slingJcrinstallNewConfigPath,@ApiParam(value = "") @Valid @RequestParam(value = "sling.jcrinstall.signal.path", required = false) String slingJcrinstallSignalPath,@ApiParam(value = "") @Valid @RequestParam(value = "sling.jcrinstall.enable.writeback", required = false) Boolean slingJcrinstallEnableWriteback) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"sling.jcrinstall.search.path\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"sling.jcrinstall.enable.writeback\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"sling.jcrinstall.new.config.path\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"sling.jcrinstall.signal.path\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"handler.schemes\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"sling.jcrinstall.folder.name.regexp\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"sling.jcrinstall.folder.max.depth\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingJcrBaseInternalLoginAdminWhitelist", notes = "", response = OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo> orgApacheSlingJcrBaseInternalLoginAdminWhitelist(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "whitelist.bypass", required = false) Boolean whitelistBypass,@ApiParam(value = "") @Valid @RequestParam(value = "whitelist.bundles.regexp", required = false) String whitelistBundlesRegexp) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"whitelist.bundles.regexp\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"whitelist.bypass\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment", notes = "", response = OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist.fragment",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo> orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "whitelist.name", required = false) String whitelistName,@ApiParam(value = "") @Valid @RequestParam(value = "whitelist.bundles", required = false) List<String> whitelistBundles) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"whitelist.bundles\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"whitelist.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingJcrDavexImplServletsSlingDavExServlet", notes = "", response = OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo> orgApacheSlingJcrDavexImplServletsSlingDavExServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "alias", required = false) String alias,@ApiParam(value = "") @Valid @RequestParam(value = "dav.create-absolute-uri", required = false) Boolean davCreateAbsoluteUri,@ApiParam(value = "") @Valid @RequestParam(value = "dav.protectedhandlers", required = false) String davProtectedhandlers) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"dav.protectedhandlers\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"alias\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"dav.create-absolute-uri\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingJcrJackrabbitServerJndiRegistrationSupport", notes = "", response = OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.jcr.jackrabbit.server.JndiRegistrationSupport",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo> orgApacheSlingJcrJackrabbitServerJndiRegistrationSupport(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "java.naming.factory.initial", required = false) String javaNamingFactoryInitial,@ApiParam(value = "") @Valid @RequestParam(value = "java.naming.provider.url", required = false) String javaNamingProviderUrl) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"java.naming.factory.initial\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"java.naming.provider.url\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingJcrJackrabbitServerRmiRegistrationSupport", notes = "", response = OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.jcr.jackrabbit.server.RmiRegistrationSupport",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo> orgApacheSlingJcrJackrabbitServerRmiRegistrationSupport(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "port", required = false) Integer port) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"port\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingJcrRepoinitImplRepositoryInitializer", notes = "", response = OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.jcr.repoinit.impl.RepositoryInitializer",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo> orgApacheSlingJcrRepoinitImplRepositoryInitializer(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "references", required = false) List<String> references) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"references\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingJcrRepoinitRepositoryInitializer", notes = "", response = OrgApacheSlingJcrRepoinitRepositoryInitializerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingJcrRepoinitRepositoryInitializerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.jcr.repoinit.RepositoryInitializer",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingJcrRepoinitRepositoryInitializerInfo> orgApacheSlingJcrRepoinitRepositoryInitializer(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "references", required = false) List<String> references,@ApiParam(value = "") @Valid @RequestParam(value = "scripts", required = false) List<String> scripts) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"references\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"scripts\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl", notes = "", response = OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.jcr.resource.internal.JcrResourceResolverFactoryImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo> orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "resource.resolver.searchpath", required = false) List<String> resourceResolverSearchpath,@ApiParam(value = "") @Valid @RequestParam(value = "resource.resolver.manglenamespaces", required = false) Boolean resourceResolverManglenamespaces,@ApiParam(value = "") @Valid @RequestParam(value = "resource.resolver.allowDirect", required = false) Boolean resourceResolverAllowDirect,@ApiParam(value = "") @Valid @RequestParam(value = "resource.resolver.required.providers", required = false) List<String> resourceResolverRequiredProviders,@ApiParam(value = "") @Valid @RequestParam(value = "resource.resolver.required.providernames", required = false) List<String> resourceResolverRequiredProvidernames,@ApiParam(value = "") @Valid @RequestParam(value = "resource.resolver.virtual", required = false) List<String> resourceResolverVirtual,@ApiParam(value = "") @Valid @RequestParam(value = "resource.resolver.mapping", required = false) List<String> resourceResolverMapping,@ApiParam(value = "") @Valid @RequestParam(value = "resource.resolver.map.location", required = false) String resourceResolverMapLocation,@ApiParam(value = "") @Valid @RequestParam(value = "resource.resolver.map.observation", required = false) List<String> resourceResolverMapObservation,@ApiParam(value = "") @Valid @RequestParam(value = "resource.resolver.default.vanity.redirect.status", required = false) Integer resourceResolverDefaultVanityRedirectStatus,@ApiParam(value = "") @Valid @RequestParam(value = "resource.resolver.enable.vanitypath", required = false) Boolean resourceResolverEnableVanitypath,@ApiParam(value = "") @Valid @RequestParam(value = "resource.resolver.vanitypath.maxEntries", required = false) Integer resourceResolverVanitypathMaxEntries,@ApiParam(value = "") @Valid @RequestParam(value = "resource.resolver.vanitypath.maxEntries.startup", required = false) Boolean resourceResolverVanitypathMaxEntriesStartup,@ApiParam(value = "") @Valid @RequestParam(value = "resource.resolver.vanitypath.bloomfilter.maxBytes", required = false) Integer resourceResolverVanitypathBloomfilterMaxBytes,@ApiParam(value = "") @Valid @RequestParam(value = "resource.resolver.optimize.alias.resolution", required = false) Boolean resourceResolverOptimizeAliasResolution,@ApiParam(value = "") @Valid @RequestParam(value = "resource.resolver.vanitypath.whitelist", required = false) List<String> resourceResolverVanitypathWhitelist,@ApiParam(value = "") @Valid @RequestParam(value = "resource.resolver.vanitypath.blacklist", required = false) List<String> resourceResolverVanitypathBlacklist,@ApiParam(value = "") @Valid @RequestParam(value = "resource.resolver.vanity.precedence", required = false) Boolean resourceResolverVanityPrecedence,@ApiParam(value = "") @Valid @RequestParam(value = "resource.resolver.providerhandling.paranoid", required = false) Boolean resourceResolverProviderhandlingParanoid,@ApiParam(value = "") @Valid @RequestParam(value = "resource.resolver.log.closing", required = false) Boolean resourceResolverLogClosing,@ApiParam(value = "") @Valid @RequestParam(value = "resource.resolver.log.unclosed", required = false) Boolean resourceResolverLogUnclosed) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"resource.resolver.searchpath\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"resource.resolver.map.location\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"resource.resolver.providerhandling.paranoid\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"resource.resolver.enable.vanitypath\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"resource.resolver.vanitypath.maxEntries\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"resource.resolver.log.closing\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"resource.resolver.vanitypath.maxEntries.startup\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"resource.resolver.vanity.precedence\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"resource.resolver.vanitypath.blacklist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"resource.resolver.manglenamespaces\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"resource.resolver.vanitypath.bloomfilter.maxBytes\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"resource.resolver.default.vanity.redirect.status\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"resource.resolver.optimize.alias.resolution\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"resource.resolver.log.unclosed\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"resource.resolver.allowDirect\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"resource.resolver.vanitypath.whitelist\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"resource.resolver.required.providers\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"resource.resolver.required.providernames\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"resource.resolver.virtual\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"resource.resolver.map.observation\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"resource.resolver.mapping\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingJcrResourceInternalJcrSystemUserValidator", notes = "", response = OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.jcr.resource.internal.JcrSystemUserValidator",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo> orgApacheSlingJcrResourceInternalJcrSystemUserValidator(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "allow.only.system.user", required = false) Boolean allowOnlySystemUser) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"allow.only.system.user\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory", notes = "", response = OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.jcr.resourcesecurity.impl.ResourceAccessGateFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo> orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "path", required = false) String path,@ApiParam(value = "") @Valid @RequestParam(value = "checkpath.prefix", required = false) String checkpathPrefix,@ApiParam(value = "") @Valid @RequestParam(value = "jcrPath", required = false) String jcrPath) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"path\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"checkpath.prefix\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"jcrPath\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingJcrWebdavImplHandlerDefaultHandlerService", notes = "", response = OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DefaultHandlerService",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo> orgApacheSlingJcrWebdavImplHandlerDefaultHandlerService(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "service.ranking", required = false) Integer serviceRanking,@ApiParam(value = "") @Valid @RequestParam(value = "type.collections", required = false) String typeCollections,@ApiParam(value = "") @Valid @RequestParam(value = "type.noncollections", required = false) String typeNoncollections,@ApiParam(value = "") @Valid @RequestParam(value = "type.content", required = false) String typeContent) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"type.content\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"type.collections\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"type.noncollections\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"service.ranking\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic", notes = "", response = OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DirListingExportHandlerService",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo> orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "service.ranking", required = false) Integer serviceRanking) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"service.ranking\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet", notes = "", response = OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.jcr.webdav.impl.servlets.SimpleWebDavServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo> orgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "dav.root", required = false) String davRoot,@ApiParam(value = "") @Valid @RequestParam(value = "dav.create-absolute-uri", required = false) Boolean davCreateAbsoluteUri,@ApiParam(value = "") @Valid @RequestParam(value = "dav.realm", required = false) String davRealm,@ApiParam(value = "") @Valid @RequestParam(value = "collection.types", required = false) List<String> collectionTypes,@ApiParam(value = "") @Valid @RequestParam(value = "filter.prefixes", required = false) List<String> filterPrefixes,@ApiParam(value = "") @Valid @RequestParam(value = "filter.types", required = false) String filterTypes,@ApiParam(value = "") @Valid @RequestParam(value = "filter.uris", required = false) String filterUris,@ApiParam(value = "") @Valid @RequestParam(value = "type.collections", required = false) String typeCollections,@ApiParam(value = "") @Valid @RequestParam(value = "type.noncollections", required = false) String typeNoncollections,@ApiParam(value = "") @Valid @RequestParam(value = "type.content", required = false) String typeContent) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"filter.prefixes\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"type.content\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"type.collections\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"collection.types\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"type.noncollections\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"filter.types\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"dav.realm\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"dav.root\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"dav.create-absolute-uri\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"filter.uris\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingJmxProviderImplJMXResourceProvider", notes = "", response = OrgApacheSlingJmxProviderImplJMXResourceProviderInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingJmxProviderImplJMXResourceProviderInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.jmx.provider.impl.JMXResourceProvider",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingJmxProviderImplJMXResourceProviderInfo> orgApacheSlingJmxProviderImplJMXResourceProvider(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "provider.roots", required = false) String providerRoots) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"provider.roots\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingModelsImplModelAdapterFactory", notes = "", response = OrgApacheSlingModelsImplModelAdapterFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingModelsImplModelAdapterFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.models.impl.ModelAdapterFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingModelsImplModelAdapterFactoryInfo> orgApacheSlingModelsImplModelAdapterFactory(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "osgi.http.whiteboard.listener", required = false) String osgiHttpWhiteboardListener,@ApiParam(value = "") @Valid @RequestParam(value = "osgi.http.whiteboard.context.select", required = false) String osgiHttpWhiteboardContextSelect,@ApiParam(value = "") @Valid @RequestParam(value = "max.recursion.depth", required = false) Integer maxRecursionDepth,@ApiParam(value = "") @Valid @RequestParam(value = "cleanup.job.period", required = false) Integer cleanupJobPeriod) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"cleanup.job.period\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"osgi.http.whiteboard.listener\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"osgi.http.whiteboard.context.select\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"max.recursion.depth\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingModelsJacksonexporterImplResourceModuleProvider", notes = "", response = OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.models.jacksonexporter.impl.ResourceModuleProvider",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo> orgApacheSlingModelsJacksonexporterImplResourceModuleProvider(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "max.recursion.levels", required = false) Integer maxRecursionLevels) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"max.recursion.levels\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto", notes = "", response = OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.resource.inventory.impl.ResourceInventoryPrinterFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo> orgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "felix.inventory.printer.name", required = false) String felixInventoryPrinterName,@ApiParam(value = "") @Valid @RequestParam(value = "felix.inventory.printer.title", required = false) String felixInventoryPrinterTitle,@ApiParam(value = "") @Valid @RequestParam(value = "path", required = false) String path) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"felix.inventory.printer.title\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"path\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"felix.inventory.printer.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingResourcemergerImplMergedResourceProviderFactory", notes = "", response = OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.resourcemerger.impl.MergedResourceProviderFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo> orgApacheSlingResourcemergerImplMergedResourceProviderFactory(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "merge.root", required = false) String mergeRoot,@ApiParam(value = "") @Valid @RequestParam(value = "merge.readOnly", required = false) Boolean mergeReadOnly) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"merge.readOnly\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"merge.root\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingResourcemergerPickerOverriding", notes = "", response = OrgApacheSlingResourcemergerPickerOverridingInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingResourcemergerPickerOverridingInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.resourcemerger.picker.overriding",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingResourcemergerPickerOverridingInfo> orgApacheSlingResourcemergerPickerOverriding(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "merge.root", required = false) String mergeRoot,@ApiParam(value = "") @Valid @RequestParam(value = "merge.readOnly", required = false) Boolean mergeReadOnly) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"additionalProperties\" : \"additionalProperties\",  \"title\" : \"title\",  \"properties\" : {    \"merge.readOnly\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"merge.root\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingScriptingCoreImplScriptCacheImpl", notes = "", response = OrgApacheSlingScriptingCoreImplScriptCacheImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingScriptingCoreImplScriptCacheImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.scripting.core.impl.ScriptCacheImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingScriptingCoreImplScriptCacheImplInfo> orgApacheSlingScriptingCoreImplScriptCacheImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.scripting.cache.size", required = false) Integer orgApacheSlingScriptingCacheSize,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.scripting.cache.additional_extensions", required = false) List<String> orgApacheSlingScriptingCacheAdditionalExtensions) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"org.apache.sling.scripting.cache.size\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"org.apache.sling.scripting.cache.additional_extensions\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingScriptingCoreImplScriptingResourceResolverProvider", notes = "", response = OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.scripting.core.impl.ScriptingResourceResolverProviderImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo> orgApacheSlingScriptingCoreImplScriptingResourceResolverProvider(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "log.stacktrace.onclose", required = false) Boolean logStacktraceOnclose) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"log.stacktrace.onclose\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingScriptingJavaImplJavaScriptEngineFactory", notes = "", response = OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.scripting.java.impl.JavaScriptEngineFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo> orgApacheSlingScriptingJavaImplJavaScriptEngineFactory(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "java.classdebuginfo", required = false) Boolean javaClassdebuginfo,@ApiParam(value = "") @Valid @RequestParam(value = "java.javaEncoding", required = false) String javaJavaEncoding,@ApiParam(value = "") @Valid @RequestParam(value = "java.compilerSourceVM", required = false) String javaCompilerSourceVM,@ApiParam(value = "") @Valid @RequestParam(value = "java.compilerTargetVM", required = false) String javaCompilerTargetVM) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"java.classdebuginfo\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"java.compilerSourceVM\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"java.compilerTargetVM\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"java.javaEncoding\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa", notes = "", response = OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.scripting.javascript.internal.RhinoJavaScriptEngineFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo> orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.scripting.javascript.rhino.optLevel", required = false) Integer orgApacheSlingScriptingJavascriptRhinoOptLevel) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"org.apache.sling.scripting.javascript.rhino.optLevel\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingScriptingJspJspScriptEngineFactory", notes = "", response = OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.scripting.jsp.JspScriptEngineFactory",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo> orgApacheSlingScriptingJspJspScriptEngineFactory(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "jasper.compilerTargetVM", required = false) String jasperCompilerTargetVM,@ApiParam(value = "") @Valid @RequestParam(value = "jasper.compilerSourceVM", required = false) String jasperCompilerSourceVM,@ApiParam(value = "") @Valid @RequestParam(value = "jasper.classdebuginfo", required = false) Boolean jasperClassdebuginfo,@ApiParam(value = "") @Valid @RequestParam(value = "jasper.enablePooling", required = false) Boolean jasperEnablePooling,@ApiParam(value = "") @Valid @RequestParam(value = "jasper.ieClassId", required = false) String jasperIeClassId,@ApiParam(value = "") @Valid @RequestParam(value = "jasper.genStringAsCharArray", required = false) Boolean jasperGenStringAsCharArray,@ApiParam(value = "") @Valid @RequestParam(value = "jasper.keepgenerated", required = false) Boolean jasperKeepgenerated,@ApiParam(value = "") @Valid @RequestParam(value = "jasper.mappedfile", required = false) Boolean jasperMappedfile,@ApiParam(value = "") @Valid @RequestParam(value = "jasper.trimSpaces", required = false) Boolean jasperTrimSpaces,@ApiParam(value = "") @Valid @RequestParam(value = "jasper.displaySourceFragments", required = false) Boolean jasperDisplaySourceFragments,@ApiParam(value = "") @Valid @RequestParam(value = "default.is.session", required = false) Boolean defaultIsSession) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"jasper.enablePooling\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"jasper.genStringAsCharArray\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"jasper.ieClassId\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"jasper.keepgenerated\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"jasper.compilerSourceVM\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"jasper.displaySourceFragments\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"jasper.mappedfile\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"jasper.trimSpaces\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"jasper.compilerTargetVM\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"default.is.session\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"jasper.classdebuginfo\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv", notes = "", response = OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.scripting.sightly.js.impl.jsapi.SlyBindingsValuesProvider",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo> orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.sling.scripting.sightly.js.bindings", required = false) List<String> orgApacheSlingScriptingSightlyJsBindings) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"org.apache.sling.scripting.sightly.js.bindings\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingSecurityImplContentDispositionFilter", notes = "", response = OrgApacheSlingSecurityImplContentDispositionFilterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingSecurityImplContentDispositionFilterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.security.impl.ContentDispositionFilter",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingSecurityImplContentDispositionFilterInfo> orgApacheSlingSecurityImplContentDispositionFilter(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "sling.content.disposition.paths", required = false) List<String> slingContentDispositionPaths,@ApiParam(value = "") @Valid @RequestParam(value = "sling.content.disposition.excluded.paths", required = false) List<String> slingContentDispositionExcludedPaths,@ApiParam(value = "") @Valid @RequestParam(value = "sling.content.disposition.all.paths", required = false) Boolean slingContentDispositionAllPaths) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"sling.content.disposition.paths\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"sling.content.disposition.excluded.paths\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"sling.content.disposition.all.paths\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingSecurityImplReferrerFilter", notes = "", response = OrgApacheSlingSecurityImplReferrerFilterInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingSecurityImplReferrerFilterInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.security.impl.ReferrerFilter",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingSecurityImplReferrerFilterInfo> orgApacheSlingSecurityImplReferrerFilter(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "allow.empty", required = false) Boolean allowEmpty,@ApiParam(value = "") @Valid @RequestParam(value = "allow.hosts", required = false) List<String> allowHosts,@ApiParam(value = "") @Valid @RequestParam(value = "allow.hosts.regexp", required = false) List<String> allowHostsRegexp,@ApiParam(value = "") @Valid @RequestParam(value = "filter.methods", required = false) List<String> filterMethods,@ApiParam(value = "") @Valid @RequestParam(value = "exclude.agents.regexp", required = false) List<String> excludeAgentsRegexp) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"allow.hosts\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"filter.methods\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"exclude.agents.regexp\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"allow.hosts.regexp\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"allow.empty\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingServiceusermappingImplServiceUserMapperImpl", notes = "", response = OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo> orgApacheSlingServiceusermappingImplServiceUserMapperImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "user.mapping", required = false) List<String> userMapping,@ApiParam(value = "") @Valid @RequestParam(value = "user.default", required = false) String userDefault,@ApiParam(value = "") @Valid @RequestParam(value = "user.enable.default.mapping", required = false) Boolean userEnableDefaultMapping,@ApiParam(value = "") @Valid @RequestParam(value = "require.validation", required = false) Boolean requireValidation) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"user.default\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"user.mapping\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"user.enable.default.mapping\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"require.validation\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingServiceusermappingImplServiceUserMapperImplAmended", notes = "", response = OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl.amended",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo> orgApacheSlingServiceusermappingImplServiceUserMapperImplAmended(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "service.ranking", required = false) Integer serviceRanking,@ApiParam(value = "") @Valid @RequestParam(value = "user.mapping", required = false) List<String> userMapping) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"user.mapping\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"service.ranking\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingServletsGetDefaultGetServlet", notes = "", response = OrgApacheSlingServletsGetDefaultGetServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingServletsGetDefaultGetServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.servlets.get.DefaultGetServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingServletsGetDefaultGetServletInfo> orgApacheSlingServletsGetDefaultGetServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "aliases", required = false) List<String> aliases,@ApiParam(value = "") @Valid @RequestParam(value = "index", required = false) Boolean index,@ApiParam(value = "") @Valid @RequestParam(value = "index.files", required = false) List<String> indexFiles,@ApiParam(value = "") @Valid @RequestParam(value = "enable.html", required = false) Boolean enableHtml,@ApiParam(value = "") @Valid @RequestParam(value = "enable.json", required = false) Boolean enableJson,@ApiParam(value = "") @Valid @RequestParam(value = "enable.txt", required = false) Boolean enableTxt,@ApiParam(value = "") @Valid @RequestParam(value = "enable.xml", required = false) Boolean enableXml,@ApiParam(value = "") @Valid @RequestParam(value = "json.maximumresults", required = false) Integer jsonMaximumresults,@ApiParam(value = "") @Valid @RequestParam(value = "ecmaSuport", required = false) Boolean ecmaSuport) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"ecmaSuport\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"enable.txt\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"aliases\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"enable.html\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"index\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"json.maximumresults\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"enable.xml\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"index.files\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"enable.json\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingServletsGetImplVersionVersionInfoServlet", notes = "", response = OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.servlets.get.impl.version.VersionInfoServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo> orgApacheSlingServletsGetImplVersionVersionInfoServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "sling.servlet.selectors", required = false) List<String> slingServletSelectors,@ApiParam(value = "") @Valid @RequestParam(value = "ecmaSuport", required = false) Boolean ecmaSuport) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"ecmaSuport\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"sling.servlet.selectors\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingServletsPostImplHelperChunkCleanUpTask", notes = "", response = OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.servlets.post.impl.helper.ChunkCleanUpTask",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo> orgApacheSlingServletsPostImplHelperChunkCleanUpTask(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "scheduler.expression", required = false) String schedulerExpression,@ApiParam(value = "") @Valid @RequestParam(value = "scheduler.concurrent", required = false) Boolean schedulerConcurrent,@ApiParam(value = "") @Valid @RequestParam(value = "chunk.cleanup.age", required = false) Integer chunkCleanupAge) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"scheduler.concurrent\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"scheduler.expression\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"chunk.cleanup.age\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingServletsPostImplSlingPostServlet", notes = "", response = OrgApacheSlingServletsPostImplSlingPostServletInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingServletsPostImplSlingPostServletInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.servlets.post.impl.SlingPostServlet",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingServletsPostImplSlingPostServletInfo> orgApacheSlingServletsPostImplSlingPostServlet(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "servlet.post.dateFormats", required = false) List<String> servletPostDateFormats,@ApiParam(value = "") @Valid @RequestParam(value = "servlet.post.nodeNameHints", required = false) List<String> servletPostNodeNameHints,@ApiParam(value = "") @Valid @RequestParam(value = "servlet.post.nodeNameMaxLength", required = false) Integer servletPostNodeNameMaxLength,@ApiParam(value = "") @Valid @RequestParam(value = "servlet.post.checkinNewVersionableNodes", required = false) Boolean servletPostCheckinNewVersionableNodes,@ApiParam(value = "") @Valid @RequestParam(value = "servlet.post.autoCheckout", required = false) Boolean servletPostAutoCheckout,@ApiParam(value = "") @Valid @RequestParam(value = "servlet.post.autoCheckin", required = false) Boolean servletPostAutoCheckin,@ApiParam(value = "") @Valid @RequestParam(value = "servlet.post.ignorePattern", required = false) String servletPostIgnorePattern) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"servlet.post.dateFormats\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"servlet.post.checkinNewVersionableNodes\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"servlet.post.ignorePattern\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"servlet.post.autoCheckout\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"servlet.post.nodeNameHints\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"servlet.post.nodeNameMaxLength\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"servlet.post.autoCheckin\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingServletsResolverSlingServletResolver", notes = "", response = OrgApacheSlingServletsResolverSlingServletResolverInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingServletsResolverSlingServletResolverInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.servlets.resolver.SlingServletResolver",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingServletsResolverSlingServletResolverInfo> orgApacheSlingServletsResolverSlingServletResolver(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "servletresolver.servletRoot", required = false) String servletresolverServletRoot,@ApiParam(value = "") @Valid @RequestParam(value = "servletresolver.cacheSize", required = false) Integer servletresolverCacheSize,@ApiParam(value = "") @Valid @RequestParam(value = "servletresolver.paths", required = false) List<String> servletresolverPaths,@ApiParam(value = "") @Valid @RequestParam(value = "servletresolver.defaultExtensions", required = false) List<String> servletresolverDefaultExtensions) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"servletresolver.defaultExtensions\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"servletresolver.cacheSize\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"servletresolver.paths\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"servletresolver.servletRoot\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingSettingsImplSlingSettingsServiceImpl", notes = "", response = OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.settings.impl.SlingSettingsServiceImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo> orgApacheSlingSettingsImplSlingSettingsServiceImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "sling.name", required = false) String slingName,@ApiParam(value = "") @Valid @RequestParam(value = "sling.description", required = false) String slingDescription) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"sling.name\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"sling.description\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingStartupfilterImplStartupFilterImpl", notes = "", response = OrgApacheSlingStartupfilterImplStartupFilterImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingStartupfilterImplStartupFilterImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.startupfilter.impl.StartupFilterImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingStartupfilterImplStartupFilterImplInfo> orgApacheSlingStartupfilterImplStartupFilterImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "active.by.default", required = false) Boolean activeByDefault,@ApiParam(value = "") @Valid @RequestParam(value = "default.message", required = false) String defaultMessage) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"default.message\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"active.by.default\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingTenantInternalTenantProviderImpl", notes = "", response = OrgApacheSlingTenantInternalTenantProviderImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingTenantInternalTenantProviderImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.tenant.internal.TenantProviderImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingTenantInternalTenantProviderImplInfo> orgApacheSlingTenantInternalTenantProviderImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "tenant.root", required = false) String tenantRoot,@ApiParam(value = "") @Valid @RequestParam(value = "tenant.path.matcher", required = false) List<String> tenantPathMatcher) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"tenant.root\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    },    \"tenant.path.matcher\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingTracerInternalLogTracer", notes = "", response = OrgApacheSlingTracerInternalLogTracerInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingTracerInternalLogTracerInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.tracer.internal.LogTracer",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingTracerInternalLogTracerInfo> orgApacheSlingTracerInternalLogTracer(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "tracerSets", required = false) List<String> tracerSets,@ApiParam(value = "") @Valid @RequestParam(value = "enabled", required = false) Boolean enabled,@ApiParam(value = "") @Valid @RequestParam(value = "servletEnabled", required = false) Boolean servletEnabled,@ApiParam(value = "") @Valid @RequestParam(value = "recordingCacheSizeInMB", required = false) Integer recordingCacheSizeInMB,@ApiParam(value = "") @Valid @RequestParam(value = "recordingCacheDurationInSecs", required = false) Integer recordingCacheDurationInSecs,@ApiParam(value = "") @Valid @RequestParam(value = "recordingCompressionEnabled", required = false) Boolean recordingCompressionEnabled,@ApiParam(value = "") @Valid @RequestParam(value = "gzipResponse", required = false) Boolean gzipResponse) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"recordingCompressionEnabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"gzipResponse\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"servletEnabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    },    \"recordingCacheSizeInMB\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"tracerSets\" : {      \"is_set\" : true,      \"values\" : [ \"values\", \"values\" ],      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0    },    \"recordingCacheDurationInSecs\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 6,      \"value\" : 1    },    \"enabled\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orgApacheSlingXssImplXSSFilterImpl", notes = "", response = OrgApacheSlingXssImplXSSFilterImplInfo.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "configmgr", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved configuration parameters", response = OrgApacheSlingXssImplXSSFilterImplInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/system/console/configMgr/org.apache.sling.xss.impl.XSSFilterImpl",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrgApacheSlingXssImplXSSFilterImplInfo> orgApacheSlingXssImplXSSFilterImpl(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist,@ApiParam(value = "") @Valid @RequestParam(value = "policyPath", required = false) String policyPath) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"service_location\" : \"service_location\",  \"bundle_location\" : \"bundle_location\",  \"description\" : \"description\",  \"pid\" : \"pid\",  \"title\" : \"title\",  \"properties\" : {    \"policyPath\" : {      \"is_set\" : true,      \"name\" : \"name\",      \"description\" : \"description\",      \"optional\" : true,      \"type\" : 0,      \"value\" : \"value\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
