/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqWcmCoreImplServletsThumbnailServletProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqWcmCoreImplServletsThumbnailServletProperties::OAIComDayCqWcmCoreImplServletsThumbnailServletProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComDayCqWcmCoreImplServletsThumbnailServletProperties::OAIComDayCqWcmCoreImplServletsThumbnailServletProperties() {
    init();
}

OAIComDayCqWcmCoreImplServletsThumbnailServletProperties::~OAIComDayCqWcmCoreImplServletsThumbnailServletProperties() {
    this->cleanup();
}

void
OAIComDayCqWcmCoreImplServletsThumbnailServletProperties::init() {
    workspace = new OAIConfigNodePropertyString();
    m_workspace_isSet = false;
    dimensions = new OAIConfigNodePropertyArray();
    m_dimensions_isSet = false;
}

void
OAIComDayCqWcmCoreImplServletsThumbnailServletProperties::cleanup() {
    if(workspace != nullptr) { 
        delete workspace;
    }
    if(dimensions != nullptr) { 
        delete dimensions;
    }
}

OAIComDayCqWcmCoreImplServletsThumbnailServletProperties*
OAIComDayCqWcmCoreImplServletsThumbnailServletProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComDayCqWcmCoreImplServletsThumbnailServletProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&workspace, pJson["workspace"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&dimensions, pJson["dimensions"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
}

QString
OAIComDayCqWcmCoreImplServletsThumbnailServletProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqWcmCoreImplServletsThumbnailServletProperties::asJsonObject() {
    QJsonObject obj;
    if((workspace != nullptr) && (workspace->isSet())){
        toJsonValue(QString("workspace"), workspace, obj, QString("OAIConfigNodePropertyString"));
    }
    if((dimensions != nullptr) && (dimensions->isSet())){
        toJsonValue(QString("dimensions"), dimensions, obj, QString("OAIConfigNodePropertyArray"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIComDayCqWcmCoreImplServletsThumbnailServletProperties::getWorkspace() {
    return workspace;
}
void
OAIComDayCqWcmCoreImplServletsThumbnailServletProperties::setWorkspace(OAIConfigNodePropertyString* workspace) {
    this->workspace = workspace;
    this->m_workspace_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComDayCqWcmCoreImplServletsThumbnailServletProperties::getDimensions() {
    return dimensions;
}
void
OAIComDayCqWcmCoreImplServletsThumbnailServletProperties::setDimensions(OAIConfigNodePropertyArray* dimensions) {
    this->dimensions = dimensions;
    this->m_dimensions_isSet = true;
}


bool
OAIComDayCqWcmCoreImplServletsThumbnailServletProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(workspace != nullptr && workspace->isSet()){ isObjectUpdated = true; break;}
        if(dimensions != nullptr && dimensions->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

