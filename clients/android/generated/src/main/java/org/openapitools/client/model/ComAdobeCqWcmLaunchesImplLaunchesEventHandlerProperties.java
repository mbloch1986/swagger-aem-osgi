/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import org.openapitools.client.model.ConfigNodePropertyBoolean;
import org.openapitools.client.model.ConfigNodePropertyDropDown;
import org.openapitools.client.model.ConfigNodePropertyInteger;
import org.openapitools.client.model.ConfigNodePropertyString;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties {
  
  @SerializedName("event.filter")
  private ConfigNodePropertyString eventFilter = null;
  @SerializedName("launches.eventhandler.threadpool.maxsize")
  private ConfigNodePropertyInteger launchesEventhandlerThreadpoolMaxsize = null;
  @SerializedName("launches.eventhandler.threadpool.priority")
  private ConfigNodePropertyDropDown launchesEventhandlerThreadpoolPriority = null;
  @SerializedName("launches.eventhandler.updatelastmodification")
  private ConfigNodePropertyBoolean launchesEventhandlerUpdatelastmodification = null;

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyString getEventFilter() {
    return eventFilter;
  }
  public void setEventFilter(ConfigNodePropertyString eventFilter) {
    this.eventFilter = eventFilter;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyInteger getLaunchesEventhandlerThreadpoolMaxsize() {
    return launchesEventhandlerThreadpoolMaxsize;
  }
  public void setLaunchesEventhandlerThreadpoolMaxsize(ConfigNodePropertyInteger launchesEventhandlerThreadpoolMaxsize) {
    this.launchesEventhandlerThreadpoolMaxsize = launchesEventhandlerThreadpoolMaxsize;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyDropDown getLaunchesEventhandlerThreadpoolPriority() {
    return launchesEventhandlerThreadpoolPriority;
  }
  public void setLaunchesEventhandlerThreadpoolPriority(ConfigNodePropertyDropDown launchesEventhandlerThreadpoolPriority) {
    this.launchesEventhandlerThreadpoolPriority = launchesEventhandlerThreadpoolPriority;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyBoolean getLaunchesEventhandlerUpdatelastmodification() {
    return launchesEventhandlerUpdatelastmodification;
  }
  public void setLaunchesEventhandlerUpdatelastmodification(ConfigNodePropertyBoolean launchesEventhandlerUpdatelastmodification) {
    this.launchesEventhandlerUpdatelastmodification = launchesEventhandlerUpdatelastmodification;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties comAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties = (ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties) o;
    return (this.eventFilter == null ? comAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties.eventFilter == null : this.eventFilter.equals(comAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties.eventFilter)) &&
        (this.launchesEventhandlerThreadpoolMaxsize == null ? comAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties.launchesEventhandlerThreadpoolMaxsize == null : this.launchesEventhandlerThreadpoolMaxsize.equals(comAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties.launchesEventhandlerThreadpoolMaxsize)) &&
        (this.launchesEventhandlerThreadpoolPriority == null ? comAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties.launchesEventhandlerThreadpoolPriority == null : this.launchesEventhandlerThreadpoolPriority.equals(comAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties.launchesEventhandlerThreadpoolPriority)) &&
        (this.launchesEventhandlerUpdatelastmodification == null ? comAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties.launchesEventhandlerUpdatelastmodification == null : this.launchesEventhandlerUpdatelastmodification.equals(comAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties.launchesEventhandlerUpdatelastmodification));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.eventFilter == null ? 0: this.eventFilter.hashCode());
    result = 31 * result + (this.launchesEventhandlerThreadpoolMaxsize == null ? 0: this.launchesEventhandlerThreadpoolMaxsize.hashCode());
    result = 31 * result + (this.launchesEventhandlerThreadpoolPriority == null ? 0: this.launchesEventhandlerThreadpoolPriority.hashCode());
    result = 31 * result + (this.launchesEventhandlerUpdatelastmodification == null ? 0: this.launchesEventhandlerUpdatelastmodification.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties {\n");
    
    sb.append("  eventFilter: ").append(eventFilter).append("\n");
    sb.append("  launchesEventhandlerThreadpoolMaxsize: ").append(launchesEventhandlerThreadpoolMaxsize).append("\n");
    sb.append("  launchesEventhandlerThreadpoolPriority: ").append(launchesEventhandlerThreadpoolPriority).append("\n");
    sb.append("  launchesEventhandlerUpdatelastmodification: ").append(launchesEventhandlerUpdatelastmodification).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
