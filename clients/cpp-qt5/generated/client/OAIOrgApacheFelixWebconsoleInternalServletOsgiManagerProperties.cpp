/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties() {
    init();
}

OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::~OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties() {
    this->cleanup();
}

void
OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::init() {
    manager_root = new OAIConfigNodePropertyString();
    m_manager_root_isSet = false;
    http_service_filter = new OAIConfigNodePropertyString();
    m_http_service_filter_isSet = false;
    default_render = new OAIConfigNodePropertyString();
    m_default_render_isSet = false;
    realm = new OAIConfigNodePropertyString();
    m_realm_isSet = false;
    username = new OAIConfigNodePropertyString();
    m_username_isSet = false;
    password = new OAIConfigNodePropertyString();
    m_password_isSet = false;
    category = new OAIConfigNodePropertyString();
    m_category_isSet = false;
    locale = new OAIConfigNodePropertyString();
    m_locale_isSet = false;
    loglevel = new OAIConfigNodePropertyDropDown();
    m_loglevel_isSet = false;
    plugins = new OAIConfigNodePropertyDropDown();
    m_plugins_isSet = false;
}

void
OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::cleanup() {
    if(manager_root != nullptr) { 
        delete manager_root;
    }
    if(http_service_filter != nullptr) { 
        delete http_service_filter;
    }
    if(default_render != nullptr) { 
        delete default_render;
    }
    if(realm != nullptr) { 
        delete realm;
    }
    if(username != nullptr) { 
        delete username;
    }
    if(password != nullptr) { 
        delete password;
    }
    if(category != nullptr) { 
        delete category;
    }
    if(locale != nullptr) { 
        delete locale;
    }
    if(loglevel != nullptr) { 
        delete loglevel;
    }
    if(plugins != nullptr) { 
        delete plugins;
    }
}

OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties*
OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&manager_root, pJson["manager.root"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&http_service_filter, pJson["http.service.filter"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&default_render, pJson["default.render"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&realm, pJson["realm"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&username, pJson["username"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&password, pJson["password"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&category, pJson["category"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&locale, pJson["locale"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&loglevel, pJson["loglevel"], "OAIConfigNodePropertyDropDown", "OAIConfigNodePropertyDropDown");
    
    ::OpenAPI::setValue(&plugins, pJson["plugins"], "OAIConfigNodePropertyDropDown", "OAIConfigNodePropertyDropDown");
    
}

QString
OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::asJsonObject() {
    QJsonObject obj;
    if((manager_root != nullptr) && (manager_root->isSet())){
        toJsonValue(QString("manager.root"), manager_root, obj, QString("OAIConfigNodePropertyString"));
    }
    if((http_service_filter != nullptr) && (http_service_filter->isSet())){
        toJsonValue(QString("http.service.filter"), http_service_filter, obj, QString("OAIConfigNodePropertyString"));
    }
    if((default_render != nullptr) && (default_render->isSet())){
        toJsonValue(QString("default.render"), default_render, obj, QString("OAIConfigNodePropertyString"));
    }
    if((realm != nullptr) && (realm->isSet())){
        toJsonValue(QString("realm"), realm, obj, QString("OAIConfigNodePropertyString"));
    }
    if((username != nullptr) && (username->isSet())){
        toJsonValue(QString("username"), username, obj, QString("OAIConfigNodePropertyString"));
    }
    if((password != nullptr) && (password->isSet())){
        toJsonValue(QString("password"), password, obj, QString("OAIConfigNodePropertyString"));
    }
    if((category != nullptr) && (category->isSet())){
        toJsonValue(QString("category"), category, obj, QString("OAIConfigNodePropertyString"));
    }
    if((locale != nullptr) && (locale->isSet())){
        toJsonValue(QString("locale"), locale, obj, QString("OAIConfigNodePropertyString"));
    }
    if((loglevel != nullptr) && (loglevel->isSet())){
        toJsonValue(QString("loglevel"), loglevel, obj, QString("OAIConfigNodePropertyDropDown"));
    }
    if((plugins != nullptr) && (plugins->isSet())){
        toJsonValue(QString("plugins"), plugins, obj, QString("OAIConfigNodePropertyDropDown"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::getManagerRoot() {
    return manager_root;
}
void
OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::setManagerRoot(OAIConfigNodePropertyString* manager_root) {
    this->manager_root = manager_root;
    this->m_manager_root_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::getHttpServiceFilter() {
    return http_service_filter;
}
void
OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::setHttpServiceFilter(OAIConfigNodePropertyString* http_service_filter) {
    this->http_service_filter = http_service_filter;
    this->m_http_service_filter_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::getDefaultRender() {
    return default_render;
}
void
OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::setDefaultRender(OAIConfigNodePropertyString* default_render) {
    this->default_render = default_render;
    this->m_default_render_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::getRealm() {
    return realm;
}
void
OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::setRealm(OAIConfigNodePropertyString* realm) {
    this->realm = realm;
    this->m_realm_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::getUsername() {
    return username;
}
void
OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::setUsername(OAIConfigNodePropertyString* username) {
    this->username = username;
    this->m_username_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::getPassword() {
    return password;
}
void
OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::setPassword(OAIConfigNodePropertyString* password) {
    this->password = password;
    this->m_password_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::getCategory() {
    return category;
}
void
OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::setCategory(OAIConfigNodePropertyString* category) {
    this->category = category;
    this->m_category_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::getLocale() {
    return locale;
}
void
OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::setLocale(OAIConfigNodePropertyString* locale) {
    this->locale = locale;
    this->m_locale_isSet = true;
}

OAIConfigNodePropertyDropDown*
OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::getLoglevel() {
    return loglevel;
}
void
OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::setLoglevel(OAIConfigNodePropertyDropDown* loglevel) {
    this->loglevel = loglevel;
    this->m_loglevel_isSet = true;
}

OAIConfigNodePropertyDropDown*
OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::getPlugins() {
    return plugins;
}
void
OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::setPlugins(OAIConfigNodePropertyDropDown* plugins) {
    this->plugins = plugins;
    this->m_plugins_isSet = true;
}


bool
OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(manager_root != nullptr && manager_root->isSet()){ isObjectUpdated = true; break;}
        if(http_service_filter != nullptr && http_service_filter->isSet()){ isObjectUpdated = true; break;}
        if(default_render != nullptr && default_render->isSet()){ isObjectUpdated = true; break;}
        if(realm != nullptr && realm->isSet()){ isObjectUpdated = true; break;}
        if(username != nullptr && username->isSet()){ isObjectUpdated = true; break;}
        if(password != nullptr && password->isSet()){ isObjectUpdated = true; break;}
        if(category != nullptr && category->isSet()){ isObjectUpdated = true; break;}
        if(locale != nullptr && locale->isSet()){ isObjectUpdated = true; break;}
        if(loglevel != nullptr && loglevel->isSet()){ isObjectUpdated = true; break;}
        if(plugins != nullptr && plugins->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

