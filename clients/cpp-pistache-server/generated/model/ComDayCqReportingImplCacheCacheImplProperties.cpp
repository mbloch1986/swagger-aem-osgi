/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComDayCqReportingImplCacheCacheImplProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComDayCqReportingImplCacheCacheImplProperties::ComDayCqReportingImplCacheCacheImplProperties()
{
    m_Repcache_enableIsSet = false;
    m_Repcache_ttlIsSet = false;
    m_Repcache_maxIsSet = false;
    
}

ComDayCqReportingImplCacheCacheImplProperties::~ComDayCqReportingImplCacheCacheImplProperties()
{
}

void ComDayCqReportingImplCacheCacheImplProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComDayCqReportingImplCacheCacheImplProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Repcache_enableIsSet)
    {
        val["repcache.enable"] = ModelBase::toJson(m_Repcache_enable);
    }
    if(m_Repcache_ttlIsSet)
    {
        val["repcache.ttl"] = ModelBase::toJson(m_Repcache_ttl);
    }
    if(m_Repcache_maxIsSet)
    {
        val["repcache.max"] = ModelBase::toJson(m_Repcache_max);
    }
    

    return val;
}

void ComDayCqReportingImplCacheCacheImplProperties::fromJson(nlohmann::json& val)
{
    if(val.find("repcache.enable") != val.end())
    {
        if(!val["repcache.enable"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["repcache.enable"]);
            setRepcacheEnable( newItem );
        }
        
    }
    if(val.find("repcache.ttl") != val.end())
    {
        if(!val["repcache.ttl"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["repcache.ttl"]);
            setRepcacheTtl( newItem );
        }
        
    }
    if(val.find("repcache.max") != val.end())
    {
        if(!val["repcache.max"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["repcache.max"]);
            setRepcacheMax( newItem );
        }
        
    }
    
}


ConfigNodePropertyBoolean ComDayCqReportingImplCacheCacheImplProperties::getRepcacheEnable() const
{
    return m_Repcache_enable;
}
void ComDayCqReportingImplCacheCacheImplProperties::setRepcacheEnable(ConfigNodePropertyBoolean const& value)
{
    m_Repcache_enable = value;
    m_Repcache_enableIsSet = true;
}
bool ComDayCqReportingImplCacheCacheImplProperties::repcacheEnableIsSet() const
{
    return m_Repcache_enableIsSet;
}
void ComDayCqReportingImplCacheCacheImplProperties::unsetRepcache_enable()
{
    m_Repcache_enableIsSet = false;
}
ConfigNodePropertyInteger ComDayCqReportingImplCacheCacheImplProperties::getRepcacheTtl() const
{
    return m_Repcache_ttl;
}
void ComDayCqReportingImplCacheCacheImplProperties::setRepcacheTtl(ConfigNodePropertyInteger const& value)
{
    m_Repcache_ttl = value;
    m_Repcache_ttlIsSet = true;
}
bool ComDayCqReportingImplCacheCacheImplProperties::repcacheTtlIsSet() const
{
    return m_Repcache_ttlIsSet;
}
void ComDayCqReportingImplCacheCacheImplProperties::unsetRepcache_ttl()
{
    m_Repcache_ttlIsSet = false;
}
ConfigNodePropertyInteger ComDayCqReportingImplCacheCacheImplProperties::getRepcacheMax() const
{
    return m_Repcache_max;
}
void ComDayCqReportingImplCacheCacheImplProperties::setRepcacheMax(ConfigNodePropertyInteger const& value)
{
    m_Repcache_max = value;
    m_Repcache_maxIsSet = true;
}
bool ComDayCqReportingImplCacheCacheImplProperties::repcacheMaxIsSet() const
{
    return m_Repcache_maxIsSet;
}
void ComDayCqReportingImplCacheCacheImplProperties::unsetRepcache_max()
{
    m_Repcache_maxIsSet = false;
}

}
}
}
}

