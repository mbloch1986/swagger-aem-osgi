/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties {
  #[serde(rename = "resource.resolver.searchpath")]
  resource_resolver_searchpath: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "resource.resolver.manglenamespaces")]
  resource_resolver_manglenamespaces: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "resource.resolver.allowDirect")]
  resource_resolver_allow_direct: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "resource.resolver.required.providers")]
  resource_resolver_required_providers: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "resource.resolver.required.providernames")]
  resource_resolver_required_providernames: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "resource.resolver.virtual")]
  resource_resolver_virtual: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "resource.resolver.mapping")]
  resource_resolver_mapping: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "resource.resolver.map.location")]
  resource_resolver_map_location: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "resource.resolver.map.observation")]
  resource_resolver_map_observation: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "resource.resolver.default.vanity.redirect.status")]
  resource_resolver_default_vanity_redirect_status: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "resource.resolver.enable.vanitypath")]
  resource_resolver_enable_vanitypath: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "resource.resolver.vanitypath.maxEntries")]
  resource_resolver_vanitypath_max_entries: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "resource.resolver.vanitypath.maxEntries.startup")]
  resource_resolver_vanitypath_max_entries_startup: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "resource.resolver.vanitypath.bloomfilter.maxBytes")]
  resource_resolver_vanitypath_bloomfilter_max_bytes: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "resource.resolver.optimize.alias.resolution")]
  resource_resolver_optimize_alias_resolution: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "resource.resolver.vanitypath.whitelist")]
  resource_resolver_vanitypath_whitelist: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "resource.resolver.vanitypath.blacklist")]
  resource_resolver_vanitypath_blacklist: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "resource.resolver.vanity.precedence")]
  resource_resolver_vanity_precedence: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "resource.resolver.providerhandling.paranoid")]
  resource_resolver_providerhandling_paranoid: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "resource.resolver.log.closing")]
  resource_resolver_log_closing: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "resource.resolver.log.unclosed")]
  resource_resolver_log_unclosed: Option<::models::ConfigNodePropertyBoolean>
}

impl OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties {
  pub fn new() -> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties {
    OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties {
      resource_resolver_searchpath: None,
      resource_resolver_manglenamespaces: None,
      resource_resolver_allow_direct: None,
      resource_resolver_required_providers: None,
      resource_resolver_required_providernames: None,
      resource_resolver_virtual: None,
      resource_resolver_mapping: None,
      resource_resolver_map_location: None,
      resource_resolver_map_observation: None,
      resource_resolver_default_vanity_redirect_status: None,
      resource_resolver_enable_vanitypath: None,
      resource_resolver_vanitypath_max_entries: None,
      resource_resolver_vanitypath_max_entries_startup: None,
      resource_resolver_vanitypath_bloomfilter_max_bytes: None,
      resource_resolver_optimize_alias_resolution: None,
      resource_resolver_vanitypath_whitelist: None,
      resource_resolver_vanitypath_blacklist: None,
      resource_resolver_vanity_precedence: None,
      resource_resolver_providerhandling_paranoid: None,
      resource_resolver_log_closing: None,
      resource_resolver_log_unclosed: None
    }
  }

  pub fn set_resource_resolver_searchpath(&mut self, resource_resolver_searchpath: ::models::ConfigNodePropertyArray) {
    self.resource_resolver_searchpath = Some(resource_resolver_searchpath);
  }

  pub fn with_resource_resolver_searchpath(mut self, resource_resolver_searchpath: ::models::ConfigNodePropertyArray) -> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties {
    self.resource_resolver_searchpath = Some(resource_resolver_searchpath);
    self
  }

  pub fn resource_resolver_searchpath(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.resource_resolver_searchpath.as_ref()
  }

  pub fn reset_resource_resolver_searchpath(&mut self) {
    self.resource_resolver_searchpath = None;
  }

  pub fn set_resource_resolver_manglenamespaces(&mut self, resource_resolver_manglenamespaces: ::models::ConfigNodePropertyBoolean) {
    self.resource_resolver_manglenamespaces = Some(resource_resolver_manglenamespaces);
  }

  pub fn with_resource_resolver_manglenamespaces(mut self, resource_resolver_manglenamespaces: ::models::ConfigNodePropertyBoolean) -> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties {
    self.resource_resolver_manglenamespaces = Some(resource_resolver_manglenamespaces);
    self
  }

  pub fn resource_resolver_manglenamespaces(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.resource_resolver_manglenamespaces.as_ref()
  }

  pub fn reset_resource_resolver_manglenamespaces(&mut self) {
    self.resource_resolver_manglenamespaces = None;
  }

  pub fn set_resource_resolver_allow_direct(&mut self, resource_resolver_allow_direct: ::models::ConfigNodePropertyBoolean) {
    self.resource_resolver_allow_direct = Some(resource_resolver_allow_direct);
  }

  pub fn with_resource_resolver_allow_direct(mut self, resource_resolver_allow_direct: ::models::ConfigNodePropertyBoolean) -> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties {
    self.resource_resolver_allow_direct = Some(resource_resolver_allow_direct);
    self
  }

  pub fn resource_resolver_allow_direct(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.resource_resolver_allow_direct.as_ref()
  }

  pub fn reset_resource_resolver_allow_direct(&mut self) {
    self.resource_resolver_allow_direct = None;
  }

  pub fn set_resource_resolver_required_providers(&mut self, resource_resolver_required_providers: ::models::ConfigNodePropertyArray) {
    self.resource_resolver_required_providers = Some(resource_resolver_required_providers);
  }

  pub fn with_resource_resolver_required_providers(mut self, resource_resolver_required_providers: ::models::ConfigNodePropertyArray) -> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties {
    self.resource_resolver_required_providers = Some(resource_resolver_required_providers);
    self
  }

  pub fn resource_resolver_required_providers(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.resource_resolver_required_providers.as_ref()
  }

  pub fn reset_resource_resolver_required_providers(&mut self) {
    self.resource_resolver_required_providers = None;
  }

  pub fn set_resource_resolver_required_providernames(&mut self, resource_resolver_required_providernames: ::models::ConfigNodePropertyArray) {
    self.resource_resolver_required_providernames = Some(resource_resolver_required_providernames);
  }

  pub fn with_resource_resolver_required_providernames(mut self, resource_resolver_required_providernames: ::models::ConfigNodePropertyArray) -> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties {
    self.resource_resolver_required_providernames = Some(resource_resolver_required_providernames);
    self
  }

  pub fn resource_resolver_required_providernames(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.resource_resolver_required_providernames.as_ref()
  }

  pub fn reset_resource_resolver_required_providernames(&mut self) {
    self.resource_resolver_required_providernames = None;
  }

  pub fn set_resource_resolver_virtual(&mut self, resource_resolver_virtual: ::models::ConfigNodePropertyArray) {
    self.resource_resolver_virtual = Some(resource_resolver_virtual);
  }

  pub fn with_resource_resolver_virtual(mut self, resource_resolver_virtual: ::models::ConfigNodePropertyArray) -> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties {
    self.resource_resolver_virtual = Some(resource_resolver_virtual);
    self
  }

  pub fn resource_resolver_virtual(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.resource_resolver_virtual.as_ref()
  }

  pub fn reset_resource_resolver_virtual(&mut self) {
    self.resource_resolver_virtual = None;
  }

  pub fn set_resource_resolver_mapping(&mut self, resource_resolver_mapping: ::models::ConfigNodePropertyArray) {
    self.resource_resolver_mapping = Some(resource_resolver_mapping);
  }

  pub fn with_resource_resolver_mapping(mut self, resource_resolver_mapping: ::models::ConfigNodePropertyArray) -> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties {
    self.resource_resolver_mapping = Some(resource_resolver_mapping);
    self
  }

  pub fn resource_resolver_mapping(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.resource_resolver_mapping.as_ref()
  }

  pub fn reset_resource_resolver_mapping(&mut self) {
    self.resource_resolver_mapping = None;
  }

  pub fn set_resource_resolver_map_location(&mut self, resource_resolver_map_location: ::models::ConfigNodePropertyString) {
    self.resource_resolver_map_location = Some(resource_resolver_map_location);
  }

  pub fn with_resource_resolver_map_location(mut self, resource_resolver_map_location: ::models::ConfigNodePropertyString) -> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties {
    self.resource_resolver_map_location = Some(resource_resolver_map_location);
    self
  }

  pub fn resource_resolver_map_location(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.resource_resolver_map_location.as_ref()
  }

  pub fn reset_resource_resolver_map_location(&mut self) {
    self.resource_resolver_map_location = None;
  }

  pub fn set_resource_resolver_map_observation(&mut self, resource_resolver_map_observation: ::models::ConfigNodePropertyArray) {
    self.resource_resolver_map_observation = Some(resource_resolver_map_observation);
  }

  pub fn with_resource_resolver_map_observation(mut self, resource_resolver_map_observation: ::models::ConfigNodePropertyArray) -> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties {
    self.resource_resolver_map_observation = Some(resource_resolver_map_observation);
    self
  }

  pub fn resource_resolver_map_observation(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.resource_resolver_map_observation.as_ref()
  }

  pub fn reset_resource_resolver_map_observation(&mut self) {
    self.resource_resolver_map_observation = None;
  }

  pub fn set_resource_resolver_default_vanity_redirect_status(&mut self, resource_resolver_default_vanity_redirect_status: ::models::ConfigNodePropertyInteger) {
    self.resource_resolver_default_vanity_redirect_status = Some(resource_resolver_default_vanity_redirect_status);
  }

  pub fn with_resource_resolver_default_vanity_redirect_status(mut self, resource_resolver_default_vanity_redirect_status: ::models::ConfigNodePropertyInteger) -> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties {
    self.resource_resolver_default_vanity_redirect_status = Some(resource_resolver_default_vanity_redirect_status);
    self
  }

  pub fn resource_resolver_default_vanity_redirect_status(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.resource_resolver_default_vanity_redirect_status.as_ref()
  }

  pub fn reset_resource_resolver_default_vanity_redirect_status(&mut self) {
    self.resource_resolver_default_vanity_redirect_status = None;
  }

  pub fn set_resource_resolver_enable_vanitypath(&mut self, resource_resolver_enable_vanitypath: ::models::ConfigNodePropertyBoolean) {
    self.resource_resolver_enable_vanitypath = Some(resource_resolver_enable_vanitypath);
  }

  pub fn with_resource_resolver_enable_vanitypath(mut self, resource_resolver_enable_vanitypath: ::models::ConfigNodePropertyBoolean) -> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties {
    self.resource_resolver_enable_vanitypath = Some(resource_resolver_enable_vanitypath);
    self
  }

  pub fn resource_resolver_enable_vanitypath(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.resource_resolver_enable_vanitypath.as_ref()
  }

  pub fn reset_resource_resolver_enable_vanitypath(&mut self) {
    self.resource_resolver_enable_vanitypath = None;
  }

  pub fn set_resource_resolver_vanitypath_max_entries(&mut self, resource_resolver_vanitypath_max_entries: ::models::ConfigNodePropertyInteger) {
    self.resource_resolver_vanitypath_max_entries = Some(resource_resolver_vanitypath_max_entries);
  }

  pub fn with_resource_resolver_vanitypath_max_entries(mut self, resource_resolver_vanitypath_max_entries: ::models::ConfigNodePropertyInteger) -> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties {
    self.resource_resolver_vanitypath_max_entries = Some(resource_resolver_vanitypath_max_entries);
    self
  }

  pub fn resource_resolver_vanitypath_max_entries(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.resource_resolver_vanitypath_max_entries.as_ref()
  }

  pub fn reset_resource_resolver_vanitypath_max_entries(&mut self) {
    self.resource_resolver_vanitypath_max_entries = None;
  }

  pub fn set_resource_resolver_vanitypath_max_entries_startup(&mut self, resource_resolver_vanitypath_max_entries_startup: ::models::ConfigNodePropertyBoolean) {
    self.resource_resolver_vanitypath_max_entries_startup = Some(resource_resolver_vanitypath_max_entries_startup);
  }

  pub fn with_resource_resolver_vanitypath_max_entries_startup(mut self, resource_resolver_vanitypath_max_entries_startup: ::models::ConfigNodePropertyBoolean) -> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties {
    self.resource_resolver_vanitypath_max_entries_startup = Some(resource_resolver_vanitypath_max_entries_startup);
    self
  }

  pub fn resource_resolver_vanitypath_max_entries_startup(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.resource_resolver_vanitypath_max_entries_startup.as_ref()
  }

  pub fn reset_resource_resolver_vanitypath_max_entries_startup(&mut self) {
    self.resource_resolver_vanitypath_max_entries_startup = None;
  }

  pub fn set_resource_resolver_vanitypath_bloomfilter_max_bytes(&mut self, resource_resolver_vanitypath_bloomfilter_max_bytes: ::models::ConfigNodePropertyInteger) {
    self.resource_resolver_vanitypath_bloomfilter_max_bytes = Some(resource_resolver_vanitypath_bloomfilter_max_bytes);
  }

  pub fn with_resource_resolver_vanitypath_bloomfilter_max_bytes(mut self, resource_resolver_vanitypath_bloomfilter_max_bytes: ::models::ConfigNodePropertyInteger) -> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties {
    self.resource_resolver_vanitypath_bloomfilter_max_bytes = Some(resource_resolver_vanitypath_bloomfilter_max_bytes);
    self
  }

  pub fn resource_resolver_vanitypath_bloomfilter_max_bytes(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.resource_resolver_vanitypath_bloomfilter_max_bytes.as_ref()
  }

  pub fn reset_resource_resolver_vanitypath_bloomfilter_max_bytes(&mut self) {
    self.resource_resolver_vanitypath_bloomfilter_max_bytes = None;
  }

  pub fn set_resource_resolver_optimize_alias_resolution(&mut self, resource_resolver_optimize_alias_resolution: ::models::ConfigNodePropertyBoolean) {
    self.resource_resolver_optimize_alias_resolution = Some(resource_resolver_optimize_alias_resolution);
  }

  pub fn with_resource_resolver_optimize_alias_resolution(mut self, resource_resolver_optimize_alias_resolution: ::models::ConfigNodePropertyBoolean) -> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties {
    self.resource_resolver_optimize_alias_resolution = Some(resource_resolver_optimize_alias_resolution);
    self
  }

  pub fn resource_resolver_optimize_alias_resolution(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.resource_resolver_optimize_alias_resolution.as_ref()
  }

  pub fn reset_resource_resolver_optimize_alias_resolution(&mut self) {
    self.resource_resolver_optimize_alias_resolution = None;
  }

  pub fn set_resource_resolver_vanitypath_whitelist(&mut self, resource_resolver_vanitypath_whitelist: ::models::ConfigNodePropertyArray) {
    self.resource_resolver_vanitypath_whitelist = Some(resource_resolver_vanitypath_whitelist);
  }

  pub fn with_resource_resolver_vanitypath_whitelist(mut self, resource_resolver_vanitypath_whitelist: ::models::ConfigNodePropertyArray) -> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties {
    self.resource_resolver_vanitypath_whitelist = Some(resource_resolver_vanitypath_whitelist);
    self
  }

  pub fn resource_resolver_vanitypath_whitelist(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.resource_resolver_vanitypath_whitelist.as_ref()
  }

  pub fn reset_resource_resolver_vanitypath_whitelist(&mut self) {
    self.resource_resolver_vanitypath_whitelist = None;
  }

  pub fn set_resource_resolver_vanitypath_blacklist(&mut self, resource_resolver_vanitypath_blacklist: ::models::ConfigNodePropertyArray) {
    self.resource_resolver_vanitypath_blacklist = Some(resource_resolver_vanitypath_blacklist);
  }

  pub fn with_resource_resolver_vanitypath_blacklist(mut self, resource_resolver_vanitypath_blacklist: ::models::ConfigNodePropertyArray) -> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties {
    self.resource_resolver_vanitypath_blacklist = Some(resource_resolver_vanitypath_blacklist);
    self
  }

  pub fn resource_resolver_vanitypath_blacklist(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.resource_resolver_vanitypath_blacklist.as_ref()
  }

  pub fn reset_resource_resolver_vanitypath_blacklist(&mut self) {
    self.resource_resolver_vanitypath_blacklist = None;
  }

  pub fn set_resource_resolver_vanity_precedence(&mut self, resource_resolver_vanity_precedence: ::models::ConfigNodePropertyBoolean) {
    self.resource_resolver_vanity_precedence = Some(resource_resolver_vanity_precedence);
  }

  pub fn with_resource_resolver_vanity_precedence(mut self, resource_resolver_vanity_precedence: ::models::ConfigNodePropertyBoolean) -> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties {
    self.resource_resolver_vanity_precedence = Some(resource_resolver_vanity_precedence);
    self
  }

  pub fn resource_resolver_vanity_precedence(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.resource_resolver_vanity_precedence.as_ref()
  }

  pub fn reset_resource_resolver_vanity_precedence(&mut self) {
    self.resource_resolver_vanity_precedence = None;
  }

  pub fn set_resource_resolver_providerhandling_paranoid(&mut self, resource_resolver_providerhandling_paranoid: ::models::ConfigNodePropertyBoolean) {
    self.resource_resolver_providerhandling_paranoid = Some(resource_resolver_providerhandling_paranoid);
  }

  pub fn with_resource_resolver_providerhandling_paranoid(mut self, resource_resolver_providerhandling_paranoid: ::models::ConfigNodePropertyBoolean) -> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties {
    self.resource_resolver_providerhandling_paranoid = Some(resource_resolver_providerhandling_paranoid);
    self
  }

  pub fn resource_resolver_providerhandling_paranoid(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.resource_resolver_providerhandling_paranoid.as_ref()
  }

  pub fn reset_resource_resolver_providerhandling_paranoid(&mut self) {
    self.resource_resolver_providerhandling_paranoid = None;
  }

  pub fn set_resource_resolver_log_closing(&mut self, resource_resolver_log_closing: ::models::ConfigNodePropertyBoolean) {
    self.resource_resolver_log_closing = Some(resource_resolver_log_closing);
  }

  pub fn with_resource_resolver_log_closing(mut self, resource_resolver_log_closing: ::models::ConfigNodePropertyBoolean) -> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties {
    self.resource_resolver_log_closing = Some(resource_resolver_log_closing);
    self
  }

  pub fn resource_resolver_log_closing(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.resource_resolver_log_closing.as_ref()
  }

  pub fn reset_resource_resolver_log_closing(&mut self) {
    self.resource_resolver_log_closing = None;
  }

  pub fn set_resource_resolver_log_unclosed(&mut self, resource_resolver_log_unclosed: ::models::ConfigNodePropertyBoolean) {
    self.resource_resolver_log_unclosed = Some(resource_resolver_log_unclosed);
  }

  pub fn with_resource_resolver_log_unclosed(mut self, resource_resolver_log_unclosed: ::models::ConfigNodePropertyBoolean) -> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties {
    self.resource_resolver_log_unclosed = Some(resource_resolver_log_unclosed);
    self
  }

  pub fn resource_resolver_log_unclosed(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.resource_resolver_log_unclosed.as_ref()
  }

  pub fn reset_resource_resolver_log_unclosed(&mut self) {
    self.resource_resolver_log_unclosed = None;
  }

}



