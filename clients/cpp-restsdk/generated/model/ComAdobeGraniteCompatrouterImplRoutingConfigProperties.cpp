/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeGraniteCompatrouterImplRoutingConfigProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeGraniteCompatrouterImplRoutingConfigProperties::ComAdobeGraniteCompatrouterImplRoutingConfigProperties()
{
    m_IdIsSet = false;
    m_CompatPathIsSet = false;
    m_NewPathIsSet = false;
}

ComAdobeGraniteCompatrouterImplRoutingConfigProperties::~ComAdobeGraniteCompatrouterImplRoutingConfigProperties()
{
}

void ComAdobeGraniteCompatrouterImplRoutingConfigProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeGraniteCompatrouterImplRoutingConfigProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_CompatPathIsSet)
    {
        val[utility::conversions::to_string_t("compatPath")] = ModelBase::toJson(m_CompatPath);
    }
    if(m_NewPathIsSet)
    {
        val[utility::conversions::to_string_t("newPath")] = ModelBase::toJson(m_NewPath);
    }

    return val;
}

void ComAdobeGraniteCompatrouterImplRoutingConfigProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        if(!val[utility::conversions::to_string_t("id")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("id")]);
            setId( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("compatPath")))
    {
        if(!val[utility::conversions::to_string_t("compatPath")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("compatPath")]);
            setCompatPath( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("newPath")))
    {
        if(!val[utility::conversions::to_string_t("newPath")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("newPath")]);
            setNewPath( newItem );
        }
    }
}

void ComAdobeGraniteCompatrouterImplRoutingConfigProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_IdIsSet)
    {
        if (m_Id.get())
        {
            m_Id->toMultipart(multipart, utility::conversions::to_string_t("id."));
        }
    }
    if(m_CompatPathIsSet)
    {
        if (m_CompatPath.get())
        {
            m_CompatPath->toMultipart(multipart, utility::conversions::to_string_t("compatPath."));
        }
    }
    if(m_NewPathIsSet)
    {
        if (m_NewPath.get())
        {
            m_NewPath->toMultipart(multipart, utility::conversions::to_string_t("newPath."));
        }
    }
}

void ComAdobeGraniteCompatrouterImplRoutingConfigProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("id")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("id."));
            setId( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("compatPath")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("compatPath")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("compatPath."));
            setCompatPath( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("newPath")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("newPath")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("newPath."));
            setNewPath( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteCompatrouterImplRoutingConfigProperties::getId() const
{
    return m_Id;
}


void ComAdobeGraniteCompatrouterImplRoutingConfigProperties::setId(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool ComAdobeGraniteCompatrouterImplRoutingConfigProperties::idIsSet() const
{
    return m_IdIsSet;
}

void ComAdobeGraniteCompatrouterImplRoutingConfigProperties::unsetId()
{
    m_IdIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteCompatrouterImplRoutingConfigProperties::getCompatPath() const
{
    return m_CompatPath;
}


void ComAdobeGraniteCompatrouterImplRoutingConfigProperties::setCompatPath(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_CompatPath = value;
    m_CompatPathIsSet = true;
}
bool ComAdobeGraniteCompatrouterImplRoutingConfigProperties::compatPathIsSet() const
{
    return m_CompatPathIsSet;
}

void ComAdobeGraniteCompatrouterImplRoutingConfigProperties::unsetCompatPath()
{
    m_CompatPathIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteCompatrouterImplRoutingConfigProperties::getNewPath() const
{
    return m_NewPath;
}


void ComAdobeGraniteCompatrouterImplRoutingConfigProperties::setNewPath(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_NewPath = value;
    m_NewPathIsSet = true;
}
bool ComAdobeGraniteCompatrouterImplRoutingConfigProperties::newPathIsSet() const
{
    return m_NewPathIsSet;
}

void ComAdobeGraniteCompatrouterImplRoutingConfigProperties::unsetNewPath()
{
    m_NewPathIsSet = false;
}

}
}
}
}

