/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingFeatureflagsFeatureProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheSlingFeatureflagsFeatureProperties::OrgApacheSlingFeatureflagsFeatureProperties()
{
    m_NameIsSet = false;
    m_DescriptionIsSet = false;
    m_EnabledIsSet = false;
}

OrgApacheSlingFeatureflagsFeatureProperties::~OrgApacheSlingFeatureflagsFeatureProperties()
{
}

void OrgApacheSlingFeatureflagsFeatureProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheSlingFeatureflagsFeatureProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t("description")] = ModelBase::toJson(m_Description);
    }
    if(m_EnabledIsSet)
    {
        val[utility::conversions::to_string_t("enabled")] = ModelBase::toJson(m_Enabled);
    }

    return val;
}

void OrgApacheSlingFeatureflagsFeatureProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        if(!val[utility::conversions::to_string_t("name")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("name")]);
            setName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("description")))
    {
        if(!val[utility::conversions::to_string_t("description")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("description")]);
            setDescription( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("enabled")))
    {
        if(!val[utility::conversions::to_string_t("enabled")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("enabled")]);
            setEnabled( newItem );
        }
    }
}

void OrgApacheSlingFeatureflagsFeatureProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_NameIsSet)
    {
        if (m_Name.get())
        {
            m_Name->toMultipart(multipart, utility::conversions::to_string_t("name."));
        }
    }
    if(m_DescriptionIsSet)
    {
        if (m_Description.get())
        {
            m_Description->toMultipart(multipart, utility::conversions::to_string_t("description."));
        }
    }
    if(m_EnabledIsSet)
    {
        if (m_Enabled.get())
        {
            m_Enabled->toMultipart(multipart, utility::conversions::to_string_t("enabled."));
        }
    }
}

void OrgApacheSlingFeatureflagsFeatureProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("name")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("name."));
            setName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("description")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("description")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("description."));
            setDescription( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("enabled")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("enabled")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("enabled."));
            setEnabled( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingFeatureflagsFeatureProperties::getName() const
{
    return m_Name;
}


void OrgApacheSlingFeatureflagsFeatureProperties::setName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool OrgApacheSlingFeatureflagsFeatureProperties::nameIsSet() const
{
    return m_NameIsSet;
}

void OrgApacheSlingFeatureflagsFeatureProperties::unsetName()
{
    m_NameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingFeatureflagsFeatureProperties::getDescription() const
{
    return m_Description;
}


void OrgApacheSlingFeatureflagsFeatureProperties::setDescription(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool OrgApacheSlingFeatureflagsFeatureProperties::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void OrgApacheSlingFeatureflagsFeatureProperties::unsetDescription()
{
    m_DescriptionIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingFeatureflagsFeatureProperties::getEnabled() const
{
    return m_Enabled;
}


void OrgApacheSlingFeatureflagsFeatureProperties::setEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Enabled = value;
    m_EnabledIsSet = true;
}
bool OrgApacheSlingFeatureflagsFeatureProperties::enabledIsSet() const
{
    return m_EnabledIsSet;
}

void OrgApacheSlingFeatureflagsFeatureProperties::unsetEnabled()
{
    m_EnabledIsSet = false;
}

}
}
}
}

