/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckProperties::ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckProperties()
{
    m_Hc_tagsIsSet = false;
    m_Disk_space_warn_thresholdIsSet = false;
    m_Disk_space_error_thresholdIsSet = false;
    
}

ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckProperties::~ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckProperties()
{
}

void ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Hc_tagsIsSet)
    {
        val["hc.tags"] = ModelBase::toJson(m_Hc_tags);
    }
    if(m_Disk_space_warn_thresholdIsSet)
    {
        val["disk.space.warn.threshold"] = ModelBase::toJson(m_Disk_space_warn_threshold);
    }
    if(m_Disk_space_error_thresholdIsSet)
    {
        val["disk.space.error.threshold"] = ModelBase::toJson(m_Disk_space_error_threshold);
    }
    

    return val;
}

void ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckProperties::fromJson(nlohmann::json& val)
{
    if(val.find("hc.tags") != val.end())
    {
        if(!val["hc.tags"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["hc.tags"]);
            setHcTags( newItem );
        }
        
    }
    if(val.find("disk.space.warn.threshold") != val.end())
    {
        if(!val["disk.space.warn.threshold"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["disk.space.warn.threshold"]);
            setDiskSpaceWarnThreshold( newItem );
        }
        
    }
    if(val.find("disk.space.error.threshold") != val.end())
    {
        if(!val["disk.space.error.threshold"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["disk.space.error.threshold"]);
            setDiskSpaceErrorThreshold( newItem );
        }
        
    }
    
}


ConfigNodePropertyArray ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckProperties::getHcTags() const
{
    return m_Hc_tags;
}
void ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckProperties::setHcTags(ConfigNodePropertyArray const& value)
{
    m_Hc_tags = value;
    m_Hc_tagsIsSet = true;
}
bool ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckProperties::hcTagsIsSet() const
{
    return m_Hc_tagsIsSet;
}
void ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckProperties::unsetHc_tags()
{
    m_Hc_tagsIsSet = false;
}
ConfigNodePropertyInteger ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckProperties::getDiskSpaceWarnThreshold() const
{
    return m_Disk_space_warn_threshold;
}
void ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckProperties::setDiskSpaceWarnThreshold(ConfigNodePropertyInteger const& value)
{
    m_Disk_space_warn_threshold = value;
    m_Disk_space_warn_thresholdIsSet = true;
}
bool ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckProperties::diskSpaceWarnThresholdIsSet() const
{
    return m_Disk_space_warn_thresholdIsSet;
}
void ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckProperties::unsetDisk_space_warn_threshold()
{
    m_Disk_space_warn_thresholdIsSet = false;
}
ConfigNodePropertyInteger ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckProperties::getDiskSpaceErrorThreshold() const
{
    return m_Disk_space_error_threshold;
}
void ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckProperties::setDiskSpaceErrorThreshold(ConfigNodePropertyInteger const& value)
{
    m_Disk_space_error_threshold = value;
    m_Disk_space_error_thresholdIsSet = true;
}
bool ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckProperties::diskSpaceErrorThresholdIsSet() const
{
    return m_Disk_space_error_thresholdIsSet;
}
void ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckProperties::unsetDisk_space_error_threshold()
{
    m_Disk_space_error_thresholdIsSet = false;
}

}
}
}
}

