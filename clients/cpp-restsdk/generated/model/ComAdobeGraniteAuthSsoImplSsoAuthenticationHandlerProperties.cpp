/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties::ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties()
{
    m_PathIsSet = false;
    m_Service_rankingIsSet = false;
    m_Jaas_controlFlagIsSet = false;
    m_Jaas_realmNameIsSet = false;
    m_Jaas_rankingIsSet = false;
    m_HeadersIsSet = false;
    m_CookiesIsSet = false;
    m_ParametersIsSet = false;
    m_UsermapIsSet = false;
    m_FormatIsSet = false;
    m_TrustedCredentialsAttributeIsSet = false;
}

ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties::~ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties()
{
}

void ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_PathIsSet)
    {
        val[utility::conversions::to_string_t("path")] = ModelBase::toJson(m_Path);
    }
    if(m_Service_rankingIsSet)
    {
        val[utility::conversions::to_string_t("service.ranking")] = ModelBase::toJson(m_Service_ranking);
    }
    if(m_Jaas_controlFlagIsSet)
    {
        val[utility::conversions::to_string_t("jaas.controlFlag")] = ModelBase::toJson(m_Jaas_controlFlag);
    }
    if(m_Jaas_realmNameIsSet)
    {
        val[utility::conversions::to_string_t("jaas.realmName")] = ModelBase::toJson(m_Jaas_realmName);
    }
    if(m_Jaas_rankingIsSet)
    {
        val[utility::conversions::to_string_t("jaas.ranking")] = ModelBase::toJson(m_Jaas_ranking);
    }
    if(m_HeadersIsSet)
    {
        val[utility::conversions::to_string_t("headers")] = ModelBase::toJson(m_Headers);
    }
    if(m_CookiesIsSet)
    {
        val[utility::conversions::to_string_t("cookies")] = ModelBase::toJson(m_Cookies);
    }
    if(m_ParametersIsSet)
    {
        val[utility::conversions::to_string_t("parameters")] = ModelBase::toJson(m_Parameters);
    }
    if(m_UsermapIsSet)
    {
        val[utility::conversions::to_string_t("usermap")] = ModelBase::toJson(m_Usermap);
    }
    if(m_FormatIsSet)
    {
        val[utility::conversions::to_string_t("format")] = ModelBase::toJson(m_Format);
    }
    if(m_TrustedCredentialsAttributeIsSet)
    {
        val[utility::conversions::to_string_t("trustedCredentialsAttribute")] = ModelBase::toJson(m_TrustedCredentialsAttribute);
    }

    return val;
}

void ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("path")))
    {
        if(!val[utility::conversions::to_string_t("path")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("path")]);
            setPath( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("service.ranking")))
    {
        if(!val[utility::conversions::to_string_t("service.ranking")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("service.ranking")]);
            setServiceRanking( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("jaas.controlFlag")))
    {
        if(!val[utility::conversions::to_string_t("jaas.controlFlag")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("jaas.controlFlag")]);
            setJaasControlFlag( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("jaas.realmName")))
    {
        if(!val[utility::conversions::to_string_t("jaas.realmName")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("jaas.realmName")]);
            setJaasRealmName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("jaas.ranking")))
    {
        if(!val[utility::conversions::to_string_t("jaas.ranking")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("jaas.ranking")]);
            setJaasRanking( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("headers")))
    {
        if(!val[utility::conversions::to_string_t("headers")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("headers")]);
            setHeaders( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cookies")))
    {
        if(!val[utility::conversions::to_string_t("cookies")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("cookies")]);
            setCookies( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("parameters")))
    {
        if(!val[utility::conversions::to_string_t("parameters")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("parameters")]);
            setParameters( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("usermap")))
    {
        if(!val[utility::conversions::to_string_t("usermap")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("usermap")]);
            setUsermap( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("format")))
    {
        if(!val[utility::conversions::to_string_t("format")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("format")]);
            setFormat( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("trustedCredentialsAttribute")))
    {
        if(!val[utility::conversions::to_string_t("trustedCredentialsAttribute")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("trustedCredentialsAttribute")]);
            setTrustedCredentialsAttribute( newItem );
        }
    }
}

void ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_PathIsSet)
    {
        if (m_Path.get())
        {
            m_Path->toMultipart(multipart, utility::conversions::to_string_t("path."));
        }
    }
    if(m_Service_rankingIsSet)
    {
        if (m_Service_ranking.get())
        {
            m_Service_ranking->toMultipart(multipart, utility::conversions::to_string_t("service.ranking."));
        }
    }
    if(m_Jaas_controlFlagIsSet)
    {
        if (m_Jaas_controlFlag.get())
        {
            m_Jaas_controlFlag->toMultipart(multipart, utility::conversions::to_string_t("jaas.controlFlag."));
        }
    }
    if(m_Jaas_realmNameIsSet)
    {
        if (m_Jaas_realmName.get())
        {
            m_Jaas_realmName->toMultipart(multipart, utility::conversions::to_string_t("jaas.realmName."));
        }
    }
    if(m_Jaas_rankingIsSet)
    {
        if (m_Jaas_ranking.get())
        {
            m_Jaas_ranking->toMultipart(multipart, utility::conversions::to_string_t("jaas.ranking."));
        }
    }
    if(m_HeadersIsSet)
    {
        if (m_Headers.get())
        {
            m_Headers->toMultipart(multipart, utility::conversions::to_string_t("headers."));
        }
    }
    if(m_CookiesIsSet)
    {
        if (m_Cookies.get())
        {
            m_Cookies->toMultipart(multipart, utility::conversions::to_string_t("cookies."));
        }
    }
    if(m_ParametersIsSet)
    {
        if (m_Parameters.get())
        {
            m_Parameters->toMultipart(multipart, utility::conversions::to_string_t("parameters."));
        }
    }
    if(m_UsermapIsSet)
    {
        if (m_Usermap.get())
        {
            m_Usermap->toMultipart(multipart, utility::conversions::to_string_t("usermap."));
        }
    }
    if(m_FormatIsSet)
    {
        if (m_Format.get())
        {
            m_Format->toMultipart(multipart, utility::conversions::to_string_t("format."));
        }
    }
    if(m_TrustedCredentialsAttributeIsSet)
    {
        if (m_TrustedCredentialsAttribute.get())
        {
            m_TrustedCredentialsAttribute->toMultipart(multipart, utility::conversions::to_string_t("trustedCredentialsAttribute."));
        }
    }
}

void ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("path")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("path")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("path."));
            setPath( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("service.ranking")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("service.ranking")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("service.ranking."));
            setServiceRanking( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("jaas.controlFlag")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("jaas.controlFlag")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("jaas.controlFlag."));
            setJaasControlFlag( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("jaas.realmName")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("jaas.realmName")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("jaas.realmName."));
            setJaasRealmName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("jaas.ranking")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("jaas.ranking")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("jaas.ranking."));
            setJaasRanking( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("headers")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("headers")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("headers."));
            setHeaders( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cookies")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cookies")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cookies."));
            setCookies( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parameters")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("parameters")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("parameters."));
            setParameters( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("usermap")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("usermap")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("usermap."));
            setUsermap( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("format")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("format")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("format."));
            setFormat( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("trustedCredentialsAttribute")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("trustedCredentialsAttribute")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("trustedCredentialsAttribute."));
            setTrustedCredentialsAttribute( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties::getPath() const
{
    return m_Path;
}


void ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties::setPath(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Path = value;
    m_PathIsSet = true;
}
bool ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties::pathIsSet() const
{
    return m_PathIsSet;
}

void ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties::unsetPath()
{
    m_PathIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties::getServiceRanking() const
{
    return m_Service_ranking;
}


void ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties::setServiceRanking(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Service_ranking = value;
    m_Service_rankingIsSet = true;
}
bool ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties::serviceRankingIsSet() const
{
    return m_Service_rankingIsSet;
}

void ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties::unsetService_ranking()
{
    m_Service_rankingIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties::getJaasControlFlag() const
{
    return m_Jaas_controlFlag;
}


void ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties::setJaasControlFlag(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Jaas_controlFlag = value;
    m_Jaas_controlFlagIsSet = true;
}
bool ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties::jaasControlFlagIsSet() const
{
    return m_Jaas_controlFlagIsSet;
}

void ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties::unsetJaas_controlFlag()
{
    m_Jaas_controlFlagIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties::getJaasRealmName() const
{
    return m_Jaas_realmName;
}


void ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties::setJaasRealmName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Jaas_realmName = value;
    m_Jaas_realmNameIsSet = true;
}
bool ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties::jaasRealmNameIsSet() const
{
    return m_Jaas_realmNameIsSet;
}

void ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties::unsetJaas_realmName()
{
    m_Jaas_realmNameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties::getJaasRanking() const
{
    return m_Jaas_ranking;
}


void ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties::setJaasRanking(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Jaas_ranking = value;
    m_Jaas_rankingIsSet = true;
}
bool ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties::jaasRankingIsSet() const
{
    return m_Jaas_rankingIsSet;
}

void ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties::unsetJaas_ranking()
{
    m_Jaas_rankingIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties::getHeaders() const
{
    return m_Headers;
}


void ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties::setHeaders(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Headers = value;
    m_HeadersIsSet = true;
}
bool ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties::headersIsSet() const
{
    return m_HeadersIsSet;
}

void ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties::unsetHeaders()
{
    m_HeadersIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties::getCookies() const
{
    return m_Cookies;
}


void ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties::setCookies(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Cookies = value;
    m_CookiesIsSet = true;
}
bool ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties::cookiesIsSet() const
{
    return m_CookiesIsSet;
}

void ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties::unsetCookies()
{
    m_CookiesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties::getParameters() const
{
    return m_Parameters;
}


void ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties::setParameters(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Parameters = value;
    m_ParametersIsSet = true;
}
bool ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties::parametersIsSet() const
{
    return m_ParametersIsSet;
}

void ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties::unsetParameters()
{
    m_ParametersIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties::getUsermap() const
{
    return m_Usermap;
}


void ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties::setUsermap(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Usermap = value;
    m_UsermapIsSet = true;
}
bool ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties::usermapIsSet() const
{
    return m_UsermapIsSet;
}

void ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties::unsetUsermap()
{
    m_UsermapIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties::getFormat() const
{
    return m_Format;
}


void ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties::setFormat(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Format = value;
    m_FormatIsSet = true;
}
bool ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties::formatIsSet() const
{
    return m_FormatIsSet;
}

void ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties::unsetFormat()
{
    m_FormatIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties::getTrustedCredentialsAttribute() const
{
    return m_TrustedCredentialsAttribute;
}


void ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties::setTrustedCredentialsAttribute(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_TrustedCredentialsAttribute = value;
    m_TrustedCredentialsAttributeIsSet = true;
}
bool ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties::trustedCredentialsAttributeIsSet() const
{
    return m_TrustedCredentialsAttributeIsSet;
}

void ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties::unsetTrustedCredentialsAttribute()
{
    m_TrustedCredentialsAttributeIsSet = false;
}

}
}
}
}

