/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties
    /// </summary>
    [DataContract]
    public partial class ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties :  IEquatable<ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties" /> class.
        /// </summary>
        /// <param name="jmxObjectname">jmxObjectname.</param>
        /// <param name="propertyMeasureEnabled">propertyMeasureEnabled.</param>
        /// <param name="propertyName">propertyName.</param>
        /// <param name="propertyMaxWaitMs">propertyMaxWaitMs.</param>
        /// <param name="propertyMaxRate">propertyMaxRate.</param>
        /// <param name="fulltextMeasureEnabled">fulltextMeasureEnabled.</param>
        /// <param name="fulltextName">fulltextName.</param>
        /// <param name="fulltextMaxWaitMs">fulltextMaxWaitMs.</param>
        /// <param name="fulltextMaxRate">fulltextMaxRate.</param>
        public ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties(ConfigNodePropertyString jmxObjectname = default(ConfigNodePropertyString), ConfigNodePropertyBoolean propertyMeasureEnabled = default(ConfigNodePropertyBoolean), ConfigNodePropertyString propertyName = default(ConfigNodePropertyString), ConfigNodePropertyInteger propertyMaxWaitMs = default(ConfigNodePropertyInteger), ConfigNodePropertyFloat propertyMaxRate = default(ConfigNodePropertyFloat), ConfigNodePropertyBoolean fulltextMeasureEnabled = default(ConfigNodePropertyBoolean), ConfigNodePropertyString fulltextName = default(ConfigNodePropertyString), ConfigNodePropertyInteger fulltextMaxWaitMs = default(ConfigNodePropertyInteger), ConfigNodePropertyFloat fulltextMaxRate = default(ConfigNodePropertyFloat))
        {
            this.JmxObjectname = jmxObjectname;
            this.PropertyMeasureEnabled = propertyMeasureEnabled;
            this.PropertyName = propertyName;
            this.PropertyMaxWaitMs = propertyMaxWaitMs;
            this.PropertyMaxRate = propertyMaxRate;
            this.FulltextMeasureEnabled = fulltextMeasureEnabled;
            this.FulltextName = fulltextName;
            this.FulltextMaxWaitMs = fulltextMaxWaitMs;
            this.FulltextMaxRate = fulltextMaxRate;
        }
        
        /// <summary>
        /// Gets or Sets JmxObjectname
        /// </summary>
        [DataMember(Name="jmx.objectname", EmitDefaultValue=false)]
        public ConfigNodePropertyString JmxObjectname { get; set; }

        /// <summary>
        /// Gets or Sets PropertyMeasureEnabled
        /// </summary>
        [DataMember(Name="property.measure.enabled", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean PropertyMeasureEnabled { get; set; }

        /// <summary>
        /// Gets or Sets PropertyName
        /// </summary>
        [DataMember(Name="property.name", EmitDefaultValue=false)]
        public ConfigNodePropertyString PropertyName { get; set; }

        /// <summary>
        /// Gets or Sets PropertyMaxWaitMs
        /// </summary>
        [DataMember(Name="property.max.wait.ms", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger PropertyMaxWaitMs { get; set; }

        /// <summary>
        /// Gets or Sets PropertyMaxRate
        /// </summary>
        [DataMember(Name="property.max.rate", EmitDefaultValue=false)]
        public ConfigNodePropertyFloat PropertyMaxRate { get; set; }

        /// <summary>
        /// Gets or Sets FulltextMeasureEnabled
        /// </summary>
        [DataMember(Name="fulltext.measure.enabled", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean FulltextMeasureEnabled { get; set; }

        /// <summary>
        /// Gets or Sets FulltextName
        /// </summary>
        [DataMember(Name="fulltext.name", EmitDefaultValue=false)]
        public ConfigNodePropertyString FulltextName { get; set; }

        /// <summary>
        /// Gets or Sets FulltextMaxWaitMs
        /// </summary>
        [DataMember(Name="fulltext.max.wait.ms", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger FulltextMaxWaitMs { get; set; }

        /// <summary>
        /// Gets or Sets FulltextMaxRate
        /// </summary>
        [DataMember(Name="fulltext.max.rate", EmitDefaultValue=false)]
        public ConfigNodePropertyFloat FulltextMaxRate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties {\n");
            sb.Append("  JmxObjectname: ").Append(JmxObjectname).Append("\n");
            sb.Append("  PropertyMeasureEnabled: ").Append(PropertyMeasureEnabled).Append("\n");
            sb.Append("  PropertyName: ").Append(PropertyName).Append("\n");
            sb.Append("  PropertyMaxWaitMs: ").Append(PropertyMaxWaitMs).Append("\n");
            sb.Append("  PropertyMaxRate: ").Append(PropertyMaxRate).Append("\n");
            sb.Append("  FulltextMeasureEnabled: ").Append(FulltextMeasureEnabled).Append("\n");
            sb.Append("  FulltextName: ").Append(FulltextName).Append("\n");
            sb.Append("  FulltextMaxWaitMs: ").Append(FulltextMaxWaitMs).Append("\n");
            sb.Append("  FulltextMaxRate: ").Append(FulltextMaxRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties);
        }

        /// <summary>
        /// Returns true if ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.JmxObjectname == input.JmxObjectname ||
                    (this.JmxObjectname != null &&
                    this.JmxObjectname.Equals(input.JmxObjectname))
                ) && 
                (
                    this.PropertyMeasureEnabled == input.PropertyMeasureEnabled ||
                    (this.PropertyMeasureEnabled != null &&
                    this.PropertyMeasureEnabled.Equals(input.PropertyMeasureEnabled))
                ) && 
                (
                    this.PropertyName == input.PropertyName ||
                    (this.PropertyName != null &&
                    this.PropertyName.Equals(input.PropertyName))
                ) && 
                (
                    this.PropertyMaxWaitMs == input.PropertyMaxWaitMs ||
                    (this.PropertyMaxWaitMs != null &&
                    this.PropertyMaxWaitMs.Equals(input.PropertyMaxWaitMs))
                ) && 
                (
                    this.PropertyMaxRate == input.PropertyMaxRate ||
                    (this.PropertyMaxRate != null &&
                    this.PropertyMaxRate.Equals(input.PropertyMaxRate))
                ) && 
                (
                    this.FulltextMeasureEnabled == input.FulltextMeasureEnabled ||
                    (this.FulltextMeasureEnabled != null &&
                    this.FulltextMeasureEnabled.Equals(input.FulltextMeasureEnabled))
                ) && 
                (
                    this.FulltextName == input.FulltextName ||
                    (this.FulltextName != null &&
                    this.FulltextName.Equals(input.FulltextName))
                ) && 
                (
                    this.FulltextMaxWaitMs == input.FulltextMaxWaitMs ||
                    (this.FulltextMaxWaitMs != null &&
                    this.FulltextMaxWaitMs.Equals(input.FulltextMaxWaitMs))
                ) && 
                (
                    this.FulltextMaxRate == input.FulltextMaxRate ||
                    (this.FulltextMaxRate != null &&
                    this.FulltextMaxRate.Equals(input.FulltextMaxRate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.JmxObjectname != null)
                    hashCode = hashCode * 59 + this.JmxObjectname.GetHashCode();
                if (this.PropertyMeasureEnabled != null)
                    hashCode = hashCode * 59 + this.PropertyMeasureEnabled.GetHashCode();
                if (this.PropertyName != null)
                    hashCode = hashCode * 59 + this.PropertyName.GetHashCode();
                if (this.PropertyMaxWaitMs != null)
                    hashCode = hashCode * 59 + this.PropertyMaxWaitMs.GetHashCode();
                if (this.PropertyMaxRate != null)
                    hashCode = hashCode * 59 + this.PropertyMaxRate.GetHashCode();
                if (this.FulltextMeasureEnabled != null)
                    hashCode = hashCode * 59 + this.FulltextMeasureEnabled.GetHashCode();
                if (this.FulltextName != null)
                    hashCode = hashCode * 59 + this.FulltextName.GetHashCode();
                if (this.FulltextMaxWaitMs != null)
                    hashCode = hashCode * 59 + this.FulltextMaxWaitMs.GetHashCode();
                if (this.FulltextMaxRate != null)
                    hashCode = hashCode * 59 + this.FulltextMaxRate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
