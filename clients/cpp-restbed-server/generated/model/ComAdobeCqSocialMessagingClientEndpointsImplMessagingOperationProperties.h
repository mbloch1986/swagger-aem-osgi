/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties.h
 *
 * 
 */

#ifndef ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties_H_
#define ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties_H_



#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"
#include <memory>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties
{
public:
    ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties();
    virtual ~ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties();
    
    std::string toJsonString();
    void fromJsonString(std::string const& jsonString);

    /////////////////////////////////////////////
    /// ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties members
    
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getMessageProperties() const;
    void setMessageProperties(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getMessageBoxSizeLimit() const;
    void setMessageBoxSizeLimit(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getMessageCountLimit() const;
    void setMessageCountLimit(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getNotifyFailure() const;
    void setNotifyFailure(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getFailureMessageFrom() const;
    void setFailureMessageFrom(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getFailureTemplatePath() const;
    void setFailureTemplatePath(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getMaxRetries() const;
    void setMaxRetries(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getMinWaitBetweenRetries() const;
    void setMinWaitBetweenRetries(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getCountUpdatePoolSize() const;
    void setCountUpdatePoolSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getInboxPath() const;
    void setInboxPath(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getSentitemsPath() const;
    void setSentitemsPath(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getSupportAttachments() const;
    void setSupportAttachments(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getSupportGroupMessaging() const;
    void setSupportGroupMessaging(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getMaxTotalRecipients() const;
    void setMaxTotalRecipients(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getBatchSize() const;
    void setBatchSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getMaxTotalAttachmentSize() const;
    void setMaxTotalAttachmentSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getAttachmentTypeBlacklist() const;
    void setAttachmentTypeBlacklist(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getAllowedAttachmentTypes() const;
    void setAllowedAttachmentTypes(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getServiceSelector() const;
    void setServiceSelector(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getFieldWhitelist() const;
    void setFieldWhitelist(std::shared_ptr<ConfigNodePropertyArray> value);

protected:
    std::shared_ptr<ConfigNodePropertyArray> m_Message_properties;
    std::shared_ptr<ConfigNodePropertyInteger> m_MessageBoxSizeLimit;
    std::shared_ptr<ConfigNodePropertyInteger> m_MessageCountLimit;
    std::shared_ptr<ConfigNodePropertyBoolean> m_NotifyFailure;
    std::shared_ptr<ConfigNodePropertyString> m_FailureMessageFrom;
    std::shared_ptr<ConfigNodePropertyString> m_FailureTemplatePath;
    std::shared_ptr<ConfigNodePropertyInteger> m_MaxRetries;
    std::shared_ptr<ConfigNodePropertyInteger> m_MinWaitBetweenRetries;
    std::shared_ptr<ConfigNodePropertyInteger> m_CountUpdatePoolSize;
    std::shared_ptr<ConfigNodePropertyString> m_Inbox_path;
    std::shared_ptr<ConfigNodePropertyString> m_Sentitems_path;
    std::shared_ptr<ConfigNodePropertyBoolean> m_SupportAttachments;
    std::shared_ptr<ConfigNodePropertyBoolean> m_SupportGroupMessaging;
    std::shared_ptr<ConfigNodePropertyInteger> m_MaxTotalRecipients;
    std::shared_ptr<ConfigNodePropertyInteger> m_BatchSize;
    std::shared_ptr<ConfigNodePropertyInteger> m_MaxTotalAttachmentSize;
    std::shared_ptr<ConfigNodePropertyArray> m_AttachmentTypeBlacklist;
    std::shared_ptr<ConfigNodePropertyArray> m_AllowedAttachmentTypes;
    std::shared_ptr<ConfigNodePropertyString> m_ServiceSelector;
    std::shared_ptr<ConfigNodePropertyArray> m_FieldWhitelist;
};

}
}
}
}

#endif /* ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties_H_ */
