/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ConfigNodePropertyArray.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ConfigNodePropertyArray::ConfigNodePropertyArray()
{
    m_Name = "";
    m_NameIsSet = false;
    m_Optional = false;
    m_OptionalIsSet = false;
    m_Is_set = false;
    m_Is_setIsSet = false;
    m_Type = 0;
    m_TypeIsSet = false;
    m_ValuesIsSet = false;
    m_Description = "";
    m_DescriptionIsSet = false;
    
}

ConfigNodePropertyArray::~ConfigNodePropertyArray()
{
}

void ConfigNodePropertyArray::validate()
{
    // TODO: implement validation
}

nlohmann::json ConfigNodePropertyArray::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_NameIsSet)
    {
        val["name"] = ModelBase::toJson(m_Name);
    }
    if(m_OptionalIsSet)
    {
        val["optional"] = m_Optional;
    }
    if(m_Is_setIsSet)
    {
        val["is_set"] = m_Is_set;
    }
    if(m_TypeIsSet)
    {
        val["type"] = m_Type;
    }
    {
        nlohmann::json jsonArray;
        for( auto& item : m_Values )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["values"] = jsonArray;
        }
    }
    if(m_DescriptionIsSet)
    {
        val["description"] = ModelBase::toJson(m_Description);
    }
    

    return val;
}

void ConfigNodePropertyArray::fromJson(nlohmann::json& val)
{
    if(val.find("name") != val.end())
    {
        setName(val.at("name"));
    }
    if(val.find("optional") != val.end())
    {
        setOptional(val.at("optional"));
    }
    if(val.find("is_set") != val.end())
    {
        setIsSet(val.at("is_set"));
    }
    if(val.find("type") != val.end())
    {
        setType(val.at("type"));
    }
    {
        m_Values.clear();
        nlohmann::json jsonArray;
        if(val.find("values") != val.end())
        {
        for( auto& item : val["values"] )
        {
            m_Values.push_back(item);
            
        }
        }
    }
    if(val.find("description") != val.end())
    {
        setDescription(val.at("description"));
    }
    
}


std::string ConfigNodePropertyArray::getName() const
{
    return m_Name;
}
void ConfigNodePropertyArray::setName(std::string const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool ConfigNodePropertyArray::nameIsSet() const
{
    return m_NameIsSet;
}
void ConfigNodePropertyArray::unsetName()
{
    m_NameIsSet = false;
}
bool ConfigNodePropertyArray::isOptional() const
{
    return m_Optional;
}
void ConfigNodePropertyArray::setOptional(bool const value)
{
    m_Optional = value;
    m_OptionalIsSet = true;
}
bool ConfigNodePropertyArray::optionalIsSet() const
{
    return m_OptionalIsSet;
}
void ConfigNodePropertyArray::unsetOptional()
{
    m_OptionalIsSet = false;
}
bool ConfigNodePropertyArray::isIsSet() const
{
    return m_Is_set;
}
void ConfigNodePropertyArray::setIsSet(bool const value)
{
    m_Is_set = value;
    m_Is_setIsSet = true;
}
bool ConfigNodePropertyArray::isSetIsSet() const
{
    return m_Is_setIsSet;
}
void ConfigNodePropertyArray::unsetIs_set()
{
    m_Is_setIsSet = false;
}
int32_t ConfigNodePropertyArray::getType() const
{
    return m_Type;
}
void ConfigNodePropertyArray::setType(int32_t const value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool ConfigNodePropertyArray::typeIsSet() const
{
    return m_TypeIsSet;
}
void ConfigNodePropertyArray::unsetType()
{
    m_TypeIsSet = false;
}
std::vector<std::string>& ConfigNodePropertyArray::getValues()
{
    return m_Values;
}
bool ConfigNodePropertyArray::valuesIsSet() const
{
    return m_ValuesIsSet;
}
void ConfigNodePropertyArray::unsetValues()
{
    m_ValuesIsSet = false;
}
std::string ConfigNodePropertyArray::getDescription() const
{
    return m_Description;
}
void ConfigNodePropertyArray::setDescription(std::string const& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool ConfigNodePropertyArray::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}
void ConfigNodePropertyArray::unsetDescription()
{
    m_DescriptionIsSet = false;
}

}
}
}
}

