/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWProperties::OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWProperties()
{
    m_UsersIsSet = false;
    m_GroupsIsSet = false;
}

OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWProperties::~OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWProperties()
{
}

void OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_UsersIsSet)
    {
        val[utility::conversions::to_string_t("users")] = ModelBase::toJson(m_Users);
    }
    if(m_GroupsIsSet)
    {
        val[utility::conversions::to_string_t("groups")] = ModelBase::toJson(m_Groups);
    }

    return val;
}

void OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("users")))
    {
        if(!val[utility::conversions::to_string_t("users")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("users")]);
            setUsers( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("groups")))
    {
        if(!val[utility::conversions::to_string_t("groups")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("groups")]);
            setGroups( newItem );
        }
    }
}

void OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_UsersIsSet)
    {
        if (m_Users.get())
        {
            m_Users->toMultipart(multipart, utility::conversions::to_string_t("users."));
        }
    }
    if(m_GroupsIsSet)
    {
        if (m_Groups.get())
        {
            m_Groups->toMultipart(multipart, utility::conversions::to_string_t("groups."));
        }
    }
}

void OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("users")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("users")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("users."));
            setUsers( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("groups")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("groups")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("groups."));
            setGroups( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWProperties::getUsers() const
{
    return m_Users;
}


void OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWProperties::setUsers(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Users = value;
    m_UsersIsSet = true;
}
bool OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWProperties::usersIsSet() const
{
    return m_UsersIsSet;
}

void OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWProperties::unsetUsers()
{
    m_UsersIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWProperties::getGroups() const
{
    return m_Groups;
}


void OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWProperties::setGroups(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Groups = value;
    m_GroupsIsSet = true;
}
bool OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWProperties::groupsIsSet() const
{
    return m_GroupsIsSet;
}

void OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWProperties::unsetGroups()
{
    m_GroupsIsSet = false;
}

}
}
}
}

