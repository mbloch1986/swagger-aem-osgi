/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties::OAIComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties::OAIComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties() {
    init();
}

OAIComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties::~OAIComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties() {
    this->cleanup();
}

void
OAIComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties::init() {
    watchwords_positive = new OAIConfigNodePropertyArray();
    m_watchwords_positive_isSet = false;
    watchwords_negative = new OAIConfigNodePropertyArray();
    m_watchwords_negative_isSet = false;
    watchwords_path = new OAIConfigNodePropertyString();
    m_watchwords_path_isSet = false;
    sentiment_path = new OAIConfigNodePropertyString();
    m_sentiment_path_isSet = false;
}

void
OAIComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties::cleanup() {
    if(watchwords_positive != nullptr) { 
        delete watchwords_positive;
    }
    if(watchwords_negative != nullptr) { 
        delete watchwords_negative;
    }
    if(watchwords_path != nullptr) { 
        delete watchwords_path;
    }
    if(sentiment_path != nullptr) { 
        delete sentiment_path;
    }
}

OAIComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties*
OAIComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&watchwords_positive, pJson["watchwords.positive"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&watchwords_negative, pJson["watchwords.negative"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&watchwords_path, pJson["watchwords.path"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&sentiment_path, pJson["sentiment.path"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
}

QString
OAIComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties::asJsonObject() {
    QJsonObject obj;
    if((watchwords_positive != nullptr) && (watchwords_positive->isSet())){
        toJsonValue(QString("watchwords.positive"), watchwords_positive, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((watchwords_negative != nullptr) && (watchwords_negative->isSet())){
        toJsonValue(QString("watchwords.negative"), watchwords_negative, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((watchwords_path != nullptr) && (watchwords_path->isSet())){
        toJsonValue(QString("watchwords.path"), watchwords_path, obj, QString("OAIConfigNodePropertyString"));
    }
    if((sentiment_path != nullptr) && (sentiment_path->isSet())){
        toJsonValue(QString("sentiment.path"), sentiment_path, obj, QString("OAIConfigNodePropertyString"));
    }

    return obj;
}

OAIConfigNodePropertyArray*
OAIComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties::getWatchwordsPositive() {
    return watchwords_positive;
}
void
OAIComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties::setWatchwordsPositive(OAIConfigNodePropertyArray* watchwords_positive) {
    this->watchwords_positive = watchwords_positive;
    this->m_watchwords_positive_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties::getWatchwordsNegative() {
    return watchwords_negative;
}
void
OAIComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties::setWatchwordsNegative(OAIConfigNodePropertyArray* watchwords_negative) {
    this->watchwords_negative = watchwords_negative;
    this->m_watchwords_negative_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties::getWatchwordsPath() {
    return watchwords_path;
}
void
OAIComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties::setWatchwordsPath(OAIConfigNodePropertyString* watchwords_path) {
    this->watchwords_path = watchwords_path;
    this->m_watchwords_path_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties::getSentimentPath() {
    return sentiment_path;
}
void
OAIComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties::setSentimentPath(OAIConfigNodePropertyString* sentiment_path) {
    this->sentiment_path = sentiment_path;
    this->m_sentiment_path_isSet = true;
}


bool
OAIComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(watchwords_positive != nullptr && watchwords_positive->isSet()){ isObjectUpdated = true; break;}
        if(watchwords_negative != nullptr && watchwords_negative->isSet()){ isObjectUpdated = true; break;}
        if(watchwords_path != nullptr && watchwords_path->isSet()){ isObjectUpdated = true; break;}
        if(sentiment_path != nullptr && sentiment_path->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

