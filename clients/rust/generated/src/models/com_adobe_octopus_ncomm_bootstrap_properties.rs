/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeOctopusNcommBootstrapProperties {
  #[serde(rename = "maxConnections")]
  max_connections: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "maxRequests")]
  max_requests: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "requestTimeout")]
  request_timeout: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "requestRetries")]
  request_retries: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "launchTimeout")]
  launch_timeout: Option<::models::ConfigNodePropertyInteger>
}

impl ComAdobeOctopusNcommBootstrapProperties {
  pub fn new() -> ComAdobeOctopusNcommBootstrapProperties {
    ComAdobeOctopusNcommBootstrapProperties {
      max_connections: None,
      max_requests: None,
      request_timeout: None,
      request_retries: None,
      launch_timeout: None
    }
  }

  pub fn set_max_connections(&mut self, max_connections: ::models::ConfigNodePropertyInteger) {
    self.max_connections = Some(max_connections);
  }

  pub fn with_max_connections(mut self, max_connections: ::models::ConfigNodePropertyInteger) -> ComAdobeOctopusNcommBootstrapProperties {
    self.max_connections = Some(max_connections);
    self
  }

  pub fn max_connections(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.max_connections.as_ref()
  }

  pub fn reset_max_connections(&mut self) {
    self.max_connections = None;
  }

  pub fn set_max_requests(&mut self, max_requests: ::models::ConfigNodePropertyInteger) {
    self.max_requests = Some(max_requests);
  }

  pub fn with_max_requests(mut self, max_requests: ::models::ConfigNodePropertyInteger) -> ComAdobeOctopusNcommBootstrapProperties {
    self.max_requests = Some(max_requests);
    self
  }

  pub fn max_requests(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.max_requests.as_ref()
  }

  pub fn reset_max_requests(&mut self) {
    self.max_requests = None;
  }

  pub fn set_request_timeout(&mut self, request_timeout: ::models::ConfigNodePropertyInteger) {
    self.request_timeout = Some(request_timeout);
  }

  pub fn with_request_timeout(mut self, request_timeout: ::models::ConfigNodePropertyInteger) -> ComAdobeOctopusNcommBootstrapProperties {
    self.request_timeout = Some(request_timeout);
    self
  }

  pub fn request_timeout(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.request_timeout.as_ref()
  }

  pub fn reset_request_timeout(&mut self) {
    self.request_timeout = None;
  }

  pub fn set_request_retries(&mut self, request_retries: ::models::ConfigNodePropertyInteger) {
    self.request_retries = Some(request_retries);
  }

  pub fn with_request_retries(mut self, request_retries: ::models::ConfigNodePropertyInteger) -> ComAdobeOctopusNcommBootstrapProperties {
    self.request_retries = Some(request_retries);
    self
  }

  pub fn request_retries(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.request_retries.as_ref()
  }

  pub fn reset_request_retries(&mut self) {
    self.request_retries = None;
  }

  pub fn set_launch_timeout(&mut self, launch_timeout: ::models::ConfigNodePropertyInteger) {
    self.launch_timeout = Some(launch_timeout);
  }

  pub fn with_launch_timeout(mut self, launch_timeout: ::models::ConfigNodePropertyInteger) -> ComAdobeOctopusNcommBootstrapProperties {
    self.launch_timeout = Some(launch_timeout);
    self
  }

  pub fn launch_timeout(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.launch_timeout.as_ref()
  }

  pub fn reset_launch_timeout(&mut self) {
    self.launch_timeout = None;
  }

}



