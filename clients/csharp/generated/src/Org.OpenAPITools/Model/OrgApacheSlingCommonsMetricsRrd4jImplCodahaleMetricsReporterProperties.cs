/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties
    /// </summary>
    [DataContract]
    public partial class OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties :  IEquatable<OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties" /> class.
        /// </summary>
        /// <param name="datasources">datasources.</param>
        /// <param name="step">step.</param>
        /// <param name="archives">archives.</param>
        /// <param name="path">path.</param>
        public OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties(ConfigNodePropertyArray datasources = default(ConfigNodePropertyArray), ConfigNodePropertyInteger step = default(ConfigNodePropertyInteger), ConfigNodePropertyArray archives = default(ConfigNodePropertyArray), ConfigNodePropertyString path = default(ConfigNodePropertyString))
        {
            this.Datasources = datasources;
            this.Step = step;
            this.Archives = archives;
            this.Path = path;
        }
        
        /// <summary>
        /// Gets or Sets Datasources
        /// </summary>
        [DataMember(Name="datasources", EmitDefaultValue=false)]
        public ConfigNodePropertyArray Datasources { get; set; }

        /// <summary>
        /// Gets or Sets Step
        /// </summary>
        [DataMember(Name="step", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger Step { get; set; }

        /// <summary>
        /// Gets or Sets Archives
        /// </summary>
        [DataMember(Name="archives", EmitDefaultValue=false)]
        public ConfigNodePropertyArray Archives { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public ConfigNodePropertyString Path { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties {\n");
            sb.Append("  Datasources: ").Append(Datasources).Append("\n");
            sb.Append("  Step: ").Append(Step).Append("\n");
            sb.Append("  Archives: ").Append(Archives).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties);
        }

        /// <summary>
        /// Returns true if OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Datasources == input.Datasources ||
                    (this.Datasources != null &&
                    this.Datasources.Equals(input.Datasources))
                ) && 
                (
                    this.Step == input.Step ||
                    (this.Step != null &&
                    this.Step.Equals(input.Step))
                ) && 
                (
                    this.Archives == input.Archives ||
                    (this.Archives != null &&
                    this.Archives.Equals(input.Archives))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Datasources != null)
                    hashCode = hashCode * 59 + this.Datasources.GetHashCode();
                if (this.Step != null)
                    hashCode = hashCode * 59 + this.Step.GetHashCode();
                if (this.Archives != null)
                    hashCode = hashCode * 59 + this.Archives.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
