/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties()
{
    m_Pattern_timeIsSet = false;
    m_Pattern_newlineIsSet = false;
    m_Pattern_dayOfMonthIsSet = false;
    m_Pattern_monthIsSet = false;
    m_Pattern_yearIsSet = false;
    m_Pattern_dateIsSet = false;
    m_Pattern_dateTimeIsSet = false;
    m_Pattern_emailIsSet = false;
}

ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::~ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties()
{
}

void ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Pattern_timeIsSet)
    {
        val[utility::conversions::to_string_t("pattern.time")] = ModelBase::toJson(m_Pattern_time);
    }
    if(m_Pattern_newlineIsSet)
    {
        val[utility::conversions::to_string_t("pattern.newline")] = ModelBase::toJson(m_Pattern_newline);
    }
    if(m_Pattern_dayOfMonthIsSet)
    {
        val[utility::conversions::to_string_t("pattern.dayOfMonth")] = ModelBase::toJson(m_Pattern_dayOfMonth);
    }
    if(m_Pattern_monthIsSet)
    {
        val[utility::conversions::to_string_t("pattern.month")] = ModelBase::toJson(m_Pattern_month);
    }
    if(m_Pattern_yearIsSet)
    {
        val[utility::conversions::to_string_t("pattern.year")] = ModelBase::toJson(m_Pattern_year);
    }
    if(m_Pattern_dateIsSet)
    {
        val[utility::conversions::to_string_t("pattern.date")] = ModelBase::toJson(m_Pattern_date);
    }
    if(m_Pattern_dateTimeIsSet)
    {
        val[utility::conversions::to_string_t("pattern.dateTime")] = ModelBase::toJson(m_Pattern_dateTime);
    }
    if(m_Pattern_emailIsSet)
    {
        val[utility::conversions::to_string_t("pattern.email")] = ModelBase::toJson(m_Pattern_email);
    }

    return val;
}

void ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("pattern.time")))
    {
        if(!val[utility::conversions::to_string_t("pattern.time")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("pattern.time")]);
            setPatternTime( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pattern.newline")))
    {
        if(!val[utility::conversions::to_string_t("pattern.newline")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("pattern.newline")]);
            setPatternNewline( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pattern.dayOfMonth")))
    {
        if(!val[utility::conversions::to_string_t("pattern.dayOfMonth")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("pattern.dayOfMonth")]);
            setPatternDayOfMonth( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pattern.month")))
    {
        if(!val[utility::conversions::to_string_t("pattern.month")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("pattern.month")]);
            setPatternMonth( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pattern.year")))
    {
        if(!val[utility::conversions::to_string_t("pattern.year")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("pattern.year")]);
            setPatternYear( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pattern.date")))
    {
        if(!val[utility::conversions::to_string_t("pattern.date")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("pattern.date")]);
            setPatternDate( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pattern.dateTime")))
    {
        if(!val[utility::conversions::to_string_t("pattern.dateTime")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("pattern.dateTime")]);
            setPatternDateTime( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pattern.email")))
    {
        if(!val[utility::conversions::to_string_t("pattern.email")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("pattern.email")]);
            setPatternEmail( newItem );
        }
    }
}

void ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Pattern_timeIsSet)
    {
        if (m_Pattern_time.get())
        {
            m_Pattern_time->toMultipart(multipart, utility::conversions::to_string_t("pattern.time."));
        }
    }
    if(m_Pattern_newlineIsSet)
    {
        if (m_Pattern_newline.get())
        {
            m_Pattern_newline->toMultipart(multipart, utility::conversions::to_string_t("pattern.newline."));
        }
    }
    if(m_Pattern_dayOfMonthIsSet)
    {
        if (m_Pattern_dayOfMonth.get())
        {
            m_Pattern_dayOfMonth->toMultipart(multipart, utility::conversions::to_string_t("pattern.dayOfMonth."));
        }
    }
    if(m_Pattern_monthIsSet)
    {
        if (m_Pattern_month.get())
        {
            m_Pattern_month->toMultipart(multipart, utility::conversions::to_string_t("pattern.month."));
        }
    }
    if(m_Pattern_yearIsSet)
    {
        if (m_Pattern_year.get())
        {
            m_Pattern_year->toMultipart(multipart, utility::conversions::to_string_t("pattern.year."));
        }
    }
    if(m_Pattern_dateIsSet)
    {
        if (m_Pattern_date.get())
        {
            m_Pattern_date->toMultipart(multipart, utility::conversions::to_string_t("pattern.date."));
        }
    }
    if(m_Pattern_dateTimeIsSet)
    {
        if (m_Pattern_dateTime.get())
        {
            m_Pattern_dateTime->toMultipart(multipart, utility::conversions::to_string_t("pattern.dateTime."));
        }
    }
    if(m_Pattern_emailIsSet)
    {
        if (m_Pattern_email.get())
        {
            m_Pattern_email->toMultipart(multipart, utility::conversions::to_string_t("pattern.email."));
        }
    }
}

void ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("pattern.time")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("pattern.time")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("pattern.time."));
            setPatternTime( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pattern.newline")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("pattern.newline")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("pattern.newline."));
            setPatternNewline( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pattern.dayOfMonth")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("pattern.dayOfMonth")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("pattern.dayOfMonth."));
            setPatternDayOfMonth( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pattern.month")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("pattern.month")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("pattern.month."));
            setPatternMonth( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pattern.year")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("pattern.year")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("pattern.year."));
            setPatternYear( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pattern.date")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("pattern.date")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("pattern.date."));
            setPatternDate( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pattern.dateTime")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("pattern.dateTime")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("pattern.dateTime."));
            setPatternDateTime( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pattern.email")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("pattern.email")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("pattern.email."));
            setPatternEmail( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::getPatternTime() const
{
    return m_Pattern_time;
}


void ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::setPatternTime(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Pattern_time = value;
    m_Pattern_timeIsSet = true;
}
bool ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::patternTimeIsSet() const
{
    return m_Pattern_timeIsSet;
}

void ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::unsetPattern_time()
{
    m_Pattern_timeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::getPatternNewline() const
{
    return m_Pattern_newline;
}


void ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::setPatternNewline(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Pattern_newline = value;
    m_Pattern_newlineIsSet = true;
}
bool ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::patternNewlineIsSet() const
{
    return m_Pattern_newlineIsSet;
}

void ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::unsetPattern_newline()
{
    m_Pattern_newlineIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::getPatternDayOfMonth() const
{
    return m_Pattern_dayOfMonth;
}


void ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::setPatternDayOfMonth(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Pattern_dayOfMonth = value;
    m_Pattern_dayOfMonthIsSet = true;
}
bool ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::patternDayOfMonthIsSet() const
{
    return m_Pattern_dayOfMonthIsSet;
}

void ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::unsetPattern_dayOfMonth()
{
    m_Pattern_dayOfMonthIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::getPatternMonth() const
{
    return m_Pattern_month;
}


void ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::setPatternMonth(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Pattern_month = value;
    m_Pattern_monthIsSet = true;
}
bool ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::patternMonthIsSet() const
{
    return m_Pattern_monthIsSet;
}

void ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::unsetPattern_month()
{
    m_Pattern_monthIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::getPatternYear() const
{
    return m_Pattern_year;
}


void ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::setPatternYear(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Pattern_year = value;
    m_Pattern_yearIsSet = true;
}
bool ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::patternYearIsSet() const
{
    return m_Pattern_yearIsSet;
}

void ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::unsetPattern_year()
{
    m_Pattern_yearIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::getPatternDate() const
{
    return m_Pattern_date;
}


void ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::setPatternDate(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Pattern_date = value;
    m_Pattern_dateIsSet = true;
}
bool ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::patternDateIsSet() const
{
    return m_Pattern_dateIsSet;
}

void ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::unsetPattern_date()
{
    m_Pattern_dateIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::getPatternDateTime() const
{
    return m_Pattern_dateTime;
}


void ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::setPatternDateTime(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Pattern_dateTime = value;
    m_Pattern_dateTimeIsSet = true;
}
bool ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::patternDateTimeIsSet() const
{
    return m_Pattern_dateTimeIsSet;
}

void ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::unsetPattern_dateTime()
{
    m_Pattern_dateTimeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::getPatternEmail() const
{
    return m_Pattern_email;
}


void ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::setPatternEmail(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Pattern_email = value;
    m_Pattern_emailIsSet = true;
}
bool ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::patternEmailIsSet() const
{
    return m_Pattern_emailIsSet;
}

void ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::unsetPattern_email()
{
    m_Pattern_emailIsSet = false;
}

}
}
}
}

