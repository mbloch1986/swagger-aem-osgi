/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComAdobeGraniteAuthImsImplIMSProviderImplProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeGraniteAuthImsImplIMSProviderImplProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeGraniteAuthImsImplIMSProviderImplProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComAdobeGraniteAuthImsImplIMSProviderImplProperties
    : public ModelBase
{
public:
    ComAdobeGraniteAuthImsImplIMSProviderImplProperties();
    virtual ~ComAdobeGraniteAuthImsImplIMSProviderImplProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ComAdobeGraniteAuthImsImplIMSProviderImplProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOauthProviderId() const;
    bool oauthProviderIdIsSet() const;
    void unsetOauth_provider_id();
    void setOauthProviderId(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOauthProviderImsAuthorizationUrl() const;
    bool oauthProviderImsAuthorizationUrlIsSet() const;
    void unsetOauth_provider_ims_authorization_url();
    void setOauthProviderImsAuthorizationUrl(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOauthProviderImsTokenUrl() const;
    bool oauthProviderImsTokenUrlIsSet() const;
    void unsetOauth_provider_ims_token_url();
    void setOauthProviderImsTokenUrl(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOauthProviderImsProfileUrl() const;
    bool oauthProviderImsProfileUrlIsSet() const;
    void unsetOauth_provider_ims_profile_url();
    void setOauthProviderImsProfileUrl(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getOauthProviderImsExtendedDetailsUrls() const;
    bool oauthProviderImsExtendedDetailsUrlsIsSet() const;
    void unsetOauth_provider_ims_extended_details_urls();
    void setOauthProviderImsExtendedDetailsUrls(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOauthProviderImsValidateTokenUrl() const;
    bool oauthProviderImsValidateTokenUrlIsSet() const;
    void unsetOauth_provider_ims_validate_token_url();
    void setOauthProviderImsValidateTokenUrl(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOauthProviderImsSessionProperty() const;
    bool oauthProviderImsSessionPropertyIsSet() const;
    void unsetOauth_provider_ims_session_property();
    void setOauthProviderImsSessionProperty(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOauthProviderImsServiceTokenClientId() const;
    bool oauthProviderImsServiceTokenClientIdIsSet() const;
    void unsetOauth_provider_ims_service_token_client_id();
    void setOauthProviderImsServiceTokenClientId(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOauthProviderImsServiceTokenClientSecret() const;
    bool oauthProviderImsServiceTokenClientSecretIsSet() const;
    void unsetOauth_provider_ims_service_token_client_secret();
    void setOauthProviderImsServiceTokenClientSecret(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOauthProviderImsServiceToken() const;
    bool oauthProviderImsServiceTokenIsSet() const;
    void unsetOauth_provider_ims_service_token();
    void setOauthProviderImsServiceToken(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getImsOrgRef() const;
    bool imsOrgRefIsSet() const;
    void unsetIms_org_ref();
    void setImsOrgRef(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getImsGroupMapping() const;
    bool imsGroupMappingIsSet() const;
    void unsetIms_group_mapping();
    void setImsGroupMapping(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getOauthProviderImsOnlyLicenseGroup() const;
    bool oauthProviderImsOnlyLicenseGroupIsSet() const;
    void unsetOauth_provider_ims_only_license_group();
    void setOauthProviderImsOnlyLicenseGroup(std::shared_ptr<ConfigNodePropertyBoolean> value);

protected:
    std::shared_ptr<ConfigNodePropertyString> m_Oauth_provider_id;
    bool m_Oauth_provider_idIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Oauth_provider_ims_authorization_url;
    bool m_Oauth_provider_ims_authorization_urlIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Oauth_provider_ims_token_url;
    bool m_Oauth_provider_ims_token_urlIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Oauth_provider_ims_profile_url;
    bool m_Oauth_provider_ims_profile_urlIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_Oauth_provider_ims_extended_details_urls;
    bool m_Oauth_provider_ims_extended_details_urlsIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Oauth_provider_ims_validate_token_url;
    bool m_Oauth_provider_ims_validate_token_urlIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Oauth_provider_ims_session_property;
    bool m_Oauth_provider_ims_session_propertyIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Oauth_provider_ims_service_token_client_id;
    bool m_Oauth_provider_ims_service_token_client_idIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Oauth_provider_ims_service_token_client_secret;
    bool m_Oauth_provider_ims_service_token_client_secretIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Oauth_provider_ims_service_token;
    bool m_Oauth_provider_ims_service_tokenIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Ims_org_ref;
    bool m_Ims_org_refIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_Ims_group_mapping;
    bool m_Ims_group_mappingIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Oauth_provider_ims_only_license_group;
    bool m_Oauth_provider_ims_only_license_groupIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeGraniteAuthImsImplIMSProviderImplProperties_H_ */
