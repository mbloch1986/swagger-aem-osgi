# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.config_node_property_array import ConfigNodePropertyArray  # noqa: F401,E501
from openapi_server.models.config_node_property_boolean import ConfigNodePropertyBoolean  # noqa: F401,E501
from openapi_server import util


class ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mime_allow_empty: ConfigNodePropertyBoolean=None, mime_allowed: ConfigNodePropertyArray=None):  # noqa: E501
        """ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties - a model defined in OpenAPI

        :param mime_allow_empty: The mime_allow_empty of this ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties.  # noqa: E501
        :type mime_allow_empty: ConfigNodePropertyBoolean
        :param mime_allowed: The mime_allowed of this ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties.  # noqa: E501
        :type mime_allowed: ConfigNodePropertyArray
        """
        self.openapi_types = {
            'mime_allow_empty': ConfigNodePropertyBoolean,
            'mime_allowed': ConfigNodePropertyArray
        }

        self.attribute_map = {
            'mime_allow_empty': 'mime.allowEmpty',
            'mime_allowed': 'mime.allowed'
        }

        self._mime_allow_empty = mime_allow_empty
        self._mime_allowed = mime_allowed

    @classmethod
    def from_dict(cls, dikt) -> 'ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The comAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties of this ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties.  # noqa: E501
        :rtype: ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mime_allow_empty(self) -> ConfigNodePropertyBoolean:
        """Gets the mime_allow_empty of this ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties.


        :return: The mime_allow_empty of this ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties.
        :rtype: ConfigNodePropertyBoolean
        """
        return self._mime_allow_empty

    @mime_allow_empty.setter
    def mime_allow_empty(self, mime_allow_empty: ConfigNodePropertyBoolean):
        """Sets the mime_allow_empty of this ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties.


        :param mime_allow_empty: The mime_allow_empty of this ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties.
        :type mime_allow_empty: ConfigNodePropertyBoolean
        """

        self._mime_allow_empty = mime_allow_empty

    @property
    def mime_allowed(self) -> ConfigNodePropertyArray:
        """Gets the mime_allowed of this ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties.


        :return: The mime_allowed of this ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties.
        :rtype: ConfigNodePropertyArray
        """
        return self._mime_allowed

    @mime_allowed.setter
    def mime_allowed(self, mime_allowed: ConfigNodePropertyArray):
        """Sets the mime_allowed of this ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties.


        :param mime_allowed: The mime_allowed of this ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties.
        :type mime_allowed: ConfigNodePropertyArray
        """

        self._mime_allowed = mime_allowed
