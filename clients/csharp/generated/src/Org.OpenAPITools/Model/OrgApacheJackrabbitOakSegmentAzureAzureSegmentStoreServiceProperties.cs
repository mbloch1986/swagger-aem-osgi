/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties
    /// </summary>
    [DataContract]
    public partial class OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties :  IEquatable<OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties" /> class.
        /// </summary>
        /// <param name="accountName">accountName.</param>
        /// <param name="containerName">containerName.</param>
        /// <param name="accessKey">accessKey.</param>
        /// <param name="rootPath">rootPath.</param>
        /// <param name="connectionURL">connectionURL.</param>
        public OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties(ConfigNodePropertyString accountName = default(ConfigNodePropertyString), ConfigNodePropertyString containerName = default(ConfigNodePropertyString), ConfigNodePropertyString accessKey = default(ConfigNodePropertyString), ConfigNodePropertyString rootPath = default(ConfigNodePropertyString), ConfigNodePropertyString connectionURL = default(ConfigNodePropertyString))
        {
            this.AccountName = accountName;
            this.ContainerName = containerName;
            this.AccessKey = accessKey;
            this.RootPath = rootPath;
            this.ConnectionURL = connectionURL;
        }
        
        /// <summary>
        /// Gets or Sets AccountName
        /// </summary>
        [DataMember(Name="accountName", EmitDefaultValue=false)]
        public ConfigNodePropertyString AccountName { get; set; }

        /// <summary>
        /// Gets or Sets ContainerName
        /// </summary>
        [DataMember(Name="containerName", EmitDefaultValue=false)]
        public ConfigNodePropertyString ContainerName { get; set; }

        /// <summary>
        /// Gets or Sets AccessKey
        /// </summary>
        [DataMember(Name="accessKey", EmitDefaultValue=false)]
        public ConfigNodePropertyString AccessKey { get; set; }

        /// <summary>
        /// Gets or Sets RootPath
        /// </summary>
        [DataMember(Name="rootPath", EmitDefaultValue=false)]
        public ConfigNodePropertyString RootPath { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionURL
        /// </summary>
        [DataMember(Name="connectionURL", EmitDefaultValue=false)]
        public ConfigNodePropertyString ConnectionURL { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties {\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  ContainerName: ").Append(ContainerName).Append("\n");
            sb.Append("  AccessKey: ").Append(AccessKey).Append("\n");
            sb.Append("  RootPath: ").Append(RootPath).Append("\n");
            sb.Append("  ConnectionURL: ").Append(ConnectionURL).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties);
        }

        /// <summary>
        /// Returns true if OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountName == input.AccountName ||
                    (this.AccountName != null &&
                    this.AccountName.Equals(input.AccountName))
                ) && 
                (
                    this.ContainerName == input.ContainerName ||
                    (this.ContainerName != null &&
                    this.ContainerName.Equals(input.ContainerName))
                ) && 
                (
                    this.AccessKey == input.AccessKey ||
                    (this.AccessKey != null &&
                    this.AccessKey.Equals(input.AccessKey))
                ) && 
                (
                    this.RootPath == input.RootPath ||
                    (this.RootPath != null &&
                    this.RootPath.Equals(input.RootPath))
                ) && 
                (
                    this.ConnectionURL == input.ConnectionURL ||
                    (this.ConnectionURL != null &&
                    this.ConnectionURL.Equals(input.ConnectionURL))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountName != null)
                    hashCode = hashCode * 59 + this.AccountName.GetHashCode();
                if (this.ContainerName != null)
                    hashCode = hashCode * 59 + this.ContainerName.GetHashCode();
                if (this.AccessKey != null)
                    hashCode = hashCode * 59 + this.AccessKey.GetHashCode();
                if (this.RootPath != null)
                    hashCode = hashCode * 59 + this.RootPath.GetHashCode();
                if (this.ConnectionURL != null)
                    hashCode = hashCode * 59 + this.ConnectionURL.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
