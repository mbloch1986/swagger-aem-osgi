/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties::ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties()
{
    m_Cq_dam_allow_all_mimeIsSet = false;
    m_Cq_dam_allowed_asset_mimesIsSet = false;
}

ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties::~ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties()
{
}

void ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Cq_dam_allow_all_mimeIsSet)
    {
        val[utility::conversions::to_string_t("cq.dam.allow.all.mime")] = ModelBase::toJson(m_Cq_dam_allow_all_mime);
    }
    if(m_Cq_dam_allowed_asset_mimesIsSet)
    {
        val[utility::conversions::to_string_t("cq.dam.allowed.asset.mimes")] = ModelBase::toJson(m_Cq_dam_allowed_asset_mimes);
    }

    return val;
}

void ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("cq.dam.allow.all.mime")))
    {
        if(!val[utility::conversions::to_string_t("cq.dam.allow.all.mime")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.dam.allow.all.mime")]);
            setCqDamAllowAllMime( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.dam.allowed.asset.mimes")))
    {
        if(!val[utility::conversions::to_string_t("cq.dam.allowed.asset.mimes")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.dam.allowed.asset.mimes")]);
            setCqDamAllowedAssetMimes( newItem );
        }
    }
}

void ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Cq_dam_allow_all_mimeIsSet)
    {
        if (m_Cq_dam_allow_all_mime.get())
        {
            m_Cq_dam_allow_all_mime->toMultipart(multipart, utility::conversions::to_string_t("cq.dam.allow.all.mime."));
        }
    }
    if(m_Cq_dam_allowed_asset_mimesIsSet)
    {
        if (m_Cq_dam_allowed_asset_mimes.get())
        {
            m_Cq_dam_allowed_asset_mimes->toMultipart(multipart, utility::conversions::to_string_t("cq.dam.allowed.asset.mimes."));
        }
    }
}

void ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.allow.all.mime")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.allow.all.mime")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.dam.allow.all.mime."));
            setCqDamAllowAllMime( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.allowed.asset.mimes")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.allowed.asset.mimes")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.dam.allowed.asset.mimes."));
            setCqDamAllowedAssetMimes( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties::getCqDamAllowAllMime() const
{
    return m_Cq_dam_allow_all_mime;
}


void ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties::setCqDamAllowAllMime(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Cq_dam_allow_all_mime = value;
    m_Cq_dam_allow_all_mimeIsSet = true;
}
bool ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties::cqDamAllowAllMimeIsSet() const
{
    return m_Cq_dam_allow_all_mimeIsSet;
}

void ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties::unsetCq_dam_allow_all_mime()
{
    m_Cq_dam_allow_all_mimeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties::getCqDamAllowedAssetMimes() const
{
    return m_Cq_dam_allowed_asset_mimes;
}


void ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties::setCqDamAllowedAssetMimes(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Cq_dam_allowed_asset_mimes = value;
    m_Cq_dam_allowed_asset_mimesIsSet = true;
}
bool ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties::cqDamAllowedAssetMimesIsSet() const
{
    return m_Cq_dam_allowed_asset_mimesIsSet;
}

void ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties::unsetCq_dam_allowed_asset_mimes()
{
    m_Cq_dam_allowed_asset_mimesIsSet = false;
}

}
}
}
}

