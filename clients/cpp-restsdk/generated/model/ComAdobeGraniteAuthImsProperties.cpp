/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeGraniteAuthImsProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeGraniteAuthImsProperties::ComAdobeGraniteAuthImsProperties()
{
    m_ConfigidIsSet = false;
    m_ScopeIsSet = false;
}

ComAdobeGraniteAuthImsProperties::~ComAdobeGraniteAuthImsProperties()
{
}

void ComAdobeGraniteAuthImsProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeGraniteAuthImsProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_ConfigidIsSet)
    {
        val[utility::conversions::to_string_t("configid")] = ModelBase::toJson(m_Configid);
    }
    if(m_ScopeIsSet)
    {
        val[utility::conversions::to_string_t("scope")] = ModelBase::toJson(m_Scope);
    }

    return val;
}

void ComAdobeGraniteAuthImsProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("configid")))
    {
        if(!val[utility::conversions::to_string_t("configid")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("configid")]);
            setConfigid( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("scope")))
    {
        if(!val[utility::conversions::to_string_t("scope")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("scope")]);
            setScope( newItem );
        }
    }
}

void ComAdobeGraniteAuthImsProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_ConfigidIsSet)
    {
        if (m_Configid.get())
        {
            m_Configid->toMultipart(multipart, utility::conversions::to_string_t("configid."));
        }
    }
    if(m_ScopeIsSet)
    {
        if (m_Scope.get())
        {
            m_Scope->toMultipart(multipart, utility::conversions::to_string_t("scope."));
        }
    }
}

void ComAdobeGraniteAuthImsProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("configid")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("configid")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("configid."));
            setConfigid( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("scope")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("scope")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("scope."));
            setScope( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteAuthImsProperties::getConfigid() const
{
    return m_Configid;
}


void ComAdobeGraniteAuthImsProperties::setConfigid(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Configid = value;
    m_ConfigidIsSet = true;
}
bool ComAdobeGraniteAuthImsProperties::configidIsSet() const
{
    return m_ConfigidIsSet;
}

void ComAdobeGraniteAuthImsProperties::unsetConfigid()
{
    m_ConfigidIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteAuthImsProperties::getScope() const
{
    return m_Scope;
}


void ComAdobeGraniteAuthImsProperties::setScope(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Scope = value;
    m_ScopeIsSet = true;
}
bool ComAdobeGraniteAuthImsProperties::scopeIsSet() const
{
    return m_ScopeIsSet;
}

void ComAdobeGraniteAuthImsProperties::unsetScope()
{
    m_ScopeIsSet = false;
}

}
}
}
}

