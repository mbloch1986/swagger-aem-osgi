/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties() {
    init();
}

OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::~OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties() {
    this->cleanup();
}

void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::init() {
    path_desc_field = new OAIConfigNodePropertyString();
    m_path_desc_field_isSet = false;
    path_child_field = new OAIConfigNodePropertyString();
    m_path_child_field_isSet = false;
    path_parent_field = new OAIConfigNodePropertyString();
    m_path_parent_field_isSet = false;
    path_exact_field = new OAIConfigNodePropertyString();
    m_path_exact_field_isSet = false;
    catch_all_field = new OAIConfigNodePropertyString();
    m_catch_all_field_isSet = false;
    collapsed_path_field = new OAIConfigNodePropertyString();
    m_collapsed_path_field_isSet = false;
    path_depth_field = new OAIConfigNodePropertyString();
    m_path_depth_field_isSet = false;
    commit_policy = new OAIConfigNodePropertyDropDown();
    m_commit_policy_isSet = false;
    rows = new OAIConfigNodePropertyInteger();
    m_rows_isSet = false;
    path_restrictions = new OAIConfigNodePropertyBoolean();
    m_path_restrictions_isSet = false;
    property_restrictions = new OAIConfigNodePropertyBoolean();
    m_property_restrictions_isSet = false;
    primarytypes_restrictions = new OAIConfigNodePropertyBoolean();
    m_primarytypes_restrictions_isSet = false;
    ignored_properties = new OAIConfigNodePropertyArray();
    m_ignored_properties_isSet = false;
    used_properties = new OAIConfigNodePropertyArray();
    m_used_properties_isSet = false;
    type_mappings = new OAIConfigNodePropertyArray();
    m_type_mappings_isSet = false;
    property_mappings = new OAIConfigNodePropertyArray();
    m_property_mappings_isSet = false;
    collapse_jcrcontent_nodes = new OAIConfigNodePropertyBoolean();
    m_collapse_jcrcontent_nodes_isSet = false;
}

void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::cleanup() {
    if(path_desc_field != nullptr) { 
        delete path_desc_field;
    }
    if(path_child_field != nullptr) { 
        delete path_child_field;
    }
    if(path_parent_field != nullptr) { 
        delete path_parent_field;
    }
    if(path_exact_field != nullptr) { 
        delete path_exact_field;
    }
    if(catch_all_field != nullptr) { 
        delete catch_all_field;
    }
    if(collapsed_path_field != nullptr) { 
        delete collapsed_path_field;
    }
    if(path_depth_field != nullptr) { 
        delete path_depth_field;
    }
    if(commit_policy != nullptr) { 
        delete commit_policy;
    }
    if(rows != nullptr) { 
        delete rows;
    }
    if(path_restrictions != nullptr) { 
        delete path_restrictions;
    }
    if(property_restrictions != nullptr) { 
        delete property_restrictions;
    }
    if(primarytypes_restrictions != nullptr) { 
        delete primarytypes_restrictions;
    }
    if(ignored_properties != nullptr) { 
        delete ignored_properties;
    }
    if(used_properties != nullptr) { 
        delete used_properties;
    }
    if(type_mappings != nullptr) { 
        delete type_mappings;
    }
    if(property_mappings != nullptr) { 
        delete property_mappings;
    }
    if(collapse_jcrcontent_nodes != nullptr) { 
        delete collapse_jcrcontent_nodes;
    }
}

OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties*
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&path_desc_field, pJson["path.desc.field"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&path_child_field, pJson["path.child.field"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&path_parent_field, pJson["path.parent.field"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&path_exact_field, pJson["path.exact.field"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&catch_all_field, pJson["catch.all.field"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&collapsed_path_field, pJson["collapsed.path.field"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&path_depth_field, pJson["path.depth.field"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&commit_policy, pJson["commit.policy"], "OAIConfigNodePropertyDropDown", "OAIConfigNodePropertyDropDown");
    
    ::OpenAPI::setValue(&rows, pJson["rows"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&path_restrictions, pJson["path.restrictions"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&property_restrictions, pJson["property.restrictions"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&primarytypes_restrictions, pJson["primarytypes.restrictions"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&ignored_properties, pJson["ignored.properties"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&used_properties, pJson["used.properties"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&type_mappings, pJson["type.mappings"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&property_mappings, pJson["property.mappings"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&collapse_jcrcontent_nodes, pJson["collapse.jcrcontent.nodes"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
}

QString
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::asJsonObject() {
    QJsonObject obj;
    if((path_desc_field != nullptr) && (path_desc_field->isSet())){
        toJsonValue(QString("path.desc.field"), path_desc_field, obj, QString("OAIConfigNodePropertyString"));
    }
    if((path_child_field != nullptr) && (path_child_field->isSet())){
        toJsonValue(QString("path.child.field"), path_child_field, obj, QString("OAIConfigNodePropertyString"));
    }
    if((path_parent_field != nullptr) && (path_parent_field->isSet())){
        toJsonValue(QString("path.parent.field"), path_parent_field, obj, QString("OAIConfigNodePropertyString"));
    }
    if((path_exact_field != nullptr) && (path_exact_field->isSet())){
        toJsonValue(QString("path.exact.field"), path_exact_field, obj, QString("OAIConfigNodePropertyString"));
    }
    if((catch_all_field != nullptr) && (catch_all_field->isSet())){
        toJsonValue(QString("catch.all.field"), catch_all_field, obj, QString("OAIConfigNodePropertyString"));
    }
    if((collapsed_path_field != nullptr) && (collapsed_path_field->isSet())){
        toJsonValue(QString("collapsed.path.field"), collapsed_path_field, obj, QString("OAIConfigNodePropertyString"));
    }
    if((path_depth_field != nullptr) && (path_depth_field->isSet())){
        toJsonValue(QString("path.depth.field"), path_depth_field, obj, QString("OAIConfigNodePropertyString"));
    }
    if((commit_policy != nullptr) && (commit_policy->isSet())){
        toJsonValue(QString("commit.policy"), commit_policy, obj, QString("OAIConfigNodePropertyDropDown"));
    }
    if((rows != nullptr) && (rows->isSet())){
        toJsonValue(QString("rows"), rows, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((path_restrictions != nullptr) && (path_restrictions->isSet())){
        toJsonValue(QString("path.restrictions"), path_restrictions, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((property_restrictions != nullptr) && (property_restrictions->isSet())){
        toJsonValue(QString("property.restrictions"), property_restrictions, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((primarytypes_restrictions != nullptr) && (primarytypes_restrictions->isSet())){
        toJsonValue(QString("primarytypes.restrictions"), primarytypes_restrictions, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((ignored_properties != nullptr) && (ignored_properties->isSet())){
        toJsonValue(QString("ignored.properties"), ignored_properties, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((used_properties != nullptr) && (used_properties->isSet())){
        toJsonValue(QString("used.properties"), used_properties, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((type_mappings != nullptr) && (type_mappings->isSet())){
        toJsonValue(QString("type.mappings"), type_mappings, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((property_mappings != nullptr) && (property_mappings->isSet())){
        toJsonValue(QString("property.mappings"), property_mappings, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((collapse_jcrcontent_nodes != nullptr) && (collapse_jcrcontent_nodes->isSet())){
        toJsonValue(QString("collapse.jcrcontent.nodes"), collapse_jcrcontent_nodes, obj, QString("OAIConfigNodePropertyBoolean"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getPathDescField() {
    return path_desc_field;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setPathDescField(OAIConfigNodePropertyString* path_desc_field) {
    this->path_desc_field = path_desc_field;
    this->m_path_desc_field_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getPathChildField() {
    return path_child_field;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setPathChildField(OAIConfigNodePropertyString* path_child_field) {
    this->path_child_field = path_child_field;
    this->m_path_child_field_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getPathParentField() {
    return path_parent_field;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setPathParentField(OAIConfigNodePropertyString* path_parent_field) {
    this->path_parent_field = path_parent_field;
    this->m_path_parent_field_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getPathExactField() {
    return path_exact_field;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setPathExactField(OAIConfigNodePropertyString* path_exact_field) {
    this->path_exact_field = path_exact_field;
    this->m_path_exact_field_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getCatchAllField() {
    return catch_all_field;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setCatchAllField(OAIConfigNodePropertyString* catch_all_field) {
    this->catch_all_field = catch_all_field;
    this->m_catch_all_field_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getCollapsedPathField() {
    return collapsed_path_field;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setCollapsedPathField(OAIConfigNodePropertyString* collapsed_path_field) {
    this->collapsed_path_field = collapsed_path_field;
    this->m_collapsed_path_field_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getPathDepthField() {
    return path_depth_field;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setPathDepthField(OAIConfigNodePropertyString* path_depth_field) {
    this->path_depth_field = path_depth_field;
    this->m_path_depth_field_isSet = true;
}

OAIConfigNodePropertyDropDown*
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getCommitPolicy() {
    return commit_policy;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setCommitPolicy(OAIConfigNodePropertyDropDown* commit_policy) {
    this->commit_policy = commit_policy;
    this->m_commit_policy_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getRows() {
    return rows;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setRows(OAIConfigNodePropertyInteger* rows) {
    this->rows = rows;
    this->m_rows_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getPathRestrictions() {
    return path_restrictions;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setPathRestrictions(OAIConfigNodePropertyBoolean* path_restrictions) {
    this->path_restrictions = path_restrictions;
    this->m_path_restrictions_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getPropertyRestrictions() {
    return property_restrictions;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setPropertyRestrictions(OAIConfigNodePropertyBoolean* property_restrictions) {
    this->property_restrictions = property_restrictions;
    this->m_property_restrictions_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getPrimarytypesRestrictions() {
    return primarytypes_restrictions;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setPrimarytypesRestrictions(OAIConfigNodePropertyBoolean* primarytypes_restrictions) {
    this->primarytypes_restrictions = primarytypes_restrictions;
    this->m_primarytypes_restrictions_isSet = true;
}

OAIConfigNodePropertyArray*
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getIgnoredProperties() {
    return ignored_properties;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setIgnoredProperties(OAIConfigNodePropertyArray* ignored_properties) {
    this->ignored_properties = ignored_properties;
    this->m_ignored_properties_isSet = true;
}

OAIConfigNodePropertyArray*
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getUsedProperties() {
    return used_properties;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setUsedProperties(OAIConfigNodePropertyArray* used_properties) {
    this->used_properties = used_properties;
    this->m_used_properties_isSet = true;
}

OAIConfigNodePropertyArray*
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getTypeMappings() {
    return type_mappings;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setTypeMappings(OAIConfigNodePropertyArray* type_mappings) {
    this->type_mappings = type_mappings;
    this->m_type_mappings_isSet = true;
}

OAIConfigNodePropertyArray*
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getPropertyMappings() {
    return property_mappings;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setPropertyMappings(OAIConfigNodePropertyArray* property_mappings) {
    this->property_mappings = property_mappings;
    this->m_property_mappings_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getCollapseJcrcontentNodes() {
    return collapse_jcrcontent_nodes;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setCollapseJcrcontentNodes(OAIConfigNodePropertyBoolean* collapse_jcrcontent_nodes) {
    this->collapse_jcrcontent_nodes = collapse_jcrcontent_nodes;
    this->m_collapse_jcrcontent_nodes_isSet = true;
}


bool
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(path_desc_field != nullptr && path_desc_field->isSet()){ isObjectUpdated = true; break;}
        if(path_child_field != nullptr && path_child_field->isSet()){ isObjectUpdated = true; break;}
        if(path_parent_field != nullptr && path_parent_field->isSet()){ isObjectUpdated = true; break;}
        if(path_exact_field != nullptr && path_exact_field->isSet()){ isObjectUpdated = true; break;}
        if(catch_all_field != nullptr && catch_all_field->isSet()){ isObjectUpdated = true; break;}
        if(collapsed_path_field != nullptr && collapsed_path_field->isSet()){ isObjectUpdated = true; break;}
        if(path_depth_field != nullptr && path_depth_field->isSet()){ isObjectUpdated = true; break;}
        if(commit_policy != nullptr && commit_policy->isSet()){ isObjectUpdated = true; break;}
        if(rows != nullptr && rows->isSet()){ isObjectUpdated = true; break;}
        if(path_restrictions != nullptr && path_restrictions->isSet()){ isObjectUpdated = true; break;}
        if(property_restrictions != nullptr && property_restrictions->isSet()){ isObjectUpdated = true; break;}
        if(primarytypes_restrictions != nullptr && primarytypes_restrictions->isSet()){ isObjectUpdated = true; break;}
        if(ignored_properties != nullptr && ignored_properties->isSet()){ isObjectUpdated = true; break;}
        if(used_properties != nullptr && used_properties->isSet()){ isObjectUpdated = true; break;}
        if(type_mappings != nullptr && type_mappings->isSet()){ isObjectUpdated = true; break;}
        if(property_mappings != nullptr && property_mappings->isSet()){ isObjectUpdated = true; break;}
        if(collapse_jcrcontent_nodes != nullptr && collapse_jcrcontent_nodes->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

