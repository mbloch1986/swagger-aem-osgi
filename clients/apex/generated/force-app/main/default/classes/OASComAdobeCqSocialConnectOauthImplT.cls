/*
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OAS-api/OAS-codegen.git
 * Do not edit the class manually.
 */

/**
 * OASComAdobeCqSocialConnectOauthImplT
 */
public class OASComAdobeCqSocialConnectOauthImplT implements OAS.MappedProperties {
    /**
     * Get oauthProviderId
     * @return oauthProviderId
     */
    public OASConfigNodePropertyString oauthProviderId { get; set; }

    /**
     * Get oauthCloudConfigRoot
     * @return oauthCloudConfigRoot
     */
    public OASConfigNodePropertyString oauthCloudConfigRoot { get; set; }

    /**
     * Get providerConfigRoot
     * @return providerConfigRoot
     */
    public OASConfigNodePropertyString providerConfigRoot { get; set; }

    /**
     * Get providerConfigUserFolder
     * @return providerConfigUserFolder
     */
    public OASConfigNodePropertyDropDown providerConfigUserFolder { get; set; }

    /**
     * Get providerConfigTwitterEnableParams
     * @return providerConfigTwitterEnableParams
     */
    public OASConfigNodePropertyBoolean providerConfigTwitterEnableParams { get; set; }

    /**
     * Get providerConfigTwitterParams
     * @return providerConfigTwitterParams
     */
    public OASConfigNodePropertyArray providerConfigTwitterParams { get; set; }

    /**
     * Get providerConfigRefreshUserdataEnabled
     * @return providerConfigRefreshUserdataEnabled
     */
    public OASConfigNodePropertyBoolean providerConfigRefreshUserdataEnabled { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'oauth.provider.id' => 'oauthProviderId',
        'oauth.cloud.config.root' => 'oauthCloudConfigRoot',
        'provider.config.root' => 'providerConfigRoot',
        'provider.config.user.folder' => 'providerConfigUserFolder',
        'provider.config.twitter.enable.params' => 'providerConfigTwitterEnableParams',
        'provider.config.twitter.params' => 'providerConfigTwitterParams',
        'provider.config.refresh.userdata.enabled' => 'providerConfigRefreshUserdataEnabled'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASComAdobeCqSocialConnectOauthImplT getExample() {
        OASComAdobeCqSocialConnectOauthImplT comAdobeCqSocialConnectOauthImplTwitterProviderImplProperties = new OASComAdobeCqSocialConnectOauthImplT();
          comAdobeCqSocialConnectOauthImplTwitterProviderImplProperties.oauthProviderId = OASConfigNodePropertyString.getExample();
          comAdobeCqSocialConnectOauthImplTwitterProviderImplProperties.oauthCloudConfigRoot = OASConfigNodePropertyString.getExample();
          comAdobeCqSocialConnectOauthImplTwitterProviderImplProperties.providerConfigRoot = OASConfigNodePropertyString.getExample();
          comAdobeCqSocialConnectOauthImplTwitterProviderImplProperties.providerConfigUserFolder = OASConfigNodePropertyDropDown.getExample();
          comAdobeCqSocialConnectOauthImplTwitterProviderImplProperties.providerConfigTwitterEnableParams = OASConfigNodePropertyBoolean.getExample();
          comAdobeCqSocialConnectOauthImplTwitterProviderImplProperties.providerConfigTwitterParams = OASConfigNodePropertyArray.getExample();
          comAdobeCqSocialConnectOauthImplTwitterProviderImplProperties.providerConfigRefreshUserdataEnabled = OASConfigNodePropertyBoolean.getExample();
        return comAdobeCqSocialConnectOauthImplTwitterProviderImplProperties;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASComAdobeCqSocialConnectOauthImplT) {           
            OASComAdobeCqSocialConnectOauthImplT comAdobeCqSocialConnectOauthImplTwitterProviderImplProperties = (OASComAdobeCqSocialConnectOauthImplT) obj;
            return this.oauthProviderId == comAdobeCqSocialConnectOauthImplTwitterProviderImplProperties.oauthProviderId
                && this.oauthCloudConfigRoot == comAdobeCqSocialConnectOauthImplTwitterProviderImplProperties.oauthCloudConfigRoot
                && this.providerConfigRoot == comAdobeCqSocialConnectOauthImplTwitterProviderImplProperties.providerConfigRoot
                && this.providerConfigUserFolder == comAdobeCqSocialConnectOauthImplTwitterProviderImplProperties.providerConfigUserFolder
                && this.providerConfigTwitterEnableParams == comAdobeCqSocialConnectOauthImplTwitterProviderImplProperties.providerConfigTwitterEnableParams
                && this.providerConfigTwitterParams == comAdobeCqSocialConnectOauthImplTwitterProviderImplProperties.providerConfigTwitterParams
                && this.providerConfigRefreshUserdataEnabled == comAdobeCqSocialConnectOauthImplTwitterProviderImplProperties.providerConfigRefreshUserdataEnabled;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (oauthProviderId == null ? 0 : System.hashCode(oauthProviderId));
        hashCode = (17 * hashCode) + (oauthCloudConfigRoot == null ? 0 : System.hashCode(oauthCloudConfigRoot));
        hashCode = (17 * hashCode) + (providerConfigRoot == null ? 0 : System.hashCode(providerConfigRoot));
        hashCode = (17 * hashCode) + (providerConfigUserFolder == null ? 0 : System.hashCode(providerConfigUserFolder));
        hashCode = (17 * hashCode) + (providerConfigTwitterEnableParams == null ? 0 : System.hashCode(providerConfigTwitterEnableParams));
        hashCode = (17 * hashCode) + (providerConfigTwitterParams == null ? 0 : System.hashCode(providerConfigTwitterParams));
        hashCode = (17 * hashCode) + (providerConfigRefreshUserdataEnabled == null ? 0 : System.hashCode(providerConfigRefreshUserdataEnabled));
        return hashCode;
    }
}

