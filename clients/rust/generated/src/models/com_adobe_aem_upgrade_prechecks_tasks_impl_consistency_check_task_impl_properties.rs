/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties {
  #[serde(rename = "root.path")]
  root_path: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "fix.inconsistencies")]
  fix_inconsistencies: Option<::models::ConfigNodePropertyBoolean>
}

impl ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties {
  pub fn new() -> ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties {
    ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties {
      root_path: None,
      fix_inconsistencies: None
    }
  }

  pub fn set_root_path(&mut self, root_path: ::models::ConfigNodePropertyString) {
    self.root_path = Some(root_path);
  }

  pub fn with_root_path(mut self, root_path: ::models::ConfigNodePropertyString) -> ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties {
    self.root_path = Some(root_path);
    self
  }

  pub fn root_path(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.root_path.as_ref()
  }

  pub fn reset_root_path(&mut self) {
    self.root_path = None;
  }

  pub fn set_fix_inconsistencies(&mut self, fix_inconsistencies: ::models::ConfigNodePropertyBoolean) {
    self.fix_inconsistencies = Some(fix_inconsistencies);
  }

  pub fn with_fix_inconsistencies(mut self, fix_inconsistencies: ::models::ConfigNodePropertyBoolean) -> ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties {
    self.fix_inconsistencies = Some(fix_inconsistencies);
    self
  }

  pub fn fix_inconsistencies(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.fix_inconsistencies.as_ref()
  }

  pub fn reset_fix_inconsistencies(&mut self) {
    self.fix_inconsistencies = None;
  }

}



