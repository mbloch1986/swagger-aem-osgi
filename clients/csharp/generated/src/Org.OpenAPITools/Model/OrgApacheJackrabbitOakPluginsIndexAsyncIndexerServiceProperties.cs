/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties
    /// </summary>
    [DataContract]
    public partial class OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties :  IEquatable<OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties" /> class.
        /// </summary>
        /// <param name="asyncConfigs">asyncConfigs.</param>
        /// <param name="leaseTimeOutMinutes">leaseTimeOutMinutes.</param>
        /// <param name="failingIndexTimeoutSeconds">failingIndexTimeoutSeconds.</param>
        /// <param name="errorWarnIntervalSeconds">errorWarnIntervalSeconds.</param>
        public OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties(ConfigNodePropertyArray asyncConfigs = default(ConfigNodePropertyArray), ConfigNodePropertyInteger leaseTimeOutMinutes = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger failingIndexTimeoutSeconds = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger errorWarnIntervalSeconds = default(ConfigNodePropertyInteger))
        {
            this.AsyncConfigs = asyncConfigs;
            this.LeaseTimeOutMinutes = leaseTimeOutMinutes;
            this.FailingIndexTimeoutSeconds = failingIndexTimeoutSeconds;
            this.ErrorWarnIntervalSeconds = errorWarnIntervalSeconds;
        }
        
        /// <summary>
        /// Gets or Sets AsyncConfigs
        /// </summary>
        [DataMember(Name="asyncConfigs", EmitDefaultValue=false)]
        public ConfigNodePropertyArray AsyncConfigs { get; set; }

        /// <summary>
        /// Gets or Sets LeaseTimeOutMinutes
        /// </summary>
        [DataMember(Name="leaseTimeOutMinutes", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger LeaseTimeOutMinutes { get; set; }

        /// <summary>
        /// Gets or Sets FailingIndexTimeoutSeconds
        /// </summary>
        [DataMember(Name="failingIndexTimeoutSeconds", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger FailingIndexTimeoutSeconds { get; set; }

        /// <summary>
        /// Gets or Sets ErrorWarnIntervalSeconds
        /// </summary>
        [DataMember(Name="errorWarnIntervalSeconds", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger ErrorWarnIntervalSeconds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties {\n");
            sb.Append("  AsyncConfigs: ").Append(AsyncConfigs).Append("\n");
            sb.Append("  LeaseTimeOutMinutes: ").Append(LeaseTimeOutMinutes).Append("\n");
            sb.Append("  FailingIndexTimeoutSeconds: ").Append(FailingIndexTimeoutSeconds).Append("\n");
            sb.Append("  ErrorWarnIntervalSeconds: ").Append(ErrorWarnIntervalSeconds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties);
        }

        /// <summary>
        /// Returns true if OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AsyncConfigs == input.AsyncConfigs ||
                    (this.AsyncConfigs != null &&
                    this.AsyncConfigs.Equals(input.AsyncConfigs))
                ) && 
                (
                    this.LeaseTimeOutMinutes == input.LeaseTimeOutMinutes ||
                    (this.LeaseTimeOutMinutes != null &&
                    this.LeaseTimeOutMinutes.Equals(input.LeaseTimeOutMinutes))
                ) && 
                (
                    this.FailingIndexTimeoutSeconds == input.FailingIndexTimeoutSeconds ||
                    (this.FailingIndexTimeoutSeconds != null &&
                    this.FailingIndexTimeoutSeconds.Equals(input.FailingIndexTimeoutSeconds))
                ) && 
                (
                    this.ErrorWarnIntervalSeconds == input.ErrorWarnIntervalSeconds ||
                    (this.ErrorWarnIntervalSeconds != null &&
                    this.ErrorWarnIntervalSeconds.Equals(input.ErrorWarnIntervalSeconds))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AsyncConfigs != null)
                    hashCode = hashCode * 59 + this.AsyncConfigs.GetHashCode();
                if (this.LeaseTimeOutMinutes != null)
                    hashCode = hashCode * 59 + this.LeaseTimeOutMinutes.GetHashCode();
                if (this.FailingIndexTimeoutSeconds != null)
                    hashCode = hashCode * 59 + this.FailingIndexTimeoutSeconds.GetHashCode();
                if (this.ErrorWarnIntervalSeconds != null)
                    hashCode = hashCode * 59 + this.ErrorWarnIntervalSeconds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
