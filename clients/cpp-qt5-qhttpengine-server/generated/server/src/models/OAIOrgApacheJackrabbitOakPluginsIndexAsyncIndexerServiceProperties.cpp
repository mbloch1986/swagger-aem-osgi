/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::OAIOrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties(QString json) {
    this->fromJson(json);
}

OAIOrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::OAIOrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties() {
    this->init();
}

OAIOrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::~OAIOrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties() {
    
}

void
OAIOrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::init() {
    m_async_configs_isSet = false;
    m_lease_time_out_minutes_isSet = false;
    m_failing_index_timeout_seconds_isSet = false;
    m_error_warn_interval_seconds_isSet = false;
}

void
OAIOrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIOrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(async_configs, json[QString("asyncConfigs")]);
    
    ::OpenAPI::fromJsonValue(lease_time_out_minutes, json[QString("leaseTimeOutMinutes")]);
    
    ::OpenAPI::fromJsonValue(failing_index_timeout_seconds, json[QString("failingIndexTimeoutSeconds")]);
    
    ::OpenAPI::fromJsonValue(error_warn_interval_seconds, json[QString("errorWarnIntervalSeconds")]);
    
}

QString
OAIOrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::asJsonObject() const {
    QJsonObject obj;
	if(async_configs.isSet()){
        obj.insert(QString("asyncConfigs"), ::OpenAPI::toJsonValue(async_configs));
    }
	if(lease_time_out_minutes.isSet()){
        obj.insert(QString("leaseTimeOutMinutes"), ::OpenAPI::toJsonValue(lease_time_out_minutes));
    }
	if(failing_index_timeout_seconds.isSet()){
        obj.insert(QString("failingIndexTimeoutSeconds"), ::OpenAPI::toJsonValue(failing_index_timeout_seconds));
    }
	if(error_warn_interval_seconds.isSet()){
        obj.insert(QString("errorWarnIntervalSeconds"), ::OpenAPI::toJsonValue(error_warn_interval_seconds));
    }
    return obj;
}

OAIConfigNodePropertyArray
OAIOrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::getAsyncConfigs() const {
    return async_configs;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::setAsyncConfigs(const OAIConfigNodePropertyArray &async_configs) {
    this->async_configs = async_configs;
    this->m_async_configs_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::getLeaseTimeOutMinutes() const {
    return lease_time_out_minutes;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::setLeaseTimeOutMinutes(const OAIConfigNodePropertyInteger &lease_time_out_minutes) {
    this->lease_time_out_minutes = lease_time_out_minutes;
    this->m_lease_time_out_minutes_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::getFailingIndexTimeoutSeconds() const {
    return failing_index_timeout_seconds;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::setFailingIndexTimeoutSeconds(const OAIConfigNodePropertyInteger &failing_index_timeout_seconds) {
    this->failing_index_timeout_seconds = failing_index_timeout_seconds;
    this->m_failing_index_timeout_seconds_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::getErrorWarnIntervalSeconds() const {
    return error_warn_interval_seconds;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::setErrorWarnIntervalSeconds(const OAIConfigNodePropertyInteger &error_warn_interval_seconds) {
    this->error_warn_interval_seconds = error_warn_interval_seconds;
    this->m_error_warn_interval_seconds_isSet = true;
}


bool
OAIOrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(async_configs.isSet()){ isObjectUpdated = true; break;}
    
        if(lease_time_out_minutes.isSet()){ isObjectUpdated = true; break;}
    
        if(failing_index_timeout_seconds.isSet()){ isObjectUpdated = true; break;}
    
        if(error_warn_interval_seconds.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

