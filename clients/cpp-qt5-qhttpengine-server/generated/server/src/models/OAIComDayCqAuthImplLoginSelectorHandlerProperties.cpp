/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqAuthImplLoginSelectorHandlerProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqAuthImplLoginSelectorHandlerProperties::OAIComDayCqAuthImplLoginSelectorHandlerProperties(QString json) {
    this->fromJson(json);
}

OAIComDayCqAuthImplLoginSelectorHandlerProperties::OAIComDayCqAuthImplLoginSelectorHandlerProperties() {
    this->init();
}

OAIComDayCqAuthImplLoginSelectorHandlerProperties::~OAIComDayCqAuthImplLoginSelectorHandlerProperties() {
    
}

void
OAIComDayCqAuthImplLoginSelectorHandlerProperties::init() {
    m_path_isSet = false;
    m_service_ranking_isSet = false;
    m_auth_loginselector_mappings_isSet = false;
    m_auth_loginselector_changepw_mappings_isSet = false;
    m_auth_loginselector_defaultloginpage_isSet = false;
    m_auth_loginselector_defaultchangepwpage_isSet = false;
    m_auth_loginselector_handle_isSet = false;
    m_auth_loginselector_handle_all_extensions_isSet = false;
}

void
OAIComDayCqAuthImplLoginSelectorHandlerProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComDayCqAuthImplLoginSelectorHandlerProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(path, json[QString("path")]);
    
    ::OpenAPI::fromJsonValue(service_ranking, json[QString("service.ranking")]);
    
    ::OpenAPI::fromJsonValue(auth_loginselector_mappings, json[QString("auth.loginselector.mappings")]);
    
    ::OpenAPI::fromJsonValue(auth_loginselector_changepw_mappings, json[QString("auth.loginselector.changepw.mappings")]);
    
    ::OpenAPI::fromJsonValue(auth_loginselector_defaultloginpage, json[QString("auth.loginselector.defaultloginpage")]);
    
    ::OpenAPI::fromJsonValue(auth_loginselector_defaultchangepwpage, json[QString("auth.loginselector.defaultchangepwpage")]);
    
    ::OpenAPI::fromJsonValue(auth_loginselector_handle, json[QString("auth.loginselector.handle")]);
    
    ::OpenAPI::fromJsonValue(auth_loginselector_handle_all_extensions, json[QString("auth.loginselector.handle.all.extensions")]);
    
}

QString
OAIComDayCqAuthImplLoginSelectorHandlerProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqAuthImplLoginSelectorHandlerProperties::asJsonObject() const {
    QJsonObject obj;
	if(path.isSet()){
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(path));
    }
	if(service_ranking.isSet()){
        obj.insert(QString("service.ranking"), ::OpenAPI::toJsonValue(service_ranking));
    }
	if(auth_loginselector_mappings.isSet()){
        obj.insert(QString("auth.loginselector.mappings"), ::OpenAPI::toJsonValue(auth_loginselector_mappings));
    }
	if(auth_loginselector_changepw_mappings.isSet()){
        obj.insert(QString("auth.loginselector.changepw.mappings"), ::OpenAPI::toJsonValue(auth_loginselector_changepw_mappings));
    }
	if(auth_loginselector_defaultloginpage.isSet()){
        obj.insert(QString("auth.loginselector.defaultloginpage"), ::OpenAPI::toJsonValue(auth_loginselector_defaultloginpage));
    }
	if(auth_loginselector_defaultchangepwpage.isSet()){
        obj.insert(QString("auth.loginselector.defaultchangepwpage"), ::OpenAPI::toJsonValue(auth_loginselector_defaultchangepwpage));
    }
	if(auth_loginselector_handle.isSet()){
        obj.insert(QString("auth.loginselector.handle"), ::OpenAPI::toJsonValue(auth_loginselector_handle));
    }
	if(auth_loginselector_handle_all_extensions.isSet()){
        obj.insert(QString("auth.loginselector.handle.all.extensions"), ::OpenAPI::toJsonValue(auth_loginselector_handle_all_extensions));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIComDayCqAuthImplLoginSelectorHandlerProperties::getPath() const {
    return path;
}
void
OAIComDayCqAuthImplLoginSelectorHandlerProperties::setPath(const OAIConfigNodePropertyString &path) {
    this->path = path;
    this->m_path_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComDayCqAuthImplLoginSelectorHandlerProperties::getServiceRanking() const {
    return service_ranking;
}
void
OAIComDayCqAuthImplLoginSelectorHandlerProperties::setServiceRanking(const OAIConfigNodePropertyInteger &service_ranking) {
    this->service_ranking = service_ranking;
    this->m_service_ranking_isSet = true;
}

OAIConfigNodePropertyArray
OAIComDayCqAuthImplLoginSelectorHandlerProperties::getAuthLoginselectorMappings() const {
    return auth_loginselector_mappings;
}
void
OAIComDayCqAuthImplLoginSelectorHandlerProperties::setAuthLoginselectorMappings(const OAIConfigNodePropertyArray &auth_loginselector_mappings) {
    this->auth_loginselector_mappings = auth_loginselector_mappings;
    this->m_auth_loginselector_mappings_isSet = true;
}

OAIConfigNodePropertyArray
OAIComDayCqAuthImplLoginSelectorHandlerProperties::getAuthLoginselectorChangepwMappings() const {
    return auth_loginselector_changepw_mappings;
}
void
OAIComDayCqAuthImplLoginSelectorHandlerProperties::setAuthLoginselectorChangepwMappings(const OAIConfigNodePropertyArray &auth_loginselector_changepw_mappings) {
    this->auth_loginselector_changepw_mappings = auth_loginselector_changepw_mappings;
    this->m_auth_loginselector_changepw_mappings_isSet = true;
}

OAIConfigNodePropertyString
OAIComDayCqAuthImplLoginSelectorHandlerProperties::getAuthLoginselectorDefaultloginpage() const {
    return auth_loginselector_defaultloginpage;
}
void
OAIComDayCqAuthImplLoginSelectorHandlerProperties::setAuthLoginselectorDefaultloginpage(const OAIConfigNodePropertyString &auth_loginselector_defaultloginpage) {
    this->auth_loginselector_defaultloginpage = auth_loginselector_defaultloginpage;
    this->m_auth_loginselector_defaultloginpage_isSet = true;
}

OAIConfigNodePropertyString
OAIComDayCqAuthImplLoginSelectorHandlerProperties::getAuthLoginselectorDefaultchangepwpage() const {
    return auth_loginselector_defaultchangepwpage;
}
void
OAIComDayCqAuthImplLoginSelectorHandlerProperties::setAuthLoginselectorDefaultchangepwpage(const OAIConfigNodePropertyString &auth_loginselector_defaultchangepwpage) {
    this->auth_loginselector_defaultchangepwpage = auth_loginselector_defaultchangepwpage;
    this->m_auth_loginselector_defaultchangepwpage_isSet = true;
}

OAIConfigNodePropertyArray
OAIComDayCqAuthImplLoginSelectorHandlerProperties::getAuthLoginselectorHandle() const {
    return auth_loginselector_handle;
}
void
OAIComDayCqAuthImplLoginSelectorHandlerProperties::setAuthLoginselectorHandle(const OAIConfigNodePropertyArray &auth_loginselector_handle) {
    this->auth_loginselector_handle = auth_loginselector_handle;
    this->m_auth_loginselector_handle_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComDayCqAuthImplLoginSelectorHandlerProperties::getAuthLoginselectorHandleAllExtensions() const {
    return auth_loginselector_handle_all_extensions;
}
void
OAIComDayCqAuthImplLoginSelectorHandlerProperties::setAuthLoginselectorHandleAllExtensions(const OAIConfigNodePropertyBoolean &auth_loginselector_handle_all_extensions) {
    this->auth_loginselector_handle_all_extensions = auth_loginselector_handle_all_extensions;
    this->m_auth_loginselector_handle_all_extensions_isSet = true;
}


bool
OAIComDayCqAuthImplLoginSelectorHandlerProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(path.isSet()){ isObjectUpdated = true; break;}
    
        if(service_ranking.isSet()){ isObjectUpdated = true; break;}
    
        if(auth_loginselector_mappings.isSet()){ isObjectUpdated = true; break;}
    
        if(auth_loginselector_changepw_mappings.isSet()){ isObjectUpdated = true; break;}
    
        if(auth_loginselector_defaultloginpage.isSet()){ isObjectUpdated = true; break;}
    
        if(auth_loginselector_defaultchangepwpage.isSet()){ isObjectUpdated = true; break;}
    
        if(auth_loginselector_handle.isSet()){ isObjectUpdated = true; break;}
    
        if(auth_loginselector_handle_all_extensions.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

