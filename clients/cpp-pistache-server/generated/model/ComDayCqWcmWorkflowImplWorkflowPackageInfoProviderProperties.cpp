/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties::ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties()
{
    m_Workflowpackageinfoprovider_filterIsSet = false;
    m_Workflowpackageinfoprovider_filter_rootpathIsSet = false;
    
}

ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties::~ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties()
{
}

void ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Workflowpackageinfoprovider_filterIsSet)
    {
        val["workflowpackageinfoprovider.filter"] = ModelBase::toJson(m_Workflowpackageinfoprovider_filter);
    }
    if(m_Workflowpackageinfoprovider_filter_rootpathIsSet)
    {
        val["workflowpackageinfoprovider.filter.rootpath"] = ModelBase::toJson(m_Workflowpackageinfoprovider_filter_rootpath);
    }
    

    return val;
}

void ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties::fromJson(nlohmann::json& val)
{
    if(val.find("workflowpackageinfoprovider.filter") != val.end())
    {
        if(!val["workflowpackageinfoprovider.filter"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["workflowpackageinfoprovider.filter"]);
            setWorkflowpackageinfoproviderFilter( newItem );
        }
        
    }
    if(val.find("workflowpackageinfoprovider.filter.rootpath") != val.end())
    {
        if(!val["workflowpackageinfoprovider.filter.rootpath"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["workflowpackageinfoprovider.filter.rootpath"]);
            setWorkflowpackageinfoproviderFilterRootpath( newItem );
        }
        
    }
    
}


ConfigNodePropertyArray ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties::getWorkflowpackageinfoproviderFilter() const
{
    return m_Workflowpackageinfoprovider_filter;
}
void ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties::setWorkflowpackageinfoproviderFilter(ConfigNodePropertyArray const& value)
{
    m_Workflowpackageinfoprovider_filter = value;
    m_Workflowpackageinfoprovider_filterIsSet = true;
}
bool ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties::workflowpackageinfoproviderFilterIsSet() const
{
    return m_Workflowpackageinfoprovider_filterIsSet;
}
void ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties::unsetWorkflowpackageinfoprovider_filter()
{
    m_Workflowpackageinfoprovider_filterIsSet = false;
}
ConfigNodePropertyString ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties::getWorkflowpackageinfoproviderFilterRootpath() const
{
    return m_Workflowpackageinfoprovider_filter_rootpath;
}
void ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties::setWorkflowpackageinfoproviderFilterRootpath(ConfigNodePropertyString const& value)
{
    m_Workflowpackageinfoprovider_filter_rootpath = value;
    m_Workflowpackageinfoprovider_filter_rootpathIsSet = true;
}
bool ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties::workflowpackageinfoproviderFilterRootpathIsSet() const
{
    return m_Workflowpackageinfoprovider_filter_rootpathIsSet;
}
void ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties::unsetWorkflowpackageinfoprovider_filter_rootpath()
{
    m_Workflowpackageinfoprovider_filter_rootpathIsSet = false;
}

}
}
}
}

