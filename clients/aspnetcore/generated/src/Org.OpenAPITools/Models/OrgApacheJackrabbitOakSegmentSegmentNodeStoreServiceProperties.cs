/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties : IEquatable<OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties>
    { 
        /// <summary>
        /// Gets or Sets RepositoryHome
        /// </summary>
        [DataMember(Name="repository.home")]
        public ConfigNodePropertyString RepositoryHome { get; set; }

        /// <summary>
        /// Gets or Sets TarmkMode
        /// </summary>
        [DataMember(Name="tarmk.mode")]
        public ConfigNodePropertyString TarmkMode { get; set; }

        /// <summary>
        /// Gets or Sets TarmkSize
        /// </summary>
        [DataMember(Name="tarmk.size")]
        public ConfigNodePropertyInteger TarmkSize { get; set; }

        /// <summary>
        /// Gets or Sets SegmentCacheSize
        /// </summary>
        [DataMember(Name="segmentCache.size")]
        public ConfigNodePropertyInteger SegmentCacheSize { get; set; }

        /// <summary>
        /// Gets or Sets StringCacheSize
        /// </summary>
        [DataMember(Name="stringCache.size")]
        public ConfigNodePropertyInteger StringCacheSize { get; set; }

        /// <summary>
        /// Gets or Sets TemplateCacheSize
        /// </summary>
        [DataMember(Name="templateCache.size")]
        public ConfigNodePropertyInteger TemplateCacheSize { get; set; }

        /// <summary>
        /// Gets or Sets StringDeduplicationCacheSize
        /// </summary>
        [DataMember(Name="stringDeduplicationCache.size")]
        public ConfigNodePropertyInteger StringDeduplicationCacheSize { get; set; }

        /// <summary>
        /// Gets or Sets TemplateDeduplicationCacheSize
        /// </summary>
        [DataMember(Name="templateDeduplicationCache.size")]
        public ConfigNodePropertyInteger TemplateDeduplicationCacheSize { get; set; }

        /// <summary>
        /// Gets or Sets NodeDeduplicationCacheSize
        /// </summary>
        [DataMember(Name="nodeDeduplicationCache.size")]
        public ConfigNodePropertyInteger NodeDeduplicationCacheSize { get; set; }

        /// <summary>
        /// Gets or Sets PauseCompaction
        /// </summary>
        [DataMember(Name="pauseCompaction")]
        public ConfigNodePropertyBoolean PauseCompaction { get; set; }

        /// <summary>
        /// Gets or Sets CompactionRetryCount
        /// </summary>
        [DataMember(Name="compaction.retryCount")]
        public ConfigNodePropertyInteger CompactionRetryCount { get; set; }

        /// <summary>
        /// Gets or Sets CompactionForceTimeout
        /// </summary>
        [DataMember(Name="compaction.force.timeout")]
        public ConfigNodePropertyInteger CompactionForceTimeout { get; set; }

        /// <summary>
        /// Gets or Sets CompactionSizeDeltaEstimation
        /// </summary>
        [DataMember(Name="compaction.sizeDeltaEstimation")]
        public ConfigNodePropertyInteger CompactionSizeDeltaEstimation { get; set; }

        /// <summary>
        /// Gets or Sets CompactionDisableEstimation
        /// </summary>
        [DataMember(Name="compaction.disableEstimation")]
        public ConfigNodePropertyBoolean CompactionDisableEstimation { get; set; }

        /// <summary>
        /// Gets or Sets CompactionRetainedGenerations
        /// </summary>
        [DataMember(Name="compaction.retainedGenerations")]
        public ConfigNodePropertyInteger CompactionRetainedGenerations { get; set; }

        /// <summary>
        /// Gets or Sets CompactionMemoryThreshold
        /// </summary>
        [DataMember(Name="compaction.memoryThreshold")]
        public ConfigNodePropertyInteger CompactionMemoryThreshold { get; set; }

        /// <summary>
        /// Gets or Sets CompactionProgressLog
        /// </summary>
        [DataMember(Name="compaction.progressLog")]
        public ConfigNodePropertyInteger CompactionProgressLog { get; set; }

        /// <summary>
        /// Gets or Sets Standby
        /// </summary>
        [DataMember(Name="standby")]
        public ConfigNodePropertyBoolean Standby { get; set; }

        /// <summary>
        /// Gets or Sets CustomBlobStore
        /// </summary>
        [DataMember(Name="customBlobStore")]
        public ConfigNodePropertyBoolean CustomBlobStore { get; set; }

        /// <summary>
        /// Gets or Sets CustomSegmentStore
        /// </summary>
        [DataMember(Name="customSegmentStore")]
        public ConfigNodePropertyBoolean CustomSegmentStore { get; set; }

        /// <summary>
        /// Gets or Sets SplitPersistence
        /// </summary>
        [DataMember(Name="splitPersistence")]
        public ConfigNodePropertyBoolean SplitPersistence { get; set; }

        /// <summary>
        /// Gets or Sets RepositoryBackupDir
        /// </summary>
        [DataMember(Name="repository.backup.dir")]
        public ConfigNodePropertyString RepositoryBackupDir { get; set; }

        /// <summary>
        /// Gets or Sets BlobGcMaxAgeInSecs
        /// </summary>
        [DataMember(Name="blobGcMaxAgeInSecs")]
        public ConfigNodePropertyInteger BlobGcMaxAgeInSecs { get; set; }

        /// <summary>
        /// Gets or Sets BlobTrackSnapshotIntervalInSecs
        /// </summary>
        [DataMember(Name="blobTrackSnapshotIntervalInSecs")]
        public ConfigNodePropertyInteger BlobTrackSnapshotIntervalInSecs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties {\n");
            sb.Append("  RepositoryHome: ").Append(RepositoryHome).Append("\n");
            sb.Append("  TarmkMode: ").Append(TarmkMode).Append("\n");
            sb.Append("  TarmkSize: ").Append(TarmkSize).Append("\n");
            sb.Append("  SegmentCacheSize: ").Append(SegmentCacheSize).Append("\n");
            sb.Append("  StringCacheSize: ").Append(StringCacheSize).Append("\n");
            sb.Append("  TemplateCacheSize: ").Append(TemplateCacheSize).Append("\n");
            sb.Append("  StringDeduplicationCacheSize: ").Append(StringDeduplicationCacheSize).Append("\n");
            sb.Append("  TemplateDeduplicationCacheSize: ").Append(TemplateDeduplicationCacheSize).Append("\n");
            sb.Append("  NodeDeduplicationCacheSize: ").Append(NodeDeduplicationCacheSize).Append("\n");
            sb.Append("  PauseCompaction: ").Append(PauseCompaction).Append("\n");
            sb.Append("  CompactionRetryCount: ").Append(CompactionRetryCount).Append("\n");
            sb.Append("  CompactionForceTimeout: ").Append(CompactionForceTimeout).Append("\n");
            sb.Append("  CompactionSizeDeltaEstimation: ").Append(CompactionSizeDeltaEstimation).Append("\n");
            sb.Append("  CompactionDisableEstimation: ").Append(CompactionDisableEstimation).Append("\n");
            sb.Append("  CompactionRetainedGenerations: ").Append(CompactionRetainedGenerations).Append("\n");
            sb.Append("  CompactionMemoryThreshold: ").Append(CompactionMemoryThreshold).Append("\n");
            sb.Append("  CompactionProgressLog: ").Append(CompactionProgressLog).Append("\n");
            sb.Append("  Standby: ").Append(Standby).Append("\n");
            sb.Append("  CustomBlobStore: ").Append(CustomBlobStore).Append("\n");
            sb.Append("  CustomSegmentStore: ").Append(CustomSegmentStore).Append("\n");
            sb.Append("  SplitPersistence: ").Append(SplitPersistence).Append("\n");
            sb.Append("  RepositoryBackupDir: ").Append(RepositoryBackupDir).Append("\n");
            sb.Append("  BlobGcMaxAgeInSecs: ").Append(BlobGcMaxAgeInSecs).Append("\n");
            sb.Append("  BlobTrackSnapshotIntervalInSecs: ").Append(BlobTrackSnapshotIntervalInSecs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties)obj);
        }

        /// <summary>
        /// Returns true if OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    RepositoryHome == other.RepositoryHome ||
                    RepositoryHome != null &&
                    RepositoryHome.Equals(other.RepositoryHome)
                ) && 
                (
                    TarmkMode == other.TarmkMode ||
                    TarmkMode != null &&
                    TarmkMode.Equals(other.TarmkMode)
                ) && 
                (
                    TarmkSize == other.TarmkSize ||
                    TarmkSize != null &&
                    TarmkSize.Equals(other.TarmkSize)
                ) && 
                (
                    SegmentCacheSize == other.SegmentCacheSize ||
                    SegmentCacheSize != null &&
                    SegmentCacheSize.Equals(other.SegmentCacheSize)
                ) && 
                (
                    StringCacheSize == other.StringCacheSize ||
                    StringCacheSize != null &&
                    StringCacheSize.Equals(other.StringCacheSize)
                ) && 
                (
                    TemplateCacheSize == other.TemplateCacheSize ||
                    TemplateCacheSize != null &&
                    TemplateCacheSize.Equals(other.TemplateCacheSize)
                ) && 
                (
                    StringDeduplicationCacheSize == other.StringDeduplicationCacheSize ||
                    StringDeduplicationCacheSize != null &&
                    StringDeduplicationCacheSize.Equals(other.StringDeduplicationCacheSize)
                ) && 
                (
                    TemplateDeduplicationCacheSize == other.TemplateDeduplicationCacheSize ||
                    TemplateDeduplicationCacheSize != null &&
                    TemplateDeduplicationCacheSize.Equals(other.TemplateDeduplicationCacheSize)
                ) && 
                (
                    NodeDeduplicationCacheSize == other.NodeDeduplicationCacheSize ||
                    NodeDeduplicationCacheSize != null &&
                    NodeDeduplicationCacheSize.Equals(other.NodeDeduplicationCacheSize)
                ) && 
                (
                    PauseCompaction == other.PauseCompaction ||
                    PauseCompaction != null &&
                    PauseCompaction.Equals(other.PauseCompaction)
                ) && 
                (
                    CompactionRetryCount == other.CompactionRetryCount ||
                    CompactionRetryCount != null &&
                    CompactionRetryCount.Equals(other.CompactionRetryCount)
                ) && 
                (
                    CompactionForceTimeout == other.CompactionForceTimeout ||
                    CompactionForceTimeout != null &&
                    CompactionForceTimeout.Equals(other.CompactionForceTimeout)
                ) && 
                (
                    CompactionSizeDeltaEstimation == other.CompactionSizeDeltaEstimation ||
                    CompactionSizeDeltaEstimation != null &&
                    CompactionSizeDeltaEstimation.Equals(other.CompactionSizeDeltaEstimation)
                ) && 
                (
                    CompactionDisableEstimation == other.CompactionDisableEstimation ||
                    CompactionDisableEstimation != null &&
                    CompactionDisableEstimation.Equals(other.CompactionDisableEstimation)
                ) && 
                (
                    CompactionRetainedGenerations == other.CompactionRetainedGenerations ||
                    CompactionRetainedGenerations != null &&
                    CompactionRetainedGenerations.Equals(other.CompactionRetainedGenerations)
                ) && 
                (
                    CompactionMemoryThreshold == other.CompactionMemoryThreshold ||
                    CompactionMemoryThreshold != null &&
                    CompactionMemoryThreshold.Equals(other.CompactionMemoryThreshold)
                ) && 
                (
                    CompactionProgressLog == other.CompactionProgressLog ||
                    CompactionProgressLog != null &&
                    CompactionProgressLog.Equals(other.CompactionProgressLog)
                ) && 
                (
                    Standby == other.Standby ||
                    Standby != null &&
                    Standby.Equals(other.Standby)
                ) && 
                (
                    CustomBlobStore == other.CustomBlobStore ||
                    CustomBlobStore != null &&
                    CustomBlobStore.Equals(other.CustomBlobStore)
                ) && 
                (
                    CustomSegmentStore == other.CustomSegmentStore ||
                    CustomSegmentStore != null &&
                    CustomSegmentStore.Equals(other.CustomSegmentStore)
                ) && 
                (
                    SplitPersistence == other.SplitPersistence ||
                    SplitPersistence != null &&
                    SplitPersistence.Equals(other.SplitPersistence)
                ) && 
                (
                    RepositoryBackupDir == other.RepositoryBackupDir ||
                    RepositoryBackupDir != null &&
                    RepositoryBackupDir.Equals(other.RepositoryBackupDir)
                ) && 
                (
                    BlobGcMaxAgeInSecs == other.BlobGcMaxAgeInSecs ||
                    BlobGcMaxAgeInSecs != null &&
                    BlobGcMaxAgeInSecs.Equals(other.BlobGcMaxAgeInSecs)
                ) && 
                (
                    BlobTrackSnapshotIntervalInSecs == other.BlobTrackSnapshotIntervalInSecs ||
                    BlobTrackSnapshotIntervalInSecs != null &&
                    BlobTrackSnapshotIntervalInSecs.Equals(other.BlobTrackSnapshotIntervalInSecs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (RepositoryHome != null)
                    hashCode = hashCode * 59 + RepositoryHome.GetHashCode();
                    if (TarmkMode != null)
                    hashCode = hashCode * 59 + TarmkMode.GetHashCode();
                    if (TarmkSize != null)
                    hashCode = hashCode * 59 + TarmkSize.GetHashCode();
                    if (SegmentCacheSize != null)
                    hashCode = hashCode * 59 + SegmentCacheSize.GetHashCode();
                    if (StringCacheSize != null)
                    hashCode = hashCode * 59 + StringCacheSize.GetHashCode();
                    if (TemplateCacheSize != null)
                    hashCode = hashCode * 59 + TemplateCacheSize.GetHashCode();
                    if (StringDeduplicationCacheSize != null)
                    hashCode = hashCode * 59 + StringDeduplicationCacheSize.GetHashCode();
                    if (TemplateDeduplicationCacheSize != null)
                    hashCode = hashCode * 59 + TemplateDeduplicationCacheSize.GetHashCode();
                    if (NodeDeduplicationCacheSize != null)
                    hashCode = hashCode * 59 + NodeDeduplicationCacheSize.GetHashCode();
                    if (PauseCompaction != null)
                    hashCode = hashCode * 59 + PauseCompaction.GetHashCode();
                    if (CompactionRetryCount != null)
                    hashCode = hashCode * 59 + CompactionRetryCount.GetHashCode();
                    if (CompactionForceTimeout != null)
                    hashCode = hashCode * 59 + CompactionForceTimeout.GetHashCode();
                    if (CompactionSizeDeltaEstimation != null)
                    hashCode = hashCode * 59 + CompactionSizeDeltaEstimation.GetHashCode();
                    if (CompactionDisableEstimation != null)
                    hashCode = hashCode * 59 + CompactionDisableEstimation.GetHashCode();
                    if (CompactionRetainedGenerations != null)
                    hashCode = hashCode * 59 + CompactionRetainedGenerations.GetHashCode();
                    if (CompactionMemoryThreshold != null)
                    hashCode = hashCode * 59 + CompactionMemoryThreshold.GetHashCode();
                    if (CompactionProgressLog != null)
                    hashCode = hashCode * 59 + CompactionProgressLog.GetHashCode();
                    if (Standby != null)
                    hashCode = hashCode * 59 + Standby.GetHashCode();
                    if (CustomBlobStore != null)
                    hashCode = hashCode * 59 + CustomBlobStore.GetHashCode();
                    if (CustomSegmentStore != null)
                    hashCode = hashCode * 59 + CustomSegmentStore.GetHashCode();
                    if (SplitPersistence != null)
                    hashCode = hashCode * 59 + SplitPersistence.GetHashCode();
                    if (RepositoryBackupDir != null)
                    hashCode = hashCode * 59 + RepositoryBackupDir.GetHashCode();
                    if (BlobGcMaxAgeInSecs != null)
                    hashCode = hashCode * 59 + BlobGcMaxAgeInSecs.GetHashCode();
                    if (BlobTrackSnapshotIntervalInSecs != null)
                    hashCode = hashCode * 59 + BlobTrackSnapshotIntervalInSecs.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties left, OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties left, OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
