/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeGraniteLicenseImplLicenseCheckFilterProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeGraniteLicenseImplLicenseCheckFilterProperties::OAIComAdobeGraniteLicenseImplLicenseCheckFilterProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeGraniteLicenseImplLicenseCheckFilterProperties::OAIComAdobeGraniteLicenseImplLicenseCheckFilterProperties() {
    init();
}

OAIComAdobeGraniteLicenseImplLicenseCheckFilterProperties::~OAIComAdobeGraniteLicenseImplLicenseCheckFilterProperties() {
    this->cleanup();
}

void
OAIComAdobeGraniteLicenseImplLicenseCheckFilterProperties::init() {
    check_internval = new OAIConfigNodePropertyInteger();
    m_check_internval_isSet = false;
    exclude_ids = new OAIConfigNodePropertyArray();
    m_exclude_ids_isSet = false;
    encrypt_ping = new OAIConfigNodePropertyBoolean();
    m_encrypt_ping_isSet = false;
}

void
OAIComAdobeGraniteLicenseImplLicenseCheckFilterProperties::cleanup() {
    if(check_internval != nullptr) { 
        delete check_internval;
    }
    if(exclude_ids != nullptr) { 
        delete exclude_ids;
    }
    if(encrypt_ping != nullptr) { 
        delete encrypt_ping;
    }
}

OAIComAdobeGraniteLicenseImplLicenseCheckFilterProperties*
OAIComAdobeGraniteLicenseImplLicenseCheckFilterProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeGraniteLicenseImplLicenseCheckFilterProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&check_internval, pJson["checkInternval"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&exclude_ids, pJson["excludeIds"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&encrypt_ping, pJson["encryptPing"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
}

QString
OAIComAdobeGraniteLicenseImplLicenseCheckFilterProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeGraniteLicenseImplLicenseCheckFilterProperties::asJsonObject() {
    QJsonObject obj;
    if((check_internval != nullptr) && (check_internval->isSet())){
        toJsonValue(QString("checkInternval"), check_internval, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((exclude_ids != nullptr) && (exclude_ids->isSet())){
        toJsonValue(QString("excludeIds"), exclude_ids, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((encrypt_ping != nullptr) && (encrypt_ping->isSet())){
        toJsonValue(QString("encryptPing"), encrypt_ping, obj, QString("OAIConfigNodePropertyBoolean"));
    }

    return obj;
}

OAIConfigNodePropertyInteger*
OAIComAdobeGraniteLicenseImplLicenseCheckFilterProperties::getCheckInternval() {
    return check_internval;
}
void
OAIComAdobeGraniteLicenseImplLicenseCheckFilterProperties::setCheckInternval(OAIConfigNodePropertyInteger* check_internval) {
    this->check_internval = check_internval;
    this->m_check_internval_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComAdobeGraniteLicenseImplLicenseCheckFilterProperties::getExcludeIds() {
    return exclude_ids;
}
void
OAIComAdobeGraniteLicenseImplLicenseCheckFilterProperties::setExcludeIds(OAIConfigNodePropertyArray* exclude_ids) {
    this->exclude_ids = exclude_ids;
    this->m_exclude_ids_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComAdobeGraniteLicenseImplLicenseCheckFilterProperties::getEncryptPing() {
    return encrypt_ping;
}
void
OAIComAdobeGraniteLicenseImplLicenseCheckFilterProperties::setEncryptPing(OAIConfigNodePropertyBoolean* encrypt_ping) {
    this->encrypt_ping = encrypt_ping;
    this->m_encrypt_ping_isSet = true;
}


bool
OAIComAdobeGraniteLicenseImplLicenseCheckFilterProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(check_internval != nullptr && check_internval->isSet()){ isObjectUpdated = true; break;}
        if(exclude_ids != nullptr && exclude_ids->isSet()){ isObjectUpdated = true; break;}
        if(encrypt_ping != nullptr && encrypt_ping->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

