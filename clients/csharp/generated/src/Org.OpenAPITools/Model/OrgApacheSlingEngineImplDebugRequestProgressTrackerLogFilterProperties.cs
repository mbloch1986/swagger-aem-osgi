/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties
    /// </summary>
    [DataContract]
    public partial class OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties :  IEquatable<OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties" /> class.
        /// </summary>
        /// <param name="extensions">extensions.</param>
        /// <param name="minDurationMs">minDurationMs.</param>
        /// <param name="maxDurationMs">maxDurationMs.</param>
        /// <param name="compactLogFormat">compactLogFormat.</param>
        public OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties(ConfigNodePropertyArray extensions = default(ConfigNodePropertyArray), ConfigNodePropertyInteger minDurationMs = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger maxDurationMs = default(ConfigNodePropertyInteger), ConfigNodePropertyBoolean compactLogFormat = default(ConfigNodePropertyBoolean))
        {
            this.Extensions = extensions;
            this.MinDurationMs = minDurationMs;
            this.MaxDurationMs = maxDurationMs;
            this.CompactLogFormat = compactLogFormat;
        }
        
        /// <summary>
        /// Gets or Sets Extensions
        /// </summary>
        [DataMember(Name="extensions", EmitDefaultValue=false)]
        public ConfigNodePropertyArray Extensions { get; set; }

        /// <summary>
        /// Gets or Sets MinDurationMs
        /// </summary>
        [DataMember(Name="minDurationMs", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger MinDurationMs { get; set; }

        /// <summary>
        /// Gets or Sets MaxDurationMs
        /// </summary>
        [DataMember(Name="maxDurationMs", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger MaxDurationMs { get; set; }

        /// <summary>
        /// Gets or Sets CompactLogFormat
        /// </summary>
        [DataMember(Name="compactLogFormat", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean CompactLogFormat { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties {\n");
            sb.Append("  Extensions: ").Append(Extensions).Append("\n");
            sb.Append("  MinDurationMs: ").Append(MinDurationMs).Append("\n");
            sb.Append("  MaxDurationMs: ").Append(MaxDurationMs).Append("\n");
            sb.Append("  CompactLogFormat: ").Append(CompactLogFormat).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties);
        }

        /// <summary>
        /// Returns true if OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Extensions == input.Extensions ||
                    (this.Extensions != null &&
                    this.Extensions.Equals(input.Extensions))
                ) && 
                (
                    this.MinDurationMs == input.MinDurationMs ||
                    (this.MinDurationMs != null &&
                    this.MinDurationMs.Equals(input.MinDurationMs))
                ) && 
                (
                    this.MaxDurationMs == input.MaxDurationMs ||
                    (this.MaxDurationMs != null &&
                    this.MaxDurationMs.Equals(input.MaxDurationMs))
                ) && 
                (
                    this.CompactLogFormat == input.CompactLogFormat ||
                    (this.CompactLogFormat != null &&
                    this.CompactLogFormat.Equals(input.CompactLogFormat))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Extensions != null)
                    hashCode = hashCode * 59 + this.Extensions.GetHashCode();
                if (this.MinDurationMs != null)
                    hashCode = hashCode * 59 + this.MinDurationMs.GetHashCode();
                if (this.MaxDurationMs != null)
                    hashCode = hashCode * 59 + this.MaxDurationMs.GetHashCode();
                if (this.CompactLogFormat != null)
                    hashCode = hashCode * 59 + this.CompactLogFormat.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
