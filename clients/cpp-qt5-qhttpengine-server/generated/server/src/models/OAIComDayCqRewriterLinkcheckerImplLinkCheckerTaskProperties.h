/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties.h
 *
 * 
 */

#ifndef OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties_H
#define OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties_H

#include <QJsonObject>


#include "OAIConfigNodePropertyBoolean.h"
#include "OAIConfigNodePropertyInteger.h"

#include "OAIObject.h"

namespace OpenAPI {

class OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties: public OAIObject {
public:
    OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties();
    OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties(QString json);
    ~OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties() override;
    void init();

    QString asJson () const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIConfigNodePropertyInteger getSchedulerPeriod() const;
    void setSchedulerPeriod(const OAIConfigNodePropertyInteger &scheduler_period);

    OAIConfigNodePropertyBoolean getSchedulerConcurrent() const;
    void setSchedulerConcurrent(const OAIConfigNodePropertyBoolean &scheduler_concurrent);

    OAIConfigNodePropertyInteger getGoodLinkTestInterval() const;
    void setGoodLinkTestInterval(const OAIConfigNodePropertyInteger &good_link_test_interval);

    OAIConfigNodePropertyInteger getBadLinkTestInterval() const;
    void setBadLinkTestInterval(const OAIConfigNodePropertyInteger &bad_link_test_interval);

    OAIConfigNodePropertyInteger getLinkUnusedInterval() const;
    void setLinkUnusedInterval(const OAIConfigNodePropertyInteger &link_unused_interval);

    OAIConfigNodePropertyInteger getConnectionTimeout() const;
    void setConnectionTimeout(const OAIConfigNodePropertyInteger &connection_timeout);

    virtual bool isSet() const override;

private:
    OAIConfigNodePropertyInteger scheduler_period;
    bool m_scheduler_period_isSet;

    OAIConfigNodePropertyBoolean scheduler_concurrent;
    bool m_scheduler_concurrent_isSet;

    OAIConfigNodePropertyInteger good_link_test_interval;
    bool m_good_link_test_interval_isSet;

    OAIConfigNodePropertyInteger bad_link_test_interval;
    bool m_bad_link_test_interval_isSet;

    OAIConfigNodePropertyInteger link_unused_interval;
    bool m_link_unused_interval_isSet;

    OAIConfigNodePropertyInteger connection_timeout;
    bool m_connection_timeout_isSet;

};

}

#endif // OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties_H
