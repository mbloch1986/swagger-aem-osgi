/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties()
{
    m_ExtensionsIsSet = false;
    m_MinDurationMsIsSet = false;
    m_MaxDurationMsIsSet = false;
    m_CompactLogFormatIsSet = false;
}

OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::~OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties()
{
}

void OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_ExtensionsIsSet)
    {
        val[utility::conversions::to_string_t("extensions")] = ModelBase::toJson(m_Extensions);
    }
    if(m_MinDurationMsIsSet)
    {
        val[utility::conversions::to_string_t("minDurationMs")] = ModelBase::toJson(m_MinDurationMs);
    }
    if(m_MaxDurationMsIsSet)
    {
        val[utility::conversions::to_string_t("maxDurationMs")] = ModelBase::toJson(m_MaxDurationMs);
    }
    if(m_CompactLogFormatIsSet)
    {
        val[utility::conversions::to_string_t("compactLogFormat")] = ModelBase::toJson(m_CompactLogFormat);
    }

    return val;
}

void OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("extensions")))
    {
        if(!val[utility::conversions::to_string_t("extensions")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("extensions")]);
            setExtensions( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("minDurationMs")))
    {
        if(!val[utility::conversions::to_string_t("minDurationMs")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("minDurationMs")]);
            setMinDurationMs( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("maxDurationMs")))
    {
        if(!val[utility::conversions::to_string_t("maxDurationMs")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("maxDurationMs")]);
            setMaxDurationMs( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("compactLogFormat")))
    {
        if(!val[utility::conversions::to_string_t("compactLogFormat")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("compactLogFormat")]);
            setCompactLogFormat( newItem );
        }
    }
}

void OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_ExtensionsIsSet)
    {
        if (m_Extensions.get())
        {
            m_Extensions->toMultipart(multipart, utility::conversions::to_string_t("extensions."));
        }
    }
    if(m_MinDurationMsIsSet)
    {
        if (m_MinDurationMs.get())
        {
            m_MinDurationMs->toMultipart(multipart, utility::conversions::to_string_t("minDurationMs."));
        }
    }
    if(m_MaxDurationMsIsSet)
    {
        if (m_MaxDurationMs.get())
        {
            m_MaxDurationMs->toMultipart(multipart, utility::conversions::to_string_t("maxDurationMs."));
        }
    }
    if(m_CompactLogFormatIsSet)
    {
        if (m_CompactLogFormat.get())
        {
            m_CompactLogFormat->toMultipart(multipart, utility::conversions::to_string_t("compactLogFormat."));
        }
    }
}

void OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("extensions")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("extensions")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("extensions."));
            setExtensions( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("minDurationMs")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("minDurationMs")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("minDurationMs."));
            setMinDurationMs( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("maxDurationMs")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("maxDurationMs")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("maxDurationMs."));
            setMaxDurationMs( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("compactLogFormat")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("compactLogFormat")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("compactLogFormat."));
            setCompactLogFormat( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::getExtensions() const
{
    return m_Extensions;
}


void OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::setExtensions(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Extensions = value;
    m_ExtensionsIsSet = true;
}
bool OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::extensionsIsSet() const
{
    return m_ExtensionsIsSet;
}

void OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::unsetExtensions()
{
    m_ExtensionsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::getMinDurationMs() const
{
    return m_MinDurationMs;
}


void OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::setMinDurationMs(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_MinDurationMs = value;
    m_MinDurationMsIsSet = true;
}
bool OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::minDurationMsIsSet() const
{
    return m_MinDurationMsIsSet;
}

void OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::unsetMinDurationMs()
{
    m_MinDurationMsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::getMaxDurationMs() const
{
    return m_MaxDurationMs;
}


void OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::setMaxDurationMs(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_MaxDurationMs = value;
    m_MaxDurationMsIsSet = true;
}
bool OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::maxDurationMsIsSet() const
{
    return m_MaxDurationMsIsSet;
}

void OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::unsetMaxDurationMs()
{
    m_MaxDurationMsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::getCompactLogFormat() const
{
    return m_CompactLogFormat;
}


void OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::setCompactLogFormat(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_CompactLogFormat = value;
    m_CompactLogFormatIsSet = true;
}
bool OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::compactLogFormatIsSet() const
{
    return m_CompactLogFormatIsSet;
}

void OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::unsetCompactLogFormat()
{
    m_CompactLogFormatIsSet = false;
}

}
}
}
}

