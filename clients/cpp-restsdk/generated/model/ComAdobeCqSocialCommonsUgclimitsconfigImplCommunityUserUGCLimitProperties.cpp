/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties()
{
    m_EnableIsSet = false;
    m_UGCLimitIsSet = false;
    m_UgcLimitDurationIsSet = false;
    m_DomainsIsSet = false;
    m_ToListIsSet = false;
}

ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::~ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties()
{
}

void ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_EnableIsSet)
    {
        val[utility::conversions::to_string_t("enable")] = ModelBase::toJson(m_Enable);
    }
    if(m_UGCLimitIsSet)
    {
        val[utility::conversions::to_string_t("UGCLimit")] = ModelBase::toJson(m_UGCLimit);
    }
    if(m_UgcLimitDurationIsSet)
    {
        val[utility::conversions::to_string_t("ugcLimitDuration")] = ModelBase::toJson(m_UgcLimitDuration);
    }
    if(m_DomainsIsSet)
    {
        val[utility::conversions::to_string_t("domains")] = ModelBase::toJson(m_Domains);
    }
    if(m_ToListIsSet)
    {
        val[utility::conversions::to_string_t("toList")] = ModelBase::toJson(m_ToList);
    }

    return val;
}

void ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("enable")))
    {
        if(!val[utility::conversions::to_string_t("enable")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("enable")]);
            setEnable( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("UGCLimit")))
    {
        if(!val[utility::conversions::to_string_t("UGCLimit")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("UGCLimit")]);
            setUGCLimit( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ugcLimitDuration")))
    {
        if(!val[utility::conversions::to_string_t("ugcLimitDuration")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("ugcLimitDuration")]);
            setUgcLimitDuration( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("domains")))
    {
        if(!val[utility::conversions::to_string_t("domains")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("domains")]);
            setDomains( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("toList")))
    {
        if(!val[utility::conversions::to_string_t("toList")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("toList")]);
            setToList( newItem );
        }
    }
}

void ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_EnableIsSet)
    {
        if (m_Enable.get())
        {
            m_Enable->toMultipart(multipart, utility::conversions::to_string_t("enable."));
        }
    }
    if(m_UGCLimitIsSet)
    {
        if (m_UGCLimit.get())
        {
            m_UGCLimit->toMultipart(multipart, utility::conversions::to_string_t("UGCLimit."));
        }
    }
    if(m_UgcLimitDurationIsSet)
    {
        if (m_UgcLimitDuration.get())
        {
            m_UgcLimitDuration->toMultipart(multipart, utility::conversions::to_string_t("ugcLimitDuration."));
        }
    }
    if(m_DomainsIsSet)
    {
        if (m_Domains.get())
        {
            m_Domains->toMultipart(multipart, utility::conversions::to_string_t("domains."));
        }
    }
    if(m_ToListIsSet)
    {
        if (m_ToList.get())
        {
            m_ToList->toMultipart(multipart, utility::conversions::to_string_t("toList."));
        }
    }
}

void ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("enable")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("enable")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("enable."));
            setEnable( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("UGCLimit")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("UGCLimit")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("UGCLimit."));
            setUGCLimit( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ugcLimitDuration")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("ugcLimitDuration")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("ugcLimitDuration."));
            setUgcLimitDuration( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("domains")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("domains")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("domains."));
            setDomains( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("toList")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("toList")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("toList."));
            setToList( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::getEnable() const
{
    return m_Enable;
}


void ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::setEnable(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Enable = value;
    m_EnableIsSet = true;
}
bool ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::enableIsSet() const
{
    return m_EnableIsSet;
}

void ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::unsetEnable()
{
    m_EnableIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::getUGCLimit() const
{
    return m_UGCLimit;
}


void ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::setUGCLimit(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_UGCLimit = value;
    m_UGCLimitIsSet = true;
}
bool ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::uGCLimitIsSet() const
{
    return m_UGCLimitIsSet;
}

void ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::unsetUGCLimit()
{
    m_UGCLimitIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::getUgcLimitDuration() const
{
    return m_UgcLimitDuration;
}


void ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::setUgcLimitDuration(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_UgcLimitDuration = value;
    m_UgcLimitDurationIsSet = true;
}
bool ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::ugcLimitDurationIsSet() const
{
    return m_UgcLimitDurationIsSet;
}

void ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::unsetUgcLimitDuration()
{
    m_UgcLimitDurationIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::getDomains() const
{
    return m_Domains;
}


void ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::setDomains(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Domains = value;
    m_DomainsIsSet = true;
}
bool ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::domainsIsSet() const
{
    return m_DomainsIsSet;
}

void ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::unsetDomains()
{
    m_DomainsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::getToList() const
{
    return m_ToList;
}


void ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::setToList(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_ToList = value;
    m_ToListIsSet = true;
}
bool ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::toListIsSet() const
{
    return m_ToListIsSet;
}

void ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::unsetToList()
{
    m_ToListIsSet = false;
}

}
}
}
}

