/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties {
  #[serde(rename = "handler.name")]
  handler_name: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "user.expirationTime")]
  user_expiration_time: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "user.autoMembership")]
  user_auto_membership: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "user.propertyMapping")]
  user_property_mapping: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "user.pathPrefix")]
  user_path_prefix: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "user.membershipExpTime")]
  user_membership_exp_time: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "user.membershipNestingDepth")]
  user_membership_nesting_depth: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "user.dynamicMembership")]
  user_dynamic_membership: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "user.disableMissing")]
  user_disable_missing: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "group.expirationTime")]
  group_expiration_time: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "group.autoMembership")]
  group_auto_membership: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "group.propertyMapping")]
  group_property_mapping: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "group.pathPrefix")]
  group_path_prefix: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "enableRFC7613UsercaseMappedProfile")]
  enable_rfc7613_usercase_mapped_profile: Option<::models::ConfigNodePropertyBoolean>
}

impl OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties {
  pub fn new() -> OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties {
    OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties {
      handler_name: None,
      user_expiration_time: None,
      user_auto_membership: None,
      user_property_mapping: None,
      user_path_prefix: None,
      user_membership_exp_time: None,
      user_membership_nesting_depth: None,
      user_dynamic_membership: None,
      user_disable_missing: None,
      group_expiration_time: None,
      group_auto_membership: None,
      group_property_mapping: None,
      group_path_prefix: None,
      enable_rfc7613_usercase_mapped_profile: None
    }
  }

  pub fn set_handler_name(&mut self, handler_name: ::models::ConfigNodePropertyString) {
    self.handler_name = Some(handler_name);
  }

  pub fn with_handler_name(mut self, handler_name: ::models::ConfigNodePropertyString) -> OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties {
    self.handler_name = Some(handler_name);
    self
  }

  pub fn handler_name(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.handler_name.as_ref()
  }

  pub fn reset_handler_name(&mut self) {
    self.handler_name = None;
  }

  pub fn set_user_expiration_time(&mut self, user_expiration_time: ::models::ConfigNodePropertyString) {
    self.user_expiration_time = Some(user_expiration_time);
  }

  pub fn with_user_expiration_time(mut self, user_expiration_time: ::models::ConfigNodePropertyString) -> OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties {
    self.user_expiration_time = Some(user_expiration_time);
    self
  }

  pub fn user_expiration_time(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.user_expiration_time.as_ref()
  }

  pub fn reset_user_expiration_time(&mut self) {
    self.user_expiration_time = None;
  }

  pub fn set_user_auto_membership(&mut self, user_auto_membership: ::models::ConfigNodePropertyArray) {
    self.user_auto_membership = Some(user_auto_membership);
  }

  pub fn with_user_auto_membership(mut self, user_auto_membership: ::models::ConfigNodePropertyArray) -> OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties {
    self.user_auto_membership = Some(user_auto_membership);
    self
  }

  pub fn user_auto_membership(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.user_auto_membership.as_ref()
  }

  pub fn reset_user_auto_membership(&mut self) {
    self.user_auto_membership = None;
  }

  pub fn set_user_property_mapping(&mut self, user_property_mapping: ::models::ConfigNodePropertyArray) {
    self.user_property_mapping = Some(user_property_mapping);
  }

  pub fn with_user_property_mapping(mut self, user_property_mapping: ::models::ConfigNodePropertyArray) -> OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties {
    self.user_property_mapping = Some(user_property_mapping);
    self
  }

  pub fn user_property_mapping(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.user_property_mapping.as_ref()
  }

  pub fn reset_user_property_mapping(&mut self) {
    self.user_property_mapping = None;
  }

  pub fn set_user_path_prefix(&mut self, user_path_prefix: ::models::ConfigNodePropertyString) {
    self.user_path_prefix = Some(user_path_prefix);
  }

  pub fn with_user_path_prefix(mut self, user_path_prefix: ::models::ConfigNodePropertyString) -> OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties {
    self.user_path_prefix = Some(user_path_prefix);
    self
  }

  pub fn user_path_prefix(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.user_path_prefix.as_ref()
  }

  pub fn reset_user_path_prefix(&mut self) {
    self.user_path_prefix = None;
  }

  pub fn set_user_membership_exp_time(&mut self, user_membership_exp_time: ::models::ConfigNodePropertyString) {
    self.user_membership_exp_time = Some(user_membership_exp_time);
  }

  pub fn with_user_membership_exp_time(mut self, user_membership_exp_time: ::models::ConfigNodePropertyString) -> OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties {
    self.user_membership_exp_time = Some(user_membership_exp_time);
    self
  }

  pub fn user_membership_exp_time(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.user_membership_exp_time.as_ref()
  }

  pub fn reset_user_membership_exp_time(&mut self) {
    self.user_membership_exp_time = None;
  }

  pub fn set_user_membership_nesting_depth(&mut self, user_membership_nesting_depth: ::models::ConfigNodePropertyInteger) {
    self.user_membership_nesting_depth = Some(user_membership_nesting_depth);
  }

  pub fn with_user_membership_nesting_depth(mut self, user_membership_nesting_depth: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties {
    self.user_membership_nesting_depth = Some(user_membership_nesting_depth);
    self
  }

  pub fn user_membership_nesting_depth(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.user_membership_nesting_depth.as_ref()
  }

  pub fn reset_user_membership_nesting_depth(&mut self) {
    self.user_membership_nesting_depth = None;
  }

  pub fn set_user_dynamic_membership(&mut self, user_dynamic_membership: ::models::ConfigNodePropertyBoolean) {
    self.user_dynamic_membership = Some(user_dynamic_membership);
  }

  pub fn with_user_dynamic_membership(mut self, user_dynamic_membership: ::models::ConfigNodePropertyBoolean) -> OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties {
    self.user_dynamic_membership = Some(user_dynamic_membership);
    self
  }

  pub fn user_dynamic_membership(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.user_dynamic_membership.as_ref()
  }

  pub fn reset_user_dynamic_membership(&mut self) {
    self.user_dynamic_membership = None;
  }

  pub fn set_user_disable_missing(&mut self, user_disable_missing: ::models::ConfigNodePropertyBoolean) {
    self.user_disable_missing = Some(user_disable_missing);
  }

  pub fn with_user_disable_missing(mut self, user_disable_missing: ::models::ConfigNodePropertyBoolean) -> OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties {
    self.user_disable_missing = Some(user_disable_missing);
    self
  }

  pub fn user_disable_missing(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.user_disable_missing.as_ref()
  }

  pub fn reset_user_disable_missing(&mut self) {
    self.user_disable_missing = None;
  }

  pub fn set_group_expiration_time(&mut self, group_expiration_time: ::models::ConfigNodePropertyString) {
    self.group_expiration_time = Some(group_expiration_time);
  }

  pub fn with_group_expiration_time(mut self, group_expiration_time: ::models::ConfigNodePropertyString) -> OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties {
    self.group_expiration_time = Some(group_expiration_time);
    self
  }

  pub fn group_expiration_time(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.group_expiration_time.as_ref()
  }

  pub fn reset_group_expiration_time(&mut self) {
    self.group_expiration_time = None;
  }

  pub fn set_group_auto_membership(&mut self, group_auto_membership: ::models::ConfigNodePropertyArray) {
    self.group_auto_membership = Some(group_auto_membership);
  }

  pub fn with_group_auto_membership(mut self, group_auto_membership: ::models::ConfigNodePropertyArray) -> OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties {
    self.group_auto_membership = Some(group_auto_membership);
    self
  }

  pub fn group_auto_membership(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.group_auto_membership.as_ref()
  }

  pub fn reset_group_auto_membership(&mut self) {
    self.group_auto_membership = None;
  }

  pub fn set_group_property_mapping(&mut self, group_property_mapping: ::models::ConfigNodePropertyArray) {
    self.group_property_mapping = Some(group_property_mapping);
  }

  pub fn with_group_property_mapping(mut self, group_property_mapping: ::models::ConfigNodePropertyArray) -> OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties {
    self.group_property_mapping = Some(group_property_mapping);
    self
  }

  pub fn group_property_mapping(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.group_property_mapping.as_ref()
  }

  pub fn reset_group_property_mapping(&mut self) {
    self.group_property_mapping = None;
  }

  pub fn set_group_path_prefix(&mut self, group_path_prefix: ::models::ConfigNodePropertyString) {
    self.group_path_prefix = Some(group_path_prefix);
  }

  pub fn with_group_path_prefix(mut self, group_path_prefix: ::models::ConfigNodePropertyString) -> OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties {
    self.group_path_prefix = Some(group_path_prefix);
    self
  }

  pub fn group_path_prefix(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.group_path_prefix.as_ref()
  }

  pub fn reset_group_path_prefix(&mut self) {
    self.group_path_prefix = None;
  }

  pub fn set_enable_rfc7613_usercase_mapped_profile(&mut self, enable_rfc7613_usercase_mapped_profile: ::models::ConfigNodePropertyBoolean) {
    self.enable_rfc7613_usercase_mapped_profile = Some(enable_rfc7613_usercase_mapped_profile);
  }

  pub fn with_enable_rfc7613_usercase_mapped_profile(mut self, enable_rfc7613_usercase_mapped_profile: ::models::ConfigNodePropertyBoolean) -> OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties {
    self.enable_rfc7613_usercase_mapped_profile = Some(enable_rfc7613_usercase_mapped_profile);
    self
  }

  pub fn enable_rfc7613_usercase_mapped_profile(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.enable_rfc7613_usercase_mapped_profile.as_ref()
  }

  pub fn reset_enable_rfc7613_usercase_mapped_profile(&mut self) {
    self.enable_rfc7613_usercase_mapped_profile = None;
  }

}



