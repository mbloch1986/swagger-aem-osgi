<?php
/**
 * ComDayCqAuthImplLoginSelectorHandlerProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ComDayCqAuthImplLoginSelectorHandlerProperties Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ComDayCqAuthImplLoginSelectorHandlerProperties implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'comDayCqAuthImplLoginSelectorHandlerProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'path' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'service_ranking' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'auth_loginselector_mappings' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'auth_loginselector_changepw_mappings' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'auth_loginselector_defaultloginpage' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'auth_loginselector_defaultchangepwpage' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'auth_loginselector_handle' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'auth_loginselector_handle_all_extensions' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'path' => null,
        'service_ranking' => null,
        'auth_loginselector_mappings' => null,
        'auth_loginselector_changepw_mappings' => null,
        'auth_loginselector_defaultloginpage' => null,
        'auth_loginselector_defaultchangepwpage' => null,
        'auth_loginselector_handle' => null,
        'auth_loginselector_handle_all_extensions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'path' => 'path',
        'service_ranking' => 'service.ranking',
        'auth_loginselector_mappings' => 'auth.loginselector.mappings',
        'auth_loginselector_changepw_mappings' => 'auth.loginselector.changepw.mappings',
        'auth_loginselector_defaultloginpage' => 'auth.loginselector.defaultloginpage',
        'auth_loginselector_defaultchangepwpage' => 'auth.loginselector.defaultchangepwpage',
        'auth_loginselector_handle' => 'auth.loginselector.handle',
        'auth_loginselector_handle_all_extensions' => 'auth.loginselector.handle.all.extensions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'path' => 'setPath',
        'service_ranking' => 'setServiceRanking',
        'auth_loginselector_mappings' => 'setAuthLoginselectorMappings',
        'auth_loginselector_changepw_mappings' => 'setAuthLoginselectorChangepwMappings',
        'auth_loginselector_defaultloginpage' => 'setAuthLoginselectorDefaultloginpage',
        'auth_loginselector_defaultchangepwpage' => 'setAuthLoginselectorDefaultchangepwpage',
        'auth_loginselector_handle' => 'setAuthLoginselectorHandle',
        'auth_loginselector_handle_all_extensions' => 'setAuthLoginselectorHandleAllExtensions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'path' => 'getPath',
        'service_ranking' => 'getServiceRanking',
        'auth_loginselector_mappings' => 'getAuthLoginselectorMappings',
        'auth_loginselector_changepw_mappings' => 'getAuthLoginselectorChangepwMappings',
        'auth_loginselector_defaultloginpage' => 'getAuthLoginselectorDefaultloginpage',
        'auth_loginselector_defaultchangepwpage' => 'getAuthLoginselectorDefaultchangepwpage',
        'auth_loginselector_handle' => 'getAuthLoginselectorHandle',
        'auth_loginselector_handle_all_extensions' => 'getAuthLoginselectorHandleAllExtensions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['path'] = isset($data['path']) ? $data['path'] : null;
        $this->container['service_ranking'] = isset($data['service_ranking']) ? $data['service_ranking'] : null;
        $this->container['auth_loginselector_mappings'] = isset($data['auth_loginselector_mappings']) ? $data['auth_loginselector_mappings'] : null;
        $this->container['auth_loginselector_changepw_mappings'] = isset($data['auth_loginselector_changepw_mappings']) ? $data['auth_loginselector_changepw_mappings'] : null;
        $this->container['auth_loginselector_defaultloginpage'] = isset($data['auth_loginselector_defaultloginpage']) ? $data['auth_loginselector_defaultloginpage'] : null;
        $this->container['auth_loginselector_defaultchangepwpage'] = isset($data['auth_loginselector_defaultchangepwpage']) ? $data['auth_loginselector_defaultchangepwpage'] : null;
        $this->container['auth_loginselector_handle'] = isset($data['auth_loginselector_handle']) ? $data['auth_loginselector_handle'] : null;
        $this->container['auth_loginselector_handle_all_extensions'] = isset($data['auth_loginselector_handle_all_extensions']) ? $data['auth_loginselector_handle_all_extensions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets path
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $path path
     *
     * @return $this
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets service_ranking
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getServiceRanking()
    {
        return $this->container['service_ranking'];
    }

    /**
     * Sets service_ranking
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $service_ranking service_ranking
     *
     * @return $this
     */
    public function setServiceRanking($service_ranking)
    {
        $this->container['service_ranking'] = $service_ranking;

        return $this;
    }

    /**
     * Gets auth_loginselector_mappings
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getAuthLoginselectorMappings()
    {
        return $this->container['auth_loginselector_mappings'];
    }

    /**
     * Sets auth_loginselector_mappings
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $auth_loginselector_mappings auth_loginselector_mappings
     *
     * @return $this
     */
    public function setAuthLoginselectorMappings($auth_loginselector_mappings)
    {
        $this->container['auth_loginselector_mappings'] = $auth_loginselector_mappings;

        return $this;
    }

    /**
     * Gets auth_loginselector_changepw_mappings
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getAuthLoginselectorChangepwMappings()
    {
        return $this->container['auth_loginselector_changepw_mappings'];
    }

    /**
     * Sets auth_loginselector_changepw_mappings
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $auth_loginselector_changepw_mappings auth_loginselector_changepw_mappings
     *
     * @return $this
     */
    public function setAuthLoginselectorChangepwMappings($auth_loginselector_changepw_mappings)
    {
        $this->container['auth_loginselector_changepw_mappings'] = $auth_loginselector_changepw_mappings;

        return $this;
    }

    /**
     * Gets auth_loginselector_defaultloginpage
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getAuthLoginselectorDefaultloginpage()
    {
        return $this->container['auth_loginselector_defaultloginpage'];
    }

    /**
     * Sets auth_loginselector_defaultloginpage
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $auth_loginselector_defaultloginpage auth_loginselector_defaultloginpage
     *
     * @return $this
     */
    public function setAuthLoginselectorDefaultloginpage($auth_loginselector_defaultloginpage)
    {
        $this->container['auth_loginselector_defaultloginpage'] = $auth_loginselector_defaultloginpage;

        return $this;
    }

    /**
     * Gets auth_loginselector_defaultchangepwpage
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getAuthLoginselectorDefaultchangepwpage()
    {
        return $this->container['auth_loginselector_defaultchangepwpage'];
    }

    /**
     * Sets auth_loginselector_defaultchangepwpage
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $auth_loginselector_defaultchangepwpage auth_loginselector_defaultchangepwpage
     *
     * @return $this
     */
    public function setAuthLoginselectorDefaultchangepwpage($auth_loginselector_defaultchangepwpage)
    {
        $this->container['auth_loginselector_defaultchangepwpage'] = $auth_loginselector_defaultchangepwpage;

        return $this;
    }

    /**
     * Gets auth_loginselector_handle
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getAuthLoginselectorHandle()
    {
        return $this->container['auth_loginselector_handle'];
    }

    /**
     * Sets auth_loginselector_handle
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $auth_loginselector_handle auth_loginselector_handle
     *
     * @return $this
     */
    public function setAuthLoginselectorHandle($auth_loginselector_handle)
    {
        $this->container['auth_loginselector_handle'] = $auth_loginselector_handle;

        return $this;
    }

    /**
     * Gets auth_loginselector_handle_all_extensions
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getAuthLoginselectorHandleAllExtensions()
    {
        return $this->container['auth_loginselector_handle_all_extensions'];
    }

    /**
     * Sets auth_loginselector_handle_all_extensions
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $auth_loginselector_handle_all_extensions auth_loginselector_handle_all_extensions
     *
     * @return $this
     */
    public function setAuthLoginselectorHandleAllExtensions($auth_loginselector_handle_all_extensions)
    {
        $this->container['auth_loginselector_handle_all_extensions'] = $auth_loginselector_handle_all_extensions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


