/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingCommonsLogLogManagerFactoryWriterProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::OAIOrgApacheSlingCommonsLogLogManagerFactoryWriterProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::OAIOrgApacheSlingCommonsLogLogManagerFactoryWriterProperties() {
    init();
}

OAIOrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::~OAIOrgApacheSlingCommonsLogLogManagerFactoryWriterProperties() {
    this->cleanup();
}

void
OAIOrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::init() {
    org_apache_sling_commons_log_file = new OAIConfigNodePropertyString();
    m_org_apache_sling_commons_log_file_isSet = false;
    org_apache_sling_commons_log_file_number = new OAIConfigNodePropertyInteger();
    m_org_apache_sling_commons_log_file_number_isSet = false;
    org_apache_sling_commons_log_file_size = new OAIConfigNodePropertyString();
    m_org_apache_sling_commons_log_file_size_isSet = false;
    org_apache_sling_commons_log_file_buffered = new OAIConfigNodePropertyBoolean();
    m_org_apache_sling_commons_log_file_buffered_isSet = false;
}

void
OAIOrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::cleanup() {
    if(org_apache_sling_commons_log_file != nullptr) { 
        delete org_apache_sling_commons_log_file;
    }
    if(org_apache_sling_commons_log_file_number != nullptr) { 
        delete org_apache_sling_commons_log_file_number;
    }
    if(org_apache_sling_commons_log_file_size != nullptr) { 
        delete org_apache_sling_commons_log_file_size;
    }
    if(org_apache_sling_commons_log_file_buffered != nullptr) { 
        delete org_apache_sling_commons_log_file_buffered;
    }
}

OAIOrgApacheSlingCommonsLogLogManagerFactoryWriterProperties*
OAIOrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&org_apache_sling_commons_log_file, pJson["org.apache.sling.commons.log.file"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&org_apache_sling_commons_log_file_number, pJson["org.apache.sling.commons.log.file.number"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&org_apache_sling_commons_log_file_size, pJson["org.apache.sling.commons.log.file.size"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&org_apache_sling_commons_log_file_buffered, pJson["org.apache.sling.commons.log.file.buffered"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
}

QString
OAIOrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::asJsonObject() {
    QJsonObject obj;
    if((org_apache_sling_commons_log_file != nullptr) && (org_apache_sling_commons_log_file->isSet())){
        toJsonValue(QString("org.apache.sling.commons.log.file"), org_apache_sling_commons_log_file, obj, QString("OAIConfigNodePropertyString"));
    }
    if((org_apache_sling_commons_log_file_number != nullptr) && (org_apache_sling_commons_log_file_number->isSet())){
        toJsonValue(QString("org.apache.sling.commons.log.file.number"), org_apache_sling_commons_log_file_number, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((org_apache_sling_commons_log_file_size != nullptr) && (org_apache_sling_commons_log_file_size->isSet())){
        toJsonValue(QString("org.apache.sling.commons.log.file.size"), org_apache_sling_commons_log_file_size, obj, QString("OAIConfigNodePropertyString"));
    }
    if((org_apache_sling_commons_log_file_buffered != nullptr) && (org_apache_sling_commons_log_file_buffered->isSet())){
        toJsonValue(QString("org.apache.sling.commons.log.file.buffered"), org_apache_sling_commons_log_file_buffered, obj, QString("OAIConfigNodePropertyBoolean"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::getOrgApacheSlingCommonsLogFile() {
    return org_apache_sling_commons_log_file;
}
void
OAIOrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::setOrgApacheSlingCommonsLogFile(OAIConfigNodePropertyString* org_apache_sling_commons_log_file) {
    this->org_apache_sling_commons_log_file = org_apache_sling_commons_log_file;
    this->m_org_apache_sling_commons_log_file_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::getOrgApacheSlingCommonsLogFileNumber() {
    return org_apache_sling_commons_log_file_number;
}
void
OAIOrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::setOrgApacheSlingCommonsLogFileNumber(OAIConfigNodePropertyInteger* org_apache_sling_commons_log_file_number) {
    this->org_apache_sling_commons_log_file_number = org_apache_sling_commons_log_file_number;
    this->m_org_apache_sling_commons_log_file_number_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::getOrgApacheSlingCommonsLogFileSize() {
    return org_apache_sling_commons_log_file_size;
}
void
OAIOrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::setOrgApacheSlingCommonsLogFileSize(OAIConfigNodePropertyString* org_apache_sling_commons_log_file_size) {
    this->org_apache_sling_commons_log_file_size = org_apache_sling_commons_log_file_size;
    this->m_org_apache_sling_commons_log_file_size_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::getOrgApacheSlingCommonsLogFileBuffered() {
    return org_apache_sling_commons_log_file_buffered;
}
void
OAIOrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::setOrgApacheSlingCommonsLogFileBuffered(OAIConfigNodePropertyBoolean* org_apache_sling_commons_log_file_buffered) {
    this->org_apache_sling_commons_log_file_buffered = org_apache_sling_commons_log_file_buffered;
    this->m_org_apache_sling_commons_log_file_buffered_isSet = true;
}


bool
OAIOrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(org_apache_sling_commons_log_file != nullptr && org_apache_sling_commons_log_file->isSet()){ isObjectUpdated = true; break;}
        if(org_apache_sling_commons_log_file_number != nullptr && org_apache_sling_commons_log_file_number->isSet()){ isObjectUpdated = true; break;}
        if(org_apache_sling_commons_log_file_size != nullptr && org_apache_sling_commons_log_file_size->isSet()){ isObjectUpdated = true; break;}
        if(org_apache_sling_commons_log_file_buffered != nullptr && org_apache_sling_commons_log_file_buffered->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

