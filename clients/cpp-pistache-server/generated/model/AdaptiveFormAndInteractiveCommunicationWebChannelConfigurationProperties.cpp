/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties()
{
    m_ShowPlaceholderIsSet = false;
    m_MaximumCacheEntriesIsSet = false;
    m_Af_scripting_compatversionIsSet = false;
    m_MakeFileNameUniqueIsSet = false;
    m_GeneratingCompliantDataIsSet = false;
    
}

AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::~AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties()
{
}

void AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_ShowPlaceholderIsSet)
    {
        val["showPlaceholder"] = ModelBase::toJson(m_ShowPlaceholder);
    }
    if(m_MaximumCacheEntriesIsSet)
    {
        val["maximumCacheEntries"] = ModelBase::toJson(m_MaximumCacheEntries);
    }
    if(m_Af_scripting_compatversionIsSet)
    {
        val["af.scripting.compatversion"] = ModelBase::toJson(m_Af_scripting_compatversion);
    }
    if(m_MakeFileNameUniqueIsSet)
    {
        val["makeFileNameUnique"] = ModelBase::toJson(m_MakeFileNameUnique);
    }
    if(m_GeneratingCompliantDataIsSet)
    {
        val["generatingCompliantData"] = ModelBase::toJson(m_GeneratingCompliantData);
    }
    

    return val;
}

void AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::fromJson(nlohmann::json& val)
{
    if(val.find("showPlaceholder") != val.end())
    {
        if(!val["showPlaceholder"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["showPlaceholder"]);
            setShowPlaceholder( newItem );
        }
        
    }
    if(val.find("maximumCacheEntries") != val.end())
    {
        if(!val["maximumCacheEntries"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["maximumCacheEntries"]);
            setMaximumCacheEntries( newItem );
        }
        
    }
    if(val.find("af.scripting.compatversion") != val.end())
    {
        if(!val["af.scripting.compatversion"].is_null())
        {
            ConfigNodePropertyDropDown newItem;
            newItem.fromJson(val["af.scripting.compatversion"]);
            setAfScriptingCompatversion( newItem );
        }
        
    }
    if(val.find("makeFileNameUnique") != val.end())
    {
        if(!val["makeFileNameUnique"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["makeFileNameUnique"]);
            setMakeFileNameUnique( newItem );
        }
        
    }
    if(val.find("generatingCompliantData") != val.end())
    {
        if(!val["generatingCompliantData"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["generatingCompliantData"]);
            setGeneratingCompliantData( newItem );
        }
        
    }
    
}


ConfigNodePropertyBoolean AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::getShowPlaceholder() const
{
    return m_ShowPlaceholder;
}
void AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::setShowPlaceholder(ConfigNodePropertyBoolean const& value)
{
    m_ShowPlaceholder = value;
    m_ShowPlaceholderIsSet = true;
}
bool AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::showPlaceholderIsSet() const
{
    return m_ShowPlaceholderIsSet;
}
void AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::unsetShowPlaceholder()
{
    m_ShowPlaceholderIsSet = false;
}
ConfigNodePropertyInteger AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::getMaximumCacheEntries() const
{
    return m_MaximumCacheEntries;
}
void AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::setMaximumCacheEntries(ConfigNodePropertyInteger const& value)
{
    m_MaximumCacheEntries = value;
    m_MaximumCacheEntriesIsSet = true;
}
bool AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::maximumCacheEntriesIsSet() const
{
    return m_MaximumCacheEntriesIsSet;
}
void AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::unsetMaximumCacheEntries()
{
    m_MaximumCacheEntriesIsSet = false;
}
ConfigNodePropertyDropDown AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::getAfScriptingCompatversion() const
{
    return m_Af_scripting_compatversion;
}
void AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::setAfScriptingCompatversion(ConfigNodePropertyDropDown const& value)
{
    m_Af_scripting_compatversion = value;
    m_Af_scripting_compatversionIsSet = true;
}
bool AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::afScriptingCompatversionIsSet() const
{
    return m_Af_scripting_compatversionIsSet;
}
void AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::unsetAf_scripting_compatversion()
{
    m_Af_scripting_compatversionIsSet = false;
}
ConfigNodePropertyBoolean AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::getMakeFileNameUnique() const
{
    return m_MakeFileNameUnique;
}
void AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::setMakeFileNameUnique(ConfigNodePropertyBoolean const& value)
{
    m_MakeFileNameUnique = value;
    m_MakeFileNameUniqueIsSet = true;
}
bool AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::makeFileNameUniqueIsSet() const
{
    return m_MakeFileNameUniqueIsSet;
}
void AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::unsetMakeFileNameUnique()
{
    m_MakeFileNameUniqueIsSet = false;
}
ConfigNodePropertyBoolean AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::getGeneratingCompliantData() const
{
    return m_GeneratingCompliantData;
}
void AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::setGeneratingCompliantData(ConfigNodePropertyBoolean const& value)
{
    m_GeneratingCompliantData = value;
    m_GeneratingCompliantDataIsSet = true;
}
bool AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::generatingCompliantDataIsSet() const
{
    return m_GeneratingCompliantDataIsSet;
}
void AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::unsetGeneratingCompliantData()
{
    m_GeneratingCompliantDataIsSet = false;
}

}
}
}
}

