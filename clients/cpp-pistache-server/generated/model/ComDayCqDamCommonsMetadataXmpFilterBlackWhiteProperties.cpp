/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties::ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties()
{
    m_Xmp_filter_apply_whitelistIsSet = false;
    m_Xmp_filter_whitelistIsSet = false;
    m_Xmp_filter_apply_blacklistIsSet = false;
    m_Xmp_filter_blacklistIsSet = false;
    
}

ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties::~ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties()
{
}

void ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Xmp_filter_apply_whitelistIsSet)
    {
        val["xmp.filter.apply_whitelist"] = ModelBase::toJson(m_Xmp_filter_apply_whitelist);
    }
    if(m_Xmp_filter_whitelistIsSet)
    {
        val["xmp.filter.whitelist"] = ModelBase::toJson(m_Xmp_filter_whitelist);
    }
    if(m_Xmp_filter_apply_blacklistIsSet)
    {
        val["xmp.filter.apply_blacklist"] = ModelBase::toJson(m_Xmp_filter_apply_blacklist);
    }
    if(m_Xmp_filter_blacklistIsSet)
    {
        val["xmp.filter.blacklist"] = ModelBase::toJson(m_Xmp_filter_blacklist);
    }
    

    return val;
}

void ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties::fromJson(nlohmann::json& val)
{
    if(val.find("xmp.filter.apply_whitelist") != val.end())
    {
        if(!val["xmp.filter.apply_whitelist"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["xmp.filter.apply_whitelist"]);
            setXmpFilterApplyWhitelist( newItem );
        }
        
    }
    if(val.find("xmp.filter.whitelist") != val.end())
    {
        if(!val["xmp.filter.whitelist"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["xmp.filter.whitelist"]);
            setXmpFilterWhitelist( newItem );
        }
        
    }
    if(val.find("xmp.filter.apply_blacklist") != val.end())
    {
        if(!val["xmp.filter.apply_blacklist"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["xmp.filter.apply_blacklist"]);
            setXmpFilterApplyBlacklist( newItem );
        }
        
    }
    if(val.find("xmp.filter.blacklist") != val.end())
    {
        if(!val["xmp.filter.blacklist"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["xmp.filter.blacklist"]);
            setXmpFilterBlacklist( newItem );
        }
        
    }
    
}


ConfigNodePropertyBoolean ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties::getXmpFilterApplyWhitelist() const
{
    return m_Xmp_filter_apply_whitelist;
}
void ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties::setXmpFilterApplyWhitelist(ConfigNodePropertyBoolean const& value)
{
    m_Xmp_filter_apply_whitelist = value;
    m_Xmp_filter_apply_whitelistIsSet = true;
}
bool ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties::xmpFilterApplyWhitelistIsSet() const
{
    return m_Xmp_filter_apply_whitelistIsSet;
}
void ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties::unsetXmp_filter_apply_whitelist()
{
    m_Xmp_filter_apply_whitelistIsSet = false;
}
ConfigNodePropertyArray ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties::getXmpFilterWhitelist() const
{
    return m_Xmp_filter_whitelist;
}
void ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties::setXmpFilterWhitelist(ConfigNodePropertyArray const& value)
{
    m_Xmp_filter_whitelist = value;
    m_Xmp_filter_whitelistIsSet = true;
}
bool ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties::xmpFilterWhitelistIsSet() const
{
    return m_Xmp_filter_whitelistIsSet;
}
void ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties::unsetXmp_filter_whitelist()
{
    m_Xmp_filter_whitelistIsSet = false;
}
ConfigNodePropertyBoolean ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties::getXmpFilterApplyBlacklist() const
{
    return m_Xmp_filter_apply_blacklist;
}
void ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties::setXmpFilterApplyBlacklist(ConfigNodePropertyBoolean const& value)
{
    m_Xmp_filter_apply_blacklist = value;
    m_Xmp_filter_apply_blacklistIsSet = true;
}
bool ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties::xmpFilterApplyBlacklistIsSet() const
{
    return m_Xmp_filter_apply_blacklistIsSet;
}
void ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties::unsetXmp_filter_apply_blacklist()
{
    m_Xmp_filter_apply_blacklistIsSet = false;
}
ConfigNodePropertyArray ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties::getXmpFilterBlacklist() const
{
    return m_Xmp_filter_blacklist;
}
void ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties::setXmpFilterBlacklist(ConfigNodePropertyArray const& value)
{
    m_Xmp_filter_blacklist = value;
    m_Xmp_filter_blacklistIsSet = true;
}
bool ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties::xmpFilterBlacklistIsSet() const
{
    return m_Xmp_filter_blacklistIsSet;
}
void ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties::unsetXmp_filter_blacklist()
{
    m_Xmp_filter_blacklistIsSet = false;
}

}
}
}
}

