/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ComDayCqWcmCoreImplVersionManagerImplProperties.h
 *
 * 
 */

#ifndef ComDayCqWcmCoreImplVersionManagerImplProperties_H_
#define ComDayCqWcmCoreImplVersionManagerImplProperties_H_


#include "ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComDayCqWcmCoreImplVersionManagerImplProperties
    : public ModelBase
{
public:
    ComDayCqWcmCoreImplVersionManagerImplProperties();
    virtual ~ComDayCqWcmCoreImplVersionManagerImplProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// ComDayCqWcmCoreImplVersionManagerImplProperties members

    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getVersionmanagerCreateVersionOnActivation() const;
    void setVersionmanagerCreateVersionOnActivation(ConfigNodePropertyBoolean const& value);
    bool versionmanagerCreateVersionOnActivationIsSet() const;
    void unsetVersionmanager_createVersionOnActivation();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getVersionmanagerPurgingEnabled() const;
    void setVersionmanagerPurgingEnabled(ConfigNodePropertyBoolean const& value);
    bool versionmanagerPurgingEnabledIsSet() const;
    void unsetVersionmanager_purgingEnabled();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyArray getVersionmanagerPurgePaths() const;
    void setVersionmanagerPurgePaths(ConfigNodePropertyArray const& value);
    bool versionmanagerPurgePathsIsSet() const;
    void unsetVersionmanager_purgePaths();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyArray getVersionmanagerIvPaths() const;
    void setVersionmanagerIvPaths(ConfigNodePropertyArray const& value);
    bool versionmanagerIvPathsIsSet() const;
    void unsetVersionmanager_ivPaths();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getVersionmanagerMaxAgeDays() const;
    void setVersionmanagerMaxAgeDays(ConfigNodePropertyInteger const& value);
    bool versionmanagerMaxAgeDaysIsSet() const;
    void unsetVersionmanager_maxAgeDays();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getVersionmanagerMaxNumberVersions() const;
    void setVersionmanagerMaxNumberVersions(ConfigNodePropertyInteger const& value);
    bool versionmanagerMaxNumberVersionsIsSet() const;
    void unsetVersionmanager_maxNumberVersions();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getVersionmanagerMinNumberVersions() const;
    void setVersionmanagerMinNumberVersions(ConfigNodePropertyInteger const& value);
    bool versionmanagerMinNumberVersionsIsSet() const;
    void unsetVersionmanager_minNumberVersions();

protected:
    ConfigNodePropertyBoolean m_Versionmanager_createVersionOnActivation;
    bool m_Versionmanager_createVersionOnActivationIsSet;
    ConfigNodePropertyBoolean m_Versionmanager_purgingEnabled;
    bool m_Versionmanager_purgingEnabledIsSet;
    ConfigNodePropertyArray m_Versionmanager_purgePaths;
    bool m_Versionmanager_purgePathsIsSet;
    ConfigNodePropertyArray m_Versionmanager_ivPaths;
    bool m_Versionmanager_ivPathsIsSet;
    ConfigNodePropertyInteger m_Versionmanager_maxAgeDays;
    bool m_Versionmanager_maxAgeDaysIsSet;
    ConfigNodePropertyInteger m_Versionmanager_maxNumberVersions;
    bool m_Versionmanager_maxNumberVersionsIsSet;
    ConfigNodePropertyInteger m_Versionmanager_minNumberVersions;
    bool m_Versionmanager_minNumberVersionsIsSet;
};

}
}
}
}

#endif /* ComDayCqWcmCoreImplVersionManagerImplProperties_H_ */
