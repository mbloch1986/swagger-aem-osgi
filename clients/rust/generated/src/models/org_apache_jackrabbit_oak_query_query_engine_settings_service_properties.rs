/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties {
  #[serde(rename = "queryLimitInMemory")]
  query_limit_in_memory: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "queryLimitReads")]
  query_limit_reads: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "queryFailTraversal")]
  query_fail_traversal: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "fastQuerySize")]
  fast_query_size: Option<::models::ConfigNodePropertyBoolean>
}

impl OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties {
  pub fn new() -> OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties {
    OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties {
      query_limit_in_memory: None,
      query_limit_reads: None,
      query_fail_traversal: None,
      fast_query_size: None
    }
  }

  pub fn set_query_limit_in_memory(&mut self, query_limit_in_memory: ::models::ConfigNodePropertyInteger) {
    self.query_limit_in_memory = Some(query_limit_in_memory);
  }

  pub fn with_query_limit_in_memory(mut self, query_limit_in_memory: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties {
    self.query_limit_in_memory = Some(query_limit_in_memory);
    self
  }

  pub fn query_limit_in_memory(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.query_limit_in_memory.as_ref()
  }

  pub fn reset_query_limit_in_memory(&mut self) {
    self.query_limit_in_memory = None;
  }

  pub fn set_query_limit_reads(&mut self, query_limit_reads: ::models::ConfigNodePropertyInteger) {
    self.query_limit_reads = Some(query_limit_reads);
  }

  pub fn with_query_limit_reads(mut self, query_limit_reads: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties {
    self.query_limit_reads = Some(query_limit_reads);
    self
  }

  pub fn query_limit_reads(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.query_limit_reads.as_ref()
  }

  pub fn reset_query_limit_reads(&mut self) {
    self.query_limit_reads = None;
  }

  pub fn set_query_fail_traversal(&mut self, query_fail_traversal: ::models::ConfigNodePropertyBoolean) {
    self.query_fail_traversal = Some(query_fail_traversal);
  }

  pub fn with_query_fail_traversal(mut self, query_fail_traversal: ::models::ConfigNodePropertyBoolean) -> OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties {
    self.query_fail_traversal = Some(query_fail_traversal);
    self
  }

  pub fn query_fail_traversal(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.query_fail_traversal.as_ref()
  }

  pub fn reset_query_fail_traversal(&mut self) {
    self.query_fail_traversal = None;
  }

  pub fn set_fast_query_size(&mut self, fast_query_size: ::models::ConfigNodePropertyBoolean) {
    self.fast_query_size = Some(fast_query_size);
  }

  pub fn with_fast_query_size(mut self, fast_query_size: ::models::ConfigNodePropertyBoolean) -> OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties {
    self.fast_query_size = Some(fast_query_size);
    self
  }

  pub fn fast_query_size(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.fast_query_size.as_ref()
  }

  pub fn reset_fast_query_size(&mut self) {
    self.fast_query_size = None;
  }

}



