/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ComDayCommonsHttpclientProperties : IEquatable<ComDayCommonsHttpclientProperties>
    { 
        /// <summary>
        /// Gets or Sets ProxyEnabled
        /// </summary>
        [DataMember(Name="proxy.enabled")]
        public ConfigNodePropertyBoolean ProxyEnabled { get; set; }

        /// <summary>
        /// Gets or Sets ProxyHost
        /// </summary>
        [DataMember(Name="proxy.host")]
        public ConfigNodePropertyString ProxyHost { get; set; }

        /// <summary>
        /// Gets or Sets ProxyUser
        /// </summary>
        [DataMember(Name="proxy.user")]
        public ConfigNodePropertyString ProxyUser { get; set; }

        /// <summary>
        /// Gets or Sets ProxyPassword
        /// </summary>
        [DataMember(Name="proxy.password")]
        public ConfigNodePropertyString ProxyPassword { get; set; }

        /// <summary>
        /// Gets or Sets ProxyNtlmHost
        /// </summary>
        [DataMember(Name="proxy.ntlm.host")]
        public ConfigNodePropertyString ProxyNtlmHost { get; set; }

        /// <summary>
        /// Gets or Sets ProxyNtlmDomain
        /// </summary>
        [DataMember(Name="proxy.ntlm.domain")]
        public ConfigNodePropertyString ProxyNtlmDomain { get; set; }

        /// <summary>
        /// Gets or Sets ProxyExceptions
        /// </summary>
        [DataMember(Name="proxy.exceptions")]
        public ConfigNodePropertyArray ProxyExceptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComDayCommonsHttpclientProperties {\n");
            sb.Append("  ProxyEnabled: ").Append(ProxyEnabled).Append("\n");
            sb.Append("  ProxyHost: ").Append(ProxyHost).Append("\n");
            sb.Append("  ProxyUser: ").Append(ProxyUser).Append("\n");
            sb.Append("  ProxyPassword: ").Append(ProxyPassword).Append("\n");
            sb.Append("  ProxyNtlmHost: ").Append(ProxyNtlmHost).Append("\n");
            sb.Append("  ProxyNtlmDomain: ").Append(ProxyNtlmDomain).Append("\n");
            sb.Append("  ProxyExceptions: ").Append(ProxyExceptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ComDayCommonsHttpclientProperties)obj);
        }

        /// <summary>
        /// Returns true if ComDayCommonsHttpclientProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of ComDayCommonsHttpclientProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComDayCommonsHttpclientProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ProxyEnabled == other.ProxyEnabled ||
                    ProxyEnabled != null &&
                    ProxyEnabled.Equals(other.ProxyEnabled)
                ) && 
                (
                    ProxyHost == other.ProxyHost ||
                    ProxyHost != null &&
                    ProxyHost.Equals(other.ProxyHost)
                ) && 
                (
                    ProxyUser == other.ProxyUser ||
                    ProxyUser != null &&
                    ProxyUser.Equals(other.ProxyUser)
                ) && 
                (
                    ProxyPassword == other.ProxyPassword ||
                    ProxyPassword != null &&
                    ProxyPassword.Equals(other.ProxyPassword)
                ) && 
                (
                    ProxyNtlmHost == other.ProxyNtlmHost ||
                    ProxyNtlmHost != null &&
                    ProxyNtlmHost.Equals(other.ProxyNtlmHost)
                ) && 
                (
                    ProxyNtlmDomain == other.ProxyNtlmDomain ||
                    ProxyNtlmDomain != null &&
                    ProxyNtlmDomain.Equals(other.ProxyNtlmDomain)
                ) && 
                (
                    ProxyExceptions == other.ProxyExceptions ||
                    ProxyExceptions != null &&
                    ProxyExceptions.Equals(other.ProxyExceptions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ProxyEnabled != null)
                    hashCode = hashCode * 59 + ProxyEnabled.GetHashCode();
                    if (ProxyHost != null)
                    hashCode = hashCode * 59 + ProxyHost.GetHashCode();
                    if (ProxyUser != null)
                    hashCode = hashCode * 59 + ProxyUser.GetHashCode();
                    if (ProxyPassword != null)
                    hashCode = hashCode * 59 + ProxyPassword.GetHashCode();
                    if (ProxyNtlmHost != null)
                    hashCode = hashCode * 59 + ProxyNtlmHost.GetHashCode();
                    if (ProxyNtlmDomain != null)
                    hashCode = hashCode * 59 + ProxyNtlmDomain.GetHashCode();
                    if (ProxyExceptions != null)
                    hashCode = hashCode * 59 + ProxyExceptions.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ComDayCommonsHttpclientProperties left, ComDayCommonsHttpclientProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ComDayCommonsHttpclientProperties left, ComDayCommonsHttpclientProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
