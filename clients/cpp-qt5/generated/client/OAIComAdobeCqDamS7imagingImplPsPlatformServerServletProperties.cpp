/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqDamS7imagingImplPsPlatformServerServletProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::OAIComAdobeCqDamS7imagingImplPsPlatformServerServletProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::OAIComAdobeCqDamS7imagingImplPsPlatformServerServletProperties() {
    init();
}

OAIComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::~OAIComAdobeCqDamS7imagingImplPsPlatformServerServletProperties() {
    this->cleanup();
}

void
OAIComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::init() {
    cache_enable = new OAIConfigNodePropertyBoolean();
    m_cache_enable_isSet = false;
    cache_root_paths = new OAIConfigNodePropertyArray();
    m_cache_root_paths_isSet = false;
    cache_max_size = new OAIConfigNodePropertyInteger();
    m_cache_max_size_isSet = false;
    cache_max_entries = new OAIConfigNodePropertyInteger();
    m_cache_max_entries_isSet = false;
}

void
OAIComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::cleanup() {
    if(cache_enable != nullptr) { 
        delete cache_enable;
    }
    if(cache_root_paths != nullptr) { 
        delete cache_root_paths;
    }
    if(cache_max_size != nullptr) { 
        delete cache_max_size;
    }
    if(cache_max_entries != nullptr) { 
        delete cache_max_entries;
    }
}

OAIComAdobeCqDamS7imagingImplPsPlatformServerServletProperties*
OAIComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&cache_enable, pJson["cache.enable"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&cache_root_paths, pJson["cache.rootPaths"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&cache_max_size, pJson["cache.maxSize"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&cache_max_entries, pJson["cache.maxEntries"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
}

QString
OAIComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::asJsonObject() {
    QJsonObject obj;
    if((cache_enable != nullptr) && (cache_enable->isSet())){
        toJsonValue(QString("cache.enable"), cache_enable, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((cache_root_paths != nullptr) && (cache_root_paths->isSet())){
        toJsonValue(QString("cache.rootPaths"), cache_root_paths, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((cache_max_size != nullptr) && (cache_max_size->isSet())){
        toJsonValue(QString("cache.maxSize"), cache_max_size, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((cache_max_entries != nullptr) && (cache_max_entries->isSet())){
        toJsonValue(QString("cache.maxEntries"), cache_max_entries, obj, QString("OAIConfigNodePropertyInteger"));
    }

    return obj;
}

OAIConfigNodePropertyBoolean*
OAIComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::getCacheEnable() {
    return cache_enable;
}
void
OAIComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::setCacheEnable(OAIConfigNodePropertyBoolean* cache_enable) {
    this->cache_enable = cache_enable;
    this->m_cache_enable_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::getCacheRootPaths() {
    return cache_root_paths;
}
void
OAIComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::setCacheRootPaths(OAIConfigNodePropertyArray* cache_root_paths) {
    this->cache_root_paths = cache_root_paths;
    this->m_cache_root_paths_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::getCacheMaxSize() {
    return cache_max_size;
}
void
OAIComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::setCacheMaxSize(OAIConfigNodePropertyInteger* cache_max_size) {
    this->cache_max_size = cache_max_size;
    this->m_cache_max_size_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::getCacheMaxEntries() {
    return cache_max_entries;
}
void
OAIComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::setCacheMaxEntries(OAIConfigNodePropertyInteger* cache_max_entries) {
    this->cache_max_entries = cache_max_entries;
    this->m_cache_max_entries_isSet = true;
}


bool
OAIComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(cache_enable != nullptr && cache_enable->isSet()){ isObjectUpdated = true; break;}
        if(cache_root_paths != nullptr && cache_root_paths->isSet()){ isObjectUpdated = true; break;}
        if(cache_max_size != nullptr && cache_max_size->isSet()){ isObjectUpdated = true; break;}
        if(cache_max_entries != nullptr && cache_max_entries->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

