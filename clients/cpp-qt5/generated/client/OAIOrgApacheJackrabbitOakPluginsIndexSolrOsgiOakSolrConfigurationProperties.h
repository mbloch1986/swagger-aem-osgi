/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties.h
 *
 * 
 */

#ifndef OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties_H_
#define OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties_H_

#include <QJsonObject>


#include "OAIOAIConfigNodePropertyArray.h"
#include "OAIOAIConfigNodePropertyBoolean.h"
#include "OAIOAIConfigNodePropertyDropDown.h"
#include "OAIOAIConfigNodePropertyInteger.h"
#include "OAIOAIConfigNodePropertyString.h"

#include "OAIObject.h"

namespace OpenAPI {

class OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties: public OAIObject {
public:
    OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties();
    OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties(QString json);
    ~OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties* fromJson(QString jsonString) override;

    OAIConfigNodePropertyString* getPathDescField();
    void setPathDescField(OAIConfigNodePropertyString* path_desc_field);

    OAIConfigNodePropertyString* getPathChildField();
    void setPathChildField(OAIConfigNodePropertyString* path_child_field);

    OAIConfigNodePropertyString* getPathParentField();
    void setPathParentField(OAIConfigNodePropertyString* path_parent_field);

    OAIConfigNodePropertyString* getPathExactField();
    void setPathExactField(OAIConfigNodePropertyString* path_exact_field);

    OAIConfigNodePropertyString* getCatchAllField();
    void setCatchAllField(OAIConfigNodePropertyString* catch_all_field);

    OAIConfigNodePropertyString* getCollapsedPathField();
    void setCollapsedPathField(OAIConfigNodePropertyString* collapsed_path_field);

    OAIConfigNodePropertyString* getPathDepthField();
    void setPathDepthField(OAIConfigNodePropertyString* path_depth_field);

    OAIConfigNodePropertyDropDown* getCommitPolicy();
    void setCommitPolicy(OAIConfigNodePropertyDropDown* commit_policy);

    OAIConfigNodePropertyInteger* getRows();
    void setRows(OAIConfigNodePropertyInteger* rows);

    OAIConfigNodePropertyBoolean* getPathRestrictions();
    void setPathRestrictions(OAIConfigNodePropertyBoolean* path_restrictions);

    OAIConfigNodePropertyBoolean* getPropertyRestrictions();
    void setPropertyRestrictions(OAIConfigNodePropertyBoolean* property_restrictions);

    OAIConfigNodePropertyBoolean* getPrimarytypesRestrictions();
    void setPrimarytypesRestrictions(OAIConfigNodePropertyBoolean* primarytypes_restrictions);

    OAIConfigNodePropertyArray* getIgnoredProperties();
    void setIgnoredProperties(OAIConfigNodePropertyArray* ignored_properties);

    OAIConfigNodePropertyArray* getUsedProperties();
    void setUsedProperties(OAIConfigNodePropertyArray* used_properties);

    OAIConfigNodePropertyArray* getTypeMappings();
    void setTypeMappings(OAIConfigNodePropertyArray* type_mappings);

    OAIConfigNodePropertyArray* getPropertyMappings();
    void setPropertyMappings(OAIConfigNodePropertyArray* property_mappings);

    OAIConfigNodePropertyBoolean* getCollapseJcrcontentNodes();
    void setCollapseJcrcontentNodes(OAIConfigNodePropertyBoolean* collapse_jcrcontent_nodes);


    virtual bool isSet() override;

private:
    OAIConfigNodePropertyString* path_desc_field;
    bool m_path_desc_field_isSet;

    OAIConfigNodePropertyString* path_child_field;
    bool m_path_child_field_isSet;

    OAIConfigNodePropertyString* path_parent_field;
    bool m_path_parent_field_isSet;

    OAIConfigNodePropertyString* path_exact_field;
    bool m_path_exact_field_isSet;

    OAIConfigNodePropertyString* catch_all_field;
    bool m_catch_all_field_isSet;

    OAIConfigNodePropertyString* collapsed_path_field;
    bool m_collapsed_path_field_isSet;

    OAIConfigNodePropertyString* path_depth_field;
    bool m_path_depth_field_isSet;

    OAIConfigNodePropertyDropDown* commit_policy;
    bool m_commit_policy_isSet;

    OAIConfigNodePropertyInteger* rows;
    bool m_rows_isSet;

    OAIConfigNodePropertyBoolean* path_restrictions;
    bool m_path_restrictions_isSet;

    OAIConfigNodePropertyBoolean* property_restrictions;
    bool m_property_restrictions_isSet;

    OAIConfigNodePropertyBoolean* primarytypes_restrictions;
    bool m_primarytypes_restrictions_isSet;

    OAIConfigNodePropertyArray* ignored_properties;
    bool m_ignored_properties_isSet;

    OAIConfigNodePropertyArray* used_properties;
    bool m_used_properties_isSet;

    OAIConfigNodePropertyArray* type_mappings;
    bool m_type_mappings_isSet;

    OAIConfigNodePropertyArray* property_mappings;
    bool m_property_mappings_isSet;

    OAIConfigNodePropertyBoolean* collapse_jcrcontent_nodes;
    bool m_collapse_jcrcontent_nodes_isSet;

};

}

#endif /* OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties_H_ */
