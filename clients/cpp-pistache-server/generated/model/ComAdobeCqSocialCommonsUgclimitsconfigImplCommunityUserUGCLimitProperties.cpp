/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties()
{
    m_EnableIsSet = false;
    m_UGCLimitIsSet = false;
    m_UgcLimitDurationIsSet = false;
    m_DomainsIsSet = false;
    m_ToListIsSet = false;
    
}

ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::~ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties()
{
}

void ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_EnableIsSet)
    {
        val["enable"] = ModelBase::toJson(m_Enable);
    }
    if(m_UGCLimitIsSet)
    {
        val["UGCLimit"] = ModelBase::toJson(m_UGCLimit);
    }
    if(m_UgcLimitDurationIsSet)
    {
        val["ugcLimitDuration"] = ModelBase::toJson(m_UgcLimitDuration);
    }
    if(m_DomainsIsSet)
    {
        val["domains"] = ModelBase::toJson(m_Domains);
    }
    if(m_ToListIsSet)
    {
        val["toList"] = ModelBase::toJson(m_ToList);
    }
    

    return val;
}

void ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::fromJson(nlohmann::json& val)
{
    if(val.find("enable") != val.end())
    {
        if(!val["enable"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["enable"]);
            setEnable( newItem );
        }
        
    }
    if(val.find("UGCLimit") != val.end())
    {
        if(!val["UGCLimit"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["UGCLimit"]);
            setUGCLimit( newItem );
        }
        
    }
    if(val.find("ugcLimitDuration") != val.end())
    {
        if(!val["ugcLimitDuration"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["ugcLimitDuration"]);
            setUgcLimitDuration( newItem );
        }
        
    }
    if(val.find("domains") != val.end())
    {
        if(!val["domains"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["domains"]);
            setDomains( newItem );
        }
        
    }
    if(val.find("toList") != val.end())
    {
        if(!val["toList"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["toList"]);
            setToList( newItem );
        }
        
    }
    
}


ConfigNodePropertyBoolean ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::getEnable() const
{
    return m_Enable;
}
void ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::setEnable(ConfigNodePropertyBoolean const& value)
{
    m_Enable = value;
    m_EnableIsSet = true;
}
bool ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::enableIsSet() const
{
    return m_EnableIsSet;
}
void ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::unsetEnable()
{
    m_EnableIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::getUGCLimit() const
{
    return m_UGCLimit;
}
void ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::setUGCLimit(ConfigNodePropertyInteger const& value)
{
    m_UGCLimit = value;
    m_UGCLimitIsSet = true;
}
bool ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::uGCLimitIsSet() const
{
    return m_UGCLimitIsSet;
}
void ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::unsetUGCLimit()
{
    m_UGCLimitIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::getUgcLimitDuration() const
{
    return m_UgcLimitDuration;
}
void ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::setUgcLimitDuration(ConfigNodePropertyInteger const& value)
{
    m_UgcLimitDuration = value;
    m_UgcLimitDurationIsSet = true;
}
bool ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::ugcLimitDurationIsSet() const
{
    return m_UgcLimitDurationIsSet;
}
void ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::unsetUgcLimitDuration()
{
    m_UgcLimitDurationIsSet = false;
}
ConfigNodePropertyArray ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::getDomains() const
{
    return m_Domains;
}
void ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::setDomains(ConfigNodePropertyArray const& value)
{
    m_Domains = value;
    m_DomainsIsSet = true;
}
bool ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::domainsIsSet() const
{
    return m_DomainsIsSet;
}
void ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::unsetDomains()
{
    m_DomainsIsSet = false;
}
ConfigNodePropertyArray ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::getToList() const
{
    return m_ToList;
}
void ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::setToList(ConfigNodePropertyArray const& value)
{
    m_ToList = value;
    m_ToListIsSet = true;
}
bool ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::toListIsSet() const
{
    return m_ToListIsSet;
}
void ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::unsetToList()
{
    m_ToListIsSet = false;
}

}
}
}
}

