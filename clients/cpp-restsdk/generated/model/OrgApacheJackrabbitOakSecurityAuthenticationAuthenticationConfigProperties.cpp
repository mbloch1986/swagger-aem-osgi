/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigProperties::OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigProperties()
{
    m_Org_apache_jackrabbit_oak_authentication_appNameIsSet = false;
    m_Org_apache_jackrabbit_oak_authentication_configSpiNameIsSet = false;
}

OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigProperties::~OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigProperties()
{
}

void OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Org_apache_jackrabbit_oak_authentication_appNameIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.jackrabbit.oak.authentication.appName")] = ModelBase::toJson(m_Org_apache_jackrabbit_oak_authentication_appName);
    }
    if(m_Org_apache_jackrabbit_oak_authentication_configSpiNameIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.jackrabbit.oak.authentication.configSpiName")] = ModelBase::toJson(m_Org_apache_jackrabbit_oak_authentication_configSpiName);
    }

    return val;
}

void OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("org.apache.jackrabbit.oak.authentication.appName")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.jackrabbit.oak.authentication.appName")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.jackrabbit.oak.authentication.appName")]);
            setOrgApacheJackrabbitOakAuthenticationAppName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.jackrabbit.oak.authentication.configSpiName")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.jackrabbit.oak.authentication.configSpiName")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.jackrabbit.oak.authentication.configSpiName")]);
            setOrgApacheJackrabbitOakAuthenticationConfigSpiName( newItem );
        }
    }
}

void OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Org_apache_jackrabbit_oak_authentication_appNameIsSet)
    {
        if (m_Org_apache_jackrabbit_oak_authentication_appName.get())
        {
            m_Org_apache_jackrabbit_oak_authentication_appName->toMultipart(multipart, utility::conversions::to_string_t("org.apache.jackrabbit.oak.authentication.appName."));
        }
    }
    if(m_Org_apache_jackrabbit_oak_authentication_configSpiNameIsSet)
    {
        if (m_Org_apache_jackrabbit_oak_authentication_configSpiName.get())
        {
            m_Org_apache_jackrabbit_oak_authentication_configSpiName->toMultipart(multipart, utility::conversions::to_string_t("org.apache.jackrabbit.oak.authentication.configSpiName."));
        }
    }
}

void OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.jackrabbit.oak.authentication.appName")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.jackrabbit.oak.authentication.appName")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.jackrabbit.oak.authentication.appName."));
            setOrgApacheJackrabbitOakAuthenticationAppName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.jackrabbit.oak.authentication.configSpiName")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.jackrabbit.oak.authentication.configSpiName")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.jackrabbit.oak.authentication.configSpiName."));
            setOrgApacheJackrabbitOakAuthenticationConfigSpiName( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigProperties::getOrgApacheJackrabbitOakAuthenticationAppName() const
{
    return m_Org_apache_jackrabbit_oak_authentication_appName;
}


void OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigProperties::setOrgApacheJackrabbitOakAuthenticationAppName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_jackrabbit_oak_authentication_appName = value;
    m_Org_apache_jackrabbit_oak_authentication_appNameIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigProperties::orgApacheJackrabbitOakAuthenticationAppNameIsSet() const
{
    return m_Org_apache_jackrabbit_oak_authentication_appNameIsSet;
}

void OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigProperties::unsetOrg_apache_jackrabbit_oak_authentication_appName()
{
    m_Org_apache_jackrabbit_oak_authentication_appNameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigProperties::getOrgApacheJackrabbitOakAuthenticationConfigSpiName() const
{
    return m_Org_apache_jackrabbit_oak_authentication_configSpiName;
}


void OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigProperties::setOrgApacheJackrabbitOakAuthenticationConfigSpiName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_jackrabbit_oak_authentication_configSpiName = value;
    m_Org_apache_jackrabbit_oak_authentication_configSpiNameIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigProperties::orgApacheJackrabbitOakAuthenticationConfigSpiNameIsSet() const
{
    return m_Org_apache_jackrabbit_oak_authentication_configSpiNameIsSet;
}

void OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigProperties::unsetOrg_apache_jackrabbit_oak_authentication_configSpiName()
{
    m_Org_apache_jackrabbit_oak_authentication_configSpiNameIsSet = false;
}

}
}
}
}

