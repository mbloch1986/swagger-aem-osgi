/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties::OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties()
{
    m_NameIsSet = false;
    m_QueueIsSet = false;
    m_Drop_invalid_itemsIsSet = false;
    m_Agent_targetIsSet = false;
}

OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties::~OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties()
{
}

void OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_QueueIsSet)
    {
        val[utility::conversions::to_string_t("queue")] = ModelBase::toJson(m_Queue);
    }
    if(m_Drop_invalid_itemsIsSet)
    {
        val[utility::conversions::to_string_t("drop.invalid.items")] = ModelBase::toJson(m_Drop_invalid_items);
    }
    if(m_Agent_targetIsSet)
    {
        val[utility::conversions::to_string_t("agent.target")] = ModelBase::toJson(m_Agent_target);
    }

    return val;
}

void OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        if(!val[utility::conversions::to_string_t("name")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("name")]);
            setName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("queue")))
    {
        if(!val[utility::conversions::to_string_t("queue")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("queue")]);
            setQueue( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("drop.invalid.items")))
    {
        if(!val[utility::conversions::to_string_t("drop.invalid.items")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("drop.invalid.items")]);
            setDropInvalidItems( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("agent.target")))
    {
        if(!val[utility::conversions::to_string_t("agent.target")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("agent.target")]);
            setAgentTarget( newItem );
        }
    }
}

void OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_NameIsSet)
    {
        if (m_Name.get())
        {
            m_Name->toMultipart(multipart, utility::conversions::to_string_t("name."));
        }
    }
    if(m_QueueIsSet)
    {
        if (m_Queue.get())
        {
            m_Queue->toMultipart(multipart, utility::conversions::to_string_t("queue."));
        }
    }
    if(m_Drop_invalid_itemsIsSet)
    {
        if (m_Drop_invalid_items.get())
        {
            m_Drop_invalid_items->toMultipart(multipart, utility::conversions::to_string_t("drop.invalid.items."));
        }
    }
    if(m_Agent_targetIsSet)
    {
        if (m_Agent_target.get())
        {
            m_Agent_target->toMultipart(multipart, utility::conversions::to_string_t("agent.target."));
        }
    }
}

void OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("name")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("name."));
            setName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("queue")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("queue")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("queue."));
            setQueue( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("drop.invalid.items")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("drop.invalid.items")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("drop.invalid.items."));
            setDropInvalidItems( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("agent.target")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("agent.target")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("agent.target."));
            setAgentTarget( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties::getName() const
{
    return m_Name;
}


void OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties::setName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties::nameIsSet() const
{
    return m_NameIsSet;
}

void OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties::unsetName()
{
    m_NameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties::getQueue() const
{
    return m_Queue;
}


void OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties::setQueue(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Queue = value;
    m_QueueIsSet = true;
}
bool OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties::queueIsSet() const
{
    return m_QueueIsSet;
}

void OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties::unsetQueue()
{
    m_QueueIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties::getDropInvalidItems() const
{
    return m_Drop_invalid_items;
}


void OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties::setDropInvalidItems(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Drop_invalid_items = value;
    m_Drop_invalid_itemsIsSet = true;
}
bool OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties::dropInvalidItemsIsSet() const
{
    return m_Drop_invalid_itemsIsSet;
}

void OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties::unsetDrop_invalid_items()
{
    m_Drop_invalid_itemsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties::getAgentTarget() const
{
    return m_Agent_target;
}


void OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties::setAgentTarget(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Agent_target = value;
    m_Agent_targetIsSet = true;
}
bool OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties::agentTargetIsSet() const
{
    return m_Agent_targetIsSet;
}

void OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties::unsetAgent_target()
{
    m_Agent_targetIsSet = false;
}

}
}
}
}

