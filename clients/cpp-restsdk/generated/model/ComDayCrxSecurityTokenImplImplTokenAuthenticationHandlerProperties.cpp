/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties()
{
    m_PathIsSet = false;
    m_Token_required_attrIsSet = false;
    m_Token_alternate_urlIsSet = false;
    m_Token_encapsulatedIsSet = false;
    m_Skip_token_refreshIsSet = false;
}

ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::~ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties()
{
}

void ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_PathIsSet)
    {
        val[utility::conversions::to_string_t("path")] = ModelBase::toJson(m_Path);
    }
    if(m_Token_required_attrIsSet)
    {
        val[utility::conversions::to_string_t("token.required.attr")] = ModelBase::toJson(m_Token_required_attr);
    }
    if(m_Token_alternate_urlIsSet)
    {
        val[utility::conversions::to_string_t("token.alternate.url")] = ModelBase::toJson(m_Token_alternate_url);
    }
    if(m_Token_encapsulatedIsSet)
    {
        val[utility::conversions::to_string_t("token.encapsulated")] = ModelBase::toJson(m_Token_encapsulated);
    }
    if(m_Skip_token_refreshIsSet)
    {
        val[utility::conversions::to_string_t("skip.token.refresh")] = ModelBase::toJson(m_Skip_token_refresh);
    }

    return val;
}

void ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("path")))
    {
        if(!val[utility::conversions::to_string_t("path")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("path")]);
            setPath( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("token.required.attr")))
    {
        if(!val[utility::conversions::to_string_t("token.required.attr")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromJson(val[utility::conversions::to_string_t("token.required.attr")]);
            setTokenRequiredAttr( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("token.alternate.url")))
    {
        if(!val[utility::conversions::to_string_t("token.alternate.url")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("token.alternate.url")]);
            setTokenAlternateUrl( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("token.encapsulated")))
    {
        if(!val[utility::conversions::to_string_t("token.encapsulated")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("token.encapsulated")]);
            setTokenEncapsulated( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("skip.token.refresh")))
    {
        if(!val[utility::conversions::to_string_t("skip.token.refresh")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("skip.token.refresh")]);
            setSkipTokenRefresh( newItem );
        }
    }
}

void ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_PathIsSet)
    {
        if (m_Path.get())
        {
            m_Path->toMultipart(multipart, utility::conversions::to_string_t("path."));
        }
    }
    if(m_Token_required_attrIsSet)
    {
        if (m_Token_required_attr.get())
        {
            m_Token_required_attr->toMultipart(multipart, utility::conversions::to_string_t("token.required.attr."));
        }
    }
    if(m_Token_alternate_urlIsSet)
    {
        if (m_Token_alternate_url.get())
        {
            m_Token_alternate_url->toMultipart(multipart, utility::conversions::to_string_t("token.alternate.url."));
        }
    }
    if(m_Token_encapsulatedIsSet)
    {
        if (m_Token_encapsulated.get())
        {
            m_Token_encapsulated->toMultipart(multipart, utility::conversions::to_string_t("token.encapsulated."));
        }
    }
    if(m_Skip_token_refreshIsSet)
    {
        if (m_Skip_token_refresh.get())
        {
            m_Skip_token_refresh->toMultipart(multipart, utility::conversions::to_string_t("skip.token.refresh."));
        }
    }
}

void ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("path")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("path")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("path."));
            setPath( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("token.required.attr")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("token.required.attr")))
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("token.required.attr."));
            setTokenRequiredAttr( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("token.alternate.url")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("token.alternate.url")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("token.alternate.url."));
            setTokenAlternateUrl( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("token.encapsulated")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("token.encapsulated")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("token.encapsulated."));
            setTokenEncapsulated( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("skip.token.refresh")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("skip.token.refresh")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("skip.token.refresh."));
            setSkipTokenRefresh( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::getPath() const
{
    return m_Path;
}


void ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::setPath(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Path = value;
    m_PathIsSet = true;
}
bool ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::pathIsSet() const
{
    return m_PathIsSet;
}

void ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::unsetPath()
{
    m_PathIsSet = false;
}

std::shared_ptr<ConfigNodePropertyDropDown> ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::getTokenRequiredAttr() const
{
    return m_Token_required_attr;
}


void ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::setTokenRequiredAttr(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_Token_required_attr = value;
    m_Token_required_attrIsSet = true;
}
bool ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::tokenRequiredAttrIsSet() const
{
    return m_Token_required_attrIsSet;
}

void ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::unsetToken_required_attr()
{
    m_Token_required_attrIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::getTokenAlternateUrl() const
{
    return m_Token_alternate_url;
}


void ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::setTokenAlternateUrl(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Token_alternate_url = value;
    m_Token_alternate_urlIsSet = true;
}
bool ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::tokenAlternateUrlIsSet() const
{
    return m_Token_alternate_urlIsSet;
}

void ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::unsetToken_alternate_url()
{
    m_Token_alternate_urlIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::getTokenEncapsulated() const
{
    return m_Token_encapsulated;
}


void ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::setTokenEncapsulated(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Token_encapsulated = value;
    m_Token_encapsulatedIsSet = true;
}
bool ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::tokenEncapsulatedIsSet() const
{
    return m_Token_encapsulatedIsSet;
}

void ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::unsetToken_encapsulated()
{
    m_Token_encapsulatedIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::getSkipTokenRefresh() const
{
    return m_Skip_token_refresh;
}


void ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::setSkipTokenRefresh(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Skip_token_refresh = value;
    m_Skip_token_refreshIsSet = true;
}
bool ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::skipTokenRefreshIsSet() const
{
    return m_Skip_token_refreshIsSet;
}

void ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::unsetSkip_token_refresh()
{
    m_Skip_token_refreshIsSet = false;
}

}
}
}
}

