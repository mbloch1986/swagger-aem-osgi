/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIAdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIAdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::OAIAdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties(QString json) {
    this->fromJson(json);
}

OAIAdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::OAIAdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties() {
    this->init();
}

OAIAdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::~OAIAdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties() {
    
}

void
OAIAdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::init() {
    m_show_placeholder_isSet = false;
    m_maximum_cache_entries_isSet = false;
    m_af_scripting_compatversion_isSet = false;
    m_make_file_name_unique_isSet = false;
    m_generating_compliant_data_isSet = false;
}

void
OAIAdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIAdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(show_placeholder, json[QString("showPlaceholder")]);
    
    ::OpenAPI::fromJsonValue(maximum_cache_entries, json[QString("maximumCacheEntries")]);
    
    ::OpenAPI::fromJsonValue(af_scripting_compatversion, json[QString("af.scripting.compatversion")]);
    
    ::OpenAPI::fromJsonValue(make_file_name_unique, json[QString("makeFileNameUnique")]);
    
    ::OpenAPI::fromJsonValue(generating_compliant_data, json[QString("generatingCompliantData")]);
    
}

QString
OAIAdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIAdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::asJsonObject() const {
    QJsonObject obj;
	if(show_placeholder.isSet()){
        obj.insert(QString("showPlaceholder"), ::OpenAPI::toJsonValue(show_placeholder));
    }
	if(maximum_cache_entries.isSet()){
        obj.insert(QString("maximumCacheEntries"), ::OpenAPI::toJsonValue(maximum_cache_entries));
    }
	if(af_scripting_compatversion.isSet()){
        obj.insert(QString("af.scripting.compatversion"), ::OpenAPI::toJsonValue(af_scripting_compatversion));
    }
	if(make_file_name_unique.isSet()){
        obj.insert(QString("makeFileNameUnique"), ::OpenAPI::toJsonValue(make_file_name_unique));
    }
	if(generating_compliant_data.isSet()){
        obj.insert(QString("generatingCompliantData"), ::OpenAPI::toJsonValue(generating_compliant_data));
    }
    return obj;
}

OAIConfigNodePropertyBoolean
OAIAdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::getShowPlaceholder() const {
    return show_placeholder;
}
void
OAIAdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::setShowPlaceholder(const OAIConfigNodePropertyBoolean &show_placeholder) {
    this->show_placeholder = show_placeholder;
    this->m_show_placeholder_isSet = true;
}

OAIConfigNodePropertyInteger
OAIAdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::getMaximumCacheEntries() const {
    return maximum_cache_entries;
}
void
OAIAdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::setMaximumCacheEntries(const OAIConfigNodePropertyInteger &maximum_cache_entries) {
    this->maximum_cache_entries = maximum_cache_entries;
    this->m_maximum_cache_entries_isSet = true;
}

OAIConfigNodePropertyDropDown
OAIAdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::getAfScriptingCompatversion() const {
    return af_scripting_compatversion;
}
void
OAIAdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::setAfScriptingCompatversion(const OAIConfigNodePropertyDropDown &af_scripting_compatversion) {
    this->af_scripting_compatversion = af_scripting_compatversion;
    this->m_af_scripting_compatversion_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIAdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::getMakeFileNameUnique() const {
    return make_file_name_unique;
}
void
OAIAdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::setMakeFileNameUnique(const OAIConfigNodePropertyBoolean &make_file_name_unique) {
    this->make_file_name_unique = make_file_name_unique;
    this->m_make_file_name_unique_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIAdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::getGeneratingCompliantData() const {
    return generating_compliant_data;
}
void
OAIAdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::setGeneratingCompliantData(const OAIConfigNodePropertyBoolean &generating_compliant_data) {
    this->generating_compliant_data = generating_compliant_data;
    this->m_generating_compliant_data_isSet = true;
}


bool
OAIAdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(show_placeholder.isSet()){ isObjectUpdated = true; break;}
    
        if(maximum_cache_entries.isSet()){ isObjectUpdated = true; break;}
    
        if(af_scripting_compatversion.isSet()){ isObjectUpdated = true; break;}
    
        if(make_file_name_unique.isSet()){ isObjectUpdated = true; break;}
    
        if(generating_compliant_data.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

