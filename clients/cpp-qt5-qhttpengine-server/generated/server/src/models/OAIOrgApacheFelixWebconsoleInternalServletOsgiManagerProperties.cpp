/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties(QString json) {
    this->fromJson(json);
}

OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties() {
    this->init();
}

OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::~OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties() {
    
}

void
OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::init() {
    m_manager_root_isSet = false;
    m_http_service_filter_isSet = false;
    m_default_render_isSet = false;
    m_realm_isSet = false;
    m_username_isSet = false;
    m_password_isSet = false;
    m_category_isSet = false;
    m_locale_isSet = false;
    m_loglevel_isSet = false;
    m_plugins_isSet = false;
}

void
OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(manager_root, json[QString("manager.root")]);
    
    ::OpenAPI::fromJsonValue(http_service_filter, json[QString("http.service.filter")]);
    
    ::OpenAPI::fromJsonValue(default_render, json[QString("default.render")]);
    
    ::OpenAPI::fromJsonValue(realm, json[QString("realm")]);
    
    ::OpenAPI::fromJsonValue(username, json[QString("username")]);
    
    ::OpenAPI::fromJsonValue(password, json[QString("password")]);
    
    ::OpenAPI::fromJsonValue(category, json[QString("category")]);
    
    ::OpenAPI::fromJsonValue(locale, json[QString("locale")]);
    
    ::OpenAPI::fromJsonValue(loglevel, json[QString("loglevel")]);
    
    ::OpenAPI::fromJsonValue(plugins, json[QString("plugins")]);
    
}

QString
OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::asJsonObject() const {
    QJsonObject obj;
	if(manager_root.isSet()){
        obj.insert(QString("manager.root"), ::OpenAPI::toJsonValue(manager_root));
    }
	if(http_service_filter.isSet()){
        obj.insert(QString("http.service.filter"), ::OpenAPI::toJsonValue(http_service_filter));
    }
	if(default_render.isSet()){
        obj.insert(QString("default.render"), ::OpenAPI::toJsonValue(default_render));
    }
	if(realm.isSet()){
        obj.insert(QString("realm"), ::OpenAPI::toJsonValue(realm));
    }
	if(username.isSet()){
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(username));
    }
	if(password.isSet()){
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(password));
    }
	if(category.isSet()){
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(category));
    }
	if(locale.isSet()){
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(locale));
    }
	if(loglevel.isSet()){
        obj.insert(QString("loglevel"), ::OpenAPI::toJsonValue(loglevel));
    }
	if(plugins.isSet()){
        obj.insert(QString("plugins"), ::OpenAPI::toJsonValue(plugins));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::getManagerRoot() const {
    return manager_root;
}
void
OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::setManagerRoot(const OAIConfigNodePropertyString &manager_root) {
    this->manager_root = manager_root;
    this->m_manager_root_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::getHttpServiceFilter() const {
    return http_service_filter;
}
void
OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::setHttpServiceFilter(const OAIConfigNodePropertyString &http_service_filter) {
    this->http_service_filter = http_service_filter;
    this->m_http_service_filter_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::getDefaultRender() const {
    return default_render;
}
void
OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::setDefaultRender(const OAIConfigNodePropertyString &default_render) {
    this->default_render = default_render;
    this->m_default_render_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::getRealm() const {
    return realm;
}
void
OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::setRealm(const OAIConfigNodePropertyString &realm) {
    this->realm = realm;
    this->m_realm_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::getUsername() const {
    return username;
}
void
OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::setUsername(const OAIConfigNodePropertyString &username) {
    this->username = username;
    this->m_username_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::getPassword() const {
    return password;
}
void
OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::setPassword(const OAIConfigNodePropertyString &password) {
    this->password = password;
    this->m_password_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::getCategory() const {
    return category;
}
void
OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::setCategory(const OAIConfigNodePropertyString &category) {
    this->category = category;
    this->m_category_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::getLocale() const {
    return locale;
}
void
OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::setLocale(const OAIConfigNodePropertyString &locale) {
    this->locale = locale;
    this->m_locale_isSet = true;
}

OAIConfigNodePropertyDropDown
OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::getLoglevel() const {
    return loglevel;
}
void
OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::setLoglevel(const OAIConfigNodePropertyDropDown &loglevel) {
    this->loglevel = loglevel;
    this->m_loglevel_isSet = true;
}

OAIConfigNodePropertyDropDown
OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::getPlugins() const {
    return plugins;
}
void
OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::setPlugins(const OAIConfigNodePropertyDropDown &plugins) {
    this->plugins = plugins;
    this->m_plugins_isSet = true;
}


bool
OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(manager_root.isSet()){ isObjectUpdated = true; break;}
    
        if(http_service_filter.isSet()){ isObjectUpdated = true; break;}
    
        if(default_render.isSet()){ isObjectUpdated = true; break;}
    
        if(realm.isSet()){ isObjectUpdated = true; break;}
    
        if(username.isSet()){ isObjectUpdated = true; break;}
    
        if(password.isSet()){ isObjectUpdated = true; break;}
    
        if(category.isSet()){ isObjectUpdated = true; break;}
    
        if(locale.isSet()){ isObjectUpdated = true; break;}
    
        if(loglevel.isSet()){ isObjectUpdated = true; break;}
    
        if(plugins.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

