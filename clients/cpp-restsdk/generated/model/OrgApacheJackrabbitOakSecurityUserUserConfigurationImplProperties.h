/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyDropDown.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties
    : public ModelBase
{
public:
    OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties();
    virtual ~OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getUsersPath() const;
    bool usersPathIsSet() const;
    void unsetUsersPath();
    void setUsersPath(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getGroupsPath() const;
    bool groupsPathIsSet() const;
    void unsetGroupsPath();
    void setGroupsPath(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getSystemRelativePath() const;
    bool systemRelativePathIsSet() const;
    void unsetSystemRelativePath();
    void setSystemRelativePath(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getDefaultDepth() const;
    bool defaultDepthIsSet() const;
    void unsetDefaultDepth();
    void setDefaultDepth(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyDropDown> getImportBehavior() const;
    bool importBehaviorIsSet() const;
    void unsetImportBehavior();
    void setImportBehavior(std::shared_ptr<ConfigNodePropertyDropDown> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getPasswordHashAlgorithm() const;
    bool passwordHashAlgorithmIsSet() const;
    void unsetPasswordHashAlgorithm();
    void setPasswordHashAlgorithm(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getPasswordHashIterations() const;
    bool passwordHashIterationsIsSet() const;
    void unsetPasswordHashIterations();
    void setPasswordHashIterations(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getPasswordSaltSize() const;
    bool passwordSaltSizeIsSet() const;
    void unsetPasswordSaltSize();
    void setPasswordSaltSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getOmitAdminPw() const;
    bool omitAdminPwIsSet() const;
    void unsetOmitAdminPw();
    void setOmitAdminPw(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getSupportAutoSave() const;
    bool supportAutoSaveIsSet() const;
    void unsetSupportAutoSave();
    void setSupportAutoSave(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getPasswordMaxAge() const;
    bool passwordMaxAgeIsSet() const;
    void unsetPasswordMaxAge();
    void setPasswordMaxAge(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getInitialPasswordChange() const;
    bool initialPasswordChangeIsSet() const;
    void unsetInitialPasswordChange();
    void setInitialPasswordChange(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getPasswordHistorySize() const;
    bool passwordHistorySizeIsSet() const;
    void unsetPasswordHistorySize();
    void setPasswordHistorySize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getPasswordExpiryForAdmin() const;
    bool passwordExpiryForAdminIsSet() const;
    void unsetPasswordExpiryForAdmin();
    void setPasswordExpiryForAdmin(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getCacheExpiration() const;
    bool cacheExpirationIsSet() const;
    void unsetCacheExpiration();
    void setCacheExpiration(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getEnableRFC7613UsercaseMappedProfile() const;
    bool enableRFC7613UsercaseMappedProfileIsSet() const;
    void unsetEnableRFC7613UsercaseMappedProfile();
    void setEnableRFC7613UsercaseMappedProfile(std::shared_ptr<ConfigNodePropertyBoolean> value);

protected:
    std::shared_ptr<ConfigNodePropertyString> m_UsersPath;
    bool m_UsersPathIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_GroupsPath;
    bool m_GroupsPathIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_SystemRelativePath;
    bool m_SystemRelativePathIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_DefaultDepth;
    bool m_DefaultDepthIsSet;
    std::shared_ptr<ConfigNodePropertyDropDown> m_ImportBehavior;
    bool m_ImportBehaviorIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_PasswordHashAlgorithm;
    bool m_PasswordHashAlgorithmIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_PasswordHashIterations;
    bool m_PasswordHashIterationsIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_PasswordSaltSize;
    bool m_PasswordSaltSizeIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_OmitAdminPw;
    bool m_OmitAdminPwIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_SupportAutoSave;
    bool m_SupportAutoSaveIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_PasswordMaxAge;
    bool m_PasswordMaxAgeIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_InitialPasswordChange;
    bool m_InitialPasswordChangeIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_PasswordHistorySize;
    bool m_PasswordHistorySizeIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_PasswordExpiryForAdmin;
    bool m_PasswordExpiryForAdminIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_CacheExpiration;
    bool m_CacheExpirationIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_EnableRFC7613UsercaseMappedProfile;
    bool m_EnableRFC7613UsercaseMappedProfileIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties_H_ */
