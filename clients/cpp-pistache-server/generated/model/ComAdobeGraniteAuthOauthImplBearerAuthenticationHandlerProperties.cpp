/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties()
{
    m_PathIsSet = false;
    m_Oauth_clientIds_allowedIsSet = false;
    m_Auth_bearer_sync_imsIsSet = false;
    m_Auth_tokenRequestParameterIsSet = false;
    m_Oauth_bearer_configidIsSet = false;
    m_Oauth_jwt_supportIsSet = false;
    
}

ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::~ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties()
{
}

void ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_PathIsSet)
    {
        val["path"] = ModelBase::toJson(m_Path);
    }
    if(m_Oauth_clientIds_allowedIsSet)
    {
        val["oauth.clientIds.allowed"] = ModelBase::toJson(m_Oauth_clientIds_allowed);
    }
    if(m_Auth_bearer_sync_imsIsSet)
    {
        val["auth.bearer.sync.ims"] = ModelBase::toJson(m_Auth_bearer_sync_ims);
    }
    if(m_Auth_tokenRequestParameterIsSet)
    {
        val["auth.tokenRequestParameter"] = ModelBase::toJson(m_Auth_tokenRequestParameter);
    }
    if(m_Oauth_bearer_configidIsSet)
    {
        val["oauth.bearer.configid"] = ModelBase::toJson(m_Oauth_bearer_configid);
    }
    if(m_Oauth_jwt_supportIsSet)
    {
        val["oauth.jwt.support"] = ModelBase::toJson(m_Oauth_jwt_support);
    }
    

    return val;
}

void ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::fromJson(nlohmann::json& val)
{
    if(val.find("path") != val.end())
    {
        if(!val["path"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["path"]);
            setPath( newItem );
        }
        
    }
    if(val.find("oauth.clientIds.allowed") != val.end())
    {
        if(!val["oauth.clientIds.allowed"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["oauth.clientIds.allowed"]);
            setOauthClientIdsAllowed( newItem );
        }
        
    }
    if(val.find("auth.bearer.sync.ims") != val.end())
    {
        if(!val["auth.bearer.sync.ims"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["auth.bearer.sync.ims"]);
            setAuthBearerSyncIms( newItem );
        }
        
    }
    if(val.find("auth.tokenRequestParameter") != val.end())
    {
        if(!val["auth.tokenRequestParameter"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["auth.tokenRequestParameter"]);
            setAuthTokenRequestParameter( newItem );
        }
        
    }
    if(val.find("oauth.bearer.configid") != val.end())
    {
        if(!val["oauth.bearer.configid"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["oauth.bearer.configid"]);
            setOauthBearerConfigid( newItem );
        }
        
    }
    if(val.find("oauth.jwt.support") != val.end())
    {
        if(!val["oauth.jwt.support"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["oauth.jwt.support"]);
            setOauthJwtSupport( newItem );
        }
        
    }
    
}


ConfigNodePropertyString ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::getPath() const
{
    return m_Path;
}
void ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::setPath(ConfigNodePropertyString const& value)
{
    m_Path = value;
    m_PathIsSet = true;
}
bool ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::pathIsSet() const
{
    return m_PathIsSet;
}
void ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::unsetPath()
{
    m_PathIsSet = false;
}
ConfigNodePropertyArray ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::getOauthClientIdsAllowed() const
{
    return m_Oauth_clientIds_allowed;
}
void ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::setOauthClientIdsAllowed(ConfigNodePropertyArray const& value)
{
    m_Oauth_clientIds_allowed = value;
    m_Oauth_clientIds_allowedIsSet = true;
}
bool ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::oauthClientIdsAllowedIsSet() const
{
    return m_Oauth_clientIds_allowedIsSet;
}
void ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::unsetOauth_clientIds_allowed()
{
    m_Oauth_clientIds_allowedIsSet = false;
}
ConfigNodePropertyBoolean ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::getAuthBearerSyncIms() const
{
    return m_Auth_bearer_sync_ims;
}
void ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::setAuthBearerSyncIms(ConfigNodePropertyBoolean const& value)
{
    m_Auth_bearer_sync_ims = value;
    m_Auth_bearer_sync_imsIsSet = true;
}
bool ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::authBearerSyncImsIsSet() const
{
    return m_Auth_bearer_sync_imsIsSet;
}
void ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::unsetAuth_bearer_sync_ims()
{
    m_Auth_bearer_sync_imsIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::getAuthTokenRequestParameter() const
{
    return m_Auth_tokenRequestParameter;
}
void ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::setAuthTokenRequestParameter(ConfigNodePropertyString const& value)
{
    m_Auth_tokenRequestParameter = value;
    m_Auth_tokenRequestParameterIsSet = true;
}
bool ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::authTokenRequestParameterIsSet() const
{
    return m_Auth_tokenRequestParameterIsSet;
}
void ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::unsetAuth_tokenRequestParameter()
{
    m_Auth_tokenRequestParameterIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::getOauthBearerConfigid() const
{
    return m_Oauth_bearer_configid;
}
void ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::setOauthBearerConfigid(ConfigNodePropertyString const& value)
{
    m_Oauth_bearer_configid = value;
    m_Oauth_bearer_configidIsSet = true;
}
bool ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::oauthBearerConfigidIsSet() const
{
    return m_Oauth_bearer_configidIsSet;
}
void ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::unsetOauth_bearer_configid()
{
    m_Oauth_bearer_configidIsSet = false;
}
ConfigNodePropertyBoolean ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::getOauthJwtSupport() const
{
    return m_Oauth_jwt_support;
}
void ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::setOauthJwtSupport(ConfigNodePropertyBoolean const& value)
{
    m_Oauth_jwt_support = value;
    m_Oauth_jwt_supportIsSet = true;
}
bool ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::oauthJwtSupportIsSet() const
{
    return m_Oauth_jwt_supportIsSet;
}
void ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::unsetOauth_jwt_support()
{
    m_Oauth_jwt_supportIsSet = false;
}

}
}
}
}

