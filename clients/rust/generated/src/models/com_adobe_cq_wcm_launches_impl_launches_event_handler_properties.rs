/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties {
  #[serde(rename = "event.filter")]
  event_filter: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "launches.eventhandler.threadpool.maxsize")]
  launches_eventhandler_threadpool_maxsize: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "launches.eventhandler.threadpool.priority")]
  launches_eventhandler_threadpool_priority: Option<::models::ConfigNodePropertyDropDown>,
  #[serde(rename = "launches.eventhandler.updatelastmodification")]
  launches_eventhandler_updatelastmodification: Option<::models::ConfigNodePropertyBoolean>
}

impl ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties {
  pub fn new() -> ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties {
    ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties {
      event_filter: None,
      launches_eventhandler_threadpool_maxsize: None,
      launches_eventhandler_threadpool_priority: None,
      launches_eventhandler_updatelastmodification: None
    }
  }

  pub fn set_event_filter(&mut self, event_filter: ::models::ConfigNodePropertyString) {
    self.event_filter = Some(event_filter);
  }

  pub fn with_event_filter(mut self, event_filter: ::models::ConfigNodePropertyString) -> ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties {
    self.event_filter = Some(event_filter);
    self
  }

  pub fn event_filter(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.event_filter.as_ref()
  }

  pub fn reset_event_filter(&mut self) {
    self.event_filter = None;
  }

  pub fn set_launches_eventhandler_threadpool_maxsize(&mut self, launches_eventhandler_threadpool_maxsize: ::models::ConfigNodePropertyInteger) {
    self.launches_eventhandler_threadpool_maxsize = Some(launches_eventhandler_threadpool_maxsize);
  }

  pub fn with_launches_eventhandler_threadpool_maxsize(mut self, launches_eventhandler_threadpool_maxsize: ::models::ConfigNodePropertyInteger) -> ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties {
    self.launches_eventhandler_threadpool_maxsize = Some(launches_eventhandler_threadpool_maxsize);
    self
  }

  pub fn launches_eventhandler_threadpool_maxsize(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.launches_eventhandler_threadpool_maxsize.as_ref()
  }

  pub fn reset_launches_eventhandler_threadpool_maxsize(&mut self) {
    self.launches_eventhandler_threadpool_maxsize = None;
  }

  pub fn set_launches_eventhandler_threadpool_priority(&mut self, launches_eventhandler_threadpool_priority: ::models::ConfigNodePropertyDropDown) {
    self.launches_eventhandler_threadpool_priority = Some(launches_eventhandler_threadpool_priority);
  }

  pub fn with_launches_eventhandler_threadpool_priority(mut self, launches_eventhandler_threadpool_priority: ::models::ConfigNodePropertyDropDown) -> ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties {
    self.launches_eventhandler_threadpool_priority = Some(launches_eventhandler_threadpool_priority);
    self
  }

  pub fn launches_eventhandler_threadpool_priority(&self) -> Option<&::models::ConfigNodePropertyDropDown> {
    self.launches_eventhandler_threadpool_priority.as_ref()
  }

  pub fn reset_launches_eventhandler_threadpool_priority(&mut self) {
    self.launches_eventhandler_threadpool_priority = None;
  }

  pub fn set_launches_eventhandler_updatelastmodification(&mut self, launches_eventhandler_updatelastmodification: ::models::ConfigNodePropertyBoolean) {
    self.launches_eventhandler_updatelastmodification = Some(launches_eventhandler_updatelastmodification);
  }

  pub fn with_launches_eventhandler_updatelastmodification(mut self, launches_eventhandler_updatelastmodification: ::models::ConfigNodePropertyBoolean) -> ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties {
    self.launches_eventhandler_updatelastmodification = Some(launches_eventhandler_updatelastmodification);
    self
  }

  pub fn launches_eventhandler_updatelastmodification(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.launches_eventhandler_updatelastmodification.as_ref()
  }

  pub fn reset_launches_eventhandler_updatelastmodification(&mut self) {
    self.launches_eventhandler_updatelastmodification = None;
  }

}



