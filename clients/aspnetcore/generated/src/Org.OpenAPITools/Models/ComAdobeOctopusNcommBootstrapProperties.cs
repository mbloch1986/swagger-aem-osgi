/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ComAdobeOctopusNcommBootstrapProperties : IEquatable<ComAdobeOctopusNcommBootstrapProperties>
    { 
        /// <summary>
        /// Gets or Sets MaxConnections
        /// </summary>
        [DataMember(Name="maxConnections")]
        public ConfigNodePropertyInteger MaxConnections { get; set; }

        /// <summary>
        /// Gets or Sets MaxRequests
        /// </summary>
        [DataMember(Name="maxRequests")]
        public ConfigNodePropertyInteger MaxRequests { get; set; }

        /// <summary>
        /// Gets or Sets RequestTimeout
        /// </summary>
        [DataMember(Name="requestTimeout")]
        public ConfigNodePropertyInteger RequestTimeout { get; set; }

        /// <summary>
        /// Gets or Sets RequestRetries
        /// </summary>
        [DataMember(Name="requestRetries")]
        public ConfigNodePropertyInteger RequestRetries { get; set; }

        /// <summary>
        /// Gets or Sets LaunchTimeout
        /// </summary>
        [DataMember(Name="launchTimeout")]
        public ConfigNodePropertyInteger LaunchTimeout { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeOctopusNcommBootstrapProperties {\n");
            sb.Append("  MaxConnections: ").Append(MaxConnections).Append("\n");
            sb.Append("  MaxRequests: ").Append(MaxRequests).Append("\n");
            sb.Append("  RequestTimeout: ").Append(RequestTimeout).Append("\n");
            sb.Append("  RequestRetries: ").Append(RequestRetries).Append("\n");
            sb.Append("  LaunchTimeout: ").Append(LaunchTimeout).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ComAdobeOctopusNcommBootstrapProperties)obj);
        }

        /// <summary>
        /// Returns true if ComAdobeOctopusNcommBootstrapProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of ComAdobeOctopusNcommBootstrapProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeOctopusNcommBootstrapProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    MaxConnections == other.MaxConnections ||
                    MaxConnections != null &&
                    MaxConnections.Equals(other.MaxConnections)
                ) && 
                (
                    MaxRequests == other.MaxRequests ||
                    MaxRequests != null &&
                    MaxRequests.Equals(other.MaxRequests)
                ) && 
                (
                    RequestTimeout == other.RequestTimeout ||
                    RequestTimeout != null &&
                    RequestTimeout.Equals(other.RequestTimeout)
                ) && 
                (
                    RequestRetries == other.RequestRetries ||
                    RequestRetries != null &&
                    RequestRetries.Equals(other.RequestRetries)
                ) && 
                (
                    LaunchTimeout == other.LaunchTimeout ||
                    LaunchTimeout != null &&
                    LaunchTimeout.Equals(other.LaunchTimeout)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (MaxConnections != null)
                    hashCode = hashCode * 59 + MaxConnections.GetHashCode();
                    if (MaxRequests != null)
                    hashCode = hashCode * 59 + MaxRequests.GetHashCode();
                    if (RequestTimeout != null)
                    hashCode = hashCode * 59 + RequestTimeout.GetHashCode();
                    if (RequestRetries != null)
                    hashCode = hashCode * 59 + RequestRetries.GetHashCode();
                    if (LaunchTimeout != null)
                    hashCode = hashCode * 59 + LaunchTimeout.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ComAdobeOctopusNcommBootstrapProperties left, ComAdobeOctopusNcommBootstrapProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ComAdobeOctopusNcommBootstrapProperties left, ComAdobeOctopusNcommBootstrapProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
