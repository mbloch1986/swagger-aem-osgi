<?php
/**
 * ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'parameter_whitelist' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'parameter_whitelist_prefixes' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'binary_parameter_whitelist' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'modifier_whitelist' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'operation_whitelist' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'operation_whitelist_prefixes' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'typehint_whitelist' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'resourcetype_whitelist' => '\OpenAPI\Client\Model\ConfigNodePropertyArray'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'parameter_whitelist' => null,
        'parameter_whitelist_prefixes' => null,
        'binary_parameter_whitelist' => null,
        'modifier_whitelist' => null,
        'operation_whitelist' => null,
        'operation_whitelist_prefixes' => null,
        'typehint_whitelist' => null,
        'resourcetype_whitelist' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'parameter_whitelist' => 'parameter.whitelist',
        'parameter_whitelist_prefixes' => 'parameter.whitelist.prefixes',
        'binary_parameter_whitelist' => 'binary.parameter.whitelist',
        'modifier_whitelist' => 'modifier.whitelist',
        'operation_whitelist' => 'operation.whitelist',
        'operation_whitelist_prefixes' => 'operation.whitelist.prefixes',
        'typehint_whitelist' => 'typehint.whitelist',
        'resourcetype_whitelist' => 'resourcetype.whitelist'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'parameter_whitelist' => 'setParameterWhitelist',
        'parameter_whitelist_prefixes' => 'setParameterWhitelistPrefixes',
        'binary_parameter_whitelist' => 'setBinaryParameterWhitelist',
        'modifier_whitelist' => 'setModifierWhitelist',
        'operation_whitelist' => 'setOperationWhitelist',
        'operation_whitelist_prefixes' => 'setOperationWhitelistPrefixes',
        'typehint_whitelist' => 'setTypehintWhitelist',
        'resourcetype_whitelist' => 'setResourcetypeWhitelist'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'parameter_whitelist' => 'getParameterWhitelist',
        'parameter_whitelist_prefixes' => 'getParameterWhitelistPrefixes',
        'binary_parameter_whitelist' => 'getBinaryParameterWhitelist',
        'modifier_whitelist' => 'getModifierWhitelist',
        'operation_whitelist' => 'getOperationWhitelist',
        'operation_whitelist_prefixes' => 'getOperationWhitelistPrefixes',
        'typehint_whitelist' => 'getTypehintWhitelist',
        'resourcetype_whitelist' => 'getResourcetypeWhitelist'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['parameter_whitelist'] = isset($data['parameter_whitelist']) ? $data['parameter_whitelist'] : null;
        $this->container['parameter_whitelist_prefixes'] = isset($data['parameter_whitelist_prefixes']) ? $data['parameter_whitelist_prefixes'] : null;
        $this->container['binary_parameter_whitelist'] = isset($data['binary_parameter_whitelist']) ? $data['binary_parameter_whitelist'] : null;
        $this->container['modifier_whitelist'] = isset($data['modifier_whitelist']) ? $data['modifier_whitelist'] : null;
        $this->container['operation_whitelist'] = isset($data['operation_whitelist']) ? $data['operation_whitelist'] : null;
        $this->container['operation_whitelist_prefixes'] = isset($data['operation_whitelist_prefixes']) ? $data['operation_whitelist_prefixes'] : null;
        $this->container['typehint_whitelist'] = isset($data['typehint_whitelist']) ? $data['typehint_whitelist'] : null;
        $this->container['resourcetype_whitelist'] = isset($data['resourcetype_whitelist']) ? $data['resourcetype_whitelist'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets parameter_whitelist
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getParameterWhitelist()
    {
        return $this->container['parameter_whitelist'];
    }

    /**
     * Sets parameter_whitelist
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $parameter_whitelist parameter_whitelist
     *
     * @return $this
     */
    public function setParameterWhitelist($parameter_whitelist)
    {
        $this->container['parameter_whitelist'] = $parameter_whitelist;

        return $this;
    }

    /**
     * Gets parameter_whitelist_prefixes
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getParameterWhitelistPrefixes()
    {
        return $this->container['parameter_whitelist_prefixes'];
    }

    /**
     * Sets parameter_whitelist_prefixes
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $parameter_whitelist_prefixes parameter_whitelist_prefixes
     *
     * @return $this
     */
    public function setParameterWhitelistPrefixes($parameter_whitelist_prefixes)
    {
        $this->container['parameter_whitelist_prefixes'] = $parameter_whitelist_prefixes;

        return $this;
    }

    /**
     * Gets binary_parameter_whitelist
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getBinaryParameterWhitelist()
    {
        return $this->container['binary_parameter_whitelist'];
    }

    /**
     * Sets binary_parameter_whitelist
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $binary_parameter_whitelist binary_parameter_whitelist
     *
     * @return $this
     */
    public function setBinaryParameterWhitelist($binary_parameter_whitelist)
    {
        $this->container['binary_parameter_whitelist'] = $binary_parameter_whitelist;

        return $this;
    }

    /**
     * Gets modifier_whitelist
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getModifierWhitelist()
    {
        return $this->container['modifier_whitelist'];
    }

    /**
     * Sets modifier_whitelist
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $modifier_whitelist modifier_whitelist
     *
     * @return $this
     */
    public function setModifierWhitelist($modifier_whitelist)
    {
        $this->container['modifier_whitelist'] = $modifier_whitelist;

        return $this;
    }

    /**
     * Gets operation_whitelist
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getOperationWhitelist()
    {
        return $this->container['operation_whitelist'];
    }

    /**
     * Sets operation_whitelist
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $operation_whitelist operation_whitelist
     *
     * @return $this
     */
    public function setOperationWhitelist($operation_whitelist)
    {
        $this->container['operation_whitelist'] = $operation_whitelist;

        return $this;
    }

    /**
     * Gets operation_whitelist_prefixes
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getOperationWhitelistPrefixes()
    {
        return $this->container['operation_whitelist_prefixes'];
    }

    /**
     * Sets operation_whitelist_prefixes
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $operation_whitelist_prefixes operation_whitelist_prefixes
     *
     * @return $this
     */
    public function setOperationWhitelistPrefixes($operation_whitelist_prefixes)
    {
        $this->container['operation_whitelist_prefixes'] = $operation_whitelist_prefixes;

        return $this;
    }

    /**
     * Gets typehint_whitelist
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getTypehintWhitelist()
    {
        return $this->container['typehint_whitelist'];
    }

    /**
     * Sets typehint_whitelist
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $typehint_whitelist typehint_whitelist
     *
     * @return $this
     */
    public function setTypehintWhitelist($typehint_whitelist)
    {
        $this->container['typehint_whitelist'] = $typehint_whitelist;

        return $this;
    }

    /**
     * Gets resourcetype_whitelist
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getResourcetypeWhitelist()
    {
        return $this->container['resourcetype_whitelist'];
    }

    /**
     * Sets resourcetype_whitelist
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $resourcetype_whitelist resourcetype_whitelist
     *
     * @return $this
     */
    public function setResourcetypeWhitelist($resourcetype_whitelist)
    {
        $this->container['resourcetype_whitelist'] = $resourcetype_whitelist;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


