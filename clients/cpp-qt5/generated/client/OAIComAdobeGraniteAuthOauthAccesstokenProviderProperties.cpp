/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties() {
    init();
}

OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::~OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties() {
    this->cleanup();
}

void
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::init() {
    name = new OAIConfigNodePropertyString();
    m_name_isSet = false;
    auth_token_provider_title = new OAIConfigNodePropertyString();
    m_auth_token_provider_title_isSet = false;
    auth_token_provider_default_claims = new OAIConfigNodePropertyArray();
    m_auth_token_provider_default_claims_isSet = false;
    auth_token_provider_endpoint = new OAIConfigNodePropertyString();
    m_auth_token_provider_endpoint_isSet = false;
    auth_access_token_request = new OAIConfigNodePropertyString();
    m_auth_access_token_request_isSet = false;
    auth_token_provider_keypair_alias = new OAIConfigNodePropertyString();
    m_auth_token_provider_keypair_alias_isSet = false;
    auth_token_provider_conn_timeout = new OAIConfigNodePropertyInteger();
    m_auth_token_provider_conn_timeout_isSet = false;
    auth_token_provider_so_timeout = new OAIConfigNodePropertyInteger();
    m_auth_token_provider_so_timeout_isSet = false;
    auth_token_provider_client_id = new OAIConfigNodePropertyString();
    m_auth_token_provider_client_id_isSet = false;
    auth_token_provider_scope = new OAIConfigNodePropertyString();
    m_auth_token_provider_scope_isSet = false;
    auth_token_provider_reuse_access_token = new OAIConfigNodePropertyBoolean();
    m_auth_token_provider_reuse_access_token_isSet = false;
    auth_token_provider_relaxed_ssl = new OAIConfigNodePropertyBoolean();
    m_auth_token_provider_relaxed_ssl_isSet = false;
    token_request_customizer_type = new OAIConfigNodePropertyString();
    m_token_request_customizer_type_isSet = false;
    auth_token_validator_type = new OAIConfigNodePropertyString();
    m_auth_token_validator_type_isSet = false;
}

void
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::cleanup() {
    if(name != nullptr) { 
        delete name;
    }
    if(auth_token_provider_title != nullptr) { 
        delete auth_token_provider_title;
    }
    if(auth_token_provider_default_claims != nullptr) { 
        delete auth_token_provider_default_claims;
    }
    if(auth_token_provider_endpoint != nullptr) { 
        delete auth_token_provider_endpoint;
    }
    if(auth_access_token_request != nullptr) { 
        delete auth_access_token_request;
    }
    if(auth_token_provider_keypair_alias != nullptr) { 
        delete auth_token_provider_keypair_alias;
    }
    if(auth_token_provider_conn_timeout != nullptr) { 
        delete auth_token_provider_conn_timeout;
    }
    if(auth_token_provider_so_timeout != nullptr) { 
        delete auth_token_provider_so_timeout;
    }
    if(auth_token_provider_client_id != nullptr) { 
        delete auth_token_provider_client_id;
    }
    if(auth_token_provider_scope != nullptr) { 
        delete auth_token_provider_scope;
    }
    if(auth_token_provider_reuse_access_token != nullptr) { 
        delete auth_token_provider_reuse_access_token;
    }
    if(auth_token_provider_relaxed_ssl != nullptr) { 
        delete auth_token_provider_relaxed_ssl;
    }
    if(token_request_customizer_type != nullptr) { 
        delete token_request_customizer_type;
    }
    if(auth_token_validator_type != nullptr) { 
        delete auth_token_validator_type;
    }
}

OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties*
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&name, pJson["name"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&auth_token_provider_title, pJson["auth.token.provider.title"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&auth_token_provider_default_claims, pJson["auth.token.provider.default.claims"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&auth_token_provider_endpoint, pJson["auth.token.provider.endpoint"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&auth_access_token_request, pJson["auth.access.token.request"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&auth_token_provider_keypair_alias, pJson["auth.token.provider.keypair.alias"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&auth_token_provider_conn_timeout, pJson["auth.token.provider.conn.timeout"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&auth_token_provider_so_timeout, pJson["auth.token.provider.so.timeout"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&auth_token_provider_client_id, pJson["auth.token.provider.client.id"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&auth_token_provider_scope, pJson["auth.token.provider.scope"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&auth_token_provider_reuse_access_token, pJson["auth.token.provider.reuse.access.token"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&auth_token_provider_relaxed_ssl, pJson["auth.token.provider.relaxed.ssl"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&token_request_customizer_type, pJson["token.request.customizer.type"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&auth_token_validator_type, pJson["auth.token.validator.type"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
}

QString
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::asJsonObject() {
    QJsonObject obj;
    if((name != nullptr) && (name->isSet())){
        toJsonValue(QString("name"), name, obj, QString("OAIConfigNodePropertyString"));
    }
    if((auth_token_provider_title != nullptr) && (auth_token_provider_title->isSet())){
        toJsonValue(QString("auth.token.provider.title"), auth_token_provider_title, obj, QString("OAIConfigNodePropertyString"));
    }
    if((auth_token_provider_default_claims != nullptr) && (auth_token_provider_default_claims->isSet())){
        toJsonValue(QString("auth.token.provider.default.claims"), auth_token_provider_default_claims, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((auth_token_provider_endpoint != nullptr) && (auth_token_provider_endpoint->isSet())){
        toJsonValue(QString("auth.token.provider.endpoint"), auth_token_provider_endpoint, obj, QString("OAIConfigNodePropertyString"));
    }
    if((auth_access_token_request != nullptr) && (auth_access_token_request->isSet())){
        toJsonValue(QString("auth.access.token.request"), auth_access_token_request, obj, QString("OAIConfigNodePropertyString"));
    }
    if((auth_token_provider_keypair_alias != nullptr) && (auth_token_provider_keypair_alias->isSet())){
        toJsonValue(QString("auth.token.provider.keypair.alias"), auth_token_provider_keypair_alias, obj, QString("OAIConfigNodePropertyString"));
    }
    if((auth_token_provider_conn_timeout != nullptr) && (auth_token_provider_conn_timeout->isSet())){
        toJsonValue(QString("auth.token.provider.conn.timeout"), auth_token_provider_conn_timeout, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((auth_token_provider_so_timeout != nullptr) && (auth_token_provider_so_timeout->isSet())){
        toJsonValue(QString("auth.token.provider.so.timeout"), auth_token_provider_so_timeout, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((auth_token_provider_client_id != nullptr) && (auth_token_provider_client_id->isSet())){
        toJsonValue(QString("auth.token.provider.client.id"), auth_token_provider_client_id, obj, QString("OAIConfigNodePropertyString"));
    }
    if((auth_token_provider_scope != nullptr) && (auth_token_provider_scope->isSet())){
        toJsonValue(QString("auth.token.provider.scope"), auth_token_provider_scope, obj, QString("OAIConfigNodePropertyString"));
    }
    if((auth_token_provider_reuse_access_token != nullptr) && (auth_token_provider_reuse_access_token->isSet())){
        toJsonValue(QString("auth.token.provider.reuse.access.token"), auth_token_provider_reuse_access_token, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((auth_token_provider_relaxed_ssl != nullptr) && (auth_token_provider_relaxed_ssl->isSet())){
        toJsonValue(QString("auth.token.provider.relaxed.ssl"), auth_token_provider_relaxed_ssl, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((token_request_customizer_type != nullptr) && (token_request_customizer_type->isSet())){
        toJsonValue(QString("token.request.customizer.type"), token_request_customizer_type, obj, QString("OAIConfigNodePropertyString"));
    }
    if((auth_token_validator_type != nullptr) && (auth_token_validator_type->isSet())){
        toJsonValue(QString("auth.token.validator.type"), auth_token_validator_type, obj, QString("OAIConfigNodePropertyString"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::getName() {
    return name;
}
void
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::setName(OAIConfigNodePropertyString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::getAuthTokenProviderTitle() {
    return auth_token_provider_title;
}
void
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::setAuthTokenProviderTitle(OAIConfigNodePropertyString* auth_token_provider_title) {
    this->auth_token_provider_title = auth_token_provider_title;
    this->m_auth_token_provider_title_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::getAuthTokenProviderDefaultClaims() {
    return auth_token_provider_default_claims;
}
void
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::setAuthTokenProviderDefaultClaims(OAIConfigNodePropertyArray* auth_token_provider_default_claims) {
    this->auth_token_provider_default_claims = auth_token_provider_default_claims;
    this->m_auth_token_provider_default_claims_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::getAuthTokenProviderEndpoint() {
    return auth_token_provider_endpoint;
}
void
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::setAuthTokenProviderEndpoint(OAIConfigNodePropertyString* auth_token_provider_endpoint) {
    this->auth_token_provider_endpoint = auth_token_provider_endpoint;
    this->m_auth_token_provider_endpoint_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::getAuthAccessTokenRequest() {
    return auth_access_token_request;
}
void
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::setAuthAccessTokenRequest(OAIConfigNodePropertyString* auth_access_token_request) {
    this->auth_access_token_request = auth_access_token_request;
    this->m_auth_access_token_request_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::getAuthTokenProviderKeypairAlias() {
    return auth_token_provider_keypair_alias;
}
void
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::setAuthTokenProviderKeypairAlias(OAIConfigNodePropertyString* auth_token_provider_keypair_alias) {
    this->auth_token_provider_keypair_alias = auth_token_provider_keypair_alias;
    this->m_auth_token_provider_keypair_alias_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::getAuthTokenProviderConnTimeout() {
    return auth_token_provider_conn_timeout;
}
void
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::setAuthTokenProviderConnTimeout(OAIConfigNodePropertyInteger* auth_token_provider_conn_timeout) {
    this->auth_token_provider_conn_timeout = auth_token_provider_conn_timeout;
    this->m_auth_token_provider_conn_timeout_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::getAuthTokenProviderSoTimeout() {
    return auth_token_provider_so_timeout;
}
void
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::setAuthTokenProviderSoTimeout(OAIConfigNodePropertyInteger* auth_token_provider_so_timeout) {
    this->auth_token_provider_so_timeout = auth_token_provider_so_timeout;
    this->m_auth_token_provider_so_timeout_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::getAuthTokenProviderClientId() {
    return auth_token_provider_client_id;
}
void
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::setAuthTokenProviderClientId(OAIConfigNodePropertyString* auth_token_provider_client_id) {
    this->auth_token_provider_client_id = auth_token_provider_client_id;
    this->m_auth_token_provider_client_id_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::getAuthTokenProviderScope() {
    return auth_token_provider_scope;
}
void
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::setAuthTokenProviderScope(OAIConfigNodePropertyString* auth_token_provider_scope) {
    this->auth_token_provider_scope = auth_token_provider_scope;
    this->m_auth_token_provider_scope_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::getAuthTokenProviderReuseAccessToken() {
    return auth_token_provider_reuse_access_token;
}
void
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::setAuthTokenProviderReuseAccessToken(OAIConfigNodePropertyBoolean* auth_token_provider_reuse_access_token) {
    this->auth_token_provider_reuse_access_token = auth_token_provider_reuse_access_token;
    this->m_auth_token_provider_reuse_access_token_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::getAuthTokenProviderRelaxedSsl() {
    return auth_token_provider_relaxed_ssl;
}
void
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::setAuthTokenProviderRelaxedSsl(OAIConfigNodePropertyBoolean* auth_token_provider_relaxed_ssl) {
    this->auth_token_provider_relaxed_ssl = auth_token_provider_relaxed_ssl;
    this->m_auth_token_provider_relaxed_ssl_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::getTokenRequestCustomizerType() {
    return token_request_customizer_type;
}
void
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::setTokenRequestCustomizerType(OAIConfigNodePropertyString* token_request_customizer_type) {
    this->token_request_customizer_type = token_request_customizer_type;
    this->m_token_request_customizer_type_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::getAuthTokenValidatorType() {
    return auth_token_validator_type;
}
void
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::setAuthTokenValidatorType(OAIConfigNodePropertyString* auth_token_validator_type) {
    this->auth_token_validator_type = auth_token_validator_type;
    this->m_auth_token_validator_type_isSet = true;
}


bool
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(name != nullptr && name->isSet()){ isObjectUpdated = true; break;}
        if(auth_token_provider_title != nullptr && auth_token_provider_title->isSet()){ isObjectUpdated = true; break;}
        if(auth_token_provider_default_claims != nullptr && auth_token_provider_default_claims->isSet()){ isObjectUpdated = true; break;}
        if(auth_token_provider_endpoint != nullptr && auth_token_provider_endpoint->isSet()){ isObjectUpdated = true; break;}
        if(auth_access_token_request != nullptr && auth_access_token_request->isSet()){ isObjectUpdated = true; break;}
        if(auth_token_provider_keypair_alias != nullptr && auth_token_provider_keypair_alias->isSet()){ isObjectUpdated = true; break;}
        if(auth_token_provider_conn_timeout != nullptr && auth_token_provider_conn_timeout->isSet()){ isObjectUpdated = true; break;}
        if(auth_token_provider_so_timeout != nullptr && auth_token_provider_so_timeout->isSet()){ isObjectUpdated = true; break;}
        if(auth_token_provider_client_id != nullptr && auth_token_provider_client_id->isSet()){ isObjectUpdated = true; break;}
        if(auth_token_provider_scope != nullptr && auth_token_provider_scope->isSet()){ isObjectUpdated = true; break;}
        if(auth_token_provider_reuse_access_token != nullptr && auth_token_provider_reuse_access_token->isSet()){ isObjectUpdated = true; break;}
        if(auth_token_provider_relaxed_ssl != nullptr && auth_token_provider_relaxed_ssl->isSet()){ isObjectUpdated = true; break;}
        if(token_request_customizer_type != nullptr && token_request_customizer_type->isSet()){ isObjectUpdated = true; break;}
        if(auth_token_validator_type != nullptr && auth_token_validator_type->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

