/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingDatasourceJNDIDataSourceFactoryProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::OAIOrgApacheSlingDatasourceJNDIDataSourceFactoryProperties(QString json) {
    this->fromJson(json);
}

OAIOrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::OAIOrgApacheSlingDatasourceJNDIDataSourceFactoryProperties() {
    this->init();
}

OAIOrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::~OAIOrgApacheSlingDatasourceJNDIDataSourceFactoryProperties() {
    
}

void
OAIOrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::init() {
    m_datasource_name_isSet = false;
    m_datasource_svc_prop_name_isSet = false;
    m_datasource_jndi_name_isSet = false;
    m_jndi_properties_isSet = false;
}

void
OAIOrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIOrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(datasource_name, json[QString("datasource.name")]);
    
    ::OpenAPI::fromJsonValue(datasource_svc_prop_name, json[QString("datasource.svc.prop.name")]);
    
    ::OpenAPI::fromJsonValue(datasource_jndi_name, json[QString("datasource.jndi.name")]);
    
    ::OpenAPI::fromJsonValue(jndi_properties, json[QString("jndi.properties")]);
    
}

QString
OAIOrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::asJsonObject() const {
    QJsonObject obj;
	if(datasource_name.isSet()){
        obj.insert(QString("datasource.name"), ::OpenAPI::toJsonValue(datasource_name));
    }
	if(datasource_svc_prop_name.isSet()){
        obj.insert(QString("datasource.svc.prop.name"), ::OpenAPI::toJsonValue(datasource_svc_prop_name));
    }
	if(datasource_jndi_name.isSet()){
        obj.insert(QString("datasource.jndi.name"), ::OpenAPI::toJsonValue(datasource_jndi_name));
    }
	if(jndi_properties.isSet()){
        obj.insert(QString("jndi.properties"), ::OpenAPI::toJsonValue(jndi_properties));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::getDatasourceName() const {
    return datasource_name;
}
void
OAIOrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::setDatasourceName(const OAIConfigNodePropertyString &datasource_name) {
    this->datasource_name = datasource_name;
    this->m_datasource_name_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::getDatasourceSvcPropName() const {
    return datasource_svc_prop_name;
}
void
OAIOrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::setDatasourceSvcPropName(const OAIConfigNodePropertyString &datasource_svc_prop_name) {
    this->datasource_svc_prop_name = datasource_svc_prop_name;
    this->m_datasource_svc_prop_name_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::getDatasourceJndiName() const {
    return datasource_jndi_name;
}
void
OAIOrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::setDatasourceJndiName(const OAIConfigNodePropertyString &datasource_jndi_name) {
    this->datasource_jndi_name = datasource_jndi_name;
    this->m_datasource_jndi_name_isSet = true;
}

OAIConfigNodePropertyArray
OAIOrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::getJndiProperties() const {
    return jndi_properties;
}
void
OAIOrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::setJndiProperties(const OAIConfigNodePropertyArray &jndi_properties) {
    this->jndi_properties = jndi_properties;
    this->m_jndi_properties_isSet = true;
}


bool
OAIOrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(datasource_name.isSet()){ isObjectUpdated = true; break;}
    
        if(datasource_svc_prop_name.isSet()){ isObjectUpdated = true; break;}
    
        if(datasource_jndi_name.isSet()){ isObjectUpdated = true; break;}
    
        if(jndi_properties.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

