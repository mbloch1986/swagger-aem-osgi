/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties : IEquatable<OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties>
    { 
        /// <summary>
        /// Gets or Sets OsgiHttpWhiteboardContextSelect
        /// </summary>
        [DataMember(Name="osgi.http.whiteboard.context.select")]
        public ConfigNodePropertyString OsgiHttpWhiteboardContextSelect { get; set; }

        /// <summary>
        /// Gets or Sets OsgiHttpWhiteboardListener
        /// </summary>
        [DataMember(Name="osgi.http.whiteboard.listener")]
        public ConfigNodePropertyString OsgiHttpWhiteboardListener { get; set; }

        /// <summary>
        /// Gets or Sets AuthSudoCookie
        /// </summary>
        [DataMember(Name="auth.sudo.cookie")]
        public ConfigNodePropertyString AuthSudoCookie { get; set; }

        /// <summary>
        /// Gets or Sets AuthSudoParameter
        /// </summary>
        [DataMember(Name="auth.sudo.parameter")]
        public ConfigNodePropertyString AuthSudoParameter { get; set; }

        /// <summary>
        /// Gets or Sets AuthAnnonymous
        /// </summary>
        [DataMember(Name="auth.annonymous")]
        public ConfigNodePropertyBoolean AuthAnnonymous { get; set; }

        /// <summary>
        /// Gets or Sets SlingAuthRequirements
        /// </summary>
        [DataMember(Name="sling.auth.requirements")]
        public ConfigNodePropertyArray SlingAuthRequirements { get; set; }

        /// <summary>
        /// Gets or Sets SlingAuthAnonymousUser
        /// </summary>
        [DataMember(Name="sling.auth.anonymous.user")]
        public ConfigNodePropertyString SlingAuthAnonymousUser { get; set; }

        /// <summary>
        /// Gets or Sets SlingAuthAnonymousPassword
        /// </summary>
        [DataMember(Name="sling.auth.anonymous.password")]
        public ConfigNodePropertyString SlingAuthAnonymousPassword { get; set; }

        /// <summary>
        /// Gets or Sets AuthHttp
        /// </summary>
        [DataMember(Name="auth.http")]
        public ConfigNodePropertyDropDown AuthHttp { get; set; }

        /// <summary>
        /// Gets or Sets AuthHttpRealm
        /// </summary>
        [DataMember(Name="auth.http.realm")]
        public ConfigNodePropertyString AuthHttpRealm { get; set; }

        /// <summary>
        /// Gets or Sets AuthUriSuffix
        /// </summary>
        [DataMember(Name="auth.uri.suffix")]
        public ConfigNodePropertyArray AuthUriSuffix { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties {\n");
            sb.Append("  OsgiHttpWhiteboardContextSelect: ").Append(OsgiHttpWhiteboardContextSelect).Append("\n");
            sb.Append("  OsgiHttpWhiteboardListener: ").Append(OsgiHttpWhiteboardListener).Append("\n");
            sb.Append("  AuthSudoCookie: ").Append(AuthSudoCookie).Append("\n");
            sb.Append("  AuthSudoParameter: ").Append(AuthSudoParameter).Append("\n");
            sb.Append("  AuthAnnonymous: ").Append(AuthAnnonymous).Append("\n");
            sb.Append("  SlingAuthRequirements: ").Append(SlingAuthRequirements).Append("\n");
            sb.Append("  SlingAuthAnonymousUser: ").Append(SlingAuthAnonymousUser).Append("\n");
            sb.Append("  SlingAuthAnonymousPassword: ").Append(SlingAuthAnonymousPassword).Append("\n");
            sb.Append("  AuthHttp: ").Append(AuthHttp).Append("\n");
            sb.Append("  AuthHttpRealm: ").Append(AuthHttpRealm).Append("\n");
            sb.Append("  AuthUriSuffix: ").Append(AuthUriSuffix).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties)obj);
        }

        /// <summary>
        /// Returns true if OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    OsgiHttpWhiteboardContextSelect == other.OsgiHttpWhiteboardContextSelect ||
                    OsgiHttpWhiteboardContextSelect != null &&
                    OsgiHttpWhiteboardContextSelect.Equals(other.OsgiHttpWhiteboardContextSelect)
                ) && 
                (
                    OsgiHttpWhiteboardListener == other.OsgiHttpWhiteboardListener ||
                    OsgiHttpWhiteboardListener != null &&
                    OsgiHttpWhiteboardListener.Equals(other.OsgiHttpWhiteboardListener)
                ) && 
                (
                    AuthSudoCookie == other.AuthSudoCookie ||
                    AuthSudoCookie != null &&
                    AuthSudoCookie.Equals(other.AuthSudoCookie)
                ) && 
                (
                    AuthSudoParameter == other.AuthSudoParameter ||
                    AuthSudoParameter != null &&
                    AuthSudoParameter.Equals(other.AuthSudoParameter)
                ) && 
                (
                    AuthAnnonymous == other.AuthAnnonymous ||
                    AuthAnnonymous != null &&
                    AuthAnnonymous.Equals(other.AuthAnnonymous)
                ) && 
                (
                    SlingAuthRequirements == other.SlingAuthRequirements ||
                    SlingAuthRequirements != null &&
                    SlingAuthRequirements.Equals(other.SlingAuthRequirements)
                ) && 
                (
                    SlingAuthAnonymousUser == other.SlingAuthAnonymousUser ||
                    SlingAuthAnonymousUser != null &&
                    SlingAuthAnonymousUser.Equals(other.SlingAuthAnonymousUser)
                ) && 
                (
                    SlingAuthAnonymousPassword == other.SlingAuthAnonymousPassword ||
                    SlingAuthAnonymousPassword != null &&
                    SlingAuthAnonymousPassword.Equals(other.SlingAuthAnonymousPassword)
                ) && 
                (
                    AuthHttp == other.AuthHttp ||
                    AuthHttp != null &&
                    AuthHttp.Equals(other.AuthHttp)
                ) && 
                (
                    AuthHttpRealm == other.AuthHttpRealm ||
                    AuthHttpRealm != null &&
                    AuthHttpRealm.Equals(other.AuthHttpRealm)
                ) && 
                (
                    AuthUriSuffix == other.AuthUriSuffix ||
                    AuthUriSuffix != null &&
                    AuthUriSuffix.Equals(other.AuthUriSuffix)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (OsgiHttpWhiteboardContextSelect != null)
                    hashCode = hashCode * 59 + OsgiHttpWhiteboardContextSelect.GetHashCode();
                    if (OsgiHttpWhiteboardListener != null)
                    hashCode = hashCode * 59 + OsgiHttpWhiteboardListener.GetHashCode();
                    if (AuthSudoCookie != null)
                    hashCode = hashCode * 59 + AuthSudoCookie.GetHashCode();
                    if (AuthSudoParameter != null)
                    hashCode = hashCode * 59 + AuthSudoParameter.GetHashCode();
                    if (AuthAnnonymous != null)
                    hashCode = hashCode * 59 + AuthAnnonymous.GetHashCode();
                    if (SlingAuthRequirements != null)
                    hashCode = hashCode * 59 + SlingAuthRequirements.GetHashCode();
                    if (SlingAuthAnonymousUser != null)
                    hashCode = hashCode * 59 + SlingAuthAnonymousUser.GetHashCode();
                    if (SlingAuthAnonymousPassword != null)
                    hashCode = hashCode * 59 + SlingAuthAnonymousPassword.GetHashCode();
                    if (AuthHttp != null)
                    hashCode = hashCode * 59 + AuthHttp.GetHashCode();
                    if (AuthHttpRealm != null)
                    hashCode = hashCode * 59 + AuthHttpRealm.GetHashCode();
                    if (AuthUriSuffix != null)
                    hashCode = hashCode * 59 + AuthUriSuffix.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties left, OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties left, OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
