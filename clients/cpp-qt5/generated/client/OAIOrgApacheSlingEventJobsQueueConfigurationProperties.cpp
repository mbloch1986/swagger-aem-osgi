/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingEventJobsQueueConfigurationProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingEventJobsQueueConfigurationProperties::OAIOrgApacheSlingEventJobsQueueConfigurationProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheSlingEventJobsQueueConfigurationProperties::OAIOrgApacheSlingEventJobsQueueConfigurationProperties() {
    init();
}

OAIOrgApacheSlingEventJobsQueueConfigurationProperties::~OAIOrgApacheSlingEventJobsQueueConfigurationProperties() {
    this->cleanup();
}

void
OAIOrgApacheSlingEventJobsQueueConfigurationProperties::init() {
    queue_name = new OAIConfigNodePropertyString();
    m_queue_name_isSet = false;
    queue_topics = new OAIConfigNodePropertyArray();
    m_queue_topics_isSet = false;
    queue_type = new OAIConfigNodePropertyDropDown();
    m_queue_type_isSet = false;
    queue_priority = new OAIConfigNodePropertyDropDown();
    m_queue_priority_isSet = false;
    queue_retries = new OAIConfigNodePropertyInteger();
    m_queue_retries_isSet = false;
    queue_retrydelay = new OAIConfigNodePropertyInteger();
    m_queue_retrydelay_isSet = false;
    queue_maxparallel = new OAIConfigNodePropertyFloat();
    m_queue_maxparallel_isSet = false;
    queue_keep_jobs = new OAIConfigNodePropertyBoolean();
    m_queue_keep_jobs_isSet = false;
    queue_prefer_run_on_creation_instance = new OAIConfigNodePropertyBoolean();
    m_queue_prefer_run_on_creation_instance_isSet = false;
    queue_thread_pool_size = new OAIConfigNodePropertyInteger();
    m_queue_thread_pool_size_isSet = false;
    service_ranking = new OAIConfigNodePropertyInteger();
    m_service_ranking_isSet = false;
}

void
OAIOrgApacheSlingEventJobsQueueConfigurationProperties::cleanup() {
    if(queue_name != nullptr) { 
        delete queue_name;
    }
    if(queue_topics != nullptr) { 
        delete queue_topics;
    }
    if(queue_type != nullptr) { 
        delete queue_type;
    }
    if(queue_priority != nullptr) { 
        delete queue_priority;
    }
    if(queue_retries != nullptr) { 
        delete queue_retries;
    }
    if(queue_retrydelay != nullptr) { 
        delete queue_retrydelay;
    }
    if(queue_maxparallel != nullptr) { 
        delete queue_maxparallel;
    }
    if(queue_keep_jobs != nullptr) { 
        delete queue_keep_jobs;
    }
    if(queue_prefer_run_on_creation_instance != nullptr) { 
        delete queue_prefer_run_on_creation_instance;
    }
    if(queue_thread_pool_size != nullptr) { 
        delete queue_thread_pool_size;
    }
    if(service_ranking != nullptr) { 
        delete service_ranking;
    }
}

OAIOrgApacheSlingEventJobsQueueConfigurationProperties*
OAIOrgApacheSlingEventJobsQueueConfigurationProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheSlingEventJobsQueueConfigurationProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&queue_name, pJson["queue.name"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&queue_topics, pJson["queue.topics"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&queue_type, pJson["queue.type"], "OAIConfigNodePropertyDropDown", "OAIConfigNodePropertyDropDown");
    
    ::OpenAPI::setValue(&queue_priority, pJson["queue.priority"], "OAIConfigNodePropertyDropDown", "OAIConfigNodePropertyDropDown");
    
    ::OpenAPI::setValue(&queue_retries, pJson["queue.retries"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&queue_retrydelay, pJson["queue.retrydelay"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&queue_maxparallel, pJson["queue.maxparallel"], "OAIConfigNodePropertyFloat", "OAIConfigNodePropertyFloat");
    
    ::OpenAPI::setValue(&queue_keep_jobs, pJson["queue.keepJobs"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&queue_prefer_run_on_creation_instance, pJson["queue.preferRunOnCreationInstance"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&queue_thread_pool_size, pJson["queue.threadPoolSize"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&service_ranking, pJson["service.ranking"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
}

QString
OAIOrgApacheSlingEventJobsQueueConfigurationProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingEventJobsQueueConfigurationProperties::asJsonObject() {
    QJsonObject obj;
    if((queue_name != nullptr) && (queue_name->isSet())){
        toJsonValue(QString("queue.name"), queue_name, obj, QString("OAIConfigNodePropertyString"));
    }
    if((queue_topics != nullptr) && (queue_topics->isSet())){
        toJsonValue(QString("queue.topics"), queue_topics, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((queue_type != nullptr) && (queue_type->isSet())){
        toJsonValue(QString("queue.type"), queue_type, obj, QString("OAIConfigNodePropertyDropDown"));
    }
    if((queue_priority != nullptr) && (queue_priority->isSet())){
        toJsonValue(QString("queue.priority"), queue_priority, obj, QString("OAIConfigNodePropertyDropDown"));
    }
    if((queue_retries != nullptr) && (queue_retries->isSet())){
        toJsonValue(QString("queue.retries"), queue_retries, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((queue_retrydelay != nullptr) && (queue_retrydelay->isSet())){
        toJsonValue(QString("queue.retrydelay"), queue_retrydelay, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((queue_maxparallel != nullptr) && (queue_maxparallel->isSet())){
        toJsonValue(QString("queue.maxparallel"), queue_maxparallel, obj, QString("OAIConfigNodePropertyFloat"));
    }
    if((queue_keep_jobs != nullptr) && (queue_keep_jobs->isSet())){
        toJsonValue(QString("queue.keepJobs"), queue_keep_jobs, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((queue_prefer_run_on_creation_instance != nullptr) && (queue_prefer_run_on_creation_instance->isSet())){
        toJsonValue(QString("queue.preferRunOnCreationInstance"), queue_prefer_run_on_creation_instance, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((queue_thread_pool_size != nullptr) && (queue_thread_pool_size->isSet())){
        toJsonValue(QString("queue.threadPoolSize"), queue_thread_pool_size, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((service_ranking != nullptr) && (service_ranking->isSet())){
        toJsonValue(QString("service.ranking"), service_ranking, obj, QString("OAIConfigNodePropertyInteger"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingEventJobsQueueConfigurationProperties::getQueueName() {
    return queue_name;
}
void
OAIOrgApacheSlingEventJobsQueueConfigurationProperties::setQueueName(OAIConfigNodePropertyString* queue_name) {
    this->queue_name = queue_name;
    this->m_queue_name_isSet = true;
}

OAIConfigNodePropertyArray*
OAIOrgApacheSlingEventJobsQueueConfigurationProperties::getQueueTopics() {
    return queue_topics;
}
void
OAIOrgApacheSlingEventJobsQueueConfigurationProperties::setQueueTopics(OAIConfigNodePropertyArray* queue_topics) {
    this->queue_topics = queue_topics;
    this->m_queue_topics_isSet = true;
}

OAIConfigNodePropertyDropDown*
OAIOrgApacheSlingEventJobsQueueConfigurationProperties::getQueueType() {
    return queue_type;
}
void
OAIOrgApacheSlingEventJobsQueueConfigurationProperties::setQueueType(OAIConfigNodePropertyDropDown* queue_type) {
    this->queue_type = queue_type;
    this->m_queue_type_isSet = true;
}

OAIConfigNodePropertyDropDown*
OAIOrgApacheSlingEventJobsQueueConfigurationProperties::getQueuePriority() {
    return queue_priority;
}
void
OAIOrgApacheSlingEventJobsQueueConfigurationProperties::setQueuePriority(OAIConfigNodePropertyDropDown* queue_priority) {
    this->queue_priority = queue_priority;
    this->m_queue_priority_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingEventJobsQueueConfigurationProperties::getQueueRetries() {
    return queue_retries;
}
void
OAIOrgApacheSlingEventJobsQueueConfigurationProperties::setQueueRetries(OAIConfigNodePropertyInteger* queue_retries) {
    this->queue_retries = queue_retries;
    this->m_queue_retries_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingEventJobsQueueConfigurationProperties::getQueueRetrydelay() {
    return queue_retrydelay;
}
void
OAIOrgApacheSlingEventJobsQueueConfigurationProperties::setQueueRetrydelay(OAIConfigNodePropertyInteger* queue_retrydelay) {
    this->queue_retrydelay = queue_retrydelay;
    this->m_queue_retrydelay_isSet = true;
}

OAIConfigNodePropertyFloat*
OAIOrgApacheSlingEventJobsQueueConfigurationProperties::getQueueMaxparallel() {
    return queue_maxparallel;
}
void
OAIOrgApacheSlingEventJobsQueueConfigurationProperties::setQueueMaxparallel(OAIConfigNodePropertyFloat* queue_maxparallel) {
    this->queue_maxparallel = queue_maxparallel;
    this->m_queue_maxparallel_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingEventJobsQueueConfigurationProperties::getQueueKeepJobs() {
    return queue_keep_jobs;
}
void
OAIOrgApacheSlingEventJobsQueueConfigurationProperties::setQueueKeepJobs(OAIConfigNodePropertyBoolean* queue_keep_jobs) {
    this->queue_keep_jobs = queue_keep_jobs;
    this->m_queue_keep_jobs_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingEventJobsQueueConfigurationProperties::getQueuePreferRunOnCreationInstance() {
    return queue_prefer_run_on_creation_instance;
}
void
OAIOrgApacheSlingEventJobsQueueConfigurationProperties::setQueuePreferRunOnCreationInstance(OAIConfigNodePropertyBoolean* queue_prefer_run_on_creation_instance) {
    this->queue_prefer_run_on_creation_instance = queue_prefer_run_on_creation_instance;
    this->m_queue_prefer_run_on_creation_instance_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingEventJobsQueueConfigurationProperties::getQueueThreadPoolSize() {
    return queue_thread_pool_size;
}
void
OAIOrgApacheSlingEventJobsQueueConfigurationProperties::setQueueThreadPoolSize(OAIConfigNodePropertyInteger* queue_thread_pool_size) {
    this->queue_thread_pool_size = queue_thread_pool_size;
    this->m_queue_thread_pool_size_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingEventJobsQueueConfigurationProperties::getServiceRanking() {
    return service_ranking;
}
void
OAIOrgApacheSlingEventJobsQueueConfigurationProperties::setServiceRanking(OAIConfigNodePropertyInteger* service_ranking) {
    this->service_ranking = service_ranking;
    this->m_service_ranking_isSet = true;
}


bool
OAIOrgApacheSlingEventJobsQueueConfigurationProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(queue_name != nullptr && queue_name->isSet()){ isObjectUpdated = true; break;}
        if(queue_topics != nullptr && queue_topics->isSet()){ isObjectUpdated = true; break;}
        if(queue_type != nullptr && queue_type->isSet()){ isObjectUpdated = true; break;}
        if(queue_priority != nullptr && queue_priority->isSet()){ isObjectUpdated = true; break;}
        if(queue_retries != nullptr && queue_retries->isSet()){ isObjectUpdated = true; break;}
        if(queue_retrydelay != nullptr && queue_retrydelay->isSet()){ isObjectUpdated = true; break;}
        if(queue_maxparallel != nullptr && queue_maxparallel->isSet()){ isObjectUpdated = true; break;}
        if(queue_keep_jobs != nullptr && queue_keep_jobs->isSet()){ isObjectUpdated = true; break;}
        if(queue_prefer_run_on_creation_instance != nullptr && queue_prefer_run_on_creation_instance->isSet()){ isObjectUpdated = true; break;}
        if(queue_thread_pool_size != nullptr && queue_thread_pool_size->isSet()){ isObjectUpdated = true; break;}
        if(service_ranking != nullptr && service_ranking->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

