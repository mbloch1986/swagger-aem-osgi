/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties::OAIOrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties::OAIOrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties() {
    init();
}

OAIOrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties::~OAIOrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties() {
    this->cleanup();
}

void
OAIOrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties::init() {
    name = new OAIConfigNodePropertyString();
    m_name_isSet = false;
    queue = new OAIConfigNodePropertyString();
    m_queue_isSet = false;
    drop_invalid_items = new OAIConfigNodePropertyBoolean();
    m_drop_invalid_items_isSet = false;
    agent_target = new OAIConfigNodePropertyString();
    m_agent_target_isSet = false;
}

void
OAIOrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties::cleanup() {
    if(name != nullptr) { 
        delete name;
    }
    if(queue != nullptr) { 
        delete queue;
    }
    if(drop_invalid_items != nullptr) { 
        delete drop_invalid_items;
    }
    if(agent_target != nullptr) { 
        delete agent_target;
    }
}

OAIOrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties*
OAIOrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&name, pJson["name"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&queue, pJson["queue"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&drop_invalid_items, pJson["drop.invalid.items"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&agent_target, pJson["agent.target"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
}

QString
OAIOrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties::asJsonObject() {
    QJsonObject obj;
    if((name != nullptr) && (name->isSet())){
        toJsonValue(QString("name"), name, obj, QString("OAIConfigNodePropertyString"));
    }
    if((queue != nullptr) && (queue->isSet())){
        toJsonValue(QString("queue"), queue, obj, QString("OAIConfigNodePropertyString"));
    }
    if((drop_invalid_items != nullptr) && (drop_invalid_items->isSet())){
        toJsonValue(QString("drop.invalid.items"), drop_invalid_items, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((agent_target != nullptr) && (agent_target->isSet())){
        toJsonValue(QString("agent.target"), agent_target, obj, QString("OAIConfigNodePropertyString"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties::getName() {
    return name;
}
void
OAIOrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties::setName(OAIConfigNodePropertyString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties::getQueue() {
    return queue;
}
void
OAIOrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties::setQueue(OAIConfigNodePropertyString* queue) {
    this->queue = queue;
    this->m_queue_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties::getDropInvalidItems() {
    return drop_invalid_items;
}
void
OAIOrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties::setDropInvalidItems(OAIConfigNodePropertyBoolean* drop_invalid_items) {
    this->drop_invalid_items = drop_invalid_items;
    this->m_drop_invalid_items_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties::getAgentTarget() {
    return agent_target;
}
void
OAIOrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties::setAgentTarget(OAIConfigNodePropertyString* agent_target) {
    this->agent_target = agent_target;
    this->m_agent_target_isSet = true;
}


bool
OAIOrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(name != nullptr && name->isSet()){ isObjectUpdated = true; break;}
        if(queue != nullptr && queue->isSet()){ isObjectUpdated = true; break;}
        if(drop_invalid_items != nullptr && drop_invalid_items->isSet()){ isObjectUpdated = true; break;}
        if(agent_target != nullptr && agent_target->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

