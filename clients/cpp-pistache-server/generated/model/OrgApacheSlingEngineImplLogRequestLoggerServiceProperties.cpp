/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheSlingEngineImplLogRequestLoggerServiceProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheSlingEngineImplLogRequestLoggerServiceProperties::OrgApacheSlingEngineImplLogRequestLoggerServiceProperties()
{
    m_Request_log_service_formatIsSet = false;
    m_Request_log_service_outputIsSet = false;
    m_Request_log_service_outputtypeIsSet = false;
    m_Request_log_service_onentryIsSet = false;
    
}

OrgApacheSlingEngineImplLogRequestLoggerServiceProperties::~OrgApacheSlingEngineImplLogRequestLoggerServiceProperties()
{
}

void OrgApacheSlingEngineImplLogRequestLoggerServiceProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheSlingEngineImplLogRequestLoggerServiceProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Request_log_service_formatIsSet)
    {
        val["request.log.service.format"] = ModelBase::toJson(m_Request_log_service_format);
    }
    if(m_Request_log_service_outputIsSet)
    {
        val["request.log.service.output"] = ModelBase::toJson(m_Request_log_service_output);
    }
    if(m_Request_log_service_outputtypeIsSet)
    {
        val["request.log.service.outputtype"] = ModelBase::toJson(m_Request_log_service_outputtype);
    }
    if(m_Request_log_service_onentryIsSet)
    {
        val["request.log.service.onentry"] = ModelBase::toJson(m_Request_log_service_onentry);
    }
    

    return val;
}

void OrgApacheSlingEngineImplLogRequestLoggerServiceProperties::fromJson(nlohmann::json& val)
{
    if(val.find("request.log.service.format") != val.end())
    {
        if(!val["request.log.service.format"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["request.log.service.format"]);
            setRequestLogServiceFormat( newItem );
        }
        
    }
    if(val.find("request.log.service.output") != val.end())
    {
        if(!val["request.log.service.output"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["request.log.service.output"]);
            setRequestLogServiceOutput( newItem );
        }
        
    }
    if(val.find("request.log.service.outputtype") != val.end())
    {
        if(!val["request.log.service.outputtype"].is_null())
        {
            ConfigNodePropertyDropDown newItem;
            newItem.fromJson(val["request.log.service.outputtype"]);
            setRequestLogServiceOutputtype( newItem );
        }
        
    }
    if(val.find("request.log.service.onentry") != val.end())
    {
        if(!val["request.log.service.onentry"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["request.log.service.onentry"]);
            setRequestLogServiceOnentry( newItem );
        }
        
    }
    
}


ConfigNodePropertyString OrgApacheSlingEngineImplLogRequestLoggerServiceProperties::getRequestLogServiceFormat() const
{
    return m_Request_log_service_format;
}
void OrgApacheSlingEngineImplLogRequestLoggerServiceProperties::setRequestLogServiceFormat(ConfigNodePropertyString const& value)
{
    m_Request_log_service_format = value;
    m_Request_log_service_formatIsSet = true;
}
bool OrgApacheSlingEngineImplLogRequestLoggerServiceProperties::requestLogServiceFormatIsSet() const
{
    return m_Request_log_service_formatIsSet;
}
void OrgApacheSlingEngineImplLogRequestLoggerServiceProperties::unsetRequest_log_service_format()
{
    m_Request_log_service_formatIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingEngineImplLogRequestLoggerServiceProperties::getRequestLogServiceOutput() const
{
    return m_Request_log_service_output;
}
void OrgApacheSlingEngineImplLogRequestLoggerServiceProperties::setRequestLogServiceOutput(ConfigNodePropertyString const& value)
{
    m_Request_log_service_output = value;
    m_Request_log_service_outputIsSet = true;
}
bool OrgApacheSlingEngineImplLogRequestLoggerServiceProperties::requestLogServiceOutputIsSet() const
{
    return m_Request_log_service_outputIsSet;
}
void OrgApacheSlingEngineImplLogRequestLoggerServiceProperties::unsetRequest_log_service_output()
{
    m_Request_log_service_outputIsSet = false;
}
ConfigNodePropertyDropDown OrgApacheSlingEngineImplLogRequestLoggerServiceProperties::getRequestLogServiceOutputtype() const
{
    return m_Request_log_service_outputtype;
}
void OrgApacheSlingEngineImplLogRequestLoggerServiceProperties::setRequestLogServiceOutputtype(ConfigNodePropertyDropDown const& value)
{
    m_Request_log_service_outputtype = value;
    m_Request_log_service_outputtypeIsSet = true;
}
bool OrgApacheSlingEngineImplLogRequestLoggerServiceProperties::requestLogServiceOutputtypeIsSet() const
{
    return m_Request_log_service_outputtypeIsSet;
}
void OrgApacheSlingEngineImplLogRequestLoggerServiceProperties::unsetRequest_log_service_outputtype()
{
    m_Request_log_service_outputtypeIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheSlingEngineImplLogRequestLoggerServiceProperties::getRequestLogServiceOnentry() const
{
    return m_Request_log_service_onentry;
}
void OrgApacheSlingEngineImplLogRequestLoggerServiceProperties::setRequestLogServiceOnentry(ConfigNodePropertyBoolean const& value)
{
    m_Request_log_service_onentry = value;
    m_Request_log_service_onentryIsSet = true;
}
bool OrgApacheSlingEngineImplLogRequestLoggerServiceProperties::requestLogServiceOnentryIsSet() const
{
    return m_Request_log_service_onentryIsSet;
}
void OrgApacheSlingEngineImplLogRequestLoggerServiceProperties::unsetRequest_log_service_onentry()
{
    m_Request_log_service_onentryIsSet = false;
}

}
}
}
}

