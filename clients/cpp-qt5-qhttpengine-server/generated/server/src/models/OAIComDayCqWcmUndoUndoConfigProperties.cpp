/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqWcmUndoUndoConfigProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqWcmUndoUndoConfigProperties::OAIComDayCqWcmUndoUndoConfigProperties(QString json) {
    this->fromJson(json);
}

OAIComDayCqWcmUndoUndoConfigProperties::OAIComDayCqWcmUndoUndoConfigProperties() {
    this->init();
}

OAIComDayCqWcmUndoUndoConfigProperties::~OAIComDayCqWcmUndoUndoConfigProperties() {
    
}

void
OAIComDayCqWcmUndoUndoConfigProperties::init() {
    m_cq_wcm_undo_enabled_isSet = false;
    m_cq_wcm_undo_path_isSet = false;
    m_cq_wcm_undo_validity_isSet = false;
    m_cq_wcm_undo_steps_isSet = false;
    m_cq_wcm_undo_persistence_isSet = false;
    m_cq_wcm_undo_persistence_mode_isSet = false;
    m_cq_wcm_undo_markermode_isSet = false;
    m_cq_wcm_undo_whitelist_isSet = false;
    m_cq_wcm_undo_blacklist_isSet = false;
}

void
OAIComDayCqWcmUndoUndoConfigProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComDayCqWcmUndoUndoConfigProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(cq_wcm_undo_enabled, json[QString("cq.wcm.undo.enabled")]);
    
    ::OpenAPI::fromJsonValue(cq_wcm_undo_path, json[QString("cq.wcm.undo.path")]);
    
    ::OpenAPI::fromJsonValue(cq_wcm_undo_validity, json[QString("cq.wcm.undo.validity")]);
    
    ::OpenAPI::fromJsonValue(cq_wcm_undo_steps, json[QString("cq.wcm.undo.steps")]);
    
    ::OpenAPI::fromJsonValue(cq_wcm_undo_persistence, json[QString("cq.wcm.undo.persistence")]);
    
    ::OpenAPI::fromJsonValue(cq_wcm_undo_persistence_mode, json[QString("cq.wcm.undo.persistence.mode")]);
    
    ::OpenAPI::fromJsonValue(cq_wcm_undo_markermode, json[QString("cq.wcm.undo.markermode")]);
    
    ::OpenAPI::fromJsonValue(cq_wcm_undo_whitelist, json[QString("cq.wcm.undo.whitelist")]);
    
    ::OpenAPI::fromJsonValue(cq_wcm_undo_blacklist, json[QString("cq.wcm.undo.blacklist")]);
    
}

QString
OAIComDayCqWcmUndoUndoConfigProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqWcmUndoUndoConfigProperties::asJsonObject() const {
    QJsonObject obj;
	if(cq_wcm_undo_enabled.isSet()){
        obj.insert(QString("cq.wcm.undo.enabled"), ::OpenAPI::toJsonValue(cq_wcm_undo_enabled));
    }
	if(cq_wcm_undo_path.isSet()){
        obj.insert(QString("cq.wcm.undo.path"), ::OpenAPI::toJsonValue(cq_wcm_undo_path));
    }
	if(cq_wcm_undo_validity.isSet()){
        obj.insert(QString("cq.wcm.undo.validity"), ::OpenAPI::toJsonValue(cq_wcm_undo_validity));
    }
	if(cq_wcm_undo_steps.isSet()){
        obj.insert(QString("cq.wcm.undo.steps"), ::OpenAPI::toJsonValue(cq_wcm_undo_steps));
    }
	if(cq_wcm_undo_persistence.isSet()){
        obj.insert(QString("cq.wcm.undo.persistence"), ::OpenAPI::toJsonValue(cq_wcm_undo_persistence));
    }
	if(cq_wcm_undo_persistence_mode.isSet()){
        obj.insert(QString("cq.wcm.undo.persistence.mode"), ::OpenAPI::toJsonValue(cq_wcm_undo_persistence_mode));
    }
	if(cq_wcm_undo_markermode.isSet()){
        obj.insert(QString("cq.wcm.undo.markermode"), ::OpenAPI::toJsonValue(cq_wcm_undo_markermode));
    }
	if(cq_wcm_undo_whitelist.isSet()){
        obj.insert(QString("cq.wcm.undo.whitelist"), ::OpenAPI::toJsonValue(cq_wcm_undo_whitelist));
    }
	if(cq_wcm_undo_blacklist.isSet()){
        obj.insert(QString("cq.wcm.undo.blacklist"), ::OpenAPI::toJsonValue(cq_wcm_undo_blacklist));
    }
    return obj;
}

OAIConfigNodePropertyBoolean
OAIComDayCqWcmUndoUndoConfigProperties::getCqWcmUndoEnabled() const {
    return cq_wcm_undo_enabled;
}
void
OAIComDayCqWcmUndoUndoConfigProperties::setCqWcmUndoEnabled(const OAIConfigNodePropertyBoolean &cq_wcm_undo_enabled) {
    this->cq_wcm_undo_enabled = cq_wcm_undo_enabled;
    this->m_cq_wcm_undo_enabled_isSet = true;
}

OAIConfigNodePropertyString
OAIComDayCqWcmUndoUndoConfigProperties::getCqWcmUndoPath() const {
    return cq_wcm_undo_path;
}
void
OAIComDayCqWcmUndoUndoConfigProperties::setCqWcmUndoPath(const OAIConfigNodePropertyString &cq_wcm_undo_path) {
    this->cq_wcm_undo_path = cq_wcm_undo_path;
    this->m_cq_wcm_undo_path_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComDayCqWcmUndoUndoConfigProperties::getCqWcmUndoValidity() const {
    return cq_wcm_undo_validity;
}
void
OAIComDayCqWcmUndoUndoConfigProperties::setCqWcmUndoValidity(const OAIConfigNodePropertyInteger &cq_wcm_undo_validity) {
    this->cq_wcm_undo_validity = cq_wcm_undo_validity;
    this->m_cq_wcm_undo_validity_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComDayCqWcmUndoUndoConfigProperties::getCqWcmUndoSteps() const {
    return cq_wcm_undo_steps;
}
void
OAIComDayCqWcmUndoUndoConfigProperties::setCqWcmUndoSteps(const OAIConfigNodePropertyInteger &cq_wcm_undo_steps) {
    this->cq_wcm_undo_steps = cq_wcm_undo_steps;
    this->m_cq_wcm_undo_steps_isSet = true;
}

OAIConfigNodePropertyString
OAIComDayCqWcmUndoUndoConfigProperties::getCqWcmUndoPersistence() const {
    return cq_wcm_undo_persistence;
}
void
OAIComDayCqWcmUndoUndoConfigProperties::setCqWcmUndoPersistence(const OAIConfigNodePropertyString &cq_wcm_undo_persistence) {
    this->cq_wcm_undo_persistence = cq_wcm_undo_persistence;
    this->m_cq_wcm_undo_persistence_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComDayCqWcmUndoUndoConfigProperties::getCqWcmUndoPersistenceMode() const {
    return cq_wcm_undo_persistence_mode;
}
void
OAIComDayCqWcmUndoUndoConfigProperties::setCqWcmUndoPersistenceMode(const OAIConfigNodePropertyBoolean &cq_wcm_undo_persistence_mode) {
    this->cq_wcm_undo_persistence_mode = cq_wcm_undo_persistence_mode;
    this->m_cq_wcm_undo_persistence_mode_isSet = true;
}

OAIConfigNodePropertyString
OAIComDayCqWcmUndoUndoConfigProperties::getCqWcmUndoMarkermode() const {
    return cq_wcm_undo_markermode;
}
void
OAIComDayCqWcmUndoUndoConfigProperties::setCqWcmUndoMarkermode(const OAIConfigNodePropertyString &cq_wcm_undo_markermode) {
    this->cq_wcm_undo_markermode = cq_wcm_undo_markermode;
    this->m_cq_wcm_undo_markermode_isSet = true;
}

OAIConfigNodePropertyArray
OAIComDayCqWcmUndoUndoConfigProperties::getCqWcmUndoWhitelist() const {
    return cq_wcm_undo_whitelist;
}
void
OAIComDayCqWcmUndoUndoConfigProperties::setCqWcmUndoWhitelist(const OAIConfigNodePropertyArray &cq_wcm_undo_whitelist) {
    this->cq_wcm_undo_whitelist = cq_wcm_undo_whitelist;
    this->m_cq_wcm_undo_whitelist_isSet = true;
}

OAIConfigNodePropertyArray
OAIComDayCqWcmUndoUndoConfigProperties::getCqWcmUndoBlacklist() const {
    return cq_wcm_undo_blacklist;
}
void
OAIComDayCqWcmUndoUndoConfigProperties::setCqWcmUndoBlacklist(const OAIConfigNodePropertyArray &cq_wcm_undo_blacklist) {
    this->cq_wcm_undo_blacklist = cq_wcm_undo_blacklist;
    this->m_cq_wcm_undo_blacklist_isSet = true;
}


bool
OAIComDayCqWcmUndoUndoConfigProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(cq_wcm_undo_enabled.isSet()){ isObjectUpdated = true; break;}
    
        if(cq_wcm_undo_path.isSet()){ isObjectUpdated = true; break;}
    
        if(cq_wcm_undo_validity.isSet()){ isObjectUpdated = true; break;}
    
        if(cq_wcm_undo_steps.isSet()){ isObjectUpdated = true; break;}
    
        if(cq_wcm_undo_persistence.isSet()){ isObjectUpdated = true; break;}
    
        if(cq_wcm_undo_persistence_mode.isSet()){ isObjectUpdated = true; break;}
    
        if(cq_wcm_undo_markermode.isSet()){ isObjectUpdated = true; break;}
    
        if(cq_wcm_undo_whitelist.isSet()){ isObjectUpdated = true; break;}
    
        if(cq_wcm_undo_blacklist.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

