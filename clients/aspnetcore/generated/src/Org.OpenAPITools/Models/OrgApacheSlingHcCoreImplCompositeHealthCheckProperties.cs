/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OrgApacheSlingHcCoreImplCompositeHealthCheckProperties : IEquatable<OrgApacheSlingHcCoreImplCompositeHealthCheckProperties>
    { 
        /// <summary>
        /// Gets or Sets HcName
        /// </summary>
        [DataMember(Name="hc.name")]
        public ConfigNodePropertyString HcName { get; set; }

        /// <summary>
        /// Gets or Sets HcTags
        /// </summary>
        [DataMember(Name="hc.tags")]
        public ConfigNodePropertyArray HcTags { get; set; }

        /// <summary>
        /// Gets or Sets HcMbeanName
        /// </summary>
        [DataMember(Name="hc.mbean.name")]
        public ConfigNodePropertyString HcMbeanName { get; set; }

        /// <summary>
        /// Gets or Sets FilterTags
        /// </summary>
        [DataMember(Name="filter.tags")]
        public ConfigNodePropertyArray FilterTags { get; set; }

        /// <summary>
        /// Gets or Sets FilterCombineTagsWithOr
        /// </summary>
        [DataMember(Name="filter.combineTagsWithOr")]
        public ConfigNodePropertyBoolean FilterCombineTagsWithOr { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheSlingHcCoreImplCompositeHealthCheckProperties {\n");
            sb.Append("  HcName: ").Append(HcName).Append("\n");
            sb.Append("  HcTags: ").Append(HcTags).Append("\n");
            sb.Append("  HcMbeanName: ").Append(HcMbeanName).Append("\n");
            sb.Append("  FilterTags: ").Append(FilterTags).Append("\n");
            sb.Append("  FilterCombineTagsWithOr: ").Append(FilterCombineTagsWithOr).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrgApacheSlingHcCoreImplCompositeHealthCheckProperties)obj);
        }

        /// <summary>
        /// Returns true if OrgApacheSlingHcCoreImplCompositeHealthCheckProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of OrgApacheSlingHcCoreImplCompositeHealthCheckProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheSlingHcCoreImplCompositeHealthCheckProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    HcName == other.HcName ||
                    HcName != null &&
                    HcName.Equals(other.HcName)
                ) && 
                (
                    HcTags == other.HcTags ||
                    HcTags != null &&
                    HcTags.Equals(other.HcTags)
                ) && 
                (
                    HcMbeanName == other.HcMbeanName ||
                    HcMbeanName != null &&
                    HcMbeanName.Equals(other.HcMbeanName)
                ) && 
                (
                    FilterTags == other.FilterTags ||
                    FilterTags != null &&
                    FilterTags.Equals(other.FilterTags)
                ) && 
                (
                    FilterCombineTagsWithOr == other.FilterCombineTagsWithOr ||
                    FilterCombineTagsWithOr != null &&
                    FilterCombineTagsWithOr.Equals(other.FilterCombineTagsWithOr)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (HcName != null)
                    hashCode = hashCode * 59 + HcName.GetHashCode();
                    if (HcTags != null)
                    hashCode = hashCode * 59 + HcTags.GetHashCode();
                    if (HcMbeanName != null)
                    hashCode = hashCode * 59 + HcMbeanName.GetHashCode();
                    if (FilterTags != null)
                    hashCode = hashCode * 59 + FilterTags.GetHashCode();
                    if (FilterCombineTagsWithOr != null)
                    hashCode = hashCode * 59 + FilterCombineTagsWithOr.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrgApacheSlingHcCoreImplCompositeHealthCheckProperties left, OrgApacheSlingHcCoreImplCompositeHealthCheckProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrgApacheSlingHcCoreImplCompositeHealthCheckProperties left, OrgApacheSlingHcCoreImplCompositeHealthCheckProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
