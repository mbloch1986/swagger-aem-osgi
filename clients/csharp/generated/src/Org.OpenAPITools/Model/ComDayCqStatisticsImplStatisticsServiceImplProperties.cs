/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComDayCqStatisticsImplStatisticsServiceImplProperties
    /// </summary>
    [DataContract]
    public partial class ComDayCqStatisticsImplStatisticsServiceImplProperties :  IEquatable<ComDayCqStatisticsImplStatisticsServiceImplProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComDayCqStatisticsImplStatisticsServiceImplProperties" /> class.
        /// </summary>
        /// <param name="schedulerPeriod">schedulerPeriod.</param>
        /// <param name="schedulerConcurrent">schedulerConcurrent.</param>
        /// <param name="path">path.</param>
        /// <param name="workspace">workspace.</param>
        /// <param name="keywordsPath">keywordsPath.</param>
        /// <param name="asyncEntries">asyncEntries.</param>
        public ComDayCqStatisticsImplStatisticsServiceImplProperties(ConfigNodePropertyInteger schedulerPeriod = default(ConfigNodePropertyInteger), ConfigNodePropertyBoolean schedulerConcurrent = default(ConfigNodePropertyBoolean), ConfigNodePropertyString path = default(ConfigNodePropertyString), ConfigNodePropertyString workspace = default(ConfigNodePropertyString), ConfigNodePropertyString keywordsPath = default(ConfigNodePropertyString), ConfigNodePropertyBoolean asyncEntries = default(ConfigNodePropertyBoolean))
        {
            this.SchedulerPeriod = schedulerPeriod;
            this.SchedulerConcurrent = schedulerConcurrent;
            this.Path = path;
            this.Workspace = workspace;
            this.KeywordsPath = keywordsPath;
            this.AsyncEntries = asyncEntries;
        }
        
        /// <summary>
        /// Gets or Sets SchedulerPeriod
        /// </summary>
        [DataMember(Name="scheduler.period", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger SchedulerPeriod { get; set; }

        /// <summary>
        /// Gets or Sets SchedulerConcurrent
        /// </summary>
        [DataMember(Name="scheduler.concurrent", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean SchedulerConcurrent { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public ConfigNodePropertyString Path { get; set; }

        /// <summary>
        /// Gets or Sets Workspace
        /// </summary>
        [DataMember(Name="workspace", EmitDefaultValue=false)]
        public ConfigNodePropertyString Workspace { get; set; }

        /// <summary>
        /// Gets or Sets KeywordsPath
        /// </summary>
        [DataMember(Name="keywordsPath", EmitDefaultValue=false)]
        public ConfigNodePropertyString KeywordsPath { get; set; }

        /// <summary>
        /// Gets or Sets AsyncEntries
        /// </summary>
        [DataMember(Name="asyncEntries", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean AsyncEntries { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComDayCqStatisticsImplStatisticsServiceImplProperties {\n");
            sb.Append("  SchedulerPeriod: ").Append(SchedulerPeriod).Append("\n");
            sb.Append("  SchedulerConcurrent: ").Append(SchedulerConcurrent).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Workspace: ").Append(Workspace).Append("\n");
            sb.Append("  KeywordsPath: ").Append(KeywordsPath).Append("\n");
            sb.Append("  AsyncEntries: ").Append(AsyncEntries).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComDayCqStatisticsImplStatisticsServiceImplProperties);
        }

        /// <summary>
        /// Returns true if ComDayCqStatisticsImplStatisticsServiceImplProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComDayCqStatisticsImplStatisticsServiceImplProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComDayCqStatisticsImplStatisticsServiceImplProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SchedulerPeriod == input.SchedulerPeriod ||
                    (this.SchedulerPeriod != null &&
                    this.SchedulerPeriod.Equals(input.SchedulerPeriod))
                ) && 
                (
                    this.SchedulerConcurrent == input.SchedulerConcurrent ||
                    (this.SchedulerConcurrent != null &&
                    this.SchedulerConcurrent.Equals(input.SchedulerConcurrent))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.Workspace == input.Workspace ||
                    (this.Workspace != null &&
                    this.Workspace.Equals(input.Workspace))
                ) && 
                (
                    this.KeywordsPath == input.KeywordsPath ||
                    (this.KeywordsPath != null &&
                    this.KeywordsPath.Equals(input.KeywordsPath))
                ) && 
                (
                    this.AsyncEntries == input.AsyncEntries ||
                    (this.AsyncEntries != null &&
                    this.AsyncEntries.Equals(input.AsyncEntries))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SchedulerPeriod != null)
                    hashCode = hashCode * 59 + this.SchedulerPeriod.GetHashCode();
                if (this.SchedulerConcurrent != null)
                    hashCode = hashCode * 59 + this.SchedulerConcurrent.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.Workspace != null)
                    hashCode = hashCode * 59 + this.Workspace.GetHashCode();
                if (this.KeywordsPath != null)
                    hashCode = hashCode * 59 + this.KeywordsPath.GetHashCode();
                if (this.AsyncEntries != null)
                    hashCode = hashCode * 59 + this.AsyncEntries.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
