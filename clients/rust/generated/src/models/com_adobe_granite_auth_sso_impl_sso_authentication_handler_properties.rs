/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties {
  #[serde(rename = "path")]
  path: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "service.ranking")]
  service_ranking: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "jaas.controlFlag")]
  jaas_control_flag: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "jaas.realmName")]
  jaas_realm_name: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "jaas.ranking")]
  jaas_ranking: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "headers")]
  headers: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "cookies")]
  cookies: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "parameters")]
  parameters: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "usermap")]
  usermap: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "format")]
  format: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "trustedCredentialsAttribute")]
  trusted_credentials_attribute: Option<::models::ConfigNodePropertyString>
}

impl ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties {
  pub fn new() -> ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties {
    ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties {
      path: None,
      service_ranking: None,
      jaas_control_flag: None,
      jaas_realm_name: None,
      jaas_ranking: None,
      headers: None,
      cookies: None,
      parameters: None,
      usermap: None,
      format: None,
      trusted_credentials_attribute: None
    }
  }

  pub fn set_path(&mut self, path: ::models::ConfigNodePropertyString) {
    self.path = Some(path);
  }

  pub fn with_path(mut self, path: ::models::ConfigNodePropertyString) -> ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties {
    self.path = Some(path);
    self
  }

  pub fn path(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.path.as_ref()
  }

  pub fn reset_path(&mut self) {
    self.path = None;
  }

  pub fn set_service_ranking(&mut self, service_ranking: ::models::ConfigNodePropertyInteger) {
    self.service_ranking = Some(service_ranking);
  }

  pub fn with_service_ranking(mut self, service_ranking: ::models::ConfigNodePropertyInteger) -> ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties {
    self.service_ranking = Some(service_ranking);
    self
  }

  pub fn service_ranking(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.service_ranking.as_ref()
  }

  pub fn reset_service_ranking(&mut self) {
    self.service_ranking = None;
  }

  pub fn set_jaas_control_flag(&mut self, jaas_control_flag: ::models::ConfigNodePropertyString) {
    self.jaas_control_flag = Some(jaas_control_flag);
  }

  pub fn with_jaas_control_flag(mut self, jaas_control_flag: ::models::ConfigNodePropertyString) -> ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties {
    self.jaas_control_flag = Some(jaas_control_flag);
    self
  }

  pub fn jaas_control_flag(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.jaas_control_flag.as_ref()
  }

  pub fn reset_jaas_control_flag(&mut self) {
    self.jaas_control_flag = None;
  }

  pub fn set_jaas_realm_name(&mut self, jaas_realm_name: ::models::ConfigNodePropertyString) {
    self.jaas_realm_name = Some(jaas_realm_name);
  }

  pub fn with_jaas_realm_name(mut self, jaas_realm_name: ::models::ConfigNodePropertyString) -> ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties {
    self.jaas_realm_name = Some(jaas_realm_name);
    self
  }

  pub fn jaas_realm_name(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.jaas_realm_name.as_ref()
  }

  pub fn reset_jaas_realm_name(&mut self) {
    self.jaas_realm_name = None;
  }

  pub fn set_jaas_ranking(&mut self, jaas_ranking: ::models::ConfigNodePropertyInteger) {
    self.jaas_ranking = Some(jaas_ranking);
  }

  pub fn with_jaas_ranking(mut self, jaas_ranking: ::models::ConfigNodePropertyInteger) -> ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties {
    self.jaas_ranking = Some(jaas_ranking);
    self
  }

  pub fn jaas_ranking(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.jaas_ranking.as_ref()
  }

  pub fn reset_jaas_ranking(&mut self) {
    self.jaas_ranking = None;
  }

  pub fn set_headers(&mut self, headers: ::models::ConfigNodePropertyArray) {
    self.headers = Some(headers);
  }

  pub fn with_headers(mut self, headers: ::models::ConfigNodePropertyArray) -> ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties {
    self.headers = Some(headers);
    self
  }

  pub fn headers(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.headers.as_ref()
  }

  pub fn reset_headers(&mut self) {
    self.headers = None;
  }

  pub fn set_cookies(&mut self, cookies: ::models::ConfigNodePropertyArray) {
    self.cookies = Some(cookies);
  }

  pub fn with_cookies(mut self, cookies: ::models::ConfigNodePropertyArray) -> ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties {
    self.cookies = Some(cookies);
    self
  }

  pub fn cookies(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.cookies.as_ref()
  }

  pub fn reset_cookies(&mut self) {
    self.cookies = None;
  }

  pub fn set_parameters(&mut self, parameters: ::models::ConfigNodePropertyArray) {
    self.parameters = Some(parameters);
  }

  pub fn with_parameters(mut self, parameters: ::models::ConfigNodePropertyArray) -> ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties {
    self.parameters = Some(parameters);
    self
  }

  pub fn parameters(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.parameters.as_ref()
  }

  pub fn reset_parameters(&mut self) {
    self.parameters = None;
  }

  pub fn set_usermap(&mut self, usermap: ::models::ConfigNodePropertyArray) {
    self.usermap = Some(usermap);
  }

  pub fn with_usermap(mut self, usermap: ::models::ConfigNodePropertyArray) -> ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties {
    self.usermap = Some(usermap);
    self
  }

  pub fn usermap(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.usermap.as_ref()
  }

  pub fn reset_usermap(&mut self) {
    self.usermap = None;
  }

  pub fn set_format(&mut self, format: ::models::ConfigNodePropertyString) {
    self.format = Some(format);
  }

  pub fn with_format(mut self, format: ::models::ConfigNodePropertyString) -> ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties {
    self.format = Some(format);
    self
  }

  pub fn format(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.format.as_ref()
  }

  pub fn reset_format(&mut self) {
    self.format = None;
  }

  pub fn set_trusted_credentials_attribute(&mut self, trusted_credentials_attribute: ::models::ConfigNodePropertyString) {
    self.trusted_credentials_attribute = Some(trusted_credentials_attribute);
  }

  pub fn with_trusted_credentials_attribute(mut self, trusted_credentials_attribute: ::models::ConfigNodePropertyString) -> ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties {
    self.trusted_credentials_attribute = Some(trusted_credentials_attribute);
    self
  }

  pub fn trusted_credentials_attribute(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.trusted_credentials_attribute.as_ref()
  }

  pub fn reset_trusted_credentials_attribute(&mut self) {
    self.trusted_credentials_attribute = None;
  }

}



