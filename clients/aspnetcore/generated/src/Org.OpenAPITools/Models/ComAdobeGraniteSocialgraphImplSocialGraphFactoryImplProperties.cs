/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplProperties : IEquatable<ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplProperties>
    { 
        /// <summary>
        /// Gets or Sets Group2memberRelationshipOutgoing
        /// </summary>
        [DataMember(Name="group2member.relationship.outgoing")]
        public ConfigNodePropertyString Group2memberRelationshipOutgoing { get; set; }

        /// <summary>
        /// Gets or Sets Group2memberExcludedOutgoing
        /// </summary>
        [DataMember(Name="group2member.excluded.outgoing")]
        public ConfigNodePropertyArray Group2memberExcludedOutgoing { get; set; }

        /// <summary>
        /// Gets or Sets Group2memberRelationshipIncoming
        /// </summary>
        [DataMember(Name="group2member.relationship.incoming")]
        public ConfigNodePropertyString Group2memberRelationshipIncoming { get; set; }

        /// <summary>
        /// Gets or Sets Group2memberExcludedIncoming
        /// </summary>
        [DataMember(Name="group2member.excluded.incoming")]
        public ConfigNodePropertyArray Group2memberExcludedIncoming { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplProperties {\n");
            sb.Append("  Group2memberRelationshipOutgoing: ").Append(Group2memberRelationshipOutgoing).Append("\n");
            sb.Append("  Group2memberExcludedOutgoing: ").Append(Group2memberExcludedOutgoing).Append("\n");
            sb.Append("  Group2memberRelationshipIncoming: ").Append(Group2memberRelationshipIncoming).Append("\n");
            sb.Append("  Group2memberExcludedIncoming: ").Append(Group2memberExcludedIncoming).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplProperties)obj);
        }

        /// <summary>
        /// Returns true if ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Group2memberRelationshipOutgoing == other.Group2memberRelationshipOutgoing ||
                    Group2memberRelationshipOutgoing != null &&
                    Group2memberRelationshipOutgoing.Equals(other.Group2memberRelationshipOutgoing)
                ) && 
                (
                    Group2memberExcludedOutgoing == other.Group2memberExcludedOutgoing ||
                    Group2memberExcludedOutgoing != null &&
                    Group2memberExcludedOutgoing.Equals(other.Group2memberExcludedOutgoing)
                ) && 
                (
                    Group2memberRelationshipIncoming == other.Group2memberRelationshipIncoming ||
                    Group2memberRelationshipIncoming != null &&
                    Group2memberRelationshipIncoming.Equals(other.Group2memberRelationshipIncoming)
                ) && 
                (
                    Group2memberExcludedIncoming == other.Group2memberExcludedIncoming ||
                    Group2memberExcludedIncoming != null &&
                    Group2memberExcludedIncoming.Equals(other.Group2memberExcludedIncoming)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Group2memberRelationshipOutgoing != null)
                    hashCode = hashCode * 59 + Group2memberRelationshipOutgoing.GetHashCode();
                    if (Group2memberExcludedOutgoing != null)
                    hashCode = hashCode * 59 + Group2memberExcludedOutgoing.GetHashCode();
                    if (Group2memberRelationshipIncoming != null)
                    hashCode = hashCode * 59 + Group2memberRelationshipIncoming.GetHashCode();
                    if (Group2memberExcludedIncoming != null)
                    hashCode = hashCode * 59 + Group2memberExcludedIncoming.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplProperties left, ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplProperties left, ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
