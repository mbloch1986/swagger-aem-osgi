/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties::OAIOrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties(QString json) {
    this->fromJson(json);
}

OAIOrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties::OAIOrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties() {
    this->init();
}

OAIOrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties::~OAIOrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties() {
    
}

void
OAIOrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties::init() {
    m_java_classdebuginfo_isSet = false;
    m_java_java_encoding_isSet = false;
    m_java_compiler_source_vm_isSet = false;
    m_java_compiler_target_vm_isSet = false;
}

void
OAIOrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIOrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(java_classdebuginfo, json[QString("java.classdebuginfo")]);
    
    ::OpenAPI::fromJsonValue(java_java_encoding, json[QString("java.javaEncoding")]);
    
    ::OpenAPI::fromJsonValue(java_compiler_source_vm, json[QString("java.compilerSourceVM")]);
    
    ::OpenAPI::fromJsonValue(java_compiler_target_vm, json[QString("java.compilerTargetVM")]);
    
}

QString
OAIOrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties::asJsonObject() const {
    QJsonObject obj;
	if(java_classdebuginfo.isSet()){
        obj.insert(QString("java.classdebuginfo"), ::OpenAPI::toJsonValue(java_classdebuginfo));
    }
	if(java_java_encoding.isSet()){
        obj.insert(QString("java.javaEncoding"), ::OpenAPI::toJsonValue(java_java_encoding));
    }
	if(java_compiler_source_vm.isSet()){
        obj.insert(QString("java.compilerSourceVM"), ::OpenAPI::toJsonValue(java_compiler_source_vm));
    }
	if(java_compiler_target_vm.isSet()){
        obj.insert(QString("java.compilerTargetVM"), ::OpenAPI::toJsonValue(java_compiler_target_vm));
    }
    return obj;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties::getJavaClassdebuginfo() const {
    return java_classdebuginfo;
}
void
OAIOrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties::setJavaClassdebuginfo(const OAIConfigNodePropertyBoolean &java_classdebuginfo) {
    this->java_classdebuginfo = java_classdebuginfo;
    this->m_java_classdebuginfo_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties::getJavaJavaEncoding() const {
    return java_java_encoding;
}
void
OAIOrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties::setJavaJavaEncoding(const OAIConfigNodePropertyString &java_java_encoding) {
    this->java_java_encoding = java_java_encoding;
    this->m_java_java_encoding_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties::getJavaCompilerSourceVm() const {
    return java_compiler_source_vm;
}
void
OAIOrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties::setJavaCompilerSourceVm(const OAIConfigNodePropertyString &java_compiler_source_vm) {
    this->java_compiler_source_vm = java_compiler_source_vm;
    this->m_java_compiler_source_vm_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties::getJavaCompilerTargetVm() const {
    return java_compiler_target_vm;
}
void
OAIOrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties::setJavaCompilerTargetVm(const OAIConfigNodePropertyString &java_compiler_target_vm) {
    this->java_compiler_target_vm = java_compiler_target_vm;
    this->m_java_compiler_target_vm_isSet = true;
}


bool
OAIOrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(java_classdebuginfo.isSet()){ isObjectUpdated = true; break;}
    
        if(java_java_encoding.isSet()){ isObjectUpdated = true; break;}
    
        if(java_compiler_source_vm.isSet()){ isObjectUpdated = true; break;}
    
        if(java_compiler_target_vm.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

