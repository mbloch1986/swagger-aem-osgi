/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties : IEquatable<ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties>
    { 
        /// <summary>
        /// Gets or Sets CqContentsyncPathrewritertransformerMappingLinks
        /// </summary>
        [DataMember(Name="cq.contentsync.pathrewritertransformer.mapping.links")]
        public ConfigNodePropertyArray CqContentsyncPathrewritertransformerMappingLinks { get; set; }

        /// <summary>
        /// Gets or Sets CqContentsyncPathrewritertransformerMappingClientlibs
        /// </summary>
        [DataMember(Name="cq.contentsync.pathrewritertransformer.mapping.clientlibs")]
        public ConfigNodePropertyArray CqContentsyncPathrewritertransformerMappingClientlibs { get; set; }

        /// <summary>
        /// Gets or Sets CqContentsyncPathrewritertransformerMappingImages
        /// </summary>
        [DataMember(Name="cq.contentsync.pathrewritertransformer.mapping.images")]
        public ConfigNodePropertyArray CqContentsyncPathrewritertransformerMappingImages { get; set; }

        /// <summary>
        /// Gets or Sets CqContentsyncPathrewritertransformerAttributePattern
        /// </summary>
        [DataMember(Name="cq.contentsync.pathrewritertransformer.attribute.pattern")]
        public ConfigNodePropertyString CqContentsyncPathrewritertransformerAttributePattern { get; set; }

        /// <summary>
        /// Gets or Sets CqContentsyncPathrewritertransformerClientlibraryPattern
        /// </summary>
        [DataMember(Name="cq.contentsync.pathrewritertransformer.clientlibrary.pattern")]
        public ConfigNodePropertyString CqContentsyncPathrewritertransformerClientlibraryPattern { get; set; }

        /// <summary>
        /// Gets or Sets CqContentsyncPathrewritertransformerClientlibraryReplace
        /// </summary>
        [DataMember(Name="cq.contentsync.pathrewritertransformer.clientlibrary.replace")]
        public ConfigNodePropertyString CqContentsyncPathrewritertransformerClientlibraryReplace { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties {\n");
            sb.Append("  CqContentsyncPathrewritertransformerMappingLinks: ").Append(CqContentsyncPathrewritertransformerMappingLinks).Append("\n");
            sb.Append("  CqContentsyncPathrewritertransformerMappingClientlibs: ").Append(CqContentsyncPathrewritertransformerMappingClientlibs).Append("\n");
            sb.Append("  CqContentsyncPathrewritertransformerMappingImages: ").Append(CqContentsyncPathrewritertransformerMappingImages).Append("\n");
            sb.Append("  CqContentsyncPathrewritertransformerAttributePattern: ").Append(CqContentsyncPathrewritertransformerAttributePattern).Append("\n");
            sb.Append("  CqContentsyncPathrewritertransformerClientlibraryPattern: ").Append(CqContentsyncPathrewritertransformerClientlibraryPattern).Append("\n");
            sb.Append("  CqContentsyncPathrewritertransformerClientlibraryReplace: ").Append(CqContentsyncPathrewritertransformerClientlibraryReplace).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties)obj);
        }

        /// <summary>
        /// Returns true if ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CqContentsyncPathrewritertransformerMappingLinks == other.CqContentsyncPathrewritertransformerMappingLinks ||
                    CqContentsyncPathrewritertransformerMappingLinks != null &&
                    CqContentsyncPathrewritertransformerMappingLinks.Equals(other.CqContentsyncPathrewritertransformerMappingLinks)
                ) && 
                (
                    CqContentsyncPathrewritertransformerMappingClientlibs == other.CqContentsyncPathrewritertransformerMappingClientlibs ||
                    CqContentsyncPathrewritertransformerMappingClientlibs != null &&
                    CqContentsyncPathrewritertransformerMappingClientlibs.Equals(other.CqContentsyncPathrewritertransformerMappingClientlibs)
                ) && 
                (
                    CqContentsyncPathrewritertransformerMappingImages == other.CqContentsyncPathrewritertransformerMappingImages ||
                    CqContentsyncPathrewritertransformerMappingImages != null &&
                    CqContentsyncPathrewritertransformerMappingImages.Equals(other.CqContentsyncPathrewritertransformerMappingImages)
                ) && 
                (
                    CqContentsyncPathrewritertransformerAttributePattern == other.CqContentsyncPathrewritertransformerAttributePattern ||
                    CqContentsyncPathrewritertransformerAttributePattern != null &&
                    CqContentsyncPathrewritertransformerAttributePattern.Equals(other.CqContentsyncPathrewritertransformerAttributePattern)
                ) && 
                (
                    CqContentsyncPathrewritertransformerClientlibraryPattern == other.CqContentsyncPathrewritertransformerClientlibraryPattern ||
                    CqContentsyncPathrewritertransformerClientlibraryPattern != null &&
                    CqContentsyncPathrewritertransformerClientlibraryPattern.Equals(other.CqContentsyncPathrewritertransformerClientlibraryPattern)
                ) && 
                (
                    CqContentsyncPathrewritertransformerClientlibraryReplace == other.CqContentsyncPathrewritertransformerClientlibraryReplace ||
                    CqContentsyncPathrewritertransformerClientlibraryReplace != null &&
                    CqContentsyncPathrewritertransformerClientlibraryReplace.Equals(other.CqContentsyncPathrewritertransformerClientlibraryReplace)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CqContentsyncPathrewritertransformerMappingLinks != null)
                    hashCode = hashCode * 59 + CqContentsyncPathrewritertransformerMappingLinks.GetHashCode();
                    if (CqContentsyncPathrewritertransformerMappingClientlibs != null)
                    hashCode = hashCode * 59 + CqContentsyncPathrewritertransformerMappingClientlibs.GetHashCode();
                    if (CqContentsyncPathrewritertransformerMappingImages != null)
                    hashCode = hashCode * 59 + CqContentsyncPathrewritertransformerMappingImages.GetHashCode();
                    if (CqContentsyncPathrewritertransformerAttributePattern != null)
                    hashCode = hashCode * 59 + CqContentsyncPathrewritertransformerAttributePattern.GetHashCode();
                    if (CqContentsyncPathrewritertransformerClientlibraryPattern != null)
                    hashCode = hashCode * 59 + CqContentsyncPathrewritertransformerClientlibraryPattern.GetHashCode();
                    if (CqContentsyncPathrewritertransformerClientlibraryReplace != null)
                    hashCode = hashCode * 59 + CqContentsyncPathrewritertransformerClientlibraryReplace.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties left, ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties left, ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
