/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties()
{
    m_User_mappingIsSet = false;
    m_User_defaultIsSet = false;
    m_User_enable_default_mappingIsSet = false;
    m_Require_validationIsSet = false;
    
}

OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::~OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties()
{
}

void OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_User_mappingIsSet)
    {
        val["user.mapping"] = ModelBase::toJson(m_User_mapping);
    }
    if(m_User_defaultIsSet)
    {
        val["user.default"] = ModelBase::toJson(m_User_default);
    }
    if(m_User_enable_default_mappingIsSet)
    {
        val["user.enable.default.mapping"] = ModelBase::toJson(m_User_enable_default_mapping);
    }
    if(m_Require_validationIsSet)
    {
        val["require.validation"] = ModelBase::toJson(m_Require_validation);
    }
    

    return val;
}

void OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::fromJson(nlohmann::json& val)
{
    if(val.find("user.mapping") != val.end())
    {
        if(!val["user.mapping"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["user.mapping"]);
            setUserMapping( newItem );
        }
        
    }
    if(val.find("user.default") != val.end())
    {
        if(!val["user.default"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["user.default"]);
            setUserDefault( newItem );
        }
        
    }
    if(val.find("user.enable.default.mapping") != val.end())
    {
        if(!val["user.enable.default.mapping"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["user.enable.default.mapping"]);
            setUserEnableDefaultMapping( newItem );
        }
        
    }
    if(val.find("require.validation") != val.end())
    {
        if(!val["require.validation"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["require.validation"]);
            setRequireValidation( newItem );
        }
        
    }
    
}


ConfigNodePropertyArray OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::getUserMapping() const
{
    return m_User_mapping;
}
void OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::setUserMapping(ConfigNodePropertyArray const& value)
{
    m_User_mapping = value;
    m_User_mappingIsSet = true;
}
bool OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::userMappingIsSet() const
{
    return m_User_mappingIsSet;
}
void OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::unsetUser_mapping()
{
    m_User_mappingIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::getUserDefault() const
{
    return m_User_default;
}
void OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::setUserDefault(ConfigNodePropertyString const& value)
{
    m_User_default = value;
    m_User_defaultIsSet = true;
}
bool OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::userDefaultIsSet() const
{
    return m_User_defaultIsSet;
}
void OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::unsetUser_default()
{
    m_User_defaultIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::getUserEnableDefaultMapping() const
{
    return m_User_enable_default_mapping;
}
void OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::setUserEnableDefaultMapping(ConfigNodePropertyBoolean const& value)
{
    m_User_enable_default_mapping = value;
    m_User_enable_default_mappingIsSet = true;
}
bool OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::userEnableDefaultMappingIsSet() const
{
    return m_User_enable_default_mappingIsSet;
}
void OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::unsetUser_enable_default_mapping()
{
    m_User_enable_default_mappingIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::getRequireValidation() const
{
    return m_Require_validation;
}
void OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::setRequireValidation(ConfigNodePropertyBoolean const& value)
{
    m_Require_validation = value;
    m_Require_validationIsSet = true;
}
bool OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::requireValidationIsSet() const
{
    return m_Require_validationIsSet;
}
void OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::unsetRequire_validation()
{
    m_Require_validationIsSet = false;
}

}
}
}
}

