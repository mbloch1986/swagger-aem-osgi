note
 description:"[
		Adobe Experience Manager OSGI config (AEM) API
 		Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
  		OpenAPI spec version: 1.0.0-pre.0
 	    Contact: opensource@shinesolutions.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class COM_DAY_CQ_POLLING_IMPORTER_IMPL_MANAGED_POLL_CONFIG_IMPL_PROPERTIES 

inherit

  ANY
      redefine
          out 
      end


feature --Access

    id: detachable CONFIG_NODE_PROPERTY_STRING 
      
    enabled: detachable CONFIG_NODE_PROPERTY_BOOLEAN 
      
    reference: detachable CONFIG_NODE_PROPERTY_BOOLEAN 
      
    interval: detachable CONFIG_NODE_PROPERTY_INTEGER 
      
    expression: detachable CONFIG_NODE_PROPERTY_STRING 
      
    source: detachable CONFIG_NODE_PROPERTY_STRING 
      
    target: detachable CONFIG_NODE_PROPERTY_STRING 
      
    login: detachable CONFIG_NODE_PROPERTY_STRING 
      
    password: detachable CONFIG_NODE_PROPERTY_STRING 
      

feature -- Change Element  
 
    set_id (a_name: like id)
        -- Set 'id' with 'a_name'.
      do
        id := a_name
      ensure
        id_set: id = a_name		
      end

    set_enabled (a_name: like enabled)
        -- Set 'enabled' with 'a_name'.
      do
        enabled := a_name
      ensure
        enabled_set: enabled = a_name		
      end

    set_reference (a_name: like reference)
        -- Set 'reference' with 'a_name'.
      do
        reference := a_name
      ensure
        reference_set: reference = a_name		
      end

    set_interval (a_name: like interval)
        -- Set 'interval' with 'a_name'.
      do
        interval := a_name
      ensure
        interval_set: interval = a_name		
      end

    set_expression (a_name: like expression)
        -- Set 'expression' with 'a_name'.
      do
        expression := a_name
      ensure
        expression_set: expression = a_name		
      end

    set_source (a_name: like source)
        -- Set 'source' with 'a_name'.
      do
        source := a_name
      ensure
        source_set: source = a_name		
      end

    set_target (a_name: like target)
        -- Set 'target' with 'a_name'.
      do
        target := a_name
      ensure
        target_set: target = a_name		
      end

    set_login (a_name: like login)
        -- Set 'login' with 'a_name'.
      do
        login := a_name
      ensure
        login_set: login = a_name		
      end

    set_password (a_name: like password)
        -- Set 'password' with 'a_name'.
      do
        password := a_name
      ensure
        password_set: password = a_name		
      end


 feature -- Status Report

    out: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass COM_DAY_CQ_POLLING_IMPORTER_IMPL_MANAGED_POLL_CONFIG_IMPL_PROPERTIES%N")
        if attached id as l_id then
          Result.append ("%Nid:")
          Result.append (l_id.out)
          Result.append ("%N")    
        end  
        if attached enabled as l_enabled then
          Result.append ("%Nenabled:")
          Result.append (l_enabled.out)
          Result.append ("%N")    
        end  
        if attached reference as l_reference then
          Result.append ("%Nreference:")
          Result.append (l_reference.out)
          Result.append ("%N")    
        end  
        if attached interval as l_interval then
          Result.append ("%Ninterval:")
          Result.append (l_interval.out)
          Result.append ("%N")    
        end  
        if attached expression as l_expression then
          Result.append ("%Nexpression:")
          Result.append (l_expression.out)
          Result.append ("%N")    
        end  
        if attached source as l_source then
          Result.append ("%Nsource:")
          Result.append (l_source.out)
          Result.append ("%N")    
        end  
        if attached target as l_target then
          Result.append ("%Ntarget:")
          Result.append (l_target.out)
          Result.append ("%N")    
        end  
        if attached login as l_login then
          Result.append ("%Nlogin:")
          Result.append (l_login.out)
          Result.append ("%N")    
        end  
        if attached password as l_password then
          Result.append ("%Npassword:")
          Result.append (l_password.out)
          Result.append ("%N")    
        end  
      end
end


