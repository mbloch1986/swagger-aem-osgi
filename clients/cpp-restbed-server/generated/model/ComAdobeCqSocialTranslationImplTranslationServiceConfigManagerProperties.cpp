/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties.h"

#include <string>
#include <sstream>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties()
{
    
}

ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::~ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties()
{
}

std::string ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::toJsonString()
{
	std::stringstream ss;
	ptree pt;
	write_json(ss, pt, false);
	return ss.str();
}

void ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
}

std::shared_ptr<ConfigNodePropertyDropDown> ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::getTranslateLanguage() const
{
    return m_Translate_language;
}
void ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::setTranslateLanguage(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_Translate_language = value;
}
std::shared_ptr<ConfigNodePropertyDropDown> ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::getTranslateDisplay() const
{
    return m_Translate_display;
}
void ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::setTranslateDisplay(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_Translate_display = value;
}
std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::getTranslateAttribution() const
{
    return m_Translate_attribution;
}
void ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::setTranslateAttribution(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Translate_attribution = value;
}
std::shared_ptr<ConfigNodePropertyDropDown> ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::getTranslateCaching() const
{
    return m_Translate_caching;
}
void ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::setTranslateCaching(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_Translate_caching = value;
}
std::shared_ptr<ConfigNodePropertyDropDown> ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::getTranslateSmartRendering() const
{
    return m_Translate_smart_rendering;
}
void ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::setTranslateSmartRendering(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_Translate_smart_rendering = value;
}
std::shared_ptr<ConfigNodePropertyString> ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::getTranslateCachingDuration() const
{
    return m_Translate_caching_duration;
}
void ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::setTranslateCachingDuration(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Translate_caching_duration = value;
}
std::shared_ptr<ConfigNodePropertyString> ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::getTranslateSessionSaveInterval() const
{
    return m_Translate_session_save_interval;
}
void ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::setTranslateSessionSaveInterval(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Translate_session_save_interval = value;
}
std::shared_ptr<ConfigNodePropertyString> ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::getTranslateSessionSaveBatchLimit() const
{
    return m_Translate_session_save_batchLimit;
}
void ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::setTranslateSessionSaveBatchLimit(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Translate_session_save_batchLimit = value;
}

}
}
}
}

