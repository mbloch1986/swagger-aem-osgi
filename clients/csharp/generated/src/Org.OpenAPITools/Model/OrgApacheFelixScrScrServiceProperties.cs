/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OrgApacheFelixScrScrServiceProperties
    /// </summary>
    [DataContract]
    public partial class OrgApacheFelixScrScrServiceProperties :  IEquatable<OrgApacheFelixScrScrServiceProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrgApacheFelixScrScrServiceProperties" /> class.
        /// </summary>
        /// <param name="dsLoglevel">dsLoglevel.</param>
        /// <param name="dsFactoryEnabled">dsFactoryEnabled.</param>
        /// <param name="dsDelayedKeepInstances">dsDelayedKeepInstances.</param>
        /// <param name="dsLockTimeoutMilliseconds">dsLockTimeoutMilliseconds.</param>
        /// <param name="dsStopTimeoutMilliseconds">dsStopTimeoutMilliseconds.</param>
        /// <param name="dsGlobalExtender">dsGlobalExtender.</param>
        public OrgApacheFelixScrScrServiceProperties(ConfigNodePropertyDropDown dsLoglevel = default(ConfigNodePropertyDropDown), ConfigNodePropertyBoolean dsFactoryEnabled = default(ConfigNodePropertyBoolean), ConfigNodePropertyBoolean dsDelayedKeepInstances = default(ConfigNodePropertyBoolean), ConfigNodePropertyInteger dsLockTimeoutMilliseconds = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger dsStopTimeoutMilliseconds = default(ConfigNodePropertyInteger), ConfigNodePropertyBoolean dsGlobalExtender = default(ConfigNodePropertyBoolean))
        {
            this.DsLoglevel = dsLoglevel;
            this.DsFactoryEnabled = dsFactoryEnabled;
            this.DsDelayedKeepInstances = dsDelayedKeepInstances;
            this.DsLockTimeoutMilliseconds = dsLockTimeoutMilliseconds;
            this.DsStopTimeoutMilliseconds = dsStopTimeoutMilliseconds;
            this.DsGlobalExtender = dsGlobalExtender;
        }
        
        /// <summary>
        /// Gets or Sets DsLoglevel
        /// </summary>
        [DataMember(Name="ds.loglevel", EmitDefaultValue=false)]
        public ConfigNodePropertyDropDown DsLoglevel { get; set; }

        /// <summary>
        /// Gets or Sets DsFactoryEnabled
        /// </summary>
        [DataMember(Name="ds.factory.enabled", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean DsFactoryEnabled { get; set; }

        /// <summary>
        /// Gets or Sets DsDelayedKeepInstances
        /// </summary>
        [DataMember(Name="ds.delayed.keepInstances", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean DsDelayedKeepInstances { get; set; }

        /// <summary>
        /// Gets or Sets DsLockTimeoutMilliseconds
        /// </summary>
        [DataMember(Name="ds.lock.timeout.milliseconds", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger DsLockTimeoutMilliseconds { get; set; }

        /// <summary>
        /// Gets or Sets DsStopTimeoutMilliseconds
        /// </summary>
        [DataMember(Name="ds.stop.timeout.milliseconds", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger DsStopTimeoutMilliseconds { get; set; }

        /// <summary>
        /// Gets or Sets DsGlobalExtender
        /// </summary>
        [DataMember(Name="ds.global.extender", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean DsGlobalExtender { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheFelixScrScrServiceProperties {\n");
            sb.Append("  DsLoglevel: ").Append(DsLoglevel).Append("\n");
            sb.Append("  DsFactoryEnabled: ").Append(DsFactoryEnabled).Append("\n");
            sb.Append("  DsDelayedKeepInstances: ").Append(DsDelayedKeepInstances).Append("\n");
            sb.Append("  DsLockTimeoutMilliseconds: ").Append(DsLockTimeoutMilliseconds).Append("\n");
            sb.Append("  DsStopTimeoutMilliseconds: ").Append(DsStopTimeoutMilliseconds).Append("\n");
            sb.Append("  DsGlobalExtender: ").Append(DsGlobalExtender).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrgApacheFelixScrScrServiceProperties);
        }

        /// <summary>
        /// Returns true if OrgApacheFelixScrScrServiceProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of OrgApacheFelixScrScrServiceProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheFelixScrScrServiceProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DsLoglevel == input.DsLoglevel ||
                    (this.DsLoglevel != null &&
                    this.DsLoglevel.Equals(input.DsLoglevel))
                ) && 
                (
                    this.DsFactoryEnabled == input.DsFactoryEnabled ||
                    (this.DsFactoryEnabled != null &&
                    this.DsFactoryEnabled.Equals(input.DsFactoryEnabled))
                ) && 
                (
                    this.DsDelayedKeepInstances == input.DsDelayedKeepInstances ||
                    (this.DsDelayedKeepInstances != null &&
                    this.DsDelayedKeepInstances.Equals(input.DsDelayedKeepInstances))
                ) && 
                (
                    this.DsLockTimeoutMilliseconds == input.DsLockTimeoutMilliseconds ||
                    (this.DsLockTimeoutMilliseconds != null &&
                    this.DsLockTimeoutMilliseconds.Equals(input.DsLockTimeoutMilliseconds))
                ) && 
                (
                    this.DsStopTimeoutMilliseconds == input.DsStopTimeoutMilliseconds ||
                    (this.DsStopTimeoutMilliseconds != null &&
                    this.DsStopTimeoutMilliseconds.Equals(input.DsStopTimeoutMilliseconds))
                ) && 
                (
                    this.DsGlobalExtender == input.DsGlobalExtender ||
                    (this.DsGlobalExtender != null &&
                    this.DsGlobalExtender.Equals(input.DsGlobalExtender))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DsLoglevel != null)
                    hashCode = hashCode * 59 + this.DsLoglevel.GetHashCode();
                if (this.DsFactoryEnabled != null)
                    hashCode = hashCode * 59 + this.DsFactoryEnabled.GetHashCode();
                if (this.DsDelayedKeepInstances != null)
                    hashCode = hashCode * 59 + this.DsDelayedKeepInstances.GetHashCode();
                if (this.DsLockTimeoutMilliseconds != null)
                    hashCode = hashCode * 59 + this.DsLockTimeoutMilliseconds.GetHashCode();
                if (this.DsStopTimeoutMilliseconds != null)
                    hashCode = hashCode * 59 + this.DsStopTimeoutMilliseconds.GetHashCode();
                if (this.DsGlobalExtender != null)
                    hashCode = hashCode * 59 + this.DsGlobalExtender.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
