/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties::OAIComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties::OAIComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties() {
    this->init();
}

OAIComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties::~OAIComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties() {
    
}

void
OAIComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties::init() {
    m_enable_scheduled_posts_search_isSet = false;
    m_number_of_minutes_isSet = false;
    m_max_search_limit_isSet = false;
}

void
OAIComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(enable_scheduled_posts_search, json[QString("enableScheduledPostsSearch")]);
    
    ::OpenAPI::fromJsonValue(number_of_minutes, json[QString("numberOfMinutes")]);
    
    ::OpenAPI::fromJsonValue(max_search_limit, json[QString("maxSearchLimit")]);
    
}

QString
OAIComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties::asJsonObject() const {
    QJsonObject obj;
	if(enable_scheduled_posts_search.isSet()){
        obj.insert(QString("enableScheduledPostsSearch"), ::OpenAPI::toJsonValue(enable_scheduled_posts_search));
    }
	if(number_of_minutes.isSet()){
        obj.insert(QString("numberOfMinutes"), ::OpenAPI::toJsonValue(number_of_minutes));
    }
	if(max_search_limit.isSet()){
        obj.insert(QString("maxSearchLimit"), ::OpenAPI::toJsonValue(max_search_limit));
    }
    return obj;
}

OAIConfigNodePropertyBoolean
OAIComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties::getEnableScheduledPostsSearch() const {
    return enable_scheduled_posts_search;
}
void
OAIComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties::setEnableScheduledPostsSearch(const OAIConfigNodePropertyBoolean &enable_scheduled_posts_search) {
    this->enable_scheduled_posts_search = enable_scheduled_posts_search;
    this->m_enable_scheduled_posts_search_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties::getNumberOfMinutes() const {
    return number_of_minutes;
}
void
OAIComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties::setNumberOfMinutes(const OAIConfigNodePropertyInteger &number_of_minutes) {
    this->number_of_minutes = number_of_minutes;
    this->m_number_of_minutes_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties::getMaxSearchLimit() const {
    return max_search_limit;
}
void
OAIComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties::setMaxSearchLimit(const OAIConfigNodePropertyInteger &max_search_limit) {
    this->max_search_limit = max_search_limit;
    this->m_max_search_limit_isSet = true;
}


bool
OAIComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(enable_scheduled_posts_search.isSet()){ isObjectUpdated = true; break;}
    
        if(number_of_minutes.isSet()){ isObjectUpdated = true; break;}
    
        if(max_search_limit.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

