<?php
/**
 * ComAdobeGraniteRepositoryImplCommitStatsConfigProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ComAdobeGraniteRepositoryImplCommitStatsConfigProperties Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ComAdobeGraniteRepositoryImplCommitStatsConfigProperties implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'comAdobeGraniteRepositoryImplCommitStatsConfigProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'enabled' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'interval_seconds' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'commits_per_interval_threshold' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'max_location_length' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'max_details_shown' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'min_details_percentage' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'thread_matchers' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'max_greedy_depth' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'greedy_stack_matchers' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'stack_filters' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'stack_matchers' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'stack_categorizers' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'stack_shorteners' => '\OpenAPI\Client\Model\ConfigNodePropertyArray'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'enabled' => null,
        'interval_seconds' => null,
        'commits_per_interval_threshold' => null,
        'max_location_length' => null,
        'max_details_shown' => null,
        'min_details_percentage' => null,
        'thread_matchers' => null,
        'max_greedy_depth' => null,
        'greedy_stack_matchers' => null,
        'stack_filters' => null,
        'stack_matchers' => null,
        'stack_categorizers' => null,
        'stack_shorteners' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'enabled' => 'enabled',
        'interval_seconds' => 'intervalSeconds',
        'commits_per_interval_threshold' => 'commitsPerIntervalThreshold',
        'max_location_length' => 'maxLocationLength',
        'max_details_shown' => 'maxDetailsShown',
        'min_details_percentage' => 'minDetailsPercentage',
        'thread_matchers' => 'threadMatchers',
        'max_greedy_depth' => 'maxGreedyDepth',
        'greedy_stack_matchers' => 'greedyStackMatchers',
        'stack_filters' => 'stackFilters',
        'stack_matchers' => 'stackMatchers',
        'stack_categorizers' => 'stackCategorizers',
        'stack_shorteners' => 'stackShorteners'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'enabled' => 'setEnabled',
        'interval_seconds' => 'setIntervalSeconds',
        'commits_per_interval_threshold' => 'setCommitsPerIntervalThreshold',
        'max_location_length' => 'setMaxLocationLength',
        'max_details_shown' => 'setMaxDetailsShown',
        'min_details_percentage' => 'setMinDetailsPercentage',
        'thread_matchers' => 'setThreadMatchers',
        'max_greedy_depth' => 'setMaxGreedyDepth',
        'greedy_stack_matchers' => 'setGreedyStackMatchers',
        'stack_filters' => 'setStackFilters',
        'stack_matchers' => 'setStackMatchers',
        'stack_categorizers' => 'setStackCategorizers',
        'stack_shorteners' => 'setStackShorteners'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'enabled' => 'getEnabled',
        'interval_seconds' => 'getIntervalSeconds',
        'commits_per_interval_threshold' => 'getCommitsPerIntervalThreshold',
        'max_location_length' => 'getMaxLocationLength',
        'max_details_shown' => 'getMaxDetailsShown',
        'min_details_percentage' => 'getMinDetailsPercentage',
        'thread_matchers' => 'getThreadMatchers',
        'max_greedy_depth' => 'getMaxGreedyDepth',
        'greedy_stack_matchers' => 'getGreedyStackMatchers',
        'stack_filters' => 'getStackFilters',
        'stack_matchers' => 'getStackMatchers',
        'stack_categorizers' => 'getStackCategorizers',
        'stack_shorteners' => 'getStackShorteners'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['interval_seconds'] = isset($data['interval_seconds']) ? $data['interval_seconds'] : null;
        $this->container['commits_per_interval_threshold'] = isset($data['commits_per_interval_threshold']) ? $data['commits_per_interval_threshold'] : null;
        $this->container['max_location_length'] = isset($data['max_location_length']) ? $data['max_location_length'] : null;
        $this->container['max_details_shown'] = isset($data['max_details_shown']) ? $data['max_details_shown'] : null;
        $this->container['min_details_percentage'] = isset($data['min_details_percentage']) ? $data['min_details_percentage'] : null;
        $this->container['thread_matchers'] = isset($data['thread_matchers']) ? $data['thread_matchers'] : null;
        $this->container['max_greedy_depth'] = isset($data['max_greedy_depth']) ? $data['max_greedy_depth'] : null;
        $this->container['greedy_stack_matchers'] = isset($data['greedy_stack_matchers']) ? $data['greedy_stack_matchers'] : null;
        $this->container['stack_filters'] = isset($data['stack_filters']) ? $data['stack_filters'] : null;
        $this->container['stack_matchers'] = isset($data['stack_matchers']) ? $data['stack_matchers'] : null;
        $this->container['stack_categorizers'] = isset($data['stack_categorizers']) ? $data['stack_categorizers'] : null;
        $this->container['stack_shorteners'] = isset($data['stack_shorteners']) ? $data['stack_shorteners'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets enabled
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $enabled enabled
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets interval_seconds
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getIntervalSeconds()
    {
        return $this->container['interval_seconds'];
    }

    /**
     * Sets interval_seconds
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $interval_seconds interval_seconds
     *
     * @return $this
     */
    public function setIntervalSeconds($interval_seconds)
    {
        $this->container['interval_seconds'] = $interval_seconds;

        return $this;
    }

    /**
     * Gets commits_per_interval_threshold
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getCommitsPerIntervalThreshold()
    {
        return $this->container['commits_per_interval_threshold'];
    }

    /**
     * Sets commits_per_interval_threshold
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $commits_per_interval_threshold commits_per_interval_threshold
     *
     * @return $this
     */
    public function setCommitsPerIntervalThreshold($commits_per_interval_threshold)
    {
        $this->container['commits_per_interval_threshold'] = $commits_per_interval_threshold;

        return $this;
    }

    /**
     * Gets max_location_length
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getMaxLocationLength()
    {
        return $this->container['max_location_length'];
    }

    /**
     * Sets max_location_length
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $max_location_length max_location_length
     *
     * @return $this
     */
    public function setMaxLocationLength($max_location_length)
    {
        $this->container['max_location_length'] = $max_location_length;

        return $this;
    }

    /**
     * Gets max_details_shown
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getMaxDetailsShown()
    {
        return $this->container['max_details_shown'];
    }

    /**
     * Sets max_details_shown
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $max_details_shown max_details_shown
     *
     * @return $this
     */
    public function setMaxDetailsShown($max_details_shown)
    {
        $this->container['max_details_shown'] = $max_details_shown;

        return $this;
    }

    /**
     * Gets min_details_percentage
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getMinDetailsPercentage()
    {
        return $this->container['min_details_percentage'];
    }

    /**
     * Sets min_details_percentage
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $min_details_percentage min_details_percentage
     *
     * @return $this
     */
    public function setMinDetailsPercentage($min_details_percentage)
    {
        $this->container['min_details_percentage'] = $min_details_percentage;

        return $this;
    }

    /**
     * Gets thread_matchers
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getThreadMatchers()
    {
        return $this->container['thread_matchers'];
    }

    /**
     * Sets thread_matchers
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $thread_matchers thread_matchers
     *
     * @return $this
     */
    public function setThreadMatchers($thread_matchers)
    {
        $this->container['thread_matchers'] = $thread_matchers;

        return $this;
    }

    /**
     * Gets max_greedy_depth
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getMaxGreedyDepth()
    {
        return $this->container['max_greedy_depth'];
    }

    /**
     * Sets max_greedy_depth
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $max_greedy_depth max_greedy_depth
     *
     * @return $this
     */
    public function setMaxGreedyDepth($max_greedy_depth)
    {
        $this->container['max_greedy_depth'] = $max_greedy_depth;

        return $this;
    }

    /**
     * Gets greedy_stack_matchers
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getGreedyStackMatchers()
    {
        return $this->container['greedy_stack_matchers'];
    }

    /**
     * Sets greedy_stack_matchers
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $greedy_stack_matchers greedy_stack_matchers
     *
     * @return $this
     */
    public function setGreedyStackMatchers($greedy_stack_matchers)
    {
        $this->container['greedy_stack_matchers'] = $greedy_stack_matchers;

        return $this;
    }

    /**
     * Gets stack_filters
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getStackFilters()
    {
        return $this->container['stack_filters'];
    }

    /**
     * Sets stack_filters
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $stack_filters stack_filters
     *
     * @return $this
     */
    public function setStackFilters($stack_filters)
    {
        $this->container['stack_filters'] = $stack_filters;

        return $this;
    }

    /**
     * Gets stack_matchers
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getStackMatchers()
    {
        return $this->container['stack_matchers'];
    }

    /**
     * Sets stack_matchers
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $stack_matchers stack_matchers
     *
     * @return $this
     */
    public function setStackMatchers($stack_matchers)
    {
        $this->container['stack_matchers'] = $stack_matchers;

        return $this;
    }

    /**
     * Gets stack_categorizers
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getStackCategorizers()
    {
        return $this->container['stack_categorizers'];
    }

    /**
     * Sets stack_categorizers
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $stack_categorizers stack_categorizers
     *
     * @return $this
     */
    public function setStackCategorizers($stack_categorizers)
    {
        $this->container['stack_categorizers'] = $stack_categorizers;

        return $this;
    }

    /**
     * Gets stack_shorteners
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getStackShorteners()
    {
        return $this->container['stack_shorteners'];
    }

    /**
     * Sets stack_shorteners
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $stack_shorteners stack_shorteners
     *
     * @return $this
     */
    public function setStackShorteners($stack_shorteners)
    {
        $this->container['stack_shorteners'] = $stack_shorteners;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


