/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrgApacheSlingDiscoveryOakConfigProperties {
  #[serde(rename = "connectorPingTimeout")]
  connector_ping_timeout: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "connectorPingInterval")]
  connector_ping_interval: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "discoveryLiteCheckInterval")]
  discovery_lite_check_interval: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "clusterSyncServiceTimeout")]
  cluster_sync_service_timeout: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "clusterSyncServiceInterval")]
  cluster_sync_service_interval: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "enableSyncToken")]
  enable_sync_token: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "minEventDelay")]
  min_event_delay: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "socketConnectTimeout")]
  socket_connect_timeout: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "soTimeout")]
  so_timeout: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "topologyConnectorUrls")]
  topology_connector_urls: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "topologyConnectorWhitelist")]
  topology_connector_whitelist: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "autoStopLocalLoopEnabled")]
  auto_stop_local_loop_enabled: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "gzipConnectorRequestsEnabled")]
  gzip_connector_requests_enabled: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "hmacEnabled")]
  hmac_enabled: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "enableEncryption")]
  enable_encryption: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "sharedKey")]
  shared_key: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "hmacSharedKeyTTL")]
  hmac_shared_key_ttl: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "backoffStandbyFactor")]
  backoff_standby_factor: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "backoffStableFactor")]
  backoff_stable_factor: Option<::models::ConfigNodePropertyString>
}

impl OrgApacheSlingDiscoveryOakConfigProperties {
  pub fn new() -> OrgApacheSlingDiscoveryOakConfigProperties {
    OrgApacheSlingDiscoveryOakConfigProperties {
      connector_ping_timeout: None,
      connector_ping_interval: None,
      discovery_lite_check_interval: None,
      cluster_sync_service_timeout: None,
      cluster_sync_service_interval: None,
      enable_sync_token: None,
      min_event_delay: None,
      socket_connect_timeout: None,
      so_timeout: None,
      topology_connector_urls: None,
      topology_connector_whitelist: None,
      auto_stop_local_loop_enabled: None,
      gzip_connector_requests_enabled: None,
      hmac_enabled: None,
      enable_encryption: None,
      shared_key: None,
      hmac_shared_key_ttl: None,
      backoff_standby_factor: None,
      backoff_stable_factor: None
    }
  }

  pub fn set_connector_ping_timeout(&mut self, connector_ping_timeout: ::models::ConfigNodePropertyInteger) {
    self.connector_ping_timeout = Some(connector_ping_timeout);
  }

  pub fn with_connector_ping_timeout(mut self, connector_ping_timeout: ::models::ConfigNodePropertyInteger) -> OrgApacheSlingDiscoveryOakConfigProperties {
    self.connector_ping_timeout = Some(connector_ping_timeout);
    self
  }

  pub fn connector_ping_timeout(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.connector_ping_timeout.as_ref()
  }

  pub fn reset_connector_ping_timeout(&mut self) {
    self.connector_ping_timeout = None;
  }

  pub fn set_connector_ping_interval(&mut self, connector_ping_interval: ::models::ConfigNodePropertyInteger) {
    self.connector_ping_interval = Some(connector_ping_interval);
  }

  pub fn with_connector_ping_interval(mut self, connector_ping_interval: ::models::ConfigNodePropertyInteger) -> OrgApacheSlingDiscoveryOakConfigProperties {
    self.connector_ping_interval = Some(connector_ping_interval);
    self
  }

  pub fn connector_ping_interval(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.connector_ping_interval.as_ref()
  }

  pub fn reset_connector_ping_interval(&mut self) {
    self.connector_ping_interval = None;
  }

  pub fn set_discovery_lite_check_interval(&mut self, discovery_lite_check_interval: ::models::ConfigNodePropertyInteger) {
    self.discovery_lite_check_interval = Some(discovery_lite_check_interval);
  }

  pub fn with_discovery_lite_check_interval(mut self, discovery_lite_check_interval: ::models::ConfigNodePropertyInteger) -> OrgApacheSlingDiscoveryOakConfigProperties {
    self.discovery_lite_check_interval = Some(discovery_lite_check_interval);
    self
  }

  pub fn discovery_lite_check_interval(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.discovery_lite_check_interval.as_ref()
  }

  pub fn reset_discovery_lite_check_interval(&mut self) {
    self.discovery_lite_check_interval = None;
  }

  pub fn set_cluster_sync_service_timeout(&mut self, cluster_sync_service_timeout: ::models::ConfigNodePropertyInteger) {
    self.cluster_sync_service_timeout = Some(cluster_sync_service_timeout);
  }

  pub fn with_cluster_sync_service_timeout(mut self, cluster_sync_service_timeout: ::models::ConfigNodePropertyInteger) -> OrgApacheSlingDiscoveryOakConfigProperties {
    self.cluster_sync_service_timeout = Some(cluster_sync_service_timeout);
    self
  }

  pub fn cluster_sync_service_timeout(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.cluster_sync_service_timeout.as_ref()
  }

  pub fn reset_cluster_sync_service_timeout(&mut self) {
    self.cluster_sync_service_timeout = None;
  }

  pub fn set_cluster_sync_service_interval(&mut self, cluster_sync_service_interval: ::models::ConfigNodePropertyInteger) {
    self.cluster_sync_service_interval = Some(cluster_sync_service_interval);
  }

  pub fn with_cluster_sync_service_interval(mut self, cluster_sync_service_interval: ::models::ConfigNodePropertyInteger) -> OrgApacheSlingDiscoveryOakConfigProperties {
    self.cluster_sync_service_interval = Some(cluster_sync_service_interval);
    self
  }

  pub fn cluster_sync_service_interval(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.cluster_sync_service_interval.as_ref()
  }

  pub fn reset_cluster_sync_service_interval(&mut self) {
    self.cluster_sync_service_interval = None;
  }

  pub fn set_enable_sync_token(&mut self, enable_sync_token: ::models::ConfigNodePropertyBoolean) {
    self.enable_sync_token = Some(enable_sync_token);
  }

  pub fn with_enable_sync_token(mut self, enable_sync_token: ::models::ConfigNodePropertyBoolean) -> OrgApacheSlingDiscoveryOakConfigProperties {
    self.enable_sync_token = Some(enable_sync_token);
    self
  }

  pub fn enable_sync_token(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.enable_sync_token.as_ref()
  }

  pub fn reset_enable_sync_token(&mut self) {
    self.enable_sync_token = None;
  }

  pub fn set_min_event_delay(&mut self, min_event_delay: ::models::ConfigNodePropertyInteger) {
    self.min_event_delay = Some(min_event_delay);
  }

  pub fn with_min_event_delay(mut self, min_event_delay: ::models::ConfigNodePropertyInteger) -> OrgApacheSlingDiscoveryOakConfigProperties {
    self.min_event_delay = Some(min_event_delay);
    self
  }

  pub fn min_event_delay(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.min_event_delay.as_ref()
  }

  pub fn reset_min_event_delay(&mut self) {
    self.min_event_delay = None;
  }

  pub fn set_socket_connect_timeout(&mut self, socket_connect_timeout: ::models::ConfigNodePropertyInteger) {
    self.socket_connect_timeout = Some(socket_connect_timeout);
  }

  pub fn with_socket_connect_timeout(mut self, socket_connect_timeout: ::models::ConfigNodePropertyInteger) -> OrgApacheSlingDiscoveryOakConfigProperties {
    self.socket_connect_timeout = Some(socket_connect_timeout);
    self
  }

  pub fn socket_connect_timeout(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.socket_connect_timeout.as_ref()
  }

  pub fn reset_socket_connect_timeout(&mut self) {
    self.socket_connect_timeout = None;
  }

  pub fn set_so_timeout(&mut self, so_timeout: ::models::ConfigNodePropertyInteger) {
    self.so_timeout = Some(so_timeout);
  }

  pub fn with_so_timeout(mut self, so_timeout: ::models::ConfigNodePropertyInteger) -> OrgApacheSlingDiscoveryOakConfigProperties {
    self.so_timeout = Some(so_timeout);
    self
  }

  pub fn so_timeout(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.so_timeout.as_ref()
  }

  pub fn reset_so_timeout(&mut self) {
    self.so_timeout = None;
  }

  pub fn set_topology_connector_urls(&mut self, topology_connector_urls: ::models::ConfigNodePropertyArray) {
    self.topology_connector_urls = Some(topology_connector_urls);
  }

  pub fn with_topology_connector_urls(mut self, topology_connector_urls: ::models::ConfigNodePropertyArray) -> OrgApacheSlingDiscoveryOakConfigProperties {
    self.topology_connector_urls = Some(topology_connector_urls);
    self
  }

  pub fn topology_connector_urls(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.topology_connector_urls.as_ref()
  }

  pub fn reset_topology_connector_urls(&mut self) {
    self.topology_connector_urls = None;
  }

  pub fn set_topology_connector_whitelist(&mut self, topology_connector_whitelist: ::models::ConfigNodePropertyArray) {
    self.topology_connector_whitelist = Some(topology_connector_whitelist);
  }

  pub fn with_topology_connector_whitelist(mut self, topology_connector_whitelist: ::models::ConfigNodePropertyArray) -> OrgApacheSlingDiscoveryOakConfigProperties {
    self.topology_connector_whitelist = Some(topology_connector_whitelist);
    self
  }

  pub fn topology_connector_whitelist(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.topology_connector_whitelist.as_ref()
  }

  pub fn reset_topology_connector_whitelist(&mut self) {
    self.topology_connector_whitelist = None;
  }

  pub fn set_auto_stop_local_loop_enabled(&mut self, auto_stop_local_loop_enabled: ::models::ConfigNodePropertyBoolean) {
    self.auto_stop_local_loop_enabled = Some(auto_stop_local_loop_enabled);
  }

  pub fn with_auto_stop_local_loop_enabled(mut self, auto_stop_local_loop_enabled: ::models::ConfigNodePropertyBoolean) -> OrgApacheSlingDiscoveryOakConfigProperties {
    self.auto_stop_local_loop_enabled = Some(auto_stop_local_loop_enabled);
    self
  }

  pub fn auto_stop_local_loop_enabled(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.auto_stop_local_loop_enabled.as_ref()
  }

  pub fn reset_auto_stop_local_loop_enabled(&mut self) {
    self.auto_stop_local_loop_enabled = None;
  }

  pub fn set_gzip_connector_requests_enabled(&mut self, gzip_connector_requests_enabled: ::models::ConfigNodePropertyBoolean) {
    self.gzip_connector_requests_enabled = Some(gzip_connector_requests_enabled);
  }

  pub fn with_gzip_connector_requests_enabled(mut self, gzip_connector_requests_enabled: ::models::ConfigNodePropertyBoolean) -> OrgApacheSlingDiscoveryOakConfigProperties {
    self.gzip_connector_requests_enabled = Some(gzip_connector_requests_enabled);
    self
  }

  pub fn gzip_connector_requests_enabled(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.gzip_connector_requests_enabled.as_ref()
  }

  pub fn reset_gzip_connector_requests_enabled(&mut self) {
    self.gzip_connector_requests_enabled = None;
  }

  pub fn set_hmac_enabled(&mut self, hmac_enabled: ::models::ConfigNodePropertyBoolean) {
    self.hmac_enabled = Some(hmac_enabled);
  }

  pub fn with_hmac_enabled(mut self, hmac_enabled: ::models::ConfigNodePropertyBoolean) -> OrgApacheSlingDiscoveryOakConfigProperties {
    self.hmac_enabled = Some(hmac_enabled);
    self
  }

  pub fn hmac_enabled(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.hmac_enabled.as_ref()
  }

  pub fn reset_hmac_enabled(&mut self) {
    self.hmac_enabled = None;
  }

  pub fn set_enable_encryption(&mut self, enable_encryption: ::models::ConfigNodePropertyBoolean) {
    self.enable_encryption = Some(enable_encryption);
  }

  pub fn with_enable_encryption(mut self, enable_encryption: ::models::ConfigNodePropertyBoolean) -> OrgApacheSlingDiscoveryOakConfigProperties {
    self.enable_encryption = Some(enable_encryption);
    self
  }

  pub fn enable_encryption(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.enable_encryption.as_ref()
  }

  pub fn reset_enable_encryption(&mut self) {
    self.enable_encryption = None;
  }

  pub fn set_shared_key(&mut self, shared_key: ::models::ConfigNodePropertyString) {
    self.shared_key = Some(shared_key);
  }

  pub fn with_shared_key(mut self, shared_key: ::models::ConfigNodePropertyString) -> OrgApacheSlingDiscoveryOakConfigProperties {
    self.shared_key = Some(shared_key);
    self
  }

  pub fn shared_key(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.shared_key.as_ref()
  }

  pub fn reset_shared_key(&mut self) {
    self.shared_key = None;
  }

  pub fn set_hmac_shared_key_ttl(&mut self, hmac_shared_key_ttl: ::models::ConfigNodePropertyInteger) {
    self.hmac_shared_key_ttl = Some(hmac_shared_key_ttl);
  }

  pub fn with_hmac_shared_key_ttl(mut self, hmac_shared_key_ttl: ::models::ConfigNodePropertyInteger) -> OrgApacheSlingDiscoveryOakConfigProperties {
    self.hmac_shared_key_ttl = Some(hmac_shared_key_ttl);
    self
  }

  pub fn hmac_shared_key_ttl(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.hmac_shared_key_ttl.as_ref()
  }

  pub fn reset_hmac_shared_key_ttl(&mut self) {
    self.hmac_shared_key_ttl = None;
  }

  pub fn set_backoff_standby_factor(&mut self, backoff_standby_factor: ::models::ConfigNodePropertyString) {
    self.backoff_standby_factor = Some(backoff_standby_factor);
  }

  pub fn with_backoff_standby_factor(mut self, backoff_standby_factor: ::models::ConfigNodePropertyString) -> OrgApacheSlingDiscoveryOakConfigProperties {
    self.backoff_standby_factor = Some(backoff_standby_factor);
    self
  }

  pub fn backoff_standby_factor(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.backoff_standby_factor.as_ref()
  }

  pub fn reset_backoff_standby_factor(&mut self) {
    self.backoff_standby_factor = None;
  }

  pub fn set_backoff_stable_factor(&mut self, backoff_stable_factor: ::models::ConfigNodePropertyString) {
    self.backoff_stable_factor = Some(backoff_stable_factor);
  }

  pub fn with_backoff_stable_factor(mut self, backoff_stable_factor: ::models::ConfigNodePropertyString) -> OrgApacheSlingDiscoveryOakConfigProperties {
    self.backoff_stable_factor = Some(backoff_stable_factor);
    self
  }

  pub fn backoff_stable_factor(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.backoff_stable_factor.as_ref()
  }

  pub fn reset_backoff_stable_factor(&mut self) {
    self.backoff_stable_factor = None;
  }

}



