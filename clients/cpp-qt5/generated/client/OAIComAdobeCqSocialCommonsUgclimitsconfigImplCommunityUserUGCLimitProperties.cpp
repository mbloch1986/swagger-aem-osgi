/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::OAIComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::OAIComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties() {
    init();
}

OAIComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::~OAIComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties() {
    this->cleanup();
}

void
OAIComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::init() {
    enable = new OAIConfigNodePropertyBoolean();
    m_enable_isSet = false;
    ugc_limit = new OAIConfigNodePropertyInteger();
    m_ugc_limit_isSet = false;
    ugc_limit_duration = new OAIConfigNodePropertyInteger();
    m_ugc_limit_duration_isSet = false;
    domains = new OAIConfigNodePropertyArray();
    m_domains_isSet = false;
    to_list = new OAIConfigNodePropertyArray();
    m_to_list_isSet = false;
}

void
OAIComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::cleanup() {
    if(enable != nullptr) { 
        delete enable;
    }
    if(ugc_limit != nullptr) { 
        delete ugc_limit;
    }
    if(ugc_limit_duration != nullptr) { 
        delete ugc_limit_duration;
    }
    if(domains != nullptr) { 
        delete domains;
    }
    if(to_list != nullptr) { 
        delete to_list;
    }
}

OAIComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties*
OAIComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&enable, pJson["enable"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&ugc_limit, pJson["UGCLimit"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&ugc_limit_duration, pJson["ugcLimitDuration"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&domains, pJson["domains"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&to_list, pJson["toList"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
}

QString
OAIComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::asJsonObject() {
    QJsonObject obj;
    if((enable != nullptr) && (enable->isSet())){
        toJsonValue(QString("enable"), enable, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((ugc_limit != nullptr) && (ugc_limit->isSet())){
        toJsonValue(QString("UGCLimit"), ugc_limit, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((ugc_limit_duration != nullptr) && (ugc_limit_duration->isSet())){
        toJsonValue(QString("ugcLimitDuration"), ugc_limit_duration, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((domains != nullptr) && (domains->isSet())){
        toJsonValue(QString("domains"), domains, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((to_list != nullptr) && (to_list->isSet())){
        toJsonValue(QString("toList"), to_list, obj, QString("OAIConfigNodePropertyArray"));
    }

    return obj;
}

OAIConfigNodePropertyBoolean*
OAIComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::getEnable() {
    return enable;
}
void
OAIComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::setEnable(OAIConfigNodePropertyBoolean* enable) {
    this->enable = enable;
    this->m_enable_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::getUgcLimit() {
    return ugc_limit;
}
void
OAIComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::setUgcLimit(OAIConfigNodePropertyInteger* ugc_limit) {
    this->ugc_limit = ugc_limit;
    this->m_ugc_limit_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::getUgcLimitDuration() {
    return ugc_limit_duration;
}
void
OAIComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::setUgcLimitDuration(OAIConfigNodePropertyInteger* ugc_limit_duration) {
    this->ugc_limit_duration = ugc_limit_duration;
    this->m_ugc_limit_duration_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::getDomains() {
    return domains;
}
void
OAIComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::setDomains(OAIConfigNodePropertyArray* domains) {
    this->domains = domains;
    this->m_domains_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::getToList() {
    return to_list;
}
void
OAIComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::setToList(OAIConfigNodePropertyArray* to_list) {
    this->to_list = to_list;
    this->m_to_list_isSet = true;
}


bool
OAIComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(enable != nullptr && enable->isSet()){ isObjectUpdated = true; break;}
        if(ugc_limit != nullptr && ugc_limit->isSet()){ isObjectUpdated = true; break;}
        if(ugc_limit_duration != nullptr && ugc_limit_duration->isSet()){ isObjectUpdated = true; break;}
        if(domains != nullptr && domains->isSet()){ isObjectUpdated = true; break;}
        if(to_list != nullptr && to_list->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

