/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingCommonsLogLogManagerFactoryConfigProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::OAIOrgApacheSlingCommonsLogLogManagerFactoryConfigProperties(QString json) {
    this->fromJson(json);
}

OAIOrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::OAIOrgApacheSlingCommonsLogLogManagerFactoryConfigProperties() {
    this->init();
}

OAIOrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::~OAIOrgApacheSlingCommonsLogLogManagerFactoryConfigProperties() {
    
}

void
OAIOrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::init() {
    m_org_apache_sling_commons_log_level_isSet = false;
    m_org_apache_sling_commons_log_file_isSet = false;
    m_org_apache_sling_commons_log_pattern_isSet = false;
    m_org_apache_sling_commons_log_names_isSet = false;
    m_org_apache_sling_commons_log_additiv_isSet = false;
}

void
OAIOrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIOrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(org_apache_sling_commons_log_level, json[QString("org.apache.sling.commons.log.level")]);
    
    ::OpenAPI::fromJsonValue(org_apache_sling_commons_log_file, json[QString("org.apache.sling.commons.log.file")]);
    
    ::OpenAPI::fromJsonValue(org_apache_sling_commons_log_pattern, json[QString("org.apache.sling.commons.log.pattern")]);
    
    ::OpenAPI::fromJsonValue(org_apache_sling_commons_log_names, json[QString("org.apache.sling.commons.log.names")]);
    
    ::OpenAPI::fromJsonValue(org_apache_sling_commons_log_additiv, json[QString("org.apache.sling.commons.log.additiv")]);
    
}

QString
OAIOrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::asJsonObject() const {
    QJsonObject obj;
	if(org_apache_sling_commons_log_level.isSet()){
        obj.insert(QString("org.apache.sling.commons.log.level"), ::OpenAPI::toJsonValue(org_apache_sling_commons_log_level));
    }
	if(org_apache_sling_commons_log_file.isSet()){
        obj.insert(QString("org.apache.sling.commons.log.file"), ::OpenAPI::toJsonValue(org_apache_sling_commons_log_file));
    }
	if(org_apache_sling_commons_log_pattern.isSet()){
        obj.insert(QString("org.apache.sling.commons.log.pattern"), ::OpenAPI::toJsonValue(org_apache_sling_commons_log_pattern));
    }
	if(org_apache_sling_commons_log_names.isSet()){
        obj.insert(QString("org.apache.sling.commons.log.names"), ::OpenAPI::toJsonValue(org_apache_sling_commons_log_names));
    }
	if(org_apache_sling_commons_log_additiv.isSet()){
        obj.insert(QString("org.apache.sling.commons.log.additiv"), ::OpenAPI::toJsonValue(org_apache_sling_commons_log_additiv));
    }
    return obj;
}

OAIConfigNodePropertyDropDown
OAIOrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::getOrgApacheSlingCommonsLogLevel() const {
    return org_apache_sling_commons_log_level;
}
void
OAIOrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::setOrgApacheSlingCommonsLogLevel(const OAIConfigNodePropertyDropDown &org_apache_sling_commons_log_level) {
    this->org_apache_sling_commons_log_level = org_apache_sling_commons_log_level;
    this->m_org_apache_sling_commons_log_level_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::getOrgApacheSlingCommonsLogFile() const {
    return org_apache_sling_commons_log_file;
}
void
OAIOrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::setOrgApacheSlingCommonsLogFile(const OAIConfigNodePropertyString &org_apache_sling_commons_log_file) {
    this->org_apache_sling_commons_log_file = org_apache_sling_commons_log_file;
    this->m_org_apache_sling_commons_log_file_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::getOrgApacheSlingCommonsLogPattern() const {
    return org_apache_sling_commons_log_pattern;
}
void
OAIOrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::setOrgApacheSlingCommonsLogPattern(const OAIConfigNodePropertyString &org_apache_sling_commons_log_pattern) {
    this->org_apache_sling_commons_log_pattern = org_apache_sling_commons_log_pattern;
    this->m_org_apache_sling_commons_log_pattern_isSet = true;
}

OAIConfigNodePropertyArray
OAIOrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::getOrgApacheSlingCommonsLogNames() const {
    return org_apache_sling_commons_log_names;
}
void
OAIOrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::setOrgApacheSlingCommonsLogNames(const OAIConfigNodePropertyArray &org_apache_sling_commons_log_names) {
    this->org_apache_sling_commons_log_names = org_apache_sling_commons_log_names;
    this->m_org_apache_sling_commons_log_names_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::getOrgApacheSlingCommonsLogAdditiv() const {
    return org_apache_sling_commons_log_additiv;
}
void
OAIOrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::setOrgApacheSlingCommonsLogAdditiv(const OAIConfigNodePropertyBoolean &org_apache_sling_commons_log_additiv) {
    this->org_apache_sling_commons_log_additiv = org_apache_sling_commons_log_additiv;
    this->m_org_apache_sling_commons_log_additiv_isSet = true;
}


bool
OAIOrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(org_apache_sling_commons_log_level.isSet()){ isObjectUpdated = true; break;}
    
        if(org_apache_sling_commons_log_file.isSet()){ isObjectUpdated = true; break;}
    
        if(org_apache_sling_commons_log_pattern.isSet()){ isObjectUpdated = true; break;}
    
        if(org_apache_sling_commons_log_names.isSet()){ isObjectUpdated = true; break;}
    
        if(org_apache_sling_commons_log_additiv.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

