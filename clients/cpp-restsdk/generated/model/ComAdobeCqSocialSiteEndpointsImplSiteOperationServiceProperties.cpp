/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceProperties::ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceProperties()
{
    m_FieldWhitelistIsSet = false;
    m_SitePathFiltersIsSet = false;
    m_SitePackageGroupIsSet = false;
}

ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceProperties::~ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceProperties()
{
}

void ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_FieldWhitelistIsSet)
    {
        val[utility::conversions::to_string_t("fieldWhitelist")] = ModelBase::toJson(m_FieldWhitelist);
    }
    if(m_SitePathFiltersIsSet)
    {
        val[utility::conversions::to_string_t("sitePathFilters")] = ModelBase::toJson(m_SitePathFilters);
    }
    if(m_SitePackageGroupIsSet)
    {
        val[utility::conversions::to_string_t("sitePackageGroup")] = ModelBase::toJson(m_SitePackageGroup);
    }

    return val;
}

void ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("fieldWhitelist")))
    {
        if(!val[utility::conversions::to_string_t("fieldWhitelist")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("fieldWhitelist")]);
            setFieldWhitelist( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sitePathFilters")))
    {
        if(!val[utility::conversions::to_string_t("sitePathFilters")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("sitePathFilters")]);
            setSitePathFilters( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sitePackageGroup")))
    {
        if(!val[utility::conversions::to_string_t("sitePackageGroup")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("sitePackageGroup")]);
            setSitePackageGroup( newItem );
        }
    }
}

void ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_FieldWhitelistIsSet)
    {
        if (m_FieldWhitelist.get())
        {
            m_FieldWhitelist->toMultipart(multipart, utility::conversions::to_string_t("fieldWhitelist."));
        }
    }
    if(m_SitePathFiltersIsSet)
    {
        if (m_SitePathFilters.get())
        {
            m_SitePathFilters->toMultipart(multipart, utility::conversions::to_string_t("sitePathFilters."));
        }
    }
    if(m_SitePackageGroupIsSet)
    {
        if (m_SitePackageGroup.get())
        {
            m_SitePackageGroup->toMultipart(multipart, utility::conversions::to_string_t("sitePackageGroup."));
        }
    }
}

void ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("fieldWhitelist")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("fieldWhitelist")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("fieldWhitelist."));
            setFieldWhitelist( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sitePathFilters")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("sitePathFilters")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("sitePathFilters."));
            setSitePathFilters( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sitePackageGroup")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("sitePackageGroup")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("sitePackageGroup."));
            setSitePackageGroup( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceProperties::getFieldWhitelist() const
{
    return m_FieldWhitelist;
}


void ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceProperties::setFieldWhitelist(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_FieldWhitelist = value;
    m_FieldWhitelistIsSet = true;
}
bool ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceProperties::fieldWhitelistIsSet() const
{
    return m_FieldWhitelistIsSet;
}

void ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceProperties::unsetFieldWhitelist()
{
    m_FieldWhitelistIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceProperties::getSitePathFilters() const
{
    return m_SitePathFilters;
}


void ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceProperties::setSitePathFilters(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_SitePathFilters = value;
    m_SitePathFiltersIsSet = true;
}
bool ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceProperties::sitePathFiltersIsSet() const
{
    return m_SitePathFiltersIsSet;
}

void ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceProperties::unsetSitePathFilters()
{
    m_SitePathFiltersIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceProperties::getSitePackageGroup() const
{
    return m_SitePackageGroup;
}


void ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceProperties::setSitePackageGroup(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_SitePackageGroup = value;
    m_SitePackageGroupIsSet = true;
}
bool ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceProperties::sitePackageGroupIsSet() const
{
    return m_SitePackageGroupIsSet;
}

void ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceProperties::unsetSitePackageGroup()
{
    m_SitePackageGroupIsSet = false;
}

}
}
}
}

