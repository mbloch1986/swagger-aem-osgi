/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties::ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties()
{
    m_CodeupgradetasksIsSet = false;
    m_CodeupgradetaskfiltersIsSet = false;
    
}

ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties::~ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties()
{
}

void ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_CodeupgradetasksIsSet)
    {
        val["codeupgradetasks"] = ModelBase::toJson(m_Codeupgradetasks);
    }
    if(m_CodeupgradetaskfiltersIsSet)
    {
        val["codeupgradetaskfilters"] = ModelBase::toJson(m_Codeupgradetaskfilters);
    }
    

    return val;
}

void ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties::fromJson(nlohmann::json& val)
{
    if(val.find("codeupgradetasks") != val.end())
    {
        if(!val["codeupgradetasks"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["codeupgradetasks"]);
            setCodeupgradetasks( newItem );
        }
        
    }
    if(val.find("codeupgradetaskfilters") != val.end())
    {
        if(!val["codeupgradetaskfilters"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["codeupgradetaskfilters"]);
            setCodeupgradetaskfilters( newItem );
        }
        
    }
    
}


ConfigNodePropertyArray ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties::getCodeupgradetasks() const
{
    return m_Codeupgradetasks;
}
void ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties::setCodeupgradetasks(ConfigNodePropertyArray const& value)
{
    m_Codeupgradetasks = value;
    m_CodeupgradetasksIsSet = true;
}
bool ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties::codeupgradetasksIsSet() const
{
    return m_CodeupgradetasksIsSet;
}
void ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties::unsetCodeupgradetasks()
{
    m_CodeupgradetasksIsSet = false;
}
ConfigNodePropertyArray ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties::getCodeupgradetaskfilters() const
{
    return m_Codeupgradetaskfilters;
}
void ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties::setCodeupgradetaskfilters(ConfigNodePropertyArray const& value)
{
    m_Codeupgradetaskfilters = value;
    m_CodeupgradetaskfiltersIsSet = true;
}
bool ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties::codeupgradetaskfiltersIsSet() const
{
    return m_CodeupgradetaskfiltersIsSet;
}
void ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties::unsetCodeupgradetaskfilters()
{
    m_CodeupgradetaskfiltersIsSet = false;
}

}
}
}
}

