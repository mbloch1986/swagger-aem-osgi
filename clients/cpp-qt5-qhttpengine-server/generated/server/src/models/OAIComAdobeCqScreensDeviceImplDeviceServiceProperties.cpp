/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqScreensDeviceImplDeviceServiceProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqScreensDeviceImplDeviceServiceProperties::OAIComAdobeCqScreensDeviceImplDeviceServiceProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeCqScreensDeviceImplDeviceServiceProperties::OAIComAdobeCqScreensDeviceImplDeviceServiceProperties() {
    this->init();
}

OAIComAdobeCqScreensDeviceImplDeviceServiceProperties::~OAIComAdobeCqScreensDeviceImplDeviceServiceProperties() {
    
}

void
OAIComAdobeCqScreensDeviceImplDeviceServiceProperties::init() {
    m_com_adobe_aem_screens_player_pingfrequency_isSet = false;
    m_com_adobe_aem_screens_device_pasword_specialchars_isSet = false;
    m_com_adobe_aem_screens_device_pasword_minlowercasechars_isSet = false;
    m_com_adobe_aem_screens_device_pasword_minuppercasechars_isSet = false;
    m_com_adobe_aem_screens_device_pasword_minnumberchars_isSet = false;
    m_com_adobe_aem_screens_device_pasword_minspecialchars_isSet = false;
    m_com_adobe_aem_screens_device_pasword_minlength_isSet = false;
}

void
OAIComAdobeCqScreensDeviceImplDeviceServiceProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeCqScreensDeviceImplDeviceServiceProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(com_adobe_aem_screens_player_pingfrequency, json[QString("com.adobe.aem.screens.player.pingfrequency")]);
    
    ::OpenAPI::fromJsonValue(com_adobe_aem_screens_device_pasword_specialchars, json[QString("com.adobe.aem.screens.device.pasword.specialchars")]);
    
    ::OpenAPI::fromJsonValue(com_adobe_aem_screens_device_pasword_minlowercasechars, json[QString("com.adobe.aem.screens.device.pasword.minlowercasechars")]);
    
    ::OpenAPI::fromJsonValue(com_adobe_aem_screens_device_pasword_minuppercasechars, json[QString("com.adobe.aem.screens.device.pasword.minuppercasechars")]);
    
    ::OpenAPI::fromJsonValue(com_adobe_aem_screens_device_pasword_minnumberchars, json[QString("com.adobe.aem.screens.device.pasword.minnumberchars")]);
    
    ::OpenAPI::fromJsonValue(com_adobe_aem_screens_device_pasword_minspecialchars, json[QString("com.adobe.aem.screens.device.pasword.minspecialchars")]);
    
    ::OpenAPI::fromJsonValue(com_adobe_aem_screens_device_pasword_minlength, json[QString("com.adobe.aem.screens.device.pasword.minlength")]);
    
}

QString
OAIComAdobeCqScreensDeviceImplDeviceServiceProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqScreensDeviceImplDeviceServiceProperties::asJsonObject() const {
    QJsonObject obj;
	if(com_adobe_aem_screens_player_pingfrequency.isSet()){
        obj.insert(QString("com.adobe.aem.screens.player.pingfrequency"), ::OpenAPI::toJsonValue(com_adobe_aem_screens_player_pingfrequency));
    }
	if(com_adobe_aem_screens_device_pasword_specialchars.isSet()){
        obj.insert(QString("com.adobe.aem.screens.device.pasword.specialchars"), ::OpenAPI::toJsonValue(com_adobe_aem_screens_device_pasword_specialchars));
    }
	if(com_adobe_aem_screens_device_pasword_minlowercasechars.isSet()){
        obj.insert(QString("com.adobe.aem.screens.device.pasword.minlowercasechars"), ::OpenAPI::toJsonValue(com_adobe_aem_screens_device_pasword_minlowercasechars));
    }
	if(com_adobe_aem_screens_device_pasword_minuppercasechars.isSet()){
        obj.insert(QString("com.adobe.aem.screens.device.pasword.minuppercasechars"), ::OpenAPI::toJsonValue(com_adobe_aem_screens_device_pasword_minuppercasechars));
    }
	if(com_adobe_aem_screens_device_pasword_minnumberchars.isSet()){
        obj.insert(QString("com.adobe.aem.screens.device.pasword.minnumberchars"), ::OpenAPI::toJsonValue(com_adobe_aem_screens_device_pasword_minnumberchars));
    }
	if(com_adobe_aem_screens_device_pasword_minspecialchars.isSet()){
        obj.insert(QString("com.adobe.aem.screens.device.pasword.minspecialchars"), ::OpenAPI::toJsonValue(com_adobe_aem_screens_device_pasword_minspecialchars));
    }
	if(com_adobe_aem_screens_device_pasword_minlength.isSet()){
        obj.insert(QString("com.adobe.aem.screens.device.pasword.minlength"), ::OpenAPI::toJsonValue(com_adobe_aem_screens_device_pasword_minlength));
    }
    return obj;
}

OAIConfigNodePropertyInteger
OAIComAdobeCqScreensDeviceImplDeviceServiceProperties::getComAdobeAemScreensPlayerPingfrequency() const {
    return com_adobe_aem_screens_player_pingfrequency;
}
void
OAIComAdobeCqScreensDeviceImplDeviceServiceProperties::setComAdobeAemScreensPlayerPingfrequency(const OAIConfigNodePropertyInteger &com_adobe_aem_screens_player_pingfrequency) {
    this->com_adobe_aem_screens_player_pingfrequency = com_adobe_aem_screens_player_pingfrequency;
    this->m_com_adobe_aem_screens_player_pingfrequency_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeCqScreensDeviceImplDeviceServiceProperties::getComAdobeAemScreensDevicePaswordSpecialchars() const {
    return com_adobe_aem_screens_device_pasword_specialchars;
}
void
OAIComAdobeCqScreensDeviceImplDeviceServiceProperties::setComAdobeAemScreensDevicePaswordSpecialchars(const OAIConfigNodePropertyString &com_adobe_aem_screens_device_pasword_specialchars) {
    this->com_adobe_aem_screens_device_pasword_specialchars = com_adobe_aem_screens_device_pasword_specialchars;
    this->m_com_adobe_aem_screens_device_pasword_specialchars_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeCqScreensDeviceImplDeviceServiceProperties::getComAdobeAemScreensDevicePaswordMinlowercasechars() const {
    return com_adobe_aem_screens_device_pasword_minlowercasechars;
}
void
OAIComAdobeCqScreensDeviceImplDeviceServiceProperties::setComAdobeAemScreensDevicePaswordMinlowercasechars(const OAIConfigNodePropertyInteger &com_adobe_aem_screens_device_pasword_minlowercasechars) {
    this->com_adobe_aem_screens_device_pasword_minlowercasechars = com_adobe_aem_screens_device_pasword_minlowercasechars;
    this->m_com_adobe_aem_screens_device_pasword_minlowercasechars_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeCqScreensDeviceImplDeviceServiceProperties::getComAdobeAemScreensDevicePaswordMinuppercasechars() const {
    return com_adobe_aem_screens_device_pasword_minuppercasechars;
}
void
OAIComAdobeCqScreensDeviceImplDeviceServiceProperties::setComAdobeAemScreensDevicePaswordMinuppercasechars(const OAIConfigNodePropertyInteger &com_adobe_aem_screens_device_pasword_minuppercasechars) {
    this->com_adobe_aem_screens_device_pasword_minuppercasechars = com_adobe_aem_screens_device_pasword_minuppercasechars;
    this->m_com_adobe_aem_screens_device_pasword_minuppercasechars_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeCqScreensDeviceImplDeviceServiceProperties::getComAdobeAemScreensDevicePaswordMinnumberchars() const {
    return com_adobe_aem_screens_device_pasword_minnumberchars;
}
void
OAIComAdobeCqScreensDeviceImplDeviceServiceProperties::setComAdobeAemScreensDevicePaswordMinnumberchars(const OAIConfigNodePropertyInteger &com_adobe_aem_screens_device_pasword_minnumberchars) {
    this->com_adobe_aem_screens_device_pasword_minnumberchars = com_adobe_aem_screens_device_pasword_minnumberchars;
    this->m_com_adobe_aem_screens_device_pasword_minnumberchars_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeCqScreensDeviceImplDeviceServiceProperties::getComAdobeAemScreensDevicePaswordMinspecialchars() const {
    return com_adobe_aem_screens_device_pasword_minspecialchars;
}
void
OAIComAdobeCqScreensDeviceImplDeviceServiceProperties::setComAdobeAemScreensDevicePaswordMinspecialchars(const OAIConfigNodePropertyInteger &com_adobe_aem_screens_device_pasword_minspecialchars) {
    this->com_adobe_aem_screens_device_pasword_minspecialchars = com_adobe_aem_screens_device_pasword_minspecialchars;
    this->m_com_adobe_aem_screens_device_pasword_minspecialchars_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeCqScreensDeviceImplDeviceServiceProperties::getComAdobeAemScreensDevicePaswordMinlength() const {
    return com_adobe_aem_screens_device_pasword_minlength;
}
void
OAIComAdobeCqScreensDeviceImplDeviceServiceProperties::setComAdobeAemScreensDevicePaswordMinlength(const OAIConfigNodePropertyInteger &com_adobe_aem_screens_device_pasword_minlength) {
    this->com_adobe_aem_screens_device_pasword_minlength = com_adobe_aem_screens_device_pasword_minlength;
    this->m_com_adobe_aem_screens_device_pasword_minlength_isSet = true;
}


bool
OAIComAdobeCqScreensDeviceImplDeviceServiceProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(com_adobe_aem_screens_player_pingfrequency.isSet()){ isObjectUpdated = true; break;}
    
        if(com_adobe_aem_screens_device_pasword_specialchars.isSet()){ isObjectUpdated = true; break;}
    
        if(com_adobe_aem_screens_device_pasword_minlowercasechars.isSet()){ isObjectUpdated = true; break;}
    
        if(com_adobe_aem_screens_device_pasword_minuppercasechars.isSet()){ isObjectUpdated = true; break;}
    
        if(com_adobe_aem_screens_device_pasword_minnumberchars.isSet()){ isObjectUpdated = true; break;}
    
        if(com_adobe_aem_screens_device_pasword_minspecialchars.isSet()){ isObjectUpdated = true; break;}
    
        if(com_adobe_aem_screens_device_pasword_minlength.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

