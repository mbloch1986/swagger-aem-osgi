/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuProperties::OAIComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuProperties::OAIComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuProperties() {
    init();
}

OAIComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuProperties::~OAIComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuProperties() {
    this->cleanup();
}

void
OAIComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuProperties::init() {
    name = new OAIConfigNodePropertyString();
    m_name_isSet = false;
    service_name = new OAIConfigNodePropertyString();
    m_service_name_isSet = false;
    user_id = new OAIConfigNodePropertyString();
    m_user_id_isSet = false;
    access_token_provider_target = new OAIConfigNodePropertyString();
    m_access_token_provider_target_isSet = false;
}

void
OAIComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuProperties::cleanup() {
    if(name != nullptr) { 
        delete name;
    }
    if(service_name != nullptr) { 
        delete service_name;
    }
    if(user_id != nullptr) { 
        delete user_id;
    }
    if(access_token_provider_target != nullptr) { 
        delete access_token_provider_target;
    }
}

OAIComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuProperties*
OAIComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&name, pJson["name"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&service_name, pJson["serviceName"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&user_id, pJson["userId"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&access_token_provider_target, pJson["accessTokenProvider.target"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
}

QString
OAIComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuProperties::asJsonObject() {
    QJsonObject obj;
    if((name != nullptr) && (name->isSet())){
        toJsonValue(QString("name"), name, obj, QString("OAIConfigNodePropertyString"));
    }
    if((service_name != nullptr) && (service_name->isSet())){
        toJsonValue(QString("serviceName"), service_name, obj, QString("OAIConfigNodePropertyString"));
    }
    if((user_id != nullptr) && (user_id->isSet())){
        toJsonValue(QString("userId"), user_id, obj, QString("OAIConfigNodePropertyString"));
    }
    if((access_token_provider_target != nullptr) && (access_token_provider_target->isSet())){
        toJsonValue(QString("accessTokenProvider.target"), access_token_provider_target, obj, QString("OAIConfigNodePropertyString"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuProperties::getName() {
    return name;
}
void
OAIComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuProperties::setName(OAIConfigNodePropertyString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuProperties::getServiceName() {
    return service_name;
}
void
OAIComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuProperties::setServiceName(OAIConfigNodePropertyString* service_name) {
    this->service_name = service_name;
    this->m_service_name_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuProperties::getUserId() {
    return user_id;
}
void
OAIComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuProperties::setUserId(OAIConfigNodePropertyString* user_id) {
    this->user_id = user_id;
    this->m_user_id_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuProperties::getAccessTokenProviderTarget() {
    return access_token_provider_target;
}
void
OAIComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuProperties::setAccessTokenProviderTarget(OAIConfigNodePropertyString* access_token_provider_target) {
    this->access_token_provider_target = access_token_provider_target;
    this->m_access_token_provider_target_isSet = true;
}


bool
OAIComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(name != nullptr && name->isSet()){ isObjectUpdated = true; break;}
        if(service_name != nullptr && service_name->isSet()){ isObjectUpdated = true; break;}
        if(user_id != nullptr && user_id->isSet()){ isObjectUpdated = true; break;}
        if(access_token_provider_target != nullptr && access_token_provider_target->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

