/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties::OAIOrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties::OAIOrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties() {
    init();
}

OAIOrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties::~OAIOrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties() {
    this->cleanup();
}

void
OAIOrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties::init() {
    alias = new OAIConfigNodePropertyString();
    m_alias_isSet = false;
    dav_create_absolute_uri = new OAIConfigNodePropertyBoolean();
    m_dav_create_absolute_uri_isSet = false;
    dav_protectedhandlers = new OAIConfigNodePropertyString();
    m_dav_protectedhandlers_isSet = false;
}

void
OAIOrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties::cleanup() {
    if(alias != nullptr) { 
        delete alias;
    }
    if(dav_create_absolute_uri != nullptr) { 
        delete dav_create_absolute_uri;
    }
    if(dav_protectedhandlers != nullptr) { 
        delete dav_protectedhandlers;
    }
}

OAIOrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties*
OAIOrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&alias, pJson["alias"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&dav_create_absolute_uri, pJson["dav.create-absolute-uri"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&dav_protectedhandlers, pJson["dav.protectedhandlers"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
}

QString
OAIOrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties::asJsonObject() {
    QJsonObject obj;
    if((alias != nullptr) && (alias->isSet())){
        toJsonValue(QString("alias"), alias, obj, QString("OAIConfigNodePropertyString"));
    }
    if((dav_create_absolute_uri != nullptr) && (dav_create_absolute_uri->isSet())){
        toJsonValue(QString("dav.create-absolute-uri"), dav_create_absolute_uri, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((dav_protectedhandlers != nullptr) && (dav_protectedhandlers->isSet())){
        toJsonValue(QString("dav.protectedhandlers"), dav_protectedhandlers, obj, QString("OAIConfigNodePropertyString"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties::getAlias() {
    return alias;
}
void
OAIOrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties::setAlias(OAIConfigNodePropertyString* alias) {
    this->alias = alias;
    this->m_alias_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties::getDavCreateAbsoluteUri() {
    return dav_create_absolute_uri;
}
void
OAIOrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties::setDavCreateAbsoluteUri(OAIConfigNodePropertyBoolean* dav_create_absolute_uri) {
    this->dav_create_absolute_uri = dav_create_absolute_uri;
    this->m_dav_create_absolute_uri_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties::getDavProtectedhandlers() {
    return dav_protectedhandlers;
}
void
OAIOrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties::setDavProtectedhandlers(OAIConfigNodePropertyString* dav_protectedhandlers) {
    this->dav_protectedhandlers = dav_protectedhandlers;
    this->m_dav_protectedhandlers_isSet = true;
}


bool
OAIOrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(alias != nullptr && alias->isSet()){ isObjectUpdated = true; break;}
        if(dav_create_absolute_uri != nullptr && dav_create_absolute_uri->isSet()){ isObjectUpdated = true; break;}
        if(dav_protectedhandlers != nullptr && dav_protectedhandlers->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

