/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties
    : public ModelBase
{
public:
    OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties();
    virtual ~OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getRepositoryHome() const;
    bool repositoryHomeIsSet() const;
    void unsetRepository_home();
    void setRepositoryHome(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getTarmkMode() const;
    bool tarmkModeIsSet() const;
    void unsetTarmk_mode();
    void setTarmkMode(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getTarmkSize() const;
    bool tarmkSizeIsSet() const;
    void unsetTarmk_size();
    void setTarmkSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getSegmentCacheSize() const;
    bool segmentCacheSizeIsSet() const;
    void unsetSegmentCache_size();
    void setSegmentCacheSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getStringCacheSize() const;
    bool stringCacheSizeIsSet() const;
    void unsetStringCache_size();
    void setStringCacheSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getTemplateCacheSize() const;
    bool templateCacheSizeIsSet() const;
    void unsetTemplateCache_size();
    void setTemplateCacheSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getStringDeduplicationCacheSize() const;
    bool stringDeduplicationCacheSizeIsSet() const;
    void unsetStringDeduplicationCache_size();
    void setStringDeduplicationCacheSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getTemplateDeduplicationCacheSize() const;
    bool templateDeduplicationCacheSizeIsSet() const;
    void unsetTemplateDeduplicationCache_size();
    void setTemplateDeduplicationCacheSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getNodeDeduplicationCacheSize() const;
    bool nodeDeduplicationCacheSizeIsSet() const;
    void unsetNodeDeduplicationCache_size();
    void setNodeDeduplicationCacheSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getPauseCompaction() const;
    bool pauseCompactionIsSet() const;
    void unsetPauseCompaction();
    void setPauseCompaction(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getCompactionRetryCount() const;
    bool compactionRetryCountIsSet() const;
    void unsetCompaction_retryCount();
    void setCompactionRetryCount(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getCompactionForceTimeout() const;
    bool compactionForceTimeoutIsSet() const;
    void unsetCompaction_force_timeout();
    void setCompactionForceTimeout(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getCompactionSizeDeltaEstimation() const;
    bool compactionSizeDeltaEstimationIsSet() const;
    void unsetCompaction_sizeDeltaEstimation();
    void setCompactionSizeDeltaEstimation(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getCompactionDisableEstimation() const;
    bool compactionDisableEstimationIsSet() const;
    void unsetCompaction_disableEstimation();
    void setCompactionDisableEstimation(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getCompactionRetainedGenerations() const;
    bool compactionRetainedGenerationsIsSet() const;
    void unsetCompaction_retainedGenerations();
    void setCompactionRetainedGenerations(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getCompactionMemoryThreshold() const;
    bool compactionMemoryThresholdIsSet() const;
    void unsetCompaction_memoryThreshold();
    void setCompactionMemoryThreshold(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getCompactionProgressLog() const;
    bool compactionProgressLogIsSet() const;
    void unsetCompaction_progressLog();
    void setCompactionProgressLog(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getStandby() const;
    bool standbyIsSet() const;
    void unsetStandby();
    void setStandby(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getCustomBlobStore() const;
    bool customBlobStoreIsSet() const;
    void unsetCustomBlobStore();
    void setCustomBlobStore(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getCustomSegmentStore() const;
    bool customSegmentStoreIsSet() const;
    void unsetCustomSegmentStore();
    void setCustomSegmentStore(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getSplitPersistence() const;
    bool splitPersistenceIsSet() const;
    void unsetSplitPersistence();
    void setSplitPersistence(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getRepositoryBackupDir() const;
    bool repositoryBackupDirIsSet() const;
    void unsetRepository_backup_dir();
    void setRepositoryBackupDir(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getBlobGcMaxAgeInSecs() const;
    bool blobGcMaxAgeInSecsIsSet() const;
    void unsetBlobGcMaxAgeInSecs();
    void setBlobGcMaxAgeInSecs(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getBlobTrackSnapshotIntervalInSecs() const;
    bool blobTrackSnapshotIntervalInSecsIsSet() const;
    void unsetBlobTrackSnapshotIntervalInSecs();
    void setBlobTrackSnapshotIntervalInSecs(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getRole() const;
    bool roleIsSet() const;
    void unsetRole();
    void setRole(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getRegisterDescriptors() const;
    bool registerDescriptorsIsSet() const;
    void unsetRegisterDescriptors();
    void setRegisterDescriptors(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getDispatchChanges() const;
    bool dispatchChangesIsSet() const;
    void unsetDispatchChanges();
    void setDispatchChanges(std::shared_ptr<ConfigNodePropertyBoolean> value);

protected:
    std::shared_ptr<ConfigNodePropertyString> m_Repository_home;
    bool m_Repository_homeIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Tarmk_mode;
    bool m_Tarmk_modeIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Tarmk_size;
    bool m_Tarmk_sizeIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_SegmentCache_size;
    bool m_SegmentCache_sizeIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_StringCache_size;
    bool m_StringCache_sizeIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_TemplateCache_size;
    bool m_TemplateCache_sizeIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_StringDeduplicationCache_size;
    bool m_StringDeduplicationCache_sizeIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_TemplateDeduplicationCache_size;
    bool m_TemplateDeduplicationCache_sizeIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_NodeDeduplicationCache_size;
    bool m_NodeDeduplicationCache_sizeIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_PauseCompaction;
    bool m_PauseCompactionIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Compaction_retryCount;
    bool m_Compaction_retryCountIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Compaction_force_timeout;
    bool m_Compaction_force_timeoutIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Compaction_sizeDeltaEstimation;
    bool m_Compaction_sizeDeltaEstimationIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Compaction_disableEstimation;
    bool m_Compaction_disableEstimationIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Compaction_retainedGenerations;
    bool m_Compaction_retainedGenerationsIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Compaction_memoryThreshold;
    bool m_Compaction_memoryThresholdIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Compaction_progressLog;
    bool m_Compaction_progressLogIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Standby;
    bool m_StandbyIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_CustomBlobStore;
    bool m_CustomBlobStoreIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_CustomSegmentStore;
    bool m_CustomSegmentStoreIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_SplitPersistence;
    bool m_SplitPersistenceIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Repository_backup_dir;
    bool m_Repository_backup_dirIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_BlobGcMaxAgeInSecs;
    bool m_BlobGcMaxAgeInSecsIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_BlobTrackSnapshotIntervalInSecs;
    bool m_BlobTrackSnapshotIntervalInSecsIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Role;
    bool m_RoleIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_RegisterDescriptors;
    bool m_RegisterDescriptorsIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_DispatchChanges;
    bool m_DispatchChangesIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties_H_ */
