/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties::OAIOrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties::OAIOrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties() {
    init();
}

OAIOrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties::~OAIOrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties() {
    this->cleanup();
}

void
OAIOrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties::init() {
    name = new OAIConfigNodePropertyString();
    m_name_isSet = false;
    package_builder_target = new OAIConfigNodePropertyString();
    m_package_builder_target_isSet = false;
}

void
OAIOrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties::cleanup() {
    if(name != nullptr) { 
        delete name;
    }
    if(package_builder_target != nullptr) { 
        delete package_builder_target;
    }
}

OAIOrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties*
OAIOrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&name, pJson["name"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&package_builder_target, pJson["packageBuilder.target"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
}

QString
OAIOrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties::asJsonObject() {
    QJsonObject obj;
    if((name != nullptr) && (name->isSet())){
        toJsonValue(QString("name"), name, obj, QString("OAIConfigNodePropertyString"));
    }
    if((package_builder_target != nullptr) && (package_builder_target->isSet())){
        toJsonValue(QString("packageBuilder.target"), package_builder_target, obj, QString("OAIConfigNodePropertyString"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties::getName() {
    return name;
}
void
OAIOrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties::setName(OAIConfigNodePropertyString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties::getPackageBuilderTarget() {
    return package_builder_target;
}
void
OAIOrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties::setPackageBuilderTarget(OAIConfigNodePropertyString* package_builder_target) {
    this->package_builder_target = package_builder_target;
    this->m_package_builder_target_isSet = true;
}


bool
OAIOrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(name != nullptr && name->isSet()){ isObjectUpdated = true; break;}
        if(package_builder_target != nullptr && package_builder_target->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

