/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComDayCqPollingImporterImplPollingImporterImplProperties {
  #[serde(rename = "importer.min.interval")]
  importer_min_interval: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "importer.user")]
  importer_user: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "exclude.paths")]
  exclude_paths: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "include.paths")]
  include_paths: Option<::models::ConfigNodePropertyArray>
}

impl ComDayCqPollingImporterImplPollingImporterImplProperties {
  pub fn new() -> ComDayCqPollingImporterImplPollingImporterImplProperties {
    ComDayCqPollingImporterImplPollingImporterImplProperties {
      importer_min_interval: None,
      importer_user: None,
      exclude_paths: None,
      include_paths: None
    }
  }

  pub fn set_importer_min_interval(&mut self, importer_min_interval: ::models::ConfigNodePropertyInteger) {
    self.importer_min_interval = Some(importer_min_interval);
  }

  pub fn with_importer_min_interval(mut self, importer_min_interval: ::models::ConfigNodePropertyInteger) -> ComDayCqPollingImporterImplPollingImporterImplProperties {
    self.importer_min_interval = Some(importer_min_interval);
    self
  }

  pub fn importer_min_interval(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.importer_min_interval.as_ref()
  }

  pub fn reset_importer_min_interval(&mut self) {
    self.importer_min_interval = None;
  }

  pub fn set_importer_user(&mut self, importer_user: ::models::ConfigNodePropertyString) {
    self.importer_user = Some(importer_user);
  }

  pub fn with_importer_user(mut self, importer_user: ::models::ConfigNodePropertyString) -> ComDayCqPollingImporterImplPollingImporterImplProperties {
    self.importer_user = Some(importer_user);
    self
  }

  pub fn importer_user(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.importer_user.as_ref()
  }

  pub fn reset_importer_user(&mut self) {
    self.importer_user = None;
  }

  pub fn set_exclude_paths(&mut self, exclude_paths: ::models::ConfigNodePropertyArray) {
    self.exclude_paths = Some(exclude_paths);
  }

  pub fn with_exclude_paths(mut self, exclude_paths: ::models::ConfigNodePropertyArray) -> ComDayCqPollingImporterImplPollingImporterImplProperties {
    self.exclude_paths = Some(exclude_paths);
    self
  }

  pub fn exclude_paths(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.exclude_paths.as_ref()
  }

  pub fn reset_exclude_paths(&mut self) {
    self.exclude_paths = None;
  }

  pub fn set_include_paths(&mut self, include_paths: ::models::ConfigNodePropertyArray) {
    self.include_paths = Some(include_paths);
  }

  pub fn with_include_paths(mut self, include_paths: ::models::ConfigNodePropertyArray) -> ComDayCqPollingImporterImplPollingImporterImplProperties {
    self.include_paths = Some(include_paths);
    self
  }

  pub fn include_paths(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.include_paths.as_ref()
  }

  pub fn reset_include_paths(&mut self) {
    self.include_paths = None;
  }

}



