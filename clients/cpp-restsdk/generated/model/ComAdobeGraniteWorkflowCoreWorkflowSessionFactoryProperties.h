/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyDropDown.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties
    : public ModelBase
{
public:
    ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties();
    virtual ~ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyDropDown> getGraniteWorkflowinboxSortPropertyName() const;
    bool graniteWorkflowinboxSortPropertyNameIsSet() const;
    void unsetGranite_workflowinbox_sort_propertyName();
    void setGraniteWorkflowinboxSortPropertyName(std::shared_ptr<ConfigNodePropertyDropDown> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getGraniteWorkflowinboxSortOrder() const;
    bool graniteWorkflowinboxSortOrderIsSet() const;
    void unsetGranite_workflowinbox_sort_order();
    void setGraniteWorkflowinboxSortOrder(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getCqWorkflowJobRetry() const;
    bool cqWorkflowJobRetryIsSet() const;
    void unsetCq_workflow_job_retry();
    void setCqWorkflowJobRetry(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getCqWorkflowSuperuser() const;
    bool cqWorkflowSuperuserIsSet() const;
    void unsetCq_workflow_superuser();
    void setCqWorkflowSuperuser(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getGraniteWorkflowInboxQuerySize() const;
    bool graniteWorkflowInboxQuerySizeIsSet() const;
    void unsetGranite_workflow_inboxQuerySize();
    void setGraniteWorkflowInboxQuerySize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getGraniteWorkflowAdminUserGroupFilter() const;
    bool graniteWorkflowAdminUserGroupFilterIsSet() const;
    void unsetGranite_workflow_adminUserGroupFilter();
    void setGraniteWorkflowAdminUserGroupFilter(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getGraniteWorkflowEnforceWorkitemAssigneePermissions() const;
    bool graniteWorkflowEnforceWorkitemAssigneePermissionsIsSet() const;
    void unsetGranite_workflow_enforceWorkitemAssigneePermissions();
    void setGraniteWorkflowEnforceWorkitemAssigneePermissions(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getGraniteWorkflowEnforceWorkflowInitiatorPermissions() const;
    bool graniteWorkflowEnforceWorkflowInitiatorPermissionsIsSet() const;
    void unsetGranite_workflow_enforceWorkflowInitiatorPermissions();
    void setGraniteWorkflowEnforceWorkflowInitiatorPermissions(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getGraniteWorkflowInjectTenantIdInJobTopics() const;
    bool graniteWorkflowInjectTenantIdInJobTopicsIsSet() const;
    void unsetGranite_workflow_injectTenantIdInJobTopics();
    void setGraniteWorkflowInjectTenantIdInJobTopics(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getGraniteWorkflowMaxPurgeSaveThreshold() const;
    bool graniteWorkflowMaxPurgeSaveThresholdIsSet() const;
    void unsetGranite_workflow_maxPurgeSaveThreshold();
    void setGraniteWorkflowMaxPurgeSaveThreshold(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getGraniteWorkflowMaxPurgeQueryCount() const;
    bool graniteWorkflowMaxPurgeQueryCountIsSet() const;
    void unsetGranite_workflow_maxPurgeQueryCount();
    void setGraniteWorkflowMaxPurgeQueryCount(std::shared_ptr<ConfigNodePropertyInteger> value);

protected:
    std::shared_ptr<ConfigNodePropertyDropDown> m_Granite_workflowinbox_sort_propertyName;
    bool m_Granite_workflowinbox_sort_propertyNameIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Granite_workflowinbox_sort_order;
    bool m_Granite_workflowinbox_sort_orderIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Cq_workflow_job_retry;
    bool m_Cq_workflow_job_retryIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_Cq_workflow_superuser;
    bool m_Cq_workflow_superuserIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Granite_workflow_inboxQuerySize;
    bool m_Granite_workflow_inboxQuerySizeIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Granite_workflow_adminUserGroupFilter;
    bool m_Granite_workflow_adminUserGroupFilterIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Granite_workflow_enforceWorkitemAssigneePermissions;
    bool m_Granite_workflow_enforceWorkitemAssigneePermissionsIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Granite_workflow_enforceWorkflowInitiatorPermissions;
    bool m_Granite_workflow_enforceWorkflowInitiatorPermissionsIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Granite_workflow_injectTenantIdInJobTopics;
    bool m_Granite_workflow_injectTenantIdInJobTopicsIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Granite_workflow_maxPurgeSaveThreshold;
    bool m_Granite_workflow_maxPurgeSaveThresholdIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Granite_workflow_maxPurgeQueryCount;
    bool m_Granite_workflow_maxPurgeQueryCountIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties_H_ */
