/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties::OAIComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties::OAIComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties() {
    this->init();
}

OAIComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties::~OAIComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties() {
    
}

void
OAIComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties::init() {
    m_cq_social_reporting_analytics_polling_importer_interval_isSet = false;
    m_cq_social_reporting_analytics_polling_importer_page_size_isSet = false;
}

void
OAIComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(cq_social_reporting_analytics_polling_importer_interval, json[QString("cq.social.reporting.analytics.polling.importer.interval")]);
    
    ::OpenAPI::fromJsonValue(cq_social_reporting_analytics_polling_importer_page_size, json[QString("cq.social.reporting.analytics.polling.importer.pageSize")]);
    
}

QString
OAIComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties::asJsonObject() const {
    QJsonObject obj;
	if(cq_social_reporting_analytics_polling_importer_interval.isSet()){
        obj.insert(QString("cq.social.reporting.analytics.polling.importer.interval"), ::OpenAPI::toJsonValue(cq_social_reporting_analytics_polling_importer_interval));
    }
	if(cq_social_reporting_analytics_polling_importer_page_size.isSet()){
        obj.insert(QString("cq.social.reporting.analytics.polling.importer.pageSize"), ::OpenAPI::toJsonValue(cq_social_reporting_analytics_polling_importer_page_size));
    }
    return obj;
}

OAIConfigNodePropertyInteger
OAIComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties::getCqSocialReportingAnalyticsPollingImporterInterval() const {
    return cq_social_reporting_analytics_polling_importer_interval;
}
void
OAIComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties::setCqSocialReportingAnalyticsPollingImporterInterval(const OAIConfigNodePropertyInteger &cq_social_reporting_analytics_polling_importer_interval) {
    this->cq_social_reporting_analytics_polling_importer_interval = cq_social_reporting_analytics_polling_importer_interval;
    this->m_cq_social_reporting_analytics_polling_importer_interval_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties::getCqSocialReportingAnalyticsPollingImporterPageSize() const {
    return cq_social_reporting_analytics_polling_importer_page_size;
}
void
OAIComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties::setCqSocialReportingAnalyticsPollingImporterPageSize(const OAIConfigNodePropertyInteger &cq_social_reporting_analytics_polling_importer_page_size) {
    this->cq_social_reporting_analytics_polling_importer_page_size = cq_social_reporting_analytics_polling_importer_page_size;
    this->m_cq_social_reporting_analytics_polling_importer_page_size_isSet = true;
}


bool
OAIComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(cq_social_reporting_analytics_polling_importer_interval.isSet()){ isObjectUpdated = true; break;}
    
        if(cq_social_reporting_analytics_polling_importer_page_size.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

