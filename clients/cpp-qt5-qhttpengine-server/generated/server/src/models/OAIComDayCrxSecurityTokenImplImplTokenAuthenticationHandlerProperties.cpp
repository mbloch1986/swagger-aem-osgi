/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties(QString json) {
    this->fromJson(json);
}

OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties() {
    this->init();
}

OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::~OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties() {
    
}

void
OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::init() {
    m_path_isSet = false;
    m_token_required_attr_isSet = false;
    m_token_alternate_url_isSet = false;
    m_token_encapsulated_isSet = false;
    m_skip_token_refresh_isSet = false;
}

void
OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(path, json[QString("path")]);
    
    ::OpenAPI::fromJsonValue(token_required_attr, json[QString("token.required.attr")]);
    
    ::OpenAPI::fromJsonValue(token_alternate_url, json[QString("token.alternate.url")]);
    
    ::OpenAPI::fromJsonValue(token_encapsulated, json[QString("token.encapsulated")]);
    
    ::OpenAPI::fromJsonValue(skip_token_refresh, json[QString("skip.token.refresh")]);
    
}

QString
OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::asJsonObject() const {
    QJsonObject obj;
	if(path.isSet()){
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(path));
    }
	if(token_required_attr.isSet()){
        obj.insert(QString("token.required.attr"), ::OpenAPI::toJsonValue(token_required_attr));
    }
	if(token_alternate_url.isSet()){
        obj.insert(QString("token.alternate.url"), ::OpenAPI::toJsonValue(token_alternate_url));
    }
	if(token_encapsulated.isSet()){
        obj.insert(QString("token.encapsulated"), ::OpenAPI::toJsonValue(token_encapsulated));
    }
	if(skip_token_refresh.isSet()){
        obj.insert(QString("skip.token.refresh"), ::OpenAPI::toJsonValue(skip_token_refresh));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::getPath() const {
    return path;
}
void
OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::setPath(const OAIConfigNodePropertyString &path) {
    this->path = path;
    this->m_path_isSet = true;
}

OAIConfigNodePropertyDropDown
OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::getTokenRequiredAttr() const {
    return token_required_attr;
}
void
OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::setTokenRequiredAttr(const OAIConfigNodePropertyDropDown &token_required_attr) {
    this->token_required_attr = token_required_attr;
    this->m_token_required_attr_isSet = true;
}

OAIConfigNodePropertyString
OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::getTokenAlternateUrl() const {
    return token_alternate_url;
}
void
OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::setTokenAlternateUrl(const OAIConfigNodePropertyString &token_alternate_url) {
    this->token_alternate_url = token_alternate_url;
    this->m_token_alternate_url_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::getTokenEncapsulated() const {
    return token_encapsulated;
}
void
OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::setTokenEncapsulated(const OAIConfigNodePropertyBoolean &token_encapsulated) {
    this->token_encapsulated = token_encapsulated;
    this->m_token_encapsulated_isSet = true;
}

OAIConfigNodePropertyArray
OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::getSkipTokenRefresh() const {
    return skip_token_refresh;
}
void
OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::setSkipTokenRefresh(const OAIConfigNodePropertyArray &skip_token_refresh) {
    this->skip_token_refresh = skip_token_refresh;
    this->m_skip_token_refresh_isSet = true;
}


bool
OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(path.isSet()){ isObjectUpdated = true; break;}
    
        if(token_required_attr.isSet()){ isObjectUpdated = true; break;}
    
        if(token_alternate_url.isSet()){ isObjectUpdated = true; break;}
    
        if(token_encapsulated.isSet()){ isObjectUpdated = true; break;}
    
        if(skip_token_refresh.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

