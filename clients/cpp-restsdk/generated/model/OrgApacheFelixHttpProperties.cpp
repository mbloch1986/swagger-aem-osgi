/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheFelixHttpProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheFelixHttpProperties::OrgApacheFelixHttpProperties()
{
    m_Org_apache_felix_http_hostIsSet = false;
    m_Org_apache_felix_http_enableIsSet = false;
    m_Org_osgi_service_http_portIsSet = false;
    m_Org_apache_felix_http_timeoutIsSet = false;
    m_Org_apache_felix_https_enableIsSet = false;
    m_Org_osgi_service_http_port_secureIsSet = false;
    m_Org_apache_felix_https_keystoreIsSet = false;
    m_Org_apache_felix_https_keystore_passwordIsSet = false;
    m_Org_apache_felix_https_keystore_key_passwordIsSet = false;
    m_Org_apache_felix_https_truststoreIsSet = false;
    m_Org_apache_felix_https_truststore_passwordIsSet = false;
    m_Org_apache_felix_https_clientcertificateIsSet = false;
    m_Org_apache_felix_http_context_pathIsSet = false;
    m_Org_apache_felix_http_mbeansIsSet = false;
    m_Org_apache_felix_http_session_timeoutIsSet = false;
    m_Org_apache_felix_http_jetty_threadpool_maxIsSet = false;
    m_Org_apache_felix_http_jetty_acceptorsIsSet = false;
    m_Org_apache_felix_http_jetty_selectorsIsSet = false;
    m_Org_apache_felix_http_jetty_headerBufferSizeIsSet = false;
    m_Org_apache_felix_http_jetty_requestBufferSizeIsSet = false;
    m_Org_apache_felix_http_jetty_responseBufferSizeIsSet = false;
    m_Org_apache_felix_http_jetty_maxFormSizeIsSet = false;
    m_Org_apache_felix_http_path_exclusionsIsSet = false;
    m_Org_apache_felix_https_jetty_ciphersuites_excludedIsSet = false;
    m_Org_apache_felix_https_jetty_ciphersuites_includedIsSet = false;
    m_Org_apache_felix_http_jetty_sendServerHeaderIsSet = false;
    m_Org_apache_felix_https_jetty_protocols_includedIsSet = false;
    m_Org_apache_felix_https_jetty_protocols_excludedIsSet = false;
    m_Org_apache_felix_proxy_load_balancer_connection_enableIsSet = false;
    m_Org_apache_felix_https_jetty_renegotiateAllowedIsSet = false;
    m_Org_apache_felix_https_jetty_session_cookie_httpOnlyIsSet = false;
    m_Org_apache_felix_https_jetty_session_cookie_secureIsSet = false;
    m_Org_eclipse_jetty_servlet_SessionIdPathParameterNameIsSet = false;
    m_Org_eclipse_jetty_servlet_CheckingRemoteSessionIdEncodingIsSet = false;
    m_Org_eclipse_jetty_servlet_SessionCookieIsSet = false;
    m_Org_eclipse_jetty_servlet_SessionDomainIsSet = false;
    m_Org_eclipse_jetty_servlet_SessionPathIsSet = false;
    m_Org_eclipse_jetty_servlet_MaxAgeIsSet = false;
    m_Org_apache_felix_http_nameIsSet = false;
    m_Org_apache_felix_jetty_gziphandler_enableIsSet = false;
    m_Org_apache_felix_jetty_gzip_minGzipSizeIsSet = false;
    m_Org_apache_felix_jetty_gzip_compressionLevelIsSet = false;
    m_Org_apache_felix_jetty_gzip_inflateBufferSizeIsSet = false;
    m_Org_apache_felix_jetty_gzip_syncFlushIsSet = false;
    m_Org_apache_felix_jetty_gzip_excludedUserAgentsIsSet = false;
    m_Org_apache_felix_jetty_gzip_includedMethodsIsSet = false;
    m_Org_apache_felix_jetty_gzip_excludedMethodsIsSet = false;
    m_Org_apache_felix_jetty_gzip_includedPathsIsSet = false;
    m_Org_apache_felix_jetty_gzip_excludedPathsIsSet = false;
    m_Org_apache_felix_jetty_gzip_includedMimeTypesIsSet = false;
    m_Org_apache_felix_jetty_gzip_excludedMimeTypesIsSet = false;
    m_Org_apache_felix_http_session_invalidateIsSet = false;
    m_Org_apache_felix_http_session_uniqueidIsSet = false;
}

OrgApacheFelixHttpProperties::~OrgApacheFelixHttpProperties()
{
}

void OrgApacheFelixHttpProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheFelixHttpProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Org_apache_felix_http_hostIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.felix.http.host")] = ModelBase::toJson(m_Org_apache_felix_http_host);
    }
    if(m_Org_apache_felix_http_enableIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.felix.http.enable")] = ModelBase::toJson(m_Org_apache_felix_http_enable);
    }
    if(m_Org_osgi_service_http_portIsSet)
    {
        val[utility::conversions::to_string_t("org.osgi.service.http.port")] = ModelBase::toJson(m_Org_osgi_service_http_port);
    }
    if(m_Org_apache_felix_http_timeoutIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.felix.http.timeout")] = ModelBase::toJson(m_Org_apache_felix_http_timeout);
    }
    if(m_Org_apache_felix_https_enableIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.felix.https.enable")] = ModelBase::toJson(m_Org_apache_felix_https_enable);
    }
    if(m_Org_osgi_service_http_port_secureIsSet)
    {
        val[utility::conversions::to_string_t("org.osgi.service.http.port.secure")] = ModelBase::toJson(m_Org_osgi_service_http_port_secure);
    }
    if(m_Org_apache_felix_https_keystoreIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.felix.https.keystore")] = ModelBase::toJson(m_Org_apache_felix_https_keystore);
    }
    if(m_Org_apache_felix_https_keystore_passwordIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.felix.https.keystore.password")] = ModelBase::toJson(m_Org_apache_felix_https_keystore_password);
    }
    if(m_Org_apache_felix_https_keystore_key_passwordIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.felix.https.keystore.key.password")] = ModelBase::toJson(m_Org_apache_felix_https_keystore_key_password);
    }
    if(m_Org_apache_felix_https_truststoreIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.felix.https.truststore")] = ModelBase::toJson(m_Org_apache_felix_https_truststore);
    }
    if(m_Org_apache_felix_https_truststore_passwordIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.felix.https.truststore.password")] = ModelBase::toJson(m_Org_apache_felix_https_truststore_password);
    }
    if(m_Org_apache_felix_https_clientcertificateIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.felix.https.clientcertificate")] = ModelBase::toJson(m_Org_apache_felix_https_clientcertificate);
    }
    if(m_Org_apache_felix_http_context_pathIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.felix.http.context_path")] = ModelBase::toJson(m_Org_apache_felix_http_context_path);
    }
    if(m_Org_apache_felix_http_mbeansIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.felix.http.mbeans")] = ModelBase::toJson(m_Org_apache_felix_http_mbeans);
    }
    if(m_Org_apache_felix_http_session_timeoutIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.felix.http.session.timeout")] = ModelBase::toJson(m_Org_apache_felix_http_session_timeout);
    }
    if(m_Org_apache_felix_http_jetty_threadpool_maxIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.felix.http.jetty.threadpool.max")] = ModelBase::toJson(m_Org_apache_felix_http_jetty_threadpool_max);
    }
    if(m_Org_apache_felix_http_jetty_acceptorsIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.felix.http.jetty.acceptors")] = ModelBase::toJson(m_Org_apache_felix_http_jetty_acceptors);
    }
    if(m_Org_apache_felix_http_jetty_selectorsIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.felix.http.jetty.selectors")] = ModelBase::toJson(m_Org_apache_felix_http_jetty_selectors);
    }
    if(m_Org_apache_felix_http_jetty_headerBufferSizeIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.felix.http.jetty.headerBufferSize")] = ModelBase::toJson(m_Org_apache_felix_http_jetty_headerBufferSize);
    }
    if(m_Org_apache_felix_http_jetty_requestBufferSizeIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.felix.http.jetty.requestBufferSize")] = ModelBase::toJson(m_Org_apache_felix_http_jetty_requestBufferSize);
    }
    if(m_Org_apache_felix_http_jetty_responseBufferSizeIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.felix.http.jetty.responseBufferSize")] = ModelBase::toJson(m_Org_apache_felix_http_jetty_responseBufferSize);
    }
    if(m_Org_apache_felix_http_jetty_maxFormSizeIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.felix.http.jetty.maxFormSize")] = ModelBase::toJson(m_Org_apache_felix_http_jetty_maxFormSize);
    }
    if(m_Org_apache_felix_http_path_exclusionsIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.felix.http.path_exclusions")] = ModelBase::toJson(m_Org_apache_felix_http_path_exclusions);
    }
    if(m_Org_apache_felix_https_jetty_ciphersuites_excludedIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.felix.https.jetty.ciphersuites.excluded")] = ModelBase::toJson(m_Org_apache_felix_https_jetty_ciphersuites_excluded);
    }
    if(m_Org_apache_felix_https_jetty_ciphersuites_includedIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.felix.https.jetty.ciphersuites.included")] = ModelBase::toJson(m_Org_apache_felix_https_jetty_ciphersuites_included);
    }
    if(m_Org_apache_felix_http_jetty_sendServerHeaderIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.felix.http.jetty.sendServerHeader")] = ModelBase::toJson(m_Org_apache_felix_http_jetty_sendServerHeader);
    }
    if(m_Org_apache_felix_https_jetty_protocols_includedIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.felix.https.jetty.protocols.included")] = ModelBase::toJson(m_Org_apache_felix_https_jetty_protocols_included);
    }
    if(m_Org_apache_felix_https_jetty_protocols_excludedIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.felix.https.jetty.protocols.excluded")] = ModelBase::toJson(m_Org_apache_felix_https_jetty_protocols_excluded);
    }
    if(m_Org_apache_felix_proxy_load_balancer_connection_enableIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.felix.proxy.load.balancer.connection.enable")] = ModelBase::toJson(m_Org_apache_felix_proxy_load_balancer_connection_enable);
    }
    if(m_Org_apache_felix_https_jetty_renegotiateAllowedIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.felix.https.jetty.renegotiateAllowed")] = ModelBase::toJson(m_Org_apache_felix_https_jetty_renegotiateAllowed);
    }
    if(m_Org_apache_felix_https_jetty_session_cookie_httpOnlyIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.felix.https.jetty.session.cookie.httpOnly")] = ModelBase::toJson(m_Org_apache_felix_https_jetty_session_cookie_httpOnly);
    }
    if(m_Org_apache_felix_https_jetty_session_cookie_secureIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.felix.https.jetty.session.cookie.secure")] = ModelBase::toJson(m_Org_apache_felix_https_jetty_session_cookie_secure);
    }
    if(m_Org_eclipse_jetty_servlet_SessionIdPathParameterNameIsSet)
    {
        val[utility::conversions::to_string_t("org.eclipse.jetty.servlet.SessionIdPathParameterName")] = ModelBase::toJson(m_Org_eclipse_jetty_servlet_SessionIdPathParameterName);
    }
    if(m_Org_eclipse_jetty_servlet_CheckingRemoteSessionIdEncodingIsSet)
    {
        val[utility::conversions::to_string_t("org.eclipse.jetty.servlet.CheckingRemoteSessionIdEncoding")] = ModelBase::toJson(m_Org_eclipse_jetty_servlet_CheckingRemoteSessionIdEncoding);
    }
    if(m_Org_eclipse_jetty_servlet_SessionCookieIsSet)
    {
        val[utility::conversions::to_string_t("org.eclipse.jetty.servlet.SessionCookie")] = ModelBase::toJson(m_Org_eclipse_jetty_servlet_SessionCookie);
    }
    if(m_Org_eclipse_jetty_servlet_SessionDomainIsSet)
    {
        val[utility::conversions::to_string_t("org.eclipse.jetty.servlet.SessionDomain")] = ModelBase::toJson(m_Org_eclipse_jetty_servlet_SessionDomain);
    }
    if(m_Org_eclipse_jetty_servlet_SessionPathIsSet)
    {
        val[utility::conversions::to_string_t("org.eclipse.jetty.servlet.SessionPath")] = ModelBase::toJson(m_Org_eclipse_jetty_servlet_SessionPath);
    }
    if(m_Org_eclipse_jetty_servlet_MaxAgeIsSet)
    {
        val[utility::conversions::to_string_t("org.eclipse.jetty.servlet.MaxAge")] = ModelBase::toJson(m_Org_eclipse_jetty_servlet_MaxAge);
    }
    if(m_Org_apache_felix_http_nameIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.felix.http.name")] = ModelBase::toJson(m_Org_apache_felix_http_name);
    }
    if(m_Org_apache_felix_jetty_gziphandler_enableIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.felix.jetty.gziphandler.enable")] = ModelBase::toJson(m_Org_apache_felix_jetty_gziphandler_enable);
    }
    if(m_Org_apache_felix_jetty_gzip_minGzipSizeIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.felix.jetty.gzip.minGzipSize")] = ModelBase::toJson(m_Org_apache_felix_jetty_gzip_minGzipSize);
    }
    if(m_Org_apache_felix_jetty_gzip_compressionLevelIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.felix.jetty.gzip.compressionLevel")] = ModelBase::toJson(m_Org_apache_felix_jetty_gzip_compressionLevel);
    }
    if(m_Org_apache_felix_jetty_gzip_inflateBufferSizeIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.felix.jetty.gzip.inflateBufferSize")] = ModelBase::toJson(m_Org_apache_felix_jetty_gzip_inflateBufferSize);
    }
    if(m_Org_apache_felix_jetty_gzip_syncFlushIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.felix.jetty.gzip.syncFlush")] = ModelBase::toJson(m_Org_apache_felix_jetty_gzip_syncFlush);
    }
    if(m_Org_apache_felix_jetty_gzip_excludedUserAgentsIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.felix.jetty.gzip.excludedUserAgents")] = ModelBase::toJson(m_Org_apache_felix_jetty_gzip_excludedUserAgents);
    }
    if(m_Org_apache_felix_jetty_gzip_includedMethodsIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.felix.jetty.gzip.includedMethods")] = ModelBase::toJson(m_Org_apache_felix_jetty_gzip_includedMethods);
    }
    if(m_Org_apache_felix_jetty_gzip_excludedMethodsIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.felix.jetty.gzip.excludedMethods")] = ModelBase::toJson(m_Org_apache_felix_jetty_gzip_excludedMethods);
    }
    if(m_Org_apache_felix_jetty_gzip_includedPathsIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.felix.jetty.gzip.includedPaths")] = ModelBase::toJson(m_Org_apache_felix_jetty_gzip_includedPaths);
    }
    if(m_Org_apache_felix_jetty_gzip_excludedPathsIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.felix.jetty.gzip.excludedPaths")] = ModelBase::toJson(m_Org_apache_felix_jetty_gzip_excludedPaths);
    }
    if(m_Org_apache_felix_jetty_gzip_includedMimeTypesIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.felix.jetty.gzip.includedMimeTypes")] = ModelBase::toJson(m_Org_apache_felix_jetty_gzip_includedMimeTypes);
    }
    if(m_Org_apache_felix_jetty_gzip_excludedMimeTypesIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.felix.jetty.gzip.excludedMimeTypes")] = ModelBase::toJson(m_Org_apache_felix_jetty_gzip_excludedMimeTypes);
    }
    if(m_Org_apache_felix_http_session_invalidateIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.felix.http.session.invalidate")] = ModelBase::toJson(m_Org_apache_felix_http_session_invalidate);
    }
    if(m_Org_apache_felix_http_session_uniqueidIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.felix.http.session.uniqueid")] = ModelBase::toJson(m_Org_apache_felix_http_session_uniqueid);
    }

    return val;
}

void OrgApacheFelixHttpProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("org.apache.felix.http.host")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.felix.http.host")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.felix.http.host")]);
            setOrgApacheFelixHttpHost( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.felix.http.enable")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.felix.http.enable")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.felix.http.enable")]);
            setOrgApacheFelixHttpEnable( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.osgi.service.http.port")))
    {
        if(!val[utility::conversions::to_string_t("org.osgi.service.http.port")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("org.osgi.service.http.port")]);
            setOrgOsgiServiceHttpPort( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.felix.http.timeout")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.felix.http.timeout")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.felix.http.timeout")]);
            setOrgApacheFelixHttpTimeout( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.felix.https.enable")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.felix.https.enable")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.felix.https.enable")]);
            setOrgApacheFelixHttpsEnable( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.osgi.service.http.port.secure")))
    {
        if(!val[utility::conversions::to_string_t("org.osgi.service.http.port.secure")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("org.osgi.service.http.port.secure")]);
            setOrgOsgiServiceHttpPortSecure( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.felix.https.keystore")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.felix.https.keystore")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.felix.https.keystore")]);
            setOrgApacheFelixHttpsKeystore( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.felix.https.keystore.password")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.felix.https.keystore.password")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.felix.https.keystore.password")]);
            setOrgApacheFelixHttpsKeystorePassword( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.felix.https.keystore.key.password")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.felix.https.keystore.key.password")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.felix.https.keystore.key.password")]);
            setOrgApacheFelixHttpsKeystoreKeyPassword( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.felix.https.truststore")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.felix.https.truststore")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.felix.https.truststore")]);
            setOrgApacheFelixHttpsTruststore( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.felix.https.truststore.password")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.felix.https.truststore.password")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.felix.https.truststore.password")]);
            setOrgApacheFelixHttpsTruststorePassword( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.felix.https.clientcertificate")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.felix.https.clientcertificate")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.felix.https.clientcertificate")]);
            setOrgApacheFelixHttpsClientcertificate( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.felix.http.context_path")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.felix.http.context_path")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.felix.http.context_path")]);
            setOrgApacheFelixHttpContextPath( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.felix.http.mbeans")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.felix.http.mbeans")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.felix.http.mbeans")]);
            setOrgApacheFelixHttpMbeans( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.felix.http.session.timeout")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.felix.http.session.timeout")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.felix.http.session.timeout")]);
            setOrgApacheFelixHttpSessionTimeout( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.felix.http.jetty.threadpool.max")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.felix.http.jetty.threadpool.max")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.felix.http.jetty.threadpool.max")]);
            setOrgApacheFelixHttpJettyThreadpoolMax( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.felix.http.jetty.acceptors")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.felix.http.jetty.acceptors")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.felix.http.jetty.acceptors")]);
            setOrgApacheFelixHttpJettyAcceptors( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.felix.http.jetty.selectors")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.felix.http.jetty.selectors")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.felix.http.jetty.selectors")]);
            setOrgApacheFelixHttpJettySelectors( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.felix.http.jetty.headerBufferSize")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.felix.http.jetty.headerBufferSize")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.felix.http.jetty.headerBufferSize")]);
            setOrgApacheFelixHttpJettyHeaderBufferSize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.felix.http.jetty.requestBufferSize")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.felix.http.jetty.requestBufferSize")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.felix.http.jetty.requestBufferSize")]);
            setOrgApacheFelixHttpJettyRequestBufferSize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.felix.http.jetty.responseBufferSize")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.felix.http.jetty.responseBufferSize")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.felix.http.jetty.responseBufferSize")]);
            setOrgApacheFelixHttpJettyResponseBufferSize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.felix.http.jetty.maxFormSize")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.felix.http.jetty.maxFormSize")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.felix.http.jetty.maxFormSize")]);
            setOrgApacheFelixHttpJettyMaxFormSize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.felix.http.path_exclusions")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.felix.http.path_exclusions")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.felix.http.path_exclusions")]);
            setOrgApacheFelixHttpPathExclusions( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.felix.https.jetty.ciphersuites.excluded")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.felix.https.jetty.ciphersuites.excluded")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.felix.https.jetty.ciphersuites.excluded")]);
            setOrgApacheFelixHttpsJettyCiphersuitesExcluded( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.felix.https.jetty.ciphersuites.included")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.felix.https.jetty.ciphersuites.included")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.felix.https.jetty.ciphersuites.included")]);
            setOrgApacheFelixHttpsJettyCiphersuitesIncluded( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.felix.http.jetty.sendServerHeader")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.felix.http.jetty.sendServerHeader")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.felix.http.jetty.sendServerHeader")]);
            setOrgApacheFelixHttpJettySendServerHeader( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.felix.https.jetty.protocols.included")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.felix.https.jetty.protocols.included")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.felix.https.jetty.protocols.included")]);
            setOrgApacheFelixHttpsJettyProtocolsIncluded( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.felix.https.jetty.protocols.excluded")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.felix.https.jetty.protocols.excluded")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.felix.https.jetty.protocols.excluded")]);
            setOrgApacheFelixHttpsJettyProtocolsExcluded( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.felix.proxy.load.balancer.connection.enable")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.felix.proxy.load.balancer.connection.enable")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.felix.proxy.load.balancer.connection.enable")]);
            setOrgApacheFelixProxyLoadBalancerConnectionEnable( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.felix.https.jetty.renegotiateAllowed")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.felix.https.jetty.renegotiateAllowed")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.felix.https.jetty.renegotiateAllowed")]);
            setOrgApacheFelixHttpsJettyRenegotiateAllowed( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.felix.https.jetty.session.cookie.httpOnly")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.felix.https.jetty.session.cookie.httpOnly")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.felix.https.jetty.session.cookie.httpOnly")]);
            setOrgApacheFelixHttpsJettySessionCookieHttpOnly( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.felix.https.jetty.session.cookie.secure")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.felix.https.jetty.session.cookie.secure")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.felix.https.jetty.session.cookie.secure")]);
            setOrgApacheFelixHttpsJettySessionCookieSecure( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.eclipse.jetty.servlet.SessionIdPathParameterName")))
    {
        if(!val[utility::conversions::to_string_t("org.eclipse.jetty.servlet.SessionIdPathParameterName")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.eclipse.jetty.servlet.SessionIdPathParameterName")]);
            setOrgEclipseJettyServletSessionIdPathParameterName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.eclipse.jetty.servlet.CheckingRemoteSessionIdEncoding")))
    {
        if(!val[utility::conversions::to_string_t("org.eclipse.jetty.servlet.CheckingRemoteSessionIdEncoding")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("org.eclipse.jetty.servlet.CheckingRemoteSessionIdEncoding")]);
            setOrgEclipseJettyServletCheckingRemoteSessionIdEncoding( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.eclipse.jetty.servlet.SessionCookie")))
    {
        if(!val[utility::conversions::to_string_t("org.eclipse.jetty.servlet.SessionCookie")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.eclipse.jetty.servlet.SessionCookie")]);
            setOrgEclipseJettyServletSessionCookie( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.eclipse.jetty.servlet.SessionDomain")))
    {
        if(!val[utility::conversions::to_string_t("org.eclipse.jetty.servlet.SessionDomain")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.eclipse.jetty.servlet.SessionDomain")]);
            setOrgEclipseJettyServletSessionDomain( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.eclipse.jetty.servlet.SessionPath")))
    {
        if(!val[utility::conversions::to_string_t("org.eclipse.jetty.servlet.SessionPath")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.eclipse.jetty.servlet.SessionPath")]);
            setOrgEclipseJettyServletSessionPath( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.eclipse.jetty.servlet.MaxAge")))
    {
        if(!val[utility::conversions::to_string_t("org.eclipse.jetty.servlet.MaxAge")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("org.eclipse.jetty.servlet.MaxAge")]);
            setOrgEclipseJettyServletMaxAge( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.felix.http.name")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.felix.http.name")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.felix.http.name")]);
            setOrgApacheFelixHttpName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.felix.jetty.gziphandler.enable")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.felix.jetty.gziphandler.enable")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.felix.jetty.gziphandler.enable")]);
            setOrgApacheFelixJettyGziphandlerEnable( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.felix.jetty.gzip.minGzipSize")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.felix.jetty.gzip.minGzipSize")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.felix.jetty.gzip.minGzipSize")]);
            setOrgApacheFelixJettyGzipMinGzipSize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.felix.jetty.gzip.compressionLevel")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.felix.jetty.gzip.compressionLevel")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.felix.jetty.gzip.compressionLevel")]);
            setOrgApacheFelixJettyGzipCompressionLevel( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.felix.jetty.gzip.inflateBufferSize")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.felix.jetty.gzip.inflateBufferSize")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.felix.jetty.gzip.inflateBufferSize")]);
            setOrgApacheFelixJettyGzipInflateBufferSize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.felix.jetty.gzip.syncFlush")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.felix.jetty.gzip.syncFlush")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.felix.jetty.gzip.syncFlush")]);
            setOrgApacheFelixJettyGzipSyncFlush( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.felix.jetty.gzip.excludedUserAgents")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.felix.jetty.gzip.excludedUserAgents")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.felix.jetty.gzip.excludedUserAgents")]);
            setOrgApacheFelixJettyGzipExcludedUserAgents( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.felix.jetty.gzip.includedMethods")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.felix.jetty.gzip.includedMethods")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.felix.jetty.gzip.includedMethods")]);
            setOrgApacheFelixJettyGzipIncludedMethods( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.felix.jetty.gzip.excludedMethods")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.felix.jetty.gzip.excludedMethods")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.felix.jetty.gzip.excludedMethods")]);
            setOrgApacheFelixJettyGzipExcludedMethods( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.felix.jetty.gzip.includedPaths")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.felix.jetty.gzip.includedPaths")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.felix.jetty.gzip.includedPaths")]);
            setOrgApacheFelixJettyGzipIncludedPaths( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.felix.jetty.gzip.excludedPaths")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.felix.jetty.gzip.excludedPaths")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.felix.jetty.gzip.excludedPaths")]);
            setOrgApacheFelixJettyGzipExcludedPaths( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.felix.jetty.gzip.includedMimeTypes")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.felix.jetty.gzip.includedMimeTypes")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.felix.jetty.gzip.includedMimeTypes")]);
            setOrgApacheFelixJettyGzipIncludedMimeTypes( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.felix.jetty.gzip.excludedMimeTypes")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.felix.jetty.gzip.excludedMimeTypes")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.felix.jetty.gzip.excludedMimeTypes")]);
            setOrgApacheFelixJettyGzipExcludedMimeTypes( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.felix.http.session.invalidate")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.felix.http.session.invalidate")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.felix.http.session.invalidate")]);
            setOrgApacheFelixHttpSessionInvalidate( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.felix.http.session.uniqueid")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.felix.http.session.uniqueid")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.felix.http.session.uniqueid")]);
            setOrgApacheFelixHttpSessionUniqueid( newItem );
        }
    }
}

void OrgApacheFelixHttpProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Org_apache_felix_http_hostIsSet)
    {
        if (m_Org_apache_felix_http_host.get())
        {
            m_Org_apache_felix_http_host->toMultipart(multipart, utility::conversions::to_string_t("org.apache.felix.http.host."));
        }
    }
    if(m_Org_apache_felix_http_enableIsSet)
    {
        if (m_Org_apache_felix_http_enable.get())
        {
            m_Org_apache_felix_http_enable->toMultipart(multipart, utility::conversions::to_string_t("org.apache.felix.http.enable."));
        }
    }
    if(m_Org_osgi_service_http_portIsSet)
    {
        if (m_Org_osgi_service_http_port.get())
        {
            m_Org_osgi_service_http_port->toMultipart(multipart, utility::conversions::to_string_t("org.osgi.service.http.port."));
        }
    }
    if(m_Org_apache_felix_http_timeoutIsSet)
    {
        if (m_Org_apache_felix_http_timeout.get())
        {
            m_Org_apache_felix_http_timeout->toMultipart(multipart, utility::conversions::to_string_t("org.apache.felix.http.timeout."));
        }
    }
    if(m_Org_apache_felix_https_enableIsSet)
    {
        if (m_Org_apache_felix_https_enable.get())
        {
            m_Org_apache_felix_https_enable->toMultipart(multipart, utility::conversions::to_string_t("org.apache.felix.https.enable."));
        }
    }
    if(m_Org_osgi_service_http_port_secureIsSet)
    {
        if (m_Org_osgi_service_http_port_secure.get())
        {
            m_Org_osgi_service_http_port_secure->toMultipart(multipart, utility::conversions::to_string_t("org.osgi.service.http.port.secure."));
        }
    }
    if(m_Org_apache_felix_https_keystoreIsSet)
    {
        if (m_Org_apache_felix_https_keystore.get())
        {
            m_Org_apache_felix_https_keystore->toMultipart(multipart, utility::conversions::to_string_t("org.apache.felix.https.keystore."));
        }
    }
    if(m_Org_apache_felix_https_keystore_passwordIsSet)
    {
        if (m_Org_apache_felix_https_keystore_password.get())
        {
            m_Org_apache_felix_https_keystore_password->toMultipart(multipart, utility::conversions::to_string_t("org.apache.felix.https.keystore.password."));
        }
    }
    if(m_Org_apache_felix_https_keystore_key_passwordIsSet)
    {
        if (m_Org_apache_felix_https_keystore_key_password.get())
        {
            m_Org_apache_felix_https_keystore_key_password->toMultipart(multipart, utility::conversions::to_string_t("org.apache.felix.https.keystore.key.password."));
        }
    }
    if(m_Org_apache_felix_https_truststoreIsSet)
    {
        if (m_Org_apache_felix_https_truststore.get())
        {
            m_Org_apache_felix_https_truststore->toMultipart(multipart, utility::conversions::to_string_t("org.apache.felix.https.truststore."));
        }
    }
    if(m_Org_apache_felix_https_truststore_passwordIsSet)
    {
        if (m_Org_apache_felix_https_truststore_password.get())
        {
            m_Org_apache_felix_https_truststore_password->toMultipart(multipart, utility::conversions::to_string_t("org.apache.felix.https.truststore.password."));
        }
    }
    if(m_Org_apache_felix_https_clientcertificateIsSet)
    {
        if (m_Org_apache_felix_https_clientcertificate.get())
        {
            m_Org_apache_felix_https_clientcertificate->toMultipart(multipart, utility::conversions::to_string_t("org.apache.felix.https.clientcertificate."));
        }
    }
    if(m_Org_apache_felix_http_context_pathIsSet)
    {
        if (m_Org_apache_felix_http_context_path.get())
        {
            m_Org_apache_felix_http_context_path->toMultipart(multipart, utility::conversions::to_string_t("org.apache.felix.http.context_path."));
        }
    }
    if(m_Org_apache_felix_http_mbeansIsSet)
    {
        if (m_Org_apache_felix_http_mbeans.get())
        {
            m_Org_apache_felix_http_mbeans->toMultipart(multipart, utility::conversions::to_string_t("org.apache.felix.http.mbeans."));
        }
    }
    if(m_Org_apache_felix_http_session_timeoutIsSet)
    {
        if (m_Org_apache_felix_http_session_timeout.get())
        {
            m_Org_apache_felix_http_session_timeout->toMultipart(multipart, utility::conversions::to_string_t("org.apache.felix.http.session.timeout."));
        }
    }
    if(m_Org_apache_felix_http_jetty_threadpool_maxIsSet)
    {
        if (m_Org_apache_felix_http_jetty_threadpool_max.get())
        {
            m_Org_apache_felix_http_jetty_threadpool_max->toMultipart(multipart, utility::conversions::to_string_t("org.apache.felix.http.jetty.threadpool.max."));
        }
    }
    if(m_Org_apache_felix_http_jetty_acceptorsIsSet)
    {
        if (m_Org_apache_felix_http_jetty_acceptors.get())
        {
            m_Org_apache_felix_http_jetty_acceptors->toMultipart(multipart, utility::conversions::to_string_t("org.apache.felix.http.jetty.acceptors."));
        }
    }
    if(m_Org_apache_felix_http_jetty_selectorsIsSet)
    {
        if (m_Org_apache_felix_http_jetty_selectors.get())
        {
            m_Org_apache_felix_http_jetty_selectors->toMultipart(multipart, utility::conversions::to_string_t("org.apache.felix.http.jetty.selectors."));
        }
    }
    if(m_Org_apache_felix_http_jetty_headerBufferSizeIsSet)
    {
        if (m_Org_apache_felix_http_jetty_headerBufferSize.get())
        {
            m_Org_apache_felix_http_jetty_headerBufferSize->toMultipart(multipart, utility::conversions::to_string_t("org.apache.felix.http.jetty.headerBufferSize."));
        }
    }
    if(m_Org_apache_felix_http_jetty_requestBufferSizeIsSet)
    {
        if (m_Org_apache_felix_http_jetty_requestBufferSize.get())
        {
            m_Org_apache_felix_http_jetty_requestBufferSize->toMultipart(multipart, utility::conversions::to_string_t("org.apache.felix.http.jetty.requestBufferSize."));
        }
    }
    if(m_Org_apache_felix_http_jetty_responseBufferSizeIsSet)
    {
        if (m_Org_apache_felix_http_jetty_responseBufferSize.get())
        {
            m_Org_apache_felix_http_jetty_responseBufferSize->toMultipart(multipart, utility::conversions::to_string_t("org.apache.felix.http.jetty.responseBufferSize."));
        }
    }
    if(m_Org_apache_felix_http_jetty_maxFormSizeIsSet)
    {
        if (m_Org_apache_felix_http_jetty_maxFormSize.get())
        {
            m_Org_apache_felix_http_jetty_maxFormSize->toMultipart(multipart, utility::conversions::to_string_t("org.apache.felix.http.jetty.maxFormSize."));
        }
    }
    if(m_Org_apache_felix_http_path_exclusionsIsSet)
    {
        if (m_Org_apache_felix_http_path_exclusions.get())
        {
            m_Org_apache_felix_http_path_exclusions->toMultipart(multipart, utility::conversions::to_string_t("org.apache.felix.http.path_exclusions."));
        }
    }
    if(m_Org_apache_felix_https_jetty_ciphersuites_excludedIsSet)
    {
        if (m_Org_apache_felix_https_jetty_ciphersuites_excluded.get())
        {
            m_Org_apache_felix_https_jetty_ciphersuites_excluded->toMultipart(multipart, utility::conversions::to_string_t("org.apache.felix.https.jetty.ciphersuites.excluded."));
        }
    }
    if(m_Org_apache_felix_https_jetty_ciphersuites_includedIsSet)
    {
        if (m_Org_apache_felix_https_jetty_ciphersuites_included.get())
        {
            m_Org_apache_felix_https_jetty_ciphersuites_included->toMultipart(multipart, utility::conversions::to_string_t("org.apache.felix.https.jetty.ciphersuites.included."));
        }
    }
    if(m_Org_apache_felix_http_jetty_sendServerHeaderIsSet)
    {
        if (m_Org_apache_felix_http_jetty_sendServerHeader.get())
        {
            m_Org_apache_felix_http_jetty_sendServerHeader->toMultipart(multipart, utility::conversions::to_string_t("org.apache.felix.http.jetty.sendServerHeader."));
        }
    }
    if(m_Org_apache_felix_https_jetty_protocols_includedIsSet)
    {
        if (m_Org_apache_felix_https_jetty_protocols_included.get())
        {
            m_Org_apache_felix_https_jetty_protocols_included->toMultipart(multipart, utility::conversions::to_string_t("org.apache.felix.https.jetty.protocols.included."));
        }
    }
    if(m_Org_apache_felix_https_jetty_protocols_excludedIsSet)
    {
        if (m_Org_apache_felix_https_jetty_protocols_excluded.get())
        {
            m_Org_apache_felix_https_jetty_protocols_excluded->toMultipart(multipart, utility::conversions::to_string_t("org.apache.felix.https.jetty.protocols.excluded."));
        }
    }
    if(m_Org_apache_felix_proxy_load_balancer_connection_enableIsSet)
    {
        if (m_Org_apache_felix_proxy_load_balancer_connection_enable.get())
        {
            m_Org_apache_felix_proxy_load_balancer_connection_enable->toMultipart(multipart, utility::conversions::to_string_t("org.apache.felix.proxy.load.balancer.connection.enable."));
        }
    }
    if(m_Org_apache_felix_https_jetty_renegotiateAllowedIsSet)
    {
        if (m_Org_apache_felix_https_jetty_renegotiateAllowed.get())
        {
            m_Org_apache_felix_https_jetty_renegotiateAllowed->toMultipart(multipart, utility::conversions::to_string_t("org.apache.felix.https.jetty.renegotiateAllowed."));
        }
    }
    if(m_Org_apache_felix_https_jetty_session_cookie_httpOnlyIsSet)
    {
        if (m_Org_apache_felix_https_jetty_session_cookie_httpOnly.get())
        {
            m_Org_apache_felix_https_jetty_session_cookie_httpOnly->toMultipart(multipart, utility::conversions::to_string_t("org.apache.felix.https.jetty.session.cookie.httpOnly."));
        }
    }
    if(m_Org_apache_felix_https_jetty_session_cookie_secureIsSet)
    {
        if (m_Org_apache_felix_https_jetty_session_cookie_secure.get())
        {
            m_Org_apache_felix_https_jetty_session_cookie_secure->toMultipart(multipart, utility::conversions::to_string_t("org.apache.felix.https.jetty.session.cookie.secure."));
        }
    }
    if(m_Org_eclipse_jetty_servlet_SessionIdPathParameterNameIsSet)
    {
        if (m_Org_eclipse_jetty_servlet_SessionIdPathParameterName.get())
        {
            m_Org_eclipse_jetty_servlet_SessionIdPathParameterName->toMultipart(multipart, utility::conversions::to_string_t("org.eclipse.jetty.servlet.SessionIdPathParameterName."));
        }
    }
    if(m_Org_eclipse_jetty_servlet_CheckingRemoteSessionIdEncodingIsSet)
    {
        if (m_Org_eclipse_jetty_servlet_CheckingRemoteSessionIdEncoding.get())
        {
            m_Org_eclipse_jetty_servlet_CheckingRemoteSessionIdEncoding->toMultipart(multipart, utility::conversions::to_string_t("org.eclipse.jetty.servlet.CheckingRemoteSessionIdEncoding."));
        }
    }
    if(m_Org_eclipse_jetty_servlet_SessionCookieIsSet)
    {
        if (m_Org_eclipse_jetty_servlet_SessionCookie.get())
        {
            m_Org_eclipse_jetty_servlet_SessionCookie->toMultipart(multipart, utility::conversions::to_string_t("org.eclipse.jetty.servlet.SessionCookie."));
        }
    }
    if(m_Org_eclipse_jetty_servlet_SessionDomainIsSet)
    {
        if (m_Org_eclipse_jetty_servlet_SessionDomain.get())
        {
            m_Org_eclipse_jetty_servlet_SessionDomain->toMultipart(multipart, utility::conversions::to_string_t("org.eclipse.jetty.servlet.SessionDomain."));
        }
    }
    if(m_Org_eclipse_jetty_servlet_SessionPathIsSet)
    {
        if (m_Org_eclipse_jetty_servlet_SessionPath.get())
        {
            m_Org_eclipse_jetty_servlet_SessionPath->toMultipart(multipart, utility::conversions::to_string_t("org.eclipse.jetty.servlet.SessionPath."));
        }
    }
    if(m_Org_eclipse_jetty_servlet_MaxAgeIsSet)
    {
        if (m_Org_eclipse_jetty_servlet_MaxAge.get())
        {
            m_Org_eclipse_jetty_servlet_MaxAge->toMultipart(multipart, utility::conversions::to_string_t("org.eclipse.jetty.servlet.MaxAge."));
        }
    }
    if(m_Org_apache_felix_http_nameIsSet)
    {
        if (m_Org_apache_felix_http_name.get())
        {
            m_Org_apache_felix_http_name->toMultipart(multipart, utility::conversions::to_string_t("org.apache.felix.http.name."));
        }
    }
    if(m_Org_apache_felix_jetty_gziphandler_enableIsSet)
    {
        if (m_Org_apache_felix_jetty_gziphandler_enable.get())
        {
            m_Org_apache_felix_jetty_gziphandler_enable->toMultipart(multipart, utility::conversions::to_string_t("org.apache.felix.jetty.gziphandler.enable."));
        }
    }
    if(m_Org_apache_felix_jetty_gzip_minGzipSizeIsSet)
    {
        if (m_Org_apache_felix_jetty_gzip_minGzipSize.get())
        {
            m_Org_apache_felix_jetty_gzip_minGzipSize->toMultipart(multipart, utility::conversions::to_string_t("org.apache.felix.jetty.gzip.minGzipSize."));
        }
    }
    if(m_Org_apache_felix_jetty_gzip_compressionLevelIsSet)
    {
        if (m_Org_apache_felix_jetty_gzip_compressionLevel.get())
        {
            m_Org_apache_felix_jetty_gzip_compressionLevel->toMultipart(multipart, utility::conversions::to_string_t("org.apache.felix.jetty.gzip.compressionLevel."));
        }
    }
    if(m_Org_apache_felix_jetty_gzip_inflateBufferSizeIsSet)
    {
        if (m_Org_apache_felix_jetty_gzip_inflateBufferSize.get())
        {
            m_Org_apache_felix_jetty_gzip_inflateBufferSize->toMultipart(multipart, utility::conversions::to_string_t("org.apache.felix.jetty.gzip.inflateBufferSize."));
        }
    }
    if(m_Org_apache_felix_jetty_gzip_syncFlushIsSet)
    {
        if (m_Org_apache_felix_jetty_gzip_syncFlush.get())
        {
            m_Org_apache_felix_jetty_gzip_syncFlush->toMultipart(multipart, utility::conversions::to_string_t("org.apache.felix.jetty.gzip.syncFlush."));
        }
    }
    if(m_Org_apache_felix_jetty_gzip_excludedUserAgentsIsSet)
    {
        if (m_Org_apache_felix_jetty_gzip_excludedUserAgents.get())
        {
            m_Org_apache_felix_jetty_gzip_excludedUserAgents->toMultipart(multipart, utility::conversions::to_string_t("org.apache.felix.jetty.gzip.excludedUserAgents."));
        }
    }
    if(m_Org_apache_felix_jetty_gzip_includedMethodsIsSet)
    {
        if (m_Org_apache_felix_jetty_gzip_includedMethods.get())
        {
            m_Org_apache_felix_jetty_gzip_includedMethods->toMultipart(multipart, utility::conversions::to_string_t("org.apache.felix.jetty.gzip.includedMethods."));
        }
    }
    if(m_Org_apache_felix_jetty_gzip_excludedMethodsIsSet)
    {
        if (m_Org_apache_felix_jetty_gzip_excludedMethods.get())
        {
            m_Org_apache_felix_jetty_gzip_excludedMethods->toMultipart(multipart, utility::conversions::to_string_t("org.apache.felix.jetty.gzip.excludedMethods."));
        }
    }
    if(m_Org_apache_felix_jetty_gzip_includedPathsIsSet)
    {
        if (m_Org_apache_felix_jetty_gzip_includedPaths.get())
        {
            m_Org_apache_felix_jetty_gzip_includedPaths->toMultipart(multipart, utility::conversions::to_string_t("org.apache.felix.jetty.gzip.includedPaths."));
        }
    }
    if(m_Org_apache_felix_jetty_gzip_excludedPathsIsSet)
    {
        if (m_Org_apache_felix_jetty_gzip_excludedPaths.get())
        {
            m_Org_apache_felix_jetty_gzip_excludedPaths->toMultipart(multipart, utility::conversions::to_string_t("org.apache.felix.jetty.gzip.excludedPaths."));
        }
    }
    if(m_Org_apache_felix_jetty_gzip_includedMimeTypesIsSet)
    {
        if (m_Org_apache_felix_jetty_gzip_includedMimeTypes.get())
        {
            m_Org_apache_felix_jetty_gzip_includedMimeTypes->toMultipart(multipart, utility::conversions::to_string_t("org.apache.felix.jetty.gzip.includedMimeTypes."));
        }
    }
    if(m_Org_apache_felix_jetty_gzip_excludedMimeTypesIsSet)
    {
        if (m_Org_apache_felix_jetty_gzip_excludedMimeTypes.get())
        {
            m_Org_apache_felix_jetty_gzip_excludedMimeTypes->toMultipart(multipart, utility::conversions::to_string_t("org.apache.felix.jetty.gzip.excludedMimeTypes."));
        }
    }
    if(m_Org_apache_felix_http_session_invalidateIsSet)
    {
        if (m_Org_apache_felix_http_session_invalidate.get())
        {
            m_Org_apache_felix_http_session_invalidate->toMultipart(multipart, utility::conversions::to_string_t("org.apache.felix.http.session.invalidate."));
        }
    }
    if(m_Org_apache_felix_http_session_uniqueidIsSet)
    {
        if (m_Org_apache_felix_http_session_uniqueid.get())
        {
            m_Org_apache_felix_http_session_uniqueid->toMultipart(multipart, utility::conversions::to_string_t("org.apache.felix.http.session.uniqueid."));
        }
    }
}

void OrgApacheFelixHttpProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.http.host")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.http.host")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.felix.http.host."));
            setOrgApacheFelixHttpHost( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.http.enable")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.http.enable")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.felix.http.enable."));
            setOrgApacheFelixHttpEnable( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.osgi.service.http.port")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.osgi.service.http.port")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.osgi.service.http.port."));
            setOrgOsgiServiceHttpPort( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.http.timeout")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.http.timeout")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.felix.http.timeout."));
            setOrgApacheFelixHttpTimeout( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.https.enable")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.https.enable")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.felix.https.enable."));
            setOrgApacheFelixHttpsEnable( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.osgi.service.http.port.secure")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.osgi.service.http.port.secure")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.osgi.service.http.port.secure."));
            setOrgOsgiServiceHttpPortSecure( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.https.keystore")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.https.keystore")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.felix.https.keystore."));
            setOrgApacheFelixHttpsKeystore( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.https.keystore.password")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.https.keystore.password")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.felix.https.keystore.password."));
            setOrgApacheFelixHttpsKeystorePassword( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.https.keystore.key.password")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.https.keystore.key.password")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.felix.https.keystore.key.password."));
            setOrgApacheFelixHttpsKeystoreKeyPassword( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.https.truststore")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.https.truststore")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.felix.https.truststore."));
            setOrgApacheFelixHttpsTruststore( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.https.truststore.password")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.https.truststore.password")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.felix.https.truststore.password."));
            setOrgApacheFelixHttpsTruststorePassword( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.https.clientcertificate")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.https.clientcertificate")))
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.felix.https.clientcertificate."));
            setOrgApacheFelixHttpsClientcertificate( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.http.context_path")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.http.context_path")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.felix.http.context_path."));
            setOrgApacheFelixHttpContextPath( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.http.mbeans")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.http.mbeans")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.felix.http.mbeans."));
            setOrgApacheFelixHttpMbeans( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.http.session.timeout")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.http.session.timeout")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.felix.http.session.timeout."));
            setOrgApacheFelixHttpSessionTimeout( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.http.jetty.threadpool.max")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.http.jetty.threadpool.max")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.felix.http.jetty.threadpool.max."));
            setOrgApacheFelixHttpJettyThreadpoolMax( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.http.jetty.acceptors")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.http.jetty.acceptors")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.felix.http.jetty.acceptors."));
            setOrgApacheFelixHttpJettyAcceptors( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.http.jetty.selectors")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.http.jetty.selectors")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.felix.http.jetty.selectors."));
            setOrgApacheFelixHttpJettySelectors( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.http.jetty.headerBufferSize")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.http.jetty.headerBufferSize")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.felix.http.jetty.headerBufferSize."));
            setOrgApacheFelixHttpJettyHeaderBufferSize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.http.jetty.requestBufferSize")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.http.jetty.requestBufferSize")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.felix.http.jetty.requestBufferSize."));
            setOrgApacheFelixHttpJettyRequestBufferSize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.http.jetty.responseBufferSize")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.http.jetty.responseBufferSize")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.felix.http.jetty.responseBufferSize."));
            setOrgApacheFelixHttpJettyResponseBufferSize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.http.jetty.maxFormSize")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.http.jetty.maxFormSize")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.felix.http.jetty.maxFormSize."));
            setOrgApacheFelixHttpJettyMaxFormSize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.http.path_exclusions")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.http.path_exclusions")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.felix.http.path_exclusions."));
            setOrgApacheFelixHttpPathExclusions( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.https.jetty.ciphersuites.excluded")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.https.jetty.ciphersuites.excluded")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.felix.https.jetty.ciphersuites.excluded."));
            setOrgApacheFelixHttpsJettyCiphersuitesExcluded( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.https.jetty.ciphersuites.included")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.https.jetty.ciphersuites.included")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.felix.https.jetty.ciphersuites.included."));
            setOrgApacheFelixHttpsJettyCiphersuitesIncluded( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.http.jetty.sendServerHeader")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.http.jetty.sendServerHeader")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.felix.http.jetty.sendServerHeader."));
            setOrgApacheFelixHttpJettySendServerHeader( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.https.jetty.protocols.included")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.https.jetty.protocols.included")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.felix.https.jetty.protocols.included."));
            setOrgApacheFelixHttpsJettyProtocolsIncluded( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.https.jetty.protocols.excluded")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.https.jetty.protocols.excluded")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.felix.https.jetty.protocols.excluded."));
            setOrgApacheFelixHttpsJettyProtocolsExcluded( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.proxy.load.balancer.connection.enable")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.proxy.load.balancer.connection.enable")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.felix.proxy.load.balancer.connection.enable."));
            setOrgApacheFelixProxyLoadBalancerConnectionEnable( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.https.jetty.renegotiateAllowed")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.https.jetty.renegotiateAllowed")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.felix.https.jetty.renegotiateAllowed."));
            setOrgApacheFelixHttpsJettyRenegotiateAllowed( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.https.jetty.session.cookie.httpOnly")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.https.jetty.session.cookie.httpOnly")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.felix.https.jetty.session.cookie.httpOnly."));
            setOrgApacheFelixHttpsJettySessionCookieHttpOnly( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.https.jetty.session.cookie.secure")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.https.jetty.session.cookie.secure")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.felix.https.jetty.session.cookie.secure."));
            setOrgApacheFelixHttpsJettySessionCookieSecure( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.eclipse.jetty.servlet.SessionIdPathParameterName")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.eclipse.jetty.servlet.SessionIdPathParameterName")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.eclipse.jetty.servlet.SessionIdPathParameterName."));
            setOrgEclipseJettyServletSessionIdPathParameterName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.eclipse.jetty.servlet.CheckingRemoteSessionIdEncoding")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.eclipse.jetty.servlet.CheckingRemoteSessionIdEncoding")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.eclipse.jetty.servlet.CheckingRemoteSessionIdEncoding."));
            setOrgEclipseJettyServletCheckingRemoteSessionIdEncoding( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.eclipse.jetty.servlet.SessionCookie")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.eclipse.jetty.servlet.SessionCookie")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.eclipse.jetty.servlet.SessionCookie."));
            setOrgEclipseJettyServletSessionCookie( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.eclipse.jetty.servlet.SessionDomain")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.eclipse.jetty.servlet.SessionDomain")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.eclipse.jetty.servlet.SessionDomain."));
            setOrgEclipseJettyServletSessionDomain( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.eclipse.jetty.servlet.SessionPath")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.eclipse.jetty.servlet.SessionPath")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.eclipse.jetty.servlet.SessionPath."));
            setOrgEclipseJettyServletSessionPath( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.eclipse.jetty.servlet.MaxAge")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.eclipse.jetty.servlet.MaxAge")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.eclipse.jetty.servlet.MaxAge."));
            setOrgEclipseJettyServletMaxAge( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.http.name")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.http.name")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.felix.http.name."));
            setOrgApacheFelixHttpName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.jetty.gziphandler.enable")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.jetty.gziphandler.enable")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.felix.jetty.gziphandler.enable."));
            setOrgApacheFelixJettyGziphandlerEnable( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.jetty.gzip.minGzipSize")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.jetty.gzip.minGzipSize")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.felix.jetty.gzip.minGzipSize."));
            setOrgApacheFelixJettyGzipMinGzipSize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.jetty.gzip.compressionLevel")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.jetty.gzip.compressionLevel")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.felix.jetty.gzip.compressionLevel."));
            setOrgApacheFelixJettyGzipCompressionLevel( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.jetty.gzip.inflateBufferSize")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.jetty.gzip.inflateBufferSize")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.felix.jetty.gzip.inflateBufferSize."));
            setOrgApacheFelixJettyGzipInflateBufferSize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.jetty.gzip.syncFlush")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.jetty.gzip.syncFlush")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.felix.jetty.gzip.syncFlush."));
            setOrgApacheFelixJettyGzipSyncFlush( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.jetty.gzip.excludedUserAgents")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.jetty.gzip.excludedUserAgents")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.felix.jetty.gzip.excludedUserAgents."));
            setOrgApacheFelixJettyGzipExcludedUserAgents( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.jetty.gzip.includedMethods")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.jetty.gzip.includedMethods")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.felix.jetty.gzip.includedMethods."));
            setOrgApacheFelixJettyGzipIncludedMethods( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.jetty.gzip.excludedMethods")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.jetty.gzip.excludedMethods")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.felix.jetty.gzip.excludedMethods."));
            setOrgApacheFelixJettyGzipExcludedMethods( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.jetty.gzip.includedPaths")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.jetty.gzip.includedPaths")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.felix.jetty.gzip.includedPaths."));
            setOrgApacheFelixJettyGzipIncludedPaths( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.jetty.gzip.excludedPaths")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.jetty.gzip.excludedPaths")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.felix.jetty.gzip.excludedPaths."));
            setOrgApacheFelixJettyGzipExcludedPaths( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.jetty.gzip.includedMimeTypes")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.jetty.gzip.includedMimeTypes")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.felix.jetty.gzip.includedMimeTypes."));
            setOrgApacheFelixJettyGzipIncludedMimeTypes( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.jetty.gzip.excludedMimeTypes")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.jetty.gzip.excludedMimeTypes")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.felix.jetty.gzip.excludedMimeTypes."));
            setOrgApacheFelixJettyGzipExcludedMimeTypes( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.http.session.invalidate")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.http.session.invalidate")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.felix.http.session.invalidate."));
            setOrgApacheFelixHttpSessionInvalidate( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.http.session.uniqueid")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.http.session.uniqueid")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.felix.http.session.uniqueid."));
            setOrgApacheFelixHttpSessionUniqueid( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheFelixHttpProperties::getOrgApacheFelixHttpHost() const
{
    return m_Org_apache_felix_http_host;
}


void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpHost(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_felix_http_host = value;
    m_Org_apache_felix_http_hostIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpHostIsSet() const
{
    return m_Org_apache_felix_http_hostIsSet;
}

void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_http_host()
{
    m_Org_apache_felix_http_hostIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheFelixHttpProperties::getOrgApacheFelixHttpEnable() const
{
    return m_Org_apache_felix_http_enable;
}


void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpEnable(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Org_apache_felix_http_enable = value;
    m_Org_apache_felix_http_enableIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpEnableIsSet() const
{
    return m_Org_apache_felix_http_enableIsSet;
}

void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_http_enable()
{
    m_Org_apache_felix_http_enableIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheFelixHttpProperties::getOrgOsgiServiceHttpPort() const
{
    return m_Org_osgi_service_http_port;
}


void OrgApacheFelixHttpProperties::setOrgOsgiServiceHttpPort(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Org_osgi_service_http_port = value;
    m_Org_osgi_service_http_portIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgOsgiServiceHttpPortIsSet() const
{
    return m_Org_osgi_service_http_portIsSet;
}

void OrgApacheFelixHttpProperties::unsetOrg_osgi_service_http_port()
{
    m_Org_osgi_service_http_portIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheFelixHttpProperties::getOrgApacheFelixHttpTimeout() const
{
    return m_Org_apache_felix_http_timeout;
}


void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpTimeout(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Org_apache_felix_http_timeout = value;
    m_Org_apache_felix_http_timeoutIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpTimeoutIsSet() const
{
    return m_Org_apache_felix_http_timeoutIsSet;
}

void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_http_timeout()
{
    m_Org_apache_felix_http_timeoutIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheFelixHttpProperties::getOrgApacheFelixHttpsEnable() const
{
    return m_Org_apache_felix_https_enable;
}


void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpsEnable(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Org_apache_felix_https_enable = value;
    m_Org_apache_felix_https_enableIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpsEnableIsSet() const
{
    return m_Org_apache_felix_https_enableIsSet;
}

void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_https_enable()
{
    m_Org_apache_felix_https_enableIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheFelixHttpProperties::getOrgOsgiServiceHttpPortSecure() const
{
    return m_Org_osgi_service_http_port_secure;
}


void OrgApacheFelixHttpProperties::setOrgOsgiServiceHttpPortSecure(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Org_osgi_service_http_port_secure = value;
    m_Org_osgi_service_http_port_secureIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgOsgiServiceHttpPortSecureIsSet() const
{
    return m_Org_osgi_service_http_port_secureIsSet;
}

void OrgApacheFelixHttpProperties::unsetOrg_osgi_service_http_port_secure()
{
    m_Org_osgi_service_http_port_secureIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheFelixHttpProperties::getOrgApacheFelixHttpsKeystore() const
{
    return m_Org_apache_felix_https_keystore;
}


void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpsKeystore(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_felix_https_keystore = value;
    m_Org_apache_felix_https_keystoreIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpsKeystoreIsSet() const
{
    return m_Org_apache_felix_https_keystoreIsSet;
}

void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_https_keystore()
{
    m_Org_apache_felix_https_keystoreIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheFelixHttpProperties::getOrgApacheFelixHttpsKeystorePassword() const
{
    return m_Org_apache_felix_https_keystore_password;
}


void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpsKeystorePassword(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_felix_https_keystore_password = value;
    m_Org_apache_felix_https_keystore_passwordIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpsKeystorePasswordIsSet() const
{
    return m_Org_apache_felix_https_keystore_passwordIsSet;
}

void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_https_keystore_password()
{
    m_Org_apache_felix_https_keystore_passwordIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheFelixHttpProperties::getOrgApacheFelixHttpsKeystoreKeyPassword() const
{
    return m_Org_apache_felix_https_keystore_key_password;
}


void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpsKeystoreKeyPassword(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_felix_https_keystore_key_password = value;
    m_Org_apache_felix_https_keystore_key_passwordIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpsKeystoreKeyPasswordIsSet() const
{
    return m_Org_apache_felix_https_keystore_key_passwordIsSet;
}

void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_https_keystore_key_password()
{
    m_Org_apache_felix_https_keystore_key_passwordIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheFelixHttpProperties::getOrgApacheFelixHttpsTruststore() const
{
    return m_Org_apache_felix_https_truststore;
}


void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpsTruststore(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_felix_https_truststore = value;
    m_Org_apache_felix_https_truststoreIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpsTruststoreIsSet() const
{
    return m_Org_apache_felix_https_truststoreIsSet;
}

void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_https_truststore()
{
    m_Org_apache_felix_https_truststoreIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheFelixHttpProperties::getOrgApacheFelixHttpsTruststorePassword() const
{
    return m_Org_apache_felix_https_truststore_password;
}


void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpsTruststorePassword(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_felix_https_truststore_password = value;
    m_Org_apache_felix_https_truststore_passwordIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpsTruststorePasswordIsSet() const
{
    return m_Org_apache_felix_https_truststore_passwordIsSet;
}

void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_https_truststore_password()
{
    m_Org_apache_felix_https_truststore_passwordIsSet = false;
}

std::shared_ptr<ConfigNodePropertyDropDown> OrgApacheFelixHttpProperties::getOrgApacheFelixHttpsClientcertificate() const
{
    return m_Org_apache_felix_https_clientcertificate;
}


void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpsClientcertificate(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_Org_apache_felix_https_clientcertificate = value;
    m_Org_apache_felix_https_clientcertificateIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpsClientcertificateIsSet() const
{
    return m_Org_apache_felix_https_clientcertificateIsSet;
}

void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_https_clientcertificate()
{
    m_Org_apache_felix_https_clientcertificateIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheFelixHttpProperties::getOrgApacheFelixHttpContextPath() const
{
    return m_Org_apache_felix_http_context_path;
}


void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpContextPath(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_felix_http_context_path = value;
    m_Org_apache_felix_http_context_pathIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpContextPathIsSet() const
{
    return m_Org_apache_felix_http_context_pathIsSet;
}

void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_http_context_path()
{
    m_Org_apache_felix_http_context_pathIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheFelixHttpProperties::getOrgApacheFelixHttpMbeans() const
{
    return m_Org_apache_felix_http_mbeans;
}


void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpMbeans(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Org_apache_felix_http_mbeans = value;
    m_Org_apache_felix_http_mbeansIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpMbeansIsSet() const
{
    return m_Org_apache_felix_http_mbeansIsSet;
}

void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_http_mbeans()
{
    m_Org_apache_felix_http_mbeansIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheFelixHttpProperties::getOrgApacheFelixHttpSessionTimeout() const
{
    return m_Org_apache_felix_http_session_timeout;
}


void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpSessionTimeout(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Org_apache_felix_http_session_timeout = value;
    m_Org_apache_felix_http_session_timeoutIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpSessionTimeoutIsSet() const
{
    return m_Org_apache_felix_http_session_timeoutIsSet;
}

void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_http_session_timeout()
{
    m_Org_apache_felix_http_session_timeoutIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheFelixHttpProperties::getOrgApacheFelixHttpJettyThreadpoolMax() const
{
    return m_Org_apache_felix_http_jetty_threadpool_max;
}


void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpJettyThreadpoolMax(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Org_apache_felix_http_jetty_threadpool_max = value;
    m_Org_apache_felix_http_jetty_threadpool_maxIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpJettyThreadpoolMaxIsSet() const
{
    return m_Org_apache_felix_http_jetty_threadpool_maxIsSet;
}

void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_http_jetty_threadpool_max()
{
    m_Org_apache_felix_http_jetty_threadpool_maxIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheFelixHttpProperties::getOrgApacheFelixHttpJettyAcceptors() const
{
    return m_Org_apache_felix_http_jetty_acceptors;
}


void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpJettyAcceptors(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Org_apache_felix_http_jetty_acceptors = value;
    m_Org_apache_felix_http_jetty_acceptorsIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpJettyAcceptorsIsSet() const
{
    return m_Org_apache_felix_http_jetty_acceptorsIsSet;
}

void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_http_jetty_acceptors()
{
    m_Org_apache_felix_http_jetty_acceptorsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheFelixHttpProperties::getOrgApacheFelixHttpJettySelectors() const
{
    return m_Org_apache_felix_http_jetty_selectors;
}


void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpJettySelectors(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Org_apache_felix_http_jetty_selectors = value;
    m_Org_apache_felix_http_jetty_selectorsIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpJettySelectorsIsSet() const
{
    return m_Org_apache_felix_http_jetty_selectorsIsSet;
}

void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_http_jetty_selectors()
{
    m_Org_apache_felix_http_jetty_selectorsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheFelixHttpProperties::getOrgApacheFelixHttpJettyHeaderBufferSize() const
{
    return m_Org_apache_felix_http_jetty_headerBufferSize;
}


void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpJettyHeaderBufferSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Org_apache_felix_http_jetty_headerBufferSize = value;
    m_Org_apache_felix_http_jetty_headerBufferSizeIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpJettyHeaderBufferSizeIsSet() const
{
    return m_Org_apache_felix_http_jetty_headerBufferSizeIsSet;
}

void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_http_jetty_headerBufferSize()
{
    m_Org_apache_felix_http_jetty_headerBufferSizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheFelixHttpProperties::getOrgApacheFelixHttpJettyRequestBufferSize() const
{
    return m_Org_apache_felix_http_jetty_requestBufferSize;
}


void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpJettyRequestBufferSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Org_apache_felix_http_jetty_requestBufferSize = value;
    m_Org_apache_felix_http_jetty_requestBufferSizeIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpJettyRequestBufferSizeIsSet() const
{
    return m_Org_apache_felix_http_jetty_requestBufferSizeIsSet;
}

void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_http_jetty_requestBufferSize()
{
    m_Org_apache_felix_http_jetty_requestBufferSizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheFelixHttpProperties::getOrgApacheFelixHttpJettyResponseBufferSize() const
{
    return m_Org_apache_felix_http_jetty_responseBufferSize;
}


void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpJettyResponseBufferSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Org_apache_felix_http_jetty_responseBufferSize = value;
    m_Org_apache_felix_http_jetty_responseBufferSizeIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpJettyResponseBufferSizeIsSet() const
{
    return m_Org_apache_felix_http_jetty_responseBufferSizeIsSet;
}

void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_http_jetty_responseBufferSize()
{
    m_Org_apache_felix_http_jetty_responseBufferSizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheFelixHttpProperties::getOrgApacheFelixHttpJettyMaxFormSize() const
{
    return m_Org_apache_felix_http_jetty_maxFormSize;
}


void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpJettyMaxFormSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Org_apache_felix_http_jetty_maxFormSize = value;
    m_Org_apache_felix_http_jetty_maxFormSizeIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpJettyMaxFormSizeIsSet() const
{
    return m_Org_apache_felix_http_jetty_maxFormSizeIsSet;
}

void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_http_jetty_maxFormSize()
{
    m_Org_apache_felix_http_jetty_maxFormSizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheFelixHttpProperties::getOrgApacheFelixHttpPathExclusions() const
{
    return m_Org_apache_felix_http_path_exclusions;
}


void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpPathExclusions(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Org_apache_felix_http_path_exclusions = value;
    m_Org_apache_felix_http_path_exclusionsIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpPathExclusionsIsSet() const
{
    return m_Org_apache_felix_http_path_exclusionsIsSet;
}

void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_http_path_exclusions()
{
    m_Org_apache_felix_http_path_exclusionsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheFelixHttpProperties::getOrgApacheFelixHttpsJettyCiphersuitesExcluded() const
{
    return m_Org_apache_felix_https_jetty_ciphersuites_excluded;
}


void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpsJettyCiphersuitesExcluded(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Org_apache_felix_https_jetty_ciphersuites_excluded = value;
    m_Org_apache_felix_https_jetty_ciphersuites_excludedIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpsJettyCiphersuitesExcludedIsSet() const
{
    return m_Org_apache_felix_https_jetty_ciphersuites_excludedIsSet;
}

void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_https_jetty_ciphersuites_excluded()
{
    m_Org_apache_felix_https_jetty_ciphersuites_excludedIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheFelixHttpProperties::getOrgApacheFelixHttpsJettyCiphersuitesIncluded() const
{
    return m_Org_apache_felix_https_jetty_ciphersuites_included;
}


void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpsJettyCiphersuitesIncluded(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Org_apache_felix_https_jetty_ciphersuites_included = value;
    m_Org_apache_felix_https_jetty_ciphersuites_includedIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpsJettyCiphersuitesIncludedIsSet() const
{
    return m_Org_apache_felix_https_jetty_ciphersuites_includedIsSet;
}

void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_https_jetty_ciphersuites_included()
{
    m_Org_apache_felix_https_jetty_ciphersuites_includedIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheFelixHttpProperties::getOrgApacheFelixHttpJettySendServerHeader() const
{
    return m_Org_apache_felix_http_jetty_sendServerHeader;
}


void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpJettySendServerHeader(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Org_apache_felix_http_jetty_sendServerHeader = value;
    m_Org_apache_felix_http_jetty_sendServerHeaderIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpJettySendServerHeaderIsSet() const
{
    return m_Org_apache_felix_http_jetty_sendServerHeaderIsSet;
}

void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_http_jetty_sendServerHeader()
{
    m_Org_apache_felix_http_jetty_sendServerHeaderIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheFelixHttpProperties::getOrgApacheFelixHttpsJettyProtocolsIncluded() const
{
    return m_Org_apache_felix_https_jetty_protocols_included;
}


void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpsJettyProtocolsIncluded(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Org_apache_felix_https_jetty_protocols_included = value;
    m_Org_apache_felix_https_jetty_protocols_includedIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpsJettyProtocolsIncludedIsSet() const
{
    return m_Org_apache_felix_https_jetty_protocols_includedIsSet;
}

void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_https_jetty_protocols_included()
{
    m_Org_apache_felix_https_jetty_protocols_includedIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheFelixHttpProperties::getOrgApacheFelixHttpsJettyProtocolsExcluded() const
{
    return m_Org_apache_felix_https_jetty_protocols_excluded;
}


void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpsJettyProtocolsExcluded(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Org_apache_felix_https_jetty_protocols_excluded = value;
    m_Org_apache_felix_https_jetty_protocols_excludedIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpsJettyProtocolsExcludedIsSet() const
{
    return m_Org_apache_felix_https_jetty_protocols_excludedIsSet;
}

void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_https_jetty_protocols_excluded()
{
    m_Org_apache_felix_https_jetty_protocols_excludedIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheFelixHttpProperties::getOrgApacheFelixProxyLoadBalancerConnectionEnable() const
{
    return m_Org_apache_felix_proxy_load_balancer_connection_enable;
}


void OrgApacheFelixHttpProperties::setOrgApacheFelixProxyLoadBalancerConnectionEnable(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Org_apache_felix_proxy_load_balancer_connection_enable = value;
    m_Org_apache_felix_proxy_load_balancer_connection_enableIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixProxyLoadBalancerConnectionEnableIsSet() const
{
    return m_Org_apache_felix_proxy_load_balancer_connection_enableIsSet;
}

void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_proxy_load_balancer_connection_enable()
{
    m_Org_apache_felix_proxy_load_balancer_connection_enableIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheFelixHttpProperties::getOrgApacheFelixHttpsJettyRenegotiateAllowed() const
{
    return m_Org_apache_felix_https_jetty_renegotiateAllowed;
}


void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpsJettyRenegotiateAllowed(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Org_apache_felix_https_jetty_renegotiateAllowed = value;
    m_Org_apache_felix_https_jetty_renegotiateAllowedIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpsJettyRenegotiateAllowedIsSet() const
{
    return m_Org_apache_felix_https_jetty_renegotiateAllowedIsSet;
}

void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_https_jetty_renegotiateAllowed()
{
    m_Org_apache_felix_https_jetty_renegotiateAllowedIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheFelixHttpProperties::getOrgApacheFelixHttpsJettySessionCookieHttpOnly() const
{
    return m_Org_apache_felix_https_jetty_session_cookie_httpOnly;
}


void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpsJettySessionCookieHttpOnly(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Org_apache_felix_https_jetty_session_cookie_httpOnly = value;
    m_Org_apache_felix_https_jetty_session_cookie_httpOnlyIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpsJettySessionCookieHttpOnlyIsSet() const
{
    return m_Org_apache_felix_https_jetty_session_cookie_httpOnlyIsSet;
}

void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_https_jetty_session_cookie_httpOnly()
{
    m_Org_apache_felix_https_jetty_session_cookie_httpOnlyIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheFelixHttpProperties::getOrgApacheFelixHttpsJettySessionCookieSecure() const
{
    return m_Org_apache_felix_https_jetty_session_cookie_secure;
}


void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpsJettySessionCookieSecure(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Org_apache_felix_https_jetty_session_cookie_secure = value;
    m_Org_apache_felix_https_jetty_session_cookie_secureIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpsJettySessionCookieSecureIsSet() const
{
    return m_Org_apache_felix_https_jetty_session_cookie_secureIsSet;
}

void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_https_jetty_session_cookie_secure()
{
    m_Org_apache_felix_https_jetty_session_cookie_secureIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheFelixHttpProperties::getOrgEclipseJettyServletSessionIdPathParameterName() const
{
    return m_Org_eclipse_jetty_servlet_SessionIdPathParameterName;
}


void OrgApacheFelixHttpProperties::setOrgEclipseJettyServletSessionIdPathParameterName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_eclipse_jetty_servlet_SessionIdPathParameterName = value;
    m_Org_eclipse_jetty_servlet_SessionIdPathParameterNameIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgEclipseJettyServletSessionIdPathParameterNameIsSet() const
{
    return m_Org_eclipse_jetty_servlet_SessionIdPathParameterNameIsSet;
}

void OrgApacheFelixHttpProperties::unsetOrg_eclipse_jetty_servlet_SessionIdPathParameterName()
{
    m_Org_eclipse_jetty_servlet_SessionIdPathParameterNameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheFelixHttpProperties::getOrgEclipseJettyServletCheckingRemoteSessionIdEncoding() const
{
    return m_Org_eclipse_jetty_servlet_CheckingRemoteSessionIdEncoding;
}


void OrgApacheFelixHttpProperties::setOrgEclipseJettyServletCheckingRemoteSessionIdEncoding(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Org_eclipse_jetty_servlet_CheckingRemoteSessionIdEncoding = value;
    m_Org_eclipse_jetty_servlet_CheckingRemoteSessionIdEncodingIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgEclipseJettyServletCheckingRemoteSessionIdEncodingIsSet() const
{
    return m_Org_eclipse_jetty_servlet_CheckingRemoteSessionIdEncodingIsSet;
}

void OrgApacheFelixHttpProperties::unsetOrg_eclipse_jetty_servlet_CheckingRemoteSessionIdEncoding()
{
    m_Org_eclipse_jetty_servlet_CheckingRemoteSessionIdEncodingIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheFelixHttpProperties::getOrgEclipseJettyServletSessionCookie() const
{
    return m_Org_eclipse_jetty_servlet_SessionCookie;
}


void OrgApacheFelixHttpProperties::setOrgEclipseJettyServletSessionCookie(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_eclipse_jetty_servlet_SessionCookie = value;
    m_Org_eclipse_jetty_servlet_SessionCookieIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgEclipseJettyServletSessionCookieIsSet() const
{
    return m_Org_eclipse_jetty_servlet_SessionCookieIsSet;
}

void OrgApacheFelixHttpProperties::unsetOrg_eclipse_jetty_servlet_SessionCookie()
{
    m_Org_eclipse_jetty_servlet_SessionCookieIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheFelixHttpProperties::getOrgEclipseJettyServletSessionDomain() const
{
    return m_Org_eclipse_jetty_servlet_SessionDomain;
}


void OrgApacheFelixHttpProperties::setOrgEclipseJettyServletSessionDomain(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_eclipse_jetty_servlet_SessionDomain = value;
    m_Org_eclipse_jetty_servlet_SessionDomainIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgEclipseJettyServletSessionDomainIsSet() const
{
    return m_Org_eclipse_jetty_servlet_SessionDomainIsSet;
}

void OrgApacheFelixHttpProperties::unsetOrg_eclipse_jetty_servlet_SessionDomain()
{
    m_Org_eclipse_jetty_servlet_SessionDomainIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheFelixHttpProperties::getOrgEclipseJettyServletSessionPath() const
{
    return m_Org_eclipse_jetty_servlet_SessionPath;
}


void OrgApacheFelixHttpProperties::setOrgEclipseJettyServletSessionPath(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_eclipse_jetty_servlet_SessionPath = value;
    m_Org_eclipse_jetty_servlet_SessionPathIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgEclipseJettyServletSessionPathIsSet() const
{
    return m_Org_eclipse_jetty_servlet_SessionPathIsSet;
}

void OrgApacheFelixHttpProperties::unsetOrg_eclipse_jetty_servlet_SessionPath()
{
    m_Org_eclipse_jetty_servlet_SessionPathIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheFelixHttpProperties::getOrgEclipseJettyServletMaxAge() const
{
    return m_Org_eclipse_jetty_servlet_MaxAge;
}


void OrgApacheFelixHttpProperties::setOrgEclipseJettyServletMaxAge(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Org_eclipse_jetty_servlet_MaxAge = value;
    m_Org_eclipse_jetty_servlet_MaxAgeIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgEclipseJettyServletMaxAgeIsSet() const
{
    return m_Org_eclipse_jetty_servlet_MaxAgeIsSet;
}

void OrgApacheFelixHttpProperties::unsetOrg_eclipse_jetty_servlet_MaxAge()
{
    m_Org_eclipse_jetty_servlet_MaxAgeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheFelixHttpProperties::getOrgApacheFelixHttpName() const
{
    return m_Org_apache_felix_http_name;
}


void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_felix_http_name = value;
    m_Org_apache_felix_http_nameIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpNameIsSet() const
{
    return m_Org_apache_felix_http_nameIsSet;
}

void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_http_name()
{
    m_Org_apache_felix_http_nameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheFelixHttpProperties::getOrgApacheFelixJettyGziphandlerEnable() const
{
    return m_Org_apache_felix_jetty_gziphandler_enable;
}


void OrgApacheFelixHttpProperties::setOrgApacheFelixJettyGziphandlerEnable(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Org_apache_felix_jetty_gziphandler_enable = value;
    m_Org_apache_felix_jetty_gziphandler_enableIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixJettyGziphandlerEnableIsSet() const
{
    return m_Org_apache_felix_jetty_gziphandler_enableIsSet;
}

void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_jetty_gziphandler_enable()
{
    m_Org_apache_felix_jetty_gziphandler_enableIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheFelixHttpProperties::getOrgApacheFelixJettyGzipMinGzipSize() const
{
    return m_Org_apache_felix_jetty_gzip_minGzipSize;
}


void OrgApacheFelixHttpProperties::setOrgApacheFelixJettyGzipMinGzipSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Org_apache_felix_jetty_gzip_minGzipSize = value;
    m_Org_apache_felix_jetty_gzip_minGzipSizeIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixJettyGzipMinGzipSizeIsSet() const
{
    return m_Org_apache_felix_jetty_gzip_minGzipSizeIsSet;
}

void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_jetty_gzip_minGzipSize()
{
    m_Org_apache_felix_jetty_gzip_minGzipSizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheFelixHttpProperties::getOrgApacheFelixJettyGzipCompressionLevel() const
{
    return m_Org_apache_felix_jetty_gzip_compressionLevel;
}


void OrgApacheFelixHttpProperties::setOrgApacheFelixJettyGzipCompressionLevel(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Org_apache_felix_jetty_gzip_compressionLevel = value;
    m_Org_apache_felix_jetty_gzip_compressionLevelIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixJettyGzipCompressionLevelIsSet() const
{
    return m_Org_apache_felix_jetty_gzip_compressionLevelIsSet;
}

void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_jetty_gzip_compressionLevel()
{
    m_Org_apache_felix_jetty_gzip_compressionLevelIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheFelixHttpProperties::getOrgApacheFelixJettyGzipInflateBufferSize() const
{
    return m_Org_apache_felix_jetty_gzip_inflateBufferSize;
}


void OrgApacheFelixHttpProperties::setOrgApacheFelixJettyGzipInflateBufferSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Org_apache_felix_jetty_gzip_inflateBufferSize = value;
    m_Org_apache_felix_jetty_gzip_inflateBufferSizeIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixJettyGzipInflateBufferSizeIsSet() const
{
    return m_Org_apache_felix_jetty_gzip_inflateBufferSizeIsSet;
}

void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_jetty_gzip_inflateBufferSize()
{
    m_Org_apache_felix_jetty_gzip_inflateBufferSizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheFelixHttpProperties::getOrgApacheFelixJettyGzipSyncFlush() const
{
    return m_Org_apache_felix_jetty_gzip_syncFlush;
}


void OrgApacheFelixHttpProperties::setOrgApacheFelixJettyGzipSyncFlush(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Org_apache_felix_jetty_gzip_syncFlush = value;
    m_Org_apache_felix_jetty_gzip_syncFlushIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixJettyGzipSyncFlushIsSet() const
{
    return m_Org_apache_felix_jetty_gzip_syncFlushIsSet;
}

void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_jetty_gzip_syncFlush()
{
    m_Org_apache_felix_jetty_gzip_syncFlushIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheFelixHttpProperties::getOrgApacheFelixJettyGzipExcludedUserAgents() const
{
    return m_Org_apache_felix_jetty_gzip_excludedUserAgents;
}


void OrgApacheFelixHttpProperties::setOrgApacheFelixJettyGzipExcludedUserAgents(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Org_apache_felix_jetty_gzip_excludedUserAgents = value;
    m_Org_apache_felix_jetty_gzip_excludedUserAgentsIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixJettyGzipExcludedUserAgentsIsSet() const
{
    return m_Org_apache_felix_jetty_gzip_excludedUserAgentsIsSet;
}

void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_jetty_gzip_excludedUserAgents()
{
    m_Org_apache_felix_jetty_gzip_excludedUserAgentsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheFelixHttpProperties::getOrgApacheFelixJettyGzipIncludedMethods() const
{
    return m_Org_apache_felix_jetty_gzip_includedMethods;
}


void OrgApacheFelixHttpProperties::setOrgApacheFelixJettyGzipIncludedMethods(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Org_apache_felix_jetty_gzip_includedMethods = value;
    m_Org_apache_felix_jetty_gzip_includedMethodsIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixJettyGzipIncludedMethodsIsSet() const
{
    return m_Org_apache_felix_jetty_gzip_includedMethodsIsSet;
}

void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_jetty_gzip_includedMethods()
{
    m_Org_apache_felix_jetty_gzip_includedMethodsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheFelixHttpProperties::getOrgApacheFelixJettyGzipExcludedMethods() const
{
    return m_Org_apache_felix_jetty_gzip_excludedMethods;
}


void OrgApacheFelixHttpProperties::setOrgApacheFelixJettyGzipExcludedMethods(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Org_apache_felix_jetty_gzip_excludedMethods = value;
    m_Org_apache_felix_jetty_gzip_excludedMethodsIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixJettyGzipExcludedMethodsIsSet() const
{
    return m_Org_apache_felix_jetty_gzip_excludedMethodsIsSet;
}

void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_jetty_gzip_excludedMethods()
{
    m_Org_apache_felix_jetty_gzip_excludedMethodsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheFelixHttpProperties::getOrgApacheFelixJettyGzipIncludedPaths() const
{
    return m_Org_apache_felix_jetty_gzip_includedPaths;
}


void OrgApacheFelixHttpProperties::setOrgApacheFelixJettyGzipIncludedPaths(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Org_apache_felix_jetty_gzip_includedPaths = value;
    m_Org_apache_felix_jetty_gzip_includedPathsIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixJettyGzipIncludedPathsIsSet() const
{
    return m_Org_apache_felix_jetty_gzip_includedPathsIsSet;
}

void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_jetty_gzip_includedPaths()
{
    m_Org_apache_felix_jetty_gzip_includedPathsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheFelixHttpProperties::getOrgApacheFelixJettyGzipExcludedPaths() const
{
    return m_Org_apache_felix_jetty_gzip_excludedPaths;
}


void OrgApacheFelixHttpProperties::setOrgApacheFelixJettyGzipExcludedPaths(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Org_apache_felix_jetty_gzip_excludedPaths = value;
    m_Org_apache_felix_jetty_gzip_excludedPathsIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixJettyGzipExcludedPathsIsSet() const
{
    return m_Org_apache_felix_jetty_gzip_excludedPathsIsSet;
}

void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_jetty_gzip_excludedPaths()
{
    m_Org_apache_felix_jetty_gzip_excludedPathsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheFelixHttpProperties::getOrgApacheFelixJettyGzipIncludedMimeTypes() const
{
    return m_Org_apache_felix_jetty_gzip_includedMimeTypes;
}


void OrgApacheFelixHttpProperties::setOrgApacheFelixJettyGzipIncludedMimeTypes(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Org_apache_felix_jetty_gzip_includedMimeTypes = value;
    m_Org_apache_felix_jetty_gzip_includedMimeTypesIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixJettyGzipIncludedMimeTypesIsSet() const
{
    return m_Org_apache_felix_jetty_gzip_includedMimeTypesIsSet;
}

void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_jetty_gzip_includedMimeTypes()
{
    m_Org_apache_felix_jetty_gzip_includedMimeTypesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheFelixHttpProperties::getOrgApacheFelixJettyGzipExcludedMimeTypes() const
{
    return m_Org_apache_felix_jetty_gzip_excludedMimeTypes;
}


void OrgApacheFelixHttpProperties::setOrgApacheFelixJettyGzipExcludedMimeTypes(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Org_apache_felix_jetty_gzip_excludedMimeTypes = value;
    m_Org_apache_felix_jetty_gzip_excludedMimeTypesIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixJettyGzipExcludedMimeTypesIsSet() const
{
    return m_Org_apache_felix_jetty_gzip_excludedMimeTypesIsSet;
}

void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_jetty_gzip_excludedMimeTypes()
{
    m_Org_apache_felix_jetty_gzip_excludedMimeTypesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheFelixHttpProperties::getOrgApacheFelixHttpSessionInvalidate() const
{
    return m_Org_apache_felix_http_session_invalidate;
}


void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpSessionInvalidate(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Org_apache_felix_http_session_invalidate = value;
    m_Org_apache_felix_http_session_invalidateIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpSessionInvalidateIsSet() const
{
    return m_Org_apache_felix_http_session_invalidateIsSet;
}

void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_http_session_invalidate()
{
    m_Org_apache_felix_http_session_invalidateIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheFelixHttpProperties::getOrgApacheFelixHttpSessionUniqueid() const
{
    return m_Org_apache_felix_http_session_uniqueid;
}


void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpSessionUniqueid(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Org_apache_felix_http_session_uniqueid = value;
    m_Org_apache_felix_http_session_uniqueidIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpSessionUniqueidIsSet() const
{
    return m_Org_apache_felix_http_session_uniqueidIsSet;
}

void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_http_session_uniqueid()
{
    m_Org_apache_felix_http_session_uniqueidIsSet = false;
}

}
}
}
}

