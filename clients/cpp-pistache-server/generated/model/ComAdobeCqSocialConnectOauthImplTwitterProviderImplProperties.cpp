/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties::ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties()
{
    m_Oauth_provider_idIsSet = false;
    m_Oauth_cloud_config_rootIsSet = false;
    m_Provider_config_rootIsSet = false;
    m_Provider_config_user_folderIsSet = false;
    m_Provider_config_twitter_enable_paramsIsSet = false;
    m_Provider_config_twitter_paramsIsSet = false;
    m_Provider_config_refresh_userdata_enabledIsSet = false;
    
}

ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties::~ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties()
{
}

void ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Oauth_provider_idIsSet)
    {
        val["oauth.provider.id"] = ModelBase::toJson(m_Oauth_provider_id);
    }
    if(m_Oauth_cloud_config_rootIsSet)
    {
        val["oauth.cloud.config.root"] = ModelBase::toJson(m_Oauth_cloud_config_root);
    }
    if(m_Provider_config_rootIsSet)
    {
        val["provider.config.root"] = ModelBase::toJson(m_Provider_config_root);
    }
    if(m_Provider_config_user_folderIsSet)
    {
        val["provider.config.user.folder"] = ModelBase::toJson(m_Provider_config_user_folder);
    }
    if(m_Provider_config_twitter_enable_paramsIsSet)
    {
        val["provider.config.twitter.enable.params"] = ModelBase::toJson(m_Provider_config_twitter_enable_params);
    }
    if(m_Provider_config_twitter_paramsIsSet)
    {
        val["provider.config.twitter.params"] = ModelBase::toJson(m_Provider_config_twitter_params);
    }
    if(m_Provider_config_refresh_userdata_enabledIsSet)
    {
        val["provider.config.refresh.userdata.enabled"] = ModelBase::toJson(m_Provider_config_refresh_userdata_enabled);
    }
    

    return val;
}

void ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties::fromJson(nlohmann::json& val)
{
    if(val.find("oauth.provider.id") != val.end())
    {
        if(!val["oauth.provider.id"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["oauth.provider.id"]);
            setOauthProviderId( newItem );
        }
        
    }
    if(val.find("oauth.cloud.config.root") != val.end())
    {
        if(!val["oauth.cloud.config.root"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["oauth.cloud.config.root"]);
            setOauthCloudConfigRoot( newItem );
        }
        
    }
    if(val.find("provider.config.root") != val.end())
    {
        if(!val["provider.config.root"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["provider.config.root"]);
            setProviderConfigRoot( newItem );
        }
        
    }
    if(val.find("provider.config.user.folder") != val.end())
    {
        if(!val["provider.config.user.folder"].is_null())
        {
            ConfigNodePropertyDropDown newItem;
            newItem.fromJson(val["provider.config.user.folder"]);
            setProviderConfigUserFolder( newItem );
        }
        
    }
    if(val.find("provider.config.twitter.enable.params") != val.end())
    {
        if(!val["provider.config.twitter.enable.params"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["provider.config.twitter.enable.params"]);
            setProviderConfigTwitterEnableParams( newItem );
        }
        
    }
    if(val.find("provider.config.twitter.params") != val.end())
    {
        if(!val["provider.config.twitter.params"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["provider.config.twitter.params"]);
            setProviderConfigTwitterParams( newItem );
        }
        
    }
    if(val.find("provider.config.refresh.userdata.enabled") != val.end())
    {
        if(!val["provider.config.refresh.userdata.enabled"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["provider.config.refresh.userdata.enabled"]);
            setProviderConfigRefreshUserdataEnabled( newItem );
        }
        
    }
    
}


ConfigNodePropertyString ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties::getOauthProviderId() const
{
    return m_Oauth_provider_id;
}
void ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties::setOauthProviderId(ConfigNodePropertyString const& value)
{
    m_Oauth_provider_id = value;
    m_Oauth_provider_idIsSet = true;
}
bool ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties::oauthProviderIdIsSet() const
{
    return m_Oauth_provider_idIsSet;
}
void ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties::unsetOauth_provider_id()
{
    m_Oauth_provider_idIsSet = false;
}
ConfigNodePropertyString ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties::getOauthCloudConfigRoot() const
{
    return m_Oauth_cloud_config_root;
}
void ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties::setOauthCloudConfigRoot(ConfigNodePropertyString const& value)
{
    m_Oauth_cloud_config_root = value;
    m_Oauth_cloud_config_rootIsSet = true;
}
bool ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties::oauthCloudConfigRootIsSet() const
{
    return m_Oauth_cloud_config_rootIsSet;
}
void ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties::unsetOauth_cloud_config_root()
{
    m_Oauth_cloud_config_rootIsSet = false;
}
ConfigNodePropertyString ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties::getProviderConfigRoot() const
{
    return m_Provider_config_root;
}
void ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties::setProviderConfigRoot(ConfigNodePropertyString const& value)
{
    m_Provider_config_root = value;
    m_Provider_config_rootIsSet = true;
}
bool ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties::providerConfigRootIsSet() const
{
    return m_Provider_config_rootIsSet;
}
void ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties::unsetProvider_config_root()
{
    m_Provider_config_rootIsSet = false;
}
ConfigNodePropertyDropDown ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties::getProviderConfigUserFolder() const
{
    return m_Provider_config_user_folder;
}
void ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties::setProviderConfigUserFolder(ConfigNodePropertyDropDown const& value)
{
    m_Provider_config_user_folder = value;
    m_Provider_config_user_folderIsSet = true;
}
bool ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties::providerConfigUserFolderIsSet() const
{
    return m_Provider_config_user_folderIsSet;
}
void ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties::unsetProvider_config_user_folder()
{
    m_Provider_config_user_folderIsSet = false;
}
ConfigNodePropertyBoolean ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties::getProviderConfigTwitterEnableParams() const
{
    return m_Provider_config_twitter_enable_params;
}
void ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties::setProviderConfigTwitterEnableParams(ConfigNodePropertyBoolean const& value)
{
    m_Provider_config_twitter_enable_params = value;
    m_Provider_config_twitter_enable_paramsIsSet = true;
}
bool ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties::providerConfigTwitterEnableParamsIsSet() const
{
    return m_Provider_config_twitter_enable_paramsIsSet;
}
void ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties::unsetProvider_config_twitter_enable_params()
{
    m_Provider_config_twitter_enable_paramsIsSet = false;
}
ConfigNodePropertyArray ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties::getProviderConfigTwitterParams() const
{
    return m_Provider_config_twitter_params;
}
void ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties::setProviderConfigTwitterParams(ConfigNodePropertyArray const& value)
{
    m_Provider_config_twitter_params = value;
    m_Provider_config_twitter_paramsIsSet = true;
}
bool ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties::providerConfigTwitterParamsIsSet() const
{
    return m_Provider_config_twitter_paramsIsSet;
}
void ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties::unsetProvider_config_twitter_params()
{
    m_Provider_config_twitter_paramsIsSet = false;
}
ConfigNodePropertyBoolean ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties::getProviderConfigRefreshUserdataEnabled() const
{
    return m_Provider_config_refresh_userdata_enabled;
}
void ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties::setProviderConfigRefreshUserdataEnabled(ConfigNodePropertyBoolean const& value)
{
    m_Provider_config_refresh_userdata_enabled = value;
    m_Provider_config_refresh_userdata_enabledIsSet = true;
}
bool ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties::providerConfigRefreshUserdataEnabledIsSet() const
{
    return m_Provider_config_refresh_userdata_enabledIsSet;
}
void ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties::unsetProvider_config_refresh_userdata_enabled()
{
    m_Provider_config_refresh_userdata_enabledIsSet = false;
}

}
}
}
}

