/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties()
{
    m_ThreadPoolSizeIsSet = false;
    m_DelayTimeIsSet = false;
    m_WorkerSleepTimeIsSet = false;
    
}

ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::~ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties()
{
}

void ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_ThreadPoolSizeIsSet)
    {
        val["threadPoolSize"] = ModelBase::toJson(m_ThreadPoolSize);
    }
    if(m_DelayTimeIsSet)
    {
        val["delayTime"] = ModelBase::toJson(m_DelayTime);
    }
    if(m_WorkerSleepTimeIsSet)
    {
        val["workerSleepTime"] = ModelBase::toJson(m_WorkerSleepTime);
    }
    

    return val;
}

void ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::fromJson(nlohmann::json& val)
{
    if(val.find("threadPoolSize") != val.end())
    {
        if(!val["threadPoolSize"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["threadPoolSize"]);
            setThreadPoolSize( newItem );
        }
        
    }
    if(val.find("delayTime") != val.end())
    {
        if(!val["delayTime"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["delayTime"]);
            setDelayTime( newItem );
        }
        
    }
    if(val.find("workerSleepTime") != val.end())
    {
        if(!val["workerSleepTime"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["workerSleepTime"]);
            setWorkerSleepTime( newItem );
        }
        
    }
    
}


ConfigNodePropertyInteger ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::getThreadPoolSize() const
{
    return m_ThreadPoolSize;
}
void ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::setThreadPoolSize(ConfigNodePropertyInteger const& value)
{
    m_ThreadPoolSize = value;
    m_ThreadPoolSizeIsSet = true;
}
bool ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::threadPoolSizeIsSet() const
{
    return m_ThreadPoolSizeIsSet;
}
void ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::unsetThreadPoolSize()
{
    m_ThreadPoolSizeIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::getDelayTime() const
{
    return m_DelayTime;
}
void ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::setDelayTime(ConfigNodePropertyInteger const& value)
{
    m_DelayTime = value;
    m_DelayTimeIsSet = true;
}
bool ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::delayTimeIsSet() const
{
    return m_DelayTimeIsSet;
}
void ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::unsetDelayTime()
{
    m_DelayTimeIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::getWorkerSleepTime() const
{
    return m_WorkerSleepTime;
}
void ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::setWorkerSleepTime(ConfigNodePropertyInteger const& value)
{
    m_WorkerSleepTime = value;
    m_WorkerSleepTimeIsSet = true;
}
bool ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::workerSleepTimeIsSet() const
{
    return m_WorkerSleepTimeIsSet;
}
void ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::unsetWorkerSleepTime()
{
    m_WorkerSleepTimeIsSet = false;
}

}
}
}
}

