/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeCqSocialUserImplTransportHttpToPublisherProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeCqSocialUserImplTransportHttpToPublisherProperties::ComAdobeCqSocialUserImplTransportHttpToPublisherProperties()
{
    m_EnableIsSet = false;
    m_Agent_configurationIsSet = false;
    m_Context_pathIsSet = false;
    m_Disabled_cipher_suitesIsSet = false;
    m_Enabled_cipher_suitesIsSet = false;
    
}

ComAdobeCqSocialUserImplTransportHttpToPublisherProperties::~ComAdobeCqSocialUserImplTransportHttpToPublisherProperties()
{
}

void ComAdobeCqSocialUserImplTransportHttpToPublisherProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeCqSocialUserImplTransportHttpToPublisherProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_EnableIsSet)
    {
        val["enable"] = ModelBase::toJson(m_Enable);
    }
    if(m_Agent_configurationIsSet)
    {
        val["agent.configuration"] = ModelBase::toJson(m_Agent_configuration);
    }
    if(m_Context_pathIsSet)
    {
        val["context.path"] = ModelBase::toJson(m_Context_path);
    }
    if(m_Disabled_cipher_suitesIsSet)
    {
        val["disabled.cipher.suites"] = ModelBase::toJson(m_Disabled_cipher_suites);
    }
    if(m_Enabled_cipher_suitesIsSet)
    {
        val["enabled.cipher.suites"] = ModelBase::toJson(m_Enabled_cipher_suites);
    }
    

    return val;
}

void ComAdobeCqSocialUserImplTransportHttpToPublisherProperties::fromJson(nlohmann::json& val)
{
    if(val.find("enable") != val.end())
    {
        if(!val["enable"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["enable"]);
            setEnable( newItem );
        }
        
    }
    if(val.find("agent.configuration") != val.end())
    {
        if(!val["agent.configuration"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["agent.configuration"]);
            setAgentConfiguration( newItem );
        }
        
    }
    if(val.find("context.path") != val.end())
    {
        if(!val["context.path"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["context.path"]);
            setContextPath( newItem );
        }
        
    }
    if(val.find("disabled.cipher.suites") != val.end())
    {
        if(!val["disabled.cipher.suites"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["disabled.cipher.suites"]);
            setDisabledCipherSuites( newItem );
        }
        
    }
    if(val.find("enabled.cipher.suites") != val.end())
    {
        if(!val["enabled.cipher.suites"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["enabled.cipher.suites"]);
            setEnabledCipherSuites( newItem );
        }
        
    }
    
}


ConfigNodePropertyBoolean ComAdobeCqSocialUserImplTransportHttpToPublisherProperties::getEnable() const
{
    return m_Enable;
}
void ComAdobeCqSocialUserImplTransportHttpToPublisherProperties::setEnable(ConfigNodePropertyBoolean const& value)
{
    m_Enable = value;
    m_EnableIsSet = true;
}
bool ComAdobeCqSocialUserImplTransportHttpToPublisherProperties::enableIsSet() const
{
    return m_EnableIsSet;
}
void ComAdobeCqSocialUserImplTransportHttpToPublisherProperties::unsetEnable()
{
    m_EnableIsSet = false;
}
ConfigNodePropertyArray ComAdobeCqSocialUserImplTransportHttpToPublisherProperties::getAgentConfiguration() const
{
    return m_Agent_configuration;
}
void ComAdobeCqSocialUserImplTransportHttpToPublisherProperties::setAgentConfiguration(ConfigNodePropertyArray const& value)
{
    m_Agent_configuration = value;
    m_Agent_configurationIsSet = true;
}
bool ComAdobeCqSocialUserImplTransportHttpToPublisherProperties::agentConfigurationIsSet() const
{
    return m_Agent_configurationIsSet;
}
void ComAdobeCqSocialUserImplTransportHttpToPublisherProperties::unsetAgent_configuration()
{
    m_Agent_configurationIsSet = false;
}
ConfigNodePropertyString ComAdobeCqSocialUserImplTransportHttpToPublisherProperties::getContextPath() const
{
    return m_Context_path;
}
void ComAdobeCqSocialUserImplTransportHttpToPublisherProperties::setContextPath(ConfigNodePropertyString const& value)
{
    m_Context_path = value;
    m_Context_pathIsSet = true;
}
bool ComAdobeCqSocialUserImplTransportHttpToPublisherProperties::contextPathIsSet() const
{
    return m_Context_pathIsSet;
}
void ComAdobeCqSocialUserImplTransportHttpToPublisherProperties::unsetContext_path()
{
    m_Context_pathIsSet = false;
}
ConfigNodePropertyArray ComAdobeCqSocialUserImplTransportHttpToPublisherProperties::getDisabledCipherSuites() const
{
    return m_Disabled_cipher_suites;
}
void ComAdobeCqSocialUserImplTransportHttpToPublisherProperties::setDisabledCipherSuites(ConfigNodePropertyArray const& value)
{
    m_Disabled_cipher_suites = value;
    m_Disabled_cipher_suitesIsSet = true;
}
bool ComAdobeCqSocialUserImplTransportHttpToPublisherProperties::disabledCipherSuitesIsSet() const
{
    return m_Disabled_cipher_suitesIsSet;
}
void ComAdobeCqSocialUserImplTransportHttpToPublisherProperties::unsetDisabled_cipher_suites()
{
    m_Disabled_cipher_suitesIsSet = false;
}
ConfigNodePropertyArray ComAdobeCqSocialUserImplTransportHttpToPublisherProperties::getEnabledCipherSuites() const
{
    return m_Enabled_cipher_suites;
}
void ComAdobeCqSocialUserImplTransportHttpToPublisherProperties::setEnabledCipherSuites(ConfigNodePropertyArray const& value)
{
    m_Enabled_cipher_suites = value;
    m_Enabled_cipher_suitesIsSet = true;
}
bool ComAdobeCqSocialUserImplTransportHttpToPublisherProperties::enabledCipherSuitesIsSet() const
{
    return m_Enabled_cipher_suitesIsSet;
}
void ComAdobeCqSocialUserImplTransportHttpToPublisherProperties::unsetEnabled_cipher_suites()
{
    m_Enabled_cipher_suitesIsSet = false;
}

}
}
}
}

