/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComDayCqDamCoreImplServletHealthCheckServletProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComDayCqDamCoreImplServletHealthCheckServletProperties::ComDayCqDamCoreImplServletHealthCheckServletProperties()
{
    m_Cq_dam_sync_workflow_idIsSet = false;
    m_Cq_dam_sync_folder_typesIsSet = false;
    
}

ComDayCqDamCoreImplServletHealthCheckServletProperties::~ComDayCqDamCoreImplServletHealthCheckServletProperties()
{
}

void ComDayCqDamCoreImplServletHealthCheckServletProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComDayCqDamCoreImplServletHealthCheckServletProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Cq_dam_sync_workflow_idIsSet)
    {
        val["cq.dam.sync.workflow.id"] = ModelBase::toJson(m_Cq_dam_sync_workflow_id);
    }
    if(m_Cq_dam_sync_folder_typesIsSet)
    {
        val["cq.dam.sync.folder.types"] = ModelBase::toJson(m_Cq_dam_sync_folder_types);
    }
    

    return val;
}

void ComDayCqDamCoreImplServletHealthCheckServletProperties::fromJson(nlohmann::json& val)
{
    if(val.find("cq.dam.sync.workflow.id") != val.end())
    {
        if(!val["cq.dam.sync.workflow.id"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["cq.dam.sync.workflow.id"]);
            setCqDamSyncWorkflowId( newItem );
        }
        
    }
    if(val.find("cq.dam.sync.folder.types") != val.end())
    {
        if(!val["cq.dam.sync.folder.types"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["cq.dam.sync.folder.types"]);
            setCqDamSyncFolderTypes( newItem );
        }
        
    }
    
}


ConfigNodePropertyString ComDayCqDamCoreImplServletHealthCheckServletProperties::getCqDamSyncWorkflowId() const
{
    return m_Cq_dam_sync_workflow_id;
}
void ComDayCqDamCoreImplServletHealthCheckServletProperties::setCqDamSyncWorkflowId(ConfigNodePropertyString const& value)
{
    m_Cq_dam_sync_workflow_id = value;
    m_Cq_dam_sync_workflow_idIsSet = true;
}
bool ComDayCqDamCoreImplServletHealthCheckServletProperties::cqDamSyncWorkflowIdIsSet() const
{
    return m_Cq_dam_sync_workflow_idIsSet;
}
void ComDayCqDamCoreImplServletHealthCheckServletProperties::unsetCq_dam_sync_workflow_id()
{
    m_Cq_dam_sync_workflow_idIsSet = false;
}
ConfigNodePropertyArray ComDayCqDamCoreImplServletHealthCheckServletProperties::getCqDamSyncFolderTypes() const
{
    return m_Cq_dam_sync_folder_types;
}
void ComDayCqDamCoreImplServletHealthCheckServletProperties::setCqDamSyncFolderTypes(ConfigNodePropertyArray const& value)
{
    m_Cq_dam_sync_folder_types = value;
    m_Cq_dam_sync_folder_typesIsSet = true;
}
bool ComDayCqDamCoreImplServletHealthCheckServletProperties::cqDamSyncFolderTypesIsSet() const
{
    return m_Cq_dam_sync_folder_typesIsSet;
}
void ComDayCqDamCoreImplServletHealthCheckServletProperties::unsetCq_dam_sync_folder_types()
{
    m_Cq_dam_sync_folder_typesIsSet = false;
}

}
}
}
}

