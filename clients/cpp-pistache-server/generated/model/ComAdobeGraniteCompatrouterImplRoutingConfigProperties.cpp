/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeGraniteCompatrouterImplRoutingConfigProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeGraniteCompatrouterImplRoutingConfigProperties::ComAdobeGraniteCompatrouterImplRoutingConfigProperties()
{
    m_IdIsSet = false;
    m_CompatPathIsSet = false;
    m_NewPathIsSet = false;
    
}

ComAdobeGraniteCompatrouterImplRoutingConfigProperties::~ComAdobeGraniteCompatrouterImplRoutingConfigProperties()
{
}

void ComAdobeGraniteCompatrouterImplRoutingConfigProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeGraniteCompatrouterImplRoutingConfigProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_IdIsSet)
    {
        val["id"] = ModelBase::toJson(m_Id);
    }
    if(m_CompatPathIsSet)
    {
        val["compatPath"] = ModelBase::toJson(m_CompatPath);
    }
    if(m_NewPathIsSet)
    {
        val["newPath"] = ModelBase::toJson(m_NewPath);
    }
    

    return val;
}

void ComAdobeGraniteCompatrouterImplRoutingConfigProperties::fromJson(nlohmann::json& val)
{
    if(val.find("id") != val.end())
    {
        if(!val["id"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["id"]);
            setId( newItem );
        }
        
    }
    if(val.find("compatPath") != val.end())
    {
        if(!val["compatPath"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["compatPath"]);
            setCompatPath( newItem );
        }
        
    }
    if(val.find("newPath") != val.end())
    {
        if(!val["newPath"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["newPath"]);
            setNewPath( newItem );
        }
        
    }
    
}


ConfigNodePropertyString ComAdobeGraniteCompatrouterImplRoutingConfigProperties::getId() const
{
    return m_Id;
}
void ComAdobeGraniteCompatrouterImplRoutingConfigProperties::setId(ConfigNodePropertyString const& value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool ComAdobeGraniteCompatrouterImplRoutingConfigProperties::idIsSet() const
{
    return m_IdIsSet;
}
void ComAdobeGraniteCompatrouterImplRoutingConfigProperties::unsetId()
{
    m_IdIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteCompatrouterImplRoutingConfigProperties::getCompatPath() const
{
    return m_CompatPath;
}
void ComAdobeGraniteCompatrouterImplRoutingConfigProperties::setCompatPath(ConfigNodePropertyString const& value)
{
    m_CompatPath = value;
    m_CompatPathIsSet = true;
}
bool ComAdobeGraniteCompatrouterImplRoutingConfigProperties::compatPathIsSet() const
{
    return m_CompatPathIsSet;
}
void ComAdobeGraniteCompatrouterImplRoutingConfigProperties::unsetCompatPath()
{
    m_CompatPathIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteCompatrouterImplRoutingConfigProperties::getNewPath() const
{
    return m_NewPath;
}
void ComAdobeGraniteCompatrouterImplRoutingConfigProperties::setNewPath(ConfigNodePropertyString const& value)
{
    m_NewPath = value;
    m_NewPathIsSet = true;
}
bool ComAdobeGraniteCompatrouterImplRoutingConfigProperties::newPathIsSet() const
{
    return m_NewPathIsSet;
}
void ComAdobeGraniteCompatrouterImplRoutingConfigProperties::unsetNewPath()
{
    m_NewPathIsSet = false;
}

}
}
}
}

